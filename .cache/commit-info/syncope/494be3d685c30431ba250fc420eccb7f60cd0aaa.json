{"sha":"494be3d685c30431ba250fc420eccb7f60cd0aaa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ5NGJlM2Q2ODVjMzA0MzFiYTI1MGZjNDIwZWNjYjdmNjBjZDBhYWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-01T11:36:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-01T11:36:31Z"},"message":"[SYNCOPE-1410] Split Entitlements between IdRepo / IdM","tree":{"sha":"babf18b1fb2c5b6f620985d3f30806d16b7f2088","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/babf18b1fb2c5b6f620985d3f30806d16b7f2088"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/494be3d685c30431ba250fc420eccb7f60cd0aaa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/494be3d685c30431ba250fc420eccb7f60cd0aaa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/494be3d685c30431ba250fc420eccb7f60cd0aaa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/494be3d685c30431ba250fc420eccb7f60cd0aaa/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"71e98485d30eff294e07624ea9a15ac83010a5c2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/71e98485d30eff294e07624ea9a15ac83010a5c2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/71e98485d30eff294e07624ea9a15ac83010a5c2"}],"stats":{"total":1605,"additions":860,"deletions":745},"files":[{"sha":"5e36f5709ec5a2f90fd2a30873245f23b936ed9e","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n@@ -90,7 +90,7 @@ private void afterAuthentication(final String username) {\n         try {\n             selfTO = client.self().getRight();\n         } catch (ForbiddenException e) {\n-            LOG.warn(\"Could not read self(), probably in a {} scenario\", StandardEntitlement.MUST_CHANGE_PASSWORD, e);\n+            LOG.warn(\"Could not read self(), probably in a {} scenario\", IdRepoEntitlement.MUST_CHANGE_PASSWORD, e);\n \n             selfTO = new UserTO();\n             selfTO.setUsername(username);"},{"sha":"fd665654c21456d1b113e9876b8e7072a24efd71","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMAnyDirectoryPanelAditionalActionLinksProvider.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAditionalActionLinksProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAditionalActionLinksProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAditionalActionLinksProvider.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.model.CompoundPropertyModel;\n@@ -73,7 +73,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 modal.show(true);\n             }\n         }, ActionLink.ActionType.ENABLE);\n-        enable.setEntitlements(StandardEntitlement.USER_UPDATE);\n+        enable.setEntitlements(IdRepoEntitlement.USER_UPDATE);\n         enable.setOnConfirm(false);\n         enable.setRealms(realm, modelObject.getDynRealms());\n         actions.add(enable);\n@@ -101,7 +101,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n             }\n         }, ActionLink.ActionType.MANAGE_RESOURCES);\n         manageResources.setEntitlements(\n-                String.format(\"%s,%s\", StandardEntitlement.USER_READ, StandardEntitlement.USER_UPDATE));\n+                String.format(\"%s,%s\", IdRepoEntitlement.USER_READ, IdRepoEntitlement.USER_UPDATE));\n         manageResources.setOnConfirm(false);\n         manageResources.setRealms(realm, modelObject.getDynRealms());\n         actions.add(manageResources);\n@@ -142,7 +142,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n             }\n         }, ActionLink.ActionType.MANAGE_RESOURCES);\n         manageResources.setEntitlements(\n-                String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE));\n+                String.format(\"%s,%s\", IdRepoEntitlement.GROUP_READ, IdRepoEntitlement.GROUP_UPDATE));\n         manageResources.setOnConfirm(false);\n         manageResources.setRealms(realm, modelObject.getDynRealms());\n         actions.add(manageResources);"},{"sha":"9d606877cffbd2912cbad55d8795d1fc770a8d75","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMStatusProvider.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMStatusProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMStatusProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMStatusProvider.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -18,15 +18,19 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n+import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.client.console.panels.ListViewPanel;\n import org.apache.syncope.client.ui.commons.status.ConnObjectWrapper;\n import org.apache.syncope.client.console.status.ReconStatusUtils;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n \n public class IdMStatusProvider implements StatusProvider {\n \n@@ -44,4 +48,12 @@ public List<Triple<ConnObjectTO, ConnObjectWrapper, String>> get(\n                 null)).\n                 collect(Collectors.toList());\n     }\n+\n+    @Override\n+    public <T extends Serializable> void addConnObjectLink(\n+            final ListViewPanel.Builder<T> builder,\n+            final ActionLink<T> connObjectLink) {\n+\n+        builder.addAction(connObjectLink, ActionLink.ActionType.VIEW, IdMEntitlement.RESOURCE_GET_CONNOBJECT);\n+    }\n }"},{"sha":"d41bf5963b328f6e2f23dfb5d45c7873d5dcfd89","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.IEvent;\n@@ -117,7 +117,7 @@ public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryCon\n                 viewConfiguration(modelObject, target);\n                 target.add(modal);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.CONNECTOR_HISTORY_LIST);\n+        }, ActionLink.ActionType.VIEW, IdMEntitlement.CONNECTOR_HISTORY_LIST);\n \n         // -- restore\n         panel.add(new ActionLink<ConnInstanceHistoryConfTO>() {\n@@ -137,7 +137,7 @@ public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryCon\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.RESTORE, StandardEntitlement.CONNECTOR_HISTORY_RESTORE);\n+        }, ActionLink.ActionType.RESTORE, IdMEntitlement.CONNECTOR_HISTORY_RESTORE);\n \n         // -- delete\n         panel.add(new ActionLink<ConnInstanceHistoryConfTO>() {\n@@ -158,7 +158,7 @@ public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryCon\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.CONNECTOR_HISTORY_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdMEntitlement.CONNECTOR_HISTORY_DELETE, true);\n \n         return panel;\n     }"},{"sha":"8ad6d18362af4d5a0763bb426555df43d8b46799","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -85,7 +85,7 @@ protected Component getValueComponent(final String key, final ConnObjectTO bean)\n             public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObject) {\n                 viewConnObject(modelObject, target);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.RESOURCE_GET_CONNOBJECT).\n+        }, ActionLink.ActionType.VIEW, IdMEntitlement.RESOURCE_GET_CONNOBJECT).\n                 setItems(listOfItems).\n                 includes(ConnIdSpecialName.UID,\n                         ConnIdSpecialName.NAME,"},{"sha":"9c67a907f7faebe3a08f30651a3a45309ac1ac22","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -69,7 +69,8 @@\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -97,7 +98,7 @@ public RemediationDirectoryPanel(final String id, final PageReference pageRefere\n \n         initResultTable();\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.REMEDIATION_REMEDY);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdMEntitlement.REMEDIATION_REMEDY);\n     }\n \n     @Override\n@@ -135,15 +136,15 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                 modal.show(true);\n                 target.add(modal);\n             }\n-        }, ActionLink.ActionType.VIEW_DETAILS, StandardEntitlement.REMEDIATION_READ);\n+        }, ActionLink.ActionType.VIEW_DETAILS, IdMEntitlement.REMEDIATION_READ);\n \n         if (model.getObject().getOperation() == ResourceOperation.DELETE) {\n             String entitlements = StringUtils.join(new String[] {\n-                StandardEntitlement.REMEDIATION_REMEDY,\n+                IdMEntitlement.REMEDIATION_REMEDY,\n                 AnyTypeKind.USER.name().equals(model.getObject().getAnyType())\n-                ? StandardEntitlement.USER_DELETE\n+                ? IdRepoEntitlement.USER_DELETE\n                 : AnyTypeKind.GROUP.name().equals(model.getObject().getAnyType())\n-                ? StandardEntitlement.GROUP_DELETE\n+                ? IdRepoEntitlement.GROUP_DELETE\n                 : AnyEntitlement.DELETE.getFor(model.getObject().getAnyType()) }, \",\");\n \n             panel.add(new ActionLink<RemediationTO>() {\n@@ -167,18 +168,18 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n         } else {\n             String entitlements = model.getObject().getOperation() == ResourceOperation.CREATE\n                     ? StringUtils.join(new String[] {\n-                StandardEntitlement.REMEDIATION_REMEDY,\n+                IdMEntitlement.REMEDIATION_REMEDY,\n                 AnyTypeKind.USER.name().equals(model.getObject().getAnyType())\n-                ? StandardEntitlement.USER_CREATE\n+                ? IdRepoEntitlement.USER_CREATE\n                 : AnyTypeKind.GROUP.name().equals(model.getObject().getAnyType())\n-                ? StandardEntitlement.GROUP_CREATE\n+                ? IdRepoEntitlement.GROUP_CREATE\n                 : AnyEntitlement.CREATE.getFor(model.getObject().getAnyType()) }, \",\")\n                     : StringUtils.join(new String[] {\n-                StandardEntitlement.REMEDIATION_REMEDY,\n+                IdMEntitlement.REMEDIATION_REMEDY,\n                 AnyTypeKind.USER.name().equals(model.getObject().getAnyType())\n-                ? StandardEntitlement.USER_UPDATE\n+                ? IdRepoEntitlement.USER_UPDATE\n                 : AnyTypeKind.GROUP.name().equals(model.getObject().getAnyType())\n-                ? StandardEntitlement.GROUP_UPDATE\n+                ? IdRepoEntitlement.GROUP_UPDATE\n                 : AnyEntitlement.UPDATE.getFor(model.getObject().getAnyType()) }, \",\");\n \n             panel.add(new ActionLink<RemediationTO>() {\n@@ -293,7 +294,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.REMEDIATION_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdMEntitlement.REMEDIATION_DELETE, true);\n \n         return panel;\n     }"},{"sha":"500d8e41fc3fec952738af4ca494c8e8f49da9fa","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.IEvent;\n@@ -118,7 +118,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO\n                 viewConfiguration(modelObject, target);\n                 target.add(modal);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.RESOURCE_HISTORY_LIST);\n+        }, ActionLink.ActionType.VIEW, IdMEntitlement.RESOURCE_HISTORY_LIST);\n \n         // -- restore\n         panel.add(new ActionLink<ResourceHistoryConfTO>() {\n@@ -138,7 +138,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.RESTORE, StandardEntitlement.RESOURCE_HISTORY_RESTORE);\n+        }, ActionLink.ActionType.RESTORE, IdMEntitlement.RESOURCE_HISTORY_RESTORE);\n \n         // -- delete\n         panel.add(new ActionLink<ResourceHistoryConfTO>() {\n@@ -159,7 +159,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_HISTORY_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdMEntitlement.RESOURCE_HISTORY_DELETE, true);\n \n         return panel;\n     }"},{"sha":"b5754b59a9926d88d3ace69cde20a66aa0e4c637","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.model.PropertyModel;\n \n@@ -121,7 +121,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 if (selectedResource != null) {\n                     String adminRealm = getAdminRealm(selectedResource.getConnector());\n \n-                    if (SyncopeConsoleSession.get().owns(StandardEntitlement.CONNECTOR_READ, adminRealm)) {\n+                    if (SyncopeConsoleSession.get().owns(IdMEntitlement.CONNECTOR_READ, adminRealm)) {\n                         extAttrName.setChoices(getExtAttrNames());\n                         target.add(extAttrName);\n                     }\n@@ -147,7 +147,7 @@ private void populateAnyTypes(final String resourceKey) {\n             ResourceTO resource = resourceRestClient.read(resourceKey);\n             String adminRealm = getAdminRealm(resource.getConnector());\n \n-            if (SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_READ, adminRealm)) {\n+            if (SyncopeConsoleSession.get().owns(IdMEntitlement.RESOURCE_READ, adminRealm)) {\n                 selectedResource = resource;\n                 selectedResource.getProvisions().forEach(provisionTO -> {\n                     anyTypes.put(provisionTO.getAnyType(), provisionTO.getObjectClass());"},{"sha":"6a97dca65b56e90ba642b22d4fb541cdee8ce3b5","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/PullPolicyDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPullPolicyDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -47,7 +47,7 @@ public PullPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n \n         this.addNewItemPanelBuilder(\n                 new PolicyModalPanelBuilder<>(PolicyType.PULL, defaultItem, modal, pageRef), true);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.POLICY_CREATE);\n \n         initResultTable();\n     }\n@@ -73,10 +73,10 @@ public void onClick(final AjaxRequestTarget target, final PullPolicyTO ignore) {\n                         \"policy.rules\", PullPolicyDirectoryPanel.this, Model.of(model.getObject())));\n \n                 MetaDataRoleAuthorizationStrategy.authorize(\n-                        policySpecModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+                        policySpecModal.getForm(), ENABLE, IdRepoEntitlement.POLICY_UPDATE);\n \n                 policySpecModal.show(true);\n             }\n-        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+        }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.POLICY_UPDATE);\n     }\n }"},{"sha":"cb6f9e5d8617dcafc147e69c0fb88a71c52f953e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/PushPolicyDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPushPolicyDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -47,7 +47,7 @@ public PushPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n \n         this.addNewItemPanelBuilder(\n                 new PolicyModalPanelBuilder<>(PolicyType.PUSH, defaultItem, modal, pageRef), true);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.POLICY_CREATE);\n \n         initResultTable();\n     }\n@@ -73,10 +73,10 @@ public void onClick(final AjaxRequestTarget target, final PushPolicyTO ignore) {\n                         \"policy.rules\", PushPolicyDirectoryPanel.this, Model.of(model.getObject())));\n \n                 MetaDataRoleAuthorizationStrategy.authorize(\n-                        policySpecModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+                        policySpecModal.getForm(), ENABLE, IdRepoEntitlement.POLICY_UPDATE);\n \n                 policySpecModal.show(true);\n             }\n-        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+        }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.POLICY_UPDATE);\n     }\n }"},{"sha":"7910d66ec82bdda35af03b71768fb6ff2488d695","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -52,7 +52,8 @@\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n@@ -197,7 +198,7 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                     target.add(multiLevelPanelRef);\n                     AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n                 }\n-            }, ActionLink.ActionType.VIEW, StandardEntitlement.RESOURCE_GET_CONNOBJECT);\n+            }, ActionLink.ActionType.VIEW, IdMEntitlement.RESOURCE_GET_CONNOBJECT);\n         }\n \n         if (!statusOnly) {\n@@ -219,7 +220,7 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                     target.add(multiLevelPanelRef);\n                     AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n                 }\n-            }, ActionLink.ActionType.RECONCILIATION_PUSH, StandardEntitlement.TASK_EXECUTE);\n+            }, ActionLink.ActionType.RECONCILIATION_PUSH, IdRepoEntitlement.TASK_EXECUTE);\n \n             panel.add(new ActionLink<StatusBean>() {\n \n@@ -239,7 +240,7 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                     target.add(multiLevelPanelRef);\n                     AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n                 }\n-            }, ActionLink.ActionType.RECONCILIATION_PULL, StandardEntitlement.TASK_EXECUTE);\n+            }, ActionLink.ActionType.RECONCILIATION_PULL, IdRepoEntitlement.TASK_EXECUTE);\n         }\n \n         return panel;"},{"sha":"cd9faad0076ff68cdab9fb3cbd1abbfcad17206f","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -48,7 +48,8 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n@@ -139,7 +140,7 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 target.add(multiLevelPanelRef);\n                 getTogglePanel().close(target);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.RESOURCE_GET_CONNOBJECT);\n+        }, ActionLink.ActionType.VIEW, IdMEntitlement.RESOURCE_GET_CONNOBJECT);\n \n         panel.add(new ActionLink<StatusBean>() {\n \n@@ -164,7 +165,7 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 target.add(multiLevelPanelRef);\n                 getTogglePanel().close(target);\n             }\n-        }, ActionLink.ActionType.RECONCILIATION_PUSH, StandardEntitlement.TASK_EXECUTE);\n+        }, ActionLink.ActionType.RECONCILIATION_PUSH, IdRepoEntitlement.TASK_EXECUTE);\n \n         panel.add(new ActionLink<StatusBean>() {\n \n@@ -189,7 +190,7 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 target.add(multiLevelPanelRef);\n                 getTogglePanel().close(target);\n             }\n-        }, ActionLink.ActionType.RECONCILIATION_PULL, StandardEntitlement.TASK_EXECUTE);\n+        }, ActionLink.ActionType.RECONCILIATION_PULL, IdRepoEntitlement.TASK_EXECUTE);\n \n         return panel;\n     }"},{"sha":"2e4d152ce6d132e7cb85a81c32b762cc8c3fa18c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n@@ -64,7 +64,7 @@\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.util.time.Duration;\n \n-@IdMPage(label = \"Topology\", icon = \"fa-plug\", listEntitlement = StandardEntitlement.RESOURCE_LIST, priority = 0)\n+@IdMPage(label = \"Topology\", icon = \"fa-plug\", listEntitlement = IdMEntitlement.RESOURCE_LIST, priority = 0)\n public class Topology extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271272L;\n@@ -183,7 +183,7 @@ public void onClose(final AjaxRequestTarget target) {\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 target.appendJavaScript(\"zoomIn($('#drawing')[0]);\");\n             }\n-        }, ActionLink.ActionType.ZOOM_IN, StandardEntitlement.CONNECTOR_LIST).disableIndicator().hideLabel();\n+        }, ActionLink.ActionType.ZOOM_IN, IdMEntitlement.CONNECTOR_LIST).disableIndicator().hideLabel();\n         zoomActionPanel.add(new ActionLink<Serializable>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -192,7 +192,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 target.appendJavaScript(\"zoomOut($('#drawing')[0]);\");\n             }\n-        }, ActionLink.ActionType.ZOOM_OUT, StandardEntitlement.CONNECTOR_LIST).disableIndicator().hideLabel();\n+        }, ActionLink.ActionType.ZOOM_OUT, IdMEntitlement.CONNECTOR_LIST).disableIndicator().hideLabel();\n \n         body.add(zoomActionPanel);\n         // -----------------------------------------"},{"sha":"75e24005ab9e2dd0d68a011bcdffc87fb7c8b99c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -48,7 +48,8 @@\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -197,7 +198,7 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         };\n         fragment.add(reload);\n-        MetaDataRoleAuthorizationStrategy.authorize(reload, RENDER, StandardEntitlement.CONNECTOR_RELOAD);\n+        MetaDataRoleAuthorizationStrategy.authorize(reload, RENDER, IdMEntitlement.CONNECTOR_RELOAD);\n \n         AjaxLink<String> tasks = new IndicatingAjaxLink<String>(\"tasks\") {\n \n@@ -216,7 +217,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n         };\n         fragment.add(tasks);\n-        MetaDataRoleAuthorizationStrategy.authorize(tasks, RENDER, StandardEntitlement.TASK_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(tasks, RENDER, IdRepoEntitlement.TASK_LIST);\n \n         return fragment;\n     }\n@@ -250,7 +251,7 @@ public String getAjaxIndicatorMarkupId() {\n \n         };\n         fragment.add(create);\n-        MetaDataRoleAuthorizationStrategy.authorize(create, RENDER, StandardEntitlement.CONNECTOR_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(create, RENDER, IdMEntitlement.CONNECTOR_CREATE);\n \n         return fragment;\n     }\n@@ -277,7 +278,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(delete, RENDER, StandardEntitlement.CONNECTOR_DELETE);\n+        MetaDataRoleAuthorizationStrategy.authorize(delete, RENDER, IdMEntitlement.CONNECTOR_DELETE);\n         fragment.add(delete);\n \n         AjaxLink<String> create = new IndicatingAjaxLink<String>(\"create\") {\n@@ -306,7 +307,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(create, RENDER, StandardEntitlement.RESOURCE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(create, RENDER, IdMEntitlement.RESOURCE_CREATE);\n         fragment.add(create);\n \n         AjaxLink<String> edit = new IndicatingAjaxLink<String>(\"edit\") {\n@@ -323,7 +324,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 target.add(modal.setContent(new ConnectorWizardBuilder(connInstance, pageRef).\n                         build(BaseModal.CONTENT_ID,\n                                 SyncopeConsoleSession.get().\n-                                        owns(StandardEntitlement.CONNECTOR_UPDATE, connInstance.getAdminRealm())\n+                                        owns(IdMEntitlement.CONNECTOR_UPDATE, connInstance.getAdminRealm())\n                                 ? AjaxWizard.Mode.EDIT\n                                 : AjaxWizard.Mode.READONLY)));\n \n@@ -338,7 +339,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, StandardEntitlement.CONNECTOR_READ);\n+        MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, IdMEntitlement.CONNECTOR_READ);\n         fragment.add(edit);\n \n         AjaxLink<String> history = new IndicatingAjaxLink<String>(\"history\") {\n@@ -365,7 +366,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(history, RENDER, StandardEntitlement.CONNECTOR_HISTORY_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(history, RENDER, IdMEntitlement.CONNECTOR_HISTORY_LIST);\n         fragment.add(history);\n \n         return fragment;\n@@ -393,7 +394,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(delete, RENDER, StandardEntitlement.RESOURCE_DELETE);\n+        MetaDataRoleAuthorizationStrategy.authorize(delete, RENDER, IdMEntitlement.RESOURCE_DELETE);\n         fragment.add(delete);\n \n         AjaxLink<String> edit = new IndicatingAjaxLink<String>(\"edit\") {\n@@ -411,7 +412,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 target.add(modal.setContent(new ResourceWizardBuilder(resource, pageRef).\n                         build(BaseModal.CONTENT_ID,\n                                 SyncopeConsoleSession.get().\n-                                        owns(StandardEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())\n+                                        owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())\n                                 ? AjaxWizard.Mode.EDIT\n                                 : AjaxWizard.Mode.READONLY)));\n \n@@ -425,7 +426,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, StandardEntitlement.RESOURCE_READ);\n+        MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, IdMEntitlement.RESOURCE_READ);\n         fragment.add(edit);\n \n         AjaxLink<String> status = new IndicatingAjaxLink<String>(\"reconciliation\") {\n@@ -448,7 +449,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(status, RENDER, StandardEntitlement.USER_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(status, RENDER, IdRepoEntitlement.USER_UPDATE);\n         fragment.add(status);\n \n         AjaxLink<String> provision = new IndicatingAjaxLink<String>(\"provision\") {\n@@ -461,7 +462,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 ConnInstanceTO connInstance = connectorRestClient.read(resource.getConnector());\n \n                 if (SyncopeConsoleSession.get().\n-                        owns(StandardEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())) {\n+                        owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())) {\n \n                     provisionModal.addSubmitButton();\n                 } else {\n@@ -484,7 +485,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, StandardEntitlement.RESOURCE_READ);\n+        MetaDataRoleAuthorizationStrategy.authorize(edit, RENDER, IdMEntitlement.RESOURCE_READ);\n         fragment.add(provision);\n \n         AjaxLink<String> explore = new IndicatingAjaxLink<String>(\"explore\") {\n@@ -506,7 +507,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(explore, RENDER, StandardEntitlement.RESOURCE_LIST_CONNOBJECT);\n+        MetaDataRoleAuthorizationStrategy.authorize(explore, RENDER, IdMEntitlement.RESOURCE_LIST_CONNOBJECT);\n         fragment.add(explore);\n \n         AjaxLink<String> propagation = new IndicatingAjaxLink<String>(\"propagation\") {\n@@ -529,7 +530,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(propagation, RENDER, StandardEntitlement.TASK_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(propagation, RENDER, IdRepoEntitlement.TASK_LIST);\n         fragment.add(propagation);\n \n         AjaxLink<String> pull = new IndicatingAjaxLink<String>(\"pull\") {\n@@ -549,7 +550,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(pull, RENDER, StandardEntitlement.TASK_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(pull, RENDER, IdRepoEntitlement.TASK_LIST);\n         fragment.add(pull);\n \n         AjaxLink<String> push = new IndicatingAjaxLink<String>(\"push\") {\n@@ -569,7 +570,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(push, RENDER, StandardEntitlement.TASK_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(push, RENDER, IdRepoEntitlement.TASK_LIST);\n         fragment.add(push);\n \n         AjaxLink<String> history = new IndicatingAjaxLink<String>(\"history\") {\n@@ -596,7 +597,7 @@ public String getAjaxIndicatorMarkupId() {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(history, RENDER, StandardEntitlement.RESOURCE_HISTORY_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(history, RENDER, IdMEntitlement.RESOURCE_HISTORY_LIST);\n         fragment.add(history);\n \n         // [SYNCOPE-1161] - Option to clone a resource\n@@ -647,7 +648,7 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n \n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(clone, RENDER, StandardEntitlement.RESOURCE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(clone, RENDER, IdMEntitlement.RESOURCE_CREATE);\n         fragment.add(clone);\n \n         return fragment;"},{"sha":"f544f161769c77e4e315a5255456d4ade8fa0688","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/widgets/RemediationsWidget.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.console.rest.RemediationRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.common.lib.to.RemediationTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -87,8 +87,8 @@ public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n \n     @Override\n     protected int getLatestAlertsSize() {\n-        return SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_LIST)\n-                && SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_READ)\n+        return SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_LIST)\n+                && SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_READ)\n                 ? restClient.countRemediations()\n                 : 0;\n     }\n@@ -102,8 +102,8 @@ protected IModel<List<RemediationTO>> getLatestAlerts() {\n             @Override\n             public List<RemediationTO> getObject() {\n                 List<RemediationTO> updatedRemediations;\n-                if (SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_LIST)\n-                        && SyncopeConsoleSession.get().owns(StandardEntitlement.REMEDIATION_READ)) {\n+                if (SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_LIST)\n+                        && SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_READ)) {\n \n                     updatedRemediations = restClient.getRemediations(1, MAX_SIZE, new SortParam<>(\"instant\", true));\n                 } else {\n@@ -118,7 +118,7 @@ public List<RemediationTO> getObject() {\n     @Override\n     protected AbstractLink getEventsLink(final String linkid) {\n         BookmarkablePageLink<Remediations> remediations = BookmarkablePageLinkBuilder.build(linkid, Remediations.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(remediations, WebPage.ENABLE, StandardEntitlement.REMEDIATION_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(remediations, WebPage.ENABLE, IdMEntitlement.REMEDIATION_LIST);\n         return remediations;\n     }\n "},{"sha":"6c125562ac6076962bf839612be93e75a3a50aa0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/Resources.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractResources;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n \n@@ -39,7 +39,7 @@ public <T extends AnyTO> Resources(final AnyWrapper<T> modelObject) {\n         final ActionPermissions permissions = new ActionPermissions();\n         setMetaData(MetaDataRoleAuthorizationStrategy.ACTION_PERMISSIONS, permissions);\n         permissions.authorize(RENDER,\n-                new org.apache.wicket.authroles.authorization.strategies.role.Roles(StandardEntitlement.RESOURCE_LIST));\n+                new org.apache.wicket.authroles.authorization.strategies.role.Roles(IdMEntitlement.RESOURCE_LIST));\n         // -----------------------------------------------------------------\n     }\n ","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Resources.java"},{"sha":"a04579a7991305e2a5949f32593a21a58443d906","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/AbstractMappingPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.client.console.widgets.ItemTransformerWidget;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n@@ -290,7 +290,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                             target.add(AbstractMappingPanel.this);\n                         }\n                     }\n-                }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_UPDATE, true).hideLabel();\n+                }, ActionLink.ActionType.DELETE, IdMEntitlement.RESOURCE_UPDATE, true).hideLabel();\n                 item.add(actions);\n                 // -------------------------------\n "},{"sha":"54ff8189c4ed10ca8ef3d1437c9c2f4a5b1dadc7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -166,7 +166,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceProvision prov\n                     ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                 }\n             }\n-        }, ActionLink.ActionType.MAPPING, StandardEntitlement.RESOURCE_READ).\n+        }, ActionLink.ActionType.MAPPING, IdMEntitlement.RESOURCE_READ).\n                 addAction(new ActionLink<ResourceProvision>() {\n \n                     private static final long serialVersionUID = -7780999687733432439L;\n@@ -184,7 +184,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceProvision prov\n                         }\n                         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                     }\n-                }, ActionLink.ActionType.SET_LATEST_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n+                }, ActionLink.ActionType.SET_LATEST_SYNC_TOKEN, IdMEntitlement.RESOURCE_UPDATE).\n                 addAction(new ActionLink<ResourceProvision>() {\n \n                     private static final long serialVersionUID = -7780999687733432439L;\n@@ -202,7 +202,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceProvision prov\n                         }\n                         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                     }\n-                }, ActionLink.ActionType.REMOVE_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n+                }, ActionLink.ActionType.REMOVE_SYNC_TOKEN, IdMEntitlement.RESOURCE_UPDATE).\n                 addAction(new ActionLink<ResourceProvision>() {\n \n                     private static final long serialVersionUID = -3722207913631435544L;\n@@ -218,12 +218,12 @@ public void onClick(final AjaxRequestTarget target, final ResourceProvision prov\n                         checkAddButton(adminRealm);\n                         send(ResourceProvisionPanel.this, Broadcast.DEPTH, new ListViewReload<>(target));\n                     }\n-                }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_UPDATE, true);\n+                }, ActionLink.ActionType.DELETE, IdMEntitlement.RESOURCE_UPDATE, true);\n \n         builder.addNewItemPanelBuilder(wizard);\n \n         list = builder.build(\"provision\");\n-        list.setReadOnly(!SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE, adminRealm));\n+        list.setReadOnly(!SyncopeConsoleSession.get().owns(IdMEntitlement.RESOURCE_UPDATE, adminRealm));\n \n         addAjaxLink = new AjaxLink<ResourceProvision>(\"add\") {\n \n@@ -328,7 +328,7 @@ protected List<String> load() {\n     }\n \n     private void checkAddButton(final String adminRealm) {\n-        boolean enabled = SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE, adminRealm)\n+        boolean enabled = SyncopeConsoleSession.get().owns(IdMEntitlement.RESOURCE_UPDATE, adminRealm)\n                 && !getAnyTypes().getObject().isEmpty();\n         addAjaxLink.setVisible(enabled);\n         objectTypeTogglePanel.setEnabled(enabled);"},{"sha":"10f17f7a69c33f73e27b41d8e981872ddb2e8843","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.html?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources.html"},{"sha":"526d72a9e2fc65aae36cfdbb7ec54fed419d9511","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.properties?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources.properties"},{"sha":"5b5b4803da884c809ee2b0f1e5f0ff44e3c7e209","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_it.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_it.properties?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_it.properties"},{"sha":"9209a85a2b95f1e16a9cccdc8ce4103d4172aeab","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_ja.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_ja.properties?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_ja.properties"},{"sha":"230d612991ff46e6b1100bfb22daed73cf93d757","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_pt_BR.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_pt_BR.properties?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_pt_BR.properties"},{"sha":"8e75558ad5c466b9a96ced1e27840f0eaa39ebc8","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_ru.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources_ru.properties?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Resources_ru.properties"},{"sha":"65a2f878326e84cfa24ecbdaa893e7efcbff44a8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -48,7 +48,7 @@\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n@@ -278,7 +278,7 @@ public void refreshAuth(final String username) {\n             selfTO = self.getRight();\n             roles = null;\n         } catch (ForbiddenException e) {\n-            LOG.warn(\"Could not read self(), probably in a {} scenario\", StandardEntitlement.MUST_CHANGE_PASSWORD, e);\n+            LOG.warn(\"Could not read self(), probably in a {} scenario\", IdRepoEntitlement.MUST_CHANGE_PASSWORD, e);\n \n             selfTO = new UserTO();\n             selfTO.setUsername(username);"},{"sha":"6a531d3c747194f09f9eddf4861b23ebb5527b2d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -55,7 +55,7 @@\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -387,7 +387,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     }\n                     ((BasePage) getPage()).getNotificationPanel().refresh(target);\n                 }\n-            }, action, StandardEntitlement.CONFIGURATION_LIST).hideLabel();\n+            }, action, IdRepoEntitlement.CONFIGURATION_LIST).hideLabel();\n         }\n     }\n }"},{"sha":"896198d6367576e2a32b73cff85d5a5dcfce21d4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoAnyDirectoryPanelAditionalActionLinksProvider.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyDirectoryPanelAditionalActionLinksProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyDirectoryPanelAditionalActionLinksProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyDirectoryPanelAditionalActionLinksProvider.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.PageReference;\n \n-public class EmptyAnyDirectoryPanelAditionalActionLinksProvider\n+public class IdRepoAnyDirectoryPanelAditionalActionLinksProvider\n         implements AnyDirectoryPanelAditionalActionLinksProvider {\n \n     private static final long serialVersionUID = 121356001392126568L;","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/EmptyAnyDirectoryPanelAditionalActionLinksProvider.java"},{"sha":"0ca7a908feefdebb3e106bb9a58c72b2a2981e50","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoAnyWizardBuilderAdditionalSteps.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyWizardBuilderAdditionalSteps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyWizardBuilderAdditionalSteps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoAnyWizardBuilderAdditionalSteps.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.wicket.extensions.wizard.WizardModel;\n \n-public class EmptyAnyWizardBuilderAdditionalSteps implements AnyWizardBuilderAdditionalSteps {\n+public class IdRepoAnyWizardBuilderAdditionalSteps implements AnyWizardBuilderAdditionalSteps {\n \n     private static final long serialVersionUID = -2693000486786910671L;\n ","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/EmptyAnyWizardBuilderAdditionalSteps.java"},{"sha":"81f0522a1b5799860e8624bd92debf71407793e8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoExternalResourceProvider.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoExternalResourceProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoExternalResourceProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoExternalResourceProvider.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -21,7 +21,7 @@\n import java.util.Collections;\n import java.util.List;\n \n-public class EmptyExternalResourceProvider implements ExternalResourceProvider {\n+public class IdRepoExternalResourceProvider implements ExternalResourceProvider {\n \n     private static final long serialVersionUID = 3002474783308961295L;\n ","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/EmptyExternalResourceProvider.java"},{"sha":"dc246c1dca22fabee4693527b0ebc26f0115b76a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoStatusProvider.java","status":"renamed","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoStatusProvider.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -18,15 +18,18 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n+import java.io.Serializable;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.client.console.panels.ListViewPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.ui.commons.status.ConnObjectWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n \n-public class EmptyStatusProvider implements StatusProvider {\n+public class IdRepoStatusProvider implements StatusProvider {\n \n     private static final long serialVersionUID = -7948190795547208134L;\n \n@@ -36,4 +39,12 @@ public List<Triple<ConnObjectTO, ConnObjectWrapper, String>> get(\n \n         return Collections.emptyList();\n     }\n+\n+    @Override\n+    public <T extends Serializable> void addConnObjectLink(\n+            final ListViewPanel.Builder<T> builder,\n+            final ActionLink<T> connObjectLink) {\n+\n+        // do nothing\n+    }\n }","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/EmptyStatusProvider.java"},{"sha":"fcecfab39319270eeb191445b82ac363332e8a37","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoVirSchemaDetailsPanelProvider.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoVirSchemaDetailsPanelProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoVirSchemaDetailsPanelProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoVirSchemaDetailsPanelProvider.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -22,7 +22,7 @@\n import org.apache.wicket.markup.html.panel.EmptyPanel;\n import org.apache.wicket.markup.html.panel.Panel;\n \n-public class EmptyVirSchemaDetailsPanelProvider implements VirSchemaDetailsPanelProvider {\n+public class IdRepoVirSchemaDetailsPanelProvider implements VirSchemaDetailsPanelProvider {\n \n     private static final long serialVersionUID = 1972241879030801082L;\n ","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/EmptyVirSchemaDetailsPanelProvider.java"},{"sha":"36d5ba409839a717bc34a29d6dd017c31f2adc18","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/StatusProvider.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FStatusProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FStatusProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FStatusProvider.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -22,11 +22,16 @@\n import java.util.Collection;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.client.console.panels.ListViewPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.ui.commons.status.ConnObjectWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n \n public interface StatusProvider extends Serializable {\n \n     List<Triple<ConnObjectTO, ConnObjectWrapper, String>> get(AnyTO any, Collection<String> resources);\n+\n+    <T extends Serializable> void addConnObjectLink(\n+            ListViewPanel.Builder<T> builder, ActionLink<T> connObjectLink);\n }"},{"sha":"bb4fb60295199e8ff81f5824236e9a26c02bcfff","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -38,11 +38,11 @@\n import org.apache.syncope.client.console.annotations.Resource;\n import org.apache.syncope.client.console.commons.AnyDirectoryPanelAditionalActionLinksProvider;\n import org.apache.syncope.client.console.commons.AnyWizardBuilderAdditionalSteps;\n-import org.apache.syncope.client.console.commons.EmptyAnyDirectoryPanelAditionalActionLinksProvider;\n-import org.apache.syncope.client.console.commons.EmptyAnyWizardBuilderAdditionalSteps;\n-import org.apache.syncope.client.console.commons.EmptyExternalResourceProvider;\n-import org.apache.syncope.client.console.commons.EmptyStatusProvider;\n-import org.apache.syncope.client.console.commons.EmptyVirSchemaDetailsPanelProvider;\n+import org.apache.syncope.client.console.commons.IdRepoAnyDirectoryPanelAditionalActionLinksProvider;\n+import org.apache.syncope.client.console.commons.IdRepoAnyWizardBuilderAdditionalSteps;\n+import org.apache.syncope.client.console.commons.IdRepoExternalResourceProvider;\n+import org.apache.syncope.client.console.commons.IdRepoStatusProvider;\n+import org.apache.syncope.client.console.commons.IdRepoVirSchemaDetailsPanelProvider;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.SSOLoginFormPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.preview.AbstractBinaryPreviewer;\n@@ -103,17 +103,17 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n         });\n     }\n \n-    private ExternalResourceProvider resourceProvider = new EmptyExternalResourceProvider();\n+    private ExternalResourceProvider resourceProvider = new IdRepoExternalResourceProvider();\n \n     private AnyWizardBuilderAdditionalSteps anyWizardBuilderAdditionalSteps =\n-            new EmptyAnyWizardBuilderAdditionalSteps();\n+            new IdRepoAnyWizardBuilderAdditionalSteps();\n \n-    private StatusProvider statusProvider = new EmptyStatusProvider();\n+    private StatusProvider statusProvider = new IdRepoStatusProvider();\n \n-    private VirSchemaDetailsPanelProvider virSchemaDetailsPanelProvider = new EmptyVirSchemaDetailsPanelProvider();\n+    private VirSchemaDetailsPanelProvider virSchemaDetailsPanelProvider = new IdRepoVirSchemaDetailsPanelProvider();\n \n     private AnyDirectoryPanelAditionalActionLinksProvider anyDirectoryPanelAditionalActionLinksProvider =\n-            new EmptyAnyDirectoryPanelAditionalActionLinksProvider();\n+            new IdRepoAnyDirectoryPanelAditionalActionLinksProvider();\n \n     private ImplementationInfoProvider implementationInfoProvider = new IdRepoImplementationInfoProvider(this);\n \n@@ -247,35 +247,35 @@ public void load() {\n                                     Resource.class.getName(), clazz.getName());\n                         }\n                     } else if (ExternalResourceProvider.class.isAssignableFrom(clazz)) {\n-                        if (!clazz.equals(EmptyExternalResourceProvider.class)\n+                        if (!clazz.equals(IdRepoExternalResourceProvider.class)\n                                 && !clazz.isInstance(resourceProvider)) {\n \n                             resourceProvider = (ExternalResourceProvider) clazz.\n                                     getConstructor().newInstance();\n                         }\n                     } else if (AnyWizardBuilderAdditionalSteps.class.isAssignableFrom(clazz)) {\n-                        if (!clazz.equals(EmptyAnyWizardBuilderAdditionalSteps.class)\n+                        if (!clazz.equals(IdRepoAnyWizardBuilderAdditionalSteps.class)\n                                 && !clazz.isInstance(anyWizardBuilderAdditionalSteps)) {\n \n                             anyWizardBuilderAdditionalSteps = (AnyWizardBuilderAdditionalSteps) clazz.\n                                     getConstructor().newInstance();\n                         }\n                     } else if (StatusProvider.class.isAssignableFrom(clazz)) {\n-                        if (!clazz.equals(EmptyStatusProvider.class)\n+                        if (!clazz.equals(IdRepoStatusProvider.class)\n                                 && !clazz.isInstance(statusProvider)) {\n \n                             statusProvider = (StatusProvider) clazz.\n                                     getConstructor().newInstance();\n                         }\n                     } else if (VirSchemaDetailsPanelProvider.class.isAssignableFrom(clazz)) {\n-                        if (!clazz.equals(EmptyVirSchemaDetailsPanelProvider.class)\n+                        if (!clazz.equals(IdRepoVirSchemaDetailsPanelProvider.class)\n                                 && !clazz.isInstance(virSchemaDetailsPanelProvider)) {\n \n                             virSchemaDetailsPanelProvider = (VirSchemaDetailsPanelProvider) clazz.\n                                     getConstructor().newInstance();\n                         }\n                     } else if (AnyDirectoryPanelAditionalActionLinksProvider.class.isAssignableFrom(clazz)) {\n-                        if (!clazz.equals(EmptyAnyDirectoryPanelAditionalActionLinksProvider.class)\n+                        if (!clazz.equals(IdRepoAnyDirectoryPanelAditionalActionLinksProvider.class)\n                                 && !clazz.isInstance(anyDirectoryPanelAditionalActionLinksProvider)) {\n \n                             anyDirectoryPanelAditionalActionLinksProvider ="},{"sha":"cae38da684adee09471a8ae93c7fb596fc68175e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/MailTemplateDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -103,7 +103,7 @@ public WizardModalPanel<MailTemplateTO> build(\n \n         initResultTable();\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.MAIL_TEMPLATE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.MAIL_TEMPLATE_CREATE);\n     }\n \n     @Override\n@@ -133,7 +133,7 @@ public void onClick(final AjaxRequestTarget target, final MailTemplateTO ignore)\n                 utilityModal.show(true);\n                 target.add(utilityModal);\n             }\n-        }, ActionLink.ActionType.HTML, StandardEntitlement.MAIL_TEMPLATE_UPDATE);\n+        }, ActionLink.ActionType.HTML, IdRepoEntitlement.MAIL_TEMPLATE_UPDATE);\n \n         panel.add(new ActionLink<MailTemplateTO>() {\n \n@@ -151,7 +151,7 @@ public void onClick(final AjaxRequestTarget target, final MailTemplateTO ignore)\n                 utilityModal.show(true);\n                 target.add(utilityModal);\n             }\n-        }, ActionLink.ActionType.TEXT, StandardEntitlement.MAIL_TEMPLATE_UPDATE);\n+        }, ActionLink.ActionType.TEXT, IdRepoEntitlement.MAIL_TEMPLATE_UPDATE);\n \n         panel.add(new ActionLink<MailTemplateTO>() {\n \n@@ -170,7 +170,7 @@ public void onClick(final AjaxRequestTarget target, final MailTemplateTO ignore)\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.MAIL_TEMPLATE_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.MAIL_TEMPLATE_DELETE, true);\n \n         return panel;\n     }"},{"sha":"703ea158eff4a01bc2d6f324657f45e1688360af","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.NotificationTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -78,7 +78,7 @@ public NotificationDirectoryPanel(final String id, final PageReference pageRef)\n \n         initResultTable();\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.NOTIFICATION_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.NOTIFICATION_CREATE);\n     }\n \n     @Override\n@@ -112,7 +112,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTO ignore)\n                         new AjaxWizard.EditItemActionEvent<>(\n                                 new NotificationWrapper(restClient.read(model.getObject().getKey())), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.NOTIFICATION_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.NOTIFICATION_UPDATE);\n \n         panel.add(new ActionLink<NotificationTO>() {\n \n@@ -126,7 +126,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTO ignore)\n                 utilityModal.show(true);\n                 target.add(utilityModal);\n             }\n-        }, ActionLink.ActionType.NOTIFICATION_TASKS, StandardEntitlement.TASK_LIST);\n+        }, ActionLink.ActionType.NOTIFICATION_TASKS, IdRepoEntitlement.TASK_LIST);\n \n         panel.add(new ActionLink<NotificationTO>() {\n \n@@ -145,7 +145,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTO ignore)\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.NOTIFICATION_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.NOTIFICATION_DELETE, true);\n \n         return panel;\n     }"},{"sha":"173e0acd012950929914a06481312b328e958778","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n@@ -73,13 +73,13 @@ public Audit(final PageParameters parameters) {\n \n             @Override\n             protected List<String> getListAuthRoles() {\n-                return Collections.singletonList(StandardEntitlement.AUDIT_LIST);\n+                return Collections.singletonList(IdRepoEntitlement.AUDIT_LIST);\n             }\n \n             @Override\n             protected List<String> getChangeAuthRoles() {\n                 return Arrays.asList(\n-                        new String[] { StandardEntitlement.AUDIT_ENABLE, StandardEntitlement.AUDIT_DISABLE });\n+                        new String[] { IdRepoEntitlement.AUDIT_ENABLE, IdRepoEntitlement.AUDIT_DISABLE });\n             }\n \n             @Override"},{"sha":"78f747f821819f23b352df0db0df842407c8c0d8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n@@ -135,7 +135,7 @@ public void onClick() {\n             }\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(\n-                dbExportLink, WebPage.RENDER, StandardEntitlement.CONFIGURATION_EXPORT);\n+                dbExportLink, WebPage.RENDER, IdRepoEntitlement.CONFIGURATION_EXPORT);\n         body.add(dbExportLink);\n \n         // menu\n@@ -147,14 +147,14 @@ public void onClick() {\n         body.add(liContainer);\n \n         BookmarkablePageLink<? extends BasePage> link = BookmarkablePageLinkBuilder.build(\"realms\", Realms.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.REALM_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.REALM_LIST);\n \n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"reports\"));\n         body.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"reports\", Reports.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.REPORT_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.REPORT_LIST);\n         liContainer.add(link);\n \n         List<Class<? extends BasePage>> idmPageClasses = lookup.getIdMPageClasses();\n@@ -206,52 +206,52 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         liContainer = new WebMarkupContainer(getLIContainerId(\"audit\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"audit\", Audit.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.AUDIT_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.AUDIT_LIST);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"implementations\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"implementations\", Implementations.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.IMPLEMENTATION_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.IMPLEMENTATION_LIST);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"logs\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"logs\", Logs.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.LOG_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.LOG_LIST);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"types\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"types\", Types.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.SCHEMA_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.SCHEMA_LIST);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"security\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"security\", Security.class);\n         MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER,\n                 String.format(\"%s,%s\",\n-                        StandardEntitlement.ROLE_LIST,\n-                        StandardEntitlement.APPLICATION_LIST));\n+                        IdRepoEntitlement.ROLE_LIST,\n+                        IdRepoEntitlement.APPLICATION_LIST));\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"policies\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"policies\", Policies.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.POLICY_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.POLICY_LIST);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"notifications\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"notifications\", Notifications.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.NOTIFICATION_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.NOTIFICATION_LIST);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"parameters\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"parameters\", Parameters.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, StandardEntitlement.CONFIGURATION_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.CONFIGURATION_LIST);\n         liContainer.add(link);\n \n         body.add(new AjaxLink<Void>(\"collapse\") {"},{"sha":"fde335d4fd96716332a6f788ca86cfe9ee1e7791","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.client.console.rest.LoggerRestClient;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -55,7 +55,7 @@ public LogViewer() {\n \n         final AjaxDropDownChoicePanel<String> appenders = new AjaxDropDownChoicePanel<>(\n                 \"appenders\", \"Appender\", new Model<>(), false);\n-        MetaDataRoleAuthorizationStrategy.authorize(appenders, ENABLE, StandardEntitlement.LOG_READ);\n+        MetaDataRoleAuthorizationStrategy.authorize(appenders, ENABLE, IdRepoEntitlement.LOG_READ);\n         appenders.setChoices(restClient.listMemoryAppenders());\n         viewer.add(appenders);\n "},{"sha":"275b0cb9366c89610fb92a2e5278203193c4998d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AbstractLogsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -70,7 +70,7 @@ protected Component getValueComponent(final String key, final LoggerTO loggerTO)\n                 if (\"level\".equalsIgnoreCase(key)) {\n                     final AjaxDropDownChoicePanel<LoggerLevel> loggerTOs = new AjaxDropDownChoicePanel<>(\n                             \"field\", getString(\"level\"), Model.of(loggerTO.getLevel()), false);\n-                    MetaDataRoleAuthorizationStrategy.authorize(loggerTOs, ENABLE, StandardEntitlement.LOG_SET_LEVEL);\n+                    MetaDataRoleAuthorizationStrategy.authorize(loggerTOs, ENABLE, IdRepoEntitlement.LOG_SET_LEVEL);\n \n                     loggerTOs.hideLabel();\n                     loggerTOs.setChoices(Arrays.asList(LoggerLevel.values()));"},{"sha":"41a3159aca0de56e4fa12fc9ab42c087f48e1ad5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n@@ -132,7 +132,7 @@ public void onClick(final AjaxRequestTarget target, final AccessTokenTO ignore)\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.ACCESS_TOKEN_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.ACCESS_TOKEN_DELETE, true);\n \n         return panel;\n     }"},{"sha":"cdd153f2fcd3ed58314b5ac459cfe23af2f25c03","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n@@ -152,7 +152,7 @@ public void onClick(final AjaxRequestTarget target, final AnyObjectTO ignore) {\n                     utilityModal.header(new StringResourceModel(\"any.propagation.tasks\", model));\n                     utilityModal.show(true);\n                 }\n-            }, ActionType.PROPAGATION_TASKS, StandardEntitlement.TASK_LIST);\n+            }, ActionType.PROPAGATION_TASKS, IdRepoEntitlement.TASK_LIST);\n \n             panel.add(new ActionLink<AnyObjectTO>() {\n \n@@ -167,7 +167,7 @@ public void onClick(final AjaxRequestTarget target, final AnyObjectTO ignore) {\n                     utilityModal.show(true);\n                     target.add(utilityModal);\n                 }\n-            }, ActionType.NOTIFICATION_TASKS, StandardEntitlement.TASK_LIST);\n+            }, ActionType.NOTIFICATION_TASKS, IdRepoEntitlement.TASK_LIST);\n         }\n \n         panel.add(new ActionLink<AnyObjectTO>() {"},{"sha":"07be4a28944042ef2eb415aa788451a48d9237be","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -258,7 +258,7 @@ protected Panel getDirectoryPanel(final String id) {\n                         anyTypeTO.getClasses(),\n                         formLayoutInfo.getLeft(),\n                         pageRef)).build(id);\n-                MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.RENDER, StandardEntitlement.USER_SEARCH);\n+                MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.RENDER, IdRepoEntitlement.USER_SEARCH);\n                 break;\n \n             case GROUP:"},{"sha":"e2a3e8070ca088113fdb6e966005371246e98517","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -97,7 +97,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n         }, true);\n \n         initResultTable();\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.ANYTYPE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.ANYTYPE_CREATE);\n     }\n \n     @Override\n@@ -168,7 +168,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeClassTO ignore)\n                 send(AnyTypeClassesPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.ANYTYPECLASS_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.ANYTYPECLASS_UPDATE);\n \n         panel.add(new ActionLink<AnyTypeClassTO>() {\n \n@@ -187,7 +187,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeClassTO ignore)\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.ANYTYPECLASS_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.ANYTYPECLASS_DELETE, true);\n \n         return panel;\n     }"},{"sha":"bf86e6cd5142c8fe17466f18035b68cabd9828c0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -96,7 +96,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n         }, true);\n \n         initResultTable();\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.ANYTYPE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.ANYTYPE_CREATE);\n     }\n \n     @Override\n@@ -167,7 +167,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeTO ignore) {\n                 send(AnyTypesPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.ANYTYPE_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.ANYTYPE_UPDATE);\n         panel.add(new ActionLink<AnyTypeTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -187,7 +187,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.ANYTYPE_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.ANYTYPE_DELETE, true);\n \n         return panel;\n     }"},{"sha":"c8e806d7dd776859b6fd24fcb2fa04e608dfa2b0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationDirectoryPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.to.ApplicationTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -78,8 +78,8 @@ protected void onConfigure() {\n \n     protected ApplicationDirectoryPanel(final String id, final Builder builder) {\n         super(id, builder);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.APPLICATION_CREATE);\n-        setReadOnly(!SyncopeConsoleSession.get().owns(StandardEntitlement.APPLICATION_UPDATE));\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.APPLICATION_CREATE);\n+        setReadOnly(!SyncopeConsoleSession.get().owns(IdRepoEntitlement.APPLICATION_UPDATE));\n \n         disableCheckBoxes();\n         setShowResultPage(true);\n@@ -112,7 +112,7 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         };\n         ((WebMarkupContainer) get(\"container:content\")).addOrReplace(newApplLink);\n-        MetaDataRoleAuthorizationStrategy.authorize(newApplLink, RENDER, StandardEntitlement.APPLICATION_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(newApplLink, RENDER, IdRepoEntitlement.APPLICATION_CREATE);\n \n         initResultTable();\n     }\n@@ -166,7 +166,7 @@ public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore)\n                 modal.show(true);\n                 target.add(modal);\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.APPLICATION_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.APPLICATION_UPDATE);\n \n         panel.add(new ActionLink<ApplicationTO>() {\n \n@@ -181,11 +181,11 @@ public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore)\n                         \"application.privileges\", ApplicationDirectoryPanel.this, Model.of(model.getObject())));\n \n                 MetaDataRoleAuthorizationStrategy.authorize(\n-                        privilegeModal.getForm(), ENABLE, StandardEntitlement.APPLICATION_UPDATE);\n+                        privilegeModal.getForm(), ENABLE, IdRepoEntitlement.APPLICATION_UPDATE);\n \n                 privilegeModal.show(true);\n             }\n-        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.APPLICATION_UPDATE);\n+        }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.APPLICATION_UPDATE);\n \n         panel.add(new ActionLink<ApplicationTO>() {\n \n@@ -204,7 +204,7 @@ public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore)\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.APPLICATION_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.APPLICATION_DELETE, true);\n \n         return panel;\n     }"},{"sha":"d9dcc89f9ea65d948f4a6e677df542d4a7d08af6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DashboardAccessTokensPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardAccessTokensPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardAccessTokensPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardAccessTokensPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -39,7 +39,7 @@ public DashboardAccessTokensPanel(final String id, final PageReference pageRef)\n \n         }.disableCheckBoxes().build(\"accessTokens\");\n         MetaDataRoleAuthorizationStrategy.authorize(\n-                accessTokens, Component.RENDER, StandardEntitlement.ACCESS_TOKEN_LIST);\n+                accessTokens, Component.RENDER, IdRepoEntitlement.ACCESS_TOKEN_LIST);\n         add(accessTokens);\n     }\n "},{"sha":"8a9ce0168b4a5180a208c0808a90123329edac28","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DashboardControlPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardControlPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardControlPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardControlPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.client.console.widgets.JobWidget;\n import org.apache.syncope.client.console.widgets.ReconciliationWidget;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -36,17 +36,17 @@ public DashboardControlPanel(final String id, final PageReference pageRef) {\n         JobWidget job = new JobWidget(\"job\", pageRef);\n         MetaDataRoleAuthorizationStrategy.authorize(job, Component.RENDER,\n                 String.format(\"%s,%s,%s\",\n-                        StandardEntitlement.NOTIFICATION_LIST,\n-                        StandardEntitlement.TASK_LIST,\n-                        StandardEntitlement.REPORT_LIST));\n+                        IdRepoEntitlement.NOTIFICATION_LIST,\n+                        IdRepoEntitlement.TASK_LIST,\n+                        IdRepoEntitlement.REPORT_LIST));\n         add(job);\n \n         ReconciliationWidget reconciliation = new ReconciliationWidget(\"reconciliation\", pageRef);\n         MetaDataRoleAuthorizationStrategy.authorize(job, Component.RENDER,\n                 String.format(\"%s,%s,%s\",\n-                        StandardEntitlement.REPORT_EXECUTE,\n-                        StandardEntitlement.REPORT_READ,\n-                        StandardEntitlement.REPORT_LIST));\n+                        IdRepoEntitlement.REPORT_EXECUTE,\n+                        IdRepoEntitlement.REPORT_READ,\n+                        IdRepoEntitlement.REPORT_LIST));\n         add(reconciliation);\n     }\n }"},{"sha":"266033bd2cabcb5d314e746df2cedd56d316a9df","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksTogglePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n@@ -254,7 +254,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     target.add(container);\n                 }\n             }\n-        }, ActionLink.ActionType.RELOAD, StandardEntitlement.USER_SEARCH).hideLabel();\n+        }, ActionLink.ActionType.RELOAD, IdRepoEntitlement.USER_SEARCH).hideLabel();\n         return panel;\n     }\n "},{"sha":"c544bbb4564937c6df53162529baefc67d59effb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -59,8 +59,8 @@ public class DynRealmDirectoryPanel extends\n \n     protected DynRealmDirectoryPanel(final String id, final Builder builder) {\n         super(id, builder);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.DYNREALM_CREATE);\n-        setReadOnly(!SyncopeConsoleSession.get().owns(StandardEntitlement.DYNREALM_UPDATE));\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.DYNREALM_CREATE);\n+        setReadOnly(!SyncopeConsoleSession.get().owns(IdRepoEntitlement.DYNREALM_UPDATE));\n \n         disableCheckBoxes();\n         setShowResultPage(true);\n@@ -92,7 +92,7 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         };\n         ((WebMarkupContainer) get(\"container:content\")).addOrReplace(newDynRealmlLink);\n-        MetaDataRoleAuthorizationStrategy.authorize(newDynRealmlLink, RENDER, StandardEntitlement.DYNREALM_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(newDynRealmlLink, RENDER, IdRepoEntitlement.DYNREALM_CREATE);\n \n         initResultTable();\n     }\n@@ -131,7 +131,7 @@ public void onClick(final AjaxRequestTarget target, final DynRealmTO ignore) {\n                 modal.show(true);\n                 target.add(modal);\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.DYNREALM_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.DYNREALM_UPDATE);\n \n         panel.add(new ActionLink<DynRealmTO>() {\n \n@@ -150,7 +150,7 @@ public void onClick(final AjaxRequestTarget target, final DynRealmTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.DYNREALM_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.DYNREALM_DELETE, true);\n \n         return panel;\n     }"},{"sha":"be5331139d975a27a0cdb8efcef0019bf7961f0d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -54,7 +54,7 @@\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ProvisionAction;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -128,7 +128,7 @@ protected Panel getDirectoryPanel(final String id) {\n                                     setWizardInModal(false).build(id);\n \n                             MetaDataRoleAuthorizationStrategy.authorize(\n-                                    panel, WebPage.RENDER, StandardEntitlement.USER_SEARCH);\n+                                    panel, WebPage.RENDER, IdRepoEntitlement.USER_SEARCH);\n                         } else {\n                             String query = SyncopeClient.getAnyObjectSearchConditionBuilder(type).and(\n                                     SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()),\n@@ -196,7 +196,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 displayAttributeModal.header(new ResourceModel(\"any.attr.display\"));\n                 displayAttributeModal.show(true);\n             }\n-        }, ActionType.CHANGE_VIEW, StandardEntitlement.GROUP_READ).hideLabel();\n+        }, ActionType.CHANGE_VIEW, IdRepoEntitlement.GROUP_READ).hideLabel();\n         return panel;\n     }\n \n@@ -215,7 +215,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                                 restClient.read(model.getObject().getKey())), target));\n             }\n         }, ActionType.EDIT,\n-                String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).\n+                String.format(\"%s,%s\", IdRepoEntitlement.GROUP_READ, IdRepoEntitlement.GROUP_UPDATE)).\n                 setRealms(realm, model.getObject().getDynRealms());\n \n         panel.add(new ActionLink<GroupTO>() {\n@@ -234,7 +234,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n             protected boolean statusCondition(final GroupTO modelObject) {\n                 return realm.startsWith(SyncopeConstants.ROOT_REALM);\n             }\n-        }, ActionType.CLONE, StandardEntitlement.GROUP_CREATE).setRealm(realm);\n+        }, ActionType.CLONE, IdRepoEntitlement.GROUP_CREATE).setRealm(realm);\n \n         panel.add(new ActionLink<GroupTO>() {\n \n@@ -247,7 +247,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 typeExtensionsModal.header(new StringResourceModel(\"typeExtensions\", model));\n                 typeExtensionsModal.show(true);\n             }\n-        }, ActionType.TYPE_EXTENSIONS, StandardEntitlement.GROUP_UPDATE).\n+        }, ActionType.TYPE_EXTENSIONS, IdRepoEntitlement.GROUP_UPDATE).\n                 setRealms(realm, model.getObject().getDynRealms());\n \n         panel.add(new ActionLink<GroupTO>() {\n@@ -265,7 +265,7 @@ public boolean isIndicatorEnabled() {\n                 return false;\n             }\n         }, ActionType.MEMBERS,\n-                String.format(\"%s,%s\", StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE)).\n+                String.format(\"%s,%s\", IdRepoEntitlement.GROUP_READ, IdRepoEntitlement.GROUP_UPDATE)).\n                 setRealms(realm, model.getObject().getDynRealms());\n \n         panel.add(new ActionLink<GroupTO>() {\n@@ -286,7 +286,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionType.PROVISION_MEMBERS,\n-                String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE)).\n+                String.format(\"%s,%s\", IdRepoEntitlement.TASK_CREATE, IdRepoEntitlement.TASK_EXECUTE)).\n                 setRealm(realm);\n \n         panel.add(new ActionLink<GroupTO>() {\n@@ -307,7 +307,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionType.DEPROVISION_MEMBERS,\n-                String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE)).\n+                String.format(\"%s,%s\", IdRepoEntitlement.TASK_CREATE, IdRepoEntitlement.TASK_EXECUTE)).\n                 setRealm(realm);\n \n         SyncopeWebApplication.get().getAnyDirectoryPanelAditionalActionLinksProvider().get(\n@@ -328,7 +328,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 utilityModal.header(new StringResourceModel(\"any.propagation.tasks\", model));\n                 utilityModal.show(true);\n             }\n-        }, ActionType.PROPAGATION_TASKS, StandardEntitlement.TASK_LIST);\n+        }, ActionType.PROPAGATION_TASKS, IdRepoEntitlement.TASK_LIST);\n \n         panel.add(new ActionLink<GroupTO>() {\n \n@@ -341,7 +341,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 utilityModal.header(new StringResourceModel(\"any.notification.tasks\", model));\n                 utilityModal.show(true);\n             }\n-        }, ActionType.NOTIFICATION_TASKS, StandardEntitlement.TASK_LIST);\n+        }, ActionType.NOTIFICATION_TASKS, IdRepoEntitlement.TASK_LIST);\n \n         panel.add(new ActionLink<GroupTO>() {\n \n@@ -365,7 +365,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n             protected boolean statusCondition(final GroupTO modelObject) {\n                 return realm.startsWith(SyncopeConstants.ROOT_REALM);\n             }\n-        }, ActionType.DELETE, StandardEntitlement.GROUP_DELETE, true).setRealm(realm);\n+        }, ActionType.DELETE, IdRepoEntitlement.GROUP_DELETE, true).setRealm(realm);\n \n         return panel;\n     }"},{"sha":"b08ad2dc223447fa25d3f2700ade2cbe07d28986","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -121,7 +121,7 @@ public void onClick(final AjaxRequestTarget target) {\n         };\n         ((WebMarkupContainer) get(\"container:content\")).addOrReplace(replaceAddLink);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.IMPLEMENTATION_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.IMPLEMENTATION_CREATE);\n     }\n \n     @Override\n@@ -149,7 +149,7 @@ public void onClick(final AjaxRequestTarget target, final ImplementationTO ignor\n                 modal.header(new StringResourceModel(\"any.edit\", Model.of(model.getObject())));\n                 modal.show(true);\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.IMPLEMENTATION_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.IMPLEMENTATION_UPDATE);\n \n         panel.add(new ActionLink<ImplementationTO>() {\n \n@@ -168,7 +168,7 @@ public void onClick(final AjaxRequestTarget target, final ImplementationTO ignor\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.IMPLEMENTATION_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.IMPLEMENTATION_DELETE, true);\n \n         return panel;\n     }"},{"sha":"8d7977b68551bb96ca4b4f150fa0db610974122f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -117,7 +117,7 @@ public WizardModalPanel<Attr> build(final String id, final int index, final Ajax\n         modal.size(Modal.Size.Medium);\n         initResultTable();\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.CONFIGURATION_SET);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.CONFIGURATION_SET);\n     }\n \n     public ParametersDirectoryPanel(final String id, final Builder<Attr, Attr, ConfRestClient> builder) {\n@@ -187,7 +187,7 @@ public void onClick(final AjaxRequestTarget target, final Attr ignore) {\n                 modalDetails.setContent(new ParametersEditModalPanel(modalDetails, model.getObject(), pageRef));\n                 modalDetails.show(true);\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.CONFIGURATION_SET);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.CONFIGURATION_SET);\n \n         panel.add(new ActionLink<Attr>() {\n \n@@ -207,7 +207,7 @@ public void onClick(final AjaxRequestTarget target, final Attr ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.CONFIGURATION_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.CONFIGURATION_DELETE, true);\n \n         return panel;\n     }"},{"sha":"8b008c210084f2ff703b66ce6f49c3d36908ba83","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ApplicationTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -76,7 +76,7 @@ protected PrivilegeDirectoryPanel(\n \n         this.addNewItemPanelBuilder(new PrivilegeWizardBuilder(application, new PrivilegeTO(), pageRef), true);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.APPLICATION_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.APPLICATION_UPDATE);\n         initResultTable();\n     }\n \n@@ -104,7 +104,7 @@ public void onClick(final AjaxRequestTarget target, final PrivilegeTO ignore) {\n                 send(PrivilegeDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.APPLICATION_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.APPLICATION_UPDATE);\n \n         panel.add(new ActionLink<PrivilegeTO>() {\n \n@@ -124,7 +124,7 @@ public void onClick(final AjaxRequestTarget target, final PrivilegeTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.APPLICATION_UPDATE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.APPLICATION_UPDATE, true);\n \n         return panel;\n     }"},{"sha":"e4d91b08a3cdfe23f94e2f12c5796cc3cb427d29","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.ExecStatus;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -104,7 +104,7 @@ private List<ITab> buildTabList(final PageReference pageRef) {\n         List<ITab> tabs = new ArrayList<>();\n \n         tabs.add(new ITabComponent(new Model<>(\"DETAILS\"),\n-                StandardEntitlement.REALM_CREATE, StandardEntitlement.REALM_UPDATE, StandardEntitlement.REALM_DELETE) {\n+                IdRepoEntitlement.REALM_CREATE, IdRepoEntitlement.REALM_UPDATE, IdRepoEntitlement.REALM_DELETE) {\n \n             private static final long serialVersionUID = -5861786415855103549L;\n \n@@ -122,7 +122,7 @@ public Panel getPanel(final String panelId) {\n                         public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                             onClickCreate(target);\n                         }\n-                    }, ActionLink.ActionType.CREATE, StandardEntitlement.REALM_CREATE).hideLabel();\n+                    }, ActionLink.ActionType.CREATE, IdRepoEntitlement.REALM_CREATE).hideLabel();\n \n                     actionPanel.add(new ActionLink<RealmTO>(realmTO) {\n \n@@ -132,7 +132,7 @@ public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                         public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                             onClickEdit(target, realmTO);\n                         }\n-                    }, ActionLink.ActionType.EDIT, StandardEntitlement.REALM_UPDATE).hideLabel();\n+                    }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REALM_UPDATE).hideLabel();\n \n                     actionPanel.add(new ActionLink<RealmTO>(realmTO) {\n \n@@ -142,7 +142,7 @@ public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                         public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                             onClickTemplate(target);\n                         }\n-                    }, ActionLink.ActionType.TEMPLATE, StandardEntitlement.REALM_UPDATE).hideLabel();\n+                    }, ActionLink.ActionType.TEMPLATE, IdRepoEntitlement.REALM_UPDATE).hideLabel();\n \n                     actionPanel.add(new ActionLink<RealmTO>(realmTO) {\n \n@@ -152,7 +152,7 @@ public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                         public void onClick(final AjaxRequestTarget target, final RealmTO ignore) {\n                             onClickDelete(target, realmTO);\n                         }\n-                    }, ActionLink.ActionType.DELETE, StandardEntitlement.REALM_DELETE, true).hideLabel();\n+                    }, ActionLink.ActionType.DELETE, IdRepoEntitlement.REALM_DELETE, true).hideLabel();\n                 }\n \n                 RealmDetails panel = new RealmDetails(panelId, realmTO, actionPanel, false);\n@@ -243,7 +243,7 @@ protected Component getValueComponent(final String key, final PropagationStatus\n         builder.withChecks(ListViewPanel.CheckAvailability.NONE);\n         builder.setReuseItem(false);\n \n-        builder.addAction(new ActionLink<PropagationStatus>() {\n+        ActionLink<PropagationStatus> connObjectLink = new ActionLink<PropagationStatus>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n@@ -258,7 +258,8 @@ protected boolean statusCondition(final PropagationStatus bean) {\n             public void onClick(final AjaxRequestTarget target, final PropagationStatus status) {\n                 mlp.next(status.getResource(), new RemoteRealmPanel(status), target);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.RESOURCE_GET_CONNOBJECT);\n+        };\n+        SyncopeWebApplication.get().getStatusProvider().addConnObjectLink(builder, connObjectLink);\n \n         builder.addAction(new ActionLink<PropagationStatus>() {\n "},{"sha":"bdd1f44ebdf536c60c0eb6e10492d67672296a0c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -289,7 +289,7 @@ public boolean isEnabled() {\n         realms.setAlignment(AlignmentBehavior.Alignment.RIGHT);\n         realms.setType(Buttons.Type.Menu);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(realms, ENABLE, StandardEntitlement.REALM_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(realms, ENABLE, IdRepoEntitlement.REALM_LIST);\n \n         container.addOrReplace(realms);\n     }"},{"sha":"a8be082c615b260461a26278b380535657b20f5f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypesPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -99,7 +99,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n         }, true);\n \n         initResultTable();\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.RELATIONSHIPTYPE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.RELATIONSHIPTYPE_CREATE);\n     }\n \n     @Override\n@@ -171,7 +171,7 @@ public void onClick(final AjaxRequestTarget target, final RelationshipTypeTO ign\n                 send(RelationshipTypesPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.RELATIONSHIPTYPE_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.RELATIONSHIPTYPE_UPDATE);\n         panel.add(new ActionLink<RelationshipTypeTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -189,7 +189,7 @@ public void onClick(final AjaxRequestTarget target, final RelationshipTypeTO ign\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.RELATIONSHIPTYPE_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.RELATIONSHIPTYPE_DELETE, true);\n \n         return panel;\n     }"},{"sha":"6700d41157d07744917d64b251cf3f8ef3d2e6fd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -53,7 +53,7 @@\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -78,8 +78,8 @@ public class RoleDirectoryPanel extends DirectoryPanel<RoleTO, RoleWrapper, Role\n \n     protected RoleDirectoryPanel(final String id, final Builder builder) {\n         super(id, builder);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.ROLE_CREATE);\n-        setReadOnly(!SyncopeConsoleSession.get().owns(StandardEntitlement.ROLE_UPDATE));\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.ROLE_CREATE);\n+        setReadOnly(!SyncopeConsoleSession.get().owns(IdRepoEntitlement.ROLE_UPDATE));\n \n         disableCheckBoxes();\n         setShowResultPage(true);\n@@ -139,7 +139,7 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                                 new RoleWrapper(new RoleRestClient().read(model.getObject().getKey())),\n                                 target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.ROLE_READ);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.ROLE_READ);\n \n         panel.add(new ActionLink<RoleTO>() {\n \n@@ -152,7 +152,7 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                 send(RoleDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.NewItemActionEvent<>(new RoleWrapper(clone), target));\n             }\n-        }, ActionLink.ActionType.CLONE, StandardEntitlement.ROLE_CREATE);\n+        }, ActionLink.ActionType.CLONE, IdRepoEntitlement.ROLE_CREATE);\n \n         panel.add(new ActionLink<RoleTO>() {\n \n@@ -191,7 +191,7 @@ protected Panel getDirectoryPanel(final String id) {\n                         MetaDataRoleAuthorizationStrategy.authorize(\n                                 panel,\n                                 WebPage.RENDER,\n-                                StandardEntitlement.USER_SEARCH);\n+                                IdRepoEntitlement.USER_SEARCH);\n \n                         return panel;\n                     }\n@@ -202,7 +202,7 @@ protected Panel getDirectoryPanel(final String id) {\n                 membersModal.show(true);\n                 target.add(membersModal);\n             }\n-        }, ActionLink.ActionType.MEMBERS, StandardEntitlement.USER_SEARCH);\n+        }, ActionLink.ActionType.MEMBERS, IdRepoEntitlement.USER_SEARCH);\n \n         panel.add(new ActionLink<RoleTO>() {\n \n@@ -237,7 +237,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                 utilityModal.show(true);\n                 target.add(utilityModal);\n             }\n-        }, ActionLink.ActionType.LAYOUT_EDIT, StandardEntitlement.ROLE_UPDATE);\n+        }, ActionLink.ActionType.LAYOUT_EDIT, IdRepoEntitlement.ROLE_UPDATE);\n         panel.add(new ActionLink<RoleTO>() {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n@@ -255,7 +255,7 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.ROLE_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.ROLE_DELETE, true);\n \n         return panel;\n     }"},{"sha":"acfc3ad41f4eadd7699344d104f70155e282b8d3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -98,7 +98,7 @@ public SchemaTypePanel(final String id, final SchemaType schemaType, final PageR\n         this.restClient = new SchemaRestClient();\n \n         initResultTable();\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.SCHEMA_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.SCHEMA_CREATE);\n     }\n \n     @Override\n@@ -171,7 +171,7 @@ public void onClick(final AjaxRequestTarget target, final SchemaTO ignore) {\n                 send(SchemaTypePanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.SCHEMA_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.SCHEMA_UPDATE);\n         panel.add(new ActionLink<SchemaTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -202,7 +202,7 @@ public void onClick(final AjaxRequestTarget target, final SchemaTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.SCHEMA_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.SCHEMA_DELETE, true);\n \n         return panel;\n     }"},{"sha":"57bd37dfe6003f51fb34f5c3919fa4ca0e4ac816","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypeWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n@@ -220,7 +220,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                 target.add(Labels.this);\n                             }\n                         }\n-                    }, ActionLink.ActionType.DELETE, StandardEntitlement.SCHEMA_UPDATE, true).hideLabel();\n+                    }, ActionLink.ActionType.DELETE, IdRepoEntitlement.SCHEMA_UPDATE, true).hideLabel();\n                     item.add(actions);\n                 }\n             };"},{"sha":"e7b685bd0c16bec71c85f44f7715cbb381a4c753","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -98,7 +98,7 @@ public WizardModalPanel<SecurityQuestionTO> build(\n         modal.size(Modal.Size.Large);\n         initResultTable();\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.SECURITY_QUESTION_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.SECURITY_QUESTION_CREATE);\n     }\n \n     private SecurityQuestionsPanel(\n@@ -149,7 +149,7 @@ public void onClick(final AjaxRequestTarget target, final SecurityQuestionTO ign\n                 send(SecurityQuestionsPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.SECURITY_QUESTION_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.SECURITY_QUESTION_UPDATE);\n         panel.add(new ActionLink<SecurityQuestionTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -167,7 +167,7 @@ public void onClick(final AjaxRequestTarget target, final SecurityQuestionTO ign\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.TASK_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n         return panel;\n     }"},{"sha":"db404f053bbf41d8f2b16b0afb55fa5a0e473409","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -120,7 +120,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n             protected boolean statusCondition(final Serializable modelObject) {\n                 return wizardInModal;\n             }\n-        }, ActionType.CHANGE_VIEW, StandardEntitlement.USER_READ).hideLabel();\n+        }, ActionType.CHANGE_VIEW, IdRepoEntitlement.USER_READ).hideLabel();\n         return panel;\n     }\n \n@@ -140,7 +140,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                                 target));\n             }\n         }, ActionType.EDIT,\n-                String.format(\"%s,%s\", StandardEntitlement.USER_READ, StandardEntitlement.USER_UPDATE)).\n+                String.format(\"%s,%s\", IdRepoEntitlement.USER_READ, IdRepoEntitlement.USER_UPDATE)).\n                 setRealms(realm, model.getObject().getDynRealms());\n \n         panel.add(new ActionLink<UserTO>() {\n@@ -160,7 +160,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n             protected boolean statusCondition(final UserTO modelObject) {\n                 return addAjaxLink.isVisibleInHierarchy() && realm.startsWith(SyncopeConstants.ROOT_REALM);\n             }\n-        }, ActionType.CLONE, StandardEntitlement.USER_CREATE).setRealm(realm);\n+        }, ActionType.CLONE, IdRepoEntitlement.USER_CREATE).setRealm(realm);\n \n         panel.add(new ActionLink<UserTO>() {\n \n@@ -183,7 +183,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionType.MUSTCHANGEPASSWORD, StandardEntitlement.USER_UPDATE).\n+        }, ActionType.MUSTCHANGEPASSWORD, IdRepoEntitlement.USER_UPDATE).\n                 setRealms(realm, model.getObject().getDynRealms());\n \n         if (wizardInModal) {\n@@ -207,7 +207,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n \n                     displayAttributeModal.show(true);\n                 }\n-            }, ActionType.PASSWORD_MANAGEMENT, StandardEntitlement.USER_UPDATE).\n+            }, ActionType.PASSWORD_MANAGEMENT, IdRepoEntitlement.USER_UPDATE).\n                     setRealms(realm, model.getObject().getDynRealms());\n \n             if (SyncopeConsoleSession.get().getPlatformInfo().isPwdResetAllowed()\n@@ -232,7 +232,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                         }\n                         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                     }\n-                }, ActionType.REQUEST_PASSWORD_RESET, StandardEntitlement.USER_UPDATE).\n+                }, ActionType.REQUEST_PASSWORD_RESET, IdRepoEntitlement.USER_UPDATE).\n                         setRealms(realm, model.getObject().getDynRealms());\n             }\n \n@@ -255,7 +255,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                     utilityModal.header(new StringResourceModel(\"any.propagation.tasks\", model));\n                     utilityModal.show(true);\n                 }\n-            }, ActionType.PROPAGATION_TASKS, StandardEntitlement.TASK_LIST);\n+            }, ActionType.PROPAGATION_TASKS, IdRepoEntitlement.TASK_LIST);\n \n             panel.add(new ActionLink<UserTO>() {\n \n@@ -269,7 +269,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                     utilityModal.show(true);\n                     target.add(utilityModal);\n                 }\n-            }, ActionType.NOTIFICATION_TASKS, StandardEntitlement.TASK_LIST);\n+            }, ActionType.NOTIFICATION_TASKS, IdRepoEntitlement.TASK_LIST);\n         }\n \n         panel.add(new ActionLink<UserTO>() {\n@@ -295,7 +295,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n             protected boolean statusCondition(final UserTO modelObject) {\n                 return realm.startsWith(SyncopeConstants.ROOT_REALM);\n             }\n-        }, ActionType.DELETE, StandardEntitlement.USER_DELETE, true).setRealm(realm);\n+        }, ActionType.DELETE, IdRepoEntitlement.USER_DELETE, true).setRealm(realm);\n \n         return panel;\n     }"},{"sha":"a5216b3867b45912915dba382bbe34c50e7ad3ae","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.event.IEventSink;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -127,7 +127,7 @@ protected AbstractSearchPanel(\n         super(id);\n         populate();\n         Pair<IModel<Map<String, String>>, Integer> groupInfo =\n-                SyncopeConsoleSession.get().owns(StandardEntitlement.GROUP_SEARCH)\n+                SyncopeConsoleSession.get().owns(IdRepoEntitlement.GROUP_SEARCH)\n                 ? Pair.of(groupNames, groupRestClient.count(SyncopeConstants.ROOT_REALM, null, null))\n                 : Pair.of(groupNames, 0);\n "},{"sha":"e427dd60bb19f2ba6301690ebab470d4b3a03167","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/AccountPolicyDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccountPolicyDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -47,7 +47,7 @@ public AccountPolicyDirectoryPanel(final String id, final PageReference pageRef)\n \n         this.addNewItemPanelBuilder(new PolicyModalPanelBuilder<>(\n                 PolicyType.ACCOUNT, new AccountPolicyTO(), modal, pageRef), true);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.POLICY_CREATE);\n \n         initResultTable();\n     }\n@@ -79,11 +79,11 @@ public void onClick(final AjaxRequestTarget target, final AccountPolicyTO ignore\n                         \"policy.rules\", AccountPolicyDirectoryPanel.this, Model.of(model.getObject())));\n \n                 MetaDataRoleAuthorizationStrategy.authorize(\n-                        ruleCompositionModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+                        ruleCompositionModal.getForm(), ENABLE, IdRepoEntitlement.POLICY_UPDATE);\n \n                 ruleCompositionModal.show(true);\n             }\n-        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+        }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.POLICY_UPDATE);\n     }\n \n }"},{"sha":"ecb7b805151d8fe899a81db313fdc9593c9ac9bd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PasswordPolicyDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPasswordPolicyDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -46,7 +46,7 @@ public PasswordPolicyDirectoryPanel(final String id, final PageReference pageRef\n \n         this.addNewItemPanelBuilder(\n                 new PolicyModalPanelBuilder<>(PolicyType.PASSWORD, new PasswordPolicyTO(), modal, pageRef), true);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.POLICY_CREATE);\n \n         initResultTable();\n     }\n@@ -75,10 +75,10 @@ public void onClick(final AjaxRequestTarget target, final PasswordPolicyTO ignor\n                         \"policy.rules\", PasswordPolicyDirectoryPanel.this, Model.of(model.getObject())));\n \n                 MetaDataRoleAuthorizationStrategy.authorize(\n-                        ruleCompositionModal.getForm(), ENABLE, StandardEntitlement.POLICY_UPDATE);\n+                        ruleCompositionModal.getForm(), ENABLE, IdRepoEntitlement.POLICY_UPDATE);\n \n                 ruleCompositionModal.show(true);\n             }\n-        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.POLICY_UPDATE);\n+        }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.POLICY_UPDATE);\n     }\n }"},{"sha":"e59e657b82d92397270aebc271c4ba3645cc8baf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -147,7 +147,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                         new AjaxWizard.EditItemActionEvent<>(\n                                 restClient.getPolicy(type, model.getObject().getKey()), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.POLICY_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.POLICY_UPDATE);\n \n         panel.add(new ActionLink<T>() {\n \n@@ -160,7 +160,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(clone, target));\n             }\n-        }, ActionLink.ActionType.CLONE, StandardEntitlement.POLICY_CREATE);\n+        }, ActionLink.ActionType.CLONE, IdRepoEntitlement.POLICY_CREATE);\n \n         addCustomActions(panel, model);\n \n@@ -182,7 +182,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.POLICY_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.POLICY_DELETE, true);\n \n         return panel;\n     }"},{"sha":"b79e486b66269acf4c3340f9659d514502c79c5b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.ComposablePolicy;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n@@ -106,7 +106,7 @@ protected PolicyRuleDirectoryPanel(\n         this.addNewItemPanelBuilder(\n                 new PolicyRuleWizardBuilder(policy, type, new PolicyRuleWrapper(true), pageRef), true);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.POLICY_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.POLICY_UPDATE);\n         initResultTable();\n     }\n \n@@ -157,7 +157,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n                             new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n                 }\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.POLICY_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.POLICY_UPDATE);\n         panel.add(new ActionLink<PolicyRuleWrapper>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -181,7 +181,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.POLICY_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.POLICY_DELETE, true);\n \n         return panel;\n     }\n@@ -200,7 +200,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     customActionOnFinishCallback(target);\n                 }\n             }\n-        }, ActionLink.ActionType.RELOAD, StandardEntitlement.POLICY_LIST).hideLabel();\n+        }, ActionLink.ActionType.RELOAD, IdRepoEntitlement.POLICY_LIST).hideLabel();\n         return panel;\n     }\n "},{"sha":"f052786024a5c3347f3dd21d5e2fe21c863555cc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.widgets.JobActionPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -82,7 +82,7 @@ protected ReportDirectoryPanel(final MultilevelPanel multiLevelPanelRef, final P\n         this.restClient = new ReportRestClient();\n \n         this.addNewItemPanelBuilder(new ReportWizardBuilder(new ReportTO(), pageRef), true);\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.REPORT_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.REPORT_CREATE);\n \n         modal.size(Modal.Size.Large);\n         initResultTable();\n@@ -143,8 +143,8 @@ public void populateItem(\n                     panel = new JobActionPanel(componentId, jobTO, false, ReportDirectoryPanel.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s\",\n-                                    StandardEntitlement.REPORT_EXECUTE,\n-                                    StandardEntitlement.REPORT_UPDATE));\n+                                    IdRepoEntitlement.REPORT_EXECUTE,\n+                                    IdRepoEntitlement.REPORT_UPDATE));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not get job for report {}\", rowModel.getObject().getKey(), e);\n                     panel = new Label(componentId, Model.of());\n@@ -185,7 +185,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                         new AjaxWizard.EditItemActionEvent<>(\n                                 restClient.read(model.getObject().getKey()), target));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.REPORT_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REPORT_UPDATE);\n \n         panel.add(new ActionLink<ReportTO>() {\n \n@@ -198,7 +198,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 send(ReportDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(clone, target));\n             }\n-        }, ActionLink.ActionType.CLONE, StandardEntitlement.REPORT_CREATE);\n+        }, ActionLink.ActionType.CLONE, IdRepoEntitlement.REPORT_CREATE);\n \n         panel.add(new ActionLink<ReportTO>() {\n \n@@ -211,13 +211,9 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n \n                 modal.header(new StringResourceModel(\n                         \"reportlet.conf\", ReportDirectoryPanel.this, Model.of(model.getObject())));\n-\n-                MetaDataRoleAuthorizationStrategy.authorize(\n-                        modal.getForm(), ENABLE, StandardEntitlement.RESOURCE_UPDATE);\n-\n                 modal.show(true);\n             }\n-        }, ActionLink.ActionType.COMPOSE, StandardEntitlement.REPORT_UPDATE);\n+        }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.REPORT_UPDATE);\n \n         panel.add(new ActionLink<ReportTO>() {\n \n@@ -227,7 +223,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 viewReport(model.getObject(), target);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.REPORT_READ);\n+        }, ActionLink.ActionType.VIEW, IdRepoEntitlement.REPORT_READ);\n \n         panel.add(new ActionLink<ReportTO>() {\n \n@@ -239,7 +235,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                         model.getObject().getKey(), model.getObject().getName(), target);\n                 startAt.toggle(target, true);\n             }\n-        }, ActionLink.ActionType.EXECUTE, StandardEntitlement.REPORT_EXECUTE);\n+        }, ActionLink.ActionType.EXECUTE, IdRepoEntitlement.REPORT_EXECUTE);\n \n         panel.add(new ActionLink<ReportTO>() {\n \n@@ -259,7 +255,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.REPORT_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.REPORT_DELETE, true);\n         return panel;\n     }\n "},{"sha":"b762b049c8bc54a2ea6066773691ea37143318f6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportExecutionDetails.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.model.IModel;\n@@ -90,7 +90,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setDetails(model.getObject().getKey(), ReportExecExportFormat.CSV);\n                     downloadBehavior.initiate(target);\n                 }\n-            }, ActionLink.ActionType.EXPORT_CSV, StandardEntitlement.REPORT_READ);\n+            }, ActionLink.ActionType.EXPORT_CSV, IdRepoEntitlement.REPORT_READ);\n \n             panel.add(new ActionLink<ExecTO>() {\n \n@@ -101,7 +101,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setDetails(model.getObject().getKey(), ReportExecExportFormat.HTML);\n                     downloadBehavior.initiate(target);\n                 }\n-            }, ActionLink.ActionType.EXPORT_HTML, StandardEntitlement.REPORT_READ);\n+            }, ActionLink.ActionType.EXPORT_HTML, IdRepoEntitlement.REPORT_READ);\n \n             panel.add(new ActionLink<ExecTO>() {\n \n@@ -112,7 +112,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setDetails(model.getObject().getKey(), ReportExecExportFormat.PDF);\n                     downloadBehavior.initiate(target);\n                 }\n-            }, ActionLink.ActionType.EXPORT_PDF, StandardEntitlement.REPORT_READ);\n+            }, ActionLink.ActionType.EXPORT_PDF, IdRepoEntitlement.REPORT_READ);\n \n             panel.add(new ActionLink<ExecTO>() {\n \n@@ -123,7 +123,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setDetails(model.getObject().getKey(), ReportExecExportFormat.RTF);\n                     downloadBehavior.initiate(target);\n                 }\n-            }, ActionLink.ActionType.EXPORT_RTF, StandardEntitlement.REPORT_READ);\n+            }, ActionLink.ActionType.EXPORT_RTF, IdRepoEntitlement.REPORT_READ);\n \n             panel.add(new ActionLink<ExecTO>() {\n \n@@ -134,7 +134,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setDetails(model.getObject().getKey(), ReportExecExportFormat.XML);\n                     downloadBehavior.initiate(target);\n                 }\n-            }, ActionLink.ActionType.EXPORT_XML, StandardEntitlement.REPORT_READ);\n+            }, ActionLink.ActionType.EXPORT_XML, IdRepoEntitlement.REPORT_READ);\n         }\n     }\n "},{"sha":"4d2465ea765c02ed3cbf3936d54eec3909dea35b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportTemplateDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -104,7 +104,7 @@ public WizardModalPanel<ReportTemplateTO> build(\n \n         initResultTable();\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.MAIL_TEMPLATE_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.MAIL_TEMPLATE_CREATE);\n     }\n \n     @Override\n@@ -134,7 +134,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTemplateTO ignor\n                 utilityModal.show(true);\n                 target.add(utilityModal);\n             }\n-        }, ActionLink.ActionType.FO_EDIT, StandardEntitlement.MAIL_TEMPLATE_UPDATE);\n+        }, ActionLink.ActionType.FO_EDIT, IdRepoEntitlement.MAIL_TEMPLATE_UPDATE);\n \n         panel.add(new ActionLink<ReportTemplateTO>() {\n \n@@ -152,7 +152,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTemplateTO ignor\n                 utilityModal.show(true);\n                 target.add(utilityModal);\n             }\n-        }, ActionLink.ActionType.HTML, StandardEntitlement.MAIL_TEMPLATE_UPDATE);\n+        }, ActionLink.ActionType.HTML, IdRepoEntitlement.MAIL_TEMPLATE_UPDATE);\n \n         panel.add(new ActionLink<ReportTemplateTO>() {\n \n@@ -170,7 +170,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTemplateTO ignor\n                 utilityModal.show(true);\n                 target.add(utilityModal);\n             }\n-        }, ActionLink.ActionType.TEXT, StandardEntitlement.MAIL_TEMPLATE_UPDATE);\n+        }, ActionLink.ActionType.TEXT, IdRepoEntitlement.MAIL_TEMPLATE_UPDATE);\n \n         panel.add(new ActionLink<ReportTemplateTO>() {\n \n@@ -189,7 +189,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTemplateTO ignor\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.MAIL_TEMPLATE_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.MAIL_TEMPLATE_DELETE, true);\n \n         return panel;\n     }"},{"sha":"8e65cf746402b0331e3149cb59b0f53d4eb1b29b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n@@ -94,7 +94,7 @@ public ReportletDirectoryPanel(\n         this.addNewItemPanelBuilder(\n                 new ReportletWizardBuilder(report, new ReportletWrapper(true), pageRef), true);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.REPORT_UPDATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.REPORT_UPDATE);\n         initResultTable();\n     }\n \n@@ -145,7 +145,7 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n                             new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n                 }\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.REPORT_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REPORT_UPDATE);\n         panel.add(new ActionLink<ReportletWrapper>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -167,7 +167,7 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.REPORT_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.REPORT_DELETE, true);\n \n         return panel;\n     }\n@@ -186,7 +186,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     customActionOnFinishCallback(target);\n                 }\n             }\n-        }, ActionLink.ActionType.RELOAD, StandardEntitlement.TASK_LIST).hideLabel();\n+        }, ActionLink.ActionType.RELOAD, IdRepoEntitlement.TASK_LIST).hideLabel();\n         return panel;\n     }\n "},{"sha":"e441b663d8324406b7ff37b4451ecb92e264482e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n@@ -119,7 +119,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 next(new StringResourceModel(\"execution.view\", ExecutionsDirectoryPanel.this, model).\n                         getObject(), new ExecMessage(model.getObject().getMessage()), target);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.TASK_READ);\n+        }, ActionLink.ActionType.VIEW, IdRepoEntitlement.TASK_READ);\n         panel.add(new ActionLink<ExecTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -136,7 +136,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.TASK_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n         addFurtherAcions(panel, model);\n "},{"sha":"8e74c4174e1af50ea35869bebaca3efed9f05934","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -115,7 +115,7 @@ public ActionsPanel<NotificationTaskTO> getActions(final IModel<NotificationTask\n             public void onClick(final AjaxRequestTarget target, final NotificationTaskTO modelObject) {\n                 viewTask(taskTO, target);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.TASK_READ);\n+        }, ActionLink.ActionType.VIEW, IdRepoEntitlement.TASK_READ);\n         panel.add(new ActionLink<NotificationTaskTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -124,7 +124,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTaskTO mod\n             public void onClick(final AjaxRequestTarget target, final NotificationTaskTO modelObject) {\n                 viewMailBody(MailTemplateFormat.TEXT, taskTO.getTextBody(), target);\n             }\n-        }, ActionLink.ActionType.TEXT, StandardEntitlement.TASK_READ);\n+        }, ActionLink.ActionType.TEXT, IdRepoEntitlement.TASK_READ);\n         panel.add(new ActionLink<NotificationTaskTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -133,7 +133,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTaskTO mod\n             public void onClick(final AjaxRequestTarget target, final NotificationTaskTO modelObject) {\n                 viewMailBody(MailTemplateFormat.HTML, taskTO.getHtmlBody(), target);\n             }\n-        }, ActionLink.ActionType.HTML, StandardEntitlement.TASK_READ);\n+        }, ActionLink.ActionType.HTML, IdRepoEntitlement.TASK_READ);\n         panel.add(new ActionLink<NotificationTaskTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -151,7 +151,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTaskTO mod\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.EXECUTE, StandardEntitlement.TASK_EXECUTE);\n+        }, ActionLink.ActionType.EXECUTE, IdRepoEntitlement.TASK_EXECUTE);\n         panel.add(new ActionLink<NotificationTaskTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -170,7 +170,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTaskTO mod\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.TASK_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n         return panel;\n     }"},{"sha":"ed4e18042f34391ff632bf77d6e8bdaf89ab5b10","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTaskDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -126,7 +126,7 @@ public void onClick(final AjaxRequestTarget target, final PropagationTaskTO mode\n                 PropagationTaskDirectoryPanel.this.getTogglePanel().close(target);\n                 viewTask(taskTO, target);\n             }\n-        }, ActionLink.ActionType.VIEW_EXECUTIONS, StandardEntitlement.TASK_READ);\n+        }, ActionLink.ActionType.VIEW_EXECUTIONS, IdRepoEntitlement.TASK_READ);\n \n         // [SYNCOPE-1115] - Display attributes for propagation tasks\n         panel.add(new ActionLink<PropagationTaskTO>() {\n@@ -138,7 +138,7 @@ public void onClick(final AjaxRequestTarget target, final PropagationTaskTO mode\n                 PropagationTaskDirectoryPanel.this.getTogglePanel().close(target);\n                 viewTaskDetails(modelObject, target);\n             }\n-        }, ActionLink.ActionType.VIEW_DETAILS, StandardEntitlement.TASK_READ);\n+        }, ActionLink.ActionType.VIEW_DETAILS, IdRepoEntitlement.TASK_READ);\n \n         panel.add(new ActionLink<PropagationTaskTO>() {\n \n@@ -157,7 +157,7 @@ public void onClick(final AjaxRequestTarget target, final PropagationTaskTO mode\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.EXECUTE, StandardEntitlement.TASK_EXECUTE);\n+        }, ActionLink.ActionType.EXECUTE, IdRepoEntitlement.TASK_EXECUTE);\n \n         panel.add(new ActionLink<PropagationTaskTO>() {\n \n@@ -177,7 +177,7 @@ public void onClick(final AjaxRequestTarget target, final PropagationTaskTO mode\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.TASK_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n         return panel;\n     }"},{"sha":"d07135d0f7eb2144d027226216608ef768a535fa","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n@@ -145,8 +145,8 @@ public void populateItem(\n                     panel = new JobActionPanel(componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s\",\n-                                    StandardEntitlement.TASK_EXECUTE,\n-                                    StandardEntitlement.TASK_UPDATE));\n+                                    IdRepoEntitlement.TASK_EXECUTE,\n+                                    IdRepoEntitlement.TASK_UPDATE));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not get job for task {}\", rowModel.getObject().getKey(), e);\n                     panel = new Label(componentId, Model.of());"},{"sha":"696d7d8ff55f4e651e42f4929a92f891d6063785","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PullTaskDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -65,6 +65,6 @@ public void onClick(final AjaxRequestTarget target, final PullTaskTO ignore) {\n                 templates.setTargetObject(model.getObject());\n                 templates.toggle(target, true);\n             }\n-        }, ActionLink.ActionType.TEMPLATE, StandardEntitlement.TASK_UPDATE).disableIndicator();\n+        }, ActionLink.ActionType.TEMPLATE, IdRepoEntitlement.TASK_UPDATE).disableIndicator();\n     }\n }"},{"sha":"8f6f96690678ee0bc1863c86235879b492568e42","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -100,7 +100,7 @@ protected SchedTaskDirectoryPanel(\n \n         this.addNewItemPanelBuilder(new SchedTaskWizardBuilder<>(taskType, schedTaskTO, pageRef), true);\n \n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, StandardEntitlement.TASK_CREATE);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.TASK_CREATE);\n \n         enableExitButton();\n         setFooterVisibility(false);\n@@ -196,7 +196,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 SchedTaskDirectoryPanel.this.getTogglePanel().close(target);\n                 viewTask(taskTO, target);\n             }\n-        }, ActionLink.ActionType.VIEW, StandardEntitlement.TASK_READ);\n+        }, ActionLink.ActionType.VIEW, IdRepoEntitlement.TASK_READ);\n \n         panel.add(new ActionLink<T>() {\n \n@@ -214,7 +214,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                                         Model.of(Pair.of(\n                                                 ActionLink.ActionType.EDIT, model.getObject())))));\n             }\n-        }, ActionLink.ActionType.EDIT, StandardEntitlement.TASK_UPDATE);\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.TASK_UPDATE);\n \n         panel.add(new ActionLink<T>() {\n \n@@ -231,7 +231,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                                         SchedTaskDirectoryPanel.this,\n                                         Model.of(Pair.of(ActionLink.ActionType.CLONE, model.getObject())))));\n             }\n-        }, ActionLink.ActionType.CLONE, StandardEntitlement.TASK_CREATE);\n+        }, ActionLink.ActionType.CLONE, IdRepoEntitlement.TASK_CREATE);\n \n         panel.add(new ActionLink<T>() {\n \n@@ -243,7 +243,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 startAt.setExecutionDetail(model.getObject().getKey(), model.getObject().getName(), target);\n                 startAt.toggle(target, true);\n             }\n-        }, ActionLink.ActionType.EXECUTE, StandardEntitlement.TASK_EXECUTE);\n+        }, ActionLink.ActionType.EXECUTE, IdRepoEntitlement.TASK_EXECUTE);\n \n         addFurtherActions(panel, model);\n \n@@ -265,7 +265,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, StandardEntitlement.TASK_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n         return panel;\n     }"},{"sha":"c66c8b98955a3b128d4a3a9eae6cc765474219af","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/CompletenessWidget.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCompletenessWidget.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.console.pages.Security;\n import org.apache.syncope.client.console.pages.Types;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.WebPage;\n@@ -75,7 +75,7 @@ public CompletenessWidget(final String id, final Map<String, Boolean> confComple\n \n         policies = BookmarkablePageLinkBuilder.build(\"policies\", Policies.class);\n         policies.setOutputMarkupPlaceholderTag(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(policies, WebPage.ENABLE, StandardEntitlement.POLICY_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(policies, WebPage.ENABLE, IdRepoEntitlement.POLICY_LIST);\n         actions.add(policies);\n         policies.setVisible(\n                 !confCompleteness.get(NumbersInfo.ConfItem.ACCOUNT_POLICY.name())\n@@ -84,13 +84,13 @@ public CompletenessWidget(final String id, final Map<String, Boolean> confComple\n         notifications = BookmarkablePageLinkBuilder.build(\"notifications\", Notifications.class);\n         notifications.setOutputMarkupPlaceholderTag(true);\n         MetaDataRoleAuthorizationStrategy.authorize(\n-                notifications, WebPage.ENABLE, StandardEntitlement.NOTIFICATION_LIST);\n+                notifications, WebPage.ENABLE, IdRepoEntitlement.NOTIFICATION_LIST);\n         actions.add(notifications);\n         notifications.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.NOTIFICATION.name()));\n \n         types = BookmarkablePageLinkBuilder.build(\"types\", Types.class);\n         types.setOutputMarkupPlaceholderTag(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(types, WebPage.ENABLE, StandardEntitlement.SCHEMA_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(types, WebPage.ENABLE, IdRepoEntitlement.SCHEMA_LIST);\n         actions.add(types);\n         types.setVisible(\n                 !confCompleteness.get(NumbersInfo.ConfItem.VIR_SCHEMA.name())\n@@ -103,7 +103,7 @@ public CompletenessWidget(final String id, final Map<String, Boolean> confComple\n \n         roles = BookmarkablePageLinkBuilder.build(\"roles\", Security.class);\n         roles.setOutputMarkupPlaceholderTag(true);\n-        MetaDataRoleAuthorizationStrategy.authorize(roles, WebPage.ENABLE, StandardEntitlement.ROLE_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(roles, WebPage.ENABLE, IdRepoEntitlement.ROLE_LIST);\n         actions.add(roles);\n         roles.setVisible(!confCompleteness.get(NumbersInfo.ConfItem.ROLE.name()));\n     }"},{"sha":"4aabe99b8f3d67eb1a746c0e9d0fa763f0241107","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -59,7 +59,7 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -221,16 +221,16 @@ protected void onTimer(final AjaxRequestTarget target) {\n     private List<JobTO> getUpdatedAvailable() {\n         List<JobTO> updatedAvailable = new ArrayList<>();\n \n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.NOTIFICATION_LIST)) {\n+        if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.NOTIFICATION_LIST)) {\n             JobTO notificationJob = notificationRestClient.getJob();\n             if (notificationJob != null) {\n                 updatedAvailable.add(notificationJob);\n             }\n         }\n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.TASK_LIST)) {\n+        if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.TASK_LIST)) {\n             updatedAvailable.addAll(taskRestClient.listJobs());\n         }\n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n+        if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.REPORT_LIST)) {\n             updatedAvailable.addAll(reportRestClient.listJobs());\n         }\n \n@@ -240,10 +240,10 @@ private List<JobTO> getUpdatedAvailable() {\n     private List<ExecTO> getUpdatedRecent() {\n         List<ExecTO> updatedRecent = new ArrayList<>();\n \n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.TASK_LIST)) {\n+        if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.TASK_LIST)) {\n             updatedRecent.addAll(taskRestClient.listRecentExecutions(10));\n         }\n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n+        if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.REPORT_LIST)) {\n             updatedRecent.addAll(reportRestClient.listRecentExecutions(10));\n         }\n \n@@ -360,10 +360,10 @@ public void populateItem(\n                     JobActionPanel panel = new JobActionPanel(componentId, jobTO, true, JobWidget.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s,%s,%s\",\n-                                    StandardEntitlement.TASK_EXECUTE,\n-                                    StandardEntitlement.REPORT_EXECUTE,\n-                                    StandardEntitlement.TASK_UPDATE,\n-                                    StandardEntitlement.REPORT_UPDATE));\n+                                    IdRepoEntitlement.TASK_EXECUTE,\n+                                    IdRepoEntitlement.REPORT_EXECUTE,\n+                                    IdRepoEntitlement.TASK_UPDATE,\n+                                    IdRepoEntitlement.REPORT_UPDATE));\n                     cellItem.add(panel);\n                 }\n \n@@ -442,7 +442,7 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                 protected boolean statusCondition(final JobTO modelObject) {\n                     return !(null != jobTO.getType() && JobType.NOTIFICATION.equals(jobTO.getType()));\n                 }\n-            }, ActionType.EDIT, StandardEntitlement.TASK_UPDATE);\n+            }, ActionType.EDIT, IdRepoEntitlement.TASK_UPDATE);\n \n             panel.add(new ActionLink<JobTO>() {\n \n@@ -466,7 +466,7 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n \n                                 MetaDataRoleAuthorizationStrategy.authorize(\n                                         reportModal.getForm(),\n-                                        ENABLE, StandardEntitlement.REPORT_UPDATE);\n+                                        ENABLE, IdRepoEntitlement.REPORT_UPDATE);\n \n                                 reportModal.header(new StringResourceModel(\n                                         \"reportlet.conf\", AvailableJobsPanel.this, new Model<>(reportTO)));\n@@ -490,7 +490,7 @@ protected boolean statusCondition(final JobTO modelObject) {\n                             || JobType.NOTIFICATION.equals(jobTO.getType())));\n                 }\n \n-            }, ActionType.COMPOSE, StandardEntitlement.TASK_UPDATE);\n+            }, ActionType.COMPOSE, IdRepoEntitlement.TASK_UPDATE);\n \n             panel.add(new ActionLink<JobTO>() {\n \n@@ -533,7 +533,7 @@ protected boolean statusCondition(final JobTO modelObject) {\n                             && !JobType.NOTIFICATION.equals(jobTO.getType())\n                             && (jobTO.isScheduled() && !jobTO.isRunning()));\n                 }\n-            }, ActionLink.ActionType.DELETE, StandardEntitlement.TASK_DELETE, true);\n+            }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n             return panel;\n         }\n@@ -648,7 +648,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     detailModal.show(true);\n                     target.add(detailModal);\n                 }\n-            }, ActionLink.ActionType.VIEW, StandardEntitlement.TASK_READ);\n+            }, ActionLink.ActionType.VIEW, IdRepoEntitlement.TASK_READ);\n             return panel;\n         }\n "},{"sha":"338fa2c3c29eddc072eca0448fead52253785eae","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -28,7 +28,7 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.syncope.client.console.pages.Realms;\n import org.apache.syncope.client.console.pages.Security;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.request.component.IRequestablePage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n@@ -56,13 +56,13 @@ public NumberWidget(final String id, final String bg, final int number, final St\n             case \"totalUsers\":\n                 pageParameters.add(\"selectedIndex\", 1);\n                 responsePage = Realms.class;\n-                isAuthorized = SyncopeConsoleSession.get().owns(StandardEntitlement.USER_SEARCH);\n+                isAuthorized = SyncopeConsoleSession.get().owns(IdRepoEntitlement.USER_SEARCH);\n                 break;\n \n             case \"totalGroups\":\n                 pageParameters.add(\"selectedIndex\", 2);\n                 responsePage = Realms.class;\n-                isAuthorized = SyncopeConsoleSession.get().owns(StandardEntitlement.GROUP_SEARCH);\n+                isAuthorized = SyncopeConsoleSession.get().owns(IdRepoEntitlement.GROUP_SEARCH);\n                 break;\n \n             case \"totalAny1OrRoles\":\n@@ -78,7 +78,7 @@ public NumberWidget(final String id, final String bg, final int number, final St\n                     isAuthorized = SyncopeConsoleSession.get().owns(label + \"_SEARCH\");\n                 } else {\n                     responsePage = Security.class;\n-                    isAuthorized = SyncopeConsoleSession.get().owns(StandardEntitlement.ROLE_LIST);\n+                    isAuthorized = SyncopeConsoleSession.get().owns(IdRepoEntitlement.ROLE_LIST);\n                 }\n                 break;\n "},{"sha":"85ecc2583f9a49334ce3318c397a28f6b558b102","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -59,7 +59,7 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n@@ -153,7 +153,7 @@ protected void onTimer(final AjaxRequestTarget target) {\n         this.reconciliationReportKey = SyncopeWebApplication.get().getReconciliationReportKey();\n \n         ReportTO reconciliationReport = null;\n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_READ)) {\n+        if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.REPORT_READ)) {\n             try {\n                 reconciliationReport = restClient.read(reconciliationReportKey);\n             } catch (Exception e) {\n@@ -190,7 +190,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(refresh, Component.RENDER, StandardEntitlement.REPORT_EXECUTE);\n+        MetaDataRoleAuthorizationStrategy.authorize(refresh, Component.RENDER, IdRepoEntitlement.REPORT_EXECUTE);\n         container.add(refresh);\n     }\n \n@@ -266,7 +266,7 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n         ReconciliationReport report = null;\n \n         Optional<ExecTO> exec = Optional.empty();\n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n+        if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.REPORT_LIST)) {\n             exec = restClient.listRecentExecutions(ROWS).stream().\n                     filter(e -> reconciliationReportKey.equals(e.getRefKey())).findFirst();\n         }"},{"sha":"884d277e722eb4124e5d0885f3ba26d21c926c50","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -46,7 +46,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -291,7 +291,7 @@ protected void reloadDynMemberships() {\n                     collect(Collectors.toList());\n \n             dynMemberships = new ArrayList<>();\n-            if (SyncopeConsoleSession.get().owns(StandardEntitlement.GROUP_SEARCH) && !conditions.isEmpty()) {\n+            if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.GROUP_SEARCH) && !conditions.isEmpty()) {\n                 dynMemberships.addAll(groupRestClient.search(\n                         SyncopeConstants.ROOT_REALM,\n                         searchConditionBuilder.or(conditions).query(),"},{"sha":"09ece28aae8977cbb0597c3b0ac4928ca6a96f09","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Ownership.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;\n@@ -105,7 +105,7 @@ public Ownership(final GroupWrapper groupWrapper, final PageReference pageRef) {\n         // -----------------------------------------------------------------\n         final ActionPermissions permissions = new ActionPermissions();\n         setMetaData(MetaDataRoleAuthorizationStrategy.ACTION_PERMISSIONS, permissions);\n-        permissions.authorize(RENDER, new Roles(StandardEntitlement.USER_SEARCH));\n+        permissions.authorize(RENDER, new Roles(IdRepoEntitlement.USER_SEARCH));\n         // -----------------------------------------------------------------\n \n         setTitleModel(new ResourceModel(\"group.ownership\"));"},{"sha":"0f347a04a1c079546ae471b6979ceb0e08d97f19","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Roles.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.wizard.WizardModel.ICondition;\n@@ -70,7 +70,7 @@ public <T extends AnyTO> Roles(final AnyWrapper<?> modelObject) {\n         final ActionPermissions permissions = new ActionPermissions();\n         setMetaData(MetaDataRoleAuthorizationStrategy.ACTION_PERMISSIONS, permissions);\n         permissions.authorize(RENDER,\n-                new org.apache.wicket.authroles.authorization.strategies.role.Roles(StandardEntitlement.ROLE_LIST));\n+                new org.apache.wicket.authroles.authorization.strategies.role.Roles(IdRepoEntitlement.ROLE_LIST));\n         // -----------------------------------------------------------------\n \n         this.setOutputMarkupId(true);"},{"sha":"39fe600cb9d588ed60c67a9098c7534015972cc0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/StatusPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -172,7 +171,7 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n         if (!enableConnObjectLink) {\n             connObjectLink.disable();\n         }\n-        builder.addAction(connObjectLink, ActionLink.ActionType.VIEW, StandardEntitlement.RESOURCE_GET_CONNOBJECT);\n+        SyncopeWebApplication.get().getStatusProvider().addConnObjectLink(builder, connObjectLink);\n \n         builder.addAction(new ActionLink<StatusBean>() {\n "},{"sha":"310cf92e672492dc515ab7c24db40134c1c2522d","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Session;\n import org.apache.wicket.protocol.http.WebSession;\n@@ -103,7 +103,7 @@ private void afterAuthentication(final String username) {\n         try {\n             selfTO = client.self().getRight();\n         } catch (ForbiddenException e) {\n-            LOG.warn(\"Could not read self(), probably in a {} scenario\", StandardEntitlement.MUST_CHANGE_PASSWORD, e);\n+            LOG.warn(\"Could not read self(), probably in a {} scenario\", IdRepoEntitlement.MUST_CHANGE_PASSWORD, e);\n \n             selfTO = new UserTO();\n             selfTO.setUsername(username);"},{"sha":"1f9187722b96486c30f51e8a9363af014bb09ba2","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/types/IdMEntitlement.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMEntitlement.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public final class IdMEntitlement {\n+\n+    public static final String RESOURCE_LIST = \"RESOURCE_LIST\";\n+\n+    public static final String RESOURCE_CREATE = \"RESOURCE_CREATE\";\n+\n+    public static final String RESOURCE_READ = \"RESOURCE_READ\";\n+\n+    public static final String RESOURCE_UPDATE = \"RESOURCE_UPDATE\";\n+\n+    public static final String RESOURCE_DELETE = \"RESOURCE_DELETE\";\n+\n+    public static final String RESOURCE_GET_CONNOBJECT = \"RESOURCE_GET_CONNOBJECT\";\n+\n+    public static final String RESOURCE_LIST_CONNOBJECT = \"RESOURCE_LIST_CONNOBJECT\";\n+\n+    public static final String RESOURCE_HISTORY_LIST = \"RESOURCE_HISTORY_LIST\";\n+\n+    public static final String RESOURCE_HISTORY_RESTORE = \"RESOURCE_HISTORY_RESTORE\";\n+\n+    public static final String RESOURCE_HISTORY_DELETE = \"RESOURCE_HISTORY_DELETE\";\n+\n+    public static final String CONNECTOR_LIST = \"CONNECTOR_LIST\";\n+\n+    public static final String CONNECTOR_CREATE = \"CONNECTOR_CREATE\";\n+\n+    public static final String CONNECTOR_READ = \"CONNECTOR_READ\";\n+\n+    public static final String CONNECTOR_UPDATE = \"CONNECTOR_UPDATE\";\n+\n+    public static final String CONNECTOR_DELETE = \"CONNECTOR_DELETE\";\n+\n+    public static final String CONNECTOR_RELOAD = \"CONNECTOR_RELOAD\";\n+\n+    public static final String CONNECTOR_HISTORY_LIST = \"CONNECTOR_HISTORY_LIST\";\n+\n+    public static final String CONNECTOR_HISTORY_RESTORE = \"CONNECTOR_HISTORY_RESTORE\";\n+\n+    public static final String CONNECTOR_HISTORY_DELETE = \"CONNECTOR_HISTORY_DELETE\";\n+\n+    public static final String REMEDIATION_LIST = \"REMEDIATION_LIST\";\n+\n+    public static final String REMEDIATION_READ = \"REMEDIATION_READ\";\n+\n+    public static final String REMEDIATION_REMEDY = \"REMEDIATION_REMEDY\";\n+\n+    public static final String REMEDIATION_DELETE = \"REMEDIATION_DELETE\";\n+\n+    private static final Set<String> VALUES;\n+\n+    static {\n+        Set<String> values = new TreeSet<>();\n+        for (Field field : IdMEntitlement.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                values.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(values);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private IdMEntitlement() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"6f6d5c7645f890e6393ca44e5d6d9a7e48bf4f1f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoEntitlement.java","status":"renamed","additions":3,"deletions":49,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n-public final class StandardEntitlement {\n+public final class IdRepoEntitlement {\n \n     public static final String ANONYMOUS = \"ANONYMOUS\";\n \n@@ -132,44 +132,6 @@ public final class StandardEntitlement {\n \n     public static final String GROUP_DELETE = \"GROUP_DELETE\";\n \n-    public static final String RESOURCE_LIST = \"RESOURCE_LIST\";\n-\n-    public static final String RESOURCE_CREATE = \"RESOURCE_CREATE\";\n-\n-    public static final String RESOURCE_READ = \"RESOURCE_READ\";\n-\n-    public static final String RESOURCE_UPDATE = \"RESOURCE_UPDATE\";\n-\n-    public static final String RESOURCE_DELETE = \"RESOURCE_DELETE\";\n-\n-    public static final String RESOURCE_GET_CONNOBJECT = \"RESOURCE_GET_CONNOBJECT\";\n-\n-    public static final String RESOURCE_LIST_CONNOBJECT = \"RESOURCE_LIST_CONNOBJECT\";\n-\n-    public static final String RESOURCE_HISTORY_LIST = \"RESOURCE_HISTORY_LIST\";\n-\n-    public static final String RESOURCE_HISTORY_RESTORE = \"RESOURCE_HISTORY_RESTORE\";\n-\n-    public static final String RESOURCE_HISTORY_DELETE = \"RESOURCE_HISTORY_DELETE\";\n-\n-    public static final String CONNECTOR_LIST = \"CONNECTOR_LIST\";\n-\n-    public static final String CONNECTOR_CREATE = \"CONNECTOR_CREATE\";\n-\n-    public static final String CONNECTOR_READ = \"CONNECTOR_READ\";\n-\n-    public static final String CONNECTOR_UPDATE = \"CONNECTOR_UPDATE\";\n-\n-    public static final String CONNECTOR_DELETE = \"CONNECTOR_DELETE\";\n-\n-    public static final String CONNECTOR_RELOAD = \"CONNECTOR_RELOAD\";\n-\n-    public static final String CONNECTOR_HISTORY_LIST = \"CONNECTOR_HISTORY_LIST\";\n-\n-    public static final String CONNECTOR_HISTORY_RESTORE = \"CONNECTOR_HISTORY_RESTORE\";\n-\n-    public static final String CONNECTOR_HISTORY_DELETE = \"CONNECTOR_HISTORY_DELETE\";\n-\n     public static final String CONFIGURATION_EXPORT = \"CONFIGURATION_EXPORT\";\n \n     public static final String CONFIGURATION_LIST = \"CONFIGURATION_LIST\";\n@@ -284,19 +246,11 @@ public final class StandardEntitlement {\n \n     public static final String IMPLEMENTATION_DELETE = \"IMPLEMENTATION_DELETE\";\n \n-    public static final String REMEDIATION_LIST = \"REMEDIATION_LIST\";\n-\n-    public static final String REMEDIATION_READ = \"REMEDIATION_READ\";\n-\n-    public static final String REMEDIATION_REMEDY = \"REMEDIATION_REMEDY\";\n-\n-    public static final String REMEDIATION_DELETE = \"REMEDIATION_DELETE\";\n-\n     private static final Set<String> VALUES;\n \n     static {\n         Set<String> values = new TreeSet<>();\n-        for (Field field : StandardEntitlement.class.getDeclaredFields()) {\n+        for (Field field : IdRepoEntitlement.class.getDeclaredFields()) {\n             if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n                 values.add(field.getName());\n             }\n@@ -310,7 +264,7 @@ public static Set<String> values() {\n         return VALUES;\n     }\n \n-    private StandardEntitlement() {\n+    private IdRepoEntitlement() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java"},{"sha":"1056ac6fa779858082e881ec4974be92809c420a","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorHistoryLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -46,7 +46,7 @@ public class ConnectorHistoryLogic extends AbstractTransactionalLogic<ConnInstan\n     @Autowired\n     private ConnInstanceDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_HISTORY_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnInstanceHistoryConfTO> list(final String key) {\n         ConnInstance connInstance = connInstanceDAO.find(key);\n@@ -58,7 +58,7 @@ public List<ConnInstanceHistoryConfTO> list(final String key) {\n                 map(binder::getConnInstanceHistoryConfTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_RESTORE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_HISTORY_RESTORE + \"')\")\n     public void restore(final String key) {\n         ConnInstanceHistoryConf connInstanceHistoryConf = connInstanceHistoryConfDAO.find(key);\n         if (connInstanceHistoryConf == null) {\n@@ -68,7 +68,7 @@ public void restore(final String key) {\n         binder.update(connInstanceHistoryConf.getConf());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_HISTORY_DELETE + \"')\")\n     public void delete(final String key) {\n         ConnInstanceHistoryConf connInstanceHistoryConf = connInstanceHistoryConfDAO.find(key);\n         if (connInstanceHistoryConf == null) {"},{"sha":"3e9ca335d89cb8f596853ff215c84f2430855645","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -79,21 +79,21 @@ protected void securityChecks(final Set<String> effectiveRealms, final String re\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_CREATE + \"')\")\n     public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         if (connInstanceTO.getAdminRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_CREATE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.CONNECTOR_CREATE),\n                 connInstanceTO.getAdminRealm());\n         securityChecks(effectiveRealms, connInstanceTO.getAdminRealm(), null);\n \n         return binder.getConnInstanceTO(connInstanceDAO.save(binder.getConnInstance(connInstanceTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_UPDATE + \"')\")\n     public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         if (connInstanceTO.getAdminRealm() == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n@@ -102,22 +102,22 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.CONNECTOR_UPDATE),\n                 connInstanceTO.getAdminRealm());\n         securityChecks(effectiveRealms, connInstanceTO.getAdminRealm(), connInstanceTO.getKey());\n \n         return binder.getConnInstanceTO(binder.update(connInstanceTO));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_DELETE + \"')\")\n     public ConnInstanceTO delete(final String key) {\n         ConnInstance connInstance = connInstanceDAO.authFind(key);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + key + \"'\");\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_DELETE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.CONNECTOR_DELETE),\n                 connInstance.getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, connInstance.getAdminRealm().getFullPath(), connInstance.getKey());\n \n@@ -135,7 +135,7 @@ public ConnInstanceTO delete(final String key) {\n         return deleted;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnInstanceTO> list(final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n@@ -155,7 +155,7 @@ public List<ConnInstanceTO> list(final String lang) {\n                 }).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO read(final String key, final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n@@ -168,7 +168,7 @@ public ConnInstanceTO read(final String key, final String lang) {\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnBundleTO> getBundles(final String lang) {\n         if (StringUtils.isBlank(lang)) {\n@@ -201,7 +201,7 @@ public List<ConnBundleTO> getBundles(final String lang) {\n         return connectorBundleTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n \n     public List<ConnIdObjectClassTO> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n@@ -231,7 +231,7 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n         }).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void check(final ConnInstanceTO connInstanceTO) {\n         if (connInstanceTO.getAdminRealm() == null) {\n@@ -241,7 +241,7 @@ public void check(final ConnInstanceTO connInstanceTO) {\n         connFactory.createConnector(binder.getConnInstance(connInstanceTO)).test();\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO readByResource(final String resourceName, final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n@@ -255,7 +255,7 @@ public ConnInstanceTO readByResource(final String resourceName, final String lan\n         return connInstance;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_RELOAD + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_RELOAD + \"')\")\n     @Transactional(readOnly = true)\n     public void reload() {\n         connFactory.unload();"},{"sha":"9d564225e2eb8574b890efd46ff9981ecbfbd8e9","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -34,7 +34,8 @@\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n@@ -167,7 +168,7 @@ private ConnObjectTO getOnResource(final Any<?> any, final Provision provision)\n         return connObjectTO;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n     public ReconStatus status(final AnyTypeKind anyTypeKind, final String anyKey, final String resourceKey) {\n         Pair<Any<?>, Provision> init = init(anyTypeKind, anyKey, resourceKey);\n \n@@ -178,7 +179,7 @@ public ReconStatus status(final AnyTypeKind anyTypeKind, final String anyKey, fi\n         return status;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n     public void push(\n             final AnyTypeKind anyTypeKind,\n             final String anyKey,\n@@ -206,7 +207,7 @@ public void push(\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n     public void pull(\n             final AnyTypeKind anyTypeKind,\n             final String anyKey,"},{"sha":"2d8a123b741f3b2aa4e8728a782213f2d51cded5","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -63,7 +63,7 @@ public class RemediationLogic extends AbstractTransactionalLogic<RemediationTO>\n     @Autowired\n     private RemediationDAO remediationDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public Pair<Integer, List<RemediationTO>> list(\n             final int page,\n@@ -78,7 +78,7 @@ public Pair<Integer, List<RemediationTO>> list(\n         return Pair.of(count, result);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_READ + \"')\")\n     @Transactional(readOnly = true)\n     public RemediationTO read(final String key) {\n         Remediation remediation = remediationDAO.find(key);\n@@ -91,7 +91,7 @@ public RemediationTO read(final String key) {\n         return binder.getRemediationTO(remediation);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_DELETE + \"')\")\n     public void delete(final String key) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n@@ -103,7 +103,7 @@ public void delete(final String key) {\n         remediationDAO.delete(remediation);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_REMEDY + \"')\")\n     public ProvisioningResult<?> remedy(final String key, final AnyCR anyCR, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n@@ -132,7 +132,7 @@ public ProvisioningResult<?> remedy(final String key, final AnyCR anyCR, final b\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_REMEDY + \"')\")\n     public ProvisioningResult<?> remedy(final String key, final AnyUR anyUR, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n@@ -161,7 +161,7 @@ public ProvisioningResult<?> remedy(final String key, final AnyUR anyUR, final b\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_REMEDY + \"')\")\n     public ProvisioningResult<?> remedy(final String key, final String anyKey, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {"},{"sha":"bcf5d920819ec61fa95446776940a331a20fa5ec","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceHistoryLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -46,7 +46,7 @@ public class ResourceHistoryLogic extends AbstractTransactionalLogic<ResourceHis\n     @Autowired\n     private ResourceDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_HISTORY_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ResourceHistoryConfTO> list(final String key) {\n         ExternalResource resource = resourceDAO.find(key);\n@@ -58,7 +58,7 @@ public List<ResourceHistoryConfTO> list(final String key) {\n                 map(binder::getResourceHistoryConfTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_RESTORE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_HISTORY_RESTORE + \"')\")\n     public void restore(final String key) {\n         ExternalResourceHistoryConf resourceHistoryConf = resourceHistoryConfDAO.find(key);\n         if (resourceHistoryConf == null) {\n@@ -68,7 +68,7 @@ public void restore(final String key) {\n         binder.update(resourceHistoryConf.getEntity(), resourceHistoryConf.getConf());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_HISTORY_DELETE + \"')\")\n     public void delete(final String key) {\n         ExternalResourceHistoryConf resourceHistoryConf = resourceHistoryConfDAO.find(key);\n         if (resourceHistoryConf == null) {"},{"sha":"9749d276d59d7f9bed649cd3e58a1ebfa7826af4","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -122,7 +122,7 @@ protected void securityChecks(final Set<String> effectiveRealms, final String re\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_CREATE + \"')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n         if (StringUtils.isBlank(resourceTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n@@ -138,7 +138,7 @@ public ResourceTO create(final ResourceTO resourceTO) {\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_CREATE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_CREATE),\n                 connInstance.getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, connInstance.getAdminRealm().getFullPath(), null);\n \n@@ -149,22 +149,22 @@ public ResourceTO create(final ResourceTO resourceTO) {\n         return binder.getResourceTO(resourceDAO.save(binder.create(resourceTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_UPDATE + \"')\")\n     public ResourceTO update(final ResourceTO resourceTO) {\n         ExternalResource resource = resourceDAO.authFind(resourceTO.getKey());\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceTO.getKey() + \"'\");\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_UPDATE),\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n         return binder.getResourceTO(resourceDAO.save(binder.update(resource, resourceTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_UPDATE + \"')\")\n     public void setLatestSyncToken(final String key, final String anyTypeKey) {\n         ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n@@ -200,14 +200,14 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_UPDATE),\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n         resourceDAO.save(resource);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_UPDATE + \"')\")\n     public void removeSyncToken(final String key, final String anyTypeKey) {\n         ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n@@ -233,22 +233,22 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_UPDATE),\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n         resourceDAO.save(resource);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_DELETE + \"')\")\n     public ResourceTO delete(final String key) {\n         ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_DELETE),\n+                AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_DELETE),\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n@@ -259,7 +259,7 @@ public ResourceTO delete(final String key) {\n         return resourceToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ResourceTO read(final String key) {\n         ExternalResource resource = resourceDAO.authFind(key);\n@@ -270,7 +270,7 @@ public ResourceTO read(final String key) {\n         return binder.getResourceTO(resource);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ResourceTO> list() {\n         return resourceDAO.findAll().stream().map(binder::getResourceTO).collect(Collectors.toList());\n@@ -295,7 +295,7 @@ private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n         return ImmutableTriple.of(resource, anyType, provision.get());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n     public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final String anyKey) {\n         Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n@@ -350,7 +350,7 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         return ConnObjectUtils.getConnObjectTO(connectorObject);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n     @Transactional(readOnly = true)\n     public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key, final String anyTypeKey,\n             final int size, final String pagedResultsCookie, final List<OrderByClause> orderBy) {\n@@ -407,7 +407,7 @@ public void handleResult(final SearchResult sr) {\n         return Pair.of(searchResult, connObjects);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void check(final ResourceTO resourceTO) {\n         ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnector());"},{"sha":"bb4a3fb6a7fa3e85cc4ff6db0080c19eacc9357a","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/init/IdMEntitlementLoader.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMEntitlementLoader.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class IdMEntitlementLoader implements SyncopeCoreLoader {\n+\n+    @Override\n+    public int getOrder() {\n+        return 900;\n+    }\n+\n+    @Override\n+    public void load() {\n+        EntitlementsHolder.getInstance().addAll(IdMEntitlement.values());\n+    }\n+}"},{"sha":"8bb55b2150809e7e0385353c2e896e513781e8ea","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -104,7 +104,7 @@ public void logout() {\n         delete(accessToken.getKey());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ACCESS_TOKEN_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ACCESS_TOKEN_LIST + \"')\")\n     public Pair<Integer, List<AccessTokenTO>> list(\n             final int page,\n             final int size,\n@@ -118,7 +118,7 @@ public Pair<Integer, List<AccessTokenTO>> list(\n         return Pair.of(count, result);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ACCESS_TOKEN_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ACCESS_TOKEN_DELETE + \"')\")\n     public void delete(final String key) {\n         accessTokenDAO.delete(key);\n     }"},{"sha":"f34f6185ffd074b0191f25552edc3675fe2feb44","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -46,7 +46,7 @@ public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPECLASS_READ + \"')\")\n     @Transactional(readOnly = true)\n     public AnyTypeClassTO read(final String key) {\n         AnyTypeClass anyType = anyTypeClassDAO.find(key);\n@@ -59,13 +59,13 @@ public AnyTypeClassTO read(final String key) {\n         return binder.getAnyTypeClassTO(anyType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPECLASS_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AnyTypeClassTO> list() {\n         return anyTypeClassDAO.findAll().stream().map(binder::getAnyTypeClassTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPECLASS_CREATE + \"')\")\n     public AnyTypeClassTO create(final AnyTypeClassTO anyTypeClassTO) {\n         if (StringUtils.isBlank(anyTypeClassTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n@@ -78,7 +78,7 @@ public AnyTypeClassTO create(final AnyTypeClassTO anyTypeClassTO) {\n         return binder.getAnyTypeClassTO(anyTypeClassDAO.save(binder.create(anyTypeClassTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPECLASS_UPDATE + \"')\")\n     public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n         AnyTypeClass anyType = anyTypeClassDAO.find(anyTypeClassTO.getKey());\n         if (anyType == null) {\n@@ -92,7 +92,7 @@ public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n         return binder.getAnyTypeClassTO(anyType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPECLASS_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPECLASS_DELETE + \"')\")\n     public AnyTypeClassTO delete(final String key) {\n         AnyTypeClass anyTypeClass = anyTypeClassDAO.find(key);\n         if (anyTypeClass == null) {"},{"sha":"7c7bf56754e1421996ca1298bd2f8e759417e904","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -51,7 +51,7 @@ public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public AnyTypeTO read(final String key) {\n         AnyType anyType = anyTypeDAO.find(key);\n@@ -64,13 +64,13 @@ public AnyTypeTO read(final String key) {\n         return binder.getAnyTypeTO(anyType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AnyTypeTO> list() {\n         return anyTypeDAO.findAll().stream().map(binder::getAnyTypeTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_CREATE + \"')\")\n     public AnyTypeTO create(final AnyTypeTO anyTypeTO) {\n         if (StringUtils.isBlank(anyTypeTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n@@ -84,7 +84,7 @@ public AnyTypeTO create(final AnyTypeTO anyTypeTO) {\n         return binder.getAnyTypeTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_UPDATE + \"')\")\n     public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n         AnyType anyType = anyTypeDAO.find(anyTypeTO.getKey());\n         if (anyType == null) {\n@@ -99,7 +99,7 @@ public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n         return binder.getAnyTypeTO(anyTypeDAO.save(anyType));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANYTYPE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_DELETE + \"')\")\n     public AnyTypeTO delete(final String key) {\n         AnyType anyType = anyTypeDAO.find(key);\n         if (anyType == null) {"},{"sha":"5644bb771fefe0e42c67ec6b99902797429e8b08","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ApplicationLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.ApplicationTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.Application;\n@@ -44,7 +44,7 @@ public class ApplicationLogic extends AbstractTransactionalLogic<ApplicationTO>\n     @Autowired\n     private ApplicationDAO applicationDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.APPLICATION_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ApplicationTO read(final String key) {\n         Application application = applicationDAO.find(key);\n@@ -57,7 +57,7 @@ public ApplicationTO read(final String key) {\n         return binder.getApplicationTO(application);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.APPLICATION_READ + \"')\")\n     @Transactional(readOnly = true)\n     public PrivilegeTO readPrivilege(final String key) {\n         Privilege privilege = applicationDAO.findPrivilege(key);\n@@ -70,18 +70,18 @@ public PrivilegeTO readPrivilege(final String key) {\n         return binder.getPrivilegeTO(privilege);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.APPLICATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ApplicationTO> list() {\n         return applicationDAO.findAll().stream().map(binder::getApplicationTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.APPLICATION_CREATE + \"')\")\n     public ApplicationTO create(final ApplicationTO applicationTO) {\n         return binder.getApplicationTO(applicationDAO.save(binder.create(applicationTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.APPLICATION_UPDATE + \"')\")\n     public ApplicationTO update(final ApplicationTO applicationTO) {\n         Application application = applicationDAO.find(applicationTO.getKey());\n         if (application == null) {\n@@ -92,7 +92,7 @@ public ApplicationTO update(final ApplicationTO applicationTO) {\n         return binder.getApplicationTO(applicationDAO.save(binder.update(application, applicationTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.APPLICATION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.APPLICATION_DELETE + \"')\")\n     public ApplicationTO delete(final String key) {\n         Application application = applicationDAO.find(key);\n         if (application == null) {"},{"sha":"bbd0f20bd8957a4c7300c2f18e2ee778b21ca74d","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import java.util.Optional;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n@@ -65,7 +65,7 @@ public class ConfigurationLogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private AnyObjectWorkflowAdapter awfAdapter;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.CONFIGURATION_DELETE + \"')\")\n     public void delete(final String schema) {\n         Optional<? extends CPlainAttr> conf = confDAO.find(schema);\n         if (!conf.isPresent()) {\n@@ -78,12 +78,12 @@ public void delete(final String schema) {\n         confDAO.delete(schema);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.CONFIGURATION_LIST + \"')\")\n     public List<Attr> list() {\n         return binder.getConf();\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_GET + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.CONFIGURATION_GET + \"')\")\n     @Transactional(readOnly = true)\n     public Attr get(final String schema) {\n         Attr result;\n@@ -104,12 +104,12 @@ public Attr get(final String schema) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_SET + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.CONFIGURATION_SET + \"')\")\n     public void set(final Attr value) {\n         confDAO.save(binder.getAttr(value));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONFIGURATION_EXPORT + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.CONFIGURATION_EXPORT + \"')\")\n     @Transactional(readOnly = true)\n     public void export(final OutputStream os) {\n         try {"},{"sha":"51c5d3035d5bf6f152f37d72c4dc5b9883ebb221","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.DomainTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n@@ -47,7 +47,7 @@ public class DomainLogic extends AbstractTransactionalLogic<DomainTO> {\n     @Autowired\n     private DomainDAO domainDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_READ + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public DomainTO read(final String key) {\n@@ -67,7 +67,7 @@ public List<DomainTO> list() {\n         return domainDAO.findAll().stream().map(binder::getDomainTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO create(final DomainTO domainTO) {\n         if (!domainsHolder.getDomains().keySet().contains(domainTO.getKey())) {\n@@ -77,7 +77,7 @@ public DomainTO create(final DomainTO domainTO) {\n         return binder.getDomainTO(domainDAO.save(binder.create(domainTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_UPDATE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_UPDATE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO update(final DomainTO domainTO) {\n         Domain domain = domainDAO.find(domainTO.getKey());\n@@ -92,7 +92,7 @@ public DomainTO update(final DomainTO domainTO) {\n         return binder.getDomainTO(domain);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DOMAIN_DELETE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DOMAIN_DELETE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public DomainTO delete(final String key) {\n         Domain domain = domainDAO.find(key);"},{"sha":"46ea7014651b80c17e5744874aca0f1dffda7979","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/DynRealmLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -23,7 +23,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n@@ -42,7 +42,7 @@ public class DynRealmLogic extends AbstractTransactionalLogic<DynRealmTO> {\n     @Autowired\n     private DynRealmDAO dynRealmDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DYNREALM_READ + \"')\")\n     @Transactional(readOnly = true)\n     public DynRealmTO read(final String key) {\n         DynRealm dynRealm = dynRealmDAO.find(key);\n@@ -60,12 +60,12 @@ public List<DynRealmTO> list() {\n         return dynRealmDAO.findAll().stream().map(binder::getDynRealmTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DYNREALM_CREATE + \"')\")\n     public DynRealmTO create(final DynRealmTO dynRealmTO) {\n         return binder.getDynRealmTO(binder.create(dynRealmTO));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DYNREALM_UPDATE + \"')\")\n     public DynRealmTO update(final DynRealmTO dynRealmTO) {\n         DynRealm dynRealm = dynRealmDAO.find(dynRealmTO.getKey());\n         if (dynRealm == null) {\n@@ -76,7 +76,7 @@ public DynRealmTO update(final DynRealmTO dynRealmTO) {\n         return binder.getDynRealmTO(binder.update(dynRealm, dynRealmTO));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.DYNREALM_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DYNREALM_DELETE + \"')\")\n     public DynRealmTO delete(final String key) {\n         DynRealm dynRealm = dynRealmDAO.find(key);\n         if (dynRealm == null) {"},{"sha":"e8eb5675c9fdc08d47b1ad7d1403af0313c220dc","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -132,14 +132,14 @@ protected boolean securityChecks(final Set<String> effectiveRealms, final String\n         return effectiveRealms.stream().anyMatch(new RealmUtils.DynRealmsPredicate());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO read(final String key) {\n         return binder.getGroupTO(key);\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"'))\")\n     @Transactional(readOnly = true)\n     public List<GroupTO> own() {\n         if (adminUser.equals(AuthContextUtils.getUsername())) {\n@@ -150,7 +150,7 @@ public List<GroupTO> own() {\n                 map(group -> binder.getGroupTO(group, true)).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_SEARCH + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<Integer, List<GroupTO>> search(\n@@ -173,7 +173,7 @@ public Pair<Integer, List<GroupTO>> search(\n         return Pair.of(count, result);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_CREATE + \"')\")\n     public ProvisioningResult<GroupTO> create(final GroupCR createReq, final boolean nullPriorityAsync) {\n         Pair<GroupCR, List<LogicActions>> before = beforeCreate(createReq);\n \n@@ -182,7 +182,7 @@ public ProvisioningResult<GroupTO> create(final GroupCR createReq, final boolean\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_CREATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_CREATE),\n                 before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n@@ -192,7 +192,7 @@ public ProvisioningResult<GroupTO> create(final GroupCR createReq, final boolean\n         return afterCreate(binder.getGroupTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> update(final GroupUR req, final boolean nullPriorityAsync) {\n         GroupTO groupTO = binder.getGroupTO(req.getKey());\n@@ -204,7 +204,7 @@ public ProvisioningResult<GroupTO> update(final GroupUR req, final boolean nullP\n                 ? before.getLeft().getRealm().getValue()\n                 : groupTO.getRealm();\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 realm);\n         boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n \n@@ -218,14 +218,14 @@ public ProvisioningResult<GroupTO> update(final GroupUR req, final boolean nullP\n                 dynRealmsBefore);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_DELETE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> delete(final String key, final boolean nullPriorityAsync) {\n         GroupTO group = binder.getGroupTO(key);\n         Pair<GroupTO, List<LogicActions>> before = beforeDelete(group);\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_DELETE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_DELETE),\n                 before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n@@ -245,13 +245,13 @@ public ProvisioningResult<GroupTO> delete(final String key, final boolean nullPr\n         return afterDelete(groupTO, statuses, before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO unlink(final String key, final Collection<String> resources) {\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -266,13 +266,13 @@ public GroupTO unlink(final String key, final Collection<String> resources) {\n         return binder.getGroupTO(provisioningManager.unlink(req));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO link(final String key, final Collection<String> resources) {\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -287,15 +287,15 @@ public GroupTO link(final String key, final Collection<String> resources) {\n         return binder.getGroupTO(provisioningManager.link(req));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> unassign(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -310,7 +310,7 @@ public ProvisioningResult<GroupTO> unassign(\n         return update(req, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> assign(\n             final String key,\n@@ -322,7 +322,7 @@ public ProvisioningResult<GroupTO> assign(\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -337,15 +337,15 @@ public ProvisioningResult<GroupTO> assign(\n         return update(req, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -357,7 +357,7 @@ public ProvisioningResult<GroupTO> deprovision(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<GroupTO> provision(\n             final String key,\n@@ -369,7 +369,7 @@ public ProvisioningResult<GroupTO> provision(\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n@@ -381,8 +381,8 @@ public ProvisioningResult<GroupTO> provision(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_CREATE + \"') \"\n-            + \"and hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_CREATE + \"') \"\n+            + \"and hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n     @Transactional\n     public ExecTO provisionMembers(final String key, final ProvisionAction action) {\n         Group group = groupDAO.find(key);"},{"sha":"fee7c8de49e334ed2d36da732d0838fc0ac21eb6","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -85,7 +85,7 @@ private void checkType(final String type) {\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ImplementationTO> list(final String type) {\n         checkType(type);\n@@ -94,7 +94,7 @@ public List<ImplementationTO> list(final String type) {\n                 map(binder::getImplementationTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ImplementationTO read(final String type, final String key) {\n         checkType(type);\n@@ -115,7 +115,7 @@ public ImplementationTO read(final String type, final String key) {\n         return binder.getImplementationTO(implementation);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_CREATE + \"')\")\n     public ImplementationTO create(final ImplementationTO implementationTO) {\n         if (StringUtils.isBlank(implementationTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n@@ -133,7 +133,7 @@ public ImplementationTO create(final ImplementationTO implementationTO) {\n         return binder.getImplementationTO(implementationDAO.save(binder.create(implementationTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_UPDATE + \"')\")\n     public ImplementationTO update(final ImplementationTO implementationTO) {\n         Implementation implementation = implementationDAO.find(implementationTO.getKey());\n         if (implementation == null) {\n@@ -150,7 +150,7 @@ public ImplementationTO update(final ImplementationTO implementationTO) {\n         return binder.getImplementationTO(implementation);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.IMPLEMENTATION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_DELETE + \"')\")\n     public void delete(final String type, final String key) {\n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {"},{"sha":"c81695967e6098005b6c85d6f56d2b4cf5e93e83","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.init.LoggerLoader;\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n@@ -91,7 +91,7 @@ public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public List<LogAppender> memoryAppenders() {\n@@ -102,7 +102,7 @@ public List<LogAppender> memoryAppenders() {\n         }).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n@@ -123,7 +123,7 @@ private List<LoggerTO> list(final LoggerType type) {\n         }).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public List<LoggerTO> listLogs() {\n@@ -134,7 +134,7 @@ public List<LoggerTO> listLogs() {\n                 collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n         return list(LoggerType.AUDIT).stream().\n@@ -159,7 +159,7 @@ private void throwInvalidLogger(final LoggerType type) {\n         throw sce;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n     public LoggerTO readLog(final String name) {\n@@ -168,7 +168,7 @@ public LoggerTO readLog(final String name) {\n                 orElseThrow(() -> new NotFoundException(\"Logger \" + name));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_READ + \"')\")\n     @Transactional(readOnly = true)\n     public LoggerTO readAudit(final String name) {\n         return listAudits().stream().\n@@ -238,13 +238,13 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_SET_LEVEL + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_SET_LEVEL + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public LoggerTO setLogLevel(final String name, final Level level) {\n         return setLevel(name, level, LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_ENABLE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_ENABLE + \"')\")\n     public void enableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             setLevel(auditLoggerName.toLoggerName(), Level.DEBUG, LoggerType.AUDIT);\n@@ -288,13 +288,13 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n         return loggerToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_DELETE + \"') and authentication.details.domain == \"\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_DELETE + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     public LoggerTO deleteLog(final String name) {\n         return delete(name, LoggerType.LOG);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_DISABLE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_DISABLE + \"')\")\n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             delete(auditLoggerName.toLoggerName(), LoggerType.AUDIT);\n@@ -307,8 +307,8 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.AUDIT_LIST + \"') \"\n-            + \"or hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.NOTIFICATION_LIST + \"')\")\n     public List<EventCategory> listAuditEvents() {\n         // use set to avoid duplications or null elements\n         Set<EventCategory> events = new HashSet<>();"},{"sha":"abc1cde1c110e95a0192b5e330f762d54b6f78bc","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n@@ -59,7 +59,7 @@ private MailTemplateTO getMailTemplateTO(final String key) {\n         return mailTemplateTO;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MAIL_TEMPLATE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public MailTemplateTO read(final String key) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n@@ -72,14 +72,14 @@ public MailTemplateTO read(final String key) {\n         return getMailTemplateTO(key);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MAIL_TEMPLATE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<MailTemplateTO> list() {\n         return mailTemplateDAO.findAll().stream().\n                 map(template -> getMailTemplateTO(template.getKey())).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MAIL_TEMPLATE_CREATE + \"')\")\n     public MailTemplateTO create(final String key) {\n         if (mailTemplateDAO.find(key) != null) {\n             throw new DuplicateException(key);\n@@ -91,7 +91,7 @@ public MailTemplateTO create(final String key) {\n         return getMailTemplateTO(key);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MAIL_TEMPLATE_READ + \"')\")\n     public String getFormat(final String key, final MailTemplateFormat format) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {\n@@ -112,7 +112,7 @@ public String getFormat(final String key, final MailTemplateFormat format) {\n         return template;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MAIL_TEMPLATE_UPDATE + \"')\")\n     public void setFormat(final String key, final MailTemplateFormat format, final String template) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {\n@@ -130,7 +130,7 @@ public void setFormat(final String key, final MailTemplateFormat format, final S\n         mailTemplateDAO.save(mailTemplate);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MAIL_TEMPLATE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MAIL_TEMPLATE_DELETE + \"')\")\n     public MailTemplateTO delete(final String key) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {"},{"sha":"86dec820fde015f71717a1dd4bcdc27ea66c1662","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -49,7 +49,7 @@ public class NotificationLogic extends AbstractJobLogic<NotificationTO> {\n     @Autowired\n     private NotificationDataBinder binder;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_READ + \"')\")\n     @Transactional(readOnly = true)\n     public NotificationTO read(final String key) {\n         Notification notification = notificationDAO.find(key);\n@@ -62,18 +62,18 @@ public NotificationTO read(final String key) {\n         return binder.getNotificationTO(notification);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<NotificationTO> list() {\n         return notificationDAO.findAll().stream().map(binder::getNotificationTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_CREATE + \"')\")\n     public NotificationTO create(final NotificationTO notificationTO) {\n         return binder.getNotificationTO(notificationDAO.save(binder.create(notificationTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_UPDATE + \"')\")\n     public NotificationTO update(final NotificationTO notificationTO) {\n         Notification notification = notificationDAO.find(notificationTO.getKey());\n         if (notification == null) {\n@@ -87,7 +87,7 @@ public NotificationTO update(final NotificationTO notificationTO) {\n         return binder.getNotificationTO(notification);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_DELETE + \"')\")\n     public NotificationTO delete(final String key) {\n         Notification notification = notificationDAO.find(key);\n         if (notification == null) {\n@@ -108,13 +108,13 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n                 : null;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_LIST + \"')\")\n     public JobTO getJob() {\n         List<JobTO> jobs = super.doListJobs(false);\n         return jobs.isEmpty() ? null : jobs.get(0);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.NOTIFICATION_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_EXECUTE + \"')\")\n     public void actionJob(final JobAction action) {\n         super.doActionJob(JobManager.NOTIFICATION_JOB, action);\n     }"},{"sha":"b643057253a0ec416f0a38328504263007430802","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n@@ -50,7 +50,7 @@ public class PolicyLogic extends AbstractTransactionalLogic<PolicyTO> {\n     @Autowired\n     private PolicyUtilsFactory policyUtilsFactory;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.POLICY_CREATE + \"')\")\n     public <T extends PolicyTO> T create(final PolicyType type, final T policyTO) {\n         PolicyUtils policyUtils = policyUtilsFactory.getInstance(policyTO);\n         if (policyUtils.getType() != type) {\n@@ -62,7 +62,7 @@ public <T extends PolicyTO> T create(final PolicyType type, final T policyTO) {\n         return binder.getPolicyTO(policyDAO.save(binder.create(policyTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.POLICY_UPDATE + \"')\")\n     public PolicyTO update(final PolicyType type, final PolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n \n@@ -76,7 +76,7 @@ public PolicyTO update(final PolicyType type, final PolicyTO policyTO) {\n         return binder.getPolicyTO(policyDAO.save(binder.update(policy, policyTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.POLICY_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public <T extends PolicyTO> List<T> list(final PolicyType type) {\n         PolicyUtils policyUtils = policyUtilsFactory.getInstance(type);\n@@ -85,7 +85,7 @@ public <T extends PolicyTO> List<T> list(final PolicyType type) {\n                 <T>map(binder::getPolicyTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.POLICY_READ + \"')\")\n     @Transactional(readOnly = true)\n     public <T extends PolicyTO> T read(final PolicyType type, final String key) {\n         Policy policy = policyDAO.find(key);\n@@ -103,7 +103,7 @@ public <T extends PolicyTO> T read(final PolicyType type, final String key) {\n         return binder.getPolicyTO(policy);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.POLICY_DELETE + \"')\")\n     public <T extends PolicyTO> T delete(final PolicyType type, final String key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {"},{"sha":"b7223447f716e99eba94c6f820510c95ed48f575","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -80,12 +80,12 @@ public List<RealmTO> list(final String fullPath) {\n             throw new NotFoundException(fullPath);\n         }\n \n-        final boolean admin = AuthContextUtils.getAuthorizations().keySet().contains(StandardEntitlement.REALM_LIST);\n+        final boolean admin = AuthContextUtils.getAuthorizations().keySet().contains(IdRepoEntitlement.REALM_LIST);\n         return realmDAO.findDescendants(realm).stream().\n                 map(descendant -> binder.getRealmTO(descendant, admin)).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_CREATE + \"')\")\n     public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO realmTO) {\n         Realm parent;\n         if (StringUtils.isBlank(realmTO.getParent())) {\n@@ -131,7 +131,7 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_UPDATE + \"')\")\n     public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n         Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n         if (realm == null) {\n@@ -153,7 +153,7 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_DELETE + \"')\")\n     public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         Realm realm = realmDAO.findByFullPath(fullPath);\n         if (realm == null) {"},{"sha":"9edca798c23b22fd34c7a8580109dbb3aee906d7","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RelationshipTypeLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n@@ -43,7 +43,7 @@ public class RelationshipTypeLogic extends AbstractTransactionalLogic<Relationsh\n     @Autowired\n     private RelationshipTypeDAO relationshipTypeDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.RELATIONSHIPTYPE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public RelationshipTypeTO read(final String key) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(key);\n@@ -56,18 +56,18 @@ public RelationshipTypeTO read(final String key) {\n         return binder.getRelationshipTypeTO(relationshipType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.RELATIONSHIPTYPE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<RelationshipTypeTO> list() {\n         return relationshipTypeDAO.findAll().stream().map(binder::getRelationshipTypeTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.RELATIONSHIPTYPE_CREATE + \"')\")\n     public RelationshipTypeTO create(final RelationshipTypeTO relationshipTypeTO) {\n         return binder.getRelationshipTypeTO(relationshipTypeDAO.save(binder.create(relationshipTypeTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.RELATIONSHIPTYPE_UPDATE + \"')\")\n     public RelationshipTypeTO update(final RelationshipTypeTO relationshipTypeTO) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTypeTO.getKey());\n         if (relationshipType == null) {\n@@ -81,7 +81,7 @@ public RelationshipTypeTO update(final RelationshipTypeTO relationshipTypeTO) {\n         return binder.getRelationshipTypeTO(relationshipType);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RELATIONSHIPTYPE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.RELATIONSHIPTYPE_DELETE + \"')\")\n     public RelationshipTypeTO delete(final String key) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(key);\n         if (relationshipType == null) {"},{"sha":"d0c9f6c55e48fa38b239d0b59e256dffa26e73c4","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.core.logic.cocoon.FopSerializer;\n@@ -93,7 +93,7 @@ public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_CREATE + \"')\")\n     public ReportTO create(final ReportTO reportTO) {\n         Report report = entityFactory.newEntity(Report.class);\n         binder.getReport(report, reportTO);\n@@ -115,7 +115,7 @@ public ReportTO create(final ReportTO reportTO) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_UPDATE + \"')\")\n     public ReportTO update(final ReportTO reportTO) {\n         Report report = reportDAO.find(reportTO.getKey());\n         if (report == null) {\n@@ -141,13 +141,13 @@ public ReportTO update(final ReportTO reportTO) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ReportTO> list() {\n         return reportDAO.findAll().stream().map(binder::getReportTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ReportTO read(final String key) {\n         Report report = reportDAO.find(key);\n@@ -157,7 +157,7 @@ public ReportTO read(final String key) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_EXECUTE + \"')\")\n     @Override\n     public ExecTO execute(final String key, final Date startAt, final boolean dryRun) {\n         Report report = reportDAO.find(key);\n@@ -197,7 +197,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n     public ReportExec getReportExec(final String executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n@@ -213,7 +213,7 @@ public ReportExec getReportExec(final String executionKey) {\n         return reportExec;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n     public void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n@@ -284,7 +284,7 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_DELETE + \"')\")\n     public ReportTO delete(final String key) {\n         Report report = reportDAO.find(key);\n         if (report == null) {\n@@ -297,7 +297,7 @@ public ReportTO delete(final String key) {\n         return deletedReport;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n     @Override\n     public Pair<Integer, List<ExecTO>> listExecutions(\n             final String key, final int page, final int size, final List<OrderByClause> orderByClauses) {\n@@ -315,14 +315,14 @@ public Pair<Integer, List<ExecTO>> listExecutions(\n         return Pair.of(count, result);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_LIST + \"')\")\n     @Override\n     public List<ExecTO> listRecentExecutions(final int max) {\n         return reportExecDAO.findRecent(max).stream().\n                 map(reportExec -> binder.getExecTO(reportExec)).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_DELETE + \"')\")\n     @Override\n     public ExecTO deleteExecution(final String executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n@@ -335,7 +335,7 @@ public ExecTO deleteExecution(final String executionKey) {\n         return reportExecToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_DELETE + \"')\")\n     @Override\n     public List<BatchResponseItem> deleteExecutions(\n             final String key,\n@@ -376,13 +376,13 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n                 : Triple.of(JobType.REPORT, key, binder.buildRefDesc(report));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_LIST + \"')\")\n     @Override\n     public List<JobTO> listJobs() {\n         return super.doListJobs(false);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n     @Override\n     public JobTO getJob(final String key) {\n         Report report = reportDAO.find(key);\n@@ -406,7 +406,7 @@ public JobTO getJob(final String key) {\n         return jobTO;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_EXECUTE + \"')\")\n     @Override\n     public void actionJob(final String key, final JobAction action) {\n         Report report = reportDAO.find(key);"},{"sha":"e3751a37df695dbc8c9be27fc21e39e5630245ab","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n@@ -59,7 +59,7 @@ private ReportTemplateTO getReportTemplateTO(final String key) {\n         return reportTemplateTO;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_TEMPLATE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ReportTemplateTO read(final String key) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n@@ -72,14 +72,14 @@ public ReportTemplateTO read(final String key) {\n         return getReportTemplateTO(key);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_TEMPLATE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ReportTemplateTO> list() {\n         return reportTemplateDAO.findAll().stream().\n                 map(template -> getReportTemplateTO(template.getKey())).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_TEMPLATE_CREATE + \"')\")\n     public ReportTemplateTO create(final String key) {\n         if (reportTemplateDAO.find(key) != null) {\n             throw new DuplicateException(key);\n@@ -91,7 +91,7 @@ public ReportTemplateTO create(final String key) {\n         return getReportTemplateTO(key);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_TEMPLATE_READ + \"')\")\n     public String getFormat(final String key, final ReportTemplateFormat format) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {\n@@ -114,7 +114,7 @@ public String getFormat(final String key, final ReportTemplateFormat format) {\n         return template;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_TEMPLATE_UPDATE + \"')\")\n     public void setFormat(final String key, final ReportTemplateFormat format, final String template) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {\n@@ -142,7 +142,7 @@ public void setFormat(final String key, final ReportTemplateFormat format, final\n         reportTemplateDAO.save(reportTemplate);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_TEMPLATE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_TEMPLATE_DELETE + \"')\")\n     public ReportTemplateTO delete(final String key) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {"},{"sha":"cf57e083cb904b4cd30db4b2aea167290b152e43","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.RoleTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -43,7 +43,7 @@ public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n     @Autowired\n     private RoleDAO roleDAO;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public RoleTO read(final String key) {\n         Role role = roleDAO.find(key);\n@@ -56,18 +56,18 @@ public RoleTO read(final String key) {\n         return binder.getRoleTO(role);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<RoleTO> list() {\n         return roleDAO.findAll().stream().map(binder::getRoleTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_CREATE + \"')\")\n     public RoleTO create(final RoleTO roleTO) {\n         return binder.getRoleTO(binder.create(roleTO));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_UPDATE + \"')\")\n     public RoleTO update(final RoleTO roleTO) {\n         Role role = roleDAO.find(roleTO.getKey());\n         if (role == null) {\n@@ -78,7 +78,7 @@ public RoleTO update(final RoleTO roleTO) {\n         return binder.getRoleTO(binder.update(role, roleTO));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_DELETE + \"')\")\n     public RoleTO delete(final String key) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n@@ -111,7 +111,7 @@ public String getConsoleLayoutInfo(final String key) {\n         return consoleLayout;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ROLE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_UPDATE + \"')\")\n     public void setConsoleLayoutInfo(final String key, final String consoleLayout) {\n         Role role = roleDAO.find(key);\n         if (role == null) {"},{"sha":"dc92e1d4a661734186ea42238de7def98ef5c89f","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -90,7 +90,7 @@ private boolean doesSchemaExist(final SchemaType schemaType, final String name)\n         return found;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.SCHEMA_CREATE + \"')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends SchemaTO> T create(final SchemaType schemaType, final T schemaTO) {\n         if (StringUtils.isBlank(schemaTO.getKey())) {\n@@ -123,7 +123,7 @@ public <T extends SchemaTO> T create(final SchemaType schemaType, final T schema\n         return created;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.SCHEMA_DELETE + \"')\")\n     public void delete(final SchemaType schemaType, final String schemaKey) {\n         if (!doesSchemaExist(schemaType, schemaKey)) {\n             throw new NotFoundException(schemaType + \"/\" + schemaKey);\n@@ -218,7 +218,7 @@ public <T extends SchemaTO> T read(final SchemaType schemaType, final String sch\n         return read;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.SCHEMA_UPDATE + \"')\")\n     public <T extends SchemaTO> void update(final SchemaType schemaType, final T schemaTO) {\n         if (!doesSchemaExist(schemaType, schemaTO.getKey())) {\n             throw new NotFoundException(schemaType + \"/\" + schemaTO.getKey());"},{"sha":"2fe2fc8944c5da0eb4c6263138dbc8dbd4f85c61","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -23,7 +23,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -53,7 +53,7 @@ public List<SecurityQuestionTO> list() {\n         return securityQuestionDAO.findAll().stream().map(binder::getSecurityQuestionTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.SECURITY_QUESTION_READ + \"')\")\n     @Transactional(readOnly = true)\n     public SecurityQuestionTO read(final String key) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(key);\n@@ -66,12 +66,12 @@ public SecurityQuestionTO read(final String key) {\n         return binder.getSecurityQuestionTO(securityQuestion);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.SECURITY_QUESTION_CREATE + \"')\")\n     public SecurityQuestionTO create(final SecurityQuestionTO securityQuestionTO) {\n         return binder.getSecurityQuestionTO(securityQuestionDAO.save(binder.create(securityQuestionTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.SECURITY_QUESTION_UPDATE + \"')\")\n     public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(securityQuestionTO.getKey());\n         if (securityQuestion == null) {\n@@ -86,7 +86,7 @@ public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n         return binder.getSecurityQuestionTO(securityQuestion);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.SECURITY_QUESTION_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.SECURITY_QUESTION_DELETE + \"')\")\n     public SecurityQuestionTO delete(final String key) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(key);\n         if (securityQuestion == null) {\n@@ -100,7 +100,7 @@ public SecurityQuestionTO delete(final String key) {\n         return deleted;\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public SecurityQuestionTO readByUser(final String username) {\n         if (username == null) {\n             throw new NotFoundException(\"Null username\");"},{"sha":"c2fe514e530d55cb5c075e3957e605b58cff8826","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n@@ -102,7 +102,7 @@ public class TaskLogic extends AbstractExecutableLogic<TaskTO> {\n     @Autowired\n     private TaskUtilsFactory taskUtilsFactory;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_CREATE + \"')\")\n     public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T taskTO) {\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(taskTO);\n         if (taskUtils.getType() != type) {\n@@ -130,7 +130,7 @@ public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T ta\n         return binder.getTaskTO(task, taskUtils, false);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_UPDATE + \"')\")\n     public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final SchedTaskTO taskTO) {\n         SchedTask task = taskDAO.find(taskTO.getKey());\n         if (task == null) {\n@@ -163,7 +163,7 @@ public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final Sche\n         return binder.getTaskTO(task, taskUtils, false);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_LIST + \"')\")\n     @Transactional(readOnly = true)\n     @SuppressWarnings(\"unchecked\")\n     public <T extends TaskTO> Pair<Integer, List<T>> search(\n@@ -199,7 +199,7 @@ public <T extends TaskTO> Pair<Integer, List<T>> search(\n         }\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_READ + \"')\")\n     @Transactional(readOnly = true)\n     public <T extends TaskTO> T read(final TaskType type, final String key, final boolean details) {\n         Task task = taskDAO.find(key);\n@@ -217,7 +217,7 @@ public <T extends TaskTO> T read(final TaskType type, final String key, final bo\n         return binder.getTaskTO(task, taskUtilsFactory.getInstance(task), details);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n     @Override\n     public ExecTO execute(final String key, final Date startAt, final boolean dryRun) {\n         Task task = taskDAO.find(key);\n@@ -302,7 +302,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_DELETE + \"')\")\n     public <T extends TaskTO> T delete(final TaskType type, final String key) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n@@ -329,7 +329,7 @@ public <T extends TaskTO> T delete(final TaskType type, final String key) {\n         return taskToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_READ + \"')\")\n     @Override\n     public Pair<Integer, List<ExecTO>> listExecutions(\n             final String key, final int page, final int size, final List<OrderByClause> orderByClauses) {\n@@ -347,14 +347,14 @@ public Pair<Integer, List<ExecTO>> listExecutions(\n         return Pair.of(count, result);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_LIST + \"')\")\n     @Override\n     public List<ExecTO> listRecentExecutions(final int max) {\n         return taskExecDAO.findRecent(max).stream().\n                 map(taskExec -> binder.getExecTO(taskExec)).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_DELETE + \"')\")\n     @Override\n     public ExecTO deleteExecution(final String execKey) {\n         TaskExec taskExec = taskExecDAO.find(execKey);\n@@ -367,7 +367,7 @@ public ExecTO deleteExecution(final String execKey) {\n         return taskExecutionToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_DELETE + \"')\")\n     @Override\n     public List<BatchResponseItem> deleteExecutions(\n             final String key,\n@@ -411,13 +411,13 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n                 : Triple.of(JobType.TASK, key, binder.buildRefDesc(task));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_LIST + \"')\")\n     @Override\n     public List<JobTO> listJobs() {\n         return super.doListJobs(true);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_READ + \"')\")\n     @Override\n     public JobTO getJob(final String key) {\n         Task task = taskDAO.find(key);\n@@ -441,7 +441,7 @@ public JobTO getJob(final String key) {\n         return jobTO;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n     @Override\n     public void actionJob(final String key, final JobAction action) {\n         Task task = taskDAO.find(key);"},{"sha":"a7dd8b209c63bcea185c6930139d7f128ebaa5a5","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n@@ -86,22 +86,22 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserCR, UserUR> {\n     @Autowired\n     protected SyncopeLogic syncopeLogic;\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n     @Transactional(readOnly = true)\n     public Pair<String, UserTO> selfRead() {\n         return Pair.of(\n                 POJOHelper.serialize(AuthContextUtils.getAuthorizations()),\n                 binder.returnUserTO(binder.getAuthenticatedUserTO()));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_READ + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO read(final String key) {\n         return binder.returnUserTO(binder.getUserTO(key));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<Integer, List<UserTO>> search(\n@@ -111,11 +111,11 @@ public Pair<Integer, List<UserTO>> search(\n             final boolean details) {\n \n         int count = searchDAO.count(RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm),\n                 searchCond == null ? userDAO.getAllMatchingCond() : searchCond, AnyTypeKind.USER);\n \n         List<User> matching = searchDAO.search(RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm),\n                 searchCond == null ? userDAO.getAllMatchingCond() : searchCond,\n                 page, size, orderBy, AnyTypeKind.USER);\n         List<UserTO> result = matching.stream().\n@@ -125,12 +125,12 @@ public Pair<Integer, List<UserTO>> search(\n         return Pair.of(count, result);\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public ProvisioningResult<UserTO> selfCreate(final UserCR createReq, final boolean nullPriorityAsync) {\n         return doCreate(createReq, true, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_CREATE + \"')\")\n     public ProvisioningResult<UserTO> create(final UserCR createReq, final boolean nullPriorityAsync) {\n         return doCreate(createReq, false, nullPriorityAsync);\n     }\n@@ -148,7 +148,7 @@ protected ProvisioningResult<UserTO> doCreate(\n \n         if (!self) {\n             Set<String> effectiveRealms = RealmUtils.getEffective(\n-                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_CREATE),\n+                    AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_CREATE),\n                     before.getLeft().getRealm());\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n         }\n@@ -160,8 +160,8 @@ protected ProvisioningResult<UserTO> doCreate(\n     }\n \n     @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"')) \"\n-            + \"and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n+            + \"and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')) \"\n+            + \"and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n     public ProvisioningResult<UserTO> selfUpdate(final UserUR userUR, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n         userUR.setKey(userTO.getKey());\n@@ -179,7 +179,7 @@ public ProvisioningResult<UserTO> selfUpdate(final UserUR userUR, final boolean\n         return updated;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> update(final UserUR userUR, final boolean nullPriorityAsync) {\n         return doUpdate(userUR, false, nullPriorityAsync);\n@@ -198,7 +198,7 @@ protected ProvisioningResult<UserTO> doUpdate(\n                 && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n \n             Set<String> effectiveRealms = RealmUtils.getEffective(\n-                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                    AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                     before.getLeft().getRealm().getValue());\n             authDynRealms =\n                     securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n@@ -239,12 +239,12 @@ protected Pair<String, List<PropagationStatus>> setStatusOnWfAdapter(\n         return updated;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     public ProvisioningResult<UserTO> status(final StatusR statusR, final boolean nullPriorityAsync) {\n         // security checks\n         UserTO toUpdate = binder.getUserTO(statusR.getKey());\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 toUpdate.getRealm());\n         securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n \n@@ -261,7 +261,7 @@ public ProvisioningResult<UserTO> status(final StatusR statusR, final boolean nu\n                 Collections.<String>emptySet());\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n     public ProvisioningResult<UserTO> selfStatus(final StatusR statusR, final boolean nullPriorityAsync) {\n         statusR.setKey(userDAO.findKey(AuthContextUtils.getUsername()));\n         Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusR, nullPriorityAsync);\n@@ -274,15 +274,15 @@ public ProvisioningResult<UserTO> selfStatus(final StatusR statusR, final boolea\n                 Collections.<String>emptySet());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"')\")\n     public ProvisioningResult<UserTO> mustChangePassword(final String password, final boolean nullPriorityAsync) {\n         UserUR userUR = new UserUR();\n         userUR.setPassword(new PasswordPatch.Builder().value(password).build());\n         userUR.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());\n         return selfUpdate(userUR, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n         if (username == null) {\n@@ -303,7 +303,7 @@ public void requestPasswordReset(final String username, final String securityAns\n         provisioningManager.requestPasswordReset(user.getKey());\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void confirmPasswordReset(final String token, final String password) {\n         User user = userDAO.findByToken(token);\n@@ -314,14 +314,14 @@ public void confirmPasswordReset(final String token, final String password) {\n     }\n \n     @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"')) \"\n-            + \"and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n+            + \"and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')) \"\n+            + \"and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n     public ProvisioningResult<UserTO> selfDelete(final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n         return doDelete(userTO, true, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_DELETE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> delete(final String key, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getUserTO(key);\n@@ -335,7 +335,7 @@ protected ProvisioningResult<UserTO> doDelete(\n \n         if (!self) {\n             Set<String> effectiveRealms = RealmUtils.getEffective(\n-                    AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_DELETE),\n+                    AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_DELETE),\n                     before.getLeft().getRealm());\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n         }\n@@ -361,13 +361,13 @@ protected ProvisioningResult<UserTO> doDelete(\n         return afterDelete(binder.returnUserTO(deletedTO), statuses, before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO unlink(final String key, final Collection<String> resources) {\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -380,13 +380,13 @@ public UserTO unlink(final String key, final Collection<String> resources) {\n         return binder.returnUserTO(binder.getUserTO(provisioningManager.unlink(req)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO link(final String key, final Collection<String> resources) {\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -399,15 +399,15 @@ public UserTO link(final String key, final Collection<String> resources) {\n         return binder.returnUserTO(binder.getUserTO(provisioningManager.link(req)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> unassign(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -420,7 +420,7 @@ public ProvisioningResult<UserTO> unassign(\n         return update(req, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> assign(\n             final String key,\n@@ -432,7 +432,7 @@ public ProvisioningResult<UserTO> assign(\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -450,15 +450,15 @@ public ProvisioningResult<UserTO> assign(\n         return update(req, nullPriorityAsync);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n@@ -470,7 +470,7 @@ public ProvisioningResult<UserTO> deprovision(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> provision(\n             final String key,\n@@ -482,7 +482,7 @@ public ProvisioningResult<UserTO> provision(\n         // security checks\n         UserTO user = binder.getUserTO(key);\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n "},{"sha":"101bd7be08b4c773ace50ff2436837988a5b1772","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/IdRepoEntitlementLoader.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoEntitlementLoader.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -20,14 +20,14 @@\n \n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class EntitlementLoader implements SyncopeCoreLoader {\n+public class IdRepoEntitlementLoader implements SyncopeCoreLoader {\n \n     @Autowired\n     private EntitlementAccessor entitlementAccessor;\n@@ -39,7 +39,7 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        EntitlementsHolder.getInstance().addAll(StandardEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(IdRepoEntitlement.values());\n     }\n \n     @Override","previous_filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/EntitlementLoader.java"},{"sha":"f4d79733b992cd9c4615634e193f00c930b4aec5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -23,7 +23,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -63,7 +63,7 @@ public ConnInstance authFind(final String key) {\n             return null;\n         }\n \n-        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_READ);\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.CONNECTOR_READ);\n         if (authRealms == null || authRealms.isEmpty()\n                 || !authRealms.stream().anyMatch(\n                         realm -> connInstance.getAdminRealm().getFullPath().startsWith(realm))) {\n@@ -79,7 +79,7 @@ public ConnInstance authFind(final String key) {\n \n     @Override\n     public List<ConnInstance> findAll() {\n-        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_LIST);\n+        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.CONNECTOR_LIST);\n         if (authRealms == null || authRealms.isEmpty()) {\n             return Collections.emptyList();\n         }"},{"sha":"70d6ad2e35fa46b7bf9814e91e16cdf639790dad","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -25,7 +25,7 @@\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -107,7 +107,7 @@ public ExternalResource authFind(final String key) {\n             return null;\n         }\n \n-        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_READ);\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_READ);\n         if (authRealms == null || authRealms.isEmpty()\n                 || !authRealms.stream().anyMatch(realm -> resource.getConnector() != null\n                 && resource.getConnector().getAdminRealm().getFullPath().startsWith(realm))) {\n@@ -179,7 +179,7 @@ public List<ExternalResource> findByPolicy(final Policy policy) {\n \n     @Override\n     public List<ExternalResource> findAll() {\n-        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_LIST);\n+        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(IdMEntitlement.RESOURCE_LIST);\n         if (authRealms == null || authRealms.isEmpty()) {\n             return Collections.emptyList();\n         }"},{"sha":"a3fc301033bdb3199d1ebe7c43d0874d7b77d7e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -32,7 +32,7 @@\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -131,8 +131,8 @@ public Map<String, Integer> countByRealm() {\n     @Override\n     protected void securityChecks(final Group group) {\n         Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n-        Set<String> authRealms = authorizations.containsKey(StandardEntitlement.GROUP_READ)\n-                ? authorizations.get(StandardEntitlement.GROUP_READ)\n+        Set<String> authRealms = authorizations.containsKey(IdRepoEntitlement.GROUP_READ)\n+                ? authorizations.get(IdRepoEntitlement.GROUP_READ)\n                 : Collections.emptySet();\n \n         boolean authorized = authRealms.stream().anyMatch(realm -> group.getRealm().getFullPath().startsWith(realm)"},{"sha":"c9e53d7ac544c484c71cc8c15567c98126e9cf52","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.provisioning.api.utils.policy.AccountPolicyException;\n import org.apache.syncope.core.provisioning.api.utils.policy.PasswordPolicyException;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -155,8 +155,8 @@ protected void securityChecks(final User user) {\n                 && !AuthContextUtils.getUsername().equals(user.getUsername())) {\n \n             Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n-            Set<String> authRealms = authorizations.containsKey(StandardEntitlement.USER_READ)\n-                    ? authorizations.get(StandardEntitlement.USER_READ)\n+            Set<String> authRealms = authorizations.containsKey(IdRepoEntitlement.USER_READ)\n+                    ? authorizations.get(IdRepoEntitlement.USER_READ)\n                     : Collections.emptySet();\n             boolean authorized = authRealms.stream().\n                     anyMatch(realm -> user.getRealm().getFullPath().startsWith(realm));"},{"sha":"efeb70493c3b7c9ba13fa49fd0dd794d21a0400a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConnInstanceTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -55,7 +55,7 @@ public class ConnInstanceTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+        List<GrantedAuthority> authorities = IdMEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n                 collect(Collectors.toList());\n "},{"sha":"fab36ab17e0e1ff69091b451de041846475d9225","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -27,7 +27,7 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -60,7 +60,7 @@ public class MultitenancyTest extends AbstractTest {\n \n     @BeforeAll\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+        List<GrantedAuthority> authorities = IdMEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n                 collect(Collectors.toList());\n "},{"sha":"116704f95917802d1f4ae40ce4531d3c9888963e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -94,7 +94,7 @@ public void findWithOrgUnit() {\n \n     @Test\n     public void findAll() {\n-        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+        List<GrantedAuthority> authorities = IdMEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n                 collect(Collectors.toList());\n "},{"sha":"5e536e3174181130f31b452337c0b4a741796cb2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RoleTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -24,7 +24,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -49,7 +49,7 @@ public void find() {\n         assertNotNull(role.getKey());\n         assertFalse(role.getRealms().isEmpty());\n         assertFalse(role.getEntitlements().isEmpty());\n-        assertTrue(role.getEntitlements().contains(StandardEntitlement.USER_SEARCH));\n+        assertTrue(role.getEntitlements().contains(IdRepoEntitlement.USER_SEARCH));\n     }\n \n     @Test\n@@ -68,8 +68,8 @@ public void save() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n-        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n \n         Role actual = roleDAO.save(role);\n         assertNotNull(actual);"},{"sha":"4e36a95eaa0d4328bf98cc9ece8b14e8a9bc4fdb","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n@@ -68,8 +68,8 @@ public void searchByDynMembership() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n-        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n \n         DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n         dynMembership.setFIQLCond(\"cool==true\");"},{"sha":"0049d4a25c1d9a9ec00e47259b2ed9efb8eeb724","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -33,7 +33,7 @@\n import javax.persistence.EntityExistsException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -77,7 +77,7 @@ public class PlainSchemaTest extends AbstractTest {\n \n     @BeforeAll\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+        List<GrantedAuthority> authorities = IdRepoEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n                 collect(Collectors.toList());\n "},{"sha":"c7883268f264b0649294e19239b7fd0e528381bf","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -30,7 +30,7 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -112,8 +112,8 @@ public void dynMembership() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n-        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n \n         DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n         dynMembership.setFIQLCond(\"cool==true\");\n@@ -176,8 +176,8 @@ public void delete() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n-        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n \n         role = roleDAO.save(role);\n         assertNotNull(role);"},{"sha":"e2ab0dacd84997dfa2ed1d38951a3fbc4ebf994b","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -69,7 +69,7 @@ public class ResourceDataBinderTest extends AbstractTest {\n \n     @BeforeAll\n     public static void setAuthContext() {\n-        List<GrantedAuthority> authorities = StandardEntitlement.values().stream().\n+        List<GrantedAuthority> authorities = IdMEntitlement.values().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n                 collect(Collectors.toList());\n "},{"sha":"9377077b26135577665a12930d4cf68f126b9364","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -85,10 +85,10 @@ public class AuthDataAccessor {\n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n     protected static final Set<SyncopeGrantedAuthority> ANONYMOUS_AUTHORITIES =\n-            Collections.singleton(new SyncopeGrantedAuthority(StandardEntitlement.ANONYMOUS));\n+            Collections.singleton(new SyncopeGrantedAuthority(IdRepoEntitlement.ANONYMOUS));\n \n     protected static final String[] GROUP_OWNER_ENTITLEMENTS = new String[] {\n-        StandardEntitlement.GROUP_READ, StandardEntitlement.GROUP_UPDATE, StandardEntitlement.GROUP_DELETE\n+        IdRepoEntitlement.GROUP_READ, IdRepoEntitlement.GROUP_UPDATE, IdRepoEntitlement.GROUP_DELETE\n     };\n \n     @Resource(name = \"adminUser\")\n@@ -304,7 +304,7 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n         Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n \n         if (user.isMustChangePassword()) {\n-            authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n+            authorities.add(new SyncopeGrantedAuthority(IdRepoEntitlement.MUST_CHANGE_PASSWORD));\n         } else {\n             Map<String, Set<String>> entForRealms = new HashMap<>();\n \n@@ -411,7 +411,7 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n             if (BooleanUtils.isTrue(user.isMustChangePassword())) {\n                 LOG.debug(\"User {} must change password, resetting authorities\", username);\n                 authorities = Collections.singleton(\n-                        new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n+                        new SyncopeGrantedAuthority(IdRepoEntitlement.MUST_CHANGE_PASSWORD));\n             }\n         }\n "},{"sha":"33479e83fa907a6679957a957dfbc0d095d914ec","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/MustChangePasswordFilter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FMustChangePasswordFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FMustChangePasswordFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FMustChangePasswordFilter.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -25,7 +25,7 @@\n import javax.servlet.ServletException;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.web.firewall.FirewalledRequest;\n@@ -49,7 +49,7 @@ public void doFilter(final ServletRequest request, final ServletResponse respons\n         if (request instanceof FirewalledRequest) {\n             boolean isMustChangePassword =\n                     SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream().anyMatch(\n-                            authority -> StandardEntitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority()));\n+                            authority -> IdRepoEntitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority()));\n \n             FirewalledRequest wrappedRequest = FirewalledRequest.class.cast(request);\n             if (isMustChangePassword && !\"POST\".equalsIgnoreCase(wrappedRequest.getMethod())"},{"sha":"d87d0183fbc895ccb10c41e36bde84feee7006bb","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormPanel.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.common.lib.to.UserRequestFormProperty;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -187,7 +187,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 viewDetails(target);\n             }\n         };\n-        MetaDataRoleAuthorizationStrategy.authorize(userDetails, ENABLE, StandardEntitlement.USER_READ);\n+        MetaDataRoleAuthorizationStrategy.authorize(userDetails, ENABLE, IdRepoEntitlement.USER_READ);\n \n         boolean enabled = form.getUserTO() != null;\n         userDetails.setVisible(enabled).setEnabled(enabled);"},{"sha":"32a4b5757601159c2a1b7c85b175dbc790a096b2","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowTaskLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.to.WorkflowTask;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -61,13 +61,13 @@ public class UserWorkflowTaskLogic extends AbstractTransactionalLogic<EntityTO>\n     private UserDAO userDAO;\n \n     @PreAuthorize(\"hasRole('\" + FlowableEntitlement.WORKFLOW_TASK_LIST + \"') \"\n-            + \"and hasRole('\" + StandardEntitlement.USER_READ + \"')\")\n+            + \"and hasRole('\" + IdRepoEntitlement.USER_READ + \"')\")\n     public List<WorkflowTask> getAvailableTasks(final String key) {\n         User user = userDAO.authFind(key);\n         return wfTaskManager.getAvailableTasks(user.getKey());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     public UserTO executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput) {\n         WorkflowResult<String> updated = wfTaskManager.executeNextTask(workflowTaskExecInput);\n "},{"sha":"a6e5edf8597c814283fade418d451a821909c15a","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCClientLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCClientLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -53,7 +53,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.logic.model.TokenEndpointResponse;\n import org.apache.syncope.core.logic.oidc.OIDCUserManager;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -109,7 +109,7 @@ private OIDCProvider getOIDCProvider(final String opName) {\n         return op;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public OIDCLoginRequestTO createLoginRequest(final String redirectURI, final String opName) {\n         // 1. look for Provider\n         OIDCProvider op = getOIDCProvider(opName);\n@@ -125,7 +125,7 @@ public OIDCLoginRequestTO createLoginRequest(final String redirectURI, final Str\n         return requestTO;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public OIDCLoginResponseTO login(final String redirectURI, final String authorizationCode, final String opName) {\n         OIDCProvider op = getOIDCProvider(opName);\n \n@@ -429,7 +429,7 @@ private UserInfo getUserInfo(\n         return userInfo;\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"'))\")\n     public OIDCLogoutRequestTO createLogoutRequest(final String op) {\n         OIDCLogoutRequestTO logoutRequest = new OIDCLogoutRequestTO();\n         logoutRequest.setEndSessionEndpoint(getOIDCProvider(op).getEndSessionEndpoint());"},{"sha":"7fd659ba98f64b36bcead395ddb8a7bcaee3e483","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -44,7 +44,7 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n@@ -252,7 +252,7 @@ private SAML2IdPEntity getIdP(final String entityID) {\n         return idp;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public SAML2RequestTO createLoginRequest(final String spEntityID, final String idpEntityID) {\n         check();\n \n@@ -357,7 +357,7 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n         return requestTO;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO response) {\n         check();\n \n@@ -555,7 +555,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         return responseTO;\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"'))\")\n     public SAML2RequestTO createLogoutRequest(final String accessToken, final String spEntityID) {\n         check();\n \n@@ -636,7 +636,7 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n         return requestTO;\n     }\n \n-    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"'))\")\n     public void validateLogoutResponse(final String accessToken, final SAML2ReceivedResponseTO response) {\n         check();\n "},{"sha":"e5941854e2a0ed1c0cbe491e15f99a031727fd9d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -63,7 +63,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n@@ -106,19 +106,19 @@ public void readEntitlements() {\n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).self();\n         assertEquals(1, self.getLeft().size());\n-        assertTrue(self.getLeft().keySet().contains(StandardEntitlement.ANONYMOUS));\n+        assertTrue(self.getLeft().keySet().contains(IdRepoEntitlement.ANONYMOUS));\n         assertEquals(ANONYMOUS_UNAME, self.getRight().getUsername());\n \n         // 3. as admin\n         self = adminClient.self();\n         assertEquals(syncopeService.platform().getEntitlements().size(), self.getLeft().size());\n-        assertFalse(self.getLeft().keySet().contains(StandardEntitlement.ANONYMOUS));\n+        assertFalse(self.getLeft().keySet().contains(IdRepoEntitlement.ANONYMOUS));\n         assertEquals(ADMIN_UNAME, self.getRight().getUsername());\n \n         // 4. as user\n         self = clientFactory.create(\"bellini\", ADMIN_PWD).self();\n         assertFalse(self.getLeft().isEmpty());\n-        assertFalse(self.getLeft().keySet().contains(StandardEntitlement.ANONYMOUS));\n+        assertFalse(self.getLeft().keySet().contains(IdRepoEntitlement.ANONYMOUS));\n         assertEquals(\"bellini\", self.getRight().getUsername());\n     }\n \n@@ -227,11 +227,11 @@ public void delegatedUserCRUD() {\n             // 1. create role for full user administration, under realm /even/two\n             RoleTO role = new RoleTO();\n             role.setKey(\"Delegated user admin\");\n-            role.getEntitlements().add(StandardEntitlement.USER_CREATE);\n-            role.getEntitlements().add(StandardEntitlement.USER_UPDATE);\n-            role.getEntitlements().add(StandardEntitlement.USER_DELETE);\n-            role.getEntitlements().add(StandardEntitlement.USER_SEARCH);\n-            role.getEntitlements().add(StandardEntitlement.USER_READ);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_CREATE);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_UPDATE);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_DELETE);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_SEARCH);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_READ);\n             role.getRealms().add(\"/even/two\");\n \n             roleKey = roleService.create(role).getHeaderString(RESTHeaders.RESOURCE_KEY);"},{"sha":"cca1f438ca4d03b85e432ef13ad1c51805324642","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n@@ -107,11 +107,11 @@ public void delegatedAdmin() {\n             // 2. create role for such dynamic realm\n             role = new RoleTO();\n             role.setKey(\"Administer LDAP\" + getUUIDString());\n-            role.getEntitlements().add(StandardEntitlement.USER_SEARCH);\n-            role.getEntitlements().add(StandardEntitlement.USER_READ);\n-            role.getEntitlements().add(StandardEntitlement.USER_UPDATE);\n-            role.getEntitlements().add(StandardEntitlement.GROUP_READ);\n-            role.getEntitlements().add(StandardEntitlement.GROUP_UPDATE);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_SEARCH);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_READ);\n+            role.getEntitlements().add(IdRepoEntitlement.USER_UPDATE);\n+            role.getEntitlements().add(IdRepoEntitlement.GROUP_READ);\n+            role.getEntitlements().add(IdRepoEntitlement.GROUP_UPDATE);\n             role.getDynRealms().add(dynRealm.getKey());\n \n             role = createRole(role);"},{"sha":"f1b8d829a53544d73b66ae06df218947b0fda09a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RoleITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n@@ -43,7 +43,7 @@ public static RoleTO getSampleRoleTO(final String name) {\n         RoleTO role = new RoleTO();\n         role.setKey(name + getUUIDString());\n         role.getRealms().add(\"/even\");\n-        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n \n         return role;\n     }\n@@ -62,16 +62,16 @@ public void list() {\n     public void read() {\n         RoleTO roleTO = roleService.read(\"Search for realm evenTwo\");\n         assertNotNull(roleTO);\n-        assertTrue(roleTO.getEntitlements().contains(StandardEntitlement.USER_READ));\n+        assertTrue(roleTO.getEntitlements().contains(IdRepoEntitlement.USER_READ));\n     }\n \n     @Test\n     public void create() {\n         RoleTO role = new RoleTO();\n         role.getRealms().add(SyncopeConstants.ROOT_REALM);\n         role.getRealms().add(\"/even/two\");\n-        role.getEntitlements().add(StandardEntitlement.LOG_LIST);\n-        role.getEntitlements().add(StandardEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n \n         try {\n             createRole(role);"},{"sha":"154070fd787e8489be64afa18944ab206ccb1092","filename":"src/main/asciidoc/reference-guide/concepts/entitlements.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fentitlements.adoc?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -30,13 +30,13 @@ ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n https://github.com/apache/syncope/blob/master/core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java[RealmLogic^]\n endif::[]\n , the\n-http://docs.spring.io/spring-security/site/docs/4.2.x/reference/htmlsingle/#el-common-built-in[`hasRole` expression^]\n+http://docs.spring.io/spring-security/site/docs/5.1.x/reference/htmlsingle/#el-common-built-in[`hasRole` expression^]\n is used together with one of the standard entitlements to restrict access only to Users owning the `REALM_LIST`\n entitlement.\n \n [source,java]\n ----\n-@PreAuthorize(\"hasRole('\" + StandardEntitlement.REALM_LIST + \"')\")\n+@PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_LIST + \"')\")\n public List<RealmTO> list(final String fullPath) {\n ----\n "}]}