{"sha":"e3281a2d943c07cb6760497ca5f076640a4549e6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUzMjgxYTJkOTQzYzA3Y2I2NzYwNDk3Y2E1ZjA3NjY0MGE0NTQ5ZTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-24T13:55:59Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-24T13:55:59Z"},"message":"Cleaning up and simple refactory (again)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1401690 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34f399092604c8bdf736dd27bd43f34152d102ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/34f399092604c8bdf736dd27bd43f34152d102ac"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e3281a2d943c07cb6760497ca5f076640a4549e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3281a2d943c07cb6760497ca5f076640a4549e6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e3281a2d943c07cb6760497ca5f076640a4549e6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3281a2d943c07cb6760497ca5f076640a4549e6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e60bd1bf219341b64f976f75f517f5cf35318ab0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e60bd1bf219341b64f976f75f517f5cf35318ab0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e60bd1bf219341b64f976f75f517f5cf35318ab0"}],"stats":{"total":392,"additions":214,"deletions":178},"files":[{"sha":"d2350193b9882089bf93ef2bf1cc1a98392b76f8","filename":"core/src/main/java/org/apache/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3281a2d943c07cb6760497ca5f076640a4549e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3281a2d943c07cb6760497ca5f076640a4549e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=e3281a2d943c07cb6760497ca5f076640a4549e6","patch":"@@ -332,18 +332,22 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         return connObjectTO;\n     }\n \n+    /**\n+     * Query connected external resources for values to populated virtual attributes associated with the given owner.\n+     *\n+     * @param owner user or role\n+     */\n     public void retrieveVirAttrValues(final AbstractAttributable owner) {\n         final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n         final ConnInstanceLoader connInstanceLoader = context.getBean(ConnInstanceLoader.class);\n \n-        final Map<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject> remoteObjects =\n-                new HashMap<SchemaMappingUtil.SchemaMappingsWrapper, ConnectorObject>();\n+        final Map<SchemaMappingWrapper, ConnectorObject> remoteObjects =\n+                new HashMap<SchemaMappingWrapper, ConnectorObject>();\n \n         for (ExternalResource resource : owner.getResources()) {\n             LOG.debug(\"Retrieve remote object from '{}'\", resource.getName());\n             try {\n-                final SchemaMappingUtil.SchemaMappingsWrapper mappings = new SchemaMappingUtil.SchemaMappingsWrapper(\n-                        resource.getMappings());\n+                final SchemaMappingWrapper mappings = new SchemaMappingWrapper(resource.getMappings());\n \n                 final String accountId = SchemaMappingUtil.getAccountIdValue(owner, mappings.getAccountIdMapping());\n \n@@ -353,7 +357,7 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n                     // Retrieve attributes to get\n                     final Set<String> extAttrNames = new HashSet<String>();\n \n-                    for (Collection<SchemaMapping> virAttrMappings : mappings.getuVirMappings().values()) {\n+                    for (Set<SchemaMapping> virAttrMappings : mappings.getuVirMappings().values()) {\n                         for (SchemaMapping virAttrMapping : virAttrMappings) {\n                             extAttrNames.add(SchemaMappingUtil.getExtAttrName(virAttrMapping));\n                         }\n@@ -383,15 +387,14 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n         for (AbstractVirAttr virAttr : owner.getVirtualAttributes()) {\n             LOG.debug(\"Provide value for virtual attribute '{}'\", virAttr.getVirtualSchema().getName());\n \n-            for (SchemaMappingUtil.SchemaMappingsWrapper mappings : remoteObjects.keySet()) {\n-                Collection<SchemaMapping> virAttrMappings = mappings.getuVirMappings().get(\n-                        virAttr.getVirtualSchema().getName());\n+            for (Map.Entry<SchemaMappingWrapper, ConnectorObject> entry : remoteObjects.entrySet()) {\n+                final Set<SchemaMapping> virAttrMappings = entry.getKey().getuVirMappings().\n+                        get(virAttr.getVirtualSchema().getName());\n \n                 if (virAttrMappings != null) {\n                     for (SchemaMapping virAttrMapping : virAttrMappings) {\n-                        String extAttrName = SchemaMappingUtil.getExtAttrName(virAttrMapping);\n-                        Attribute extAttr = remoteObjects.get(mappings).getAttributeByName(extAttrName);\n-\n+                        final String extAttrName = SchemaMappingUtil.getExtAttrName(virAttrMapping);\n+                        final Attribute extAttr = entry.getValue().getAttributeByName(extAttrName);\n                         if (extAttr != null && extAttr.getValue() != null && !extAttr.getValue().isEmpty()) {\n                             for (Object obj : extAttr.getValue()) {\n                                 if (obj != null) {"},{"sha":"0417f1ed32eff822496666df3a452b46d5b4c688","filename":"core/src/main/java/org/apache/syncope/core/util/SchemaMappingUtil.java","status":"modified","additions":13,"deletions":167,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3281a2d943c07cb6760497ca5f076640a4549e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3281a2d943c07cb6760497ca5f076640a4549e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java?ref=e3281a2d943c07cb6760497ca5f076640a4549e6","patch":"@@ -129,9 +129,10 @@ public static String getIntAttrName(final SchemaMapping mapping, final IntMappin\n     /**\n      * Get attribute values.\n      *\n-     * @param mapping mapping.\n-     * @param attributables list of attributables.\n-     * @param password password.\n+     * @param mapping mapping\n+     * @param attributables list of attributables\n+     * @param password password\n+     * @param schemaDAO schema DAO\n      * @return schema and attribute values.\n      */\n     public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(final SchemaMapping mapping,\n@@ -240,6 +241,7 @@ public static Map.Entry<AbstractSchema, List<AbstractAttrValue>> getIntValues(fi\n \n     public static List<String> getIntValueAsStrings(\n             final AbstractAttributable attributable, final SchemaMapping mapping) {\n+        \n         return getIntValueAsStrings(attributable, mapping, null);\n     }\n \n@@ -347,8 +349,8 @@ public static Class getIntMappingTypeClass(final IntMappingType intMappingType)\n     /**\n      * Get first occurance of accountId mapping from a collection of mappings.\n      *\n-     * @param mappings collection of SchemaMapping.\n-     * @return AccountId mapping or null if no occurences found.\n+     * @param mappings collection of SchemaMapping\n+     * @return AccountId mapping or null if no occurences found\n      */\n     public static SchemaMapping getAccountIdMapping(final Collection<SchemaMapping> mappings) {\n         for (SchemaMapping mapping : mappings) {\n@@ -363,9 +365,9 @@ public static SchemaMapping getAccountIdMapping(final Collection<SchemaMapping>\n     /**\n      * Get accountId internal value.\n      *\n-     * @param attributable attributable.\n-     * @param mappings collection of SchemaMapping.\n-     * @return accountId internal value.\n+     * @param attributable attributable\n+     * @param mappings collection of SchemaMapping\n+     * @return accountId internal value\n      */\n     public static String getAccountIdValue(final AbstractAttributable attributable,\n             final Collection<SchemaMapping> mappings) {\n@@ -379,170 +381,14 @@ public static String getAccountIdValue(final AbstractAttributable attributable,\n     /**\n      * Get accountId internal value.\n      *\n-     * @param attributable attributable.\n-     * @param mappings accountId mapping.\n-     * @return accountId internal value.\n+     * @param attributable attributable\n+     * @param mapping accountId mapping\n+     * @return accountId internal value\n      */\n     public static String getAccountIdValue(final AbstractAttributable attributable, final SchemaMapping mapping) {\n         final List<String> values = getIntValueAsStrings(attributable, mapping);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0);\n     }\n-\n-    public static class SchemaMappingsWrapper {\n-\n-        SchemaMapping accountIdMapping = null;\n-\n-        SchemaMapping passwordMapping = null;\n-\n-        final Map<String, Collection<SchemaMapping>> uMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> uVirMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> uDerMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> rMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> rVirMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> rDerMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> mMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> mVirMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        final Map<String, Collection<SchemaMapping>> mDerMappings = new HashMap<String, Collection<SchemaMapping>>();\n-\n-        public SchemaMappingsWrapper(final Collection<SchemaMapping> mappings) {\n-            if (mappings == null) {\n-                return;\n-            }\n-\n-            for (SchemaMapping mapping : mappings) {\n-                if (mapping.isAccountid() && accountIdMapping == null) {\n-\n-                    accountIdMapping = mapping;\n-\n-                } else if (mapping.isPassword() && passwordMapping == null) {\n-\n-                    passwordMapping = mapping;\n-\n-                } else {\n-                    final String intAttrName = getIntAttrName(mapping);\n-\n-                    switch (mapping.getIntMappingType()) {\n-                        case Password:\n-                            if (passwordMapping == null) {\n-                                passwordMapping = mapping;\n-                            }\n-                            break;\n-                        case Username:\n-                        case SyncopeUserId:\n-                        case UserSchema:\n-                            if (uMappings.get(intAttrName) == null) {\n-                                uMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            uMappings.get(intAttrName).add(mapping);\n-                            break;\n-                        case RoleSchema:\n-                            if (rMappings.get(intAttrName) == null) {\n-                                rMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            rMappings.get(intAttrName).add(mapping);\n-                            break;\n-                        case MembershipSchema:\n-                            if (mMappings.get(intAttrName) == null) {\n-                                mMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            mMappings.get(intAttrName).add(mapping);\n-                            break;\n-\n-                        case UserDerivedSchema:\n-                            if (uDerMappings.get(intAttrName) == null) {\n-                                uDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            uDerMappings.get(intAttrName).add(mapping);\n-                            break;\n-                        case RoleDerivedSchema:\n-                            if (rDerMappings.get(intAttrName) == null) {\n-                                rDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            rDerMappings.get(intAttrName).add(mapping);\n-                            break;\n-                        case MembershipDerivedSchema:\n-                            if (mDerMappings.get(intAttrName) == null) {\n-                                mDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            mDerMappings.get(intAttrName).add(mapping);\n-                            break;\n-\n-                        case UserVirtualSchema:\n-                            if (uVirMappings.get(intAttrName) == null) {\n-                                uVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            uVirMappings.get(intAttrName).add(mapping);\n-                            break;\n-                        case RoleVirtualSchema:\n-                            if (rVirMappings.get(intAttrName) == null) {\n-                                rVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            rVirMappings.get(intAttrName).add(mapping);\n-                            break;\n-                        case MembershipVirtualSchema:\n-                            if (mVirMappings.get(intAttrName) == null) {\n-                                mVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n-                            }\n-                            mVirMappings.get(intAttrName).add(mapping);\n-                            break;\n-                        default:\n-                    }\n-                }\n-            }\n-        }\n-\n-        public SchemaMapping getAccountIdMapping() {\n-            return accountIdMapping;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getmDerMappings() {\n-            return mDerMappings;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getmMappings() {\n-            return mMappings;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getmVirMappings() {\n-            return mVirMappings;\n-        }\n-\n-        public SchemaMapping getPasswordMapping() {\n-            return passwordMapping;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getrDerMappings() {\n-            return rDerMappings;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getrMappings() {\n-            return rMappings;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getrVirMappings() {\n-            return rVirMappings;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getuDerMappings() {\n-            return uDerMappings;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getuMappings() {\n-            return uMappings;\n-        }\n-\n-        public Map<String, Collection<SchemaMapping>> getuVirMappings() {\n-            return uVirMappings;\n-        }\n-    }\n }"},{"sha":"f83093b15aa15637556e87ab314543780625f53e","filename":"core/src/main/java/org/apache/syncope/core/util/SchemaMappingWrapper.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3281a2d943c07cb6760497ca5f076640a4549e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3281a2d943c07cb6760497ca5f076640a4549e6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingWrapper.java?ref=e3281a2d943c07cb6760497ca5f076640a4549e6","patch":"@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.beans.SchemaMapping;\n+\n+/**\n+ *\n+ * @author ilgrosso\n+ */\n+public class SchemaMappingWrapper {\n+\n+    private SchemaMapping accountIdMapping = null;\n+\n+    private SchemaMapping passwordMapping = null;\n+\n+    private final Map<String, Set<SchemaMapping>> uMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> uVirMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> uDerMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> rMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> rVirMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> rDerMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> mMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> mVirMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    private final Map<String, Set<SchemaMapping>> mDerMappings = new HashMap<String, Set<SchemaMapping>>();\n+\n+    public SchemaMappingWrapper(final Set<SchemaMapping> mappings) {\n+        if (mappings == null) {\n+            return;\n+        }\n+        for (SchemaMapping mapping : mappings) {\n+            if (mapping.isAccountid() && accountIdMapping == null) {\n+                accountIdMapping = mapping;\n+            } else if (mapping.isPassword() && passwordMapping == null) {\n+                passwordMapping = mapping;\n+            } else {\n+                final String intAttrName = SchemaMappingUtil.getIntAttrName(mapping);\n+                switch (mapping.getIntMappingType()) {\n+                    case Password:\n+                        if (passwordMapping == null) {\n+                            passwordMapping = mapping;\n+                        }\n+                        break;\n+\n+                    case Username:\n+                    case SyncopeUserId:\n+                    case UserSchema:\n+                        if (uMappings.get(intAttrName) == null) {\n+                            uMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        uMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case RoleSchema:\n+                        if (rMappings.get(intAttrName) == null) {\n+                            rMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        rMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case MembershipSchema:\n+                        if (mMappings.get(intAttrName) == null) {\n+                            mMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        mMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case UserDerivedSchema:\n+                        if (uDerMappings.get(intAttrName) == null) {\n+                            uDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        uDerMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case RoleDerivedSchema:\n+                        if (rDerMappings.get(intAttrName) == null) {\n+                            rDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        rDerMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case MembershipDerivedSchema:\n+                        if (mDerMappings.get(intAttrName) == null) {\n+                            mDerMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        mDerMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case UserVirtualSchema:\n+                        if (uVirMappings.get(intAttrName) == null) {\n+                            uVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        uVirMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case RoleVirtualSchema:\n+                        if (rVirMappings.get(intAttrName) == null) {\n+                            rVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        rVirMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    case MembershipVirtualSchema:\n+                        if (mVirMappings.get(intAttrName) == null) {\n+                            mVirMappings.put(intAttrName, new HashSet<SchemaMapping>());\n+                        }\n+                        mVirMappings.get(intAttrName).add(mapping);\n+                        break;\n+\n+                    default:\n+                }\n+            }\n+        }\n+    }\n+\n+    public SchemaMapping getAccountIdMapping() {\n+        return accountIdMapping;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getmDerMappings() {\n+        return mDerMappings;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getmMappings() {\n+        return mMappings;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getmVirMappings() {\n+        return mVirMappings;\n+    }\n+\n+    public SchemaMapping getPasswordMapping() {\n+        return passwordMapping;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getrDerMappings() {\n+        return rDerMappings;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getrMappings() {\n+        return rMappings;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getrVirMappings() {\n+        return rVirMappings;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getuDerMappings() {\n+        return uDerMappings;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getuMappings() {\n+        return uMappings;\n+    }\n+\n+    public Map<String, Set<SchemaMapping>> getuVirMappings() {\n+        return uVirMappings;\n+    }\n+}"}]}