{"sha":"f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY2YmJmOTU3YWI3ZjY5ZDM1Nzg1ZWU3ZGQ0YTNlM2E2Y2NiNDJiZTk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-09-20T13:54:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-09-20T13:54:58Z"},"message":"[SYNCOPE-418] Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1525004 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d7b69ed8ca98768c119e8dd8884eaf2bcbb6120","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4d7b69ed8ca98768c119e8dd8884eaf2bcbb6120"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"65d40b7bf12cd0592479eeab46654a7caef370c7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/65d40b7bf12cd0592479eeab46654a7caef370c7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/65d40b7bf12cd0592479eeab46654a7caef370c7"},{"sha":"34c180e0184d9257d42e0f457674ef3defd0fc2c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34c180e0184d9257d42e0f457674ef3defd0fc2c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34c180e0184d9257d42e0f457674ef3defd0fc2c"}],"stats":{"total":824,"additions":533,"deletions":291},"files":[{"sha":"80b2db778f78311b4ef71ce8516825ad055c5ce4","filename":"common/src/main/java/org/apache/syncope/common/types/EntityViolationType.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -25,12 +25,12 @@ public enum EntityViolationType {\n \r\n     Standard(\"\"),\r\n     InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\r\n-    InvalidEntitlementName(\"org.apache.syncope.core.validation.entitlement.name\"),\r\n     InvalidConnInstanceLocation(\"org.apache.syncope.core.validation.conninstance.location\"),\r\n     InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\r\n     InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\r\n     InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\r\n     InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\r\n+    InvalidName(\"org.apache.syncope.core.validation.name\"),\r\n     InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\r\n     InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\r\n     InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\r\n@@ -42,7 +42,8 @@ public enum EntityViolationType {\n     InvalidReport(\"org.apache.syncope.core.validation.report\"),\r\n     InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\r\n     InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\r\n-    InvalidSchemaTypeSpecification(\"org.apache.syncope.core.validation.attrvalue.schemaTypeSpecification\"),\r\n+    InvalidSchemaEnum(\"org.apache.syncope.core.validation.schema.enum\"),\r\n+    InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.validation.schema.multivalueUnique\"),\r\n     InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\r\n     InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\r\n     InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\r\n@@ -51,7 +52,6 @@ public enum EntityViolationType {\n     InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\r\n     InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\r\n     InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\r\n-    MultivalueAndUniqueConstraint(\"org.apache.syncope.core.validation.schema.multivalueAndUniqueConstraint\"),\r\n     MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\r\n \r\n     private String message;\r"},{"sha":"b90744ace3d1d87ba571189caeaaf56c72be5ac3","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeClientExceptionType.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -42,16 +42,17 @@ public enum SyncopeClientExceptionType {\n     InvalidPropagationTaskExecReport(\r\n     \"Syncope.InvalidPropagationTaskExecReport\",\r\n     \"Syncope.InvalidPropagationTaskExecReport.element\"),\r\n-    InvalidUSchema(\"Syncope.InvalidUSchemaUpdate\", \"Syncope.InvalidUSchemaUpdate.name\"),\r\n-    InvalidUDerSchema(\"Syncope.InvalidUDerSchemaUpdate\", \"Syncope.InvalidUDerSchemaUpdate.name\"),\r\n-    InvalidUVirSchema(\"Syncope.InvalidUVirSchemaUpdate\", \"Syncope.InvalidUVirSchemaUpdate.name\"),\r\n-    InvalidRSchema(\"Syncope.InvalidRSchemaUpdate\", \"Syncope.InvalidRSchemaUpdate.name\"),\r\n-    InvalidRDerSchema(\"Syncope.InvalidRDerSchemaUpdate\", \"Syncope.InvalidRDerSchemaUpdate.name\"),\r\n-    InvalidRVirSchema(\"Syncope.InvalidRVirSchemaUpdate\", \"Syncope.InvalidRVirSchemaUpdate.name\"),\r\n-    InvalidMSchema(\"Syncope.InvalidMSchemaUpdate\", \"Syncope.InvalidMSchemaUpdate.name\"),\r\n-    InvalidMDerSchema(\"Syncope.InvalidMDerSchemaUpdate\", \"Syncope.InvalidMDerSchemaUpdate.name\"),\r\n-    InvalidMVirSchema(\"Syncope.InvalidMVirSchemaUpdate\", \"Syncope.InvalidMVirSchemaUpdate.name\"),\r\n-    InvalidSchemaMapping(\"Syncope.InvalidSchemaMapping\", \"\"),\r\n+    InvalidUSchema(\"Syncope.InvalidUSchema\", \"Syncope.InvalidUSchema.name\"),\r\n+    InvalidUDerSchema(\"Syncope.InvalidUDerSchema\", \"Syncope.InvalidUDerSchema.name\"),\r\n+    InvalidUVirSchema(\"Syncope.InvalidUVirSchema\", \"Syncope.InvalidUVirSchema.name\"),\r\n+    InvalidRSchema(\"Syncope.InvalidRSchema\", \"Syncope.InvalidRSchema.name\"),\r\n+    InvalidRDerSchema(\"Syncope.InvalidRDerSchema\", \"Syncope.InvalidRDerSchema.name\"),\r\n+    InvalidRVirSchema(\"Syncope.InvalidRVirSchema\", \"Syncope.InvalidRVirSchema.name\"),\r\n+    InvalidMSchema(\"Syncope.InvalidMSchema\", \"Syncope.InvalidMSchema.name\"),\r\n+    InvalidMDerSchema(\"Syncope.InvalidMDerSchema\", \"Syncope.InvalidMDerSchema.name\"),\r\n+    InvalidMVirSchema(\"Syncope.InvalidMVirSchema\", \"Syncope.InvalidMVirSchema.name\"),\r\n+    InvalidSchemaMapping(\"Syncope.InvalidSchemaMapping\", \"Syncope.InvalidSchemaMapping.name\"),\r\n+    InvalidSyncopeConf(\"Syncope.InvalidSyncopeConf\", \"Syncope.InvalidSyncopeConf.name\"),\r\n     InvalidSyncopeUser(\"Syncope.InvalidSyncopeUser\", \"Syncope.InvalidSyncopeUser.element\"),\r\n     InvalidExternalResource(\"Syncope.InvalidExternalResource\", \"Syncope.InvalidExternalResource.element\"),\r\n     InvalidNotification(\"Syncope.InvalidNotification\", \"Syncope.InvalidNotification.element\"),\r"},{"sha":"1fbcc28faa6decf9ec614fad9178abf9e4c6e34f","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerSchema.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -22,8 +22,10 @@\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.core.persistence.validation.entity.SchemaNameCheck;\n \n @MappedSuperclass\n+@SchemaNameCheck\n public abstract class AbstractDerSchema extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -6173643493348674060L;"},{"sha":"b465bb51d6952350e07055ba45906fb0ca9133f8","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -34,9 +34,11 @@\n import org.apache.syncope.core.persistence.validation.attrvalue.AbstractValidator;\n import org.apache.syncope.core.persistence.validation.attrvalue.BasicValidator;\n import org.apache.syncope.core.persistence.validation.entity.SchemaCheck;\n+import org.apache.syncope.core.persistence.validation.entity.SchemaNameCheck;\n \n @MappedSuperclass\n @SchemaCheck\n+@SchemaNameCheck\n public abstract class AbstractSchema extends AbstractBaseBean {\n \n     public static String enumValuesSeparator = \";\";\n@@ -151,7 +153,7 @@ public AbstractValidator getValidator() {\n         if (getValidatorClass() != null && getValidatorClass().length() > 0) {\n             try {\n                 Constructor validatorConstructor = Class.forName(getValidatorClass()).getConstructor(\n-                        new Class[]{getClass().getSuperclass()});\n+                        new Class[] {getClass().getSuperclass()});\n                 validator = (AbstractValidator) validatorConstructor.newInstance(this);\n             } catch (Exception e) {\n                 LOG.error(\"Could not instantiate validator of type \" + getValidatorClass()"},{"sha":"5e385093ed02a687cb1be605171c70b849ad06cc","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractVirSchema.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -25,13 +25,15 @@\n import javax.validation.constraints.Min;\n \n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.core.persistence.validation.entity.SchemaNameCheck;\n \n @MappedSuperclass\n+@SchemaNameCheck\n public abstract class AbstractVirSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n-    \n+\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -74,5 +76,4 @@ public boolean isReadonly() {\n     public void setReadonly(final boolean readonly) {\n         this.readonly = getBooleanAsInteger(readonly);\n     }\n-\n }"},{"sha":"b63b85c8e6f56b225aa6b0c70018ef0daabed24e","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncopeConf.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConf.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -21,8 +21,10 @@\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import org.apache.syncope.core.persistence.validation.entity.SyncopeConfCheck;\n \n @Entity\n+@SyncopeConfCheck\n public class SyncopeConf extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -899341077670090120L;\n@@ -38,15 +40,15 @@ public String getKey() {\n         return key;\n     }\n \n-    public void setKey(String key) {\n+    public void setKey(final String key) {\n         this.key = key;\n     }\n \n     public String getValue() {\n         return value;\n     }\n \n-    public void setValue(String value) {\n+    public void setValue(final String value) {\n         this.value = value;\n     }\n }"},{"sha":"d67b496c4454c128adddffbe3f8c37f399103192","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UDerSchema.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -20,10 +20,8 @@\n \n import javax.persistence.Entity;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.apache.syncope.core.persistence.validation.entity.USchemaCheck;\n \n @Entity\n-@USchemaCheck\n public class UDerSchema extends AbstractDerSchema {\n \n     private static final long serialVersionUID = 6244467775394201229L;"},{"sha":"fce952beeb7aab233d6de555c6c5a91dab586e13","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/USchema.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -21,11 +21,9 @@\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n-import org.apache.syncope.core.persistence.validation.entity.USchemaCheck;\n \n @Entity\n @Cacheable\n-@USchemaCheck\n public class USchema extends AbstractSchema {\n \n     private static final long serialVersionUID = -2776513645999914610L;"},{"sha":"729a490b49d678d2fa8a6146c93937c275c868d1","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UVirSchema.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -21,11 +21,9 @@\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n-import org.apache.syncope.core.persistence.validation.entity.USchemaCheck;\n \n @Entity\n @Cacheable\n-@USchemaCheck\n public class UVirSchema extends AbstractVirSchema {\n \n     private static final long serialVersionUID = 1089308700791426201L;"},{"sha":"6f7995ac982194a258065b5001e102dfda971483","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/attrvalue/EmailAddressValidator.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -39,11 +39,9 @@ public EmailAddressValidator(final AbstractSchema schema) {\n \n     @Override\n     protected void doValidate(final AbstractAttrValue attributeValue) throws InvalidAttrValueException {\n-\n-        Matcher matcher = EMAIL_PATTERN.matcher((CharSequence) attributeValue.getValue());\n+        Matcher matcher = EMAIL_PATTERN.matcher(attributeValue.<CharSequence>getValue());\n         if (!matcher.matches()) {\n-            String error = \"\\\"\" + attributeValue.getValue() + \"\\\" is not a valid email address\";\n-            throw new InvalidAttrValueException(error);\n+            throw new InvalidAttrValueException(\"\\\"\" + attributeValue.getValue() + \"\\\" is not a valid email address\");\n         }\n     }\n }"},{"sha":"57db3a99d563f0ace2935518289f5492f2500dba","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/AbstractValidator.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAbstractValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,17 +18,28 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n+import java.lang.annotation.Annotation;\n+import java.util.regex.Pattern;\n+import javax.validation.ConstraintValidator;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public abstract class AbstractValidator {\n+public abstract class AbstractValidator<A extends Annotation, T> implements ConstraintValidator<A, T> {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n \n+    protected static final Pattern NAME_PATTERN =\n+            Pattern.compile(\"^[\\\\w \\\\-@.]+\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+    @Override\n+    public void initialize(final A annotation) {\n+        // no initialization\n+    }\n+\n     protected final String getTemplate(final EntityViolationType type, final String message) {\n         return type.name() + \";\" + message;\n     }"},{"sha":"038b74a17fb071767a25eb0357e4db4af3f86f8a","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/AttrValidator.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,20 +18,14 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n \n-public class AttrValidator extends AbstractValidator implements ConstraintValidator<AttrCheck, AbstractAttr> {\n-\n-    @Override\n-    public void initialize(final AttrCheck constraintAnnotation) {\n-    }\n+public class AttrValidator extends AbstractValidator<AttrCheck, AbstractAttr> {\n \n     @Override\n     public boolean isValid(final AbstractAttr object, final ConstraintValidatorContext context) {\n-\n         boolean isValid;\n \n         if (object == null) {"},{"sha":"f875383c2eb1892d54103e6249963f58cfff177a","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/AttrValueValidator.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,23 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.AbstractAttrUniqueValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n \n-public class AttrValueValidator extends AbstractValidator implements\n-        ConstraintValidator<AttrValueCheck, AbstractAttrValue> {\n-\n-    @Override\n-    public void initialize(final AttrValueCheck constraintAnnotation) {\n-    }\n+public class AttrValueValidator extends AbstractValidator<AttrValueCheck, AbstractAttrValue> {\n \n     @Override\n     public boolean isValid(final AbstractAttrValue object, final ConstraintValidatorContext context) {\n-\n         boolean isValid;\n \n         if (object == null) {"},{"sha":"d56bc9ce2121e835b8ca08e33115d0e7e9957f82","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/ConnInstanceValidator.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FConnInstanceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FConnInstanceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FConnInstanceValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,24 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.util.URIUtil;\n \n-public class ConnInstanceValidator extends AbstractValidator implements\n-        ConstraintValidator<ConnInstanceCheck, ConnInstance> {\n-\n-    private static final String[] ALLOWED_SCHEMES = {\"file\", \"connid\", \"connids\"};\n-\n-    @Override\n-    public void initialize(final ConnInstanceCheck constraintAnnotation) {\n-    }\n+public class ConnInstanceValidator extends AbstractValidator<ConnInstanceCheck, ConnInstance> {\n \n     @Override\n     public boolean isValid(final ConnInstance connInstance, final ConstraintValidatorContext context) {\n         boolean isValid = true;\n+\n         try {\n             URIUtil.buildForConnId(connInstance.getLocation());\n         } catch (Exception e) {"},{"sha":"eed7add670527f63f15a7735247a6efe5ea32e33","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/ExternalResourceValidator.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.types.EntityViolationType;\n@@ -27,12 +26,7 @@\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.propagation.PropagationActions;\n \n-public class ExternalResourceValidator extends AbstractValidator implements\n-        ConstraintValidator<ExternalResourceCheck, ExternalResource> {\n-\n-    @Override\n-    public void initialize(final ExternalResourceCheck constraintAnnotation) {\n-    }\n+public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n     private boolean isValid(final AbstractMappingItem item, final ConstraintValidatorContext context) {\n         if (StringUtils.isBlank(item.getExtAttrName())) {\n@@ -104,6 +98,13 @@ private boolean isValid(final AbstractMapping mapping, final ConstraintValidator\n     public boolean isValid(final ExternalResource resource, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n+        if (!NAME_PATTERN.matcher(resource.getName()).matches()) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid Resource name\")).\n+                    addNode(\"name\").addConstraintViolation();\n+            return false;\n+        }\n+\n         if (StringUtils.isNotBlank(resource.getPropagationActionsClassName())) {\n             Class<?> actionsClass = null;\n             boolean isAssignable = false;"},{"sha":"935c02ca5767071dbdedb622d6641fc39538907b","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/NotificationValidator.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,22 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n \n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.Notification;\n \n-public class NotificationValidator extends AbstractValidator implements\n-        ConstraintValidator<NotificationCheck, Notification> {\n-\n-    @Override\n-    public void initialize(final NotificationCheck constraintAnnotation) {\n-    }\n+public class NotificationValidator extends AbstractValidator<NotificationCheck, Notification> {\n \n     @Override\n     public boolean isValid(final Notification value, final ConstraintValidatorContext context) {\n-\n         context.disableDefaultConstraintViolation();\n \n         boolean isValid = true;"},{"sha":"fd080d394cdac17409fdf603c4857e606342462c","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.types.AccountPolicySpec;\n import org.apache.syncope.common.types.EntityViolationType;\n@@ -31,15 +30,11 @@\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class PolicyValidator extends AbstractValidator implements ConstraintValidator<PolicyCheck, Policy> {\n+public class PolicyValidator extends AbstractValidator<PolicyCheck, Policy> {\n \n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    @Override\n-    public void initialize(final PolicyCheck constraintAnnotation) {\n-    }\n-\n     @Override\n     public boolean isValid(final Policy object, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();"},{"sha":"2f18e9e71b0d43aa65f6a70aaa11b2f7cf231afd","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/PropagationTaskValidator.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -20,24 +20,17 @@\n \n import java.util.List;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n \n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n \n-public class PropagationTaskValidator extends AbstractValidator implements\n-        ConstraintValidator<PropagationTaskCheck, PropagationTask> {\n-\n-    @Override\n-    public void initialize(final PropagationTaskCheck constraintAnnotation) {\n-    }\n+public class PropagationTaskValidator extends AbstractValidator<PropagationTaskCheck, PropagationTask> {\n \n     @Override\n     public boolean isValid(final PropagationTask task, final ConstraintValidatorContext context) {\n-\n         boolean isValid;\n \n         if (task == null) {"},{"sha":"e2de4e17529098c7172a4551d935c48627188d34","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/ReportValidator.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -22,24 +22,18 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n \n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.quartz.CronExpression;\n \n-public class ReportValidator extends AbstractValidator implements ConstraintValidator<ReportCheck, Report> {\n-\n-    @Override\n-    public void initialize(final ReportCheck constraintAnnotation) {\n-    }\n+public class ReportValidator extends AbstractValidator<ReportCheck, Report> {\n \n     @Override\n     @SuppressWarnings(\"ResultOfObjectAllocationIgnored\")\n     public boolean isValid(final Report object, final ConstraintValidatorContext context) {\n-\n         boolean isValid = true;\n \n         if (object.getCronExpression() != null) {"},{"sha":"7374fd69428fd3b46faf49f3dd4c4c85df63f0e1","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchedTaskValidator.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -20,24 +20,18 @@\n \n import java.text.ParseException;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n \n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.quartz.CronExpression;\n import org.quartz.Job;\n \n-public class SchedTaskValidator extends AbstractValidator implements ConstraintValidator<SchedTaskCheck, SchedTask> {\n-\n-    @Override\n-    public void initialize(final SchedTaskCheck constraintAnnotation) {\n-    }\n+public class SchedTaskValidator extends AbstractValidator<SchedTaskCheck, SchedTask> {\n \n     @Override\n     public boolean isValid(final SchedTask object, final ConstraintValidatorContext context) {\n-\n-        boolean isValid = true;\n+        boolean isValid;\n \n         Class<?> jobClass = null;\n         try {"},{"sha":"5ae70e1471ee2edad019465b06f35179148230c2","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchemaNameCheck.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaNameCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaNameCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaNameCheck.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -29,9 +29,9 @@\n \n @Target( { ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = USchemaValidator.class)\n+@Constraint(validatedBy = SchemaNameValidator.class)\n @Documented\n-public @interface USchemaCheck {\n+public @interface SchemaNameCheck {\n \n     String message() default \"{org.apache.syncope.core.validation.schema}\";\n ","previous_filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/USchemaCheck.java"},{"sha":"59913c2764cc2db279568d7b58b3067047d63819","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchemaNameValidator.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaNameValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaNameValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaNameValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.validation.entity;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.lang3.ClassUtils;\n+\n+import org.apache.syncope.common.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.beans.membership.MDerSchema;\n+import org.apache.syncope.core.persistence.beans.membership.MSchema;\n+import org.apache.syncope.core.persistence.beans.membership.MVirSchema;\n+import org.apache.syncope.core.persistence.beans.membership.Membership;\n+import org.apache.syncope.core.persistence.beans.role.RDerSchema;\n+import org.apache.syncope.core.persistence.beans.role.RSchema;\n+import org.apache.syncope.core.persistence.beans.role.RVirSchema;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n+import org.apache.syncope.core.persistence.beans.user.USchema;\n+import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n+\n+public class SchemaNameValidator extends AbstractValidator<SchemaNameCheck, Object> {\n+\n+    private static final List<String> UNALLOWED_USCHEMA_NAMES = new ArrayList<String>();\n+\n+    private static final List<String> UNALLOWED_MSCHEMA_NAMES = new ArrayList<String>();\n+\n+    private static final List<String> UNALLOWED_RSCHEMA_NAMES = new ArrayList<String>();\n+\n+    static {\n+        initUnallowedSchemaNames(SyncopeUser.class, UNALLOWED_USCHEMA_NAMES);\n+        initUnallowedSchemaNames(Membership.class, UNALLOWED_MSCHEMA_NAMES);\n+        initUnallowedSchemaNames(SyncopeRole.class, UNALLOWED_RSCHEMA_NAMES);\n+    }\n+\n+    private static void initUnallowedSchemaNames(final Class<?> entityClass, final List<String> names) {\n+        List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n+        classes.add(SyncopeUser.class);\n+        for (Class<?> clazz : classes) {\n+            for (Field field : clazz.getDeclaredFields()) {\n+                if (!Collection.class.isAssignableFrom(field.getType())\n+                        && !Map.class.isAssignableFrom(field.getType())) {\n+\n+                    names.add(field.getName());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isValid(final Object object, final ConstraintValidatorContext context) {\n+        final String schemaName;\n+        final List<String> unallowedNames;\n+\n+        if (object instanceof USchema) {\n+            schemaName = ((USchema) object).getName();\n+            unallowedNames = UNALLOWED_USCHEMA_NAMES;\n+        } else if (object instanceof UDerSchema) {\n+            schemaName = ((UDerSchema) object).getName();\n+            unallowedNames = UNALLOWED_USCHEMA_NAMES;\n+        } else if (object instanceof UVirSchema) {\n+            schemaName = ((UVirSchema) object).getName();\n+            unallowedNames = UNALLOWED_USCHEMA_NAMES;\n+        } else if (object instanceof MSchema) {\n+            schemaName = ((MSchema) object).getName();\n+            unallowedNames = UNALLOWED_MSCHEMA_NAMES;\n+        } else if (object instanceof MDerSchema) {\n+            schemaName = ((MDerSchema) object).getName();\n+            unallowedNames = UNALLOWED_MSCHEMA_NAMES;\n+        } else if (object instanceof MVirSchema) {\n+            schemaName = ((MVirSchema) object).getName();\n+            unallowedNames = UNALLOWED_MSCHEMA_NAMES;\n+        } else if (object instanceof RSchema) {\n+            schemaName = ((RSchema) object).getName();\n+            unallowedNames = UNALLOWED_RSCHEMA_NAMES;\n+        } else if (object instanceof RDerSchema) {\n+            schemaName = ((RDerSchema) object).getName();\n+            unallowedNames = UNALLOWED_RSCHEMA_NAMES;\n+        } else if (object instanceof RVirSchema) {\n+            schemaName = ((RVirSchema) object).getName();\n+            unallowedNames = UNALLOWED_RSCHEMA_NAMES;\n+        } else {\n+            schemaName = null;\n+            unallowedNames = Collections.emptyList();\n+        }\n+\n+        boolean isValid = NAME_PATTERN.matcher(schemaName).matches();\n+        if (!isValid) {\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid Schema name\")).\n+                    addNode(\"name\").addConstraintViolation();\n+        } else if (unallowedNames.contains(schemaName)) {\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Schema name not allowed: \" + schemaName)).\n+                    addNode(\"name\").addConstraintViolation();\n+\n+            return false;\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"a962ae6f2cd7f95a6019571824bdb0c070501341","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchemaValidator.java","status":"modified","additions":20,"deletions":43,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,58 +18,35 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.lang3.StringUtils;\n \n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n \n-public class SchemaValidator extends AbstractValidator implements ConstraintValidator<SchemaCheck, AbstractSchema> {\n+public class SchemaValidator extends AbstractValidator<SchemaCheck, AbstractSchema> {\n \n     @Override\n-    public void initialize(final SchemaCheck constraintAnnotation) {\n-    }\n-\n-    @Override\n-    public boolean isValid(final AbstractSchema object, final ConstraintValidatorContext context) {\n-\n-        boolean isValid = false;\n-        EntityViolationType violation = null;\n-\n-        try {\n-            if (object == null) {\n-                isValid = true;\n-            } else {\n-                isValid = object.getType() == null || !object.getType().equals(AttributeSchemaType.Enum)\n-                        || object.getEnumerationValues() != null;\n-\n-                if (!isValid) {\n-                    violation = EntityViolationType.InvalidSchemaTypeSpecification;\n-\n-                    throw new Exception(object + \" miss enumeration values\");\n-                }\n-\n-                isValid = object.isMultivalue()\n-                        ? !object.isUniqueConstraint()\n-                        : true;\n-\n-                if (!isValid) {\n-                    violation = EntityViolationType.MultivalueAndUniqueConstraint;\n-\n-                    throw new Exception(object + \" cannot be multivalue and have unique constraint at the same time\");\n-                }\n-            }\n-\n-            return isValid;\n-        } catch (Exception e) {\n-            LOG.error(\"Error saving schema\", e);\n-\n+    public boolean isValid(final AbstractSchema schema, final ConstraintValidatorContext context) {\n+        boolean isValid = schema.getType() != AttributeSchemaType.Enum\n+                || StringUtils.isNotBlank(schema.getEnumerationValues());\n+        if (!isValid) {\n             context.disableDefaultConstraintViolation();\n-            context.buildConstraintViolationWithTemplate(getTemplate(violation, e.getMessage())).\n-                    addNode(object.getClass().getSimpleName()).addConstraintViolation();\n-\n-            return false;\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidSchemaEnum, \"Enumeration values missing\")).\n+                    addNode(\"enumerationValues\").addConstraintViolation();\n+        } else {\n+            isValid = !schema.isMultivalue() || !schema.isUniqueConstraint();\n+            if (!isValid) {\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidSchemaMultivalueUnique,\n+                        \"Cannot contemporary be multivalue and have unique constraint\")).\n+                        addNode(\"multiValue\").addConstraintViolation();\n+            }\n         }\n+\n+        return isValid;\n     }\n }"},{"sha":"2eb01492d3b17ae88b750d85a00616542db94d12","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncTaskValidator.java","status":"modified","additions":26,"deletions":38,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.sync.SyncActions;\n \n-public class SyncTaskValidator extends AbstractValidator implements ConstraintValidator<SyncTaskCheck, SyncTask> {\n+public class SyncTaskValidator extends AbstractValidator<SyncTaskCheck, SyncTask> {\n \n     private final SchedTaskValidator schedV;\n \n@@ -36,50 +35,39 @@ public SyncTaskValidator() {\n         schedV = new SchedTaskValidator();\n     }\n \n-    @Override\n-    public void initialize(final SyncTaskCheck constraintAnnotation) {\n-    }\n-\n     @Override\n     public boolean isValid(final SyncTask object, final ConstraintValidatorContext context) {\n+        boolean isValid = schedV.isValid(object, context);\n \n-        boolean isValid;\n+        if (isValid) {\n+            isValid = object.getResource() != null;\n+            if (!isValid) {\n+                LOG.error(\"Resource is null\");\n \n-        if (object == null) {\n-            isValid = true;\n-        } else {\n-            isValid = schedV.isValid(object, context);\n-\n-            if (isValid) {\n-                isValid = object.getResource() != null;\n-                if (!isValid) {\n-                    LOG.error(\"Resource is null\");\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidSyncTask, \"Resource cannot be null\")).\n+                        addNode(\"resource\").addConstraintViolation();\n+            }\n \n-                    context.disableDefaultConstraintViolation();\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidSyncTask, \"Resource cannot be null\")).\n-                            addNode(\"resource\").addConstraintViolation();\n+            if (StringUtils.isNotBlank(object.getActionsClassName())) {\n+                Class<?> actionsClass = null;\n+                boolean isAssignable = false;\n+                try {\n+                    actionsClass = Class.forName(object.getActionsClassName());\n+                    isAssignable = SyncActions.class.isAssignableFrom(actionsClass);\n+                } catch (Exception e) {\n+                    LOG.error(\"Invalid SyncActions specified\", e);\n+                    isValid = false;\n                 }\n \n-                if (StringUtils.isNotBlank(object.getActionsClassName())) {\n-                    Class<?> actionsClass = null;\n-                    boolean isAssignable = false;\n-                    try {\n-                        actionsClass = Class.forName(object.getActionsClassName());\n-                        isAssignable = SyncActions.class.isAssignableFrom(actionsClass);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Invalid SyncActions specified\", e);\n-                        isValid = false;\n-                    }\n-\n-                    if (actionsClass == null || !isAssignable) {\n-                        isValid = false;\n+                if (actionsClass == null || !isAssignable) {\n+                    isValid = false;\n \n-                        context.disableDefaultConstraintViolation();\n-                        context.buildConstraintViolationWithTemplate(\n-                                getTemplate(EntityViolationType.InvalidSyncTask, \"Invalid class name\")).\n-                                addNode(\"actionsClassName\").addConstraintViolation();\n-                    }\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidSyncTask, \"Invalid class name\")).\n+                            addNode(\"actionsClassName\").addConstraintViolation();\n                 }\n             }\n         }"},{"sha":"8375c9467b7221feb441fb65457e08bd3504db06","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeConfCheck.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeConfCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeConfCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeConfCheck.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = SyncopeConfValidator.class)\n+@Documented\n+public @interface SyncopeConfCheck {\n+\n+    String message() default \"{org.apache.syncope.core.validation.syncopeConf}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"06b67186878b7aa929689b8826495cd23c9e0743","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeConfValidator.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeConfValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeConfValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeConfValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.beans.SyncopeConf;\n+\n+public class SyncopeConfValidator extends AbstractValidator<SyncopeConfCheck, SyncopeConf> {\n+\n+    @Override\n+    public boolean isValid(final SyncopeConf syncopeConf, final ConstraintValidatorContext context) {\n+        boolean isValid = true;\n+\n+        if (!NAME_PATTERN.matcher(syncopeConf.getKey()).matches()) {\n+            isValid = false;\n+\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid SyncopeConf key\")).\n+                    addNode(\"name\").addConstraintViolation();\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"77ac148c0001dbc9cae17e066d16c0ef208529aa","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeRoleValidator.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeRoleValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -18,17 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.validation.entity;\n \n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n \n-public class SyncopeRoleValidator extends AbstractValidator implements\n-        ConstraintValidator<SyncopeRoleCheck, SyncopeRole> {\n-\n-    @Override\n-    public void initialize(final SyncopeRoleCheck constraintAnnotation) {\n-    }\n+public class SyncopeRoleValidator extends AbstractValidator<SyncopeRoleCheck, SyncopeRole> {\n \n     @Override\n     public boolean isValid(final SyncopeRole object, final ConstraintValidatorContext context) {"},{"sha":"e471f0ea95217ea4e3f5849ac0e55a0ab9608bc7","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.types.AccountPolicySpec;\n import org.apache.syncope.common.types.EntityViolationType;\n@@ -37,8 +36,7 @@\n import org.apache.syncope.core.policy.PolicyEvaluator;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class SyncopeUserValidator extends AbstractValidator implements\n-        ConstraintValidator<SyncopeUserCheck, SyncopeUser> {\n+public class SyncopeUserValidator extends AbstractValidator<SyncopeUserCheck, SyncopeUser> {\n \n     @Autowired\n     private PolicyDAO policyDAO;\n@@ -52,10 +50,6 @@ public class SyncopeUserValidator extends AbstractValidator implements\n     @Autowired\n     private AccountPolicyEnforcer apEnforcer;\n \n-    @Override\n-    public void initialize(final SyncopeUserCheck constraintAnnotation) {\n-    }\n-\n     @Override\n     public boolean isValid(final SyncopeUser object, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();"},{"sha":"4177b96dc9fefefb7b6a0c090ae2f1642855a51d","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/USchemaValidator.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d40b7bf12cd0592479eeab46654a7caef370c7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d40b7bf12cd0592479eeab46654a7caef370c7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaValidator.java?ref=65d40b7bf12cd0592479eeab46654a7caef370c7","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.validation.entity;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import javax.persistence.Transient;\n-import javax.validation.ConstraintValidator;\n-import javax.validation.ConstraintValidatorContext;\n-\n-import org.apache.syncope.common.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n-import org.apache.syncope.core.persistence.beans.user.USchema;\n-import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n-\n-public class USchemaValidator extends AbstractValidator implements ConstraintValidator<USchemaCheck, Object> {\n-\n-    @Transient\n-    private static List<String> PERMITTED_USCHEMA_NAMES = Arrays.asList(new String[]{\"failedLogins\", \"username\",\n-                \"password\", \"lastLoginDate\", \"creationDate\", \"changePwdDate\"});\n-\n-    @Override\n-    public void initialize(final USchemaCheck constraintAnnotation) {\n-    }\n-\n-    @Override\n-    public boolean isValid(final Object object, final ConstraintValidatorContext context) {\n-\n-        EntityViolationType violation = null;\n-\n-        try {\n-            if (object != null) {\n-                final String schemaName;\n-\n-                if (object instanceof USchema) {\n-                    schemaName = ((USchema) object).getName();\n-                    violation = EntityViolationType.InvalidUSchema;\n-                } else if (object instanceof UDerSchema) {\n-                    schemaName = ((UDerSchema) object).getName();\n-                    violation = EntityViolationType.InvalidUDerSchema;\n-                } else if (object instanceof UVirSchema) {\n-                    schemaName = ((UVirSchema) object).getName();\n-                    violation = EntityViolationType.InvalidUVirSchema;\n-                } else {\n-                    schemaName = null;\n-                }\n-\n-                if (PERMITTED_USCHEMA_NAMES.contains(schemaName)) {\n-                    throw new Exception(\"Schema name not permitted\");\n-                }\n-            }\n-\n-            return true;\n-        } catch (Exception e) {\n-            LOG.error(\"Error saving schema\", e);\n-\n-            context.disableDefaultConstraintViolation();\n-\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(violation, e.getMessage())).\n-                    addNode(object.getClass().getSimpleName()).addConstraintViolation();\n-\n-            return false;\n-        }\n-    }\n-}"},{"sha":"74dd042c7c0dbb398ad82133484e7e18fb814159","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.VirSchemaTO;\n@@ -110,15 +111,13 @@ private <T extends AbstractDerSchema> T populate(final T derSchema, final DerSch\n         SyncopeClientCompositeException scce =\n                 new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n-        if (derSchemaTO.getExpression() == null) {\n-            SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValuesMissing);\n+        if (StringUtils.isBlank(derSchemaTO.getExpression())) {\n+            SyncopeClientException requiredValuesMissing =\n+                    new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n             requiredValuesMissing.addElement(\"expression\");\n \n             scce.addException(requiredValuesMissing);\n-        }\n-\n-        if (!jexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n+        } else if (!jexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n             SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n             invalidMandatoryCondition.addElement(derSchemaTO.getExpression());"},{"sha":"54aeb2fbc5d7164983db3eedc2d20b146b508381","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -76,7 +76,6 @@ public void read() {\n \n     @Test\n     public void save() throws ClassNotFoundException {\n-\n         SyncopeUser user = userDAO.find(1L);\n \n         USchema emailSchema = userSchemaDAO.find(\"email\", USchema.class);\n@@ -118,7 +117,6 @@ public void save() throws ClassNotFoundException {\n \n     @Test\n     public void checkForEnumType() throws ClassNotFoundException {\n-\n         SyncopeUser user = userDAO.find(1L);\n \n         USchema gender = userSchemaDAO.find(\"gender\", USchema.class);"},{"sha":"735b114050a78a715564b788ee31f7d7815d119c","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ConfTest.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConfTest.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import org.apache.syncope.common.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.beans.SyncopeConf;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class ConfTest extends AbstractDAOTest {\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        SyncopeConf conf = new SyncopeConf();\n+        conf.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            confDAO.save(conf);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+        }\n+    }\n+}"},{"sha":"e3f6e7df4f9f12afe425643aab30268a0019e537","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -21,11 +21,15 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.List;\n \n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -71,4 +75,17 @@ public void delete() {\n         UDerSchema actual = derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        UDerSchema schema = new UDerSchema();\n+        schema.setName(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            derSchemaDAO.save(schema);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+        }\n+    }\n }"},{"sha":"cd6f7357bcfa61b9a822b4eefc54ff906499d4da","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -23,11 +23,13 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n@@ -248,4 +250,17 @@ public void delete() {\n         ExternalResource actual = resourceDAO.find(\"ws-target-resource-2\");\n         assertNull(actual);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        ExternalResource resource = new ExternalResource();\n+        resource.setName(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            resourceDAO.save(resource);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+        }\n+    }\n }"},{"sha":"0d515dfc0e8ceb664a57eca2a98cc9742c1cda7a","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -22,11 +22,14 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.List;\n \n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.role.RAttr;\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n@@ -142,4 +145,17 @@ public void delete() {\n         USchema actual = schemaDAO.find(\"fullname\", USchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        USchema schema = new USchema();\n+        schema.setName(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            schemaDAO.save(schema);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+        }\n+    }\n }"},{"sha":"08268f20ae9f68a79431cdf5adc5452918e2862e","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/VirSchemaTest.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -22,10 +22,13 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.List;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -71,4 +74,17 @@ public void delete() {\n         UVirSchema actual = virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        UVirSchema schema = new UVirSchema();\n+        schema.setName(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            virSchemaDAO.save(schema);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidName));\n+        }\n+    }\n }"},{"sha":"5571939a3747bfb898c42630cba92666f17b3191","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -22,6 +22,7 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -36,7 +37,10 @@\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.to.ConfigurationTO;\n+import org.apache.syncope.common.types.EntityViolationType;\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -130,4 +134,21 @@ public void dbExport() throws IOException {\n         assertFalse(configExport.isEmpty());\n         assertTrue(configExport.length() > 1000);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        ConfigurationTO configurationTO = new ConfigurationTO();\n+        configurationTO.setKey(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            configurationService.create(configurationTO);\n+            fail();\n+        } catch (SyncopeClientCompositeException scce) {\n+            SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidSyncopeConf);\n+\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n }"},{"sha":"81b74534146a0d60b3f605f091ff8f659548c205","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -29,9 +29,11 @@\n \n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -71,8 +73,7 @@ public void create() {\n \n     @Test\n     public void delete() {\n-        DerSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED,\n-                \"rderiveddata\");\n+        DerSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n         assertNotNull(schema);\n \n         schemaService.delete(AttributableType.ROLE, SchemaType.DERIVED,\n@@ -137,4 +138,22 @@ public void issueSYNCOPE323() {\n             assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        DerSchemaTO schema = new DerSchemaTO();\n+        schema.setName(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+        schema.setExpression(\"derived_sx + '_' + derived_dx\");\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.DERIVED, schema);\n+            fail();\n+        } catch (SyncopeClientCompositeException scce) {\n+            SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRDerSchema);\n+\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n }"},{"sha":"b51bb14c5be91234757306abdeffbc5bd97a8800","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n@@ -486,7 +487,22 @@ public void issueSYNCOPE368() {\n         assertEquals(2, resourceTO.getRmapping().getItems().size());\n     }\n \n-    private ResourceTO buildResourceTO(String resourceName) {\n+    @Test\n+    public void issueSYNCOPE418() {\n+        try {\n+            resourceService.create(\n+                    buildResourceTO(\"http://schemas.examples.org/security/authorization/organizationUnit\"));\n+            fail();\n+        } catch (SyncopeClientCompositeException scce) {\n+            SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidExternalResource);\n+\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+\n+    private ResourceTO buildResourceTO(final String resourceName) {\n         ResourceTO resourceTO = new ResourceTO();\n \n         resourceTO.setName(resourceName);"},{"sha":"d13eae225dc10b33fd89f1f715ea478ab998545e","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -73,7 +73,7 @@ public void createWithNotPermittedName() {\n \n             assertNotNull(sce.getElements());\n             assertEquals(1, sce.getElements().size());\n-            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidUSchema.name()));\n+            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n \n@@ -92,7 +92,7 @@ public void createREnumWithoutEnumeration() {\n             assertNotNull(sce.getElements());\n             assertEquals(1, sce.getElements().size());\n             assertTrue(sce.getElements().iterator().next()\n-                    .contains(EntityViolationType.InvalidSchemaTypeSpecification.name()));\n+                    .contains(EntityViolationType.InvalidSchemaEnum.name()));\n         }\n     }\n \n@@ -111,7 +111,7 @@ public void createUEnumWithoutEnumeration() {\n             assertNotNull(sce.getElements());\n             assertEquals(1, sce.getElements().size());\n             assertTrue(sce.getElements().iterator().next()\n-                    .contains(EntityViolationType.InvalidSchemaTypeSpecification.name()));\n+                    .contains(EntityViolationType.InvalidSchemaEnum.name()));\n         }\n     }\n \n@@ -266,6 +266,23 @@ public void issueSYNCOPE323() {\n         }\n     }\n \n+    @Test\n+    public void issueSYNCOPE418() {\n+        SchemaTO schema = buildSchemaTO(\"http://schemas.examples.org/security/authorization/organizationUnit\",\n+                AttributeSchemaType.Double);\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.NORMAL, schema);\n+            fail();\n+        } catch (SyncopeClientCompositeException scce) {\n+            SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n+\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n+\n     private SchemaTO buildSchemaTO(final String name, final AttributeSchemaType type) {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(name + getUUIDString());"},{"sha":"110a66faa1f7909127c76ba37c8e94cfb82107ea","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=f6bbf957ab7f69d35785ee7dd4a3e3a6ccb42be9","patch":"@@ -29,9 +29,11 @@\n \n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -108,4 +110,21 @@ public void issueSYNCOPE323() {\n             assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE418() {\n+        VirSchemaTO schema = new VirSchemaTO();\n+        schema.setName(\"http://schemas.examples.org/security/authorization/organizationUnit\");\n+\n+        try {\n+            createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, schema);\n+            fail();\n+        } catch (SyncopeClientCompositeException scce) {\n+            SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidMVirSchema);\n+\n+            assertNotNull(sce.getElements());\n+            assertEquals(1, sce.getElements().size());\n+            assertTrue(sce.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n+        }\n+    }\n }"}]}