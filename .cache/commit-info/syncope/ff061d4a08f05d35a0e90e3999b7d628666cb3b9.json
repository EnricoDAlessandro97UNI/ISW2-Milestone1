{"sha":"ff061d4a08f05d35a0e90e3999b7d628666cb3b9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZmMDYxZDRhMDhmMDVkMzVhMGU5MGUzOTk5YjdkNjI4NjY2Y2IzYjk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-11T14:09:24Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-11T14:09:24Z"},"message":"Fixing IT tests on Windows\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09c0cdb2e0fe3e85d31d4ca25c3d0fdffe71694c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/09c0cdb2e0fe3e85d31d4ca25c3d0fdffe71694c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ff061d4a08f05d35a0e90e3999b7d628666cb3b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff061d4a08f05d35a0e90e3999b7d628666cb3b9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ff061d4a08f05d35a0e90e3999b7d628666cb3b9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/comments","author":null,"committer":null,"parents":[{"sha":"e445584a2ce181d0b2e8c54b0dfd3b23de5cfeb9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e445584a2ce181d0b2e8c54b0dfd3b23de5cfeb9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e445584a2ce181d0b2e8c54b0dfd3b23de5cfeb9"}],"stats":{"total":61,"additions":48,"deletions":13},"files":[{"sha":"37ffd482c965e5cedd9b43c7ddde14b1f0acb38f","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=ff061d4a08f05d35a0e90e3999b7d628666cb3b9","patch":"@@ -40,6 +40,9 @@ public enum SyncopeClientExceptionType {\n     InvalidSyncopeRole(\n     \"Syncope.InvalidSyncopeRole\",\n     \"Syncope.InvalidSyncopeRole.reason\"),\n+    InvalidReportExec(\n+    \"Syncope.InvalidReportExec\",\n+    \"Syncope.InvalidReportExec.reason\"),\n     InvalidRoles(\n     \"Syncope.InvalidRoles\",\n     \"Syncope.InvalidRoles.name\"),"},{"sha":"e053941df680e65c089f9218f972279ed1b9beb3","filename":"core/src/main/java/org/syncope/core/rest/controller/ReportController.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=ff061d4a08f05d35a0e90e3999b7d628666cb3b9","patch":"@@ -286,6 +286,20 @@ public void exportExecutionResult(\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n+        if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus())\n+                || reportExec.getExecResult() == null) {\n+\n+            SyncopeClientCompositeErrorException sccee =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidReportExec);\n+            sce.addElement(reportExec.getExecResult() == null\n+                    ? \"No report data produced\"\n+                    : \"Report did not run successfully\");\n+\n+            throw sccee;\n+        }\n \n         ReportExecExportFormat format =\n                 fmt == null ? ReportExecExportFormat.XML : fmt;"},{"sha":"5f950fba32cf7219004acd76d11a351fabab0f16","filename":"core/src/test/java/org/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":31,"deletions":12,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=ff061d4a08f05d35a0e90e3999b7d628666cb3b9","patch":"@@ -17,7 +17,9 @@\n \n import java.io.IOException;\n import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import org.apache.http.HttpResponse;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.util.EntityUtils;\n@@ -66,7 +68,7 @@ public void listExecutions() {\n     @Test\n     public void read() {\n         ReportTO reportTO = restTemplate.getForObject(\n-                BASE_URL + \"report/read/{taskId}\", ReportTO.class, 1);\n+                BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n \n         assertNotNull(reportTO);\n         assertNotNull(reportTO.getExecutions());\n@@ -76,7 +78,7 @@ public void read() {\n     @Test\n     public void readExecution() {\n         ReportExecTO reportExecTO = restTemplate.getForObject(\n-                BASE_URL + \"report/execution/read/{taskId}\",\n+                BASE_URL + \"report/execution/read/{reportId}\",\n                 ReportExecTO.class, 1);\n         assertNotNull(reportExecTO);\n     }\n@@ -147,27 +149,44 @@ public void executeAndExport()\n             throws IOException {\n \n         ReportTO reportTO = restTemplate.getForObject(\n-                BASE_URL + \"report/read/{taskId}\", ReportTO.class, 1);\n+                BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n         assertNotNull(reportTO);\n-        final int execs = reportTO.getExecutions().size();\n+\n+        Set<Long> preExecIds = new HashSet<Long>();\n+        for (ReportExecTO exec : reportTO.getExecutions()) {\n+            preExecIds.add(exec.getId());\n+        }\n \n         ReportExecTO execution = restTemplate.postForObject(\n                 BASE_URL + \"report/execute/{reportId}\",\n                 null, ReportExecTO.class, reportTO.getId());\n         assertNotNull(execution);\n \n-        int newExecs = execs;\n-        while (newExecs == execs) {\n+        int i = 0;\n+        int maxit = 20;\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n             reportTO = restTemplate.getForObject(\n-                    BASE_URL + \"report/read/{taskId}\", ReportTO.class, 1);\n-            newExecs = reportTO.getExecutions().size();\n+                    BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+\n+            i++;\n+        } while (preExecIds.size() == reportTO.getExecutions().size()\n+                && i < maxit);\n+\n+        Set<Long> postExecIds = new HashSet<Long>();\n+        for (ReportExecTO exec : reportTO.getExecutions()) {\n+            postExecIds.add(exec.getId());\n         }\n-        assertEquals(newExecs, execs + 1);\n \n-        long newExec = reportTO.getExecutions().get(newExecs - 1).getId();\n+        postExecIds.removeAll(preExecIds);\n+        assertEquals(1, postExecIds.size());\n \n-        HttpGet getMethod = new HttpGet(\n-                BASE_URL + \"report/execution/export/\" + newExec);\n+        HttpGet getMethod = new HttpGet(BASE_URL + \"report/execution/export/\"\n+                + postExecIds.iterator().next());\n         HttpResponse response =\n                 ((PreemptiveAuthHttpRequestFactory) restTemplate.\n                 getRequestFactory()).getHttpClient().execute(getMethod);"},{"sha":"82c94e2a53da6e103743f694c148d9c104d6970f","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff061d4a08f05d35a0e90e3999b7d628666cb3b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=ff061d4a08f05d35a0e90e3999b7d628666cb3b9","patch":"@@ -319,7 +319,6 @@ public void sync() {\n             assertNotNull(taskTO.getExecutions());\n \n             i++;\n-\n         } while (preSyncSize == taskTO.getExecutions().size() && i < maxit);\n \n         // check for sync policy"}]}