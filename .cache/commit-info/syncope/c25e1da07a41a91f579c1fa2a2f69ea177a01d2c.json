{"sha":"c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMyNWUxZGEwN2E0MWE5MWY1NzljMWZhMmEyZjY5ZWExNzdhMDFkMmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-03T14:59:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-03T14:59:43Z"},"message":"[SYNCOPE-882] Initial commit: support in common, core and cli with new log4j MemoryAppend which retains in memory the last N statements","tree":{"sha":"328662c0feef17e6025a4254850f2a2189b0d43f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/328662c0feef17e6025a4254850f2a2189b0d43f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1ab7a5148c38e00ec69f585729d8fd4b6a278b60","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ab7a5148c38e00ec69f585729d8fd4b6a278b60","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1ab7a5148c38e00ec69f585729d8fd4b6a278b60"}],"stats":{"total":863,"additions":703,"deletions":160},"files":[{"sha":"6631dea34460355e9fdb3e689d5b239798b68064","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.cli.commands;\n \n import java.util.Arrays;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -93,7 +92,7 @@ protected void printConfiguration(final Set<ConnConfProperty> configurationPrope\n     protected void printDetails(final String title, final Map<String, String> details) {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(title).header(\"detail\").header(\"value\");\n         for (final Map.Entry<String, String> entrySet : details.entrySet()) {\n-            tableBuilder.rowValues(new LinkedList<>(Arrays.asList(entrySet.getKey(), entrySet.getValue())));\n+            tableBuilder.rowValues(Arrays.asList(entrySet.getKey(), entrySet.getValue()));\n         }\n         tableBuilder.build().print();\n     }"},{"sha":"af620e21db865df44d9b519e7dbf3b8b1decb59e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationGet.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.cli.commands.configuration;\n \n-import java.util.LinkedList;\n import org.apache.syncope.client.cli.Input;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -38,7 +37,7 @@ public ConfigurationGet(final Input input) {\n     public void get() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                configurationResultManager.fromGet(new LinkedList<>(configurationSyncopeOperations.list()));\n+                configurationResultManager.fromGet(configurationSyncopeOperations.list());\n             } catch (final Exception ex) {\n                 LOG.error(\"Error getting configuration\", ex);\n                 configurationResultManager.genericError(ex.getMessage());"},{"sha":"ac689777b10cb6891d0b80338b5e5c134c7d10b8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationRead.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.configuration;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -40,7 +41,7 @@ public ConfigurationRead(final Input input) {\n \n     public void read() {\n         if (input.parameterNumber() >= 1) {\n-            final LinkedList<AttrTO> attrList = new LinkedList<>();\n+            final List<AttrTO> attrList = new ArrayList<>();\n             boolean failed = false;\n             for (final String parameter : input.getParameters()) {\n                 try {"},{"sha":"696d2cb9bd2270a7fa6cff74427b77eba80b40ac","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationResultManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -19,32 +19,32 @@\n package org.apache.syncope.client.cli.commands.configuration;\n \n import java.util.Arrays;\n-import java.util.LinkedList;\n+import java.util.List;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.client.cli.view.Table;\n import org.apache.syncope.common.lib.to.AttrTO;\n \n public class ConfigurationResultManager extends CommonsResultManager {\n \n-    public void fromGet(final LinkedList<AttrTO> attrTOs) {\n+    public void fromGet(final List<AttrTO> attrTOs) {\n         fromCommandToView(\"syncope configuration\", attrTOs);\n     }\n \n-    public void fromRead(final LinkedList<AttrTO> attrTOs) {\n+    public void fromRead(final List<AttrTO> attrTOs) {\n         fromCommandToView(\"selected conf attributes\", attrTOs);\n     }\n \n-    public void fromUpdate(final LinkedList<AttrTO> attrTOs) {\n+    public void fromUpdate(final List<AttrTO> attrTOs) {\n         fromCommandToView(\"updated conf attributes\", attrTOs);\n     }\n \n-    private void fromCommandToView(final String title, final LinkedList<AttrTO> attrTOs) {\n+    private void fromCommandToView(final String title, final List<AttrTO> attrTOs) {\n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(title).header(\"attribute\").header(\"value\");\n         for (final AttrTO attrTO : attrTOs) {\n             String attrValue = attrTO.getValues().toString();\n             attrValue = attrValue.substring(0, attrValue.length() - 1);\n             attrValue = attrValue.substring(1, attrValue.length());\n-            tableBuilder.rowValues(new LinkedList<>(Arrays.asList(attrTO.getSchema(), attrValue)));\n+            tableBuilder.rowValues(Arrays.asList(attrTO.getSchema(), attrValue));\n         }\n         tableBuilder.build().print();\n     }"},{"sha":"cd3e2681772cd92559bf490071ca08376c172743","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationUpdate.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.configuration;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.cli.Input;\n@@ -42,7 +43,7 @@ public ConfigurationUpdate(final Input input) {\n \n     public void update() {\n         if (input.parameterNumber() >= 1) {\n-            LinkedList<AttrTO> attrList = new LinkedList<>();\n+            List<AttrTO> attrList = new ArrayList<>();\n             boolean failed = false;\n             for (String parameter : input.getParameters()) {\n                 Pair<String, String> pairParameter = Input.toPairParameter(parameter);"},{"sha":"916157159077404fb95361fc5425c5b75649943d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCommand.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -43,6 +43,12 @@ public void execute(final Input input) {\n             case LIST:\n                 new LoggerList(input).list();\n                 break;\n+            case LIST_MEMORY_APPENDERS:\n+                new LoggerListMemoryAppenders(input).list();\n+                break;\n+            case LAST_STATEMENTS:\n+                new LoggerLastStatements(input).read();\n+                break;\n             case READ:\n                 new LoggerRead(input).read();\n                 break;\n@@ -71,10 +77,12 @@ public String getHelpMessage() {\n         return loggerResultManager.commandHelpMessage(getClass());\n     }\n \n-    private enum LoggerOptions {\n+    public enum LoggerOptions {\n \n         HELP(\"--help\"),\n         DETAILS(\"--details\"),\n+        LIST_MEMORY_APPENDERS(\"--list-memory-appenders\"),\n+        LAST_STATEMENTS(\"--last-statements\"),\n         LIST(\"--list\"),\n         READ(\"--read\"),\n         UPDATE(\"--update\"),"},{"sha":"7c95633a7d7c8b29d64cbf0c4ad063b0f6430338","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCreate.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -44,7 +45,7 @@ public LoggerCreate(final Input input) {\n \n     public void create() {\n         if (input.parameterNumber() >= 1) {\n-            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            final List<LoggerTO> loggerTOs = new ArrayList<>();\n             boolean failed = false;\n             for (String parameter : input.getParameters()) {\n                 LoggerTO loggerTO = new LoggerTO();"},{"sha":"a14cf7b239b5c5f426ff15ff759986ea5b6588f0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDetails.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.collections4.map.LinkedMap;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n "},{"sha":"62fd2e13e2396a9b21d024e27c823cd9a1d3610f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerLastStatements.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerLastStatements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerLastStatements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerLastStatements.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import org.apache.syncope.client.cli.Input;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggerLastStatements extends AbstractLoggerCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerLastStatements.class);\n+\n+    private static final String READ_HELP_MESSAGE = \"logger --last-statements {APPENDER-NAME}\";\n+\n+    private final Input input;\n+\n+    public LoggerLastStatements(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.getParameters().length == 1) {\n+            try {\n+                loggerResultManager.fromGetLastLogStatements(\n+                        loggerSyncopeOperations.getLastLogStatements(input.getParameters()[0]));\n+            } catch (final Exception ex) {\n+                LOG.error(\"Error reading last statements\", ex);\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    loggerResultManager.notFoundError(\"Memory appender\", input.getParameters()[0]);\n+                } else {\n+                    loggerResultManager.genericError(ex.getMessage());\n+                }\n+            }\n+        } else {\n+            loggerResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"28bf679ef46c34d7b27dee4980e4b42b51a5e83e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerList.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.LinkedList;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.slf4j.Logger;\n@@ -39,7 +38,7 @@ public LoggerList(final Input input) {\n     public void list() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                loggerResultManager.fromList(new LinkedList<>(loggerSyncopeOperations.list()));\n+                loggerResultManager.fromList(loggerSyncopeOperations.list());\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error listing logger\", ex);\n                 loggerResultManager.genericError(ex.getMessage());"},{"sha":"e39b03a3c721c115fb59ca8665ae3fd16cb9a641","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerListMemoryAppenders.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerListMemoryAppenders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerListMemoryAppenders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerListMemoryAppenders.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggerListMemoryAppenders extends AbstractLoggerCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerListMemoryAppenders.class);\n+\n+    private static final String LIST_HELP_MESSAGE = \"logger --list-memory-appenders\";\n+\n+    private final Input input;\n+\n+    public LoggerListMemoryAppenders(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void list() {\n+        if (input.parameterNumber() == 0) {\n+            try {\n+                loggerResultManager.fromListMemoryAppenders(loggerSyncopeOperations.listMemoryAppenders());\n+            } catch (final SyncopeClientException ex) {\n+                LOG.error(\"Error listing memory appenders\", ex);\n+                loggerResultManager.genericError(ex.getMessage());\n+            }\n+        } else {\n+            loggerResultManager.unnecessaryParameters(input.listParameters(), LIST_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"af4ec243f325dbeff4428a0393a760b5cebc8a67","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerRead.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,7 +41,7 @@ public LoggerRead(final Input input) {\n \n     public void read() {\n         if (input.getParameters().length >= 1) {\n-            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            final List<LoggerTO> loggerTOs = new ArrayList<>();\n             boolean failed = false;\n             for (final String parameter : input.getParameters()) {\n                 try {"},{"sha":"62f9316810c48f20bbd88e57804ee24087efca8c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java","status":"modified","additions":33,"deletions":10,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,44 +18,67 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.Arrays;\n-import java.util.LinkedList;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Queue;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.client.cli.view.Table;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n \n public class LoggerResultManager extends CommonsResultManager {\n \n-    public void fromList(final LinkedList<LoggerTO> loggerTOs) {\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void fromListMemoryAppenders(final List<String> memoryAppenders) {\n+        final Table.TableBuilder tableBuilder = new Table.TableBuilder(\"list memory appenders\").header(\"appender\");\n+        for (final String appender : memoryAppenders) {\n+            tableBuilder.rowValues(Collections.singletonList(appender));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromGetLastLogStatements(final Queue<LogStatementTO> statements) throws JsonProcessingException {\n+        final Table.TableBuilder tableBuilder = new Table.TableBuilder(\"last statements\").header(\"statement\");\n+        for (final LogStatementTO statement : statements) {\n+            tableBuilder.rowValues(Collections.singletonList(\n+                    MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(statement)));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromList(final List<LoggerTO> loggerTOs) {\n         fromCommandToView(\"list loggers\", \"level\", loggerTOs);\n     }\n \n-    public void fromRead(final LinkedList<LoggerTO> loggerTOs) {\n+    public void fromRead(final List<LoggerTO> loggerTOs) {\n         fromCommandToView(\"read loggers\", \"level\", loggerTOs);\n     }\n \n-    public void fromCreate(final LinkedList<LoggerTO> loggerTOs) {\n+    public void fromCreate(final List<LoggerTO> loggerTOs) {\n         fromCommandToView(\"created loggers\", \"level\", loggerTOs);\n     }\n \n-    public void fromUpdate(final LinkedList<LoggerTO> loggerTOs) {\n+    public void fromUpdate(final List<LoggerTO> loggerTOs) {\n         fromCommandToView(\"updated loggers\", \"new level\", loggerTOs);\n     }\n \n-    public void fromDelete(final LinkedList<LoggerTO> loggerTOs) {\n+    public void fromDelete(final List<LoggerTO> loggerTOs) {\n         fromCommandToView(\"deleted loggers\", \"new level\", loggerTOs);\n     }\n \n     private void fromCommandToView(\n             final String title,\n             final String secondHeader,\n-            final LinkedList<LoggerTO> loggerTOs) {\n+            final List<LoggerTO> loggerTOs) {\n \n         final Table.TableBuilder tableBuilder = new Table.TableBuilder(title).header(\"logger\").header(secondHeader);\n         for (final LoggerTO loggerTO : loggerTOs) {\n-            tableBuilder.rowValues(\n-                    new LinkedList<>(Arrays.asList(loggerTO.getKey(), loggerTO.getLevel().getLevel().name())));\n+            tableBuilder.rowValues(Arrays.asList(loggerTO.getKey(), loggerTO.getLevel().getLevel().name()));\n         }\n         tableBuilder.build().print();\n     }"},{"sha":"823c6dd7065dedda2c4e1af1424380c4e0c33143","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerSyncopeOperations.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerSyncopeOperations.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,16 +18,36 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Queue;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LogAppender;\n+import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n \n public class LoggerSyncopeOperations {\n \n     private final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n \n+    public List<String> listMemoryAppenders() {\n+        return CollectionUtils.collect(loggerService.memoryAppenders(), new Transformer<LogAppender, String>() {\n+\n+            @Override\n+            public String transform(final LogAppender input) {\n+                return input.getName();\n+            }\n+        }, new ArrayList<String>());\n+    }\n+\n+    public Queue<LogStatementTO> getLastLogStatements(final String appender) {\n+        return loggerService.getLastLogStatements(appender);\n+    }\n+\n     public List<LoggerTO> list() {\n         return loggerService.list(LoggerType.LOG);\n     }\n@@ -39,7 +59,7 @@ public void update(final LoggerTO loggerTO) {\n     public LoggerTO read(final String loggerName) {\n         return loggerService.read(LoggerType.LOG, loggerName);\n     }\n-    \n+\n     public void delete(final String loggerName) {\n         loggerService.delete(LoggerType.LOG, loggerName);\n     }"},{"sha":"03335b96cd202f38aeb3439cbc1efffba8586062","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdate.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,13 +18,14 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -44,7 +45,7 @@ public LoggerUpdate(final Input input) {\n \n     public void update() {\n         if (input.parameterNumber() >= 1) {\n-            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            final List<LoggerTO> loggerTOs = new ArrayList<>();\n             boolean failed = false;\n             for (String parameter : input.getParameters()) {\n                 Pair<String, String> pairParameter = Input.toPairParameter(parameter);"},{"sha":"2ba57288145a083f8f8b0edaf8d6929e60b8f1e8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdateAll.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,12 +18,13 @@\n  */\n package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -42,7 +43,7 @@ public LoggerUpdateAll(final Input input) {\n \n     public void updateAll() {\n         if (input.parameterNumber() == 1) {\n-            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            final List<LoggerTO> loggerTOs = new ArrayList<>();\n             boolean failed = false;\n             for (final LoggerTO loggerTO : loggerSyncopeOperations.list()) {\n                 try {"},{"sha":"213f2e4c54dab719341c77790a37431addac321c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyList.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyList.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.policy;\n \n-import java.util.LinkedList;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -43,11 +41,8 @@ public PolicyList(final Input input) {\n     public void list() {\n         if (input.parameterNumber() == 1) {\n             try {\n-                final LinkedList<AbstractPolicyTO> policyTOs = new LinkedList<>();\n-                for (final AbstractPolicyTO policyTO : policySyncopeOperations.list(input.firstParameter())) {\n-                    policyTOs.add(policyTO);\n-                }\n-                policyResultManager.printPoliciesByType(input.firstParameter(), policyTOs);\n+                policyResultManager.printPoliciesByType(\n+                        input.firstParameter(), policySyncopeOperations.list(input.firstParameter()));\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error listing policy\", ex);\n                 policyResultManager.genericError(ex.getMessage());"},{"sha":"c33cba823c1a82d44d4dfd24c6a3ebb38b816284","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyRead.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.policy;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -40,7 +41,7 @@ public PolicyRead(final Input input) {\n \n     public void read() {\n         if (input.parameterNumber() >= 1) {\n-            final LinkedList<AbstractPolicyTO> policyTOs = new LinkedList<>();\n+            final List<AbstractPolicyTO> policyTOs = new ArrayList<>();\n             for (final String parameter : input.getParameters()) {\n                 try {\n                     policyTOs.add(policySyncopeOperations.read(parameter));"},{"sha":"baf9378245f278856d1c36c9272dfe39f85f04d7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.cli.commands.policy;\n \n-import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n@@ -29,7 +29,7 @@\n \n public class PolicyResultManager extends CommonsResultManager {\n \n-    public void printPolicies(final LinkedList<AbstractPolicyTO> policyTOs) {\n+    public void printPolicies(final List<AbstractPolicyTO> policyTOs) {\n         System.out.println(\"\");\n         for (AbstractPolicyTO policyTO : policyTOs) {\n             if (policyTO instanceof AccountPolicyTO) {\n@@ -42,7 +42,7 @@ public void printPolicies(final LinkedList<AbstractPolicyTO> policyTOs) {\n         }\n     }\n \n-    public void printPoliciesByType(final String policyTypeString, final LinkedList<AbstractPolicyTO> policyTOs) {\n+    public void printPoliciesByType(final String policyTypeString, final List<AbstractPolicyTO> policyTOs) {\n         System.out.println(\"\");\n         final PolicyType policyType = PolicyType.valueOf(policyTypeString);\n         switch (policyType) {"},{"sha":"bc7c3e68d7fe1d2da7e7286b59ce906e2b315e5e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaList.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.schema;\n \n-import java.util.LinkedList;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -43,11 +41,8 @@ public SchemaList(final Input input) {\n     public void list() {\n         if (input.parameterNumber() == 1) {\n             try {\n-                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n-                for (final AbstractSchemaTO schemaTO : schemaSyncopeOperations.list(input.firstParameter())) {\n-                    schemaTOs.add(schemaTO);\n-                }\n-                schemaResultManager.toView(input.firstParameter(), schemaTOs);\n+                schemaResultManager.toView(\n+                        input.firstParameter(), schemaSyncopeOperations.list(input.firstParameter()));\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error listing schema\", ex);\n                 schemaResultManager.genericError(ex.getMessage());"},{"sha":"0380487d2d45834175e8926eed84eed41e98d6e1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListAll.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.schema;\n \n-import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -43,11 +41,7 @@ public void listAll() {\n         if (input.parameterNumber() == 0) {\n             try {\n                 for (final SchemaType schemaType : SchemaType.values()) {\n-                    final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n-                    for (final AbstractSchemaTO schemaTO : schemaSyncopeOperations.list(schemaType.name())) {\n-                        schemaTOs.add(schemaTO);\n-                    }\n-                    schemaResultManager.toView(schemaType.name(), schemaTOs);\n+                    schemaResultManager.toView(schemaType.name(), schemaSyncopeOperations.list(schemaType.name()));\n                 }\n             } catch (final SyncopeClientException | WebServiceException ex) {\n                 LOG.error(\"Error listing schema\", ex);"},{"sha":"bc88a74029a0ae6a068bf96b193d20d48c5cffe5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListDerived.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.schema;\n \n-import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,11 +39,7 @@ public SchemaListDerived(final Input input) {\n     public void listDerived() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n-                for (final AbstractSchemaTO schemaTO : schemaSyncopeOperations.listDerived()) {\n-                    schemaTOs.add(schemaTO);\n-                }\n-                schemaResultManager.fromListDerived(schemaTOs);\n+                schemaResultManager.fromListDerived(schemaSyncopeOperations.listDerived());\n             } catch (final SyncopeClientException | WebServiceException ex) {\n                 LOG.error(\"Error listing schema\", ex);\n                 schemaResultManager.genericError(ex.getMessage());"},{"sha":"38422c4beead6e503f1a26200f5d48808e08a08e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListPlain.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.schema;\n \n-import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,11 +39,7 @@ public SchemaListPlain(final Input input) {\n     public void listPlain() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n-                for (final AbstractSchemaTO schemaTO : schemaSyncopeOperations.listPlain()) {\n-                    schemaTOs.add(schemaTO);\n-                }\n-                schemaResultManager.printPlainSchemas(schemaTOs);\n+                schemaResultManager.printPlainSchemas(schemaSyncopeOperations.listPlain());\n             } catch (final SyncopeClientException | WebServiceException ex) {\n                 LOG.error(\"Error listing schema\", ex);\n                 schemaResultManager.genericError(ex.getMessage());"},{"sha":"24426d1f93fa976cec87a15f15a083a0e1d14f32","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListVirtual.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.schema;\n \n-import java.util.LinkedList;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,11 +39,7 @@ public SchemaListVirtual(final Input input) {\n     public void listVirtual() {\n         if (input.parameterNumber() == 0) {\n             try {\n-                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n-                for (final AbstractSchemaTO schemaTO : schemaSyncopeOperations.listVirtual()) {\n-                    schemaTOs.add(schemaTO);\n-                }\n-                schemaResultManager.fromListVirtual(schemaTOs);\n+                schemaResultManager.fromListVirtual(schemaSyncopeOperations.listVirtual());\n             } catch (final SyncopeClientException | WebServiceException ex) {\n                 LOG.error(\"Error listing schema\", ex);\n                 schemaResultManager.genericError(ex.getMessage());"},{"sha":"0f99ed7ff32f0f3422056d2f5ee62cfb06ab06f8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaRead.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.schema;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.LinkedList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n@@ -46,7 +47,7 @@ public void read() {\n         if (input.parameterNumber() >= 2) {\n             final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n             try {\n-                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+                final List<AbstractSchemaTO> schemaTOs = new ArrayList<>();\n                 for (final String parameter : parameters) {\n                     schemaTOs.add(schemaSyncopeOperations.read(input.firstParameter(), parameter));\n                 }"},{"sha":"cb87fe0e19918cbb9ef75b58ede4f17bddaeaea1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaResultManager.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.cli.commands.schema;\n \n import java.util.Arrays;\n-import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.client.cli.view.Table;\n@@ -31,7 +31,7 @@\n \n public class SchemaResultManager extends CommonsResultManager {\n \n-    public void toView(final String schemaTypeString, final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+    public void toView(final String schemaTypeString, final List<? extends AbstractSchemaTO> schemaTOs) {\n         switch (SchemaType.valueOf(schemaTypeString)) {\n             case PLAIN:\n                 printPlainSchemasDetailed(schemaTOs);\n@@ -47,7 +47,7 @@ public void toView(final String schemaTypeString, final LinkedList<? extends Abs\n         }\n     }\n \n-    private void printPlainSchemasDetailed(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+    private void printPlainSchemasDetailed(final List<? extends AbstractSchemaTO> schemaTOs) {\n         System.out.println(\"\");\n         for (final AbstractSchemaTO schemaTO : schemaTOs) {\n             printPlanSchemaDetailed((PlainSchemaTO) schemaTO);\n@@ -67,36 +67,36 @@ private void printPlanSchemaDetailed(final PlainSchemaTO schemaTO) {\n         System.out.println(\"\");\n     }\n \n-    public void printPlainSchemas(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+    public void printPlainSchemas(final List<? extends AbstractSchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"plain schemas\").header(\"schema key\").header(\"type\").header(\"mandatory\");\n         for (final AbstractSchemaTO schemaTO : schemaTOs) {\n-            tableBuilder.rowValues(new LinkedList<>(Arrays.asList(\n+            tableBuilder.rowValues(Arrays.asList(\n                     ((PlainSchemaTO) schemaTO).getKey(),\n                     ((PlainSchemaTO) schemaTO).getType().toString(),\n-                    ((PlainSchemaTO) schemaTO).getMandatoryCondition())));\n+                    ((PlainSchemaTO) schemaTO).getMandatoryCondition()));\n         }\n         tableBuilder.build().print();\n     }\n \n-    public void fromListDerived(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+    public void fromListDerived(final List<? extends AbstractSchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"derived schemas\").header(\"schema key\").header(\"expression\");\n         for (final AbstractSchemaTO schemaTO : schemaTOs) {\n-            tableBuilder.rowValues(new LinkedList<>(Arrays.asList(\n+            tableBuilder.rowValues(Arrays.asList(\n                     ((DerSchemaTO) schemaTO).getKey(),\n-                    ((DerSchemaTO) schemaTO).getExpression())));\n+                    ((DerSchemaTO) schemaTO).getExpression()));\n         }\n         tableBuilder.build().print();\n     }\n \n-    public void fromListVirtual(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+    public void fromListVirtual(final List<? extends AbstractSchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"virtual schemas\").header(\"schema key\").header(\"readonly\");\n         for (final AbstractSchemaTO schemaTO : schemaTOs) {\n-            tableBuilder.rowValues(new LinkedList<>(Arrays.asList(\n+            tableBuilder.rowValues(Arrays.asList(\n                     ((VirSchemaTO) schemaTO).getKey(),\n-                    String.valueOf(((VirSchemaTO) schemaTO).isReadonly()))));\n+                    String.valueOf(((VirSchemaTO) schemaTO).isReadonly())));\n         }\n         tableBuilder.build().print();\n     }"},{"sha":"e162c1b81e6e98c1d3e3ea6725ea84aecbfc2c39","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskList.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskList.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands.task;\n \n-import java.util.LinkedList;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -43,11 +41,8 @@ public TaskList(final Input input) {\n     public void list() {\n         if (input.parameterNumber() == 1) {\n             try {\n-                final LinkedList<AbstractTaskTO> taskTOs = new LinkedList<>();\n-                for (final AbstractTaskTO taskTO : taskSyncopeOperations.list(input.firstParameter())) {\n-                    taskTOs.add(taskTO);\n-                }\n-                taskResultManager.printTasksType(input.firstParameter(), taskTOs);\n+                taskResultManager.printTasksType(\n+                        input.firstParameter(), taskSyncopeOperations.list(input.firstParameter()));\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error listing task\", ex);\n                 taskResultManager.genericError(ex.getMessage());"},{"sha":"14ebc30d6367678019734afb11fb86788a908dd0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskRead.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.client.cli.commands.task;\n \n-import java.util.LinkedList;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -40,7 +41,7 @@ public TaskRead(final Input input) {\n \n     public void read() {\n         if (input.parameterNumber() >= 1) {\n-            final LinkedList<AbstractTaskTO> taskTOs = new LinkedList<>();\n+            final List<AbstractTaskTO> taskTOs = new ArrayList<>();\n             for (final String parameter : input.getParameters()) {\n                 try {\n                     taskTOs.add(taskSyncopeOperations.read(parameter));"},{"sha":"55164401e74cdced14c6018260ca38c1514bd759","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.cli.commands.task;\n \n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n@@ -35,7 +34,7 @@\n \n public class TaskResultManager extends CommonsResultManager {\n \n-    public void printTasks(final LinkedList<AbstractTaskTO> taskTOs) {\n+    public void printTasks(final List<AbstractTaskTO> taskTOs) {\n         System.out.println(\"\");\n         for (final AbstractTaskTO taskTO : taskTOs) {\n             if (taskTO instanceof NotificationTaskTO) {\n@@ -52,7 +51,7 @@ public void printTasks(final LinkedList<AbstractTaskTO> taskTOs) {\n         }\n     }\n \n-    public void printTasksType(final String taskTypeString, final LinkedList<AbstractTaskTO> taskTOs) {\n+    public void printTasksType(final String taskTypeString, final List<AbstractTaskTO> taskTOs) {\n         System.out.println(\"\");\n         switch (TaskType.valueOf(taskTypeString)) {\n             case NOTIFICATION:"},{"sha":"48be66ccf0d7149ff58b69da4adcf299344531ee","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserList.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserList.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.cli.commands.user;\n \n-import java.util.LinkedList;\n import java.util.Scanner;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -48,7 +47,7 @@ public void list() {\n                 final String answer = scanIn.nextLine();\n                 if (\"yes\".equalsIgnoreCase(answer)) {\n                     final PagedResult<UserTO> uResult = userSyncopeOperations.list();\n-                    userResultManager.printUsers(new LinkedList<>(uResult.getResult()));\n+                    userResultManager.printUsers(uResult.getResult());\n                 } else if (\"no\".equalsIgnoreCase(answer)) {\n                     userResultManager.genericError(\"List operation skipped\");\n                 } else {"},{"sha":"450ff7e829655cab1122e7626852ae6f8a20ae80","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserResultManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.cli.commands.user;\n \n import java.util.Arrays;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -102,7 +101,7 @@ public void printFailedUsers(final Map<String, String> users) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"Users not deleted\").header(\"user key\").header(\"cause\");\n         for (final Map.Entry<String, String> entrySet : users.entrySet()) {\n-            tableBuilder.rowValues(new LinkedList<>(Arrays.asList(entrySet.getKey(), entrySet.getValue())));\n+            tableBuilder.rowValues(Arrays.asList(entrySet.getKey(), entrySet.getValue()));\n         }\n         tableBuilder.build().print();\n     }"},{"sha":"d0ce110b0c901067ffd1919916fe160adc1cfc80","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/view/Table.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.client.cli.view;\n \n+import java.util.ArrayList;\n import java.util.LinkedHashSet;\n-import java.util.LinkedList;\n+import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n \n@@ -29,9 +30,9 @@ public final class Table {\n \n     private final String title;\n \n-    private final LinkedList<String> headers;\n+    private final List<String> headers;\n \n-    private final Set<LinkedList<String>> values;\n+    private final Set<List<String>> values;\n \n     private int columnsNumber;\n \n@@ -47,8 +48,8 @@ public final class Table {\n \n     private Table(\n             final String title,\n-            final LinkedList<String> headers,\n-            final Set<LinkedList<String>> values) {\n+            final List<String> headers,\n+            final Set<List<String>> values) {\n         this.title = title;\n         this.headers = headers;\n         this.values = values;\n@@ -94,7 +95,7 @@ private void initializeColumnSize() {\n             }\n         }\n \n-        for (final LinkedList<String> value : values) {\n+        for (final List<String> value : values) {\n             for (int j = 0; j < columnsSize.length; j++) {\n                 if (value.get(j) != null && value.get(j).length() > columnsSize[j]) {\n                     columnsSize[j] = value.get(j).length();\n@@ -145,7 +146,7 @@ private void printHeaders() {\n     private void printeContent() {\n         printColumnSpace();\n \n-        for (final LinkedList<String> value : values) {\n+        for (final List<String> value : values) {\n             for (int j = 0; j < columnsNumber; j++) {\n                 if (value.get(j) == null) {\n                     tmpValuesArray[j] = StringUtils.center(\"null\", columnsSize[j]);\n@@ -169,9 +170,9 @@ private void printColumnSpace() {\n \n     public static class TableBuilder {\n \n-        private final LinkedList<String> headers = new LinkedList<>();\n+        private final List<String> headers = new ArrayList<>();\n \n-        private final Set<LinkedList<String>> values = new LinkedHashSet<>();\n+        private final Set<List<String>> values = new LinkedHashSet<>();\n \n         private final String title;\n \n@@ -184,7 +185,7 @@ public TableBuilder header(final String header) {\n             return this;\n         }\n \n-        public TableBuilder rowValues(final LinkedList<String> row) {\n+        public TableBuilder rowValues(final List<String> row) {\n             values.add(row);\n             return this;\n         }"},{"sha":"6796fc358568551661a41d0259c71e16bc686783","filename":"client/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n@@ -210,7 +210,7 @@ public void onClick(final AjaxRequestTarget target, final EventCategoryTO modelO\n                                     null,\n                                     null,\n                                     parsed.getKey().getEvents().isEmpty()\n-                                            ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                                    ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n                                     parsed.getValue());\n \n                             custom.setModelObject(StringUtils.EMPTY);\n@@ -237,7 +237,7 @@ public void onClick(final AjaxRequestTarget target, final EventCategoryTO modelO\n                                     null,\n                                     null,\n                                     parsed.getKey().getEvents().isEmpty()\n-                                            ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                                    ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n                                     parsed.getValue());\n \n                             custom.setModelObject(StringUtils.EMPTY);\n@@ -264,7 +264,7 @@ public void onClick(final AjaxRequestTarget target, final EventCategoryTO modelO\n                                     null,\n                                     null,\n                                     parsed.getKey().getEvents().isEmpty()\n-                                            ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                                    ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n                                     parsed.getValue());\n \n                             custom.setModelObject(StringUtils.EMPTY);\n@@ -399,7 +399,7 @@ public void onEvent(final IEvent<?> event) {\n                         categoryEvent.getKey().getCategory(),\n                         categoryEvent.getKey().getSubcategory(),\n                         categoryEvent.getKey().getEvents().isEmpty()\n-                                ? StringUtils.EMPTY : categoryEvent.getKey().getEvents().iterator().next(),\n+                        ? StringUtils.EMPTY : categoryEvent.getKey().getEvents().iterator().next(),\n                         categoryEvent.getValue()));\n \n                 category.setEnabled(false);"},{"sha":"33844d97e100bad6f6f45c439d0acdcacc014130","filename":"client/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormChoiceComponentUpdatingBehavior;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.wicket.ajax.AjaxRequestTarget;"},{"sha":"33df05a596b7b0f8cb38ecd6607e505cdd8cbc72","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.console.events.EventCategoryPanel;\n import org.apache.syncope.client.console.events.SelectedEventsPanel;\n import org.apache.syncope.client.console.rest.LoggerRestClient;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.StandardEntitlement;"},{"sha":"dac4ab551b8edddfe91d88bf61d0eb26ca64fbd3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractLogsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.Component;"},{"sha":"6ef41088f07de97447ee4d8bc4a06045faa45f52","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConsoleLogPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -25,7 +25,7 @@\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.wicket.PageReference;\n "},{"sha":"aeb672e12f17efcb085e3732e813d069c80d7bbd","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/CoreLogPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.panels;\n \n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.wicket.PageReference;"},{"sha":"492294044c9ac57196c87d678cf9d78c8ca0fcf5","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -24,8 +24,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n@@ -46,12 +46,12 @@ public List<AuditLoggerName> listAudits() {\n \n     public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         Map<String, Set<AuditLoggerName>> result = new HashMap<>();\n-        for (AuditLoggerName auditLoggerName : listAudits()) {\n-            if (!result.containsKey(auditLoggerName.getCategory())) {\n-                result.put(auditLoggerName.getCategory(), new HashSet<AuditLoggerName>());\n+        for (AuditLoggerName audit : listAudits()) {\n+            if (!result.containsKey(audit.getCategory())) {\n+                result.put(audit.getCategory(), new HashSet<AuditLoggerName>());\n             }\n \n-            result.get(auditLoggerName.getCategory()).add(auditLoggerName);\n+            result.get(audit.getCategory()).add(audit);\n         }\n \n         return result;"},{"sha":"3ea477842aed2a26722af913538668f94b9adda6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategoryTO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategoryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategoryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FEventCategoryTO.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.log;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/EventCategoryTO.java"},{"sha":"317ed59fa4ceb9b63a6802cdbaa9daf28dcbd2c7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/LogAppender.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogAppender.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.log;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+public class LogAppender extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 5975199884460548302L;\n+\n+    private String name;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+}"},{"sha":"11e22c9f069faadba11a6001ef2085c4bbe484be","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatementTO.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatementTO.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.log;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+\n+public class LogStatementTO implements Serializable {\n+\n+    private static final long serialVersionUID = -2931205859104653385L;\n+\n+    private LoggerLevel level;\n+\n+    private String loggerName;\n+\n+    private String message;\n+\n+    private String stackTrace;\n+\n+    private long timeMillis;\n+\n+    private long threadId;\n+\n+    private String threadName;\n+\n+    private int threadPriority;\n+\n+    public LoggerLevel getLevel() {\n+        return level;\n+    }\n+\n+    public void setLevel(final LoggerLevel level) {\n+        this.level = level;\n+    }\n+\n+    public String getLoggerName() {\n+        return loggerName;\n+    }\n+\n+    public void setLoggerName(final String loggerName) {\n+        this.loggerName = loggerName;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(final String message) {\n+        this.message = message;\n+    }\n+\n+    public String getStackTrace() {\n+        return stackTrace;\n+    }\n+\n+    public void setStackTrace(final String stackTrace) {\n+        this.stackTrace = stackTrace;\n+    }\n+\n+    public long getTimeMillis() {\n+        return timeMillis;\n+    }\n+\n+    public void setTimeMillis(final long timeMillis) {\n+        this.timeMillis = timeMillis;\n+    }\n+\n+    public long getThreadId() {\n+        return threadId;\n+    }\n+\n+    public void setThreadId(final long threadId) {\n+        this.threadId = threadId;\n+    }\n+\n+    public String getThreadName() {\n+        return threadName;\n+    }\n+\n+    public void setThreadName(final String threadName) {\n+        this.threadName = threadName;\n+    }\n+\n+    public int getThreadPriority() {\n+        return threadPriority;\n+    }\n+\n+    public void setThreadPriority(final int threadPriority) {\n+        this.threadPriority = threadPriority;\n+    }\n+\n+}"},{"sha":"f908d2baeec57863f04d8b787322648b4cf3b770","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/LoggerTO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLoggerTO.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.log;\n \n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/LoggerTO.java"},{"sha":"1aa449d7e733106e74984a31936790b116c2e8da","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/log/package-info.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2Fpackage-info.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(\n+        namespace = SyncopeConstants.NS,\n+        xmlns = { @XmlNs(prefix = SyncopeConstants.NS_PREFIX,\n+                    namespaceURI = SyncopeConstants.NS) })\n+package org.apache.syncope.common.lib.log;\n+\n+import javax.xml.bind.annotation.XmlNs;\n+import javax.xml.bind.annotation.XmlSchema;\n+import org.apache.syncope.common.lib.SyncopeConstants;"},{"sha":"6988062d35ae157ace95fc34e2ca87cdf9f552b1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -26,7 +26,7 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n "},{"sha":"99f3f9c07a0e0a4ba7b4a3586ff332ced435da90","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/LoggerWrapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n "},{"sha":"7250b7ad28f47ca778cb8af991d1457dbb978803","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.rest.api.service;\n \n import java.util.List;\n+import java.util.Queue;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -28,8 +29,10 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.LogAppender;\n+import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerType;\n \n /**\n@@ -39,7 +42,28 @@\n public interface LoggerService extends JAXRSService {\n \n     /**\n-     * Returns a list of all managed events in audit.\n+     * Returns the list of memory appenders available in the current logging configuration.\n+     *\n+     * @return the list of memory appenders available in the current logging configuration\n+     */\n+    @GET\n+    @Path(\"memoryAppenders\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<LogAppender> memoryAppenders();\n+\n+    /**\n+     * Return the last log statements available in the provided memory appender.\n+     *\n+     * @param memoryAppender memory appender name\n+     * @return the last log statements available in the provided memory appender\n+     */\n+    @GET\n+    @Path(\"memoryAppenders/{memoryAppender}/lastLogStatements\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    Queue<LogStatementTO> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);\n+\n+    /**\n+     * Returns the list of all managed events in audit.\n      *\n      * @return list of all managed events in audit\n      */"},{"sha":"0e3c88773282dd0497713204718217e654073b84","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":36,"deletions":2,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -23,6 +23,7 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Queue;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IteratorUtils;\n@@ -34,8 +35,10 @@\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.LogAppender;\n+import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -48,6 +51,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.logic.init.LoggerLoader;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -75,6 +79,9 @@\n @Component\n public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {\n \n+    @Autowired\n+    private LoggerLoader loggerLoader;\n+\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n@@ -99,6 +106,33 @@ public LoggerTO transform(final Logger logger) {\n         }, new ArrayList<LoggerTO>());\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    public List<LogAppender> memoryAppenders() {\n+        return CollectionUtils.collect(\n+                loggerLoader.getMemoryAppenders().keySet(),\n+                new Transformer<String, LogAppender>() {\n+\n+            @Override\n+            public LogAppender transform(final String input) {\n+                LogAppender logAppender = new LogAppender();\n+                logAppender.setName(input);\n+                return logAppender;\n+            }\n+        }, new ArrayList<LogAppender>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    public Queue<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n+        MemoryAppender appender = loggerLoader.getMemoryAppenders().get(memoryAppender);\n+        if (appender == null) {\n+            throw new NotFoundException(\"Appender \" + memoryAppender);\n+        }\n+\n+        return appender.getStatements();\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)"},{"sha":"818397974217cf433761df64907bfcc337cb5531","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Queue;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.Filter;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginAttribute;\n+import org.apache.logging.log4j.core.config.plugins.PluginElement;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.message.ReusableMessage;\n+import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n+\n+@Plugin(name = \"Memory\", category = \"Core\", elementType = Appender.ELEMENT_TYPE, printObject = true)\n+public class MemoryAppender extends AbstractAppender {\n+\n+    private final CircularFifoQueue<LogStatementTO> statements;\n+\n+    protected MemoryAppender(\n+            final String name,\n+            final int size,\n+            final Filter filter,\n+            final boolean ignoreExceptions) {\n+\n+        super(name, filter, null, ignoreExceptions);\n+        this.statements = new CircularFifoQueue<>(size);\n+    }\n+\n+    @Override\n+    public void append(final LogEvent event) {\n+        LogStatementTO statement = new LogStatementTO();\n+\n+        statement.setLevel(LoggerLevel.fromLevel(event.getLevel()));\n+        statement.setLoggerName(event.getLoggerName());\n+\n+        Message msg = event.getMessage();\n+        statement.setMessage((msg instanceof ReusableMessage\n+                ? ((ReusableMessage) msg).memento()\n+                : msg).getFormattedMessage());\n+\n+        statement.setTimeMillis(event.getTimeMillis());\n+\n+        if (event.getThrown() != null) {\n+            statement.setStackTrace(ExceptionUtils2.getFullStackTrace(event.getThrown()));\n+        }\n+\n+        statement.setThreadId(event.getThreadId());\n+        statement.setThreadName(event.getThreadName());\n+        statement.setThreadPriority(event.getThreadPriority());\n+\n+        this.statements.add(statement);\n+    }\n+\n+    public Queue<LogStatementTO> getStatements() {\n+        return statements;\n+    }\n+\n+    @PluginFactory\n+    public static MemoryAppender createAppender(\n+            @PluginAttribute(\"name\") final String name,\n+            @PluginAttribute(value = \"size\", defaultInt = 10) final int size,\n+            @PluginElement(\"Filter\") final Filter filter,\n+            @PluginAttribute(value = \"ignoreExceptions\", defaultBoolean = true) final boolean ignoreExceptions) {\n+\n+        return new MemoryAppender(\n+                name,\n+                size,\n+                filter,\n+                ignoreExceptions);\n+    }\n+\n+}"},{"sha":"3280fe04a2d1a37e664bfd87ed9b1a008bb768b8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -20,6 +20,7 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.HashMap;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.logging.log4j.Level;\n@@ -30,6 +31,7 @@\n import org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource;\n import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.syncope.core.logic.MemoryAppender;\n import org.apache.syncope.core.provisioning.java.AuditManagerImpl;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n@@ -47,6 +49,8 @@ public class LoggerLoader implements SyncopeLoader {\n     @Autowired\n     private LoggerAccessor loggerAccessor;\n \n+    private final Map<String, MemoryAppender> memoryAppenders = new HashMap<>();\n+\n     @Override\n     public Integer getPriority() {\n         return 300;\n@@ -56,6 +60,12 @@ public Integer getPriority() {\n     public void load() {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n+        for (Map.Entry<String, Appender> entry : ctx.getConfiguration().getAppenders().entrySet()) {\n+            if (entry.getValue() instanceof MemoryAppender) {\n+                memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue());\n+            }\n+        }\n+\n         // Audit table and DataSource for each configured domain\n         ColumnConfig[] columns = {\n             ColumnConfig.createColumnConfig(ctx.getConfiguration(), \"EVENT_DATE\", null, null, \"true\", null, null),\n@@ -97,6 +107,10 @@ public Void exec() {\n         ctx.updateLoggers();\n     }\n \n+    public Map<String, MemoryAppender> getMemoryAppenders() {\n+        return memoryAppenders;\n+    }\n+\n     private static class DataSourceConnectionSource implements ConnectionSource {\n \n         private final DataSource dataSource;"},{"sha":"bc406edc61daa84996498a711986ee45240bcd0b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -20,9 +20,12 @@\n \n import java.text.ParseException;\n import java.util.List;\n+import java.util.Queue;\n import javax.ws.rs.BadRequestException;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.LogAppender;\n+import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.LoggerWrapper;\n@@ -37,6 +40,16 @@ public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerServ\n     @Autowired\n     private LoggerLogic logic;\n \n+    @Override\n+    public List<LogAppender> memoryAppenders() {\n+        return logic.memoryAppenders();\n+    }\n+\n+    @Override\n+    public Queue<LogStatementTO> getLastLogStatements(final String memoryAppender) {\n+        return logic.getLastLogStatements(memoryAppender);\n+    }\n+\n     @Override\n     public void delete(final LoggerType type, final String name) {\n         switch (type) {"},{"sha":"7416d927f2bdb0ecb8930ad6751074d73709b57b","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -32,6 +32,7 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n+    <Memory name=\"mainMemory\" size=\"25\"/>\n \n     <RollingRandomAccessFile name=\"persistence\" fileName=\"${log.directory}/core-persistence.log\"\n                              filePattern=\"${log.directory}/core-persistence-%d{yyyy-MM-dd}.log.gz\"\n@@ -44,6 +45,7 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n+    <Memory name=\"persistenceMemory\" size=\"25\"/>\n \n     <RollingRandomAccessFile name=\"rest\" fileName=\"${log.directory}/core-rest.log\"\n                              filePattern=\"${log.directory}/core-rest-%d{yyyy-MM-dd}.log.gz\"\n@@ -56,6 +58,7 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n+    <Memory name=\"restMemory\" size=\"25\"/>\n \n     <RollingRandomAccessFile name=\"connid\" fileName=\"${log.directory}/core-connid.log\"\n                              filePattern=\"${log.directory}/core-connid-%d{yyyy-MM-dd}.log.gz\"\n@@ -68,68 +71,87 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n+    <Memory name=\"connidMemory\" size=\"25\"/>\n     \n   </appenders>\n   \n   <loggers>\n     \n     <asyncLogger name=\"org.apache.syncope.core.persistence\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"persistence\"/>\n+      <appender-ref ref=\"persistenceMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework.orm\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"persistence\"/>\n+      <appender-ref ref=\"persistenceMemory\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope.core.rest\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"rest\"/>\n+      <appender-ref ref=\"restMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework.web\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"rest\"/>\n+      <appender-ref ref=\"restMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.http\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"rest\"/>\n+      <appender-ref ref=\"restMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"rest\"/>\n+      <appender-ref ref=\"restMemory\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.identityconnectors\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"connid\"/>\n+      <appender-ref ref=\"connidMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"net.tirasa.connid\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"connid\"/>\n+      <appender-ref ref=\"connidMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning.api.ConnIdBundleManager\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"connid\"/>\n+      <appender-ref ref=\"connidMemory\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.logic\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.quartz\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.activiti\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     <asyncLogger name=\"io.swagger\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </asyncLogger>\n     \n     <root level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n+      <appender-ref ref=\"mainMemory\"/>\n     </root>\n     \n   </loggers>"},{"sha":"366770d00e40795838720e4cf1d0a98607a3a1d6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.client.cli.commands.entitlement.EntitlementCommand;\n import org.apache.syncope.client.cli.commands.group.GroupCommand;\n import org.apache.syncope.client.cli.commands.install.InstallCommand;\n+import org.apache.syncope.client.cli.commands.logger.LoggerCommand;\n import org.apache.syncope.client.cli.commands.policy.PolicyCommand;\n import org.apache.syncope.client.cli.commands.report.ReportCommand;\n import org.apache.syncope.client.cli.commands.role.RoleCommand;\n@@ -307,4 +308,24 @@ public void policyError() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void lastStatements() {\n+        Process process = null;\n+        try {\n+            PROCESS_BUILDER.command(getCommand(\n+                    new LoggerCommand().getClass().getAnnotation(Command.class).name(),\n+                    LoggerCommand.LoggerOptions.LAST_STATEMENTS.getOptionName(),\n+                    \"connidMemory\"));\n+            process = PROCESS_BUILDER.start();\n+            final String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n+            assertTrue(result.contains(\"\\\"level\\\" : \\\"DEBUG\\\",\"));\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n+        }\n+    }\n }"},{"sha":"fb3b0719470cc112e9fc74bb80b5dd2f01d8e39f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/LogsITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -22,7 +22,7 @@\n \n import java.lang.reflect.InvocationTargetException;\n import org.apache.syncope.client.console.pages.Logs;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;\n import org.apache.wicket.core.util.lang.PropertyResolver;"},{"sha":"07416c6a3774a11c52b0a7e6eaafc61bbe233455","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":30,"deletions":2,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -26,13 +26,16 @@\n \n import java.text.ParseException;\n import java.util.List;\n+import java.util.Queue;\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.EventCategoryTO;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.EventCategoryTO;\n+import org.apache.syncope.common.lib.log.LogAppender;\n+import org.apache.syncope.common.lib.log.LogStatementTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n@@ -50,6 +53,31 @@\n \n public class LoggerITCase extends AbstractITCase {\n \n+    @Test\n+    public void listMemoryAppenders() {\n+        List<LogAppender> memoryAppenders = loggerService.memoryAppenders();\n+        assertNotNull(memoryAppenders);\n+        assertFalse(memoryAppenders.isEmpty());\n+        for (LogAppender appender : memoryAppenders) {\n+            assertNotNull(appender);\n+            assertNotNull(appender.getName());\n+        }\n+    }\n+\n+    @Test\n+    public void lastStatements() {\n+        Queue<LogStatementTO> statements = loggerService.getLastLogStatements(\"connidMemory\");\n+        assertNotNull(statements);\n+        assertFalse(statements.isEmpty());\n+\n+        LogStatementTO statement = statements.element();\n+        assertNotNull(statement);\n+        assertNotNull(statement.getLoggerName());\n+        assertNotNull(statement.getLevel());\n+        assertNotNull(statement.getMessage());\n+        assertNotNull(statement.getTimeMillis());\n+    }\n+\n     @Test\n     public void listLogs() {\n         List<LoggerTO> loggers = loggerService.list(LoggerType.LOG);"},{"sha":"4dc4663a77df2f9e7deea60fcf46671e27230255","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c25e1da07a41a91f579c1fa2a2f69ea177a01d2c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=c25e1da07a41a91f579c1fa2a2f69ea177a01d2c","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.AuditElements;"}]}