{"sha":"e486aaf3a1ac1b5a3281a2c93598cc38cca4073e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU0ODZhYWYzYTFhYzFiNWEzMjgxYTJjOTM1OThjYzM4Y2NhNDA3M2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-29T09:37:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-29T09:39:43Z"},"message":"[SYNCOPE-717] Merge from 1_2_X","tree":{"sha":"16a2bca9e6b4a7746ec1f70f6ae2b8c86cf69d4b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/16a2bca9e6b4a7746ec1f70f6ae2b8c86cf69d4b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0211410bac90d6d7b48bbeaa20675dadfe70b255","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0211410bac90d6d7b48bbeaa20675dadfe70b255","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0211410bac90d6d7b48bbeaa20675dadfe70b255"},{"sha":"5954e2e7d44878c0f87d594140f6cc42146ad5c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5954e2e7d44878c0f87d594140f6cc42146ad5c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5954e2e7d44878c0f87d594140f6cc42146ad5c3"}],"stats":{"total":65,"additions":64,"deletions":1},"files":[{"sha":"131f310fcb12bf7869fb510016e9eeed04b6fd40","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/utils/FormatUtils.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FFormatUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FFormatUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FFormatUtils.java?ref=e486aaf3a1ac1b5a3281a2c93598cc38cca4073e","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.core.misc.utils;\n \n import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n import org.apache.commons.lang3.time.DateUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n \n@@ -44,7 +46,9 @@ protected SimpleDateFormat initialValue() {\n \n         @Override\n         protected DecimalFormat initialValue() {\n-            return new DecimalFormat();\n+            DecimalFormat df = new DecimalFormat();\n+            df.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ENGLISH));\n+            return df;\n         }\n     };\n "},{"sha":"17ba8c86d8b1d96337e30992a498c11122a2b0ed","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e486aaf3a1ac1b5a3281a2c93598cc38cca4073e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=e486aaf3a1ac1b5a3281a2c93598cc38cca4073e","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -803,4 +804,62 @@ public void issueSYNCOPE632() {\n         }\n     }\n \n+    @Test\n+    public void issueSYNCOPE717() {\n+        String doubleSchemaName = \"double\" + getUUIDString();\n+\n+        // 1. create double schema without conversion pattern\n+        PlainSchemaTO schema = new PlainSchemaTO();\n+        schema.setKey(doubleSchemaName);\n+        schema.setType(AttrSchemaType.Double);\n+\n+        schema = createSchema(SchemaType.PLAIN, schema);\n+        assertNotNull(schema);\n+        assertNull(schema.getConversionPattern());\n+\n+        AnyTypeClassTO minimalGroup = anyTypeClassService.read(\"minimal group\");\n+        assertNotNull(minimalGroup);\n+        minimalGroup.getPlainSchemas().add(doubleSchemaName);\n+        anyTypeClassService.update(minimalGroup);\n+\n+        // 2. create group, provide valid input value\n+        GroupTO groupTO = getBasicSampleTO(\"syncope717\");\n+        groupTO.getPlainAttrs().add(attrTO(doubleSchemaName, \"11.23\"));\n+\n+        groupTO = createGroup(groupTO);\n+        assertNotNull(groupTO);\n+        assertEquals(\"11.23\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n+\n+        // 3. update schema, set conversion pattern\n+        schema.setConversionPattern(\"0.000\");\n+        schemaService.update(SchemaType.PLAIN, schema);\n+\n+        // 4. re-read group, verify that pattern was applied\n+        groupTO = groupService.read(groupTO.getKey());\n+        assertNotNull(groupTO);\n+        assertEquals(\"11.230\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n+\n+        // 5. modify group with new double value\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(groupTO.getKey());\n+        patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.257\")).build());\n+\n+        groupTO = updateGroup(patch);\n+        assertNotNull(groupTO);\n+        assertEquals(\"11.257\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n+\n+        // 6. update schema, unset conversion pattern\n+        schema.setConversionPattern(null);\n+        schemaService.update(SchemaType.PLAIN, schema);\n+\n+        // 7. modify group with new double value, verify that no pattern is applied\n+        patch = new GroupPatch();\n+        patch.setKey(groupTO.getKey());\n+        patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.23\")).build());\n+\n+        groupTO = updateGroup(patch);\n+        assertNotNull(groupTO);\n+        assertEquals(\"11.23\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n+    }\n+\n }"}]}