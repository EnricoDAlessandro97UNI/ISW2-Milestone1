{"sha":"4eceb6d775de9b4b3804b4622455987f63fd6621","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRlY2ViNmQ3NzVkZTliNGIzODA0YjQ2MjI0NTU5ODdmNjNmZDY2MjE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-19T15:17:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-19T15:17:43Z"},"message":"Resolving concurrent update / delete issues under high load","tree":{"sha":"fec9606dba76fbeff940b3d0dc11af646eec31a3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fec9606dba76fbeff940b3d0dc11af646eec31a3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4eceb6d775de9b4b3804b4622455987f63fd6621","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4eceb6d775de9b4b3804b4622455987f63fd6621","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4eceb6d775de9b4b3804b4622455987f63fd6621","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4eceb6d775de9b4b3804b4622455987f63fd6621/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"99eded2f67048b677776af6147d0b6ce4340c24e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/99eded2f67048b677776af6147d0b6ce4340c24e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/99eded2f67048b677776af6147d0b6ce4340c24e"}],"stats":{"total":215,"additions":130,"deletions":85},"files":[{"sha":"80358128b14da305a126fc9f51324ab24863a06b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=4eceb6d775de9b4b3804b4622455987f63fd6621","patch":"@@ -268,11 +268,10 @@ public List<Group> findDynGroups(final String key) {\n         query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n-                forEachOrdered(actualKey -> {\n-                    Group group = groupDAO.find(actualKey.toString());\n+                forEach(groupKey -> {\n+                    Group group = groupDAO.find(groupKey.toString());\n                     if (group == null) {\n-                        LOG.error(\"Could not find group with id {}, even though returned by the native query\",\n-                                actualKey);\n+                        LOG.error(\"Could not find group {}, even though returned by the native query\", groupKey);\n                     } else if (!result.contains(group)) {\n                         result.add(group);\n                     }"},{"sha":"5700453c5927f625018b51e59ade2edad8b8b26d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":86,"deletions":57,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=4eceb6d775de9b4b3804b4622455987f63fd6621","patch":"@@ -288,7 +288,7 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n             }\n         }\n         clearADynMembers(merged);\n-        merged.getADynMemberships().stream().forEach(memb -> {\n+        merged.getADynMemberships().forEach(memb -> {\n             SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());\n             int count = searchDAO.count(\n                     Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n@@ -327,12 +327,12 @@ public void delete(final Group group) {\n             AnyObject leftEnd = membership.getLeftEnd();\n             leftEnd.remove(membership);\n             membership.setRightEnd(null);\n-            leftEnd.getPlainAttrs(membership).stream().map(attr -> {\n+            leftEnd.getPlainAttrs(membership).forEach(attr -> {\n                 leftEnd.remove(attr);\n                 attr.setOwner(null);\n                 attr.setMembership(null);\n-                return attr;\n-            }).forEachOrdered(attr -> plainAttrDAO.delete(attr));\n+                plainAttrDAO.delete(attr);\n+            });\n \n             anyObjectDAO.save(leftEnd);\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n@@ -342,12 +342,13 @@ public void delete(final Group group) {\n             User leftEnd = membership.getLeftEnd();\n             leftEnd.remove(membership);\n             membership.setRightEnd(null);\n-            leftEnd.getPlainAttrs(membership).stream().map(attr -> {\n+            leftEnd.getPlainAttrs(membership).forEach(attr -> {\n                 leftEnd.remove(attr);\n                 attr.setOwner(null);\n                 attr.setMembership(null);\n-                return attr;\n-            }).forEachOrdered(attr -> plainAttrDAO.delete(attr));\n+\n+                plainAttrDAO.delete(attr);\n+            });\n \n             userDAO.save(leftEnd);\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n@@ -375,17 +376,20 @@ public List<TypeExtension> findTypeExtensions(final AnyTypeClass anyTypeClass) {\n     @SuppressWarnings(\"unchecked\")\n     public List<String> findADynMembers(final Group group) {\n         List<String> result = new ArrayList<>();\n-        group.getADynMemberships().stream().map(memb -> {\n+\n+        group.getADynMemberships().forEach(memb -> {\n             Query query = entityManager().createNativeQuery(\n                     \"SELECT any_id FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=? AND anyType_id=?\");\n             query.setParameter(1, group.getKey());\n             query.setParameter(2, memb.getAnyType().getKey());\n-            return query;\n-        }).forEachOrdered((query) -> {\n+\n             query.getResultList().stream().map(key -> key instanceof Object[]\n                     ? (String) ((Object[]) key)[0]\n                     : ((String) key)).\n-                    forEachOrdered(actualKey -> result.add(actualKey.toString()));\n+                    filter(anyObject -> !result.contains((String) anyObject)).\n+                    forEach(anyObject -> {\n+                        result.add((String) anyObject);\n+                    });\n         });\n \n         return result;\n@@ -448,35 +452,47 @@ private List<ADynGroupMembership> findWithADynMemberships(final AnyType anyType)\n \n     @Transactional\n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public Pair<Set<String>, Set<String>> refreshDynMemberships(final AnyObject anyObject) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT group_id FROM \" + JPAGroupDAO.ADYNMEMB_TABLE + \" WHERE any_id=?\");\n+        query.setParameter(1, anyObject.getKey());\n+\n         Set<String> before = new HashSet<>();\n+        query.getResultList().stream().\n+                map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEach(group -> before.add((String) group));\n+\n         Set<String> after = new HashSet<>();\n-        findWithADynMemberships(anyObject.getType()).stream().map(memb -> {\n+        findWithADynMemberships(anyObject.getType()).stream().\n+                filter(membCond -> jpaAnySearchDAO().matches(\n+                anyObject,\n+                buildDynMembershipCond(membCond.getFIQLCond(), membCond.getGroup().getRealm()))).\n+                forEach(membCond -> {\n+                    if (!before.contains(membCond.getGroup().getKey())) {\n+                        Query insert = entityManager().createNativeQuery(\n+                                \"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");\n+                        insert.setParameter(1, anyObject.getType().getKey());\n+                        insert.setParameter(2, anyObject.getKey());\n+                        insert.setParameter(3, membCond.getGroup().getKey());\n+                        insert.executeUpdate();\n+                    }\n+\n+                    after.add(membCond.getGroup().getKey());\n+\n+                    publisher.publishEvent(\n+                            new AnyCreatedUpdatedEvent<>(this, membCond.getGroup(), AuthContextUtils.getDomain()));\n+                });\n+\n+        before.stream().filter(group -> !after.contains(group)).forEach(group -> {\n             Query delete = entityManager().createNativeQuery(\n                     \"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n-            delete.setParameter(1, memb.getGroup().getKey());\n+            delete.setParameter(1, group);\n             delete.setParameter(2, anyObject.getKey());\n-\n-            if (delete.executeUpdate() > 0) {\n-                before.add(memb.getGroup().getKey());\n-            }\n-\n-            if (jpaAnySearchDAO().matches(\n-                    anyObject,\n-                    buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()))) {\n-\n-                Query insert = entityManager().createNativeQuery(\n-                        \"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");\n-                insert.setParameter(1, anyObject.getType().getKey());\n-                insert.setParameter(2, anyObject.getKey());\n-                insert.setParameter(3, memb.getGroup().getKey());\n-                insert.executeUpdate();\n-\n-                after.add(memb.getGroup().getKey());\n-            }\n-            return memb;\n-        }).forEachOrdered(memb -> publisher.publishEvent(\n-                new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain())));\n+            delete.executeUpdate();\n+        });\n \n         return Pair.of(before, after);\n     }\n@@ -513,7 +529,8 @@ public List<String> findUDynMembers(final Group group) {\n         List<String> result = new ArrayList<>();\n         query.getResultList().stream().map(key -> key instanceof Object[]\n                 ? (String) ((Object[]) key)[0]\n-                : ((String) key)).forEachOrdered(actualKey -> result.add(actualKey.toString()));\n+                : ((String) key)).\n+                forEach(user -> result.add((String) user));\n         return result;\n     }\n \n@@ -534,34 +551,46 @@ private List<UDynGroupMembership> findWithUDynMemberships() {\n \n     @Transactional\n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public Pair<Set<String>, Set<String>> refreshDynMemberships(final User user) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT group_id FROM \" + JPAGroupDAO.UDYNMEMB_TABLE + \" WHERE any_id=?\");\n+        query.setParameter(1, user.getKey());\n+\n         Set<String> before = new HashSet<>();\n+        query.getResultList().stream().\n+                map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEach(group -> before.add((String) group));\n+\n         Set<String> after = new HashSet<>();\n-        findWithUDynMemberships().stream().map(memb -> {\n+        findWithUDynMemberships().stream().\n+                filter(membCond -> jpaAnySearchDAO().matches(\n+                user,\n+                buildDynMembershipCond(membCond.getFIQLCond(), membCond.getGroup().getRealm()))).\n+                forEach(membCond -> {\n+                    if (!before.contains(membCond.getGroup().getKey())) {\n+                        Query insert = entityManager().createNativeQuery(\n+                                \"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                        insert.setParameter(1, user.getKey());\n+                        insert.setParameter(2, membCond.getGroup().getKey());\n+                        insert.executeUpdate();\n+                    }\n+\n+                    after.add(membCond.getGroup().getKey());\n+\n+                    publisher.publishEvent(\n+                            new AnyCreatedUpdatedEvent<>(this, membCond.getGroup(), AuthContextUtils.getDomain()));\n+                });\n+\n+        before.stream().filter(group -> !after.contains(group)).forEach(group -> {\n             Query delete = entityManager().createNativeQuery(\n                     \"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n-            delete.setParameter(1, memb.getGroup().getKey());\n+            delete.setParameter(1, group);\n             delete.setParameter(2, user.getKey());\n-\n-            if (delete.executeUpdate() > 0) {\n-                before.add(memb.getGroup().getKey());\n-            }\n-\n-            if (jpaAnySearchDAO().matches(\n-                    user,\n-                    buildDynMembershipCond(memb.getFIQLCond(), memb.getGroup().getRealm()))) {\n-\n-                Query insert = entityManager().createNativeQuery(\n-                        \"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                insert.setParameter(1, user.getKey());\n-                insert.setParameter(2, memb.getGroup().getKey());\n-                insert.executeUpdate();\n-\n-                after.add(memb.getGroup().getKey());\n-            }\n-            return memb;\n-        }).forEachOrdered(memb -> publisher.publishEvent(\n-                new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain())));\n+            delete.executeUpdate();\n+        });\n \n         return Pair.of(before, after);\n     }"},{"sha":"1cbf9bab097746d757a03984023ccc62668abaf8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":35,"deletions":16,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=4eceb6d775de9b4b3804b4622455987f63fd6621","patch":"@@ -20,7 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -142,6 +144,7 @@ public void delete(final String key) {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<String> findDynMembers(final Role role) {\n         if (role.getDynMembership() == null) {\n             return Collections.emptyList();\n@@ -151,13 +154,10 @@ public List<String> findDynMembers(final Role role) {\n         query.setParameter(1, role.getKey());\n \n         List<String> result = new ArrayList<>();\n-        for (Object key : query.getResultList()) {\n-            String actualKey = key instanceof Object[]\n-                    ? (String) ((Object[]) key)[0]\n-                    : ((String) key);\n-\n-            result.add(actualKey);\n-        }\n+        query.getResultList().stream().map(key -> key instanceof Object[]\n+                ? (String) ((Object[]) key)[0]\n+                : ((String) key)).\n+                forEach(user -> result.add((String) user));\n         return result;\n     }\n \n@@ -170,20 +170,39 @@ public void clearDynMembers(final Role role) {\n \n     @Transactional\n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public void refreshDynMemberships(final User user) {\n-        findAll().stream().filter(role -> role.getDynMembership() != null).forEach(role -> {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT role_id FROM \" + DYNMEMB_TABLE + \" WHERE any_id=?\");\n+        query.setParameter(1, user.getKey());\n+\n+        Set<String> before = new HashSet<>();\n+        query.getResultList().stream().\n+                map(resultKey -> resultKey instanceof Object[]\n+                ? (String) ((Object[]) resultKey)[0]\n+                : ((String) resultKey)).\n+                forEach(role -> before.add((String) role));\n+\n+        Set<String> after = new HashSet<>();\n+        findAll().stream().\n+                filter(role -> role.getDynMembership() != null\n+                && searchDAO.matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))\n+                && !before.contains(role.getKey())).\n+                forEach(role -> {\n+                    Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                    insert.setParameter(1, user.getKey());\n+                    insert.setParameter(2, role.getKey());\n+                    insert.executeUpdate();\n+\n+                    after.add(role.getKey());\n+                });\n+\n+        before.stream().filter(role -> !after.contains(role)).forEach(role -> {\n             Query delete = entityManager().createNativeQuery(\n                     \"DELETE FROM \" + DYNMEMB_TABLE + \" WHERE role_id=? AND any_id=?\");\n-            delete.setParameter(1, role.getKey());\n+            delete.setParameter(1, role);\n             delete.setParameter(2, user.getKey());\n             delete.executeUpdate();\n-\n-            if (searchDAO.matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n-                Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                insert.setParameter(1, user.getKey());\n-                insert.setParameter(2, role.getKey());\n-                insert.executeUpdate();\n-            }\n         });\n     }\n "},{"sha":"01e90c7d33df10449bd9e7da817ca39573a7b084","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4eceb6d775de9b4b3804b4622455987f63fd6621/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=4eceb6d775de9b4b3804b4622455987f63fd6621","patch":"@@ -448,11 +448,10 @@ public List<Role> findDynRoles(final String key) {\n         query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n-                forEachOrdered(actualKey -> {\n-                    Role role = roleDAO.find(actualKey.toString());\n+                forEachOrdered(roleKey -> {\n+                    Role role = roleDAO.find(roleKey.toString());\n                     if (role == null) {\n-                        LOG.error(\"Could not find role with id {}, even though returned by the native query\",\n-                                actualKey);\n+                        LOG.error(\"Could not find role {}, even though returned by the native query\", roleKey);\n                     } else if (!result.contains(role)) {\n                         result.add(role);\n                     }\n@@ -472,11 +471,10 @@ public List<Group> findDynGroups(final String key) {\n         query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n-                forEachOrdered(actualKey -> {\n-                    Group group = groupDAO.find(actualKey.toString());\n+                forEach(groupKey -> {\n+                    Group group = groupDAO.find(groupKey.toString());\n                     if (group == null) {\n-                        LOG.error(\"Could not find group with id {}, even though returned by the native query\",\n-                                actualKey);\n+                        LOG.error(\"Could not find group {}, even though returned by the native query\", groupKey);\n                     } else if (!result.contains(group)) {\n                         result.add(group);\n                     }"}]}