{"sha":"1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFkNGQ4YzY5NzcxMWZhMDNjMWY5ZjlmMzAyMTM0NmEyMGY0YmIyZjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-17T15:58:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-17T16:08:00Z"},"message":"[SYNCOPE-1508] Ensuring PropagationActions#moreAttrsToGet is invoked during Push","tree":{"sha":"7ec0a3af708b35a6033087220f5564e7202f73d9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7ec0a3af708b35a6033087220f5564e7202f73d9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a7b927cd0a6d0f5f4d4126c4d680fdee92faf9f4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a7b927cd0a6d0f5f4d4126c4d680fdee92faf9f4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a7b927cd0a6d0f5f4d4126c4d680fdee92faf9f4"}],"stats":{"total":40,"additions":28,"deletions":12},"files":[{"sha":"4ac88eb04b77cb67a780036c86ea55457e4fe5e4","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPropagationActions.groovy","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy?ref=1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","patch":"@@ -18,6 +18,7 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n+import java.util.Optional\n import java.util.Set\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit\n import org.apache.syncope.core.persistence.api.entity.resource.Provision\n@@ -30,12 +31,12 @@ import org.identityconnectors.framework.common.objects.ConnectorObject\n class MyPropagationActions implements PropagationActions {\n   \n   @Override\n-  Set<String> moreAttrsToGet(PropagationTask task, OrgUnit orgUnit) {\n+  Set<String> moreAttrsToGet(Optional<PropagationTask> task, OrgUnit orgUnit) {\n     return Set.of();\n   }\n \n   @Override\n-  Set<String> moreAttrsToGet(PropagationTask task, Provision provision) {\n+  Set<String> moreAttrsToGet(Optional<PropagationTask> task, Provision provision) {\n     return Set.of();\n   }\n "},{"sha":"a7bd7043ed0106ef7e00111f20316da2f7566cc0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationActions.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java?ref=1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.propagation;\n \n+import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -34,7 +35,7 @@ public interface PropagationActions {\n      * @param orgUnit Realm provisioning information\n      * @return additional attributes to include in the result from the underlying connector\n      */\n-    default Set<String> moreAttrsToGet(PropagationTask task, OrgUnit orgUnit) {\n+    default Set<String> moreAttrsToGet(Optional<PropagationTask> task, OrgUnit orgUnit) {\n         return Set.of();\n     }\n \n@@ -45,7 +46,7 @@ default Set<String> moreAttrsToGet(PropagationTask task, OrgUnit orgUnit) {\n      * @param provision Any provisioning information\n      * @return additional attributes to include in the result from the underlying connector\n      */\n-    default Set<String> moreAttrsToGet(PropagationTask task, Provision provision) {\n+    default Set<String> moreAttrsToGet(Optional<PropagationTask> task, Provision provision) {\n         return Set.of();\n     }\n "},{"sha":"0aabd5f38f9e406aa67008807c0ff6243942911e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","patch":"@@ -399,7 +399,7 @@ public TaskExec execute(\n             provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName())).orElse(null);\n             orgUnit = task.getResource().getOrgUnit();\n \n-            if (taskInfo.getBeforeObj() == null) {\n+            if (taskInfo.getBeforeObj() == null || !taskInfo.getBeforeObj().isPresent()) {\n                 // Try to read remote object BEFORE any actual operation\n                 beforeObj = provision == null && orgUnit == null\n                         ? null\n@@ -693,7 +693,7 @@ protected ConnectorObject getRemoteObject(\n                 : task.getOldConnObjectKey();\n \n         Set<String> moreAttrsToGet = new HashSet<>();\n-        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(task, orgUnit)));\n+        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(Optional.of(task), orgUnit)));\n \n         ConnectorObject obj = null;\n         Optional<? extends OrgUnitItem> connObjectKeyItem = orgUnit.getConnObjectKeyItem();"},{"sha":"3c0e13b040fa4d9d6f626e2121d53b4e63c3f377","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","patch":"@@ -165,7 +165,7 @@ protected void provision(final Any<?> any, final Boolean enable, final Provision\n                 before.getVirAttrs(),\n                 noPropResources);\n         if (!taskInfos.isEmpty()) {\n-            taskInfos.get(0).setBeforeObj(Optional.ofNullable(null));\n+            taskInfos.get(0).setBeforeObj(Optional.empty());\n             PropagationReporter reporter = new DefaultPropagationReporter();\n             taskExecutor.execute(taskInfos.get(0), reporter, adminUser);\n             reportPropagation(result, reporter);"},{"sha":"0479822318244ceb3d014e0b6d1b6fa865a15709","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","patch":"@@ -372,7 +372,7 @@ protected void provision(\n                 null,\n                 null);\n         if (!taskInfos.isEmpty()) {\n-            taskInfos.get(0).setBeforeObj(Optional.ofNullable(null));\n+            taskInfos.get(0).setBeforeObj(Optional.empty());\n             PropagationReporter reporter = new DefaultPropagationReporter();\n             taskExecutor.execute(taskInfos.get(0), reporter, adminUser);\n             reportPropagation(result, reporter);\n@@ -399,7 +399,7 @@ protected void update(\n                         propByLinkedAccount,\n                         \"\"));\n         if (!taskInfos.isEmpty()) {\n-            taskInfos.get(0).setBeforeObj(Optional.ofNullable(null));\n+            taskInfos.get(0).setBeforeObj(Optional.empty());\n             PropagationReporter reporter = new DefaultPropagationReporter();\n             taskExecutor.execute(taskInfos.get(0), reporter, adminUser);\n             reportPropagation(result, reporter);"},{"sha":"4536fca97698f75ef4eca4711463114004c1b001","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=1d4d8c697711fa03c1f9f9f3021346a20f4bb2f5","patch":"@@ -110,7 +110,7 @@ public List<ConnectorObject> match(\n         }\n \n         Set<String> moreAttrsToGet = new HashSet<>();\n-        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(task, provision)));\n+        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(Optional.of(task), provision)));\n \n         List<ConnectorObject> result = new ArrayList<>();\n         try {\n@@ -150,6 +150,20 @@ public List<ConnectorObject> match(\n             final Optional<String[]> moreAttrsToGet,\n             final LinkingMappingItem... linkingItems) {\n \n+        Set<String> matgFromPropagationActions = new HashSet<>();\n+        provision.getResource().getPropagationActions().forEach(impl -> {\n+            try {\n+                matgFromPropagationActions.addAll(\n+                        ImplementationManager.<PropagationActions>build(impl).\n+                                moreAttrsToGet(Optional.empty(), provision));\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", impl, e);\n+            }\n+        });\n+        Optional<String[]> effectiveMATG = Optional.of(Stream.concat(\n+                moreAttrsToGet.map(Stream::of).orElse(Stream.empty()),\n+                matgFromPropagationActions.stream()).toArray(String[]::new));\n+\n         Optional<PushCorrelationRule> rule = rule(provision);\n \n         List<ConnectorObject> result = new ArrayList<>();\n@@ -159,7 +173,7 @@ public List<ConnectorObject> match(\n                         connector,\n                         rule.get().getFilter(any, provision),\n                         provision,\n-                        moreAttrsToGet,\n+                        effectiveMATG,\n                         ArrayUtils.isEmpty(linkingItems)\n                         ? Optional.empty() : Optional.of(List.of(linkingItems))));\n             } else {\n@@ -172,7 +186,7 @@ public List<ConnectorObject> match(\n                             connObjectKeyItem.get(),\n                             connObjectKeyValue.get(),\n                             provision,\n-                            moreAttrsToGet,\n+                            effectiveMATG,\n                             ArrayUtils.isEmpty(linkingItems)\n                             ? Optional.empty() : Optional.of(List.of(linkingItems))).\n                             ifPresent(result::add);"}]}