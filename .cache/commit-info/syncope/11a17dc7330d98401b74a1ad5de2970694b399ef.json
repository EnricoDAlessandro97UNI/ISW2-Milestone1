{"sha":"11a17dc7330d98401b74a1ad5de2970694b399ef","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExYTE3ZGM3MzMwZDk4NDAxYjc0YTFhZDVkZTI5NzA2OTRiMzk5ZWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-10-22T10:20:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-10-22T10:20:53Z"},"message":"Fixing some more CodeQL notes","tree":{"sha":"909dcc2210e645b4adf6c7066899a2667052313f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/909dcc2210e645b4adf6c7066899a2667052313f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/11a17dc7330d98401b74a1ad5de2970694b399ef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11a17dc7330d98401b74a1ad5de2970694b399ef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11a17dc7330d98401b74a1ad5de2970694b399ef","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11a17dc7330d98401b74a1ad5de2970694b399ef/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"414ca206a3979150286202c8e9cdad61553ff81f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/414ca206a3979150286202c8e9cdad61553ff81f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/414ca206a3979150286202c8e9cdad61553ff81f"}],"stats":{"total":236,"additions":126,"deletions":110},"files":[{"sha":"3a86f00018856b1adc7feb6299dea6b303dd0b05","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AbstractMultiPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractMultiPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractMultiPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractMultiPanel.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -81,7 +81,7 @@ public AbstractMultiPanel<INNER> setFormAsMultipart(final boolean multipart) {\n     private Fragment getNoDataFragment(final IModel<List<INNER>> model, final String label) {\n         final Fragment fragment = new Fragment(\"content\", \"noDataFragment\", AbstractMultiPanel.this);\n         fragment.add(new Label(\"field-label\", new ResourceModel(label, label)));\n-        fragment.add(getPlusFragment(model, label));\n+        fragment.add(getPlusFragment(model));\n         return fragment;\n     }\n \n@@ -91,7 +91,7 @@ private Fragment getDataFragment() {\n         return contentFragment;\n     }\n \n-    private Fragment getPlusFragment(final IModel<List<INNER>> model, final String label) {\n+    private Fragment getPlusFragment(final IModel<List<INNER>> model) {\n         final IndicatorAjaxSubmitLink plus = new IndicatorAjaxSubmitLink(\"add\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n@@ -186,7 +186,7 @@ protected void onError(final AjaxRequestTarget target) {\n \n             final Fragment fragment;\n             if (item.getIndex() == model.getObject().size() - 1) {\n-                fragment = getPlusFragment(model, label);\n+                fragment = getPlusFragment(model);\n             } else {\n                 fragment = new Fragment(\"panelPlus\", \"emptyFragment\", AbstractMultiPanel.this);\n             }\n@@ -201,6 +201,7 @@ protected void clearInput(final Panel panel) {\n         // do nothing by default\n     }\n \n+    @Override\n     public AbstractFieldPanel<List<INNER>> setReadOnly(final boolean readOnly) {\n         container.setEnabled(!readOnly);\n         return this;"},{"sha":"125a9364a2f47fcc72c14fff8d0537a4654034ff","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxSpinnerFieldPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -181,7 +181,8 @@ public void setObject(final T object) {\n         return this;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @Override\n     public FieldPanel<T> setNewModel(final Attributable attributableTO, final String schema) {\n         field.setModel(new Model() {\n \n@@ -213,7 +214,6 @@ public void setObject(final Serializable object) {\n                     attributableTO.getPlainAttr(schema).get().getValues().add(object.toString());\n                 }\n             }\n-\n         });\n \n         return this;"},{"sha":"3595494d25758c8671ebcd624da4543f95e0b3d7","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/DateFieldPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -124,6 +124,7 @@ public void setObject(final Date object) {\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @Override\n     public FieldPanel<Date> setNewModel(final Attributable attributableTO, final String schema) {\n         field.setModel(new Model() {\n \n@@ -148,7 +149,6 @@ public void setObject(final Serializable object) {\n                     attributableTO.getPlainAttr(schema).get().getValues().add(fmt.format(object));\n                 }\n             }\n-\n         });\n \n         return this;"},{"sha":"ef8c8e3ae0ba2f47242e03bc72b95989a12734aa","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -271,8 +271,20 @@ protected IRequestablePage getErrorPage(final PageParameters errorParameters) {\n         if (BooleanUtils.toBoolean(props.getProperty(\"x-forward\"))) {\n             XForwardedRequestWrapperFactory.Config config = new XForwardedRequestWrapperFactory.Config();\n             config.setProtocolHeader(props.getProperty(\"x-forward.protocol.header\", HttpHeaders.X_FORWARDED_PROTO));\n-            config.setHttpServerPort(Integer.valueOf(props.getProperty(\"x-forward.http.port\", \"80\")));\n-            config.setHttpsServerPort(Integer.valueOf(props.getProperty(\"x-forward.https.port\", \"443\")));\n+            try {\n+                config.setHttpServerPort(Integer.valueOf(props.getProperty(\"x-forward.http.port\", \"80\")));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"Invalid value provided for 'x-forward.http.port': {}\",\n+                        props.getProperty(\"x-forward.http.port\"));\n+                config.setHttpServerPort(80);\n+            }\n+            try {\n+                config.setHttpsServerPort(Integer.valueOf(props.getProperty(\"x-forward.https.port\", \"443\")));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"Invalid value provided for 'x-forward.https.port': {}\",\n+                        props.getProperty(\"x-forward.https.port\"));\n+                config.setHttpsServerPort(443);\n+            }\n \n             XForwardedRequestWrapperFactory factory = new XForwardedRequestWrapperFactory();\n             factory.setConfig(config);"},{"sha":"7193aabe73c8e0d0f76909786c9dfb15002d40e7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.client.ui.commons.rest.RestClient;\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BatchResponseColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n@@ -89,19 +88,17 @@\n     private SortableDataProvider<T, S> dataProvider;\n \n     public BatchContent(\n-            final BaseModal<?> modal,\n             final List<T> items,\n             final List<IColumn<T, S>> columns,\n             final Collection<ActionLink.ActionType> actions,\n             final RestClient batchExecutor,\n             final String keyFieldName) {\n \n-        this(MultilevelPanel.SECOND_LEVEL_ID, modal, items, columns, actions, batchExecutor, keyFieldName);\n+        this(MultilevelPanel.SECOND_LEVEL_ID, items, columns, actions, batchExecutor, keyFieldName);\n     }\n \n     public BatchContent(\n             final String id,\n-            final BaseModal<?> modal,\n             final List<T> items,\n             final List<IColumn<T, S>> columns,\n             final Collection<ActionLink.ActionType> actions,\n@@ -368,7 +365,6 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n     public BatchContent(\n             final String id,\n-            final BaseModal<T> modal,\n             final List<T> items,\n             final List<IColumn<T, S>> columns,\n             final Map<String, String> results,"},{"sha":"8d5b8d94b878612c1dfd0e02e0929f866bacea54","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/batch/BatchModal.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -44,7 +44,7 @@ public BatchModal(\n             final String keyFieldName) {\n \n         super(modal, pageRef);\n-        add(new BatchContent<>(\"content\", modal, items, columns, actions, batchExecutor, keyFieldName).\n+        add(new BatchContent<>(\"content\", items, columns, actions, batchExecutor, keyFieldName).\n                 setRenderBodyOnly(true));\n     }\n \n@@ -58,7 +58,7 @@ public BatchModal(\n             final AjaxRequestTarget target) {\n \n         super(modal, pageRef);\n-        add(new BatchContent<>(\"content\", modal, items, columns, results, keyFieldName, target, pageRef).\n+        add(new BatchContent<>(\"content\", items, columns, results, keyFieldName, target, pageRef).\n                 setRenderBodyOnly(true));\n     }\n }"},{"sha":"04010be6490c083d4d48e2aa6e204c230f0624e7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AjaxDataTablePanel.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -271,7 +271,6 @@ protected void onSubmit(final AjaxRequestTarget target) {\n                 } else {\n                     builder.multiLevelPanel.next(getString(\"batch\"),\n                             new BatchContent<>(\n-                                    builder.baseModal,\n                                     new ArrayList<>(group.getModelObject()),\n                                     builder.columns.size() == 1\n                                     ? builder.columns"},{"sha":"601e796d08ce10b928d6cf91b147975f2a7799ca","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/FailureMessageModal.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/414ca206a3979150286202c8e9cdad61553ff81f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FFailureMessageModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/414ca206a3979150286202c8e9cdad61553ff81f/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FFailureMessageModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FFailureMessageModal.java?ref=414ca206a3979150286202c8e9cdad61553ff81f","patch":"@@ -1,43 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import java.io.Serializable;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.Model;\n-\n-public class FailureMessageModal<T extends Serializable> extends Panel implements ModalPanel {\n-\n-    private static final long serialVersionUID = 9216117990503199258L;\n-\n-    public FailureMessageModal(final PageReference pageRef, final String failureMessage) {\n-        super(BaseModal.CONTENT_ID);\n-        final Label executionFailureMessage;\n-        if (!failureMessage.isEmpty()) {\n-            executionFailureMessage = new Label(\"failureMessage\", new Model<>(failureMessage));\n-        } else {\n-            executionFailureMessage = new Label(\"failureMessage\");\n-        }\n-        add(executionFailureMessage.setOutputMarkupId(true));\n-    }\n-}"},{"sha":"8aece7ac0d0f30d3d9b595a5fdf467a5f43898e7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationEngineTogglePanel.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationEngineTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationEngineTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationEngineTogglePanel.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -80,5 +80,4 @@ protected void onError(final AjaxRequestTarget target) {\n     public void setHeaderLabel(final AjaxRequestTarget target) {\n         setHeader(target, getString(\"engine\"));\n     }\n-\n }"},{"sha":"72fca74463adfa658463bf6ed6f695f9a1236b92","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -117,7 +117,7 @@ protected WizardModel buildModelSteps(final AnyWrapper<A> modelObject, final Wiz\n         // attributes panel steps\n         if (formLayoutInfo.isPlainAttrs()) {\n             wizardModel.add(\n-                    new PlainAttrs(modelObject, null, mode, anyTypeClasses, formLayoutInfo.getWhichPlainAttrs()) {\n+                    new PlainAttrs(modelObject, mode, anyTypeClasses, formLayoutInfo.getWhichPlainAttrs()) {\n \n                 private static final long serialVersionUID = 8167894751609598306L;\n "},{"sha":"d331e7a9958fd8d860333cc521e4c39e51a47028","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.IModel;\n@@ -56,7 +55,6 @@ public class PlainAttrs extends AbstractAttrs<PlainSchemaTO> {\n \n     public <T extends AnyTO> PlainAttrs(\n             final AnyWrapper<T> modelObject,\n-            final Form<?> form,\n             final AjaxWizard.Mode mode,\n             final List<String> anyTypeClasses,\n             final List<String> whichPlainAttrs) throws IllegalArgumentException {"},{"sha":"90a4d4dbf450ba06c4d78315eb348dba4d5d8a60","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":52,"deletions":11,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -61,7 +61,7 @@\n import org.apache.wicket.markup.head.IHeaderResponse;\n import org.apache.wicket.markup.html.IHeaderContributor;\n import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener;\n+import org.apache.wicket.protocol.http.ResourceIsolationRequestCycleListener;\n import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapperFactory;\n import org.apache.wicket.request.Request;\n@@ -159,16 +159,45 @@ protected void init() {\n \n         useGZIPCompression = BooleanUtils.toBoolean(props.getProperty(\"useGZIPCompression\"));\n         Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n-        maxUploadFileSizeMB = props.getProperty(\"maxUploadFileSizeMB\") == null\n-                ? null\n-                : Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\"));\n \n-        maxWaitTime = Integer.valueOf(props.getProperty(\"maxWaitTimeOnApplyChanges\", \"30\"));\n+        try {\n+            maxUploadFileSizeMB = Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\", \"4\"));\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value provided for 'maxUploadFileSizeMB': {}\",\n+                    props.getProperty(\"maxUploadFileSizeMB\"));\n+            maxUploadFileSizeMB = 4;\n+        }\n+\n+        try {\n+            maxWaitTime = Integer.valueOf(props.getProperty(\"maxWaitTimeOnApplyChanges\", \"30\"));\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value provided for 'maxWaitTimeOnApplyChanges': {}\",\n+                    props.getProperty(\"maxWaitTimeOnApplyChanges\"));\n+            maxWaitTime = 30;\n+        }\n \n         // Resource connections check thread pool size\n-        corePoolSize = Integer.valueOf(props.getProperty(\"executor.corePoolSize\", \"5\"));\n-        maxPoolSize = Integer.valueOf(props.getProperty(\"executor.maxPoolSize\", \"10\"));\n-        queueCapacity = Integer.valueOf(props.getProperty(\"executor.queueCapacity\", \"50\"));\n+        try {\n+            corePoolSize = Integer.valueOf(props.getProperty(\"executor.corePoolSize\", \"5\"));\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value provided for 'executor.corePoolSize': {}\",\n+                    props.getProperty(\"executor.corePoolSize\"));\n+            corePoolSize = 5;\n+        }\n+        try {\n+            maxPoolSize = Integer.valueOf(props.getProperty(\"executor.maxPoolSize\", \"10\"));\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value provided for 'executor.maxPoolSize': {}\",\n+                    props.getProperty(\"executor.maxPoolSize\"));\n+            maxPoolSize = 10;\n+        }\n+        try {\n+            queueCapacity = Integer.valueOf(props.getProperty(\"executor.queueCapacity\", \"50\"));\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value provided for 'executor.queueCapacity': {}\",\n+                    props.getProperty(\"executor.queueCapacity\"));\n+            maxPoolSize = 50;\n+        }\n \n         // read customFormAttributes.json\n         File enduserDir;\n@@ -295,16 +324,28 @@ protected IRequestablePage getErrorPage(final PageParameters errorParameters) {\n         if (BooleanUtils.toBoolean(props.getProperty(\"x-forward\"))) {\n             XForwardedRequestWrapperFactory.Config config = new XForwardedRequestWrapperFactory.Config();\n             config.setProtocolHeader(props.getProperty(\"x-forward.protocol.header\", HttpHeaders.X_FORWARDED_PROTO));\n-            config.setHttpServerPort(Integer.valueOf(props.getProperty(\"x-forward.http.port\", \"80\")));\n-            config.setHttpsServerPort(Integer.valueOf(props.getProperty(\"x-forward.https.port\", \"443\")));\n+            try {\n+                config.setHttpServerPort(Integer.valueOf(props.getProperty(\"x-forward.http.port\", \"80\")));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"Invalid value provided for 'x-forward.http.port': {}\",\n+                        props.getProperty(\"x-forward.http.port\"));\n+                config.setHttpServerPort(80);\n+            }\n+            try {\n+                config.setHttpsServerPort(Integer.valueOf(props.getProperty(\"x-forward.https.port\", \"443\")));\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"Invalid value provided for 'x-forward.https.port': {}\",\n+                        props.getProperty(\"x-forward.https.port\"));\n+                config.setHttpsServerPort(443);\n+            }\n \n             XForwardedRequestWrapperFactory factory = new XForwardedRequestWrapperFactory();\n             factory.setConfig(config);\n             getFilterFactoryManager().add(factory);\n         }\n \n         if (BooleanUtils.toBoolean(props.getProperty(\"csrf\"))) {\n-            getRequestCycleListeners().add(new CsrfPreventionRequestCycleListener());\n+            getRequestCycleListeners().add(new ResourceIsolationRequestCycleListener());\n         }\n         getRequestCycleListeners().add(new IRequestCycleListener() {\n "},{"sha":"be2c63d522a70db2894e5d5285f68b14bbed0f2f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AbstractAttrs.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -99,8 +99,9 @@ private List<MembershipTO> loadMembershipAttrs() {\n \n             for (MembershipTO membership : (List<MembershipTO>) PropertyResolver.getPropertyField(\n                     \"memberships\", anyTO).get(anyTO)) {\n-                setSchemas(Pair.of(membership.getGroupKey(), membership.getGroupName()), getMembershipAuxClasses(\n-                        membership, anyTO.getType()));\n+                setSchemas(\n+                        Pair.of(membership.getGroupKey(), membership.getGroupName()),\n+                        getMembershipAuxClasses(membership));\n                 setAttrs(membership);\n \n                 if (AbstractAttrs.this instanceof PlainAttrs && !membership.getPlainAttrs().isEmpty()) {\n@@ -134,7 +135,7 @@ protected boolean renderAsReadonly(final String schema, final String groupName)\n     protected List<String> getDefaultValues(final String schema) {\n         return getDefaultValues(schema, null);\n     }\n-    \n+\n     protected List<String> getDefaultValues(final String schema, final String groupName) {\n         String schemaName = (org.apache.commons.lang3.StringUtils.isBlank(groupName)\n                 ? org.apache.commons.lang3.StringUtils.EMPTY\n@@ -203,7 +204,7 @@ public void renderHead(final IHeaderResponse response) {\n \n     protected abstract List<Attr> getAttrsFromTO(MembershipTO membershipTO);\n \n-    protected static List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n+    protected static List<String> getMembershipAuxClasses(final MembershipTO membershipTO) {\n         try {\n             return SyncopeRestClient.searchUserTypeExtensions(membershipTO.getGroupName());\n         } catch (Exception e) {"},{"sha":"1494482ca6eac7612e16380a709258dfd601ac88","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AnyWizardBuilder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -94,7 +94,6 @@ protected WizardModel buildModelSteps(final AnyWrapper<UserTO> modelObject, fina\n         wizardModel.add(new UserDetails(\n                 UserWrapper.class.cast(modelObject),\n                 mode == AjaxWizard.Mode.TEMPLATE,\n-                modelObject.getInnerObject().getKey() != null,\n                 UserFormLayoutInfo.class.cast(formLayoutInfo).isPasswordManagement(),\n                 pageRef));\n \n@@ -110,7 +109,6 @@ protected WizardModel buildModelSteps(final AnyWrapper<UserTO> modelObject, fina\n         if (formLayoutInfo.isPlainAttrs()) {\n             wizardModel.add(new PlainAttrs(\n                     modelObject,\n-                    null,\n                     mode,\n                     anyTypeClasses,\n                     formLayoutInfo.getWhichPlainAttrs()) {"},{"sha":"5a5eeb1d7c5f17617d1574417a0c940c5ad1a922","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/PlainAttrs.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -60,7 +60,6 @@\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n@@ -84,7 +83,6 @@ public class PlainAttrs extends AbstractAttrs<PlainSchemaTO> {\n \n     public <T extends AnyTO> PlainAttrs(\n             final AnyWrapper<T> modelObject,\n-            final Form<?> form,\n             final AjaxWizard.Mode mode,\n             final List<String> anyTypeClasses,\n             final Map<String, CustomizationOption> whichPlainAttrs) throws IllegalArgumentException {\n@@ -378,7 +376,7 @@ protected PageReference getPageReference() {\n \n         panel.setReadOnly(readOnly);\n         panel.setMarkupId(StringUtils.isBlank(groupName) ? schemaTO.getKey() : groupName + '.' + schemaTO.getKey());\n-        \n+\n         return panel;\n     }\n \n@@ -423,7 +421,7 @@ protected void populateItem(final ListItem<Attr> item) {\n                     } else {\n                         FieldPanel.class.cast(panel).setNewModel(attrTO.getValues());\n                     }\n-                    \n+\n                     item.add(panel);\n                 }\n             });"},{"sha":"11b61ffa8f405d23a8d376b506db3a221e46b374","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/UserDetails.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -74,7 +74,6 @@ public class UserDetails extends WizardStep {\n     public UserDetails(\n             final UserWrapper wrapper,\n             final boolean templateMode,\n-            final boolean includeStatusPanel,\n             final boolean showPasswordManagement,\n             final PageReference pageRef) {\n         super();"},{"sha":"a7e9220f0539739a9ff42558788ea3b5b3e96f4a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -402,7 +402,7 @@ private static Collection<Attr> patch(final Map<String, Attr> attrs, final Set<A\n             if (patch.getAttr() == null) {\n                 LOG.warn(\"Invalid {} specified: {}\", AttrPatch.class.getName(), patch);\n             } else {\n-                Attr removed = rwattrs.remove(patch.getAttr().getSchema());\n+                rwattrs.remove(patch.getAttr().getSchema());\n                 if (patch.getOperation() == PatchOperation.ADD_REPLACE && !patch.getAttr().getValues().isEmpty()) {\n                     rwattrs.put(patch.getAttr().getSchema(), patch.getAttr());\n                 }"},{"sha":"e7e0191a75ec5502baba143591b18307ea913948","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeFiqlParser.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -21,6 +21,7 @@\n import java.util.Map;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import org.apache.commons.lang3.StringUtils;\n \n import org.apache.cxf.jaxrs.ext.search.ConditionType;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n@@ -72,7 +73,7 @@ protected ASTNode<T> parseComparison(final String expr) throws SearchParseExcept\n             String propertyName = expr.substring(0, m.start(1));\n             String operator = m.group(1);\n             String value = expr.substring(m.end(1));\n-            if (\"\".equals(value)) {\n+            if (StringUtils.isBlank(value)) {\n                 throw new SearchParseException(\"Not a comparison expression: \" + expr);\n             }\n "},{"sha":"ef096344fc77c3a4dc3065c5dd651c8afe757184","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/AbstractClientApp.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -100,10 +100,12 @@ public void setAuthPolicy(final AuthPolicy authPolicy) {\n         this.authPolicy = (JPAAuthPolicy) authPolicy;\n     }\n \n+    @Override\n     public JPAAccessPolicy getAccessPolicy() {\n         return accessPolicy;\n     }\n \n+    @Override\n     public void setAccessPolicy(final AccessPolicy accessPolicy) {\n         checkType(accessPolicy, JPAAccessPolicy.class);\n         this.accessPolicy = (JPAAccessPolicy) accessPolicy;"},{"sha":"9198dad5162488a0a34ea0dd2ac06033914a8ce0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPACASSP.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSP.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -18,11 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n-import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n-\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n \n @Entity\n @Table(name = JPACASSP.TABLE)\n@@ -35,10 +34,12 @@ public class JPACASSP extends AbstractClientApp implements CASSP {\n     @Column(unique = true, nullable = false)\n     private String serviceId;\n \n+    @Override\n     public String getServiceId() {\n         return serviceId;\n     }\n \n+    @Override\n     public void setServiceId(final String serviceId) {\n         this.serviceId = serviceId;\n     }"},{"sha":"eb25d3556eeae569d8451d63ce11bdeeddeeb9ce","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/LocaleValueHandler.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -41,21 +41,16 @@ public static LocaleValueHandler getInstance() {\n         return INSTANCE;\n     }\n \n-    /**\n-     *\n-     *\n-     * @deprecated\n-     */\n     @Override\n     @Deprecated\n     public Column[] map(final ValueMapping vm, final String name, final ColumnIO io, final boolean adapt) {\n         DBDictionary dict = vm.getMappingRepository().getDBDictionary();\n-        DBIdentifier colName = DBIdentifier.newColumn(name, Optional.ofNullable(dict)\n-            .filter(DBDictionary::delimitAll).isPresent());\n-        return map(vm, colName, io, adapt);\n+        DBIdentifier colName = DBIdentifier.newColumn(\n+                name, Optional.ofNullable(dict).filter(DBDictionary::delimitAll).isPresent());\n+        return map(colName);\n     }\n \n-    public static Column[] map(final ValueMapping vm, final DBIdentifier name, final ColumnIO io, final boolean adapt) {\n+    public static Column[] map(final DBIdentifier name) {\n         Column col = new Column();\n         col.setIdentifier(name);\n         col.setJavaType(JavaTypes.STRING);"},{"sha":"00de34e885912b4de60937bc8dd22692658357b3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -557,8 +557,7 @@ protected static void fillTO(\n             final Collection<? extends PlainAttr<?>> plainAttrs,\n             final Map<DerSchema, String> derAttrs,\n             final Map<VirSchema, List<String>> virAttrs,\n-            final Collection<? extends ExternalResource> resources,\n-            final boolean details) {\n+            final Collection<? extends ExternalResource> resources) {\n \n         anyTO.setRealm(realmFullPath);\n "},{"sha":"f1126fb5bde080172748d7b811921166626d3a0d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -97,8 +97,7 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n                 anyObject.getPlainAttrs(),\n                 derAttrHandler.getValues(anyObject),\n                 virAttrValues,\n-                anyObjectDAO.findAllResources(anyObject),\n-                details);\n+                anyObjectDAO.findAllResources(anyObject));\n \n         // dynamic realms\n         anyObjectTO.getDynRealms().addAll(anyObjectDAO.findDynRealms(anyObject.getKey()));"},{"sha":"0554e650879c810d59d1bd9afd5cbd56883e4149","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -357,8 +357,7 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n                 group.getPlainAttrs(),\n                 derAttrValues,\n                 virAttrValues,\n-                group.getResources(),\n-                details);\n+                group.getResources());\n \n         // dynamic realms\n         groupTO.getDynRealms().addAll(groupDAO.findDynRealms(group.getKey()));"},{"sha":"fe108f88e2f3255ec4f7c63a8ac212fa971cc663","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -740,8 +740,7 @@ public UserTO getUserTO(final User user, final boolean details) {\n                 user.getPlainAttrs(),\n                 derAttrHandler.getValues(user),\n                 details ? virAttrHandler.getValues(user) : Map.of(),\n-                userDAO.findAllResources(user),\n-                details);\n+                userDAO.findAllResources(user));\n \n         // dynamic realms\n         userTO.getDynRealms().addAll(userDAO.findDynRealms(user.getKey()));"},{"sha":"ca969892756373c764d2db5f26ff05a7b4da95f8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractNotificationTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -86,7 +86,7 @@ protected static void verifyMail(\n             final int maxWaitSeconds) throws Exception {\n \n         AtomicReference<Boolean> read = new AtomicReference<>(false);\n-        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             try {\n                 read.set(pop3(sender, subject, mailAddress));\n                 return read.get();"},{"sha":"7a9eec95db1bd48a1ec0b13aa1288e08d220eee5","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"modified","additions":25,"deletions":3,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11a17dc7330d98401b74a1ad5de2970694b399ef/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11a17dc7330d98401b74a1ad5de2970694b399ef/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=11a17dc7330d98401b74a1ad5de2970694b399ef","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n@@ -282,8 +283,15 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                 break;\n \n             case RETRY:\n+                AtomicInteger retries = new AtomicInteger();\n+                try {\n+                    retries.set(Integer.valueOf(gwfilter.getArgs().trim()));\n+                } catch (NumberFormatException e) {\n+                    LOG.error(\"Unexpected argument value: {}\", gwfilter.getArgs().trim(), e);\n+                    retries.set(0);\n+                }\n                 filter = ctx.getBean(RetryGatewayFilterFactory.class).\n-                        apply(c -> c.setRetries(Integer.valueOf(gwfilter.getArgs().trim())));\n+                        apply(c -> c.setRetries(retries.get()));\n                 break;\n \n             case SAVE_SESSION:\n@@ -321,8 +329,15 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                 break;\n \n             case STRIP_PREFIX:\n+                AtomicInteger parts = new AtomicInteger();\n+                try {\n+                    parts.set(Integer.valueOf(gwfilter.getArgs().trim()));\n+                } catch (NumberFormatException e) {\n+                    LOG.error(\"Unexpected argument value: {}\", gwfilter.getArgs().trim(), e);\n+                    parts.set(0);\n+                }\n                 filter = ctx.getBean(StripPrefixGatewayFilterFactory.class).\n-                        apply(c -> c.setParts(Integer.valueOf(gwfilter.getArgs().trim())));\n+                        apply(c -> c.setParts(parts.get()));\n                 break;\n \n             case REQUEST_HEADER_TO_REQUEST_URI:\n@@ -471,9 +486,16 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final SRARoutePredicate gw\n \n             case WEIGHT:\n                 String[] weigthArgs = gwpredicate.getArgs().split(\",\");\n+                AtomicInteger weight = new AtomicInteger();\n+                try {\n+                    weight.set(Integer.valueOf(weigthArgs[1].trim()));\n+                } catch (NumberFormatException e) {\n+                    LOG.error(\"Unexpected argument value: {}\", weigthArgs[1].trim(), e);\n+                    weight.set(0);\n+                }\n                 predicate = ctx.getBean(WeightRoutePredicateFactory.class).\n                         applyAsync(c -> c.setGroup(weigthArgs[0].trim()).\n-                        setWeight(Integer.valueOf(weigthArgs[1].trim())));\n+                        setWeight(weight.get()));\n                 break;\n \n             case CUSTOM:"}]}