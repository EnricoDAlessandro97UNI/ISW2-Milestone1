{"sha":"3696cf2559979e38dc30954873265d509fc2b24c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM2OTZjZjI1NTk5NzllMzhkYzMwOTU0ODczMjY1ZDUwOWZjMmIyNGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-22T15:28:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-22T15:28:19Z"},"message":"[SYNCOPE-751] Implementation provided based on PDFBox","tree":{"sha":"310a2e8d1d4b5519baa8cceff2f20f5660257470","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/310a2e8d1d4b5519baa8cceff2f20f5660257470"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3696cf2559979e38dc30954873265d509fc2b24c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3696cf2559979e38dc30954873265d509fc2b24c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3696cf2559979e38dc30954873265d509fc2b24c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3696cf2559979e38dc30954873265d509fc2b24c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e5bb44d903785433f8966964cd2f6807eb7face4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e5bb44d903785433f8966964cd2f6807eb7face4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e5bb44d903785433f8966964cd2f6807eb7face4"}],"stats":{"total":236,"additions":213,"deletions":23},"files":[{"sha":"5d3e6589fdae0b1a118e1e715d0f350083e185dc","filename":"client/console/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fpom.xml?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -94,6 +94,11 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.pdfbox</groupId>\n+      <artifactId>pdfbox</artifactId>\n+    </dependency>\n+      \n     <dependency>\n       <groupId>org.webjars</groupId>\n       <artifactId>font-awesome</artifactId>"},{"sha":"2cb08cff8ec413708e00c71f0ec7545bbef6eee7","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/PreviewUtils.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -55,21 +55,19 @@ public AbstractBinaryPreviewer getDefaultPreviewer(final String mimeType) {\n     }\n \n     public AbstractBinaryPreviewer getPreviewer(final String mimeType) {\n-\n         if (StringUtils.isBlank(mimeType)) {\n             return null;\n         }\n \n-        final Class<? extends AbstractBinaryPreviewer> previewer\n-                = classPathScanImplementationLookup.getPreviewerClass(mimeType);\n-\n+        Class<? extends AbstractBinaryPreviewer> previewer =\n+                classPathScanImplementationLookup.getPreviewerClass(mimeType);\n         try {\n             return previewer == null\n                     ? null\n                     : getConstructorIfAvailable(previewer, String.class, String.class).\n                     newInstance(new Object[] { \"previewer\", mimeType });\n-        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException \n-                | InvocationTargetException ex) {\n+        } catch (InstantiationException | IllegalAccessException \n+                | IllegalArgumentException | InvocationTargetException e) {\n             return null;\n         }\n     }"},{"sha":"481cb435a5cc934d45cb293e47faafd267aab0f8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -151,8 +151,7 @@ public void onClick() {\n         config.showRemove(false);\n         config.showPreview(false);\n \n-        fileUpload = new BootstrapFileInputField(\"fileUpload\",\n-                new ListModel<FileUpload>(new ArrayList<FileUpload>()), config);\n+        fileUpload = new BootstrapFileInputField(\"fileUpload\", new ListModel<>(new ArrayList<FileUpload>()), config);\n         fileUpload.setOutputMarkupId(true);\n \n         fileUpload.add(new AjaxFormSubmitBehavior(Constants.ON_CHANGE) {"},{"sha":"796c82510fe04f09402da70bf2b542c77450c207","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/AbstractBinaryPreviewer.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FAbstractBinaryPreviewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FAbstractBinaryPreviewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FAbstractBinaryPreviewer.java?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -26,9 +26,6 @@\n \n public abstract class AbstractBinaryPreviewer extends Panel {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractBinaryPreviewer.class);\n \n     private static final long serialVersionUID = -2482706463911903025L;"},{"sha":"778c16b6cd1182d3150ac8fd1fb1b03a08f3c0f6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.java?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -44,20 +44,20 @@ public BinaryCertPreviewer(final String id, final String mimeType) {\n \n     @Override\n     public Component preview(final byte[] uploadedBytes) {\n-        final Label commonNameLabel = new Label(\"certCommonName\", new Model<String>());\n+        Label commonNameLabel = new Label(\"certCommonName\", new Model<String>());\n         if (uploadedBytes.length == 0) {\n             LOG.info(\"Enpty certificate\");\n             return commonNameLabel;\n         }\n \n-        final ByteArrayInputStream certificateStream = new ByteArrayInputStream(uploadedBytes);\n+        ByteArrayInputStream certificateStream = new ByteArrayInputStream(uploadedBytes);\n         try {\n-            final X509Certificate certificate = (X509Certificate) CertificateFactory.getInstance(\"X.509\").\n+            X509Certificate certificate = (X509Certificate) CertificateFactory.getInstance(\"X.509\").\n                     generateCertificate(certificateStream);\n \n-            final StringBuilder commonNameBuilder = new StringBuilder(\"cn=\");\n+            StringBuilder commonNameBuilder = new StringBuilder(\"cn=\");\n \n-            final LdapName ldapName = new LdapName(certificate.getIssuerDN().getName());\n+            LdapName ldapName = new LdapName(certificate.getIssuerDN().getName());\n \n             for (Rdn rdn : ldapName.getRdns()) {\n                 if (\"CN\".equalsIgnoreCase(rdn.getType())) {"},{"sha":"2468cc1e9306024ef2a91b0b1caa409a8ed6a882","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryImagePreviewer.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryImagePreviewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryImagePreviewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryImagePreviewer.java?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -38,14 +38,15 @@ public BinaryImagePreviewer(final String id, final String mimeType) {\n \n     @Override\n     public Component preview(final byte[] uploadedBytes) {\n-        return this.add(new NonCachingImage(\"previewImage\", new ThumbnailImageResource(new DynamicImageResource() {\n+        return this.addOrReplace(\n+                new NonCachingImage(\"previewImage\", new ThumbnailImageResource(new DynamicImageResource() {\n \n-            private static final long serialVersionUID = 923201517955737928L;\n+                    private static final long serialVersionUID = 923201517955737928L;\n \n-            @Override\n-            protected byte[] getImageData(final IResource.Attributes attributes) {\n-                return uploadedBytes;\n-            }\n-        }, IMG_SIZE)));\n+                    @Override\n+                    protected byte[] getImageData(final IResource.Attributes attributes) {\n+                        return uploadedBytes;\n+                    }\n+                }, IMG_SIZE)));\n     }\n }"},{"sha":"ed7b7778da68d93b27f0148024e20049c91e0a28","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryPDFPreviewer.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryPDFPreviewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryPDFPreviewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryPDFPreviewer.java?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.markup.html.form.preview;\n+\n+import java.awt.Graphics2D;\n+import java.awt.RenderingHints;\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.syncope.client.console.annotations.BinaryPreview;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.image.NonCachingImage;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.request.resource.DynamicImageResource;\n+import org.apache.wicket.request.resource.IResource;\n+import org.apache.wicket.util.io.IOUtils;\n+import org.apache.wicket.util.time.Time;\n+\n+@BinaryPreview(mimeTypes = { \"application/pdf\" })\n+public class BinaryPDFPreviewer extends AbstractBinaryPreviewer {\n+\n+    private static final long serialVersionUID = -6606409541566687016L;\n+\n+    private static final int IMG_SIZE = 300;\n+\n+    private static final int RESOLUTION = 96;\n+\n+    private static final int IMAGE_TYPE = BufferedImage.TYPE_INT_RGB;\n+\n+    private transient BufferedImage firstPage;\n+\n+    public BinaryPDFPreviewer(final String id, final String mimeType) {\n+        super(id, mimeType);\n+    }\n+\n+    @Override\n+    public Component preview(final byte[] uploadedBytes) {\n+        firstPage = null;\n+\n+        PDDocument document = null;\n+        try {\n+            document = PDDocument.load(new ByteArrayInputStream(uploadedBytes));\n+            if (document.isEncrypted()) {\n+                LOG.info(\"Document is encrypted, no preview is possible\");\n+            } else {\n+                @SuppressWarnings(\"unchecked\")\n+                List<PDPage> pages = document.getDocumentCatalog().getAllPages();\n+                firstPage = pages.get(0).convertToImage(IMAGE_TYPE, RESOLUTION);\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"While generating thumbnail from first page\", e);\n+        } finally {\n+            IOUtils.closeQuietly(document);\n+        }\n+\n+        Fragment fragment;\n+        if (firstPage == null) {\n+            fragment = new Fragment(\"preview\", \"noPreviewFragment\", this);\n+        } else {\n+            fragment = new Fragment(\"preview\", \"previewFragment\", this);\n+            fragment.add(new NonCachingImage(\"previewImage\", new ThumbnailImageResource(firstPage)));\n+        }\n+\n+        WebMarkupContainer previewContainer = new WebMarkupContainer(\"previewContainer\");\n+        previewContainer.setOutputMarkupId(true);\n+        previewContainer.add(fragment);\n+        return this.addOrReplace(previewContainer);\n+    }\n+\n+    private static class ThumbnailImageResource extends DynamicImageResource implements Serializable {\n+\n+        private static final long serialVersionUID = 923201517955737928L;\n+\n+        private final transient BufferedImage image;\n+\n+        private transient byte[] thumbnail;\n+\n+        ThumbnailImageResource(final BufferedImage image) {\n+            this.image = image;\n+        }\n+\n+        @Override\n+        protected byte[] getImageData(final IResource.Attributes attributes) {\n+            if (thumbnail == null) {\n+                thumbnail = toImageData(getScaledImageInstance());\n+                setLastModifiedTime(Time.now());\n+            }\n+            return thumbnail;\n+        }\n+\n+        private BufferedImage getScaledImageInstance() {\n+            int originalWidth = image.getWidth();\n+            int originalHeight = image.getHeight();\n+\n+            if ((originalWidth > IMG_SIZE) || (originalHeight > IMG_SIZE)) {\n+                final int newWidth;\n+                final int newHeight;\n+\n+                if (originalWidth > originalHeight) {\n+                    newWidth = IMG_SIZE;\n+                    newHeight = (IMG_SIZE * originalHeight) / originalWidth;\n+                } else {\n+                    newWidth = (IMG_SIZE * originalWidth) / originalHeight;\n+                    newHeight = IMG_SIZE;\n+                }\n+\n+                // http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html\n+                BufferedImage dimg = new BufferedImage(newWidth, newHeight, image.getType());\n+                Graphics2D g = dimg.createGraphics();\n+                try {\n+                    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n+                            RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n+                    g.drawImage(image, 0, 0, newWidth, newHeight, 0, 0, originalWidth,\n+                            originalHeight, null);\n+                } finally {\n+                    g.dispose();\n+                }\n+\n+                return dimg;\n+            }\n+\n+            // no need for resizing\n+            return image;\n+        }\n+    }\n+}"},{"sha":"6b4cee1cb789d9bffeaa1d46a9185dceb217da5d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryPDFPreviewer.html","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryPDFPreviewer.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryPDFPreviewer.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryPDFPreviewer.html?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -0,0 +1,37 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head><title></title></head>\n+  <body>\n+    <wicket:extend>\n+      <div wicket:id=\"previewContainer\">\n+        <span wicket:id=\"preview\"/>\n+      </div>\n+\n+      <wicket:fragment wicket:id=\"previewFragment\">\n+        <div><img wicket:id = \"previewImage\"/></div>\n+      </wicket:fragment>\n+      <wicket:fragment wicket:id=\"noPreviewFragment\">\n+        <div style=\"padding: 8px 0px 1px 10px\">\n+          <i class=\" glyphicon glyphicon-paperclip fa-2x\" title=\"Preview not available\" alt=\"Default preview icon\"></i>\n+        </div>\n+      </wicket:fragment>\n+    </wicket:extend>\n+  </body>\n+</html>"},{"sha":"7bd9ad85d7c3d28b81ef32257a288a769216c02d","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3696cf2559979e38dc30954873265d509fc2b24c/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3696cf2559979e38dc30954873265d509fc2b24c/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=3696cf2559979e38dc30954873265d509fc2b24c","patch":"@@ -951,6 +951,12 @@ under the License.\n         <version>${slf4j.version}</version>\n       </dependency>\n       \n+      <dependency>\n+        <groupId>org.apache.pdfbox</groupId>\n+        <artifactId>pdfbox</artifactId>\n+        <version>1.8.10</version>\n+      </dependency>\n+      \n       <dependency>\n         <groupId>org.webjars</groupId>\n         <artifactId>jquery</artifactId>"}]}