{"sha":"fdbf7c5f393003b166d5778d6121b6b26b3d3af3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZkYmY3YzVmMzkzMDAzYjE2NmQ1Nzc4ZDYxMjFiNmIyNmIzZDNhZjM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-10T16:02:47Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-10T16:02:47Z"},"message":"REST method for getting all available attribute validators\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246473 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2ca68a35110369f3ec0a9c01277a16beb3a18675","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ca68a35110369f3ec0a9c01277a16beb3a18675"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fdbf7c5f393003b166d5778d6121b6b26b3d3af3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fdbf7c5f393003b166d5778d6121b6b26b3d3af3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fdbf7c5f393003b166d5778d6121b6b26b3d3af3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/comments","author":null,"committer":null,"parents":[{"sha":"dabdc3afca66f2a4c93fef02027a3ca72204c09c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dabdc3afca66f2a4c93fef02027a3ca72204c09c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dabdc3afca66f2a4c93fef02027a3ca72204c09c"}],"stats":{"total":250,"additions":158,"deletions":92},"files":[{"sha":"1ee9a12665440caa8c090d3b3a1f75c4ee393a68","filename":"core/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -159,6 +159,11 @@\n             <artifactId>dbunit</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.reflections</groupId>\n+            <artifactId>reflections</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>log4j</groupId>\n             <artifactId>log4j</artifactId>"},{"sha":"6cadf5cac9b221a3e3c89335e0390167a8f09430","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -27,8 +27,8 @@\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n-import org.syncope.core.persistence.validation.AttributeBasicValidator;\n-import org.syncope.core.persistence.validation.AttributeValidator;\n+import org.syncope.core.persistence.validation.BasicAttributeValidator;\n+import org.syncope.core.persistence.validation.AbstractAttributeValidator;\n import org.syncope.types.SchemaValueType;\n \n @MappedSuperclass\n@@ -57,7 +57,7 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n     @Column(nullable = true)\n     private String validatorClass;\n     @Transient\n-    private AttributeValidator validator;\n+    private AbstractAttributeValidator validator;\n \n     public AbstractSchema() {\n         type = SchemaValueType.String;\n@@ -124,7 +124,7 @@ public void setReadonly(boolean readonly) {\n         this.readonly = getBooleanAsCharacter(readonly);\n     }\n \n-    public AttributeValidator getValidator() {\n+    public AbstractAttributeValidator getValidator() {\n         if (validator != null) {\n             return validator;\n         }\n@@ -135,7 +135,7 @@ public AttributeValidator getValidator() {\n                         Class.forName(getValidatorClass()).getConstructor(\n                         new Class[]{getClass().getSuperclass()});\n                 validator =\n-                        (AttributeValidator) validatorConstructor.newInstance(\n+                        (AbstractAttributeValidator) validatorConstructor.newInstance(\n                         this);\n             } catch (Exception e) {\n                 LOG.error(\"Could not instantiate validator of type \"\n@@ -145,7 +145,7 @@ public AttributeValidator getValidator() {\n         }\n \n         if (validator == null) {\n-            validator = new AttributeBasicValidator(this);\n+            validator = new BasicAttributeValidator(this);\n         }\n \n         return validator;"},{"sha":"dc43ca5defabd061d14e08252ed17faf12d077ba","filename":"core/src/main/java/org/syncope/core/persistence/validation/AbstractAttributeValidator.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -0,0 +1,97 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation;\n+\n+import java.text.DecimalFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+\n+public abstract class AbstractAttributeValidator implements AttributeValidator {\n+\n+    final protected AbstractSchema schema;\n+\n+    public AbstractAttributeValidator(AbstractSchema schema) {\n+\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributeValue> T getValue(String value,\n+            T attributeValue)\n+            throws ParseException, ValidationFailedException {\n+\n+        attributeValue = parseValue(value, attributeValue);\n+        doValidate(attributeValue);\n+\n+        return attributeValue;\n+    }\n+\n+    private <T extends AbstractAttributeValue> T parseValue(String value,\n+            T attributeValue) throws ParseException {\n+        Exception exception = null;\n+\n+        switch (schema.getType()) {\n+\n+            case String:\n+                attributeValue.setStringValue(value);\n+                break;\n+\n+            case Boolean:\n+                attributeValue.setBooleanValue(Boolean.parseBoolean(value));\n+                break;\n+\n+            case Long:\n+                try {\n+                    attributeValue.setLongValue(Long.valueOf(\n+                            schema.getFormatter(DecimalFormat.class).parse(\n+                            value).longValue()));\n+                } catch (java.text.ParseException pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Double:\n+                try {\n+                    attributeValue.setDoubleValue(Double.valueOf(\n+                            schema.getFormatter(DecimalFormat.class).parse(\n+                            value).doubleValue()));\n+                } catch (java.text.ParseException pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Date:\n+                try {\n+                    attributeValue.setDateValue(new Date(schema.getFormatter(\n+                            SimpleDateFormat.class).parse(value).getTime()));\n+                } catch (java.text.ParseException pe) {\n+                    exception = pe;\n+                }\n+                break;\n+        }\n+\n+        if (exception != null) {\n+            throw new ParseException(\"While trying to parse '\" + value + \"'\",\n+                    exception);\n+        }\n+\n+        return attributeValue;\n+    }\n+\n+    protected abstract <T extends AbstractAttributeValue> void doValidate(\n+            T attributeValue) throws ValidationFailedException;\n+}"},{"sha":"cca473471d8b0d2efe2fc323c28b53346e2e9009","filename":"core/src/main/java/org/syncope/core/persistence/validation/AlwaysTrueValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -17,7 +17,7 @@\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n-public class AlwaysTrueValidator extends AttributeValidator {\n+public class AlwaysTrueValidator extends AbstractAttributeValidator {\n \n     public AlwaysTrueValidator(AbstractSchema schema) {\n "},{"sha":"2afa0d8cd536dfd7ad59cd99cc076c118bec2ce9","filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeValidator.java","status":"modified","additions":3,"deletions":75,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -14,83 +14,11 @@\n  */\n package org.syncope.core.persistence.validation;\n \n-import java.text.DecimalFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n-public abstract class AttributeValidator {\n+public interface AttributeValidator {\n \n-    final protected AbstractSchema schema;\n-\n-    public AttributeValidator(AbstractSchema schema) {\n-\n-        this.schema = schema;\n-    }\n-\n-    public <T extends AbstractAttributeValue> T getValue(String value,\n+    <T extends AbstractAttributeValue> T getValue(String value,\n             T attributeValue)\n-            throws ParseException, ValidationFailedException {\n-\n-        attributeValue = parseValue(value, attributeValue);\n-        doValidate(attributeValue);\n-\n-        return attributeValue;\n-    }\n-\n-    private <T extends AbstractAttributeValue> T parseValue(String value,\n-            T attributeValue) throws ParseException {\n-        Exception exception = null;\n-\n-        switch (schema.getType()) {\n-\n-            case String:\n-                attributeValue.setStringValue(value);\n-                break;\n-\n-            case Boolean:\n-                attributeValue.setBooleanValue(Boolean.parseBoolean(value));\n-                break;\n-\n-            case Long:\n-                try {\n-                    attributeValue.setLongValue(Long.valueOf(\n-                            schema.getFormatter(DecimalFormat.class).parse(\n-                            value).longValue()));\n-                } catch (java.text.ParseException pe) {\n-                    exception = pe;\n-                }\n-                break;\n-\n-            case Double:\n-                try {\n-                    attributeValue.setDoubleValue(Double.valueOf(\n-                            schema.getFormatter(DecimalFormat.class).parse(\n-                            value).doubleValue()));\n-                } catch (java.text.ParseException pe) {\n-                    exception = pe;\n-                }\n-                break;\n-\n-            case Date:\n-                try {\n-                    attributeValue.setDateValue(new Date(schema.getFormatter(\n-                            SimpleDateFormat.class).parse(value).getTime()));\n-                } catch (java.text.ParseException pe) {\n-                    exception = pe;\n-                }\n-                break;\n-        }\n-\n-        if (exception != null) {\n-            throw new ParseException(\"While trying to parse '\" + value + \"'\",\n-                    exception);\n-        }\n-\n-        return attributeValue;\n-    }\n-\n-    protected abstract <T extends AbstractAttributeValue> void doValidate(\n-            T attributeValue) throws ValidationFailedException;\n+            throws ParseException, ValidationFailedException;\n }"},{"sha":"d706cfc0dc7ec70aa40325ab69e1dc60f8c33575","filename":"core/src/main/java/org/syncope/core/persistence/validation/BasicAttributeValidator.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FBasicAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FBasicAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FBasicAttributeValidator.java?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -17,9 +17,9 @@\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n-public class AttributeBasicValidator extends AttributeValidator {\n+public class BasicAttributeValidator extends AbstractAttributeValidator {\n \n-    public AttributeBasicValidator(AbstractSchema schema) {\n+    public BasicAttributeValidator(AbstractSchema schema) {\n \n         super(schema);\n     }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeBasicValidator.java"},{"sha":"4d3e8a105173f29d68dbe228b677021c71d17cae","filename":"core/src/main/java/org/syncope/core/persistence/validation/EmailAddressValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -19,7 +19,7 @@\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n-public class EmailAddressValidator extends AttributeValidator {\n+public class EmailAddressValidator extends AbstractAttributeValidator {\n \n     final private static Pattern emailValidationPattern = Pattern.compile(\n             \"^[\\\\w\\\\-]([\\\\.\\\\w])+[\\\\w]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,4}$\","},{"sha":"75bcc3b0188a1ce51d3f53056b04ee22a119c9ed","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -14,21 +14,27 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.reflections.Reflections;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.to.ConfigurationTOs;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.validation.AttributeValidator;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n \n @Controller\n@@ -116,4 +122,25 @@ public ConfigurationTO update(HttpServletResponse response,\n \n         return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n     }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/validators\")\n+    public ModelAndView getValidators() {\n+        Reflections reflections = new Reflections(\n+                \"org.syncope.core.persistence.validation\");\n+\n+        Set<Class<? extends AttributeValidator>> subTypes =\n+                reflections.getSubTypesOf(AttributeValidator.class);\n+\n+        Set<String> validators = new HashSet<String>();\n+        for (Class validatorClass : subTypes) {\n+            if (!Modifier.isAbstract(validatorClass.getModifiers())) {\n+                validators.add(validatorClass.getName());\n+            }\n+        }\n+\n+        ModelAndView result = new ModelAndView();\n+        result.addObject(validators);\n+        return result;\n+    }\n }"},{"sha":"f15ef206347472f9a6e331cccbb83b80b7891a11","filename":"core/src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -17,20 +17,15 @@\n        xmlns:p=\"http://www.springframework.org/schema/p\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n-       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/oxm\n-       http://www.springframework.org/schema/oxm/spring-oxm.xsd\n-       http://www.springframework.org/schema/tx\n-       http://www.springframework.org/schema/tx/spring-tx.xsd\">\n-\n-    <tx:annotation-driven/>\n+       http://www.springframework.org/schema/oxm/spring-oxm.xsd\">\n \n     <context:component-scan base-package=\"org.syncope.core.rest.controller\"/>\n-\n+    \n     <bean id=\"jacksonObjectMapper\" class=\"org.syncope.core.rest.jackson.UnwrappedObjectMapper\"/>\n     \n     <bean id=\"mappingJacksonHttpMessageConverter\""},{"sha":"77335cfd0230a8f62b861fddb05ec645aea580a3","filename":"pom.xml","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fdbf7c5f393003b166d5778d6121b6b26b3d3af3/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=fdbf7c5f393003b166d5778d6121b6b26b3d3af3","patch":"@@ -121,6 +121,8 @@\n \n         <hsqldb.version>1.8.0.10</hsqldb.version>\n \n+        <reflections.version>0.9.5-RC2</reflections.version>\n+        \n         <log4j.version>1.2.16</log4j.version>\n         <slf4j.version>1.5.2</slf4j.version>\n \n@@ -314,6 +316,12 @@\n                 <version>${hsqldb.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>org.reflections</groupId>\n+                <artifactId>reflections</artifactId>\n+                <version>${reflections.version}</version>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>log4j</groupId>\n                 <artifactId>log4j</artifactId>\n@@ -361,6 +369,12 @@\n             <url>https://maven.atlassian.com/3rdparty/</url>\n         </repository>\n \n+        <repository>\n+            <id>reflections-repo</id>\n+            <name>Reflections Maven2 Repository</name>\n+            <url>http://reflections.googlecode.com/svn/repo</url>\n+        </repository>\n+\n     </repositories>\n \n     <build>"}]}