{"sha":"423e4cca089a3ba9f8458428a40f6d4d74a324f9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQyM2U0Y2NhMDg5YTNiYTlmODQ1ODQyOGE0MGY2ZDRkNzRhMzI0Zjk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-09T15:56:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-09T15:56:02Z"},"message":"[SYNCOPE-119] Introducing Realms","tree":{"sha":"51ec5692eeba91e9ebeff8dd05652b05b22333df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/51ec5692eeba91e9ebeff8dd05652b05b22333df"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/423e4cca089a3ba9f8458428a40f6d4d74a324f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/423e4cca089a3ba9f8458428a40f6d4d74a324f9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/423e4cca089a3ba9f8458428a40f6d4d74a324f9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/423e4cca089a3ba9f8458428a40f6d4d74a324f9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bac03b2569644991e26d2879da2eda47bf9debb9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bac03b2569644991e26d2879da2eda47bf9debb9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bac03b2569644991e26d2879da2eda47bf9debb9"}],"stats":{"total":2311,"additions":1905,"deletions":406},"files":[{"sha":"a014fbf9f4b34ee5cec2bccaa0e86c86af6983fd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/CollectionUtils2.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+\n+public final class CollectionUtils2 {\n+\n+    /**\n+     * Returns the next element in <tt>iterator</tt> or <tt>defaultValue</tt> if the iterator is empty.\n+     *\n+     * @param defaultValue the default value to return if the iterator is empty\n+     * @return the next element of <tt>iterator</tt> or the default value\n+     */\n+    public static <T> T getNext(final Iterator<? extends T> iterator, final T defaultValue) {\n+        return iterator.hasNext() ? iterator.next() : defaultValue;\n+    }\n+\n+    /**\n+     * Returns the first element in <tt>iterable</tt> or <tt>defaultValue</tt> if the iterable is empty.\n+     *\n+     * <p/>\n+     * If no default value is desired (and the caller instead wants a {@link java.util.NoSuchElementException} to be\n+     * thrown), it is recommended that <tt>iterable.iterator().next()}</tt> is used instead.\n+     *\n+     * @param defaultValue the default value to return if the iterable is empty\n+     * @return the first element of <tt>iterable</tt> or the default value\n+     */\n+    public static <T> T getFirst(final Iterable<? extends T> iterable, final T defaultValue) {\n+        return getNext(iterable.iterator(), defaultValue);\n+    }\n+\n+    /**\n+     * Returns the first element in <tt>iterable</tt> or <tt>null</tt> if the iterable is empty.\n+     *\n+     * @return the first element of <tt>iterable</tt> or <tt>null</tt>\n+     */\n+    public static <T> T getFirstOrNull(final Iterable<? extends T> iterable) {\n+        return getNext(iterable.iterator(), null);\n+    }\n+\n+    /**\n+     * Transforms all elements from inputCollection with the given transformer\n+     * and adds them to the outputCollection if the provided predicate is verified.\n+     * <p/>\n+     * If the input collection or transformer is null, there is no change to the\n+     * output collection.\n+     *\n+     * @param <I> the type of object in the input collection\n+     * @param <O> the type of object in the output collection\n+     * @param <R> the output type of the transformer - this extends O.\n+     * @param inputCollection the collection to get the input from, may be null\n+     * @param transformer the transformer to use, may be null\n+     * @param predicate the predicate to use, may be null\n+     * @param outputCollection the collection to output into, may not be null if the inputCollection\n+     * and transformer are not null\n+     * @return the outputCollection with the transformed input added\n+     * @throws NullPointerException if the output collection is null and both, inputCollection and\n+     * transformer are not null\n+     */\n+    public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n+            final Transformer<? super I, ? extends O> transformer, final Predicate<? super I> predicate,\n+            final R outputCollection) {\n+\n+        if (inputCollection != null) {\n+            return collect(inputCollection.iterator(), transformer, predicate, outputCollection);\n+        }\n+        return outputCollection;\n+    }\n+\n+    /**\n+     * Transforms all elements from the inputIterator with the given transformer\n+     * and adds them to the outputCollection.\n+     * <p/>\n+     * If the input iterator or transformer is null, there is no change to the\n+     * output collection.\n+     *\n+     * @param inputIterator the iterator to get the input from, may be null\n+     * @param transformer the transformer to use, may be null\n+     * @param predicate the predicate to use, may be null\n+     * @param outputCollection the collection to output into, may not be null if the inputCollection\n+     * and transformer are not null\n+     * @param <I> the type of object in the input collection\n+     * @param <O> the type of object in the output collection\n+     * @param <R> the output type of the transformer - this extends O.\n+     * @return the outputCollection with the transformed input added\n+     * @throws NullPointerException if the output collection is null and both, inputCollection and\n+     * transformer are not null\n+     */\n+    public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,\n+            final Transformer<? super I, ? extends O> transformer, final Predicate<? super I> predicate,\n+            final R outputCollection) {\n+\n+        if (inputIterator != null && transformer != null) {\n+            while (inputIterator.hasNext()) {\n+                final I item = inputIterator.next();\n+                final O value = transformer.transform(item);\n+                if (predicate == null || predicate.evaluate(item)) {\n+                    outputCollection.add(value);\n+                }\n+            }\n+        }\n+        return outputCollection;\n+    }\n+\n+    private CollectionUtils2() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"1a9c78348b93d160c8006761db342873a23fe1c6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -29,6 +29,8 @@\n import javax.xml.bind.annotation.XmlEnum;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"bulkActionResult\")\n@@ -51,7 +53,7 @@ public enum Status {\n \n     }\n \n-    private final List<Result> results = new ArrayList<Result>();\n+    private final List<Result> results = new ArrayList<>();\n \n     @XmlElementWrapper(name = \"result\")\n     @XmlElement(name = \"item\")\n@@ -76,7 +78,7 @@ public void add(final Object id, final String status) {\n \n     @JsonIgnore\n     public Map<String, Status> getResultMap() {\n-        final Map<String, Status> res = new HashMap<String, Status>();\n+        final Map<String, Status> res = new HashMap<>();\n \n         for (Result result : results) {\n             res.put(result.getKey(), result.getValue());\n@@ -87,7 +89,7 @@ public Map<String, Status> getResultMap() {\n \n     @JsonIgnore\n     public List<String> getResultByStatus(final Status status) {\n-        final List<String> res = new ArrayList<String>();\n+        final List<String> res = new ArrayList<>();\n \n         for (Result result : results) {\n             if (result.getValue() == status) {"},{"sha":"9a25be28cebfcaf2c4721c3ee112865ac6cd3d75","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"realm\")\n+@XmlType\n+public class RealmTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 516330662956254391L;\n+\n+    private long key;\n+\n+    private String name;\n+\n+    private long parent;\n+\n+    private String fullPath;\n+\n+    private Long accountPolicy;\n+\n+    private Long passwordPolicy;\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public long getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(final long parent) {\n+        this.parent = parent;\n+    }\n+\n+    public String getFullPath() {\n+        return fullPath;\n+    }\n+\n+    public void setFullPath(final String fullPath) {\n+        this.fullPath = fullPath;\n+    }\n+\n+    public Long getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(final Long accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public Long getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(final Long passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n+\n+}"},{"sha":"8f0e33b5f50fc98cbb02f21f8eb97b2dc120e378","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -25,7 +25,7 @@ public enum ClientExceptionType {\n     AssociatedResources(Response.Status.BAD_REQUEST),\n     Composite(Response.Status.BAD_REQUEST),\n     ConcurrentModification(Response.Status.PRECONDITION_FAILED),\n-    DataIntegrityViolation(Response.Status.BAD_REQUEST),\n+    DataIntegrityViolation(Response.Status.CONFLICT),\n     EntityExists(Response.Status.CONFLICT),\n     GenericPersistence(Response.Status.BAD_REQUEST),\n     InvalidSecurityAnswer(Response.Status.BAD_REQUEST),\n@@ -36,6 +36,7 @@ public enum ClientExceptionType {\n     InvalidPolicy(Response.Status.BAD_REQUEST),\n     InvalidConf(Response.Status.BAD_REQUEST),\n     InvalidGroup(Response.Status.BAD_REQUEST),\n+    InvalidPath(Response.Status.BAD_REQUEST),\n     InvalidReport(Response.Status.BAD_REQUEST),\n     InvalidReportExec(Response.Status.BAD_REQUEST),\n     InvalidGroups(Response.Status.BAD_REQUEST),"},{"sha":"c02913fd1e1e7dd0dd83e135dc123442c9765761","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -41,6 +41,7 @@ public enum EntityViolationType {\n     InvalidGPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.gPlainSchema\"),\n     InvalidGDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.gDerSchema\"),\n     InvalidGVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.gVirSchema\"),\n+    InvalidRealm(\"org.apache.syncope.core.persistence.validation.realm\"),\n     InvalidReport(\"org.apache.syncope.core.persistence.validation.report\"),\n     InvalidResource(\"org.apache.syncope.core.persistence.validation.externalresource\"),\n     InvalidGroupOwner(\"org.apache.syncope.core.persistence.validation.group.owner\"),"},{"sha":"e493f94a36a3744ca007273fa715cabe00823c5d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/CollectionWrapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FCollectionWrapper.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -68,7 +68,7 @@ public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger\n     }\n \n     public static List<LoggerTO> unwrapLogger(final Collection<AuditLoggerName> auditNames) {\n-        List<LoggerTO> respons = new ArrayList<LoggerTO>();\n+        List<LoggerTO> respons = new ArrayList<>();\n         for (AuditLoggerName l : auditNames) {\n             LoggerTO loggerTO = new LoggerTO();\n             loggerTO.setKey(l.toLoggerName());"},{"sha":"3ade49ae01e369ea9ba0345c5fba9d35002229cb","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -26,17 +26,17 @@ public final class RESTHeaders {\n     /**\n      * UserId option key.\n      */\n-    public static final String USER_ID = \"Syncope.UserId\";\n+    public static final String USER_ID = \"X-Syncope-User-Id\";\n \n     /**\n      * Username option key.\n      */\n-    public static final String USERNAME = \"Syncope.Username\";\n+    public static final String USERNAME = \"X-Syncope-Username\";\n \n     /**\n      * HTTP header key for object ID assigned to an object after its creation.\n      */\n-    public static final String RESOURCE_ID = \"Syncope.Id\";\n+    public static final String RESOURCE_ID = \"X-Syncope-Id\";\n \n     /**\n      * Declares the type of exception being raised."},{"sha":"c8343aecdd4ab64f2fc5e299ec7d26658c9c6fa5","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+\n+/**\n+ * REST operations for realms.\n+ */\n+@Path(\"realms\")\n+public interface RealmService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all realms.\n+     *\n+     * @return list of all realms.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<RealmTO> list();\n+\n+    /**\n+     * Returns realms rooted at the given path.\n+     *\n+     * @param fullPath full path of the root realm where to read from\n+     * @return realms rooted at the given path\n+     */\n+    @GET\n+    @Path(\"{fullPath:.*}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<RealmTO> list(@NotNull @PathParam(\"fullPath\") String fullPath);\n+\n+    /**\n+     * Creates a new realm under the given path.\n+     *\n+     * @param parentPath full path of the parent realm\n+     * @param realmTO new realm.\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created realm\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created realm\")\n+    })\n+    @POST\n+    @Path(\"{parentPath:.*}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull @PathParam(\"parentPath\") String parentPath, @NotNull RealmTO realmTO);\n+\n+    /**\n+     * Updates the realm under the given path.\n+     *\n+     * @param fullPath full path of the realm\n+     * @param realmTO realm to be stored\n+     */\n+    @PUT\n+    @Path(\"{fullPath:.*}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull @PathParam(\"fullPath\") String fullPath, @NotNull RealmTO realmTO);\n+\n+    /**\n+     * Deletes the notification matching the given key.\n+     *\n+     * @param fullPath key for notification to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{fullPath:.*}\")\n+    void delete(@NotNull @PathParam(\"fullPath\") String fullPath);\n+}"},{"sha":"4068d63419004b8b1128d61c66fdde29bf984d58","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":19,"deletions":15,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -19,11 +19,14 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.net.URI;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.PredicateUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -33,6 +36,7 @@\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -45,6 +49,7 @@\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorInfo;\n+import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -134,19 +139,20 @@ public List<ConnInstanceTO> list(final String lang) {\n             CurrentLocale.set(new Locale(lang));\n         }\n \n-        List<ConnInstance> connInstances = connInstanceDAO.findAll();\n+        return CollectionUtils2.collect(connInstanceDAO.findAll(), new Transformer<ConnInstance, ConnInstanceTO>() {\n \n-        final List<ConnInstanceTO> connInstanceTOs = new ArrayList<>();\n+            @Override\n+            public ConnInstanceTO transform(final ConnInstance input) {\n+                ConnInstanceTO result = null;\n+                try {\n+                    result = binder.getConnInstanceTO(input);\n+                } catch (NotFoundException e) {\n+                    LOG.error(\"Connector '{}#{}' not found\", input.getBundleName(), input.getVersion());\n+                }\n \n-        for (ConnInstance connector : connInstances) {\n-            try {\n-                connInstanceTOs.add(binder.getConnInstanceTO(connector));\n-            } catch (NotFoundException e) {\n-                LOG.error(\"Connector '{}#{}' not found\", connector.getBundleName(), connector.getVersion());\n+                return result;\n             }\n-        }\n-\n-        return connInstanceTOs;\n+        }, PredicateUtils.notNullPredicate(), new ArrayList<ConnInstanceTO>());\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n@@ -170,12 +176,12 @@ public List<ConnBundleTO> getBundles(final String lang) {\n         }\n \n         List<ConnBundleTO> connectorBundleTOs = new ArrayList<>();\n-        for (Map.Entry<String, List<ConnectorInfo>> entry : connIdBundleManager.getConnectorInfos().entrySet()) {\n-            for (ConnectorInfo bundle : entry.getValue()) {\n+        for (Map.Entry<URI, ConnectorInfoManager> entry : connIdBundleManager.getConnInfoManagers().entrySet()) {\n+            for (ConnectorInfo bundle : entry.getValue().getConnectorInfos()) {\n                 ConnBundleTO connBundleTO = new ConnBundleTO();\n                 connBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n \n-                connBundleTO.setLocation(entry.getKey());\n+                connBundleTO.setLocation(entry.getKey().toString());\n \n                 ConnectorKey key = bundle.getConnectorKey();\n                 connBundleTO.setBundleName(key.getBundleName());\n@@ -188,8 +194,6 @@ public List<ConnBundleTO> getBundles(final String lang) {\n                     connBundleTO.getProperties().add(binder.buildConnConfPropSchema(properties.getProperty(propName)));\n                 }\n \n-                LOG.debug(\"Connector bundle: {}\", connBundleTO);\n-\n                 connectorBundleTOs.add(connBundleTO);\n             }\n         }"},{"sha":"a5dc6a07709ccfa14af03df74744c24148422c2f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/EntitlementLogic.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FEntitlementLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FEntitlementLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FEntitlementLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.wrap.EntitlementTO;\n import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.entity.Entitlement;\n@@ -36,13 +38,13 @@ public class EntitlementLogic extends AbstractTransactionalLogic<EntitlementTO>\n     private EntitlementDAO entitlementDAO;\n \n     public List<String> getAll() {\n-        List<Entitlement> entitlements = entitlementDAO.findAll();\n-        List<String> result = new ArrayList<>(entitlements.size());\n-        for (Entitlement entitlement : entitlements) {\n-            result.add(entitlement.getKey());\n-        }\n+        return CollectionUtils.collect(entitlementDAO.findAll(), new Transformer<Entitlement, String>() {\n \n-        return result;\n+            @Override\n+            public String transform(final Entitlement entitlement) {\n+                return entitlement.getKey();\n+            }\n+        }, new ArrayList<String>());\n     }\n \n     public Set<String> getOwn() {"},{"sha":"6e4604b418d28fa66e435ebd1f837a01be4ccf56","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":36,"deletions":28,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -26,6 +26,9 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.GroupMod;\n@@ -35,6 +38,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -158,18 +162,22 @@ public GroupTO parent(final Long groupKey) {\n     @Transactional(readOnly = true)\n     public List<GroupTO> children(final Long groupKey) {\n         Group group = groupDAO.authFetch(groupKey);\n+        final Set<Long> allowedGroupKeys =\n+                GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n \n-        Set<Long> allowedGroupIds = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n+        return CollectionUtils2.collect(groupDAO.findChildren(group), new Transformer<Group, GroupTO>() {\n \n-        List<Group> children = groupDAO.findChildren(group);\n-        List<GroupTO> childrenTOs = new ArrayList<>(children.size());\n-        for (Group child : children) {\n-            if (allowedGroupIds.contains(child.getKey())) {\n-                childrenTOs.add(binder.getGroupTO(child));\n+            @Override\n+            public GroupTO transform(final Group group) {\n+                return binder.getGroupTO(group);\n             }\n-        }\n+        }, new Predicate<Group>() {\n \n-        return childrenTOs;\n+            @Override\n+            public boolean evaluate(final Group group) {\n+                return allowedGroupKeys.contains(group.getKey());\n+            }\n+        }, new ArrayList<GroupTO>());\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -183,14 +191,13 @@ public int count() {\n     @Transactional(readOnly = true)\n     @Override\n     public List<GroupTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n-        List<Group> groups = groupDAO.findAll(page, size, orderBy);\n+        return CollectionUtils.collect(groupDAO.findAll(page, size, orderBy), new Transformer<Group, GroupTO>() {\n \n-        List<GroupTO> groupTOs = new ArrayList<>(groups.size());\n-        for (Group group : groups) {\n-            groupTOs.add(binder.getGroupTO(group));\n-        }\n-\n-        return groupTOs;\n+            @Override\n+            public GroupTO transform(final Group input) {\n+                return binder.getGroupTO(input);\n+            }\n+        }, new ArrayList<GroupTO>());\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -207,16 +214,16 @@ public int searchCount(final SearchCond searchCondition) {\n     public List<GroupTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy) {\n \n-        final List<Group> matchingGroups = searchDAO.search(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.\n+        List<Group> matchingGroups = searchDAO.search(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.\n                 getOwnedEntitlementNames()),\n                 searchCondition, page, size, orderBy, SubjectType.GROUP);\n+        return CollectionUtils.collect(matchingGroups, new Transformer<Group, GroupTO>() {\n \n-        final List<GroupTO> result = new ArrayList<>(matchingGroups.size());\n-        for (Group group : matchingGroups) {\n-            result.add(binder.getGroupTO(group));\n-        }\n-\n-        return result;\n+            @Override\n+            public GroupTO transform(final Group input) {\n+                return binder.getGroupTO(input);\n+            }\n+        }, new ArrayList<GroupTO>());\n     }\n \n     @PreAuthorize(\"hasRole('GROUP_CREATE')\")\n@@ -262,13 +269,14 @@ public GroupTO update(final GroupMod groupMod) {\n     public GroupTO delete(final Long groupKey) {\n         List<Group> ownedGroups = groupDAO.findOwnedByGroup(groupKey);\n         if (!ownedGroups.isEmpty()) {\n-            List<String> owned = new ArrayList<>(ownedGroups.size());\n-            for (Group group : ownedGroups) {\n-                owned.add(group.getKey() + \" \" + group.getName());\n-            }\n-\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n-            sce.getElements().addAll(owned);\n+            sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n+\n+                @Override\n+                public String transform(final Group group) {\n+                    return group.getKey() + \" \" + group.getName();\n+                }\n+            }, new ArrayList<String>()));\n             throw sce;\n         }\n "},{"sha":"09a5d6bd26efe7884e1ca4ec4c31429d16f456a7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":27,"deletions":17,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -18,12 +18,17 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n+\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.PredicateUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n@@ -42,6 +47,7 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -81,14 +87,15 @@ public class LoggerLogic extends AbstractTransactionalLogic<LoggerTO> {\n     private EntityFactory entityFactory;\n \n     private List<LoggerTO> list(final LoggerType type) {\n-        List<LoggerTO> result = new ArrayList<>();\n-        for (Logger logger : loggerDAO.findAll(type)) {\n-            LoggerTO loggerTO = new LoggerTO();\n-            BeanUtils.copyProperties(logger, loggerTO);\n-            result.add(loggerTO);\n-        }\n+        return CollectionUtils.collect(loggerDAO.findAll(type), new Transformer<Logger, LoggerTO>() {\n \n-        return result;\n+            @Override\n+            public LoggerTO transform(final Logger logger) {\n+                LoggerTO loggerTO = new LoggerTO();\n+                BeanUtils.copyProperties(logger, loggerTO);\n+                return loggerTO;\n+            }\n+        }, new ArrayList<LoggerTO>());\n     }\n \n     @PreAuthorize(\"hasRole('LOG_LIST')\")\n@@ -100,17 +107,20 @@ public List<LoggerTO> listLogs() {\n     @PreAuthorize(\"hasRole('AUDIT_LIST')\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n-        List<AuditLoggerName> result = new ArrayList<>();\n+        return CollectionUtils2.collect(list(LoggerType.AUDIT), new Transformer<LoggerTO, AuditLoggerName>() {\n+\n+            @Override\n+            public AuditLoggerName transform(final LoggerTO logger) {\n+                AuditLoggerName result = null;\n+                try {\n+                    result = AuditLoggerName.fromLoggerName(logger.getKey());\n+                } catch (Exception e) {\n+                    LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n+                }\n \n-        for (LoggerTO logger : list(LoggerType.AUDIT)) {\n-            try {\n-                result.add(AuditLoggerName.fromLoggerName(logger.getKey()));\n-            } catch (Exception e) {\n-                LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n+                return result;\n             }\n-        }\n-\n-        return result;\n+        }, PredicateUtils.notNullPredicate(), new ArrayList<AuditLoggerName>());\n     }\n \n     private void throwInvalidLogger(final LoggerType type) {\n@@ -213,7 +223,7 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n     @PreAuthorize(\"hasRole('AUDIT_LIST') or hasRole('NOTIFICATION_LIST')\")\n     public List<EventCategoryTO> listAuditEvents() {\n         // use set to avoi duplications or null elements\n-        final Set<EventCategoryTO> events = new HashSet<EventCategoryTO>();\n+        final Set<EventCategoryTO> events = new HashSet<>();\n \n         try {\n             final ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();"},{"sha":"8b8c387f852f3a6c601e16d61162f79a8040c690","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -21,6 +21,8 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -54,14 +56,13 @@ public NotificationTO read(final Long notificationId) {\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_LIST')\")\n     public List<NotificationTO> list() {\n-        List<Notification> notifications = notificationDAO.findAll();\n+        return CollectionUtils.collect(notificationDAO.findAll(), new Transformer<Notification, NotificationTO>() {\n \n-        List<NotificationTO> notificationTOs = new ArrayList<NotificationTO>();\n-        for (Notification notification : notifications) {\n-            notificationTOs.add(binder.getNotificationTO(notification));\n-        }\n-\n-        return notificationTOs;\n+            @Override\n+            public NotificationTO transform(final Notification input) {\n+                return binder.getNotificationTO(input);\n+            }\n+        }, new ArrayList<NotificationTO>());\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n@@ -113,7 +114,7 @@ protected NotificationTO resolveReference(final Method method, final Object... a\n             }\n         }\n \n-        if ((key != null) && !key.equals(0l)) {\n+        if ((key != null) && !key.equals(0L)) {\n             try {\n                 return binder.getNotificationTO(notificationDAO.find(key));\n             } catch (Throwable ignore) {"},{"sha":"015c2a35e49d6f97ab1086a39d67d6f485bf332b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -21,6 +21,8 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.AccountPolicyTO;\n@@ -89,17 +91,14 @@ public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n-    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n+        return CollectionUtils.collect(policyDAO.find(type), new Transformer<Policy, T>() {\n \n-        List<? extends Policy> policies = policyDAO.find(type);\n-\n-        final List<T> policyTOs = new ArrayList<T>();\n-        for (Policy policy : policies) {\n-            policyTOs.add((T) binder.getPolicyTO(policy));\n-        }\n-\n-        return policyTOs;\n+            @Override\n+            public T transform(final Policy input) {\n+                return binder.getPolicyTO(input);\n+            }\n+        }, new ArrayList<T>());\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n@@ -173,7 +172,7 @@ protected AbstractPolicyTO resolveReference(final Method method, final Object...\n             }\n         }\n \n-        if ((id != null) && !id.equals(0l)) {\n+        if ((id != null) && !id.equals(0L)) {\n             try {\n                 return binder.getPolicyTO(policyDAO.find(id));\n             } catch (Throwable ignore) {"},{"sha":"1b4e85731f2699baa45405f5653821d18ee73aa9","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private RealmDataBinder binder;\n+\n+    @PreAuthorize(\"hasRole('REALM_LIST')\")\n+    public List<RealmTO> list(final String fullPath) {\n+        Realm realm = realmDAO.find(fullPath);\n+        if (realm == null) {\n+            LOG.error(\"Could not find realm '\" + fullPath + \"'\");\n+\n+            throw new NotFoundException(fullPath);\n+        }\n+\n+        return CollectionUtils.collect(realmDAO.findDescendants(realm), new Transformer<Realm, RealmTO>() {\n+\n+            @Override\n+            public RealmTO transform(final Realm input) {\n+                return binder.getRealmTO(input);\n+            }\n+        }, new ArrayList<RealmTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('REALM_CREATE')\")\n+    public RealmTO create(final String parentPath, final RealmTO realmTO) {\n+        return binder.getRealmTO(realmDAO.save(binder.create(parentPath, realmTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('REALM_UPDATE')\")\n+    public RealmTO update(final RealmTO realmTO) {\n+        Realm realm = realmDAO.find(realmTO.getFullPath());\n+        if (realm == null) {\n+            LOG.error(\"Could not find realm '\" + realmTO.getFullPath() + \"'\");\n+\n+            throw new NotFoundException(realmTO.getFullPath());\n+        }\n+\n+        binder.update(realm, realmTO);\n+        realm = realmDAO.save(realm);\n+\n+        return binder.getRealmTO(realm);\n+    }\n+\n+    @PreAuthorize(\"hasRole('REALM_DELETE')\")\n+    public RealmTO delete(final String fullPath) {\n+        Realm realm = realmDAO.find(fullPath);\n+        if (realm == null) {\n+            LOG.error(\"Could not find realm '\" + fullPath + \"'\");\n+\n+            throw new NotFoundException(fullPath);\n+        }\n+\n+        RealmTO deleted = binder.getRealmTO(realm);\n+        realmDAO.delete(realm);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected RealmTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String fullPath = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; fullPath == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    fullPath = (String) args[i];\n+                } else if (args[i] instanceof RealmTO) {\n+                    fullPath = ((RealmTO) args[i]).getFullPath();\n+                }\n+            }\n+        }\n+\n+        if (fullPath != null) {\n+            try {\n+                return binder.getRealmTO(realmDAO.find(fullPath));\n+            } catch (Throwable e) {\n+                LOG.debug(\"Unresolved reference\", e);\n+                throw new UnresolvedReferenceException(e);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"1af19291ef9f98868dcaa222266d4ebcf73d8ae6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":42,"deletions":30,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -36,6 +36,9 @@\n import org.apache.cocoon.sax.component.XMLGenerator;\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.PredicateUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -59,6 +62,7 @@\n import org.apache.syncope.core.logic.report.Reportlet;\n import org.apache.syncope.core.logic.report.ReportletConfClass;\n import org.apache.syncope.core.logic.report.TextSerializer;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n@@ -142,12 +146,14 @@ public int count() {\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     public List<ReportTO> list(final int page, final int size, final List<OrderByClause> orderByClauses) {\n-        List<Report> reports = reportDAO.findAll(page, size, orderByClauses);\n-        List<ReportTO> result = new ArrayList<>(reports.size());\n-        for (Report report : reports) {\n-            result.add(binder.getReportTO(report));\n-        }\n-        return result;\n+        return CollectionUtils.collect(reportDAO.findAll(page, size, orderByClauses),\n+                new Transformer<Report, ReportTO>() {\n+\n+                    @Override\n+                    public ReportTO transform(final Report input) {\n+                        return binder.getReportTO(input);\n+                    }\n+                }, new ArrayList<ReportTO>());\n     }\n \n     private Class<? extends ReportletConf> getReportletConfClass(final Class<Reportlet> reportletClass) {\n@@ -161,35 +167,41 @@ private Class<? extends ReportletConf> getReportletConfClass(final Class<Reportl\n         return result;\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @SuppressWarnings({ \"rawtypes\" })\n     private Set<Class<Reportlet>> getAllReportletClasses() {\n-        Set<Class<Reportlet>> reportletClasses = new HashSet<>();\n-\n-        for (String className : classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET)) {\n-            try {\n-                Class reportletClass = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader());\n-                reportletClasses.add(reportletClass);\n-            } catch (ClassNotFoundException e) {\n-                LOG.warn(\"Could not load class {}\", className);\n-            } catch (LinkageError e) {\n-                LOG.warn(\"Could not link class {}\", className);\n-            }\n-        }\n-        return reportletClasses;\n+        return CollectionUtils2.collect(classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET),\n+                new Transformer<String, Class<Reportlet>>() {\n+\n+                    @SuppressWarnings(\"unchecked\")\n+                    @Override\n+                    public Class<Reportlet> transform(final String className) {\n+                        Class<Reportlet> result = null;\n+                        try {\n+                            Class reportletClass = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader());\n+                            result = reportletClass;\n+                        } catch (ClassNotFoundException e) {\n+                            LOG.warn(\"Could not load class {}\", className);\n+                        } catch (LinkageError e) {\n+                            LOG.warn(\"Could not link class {}\", className);\n+                        }\n+\n+                        return result;\n+                    }\n+                },\n+                PredicateUtils.notNullPredicate(), new HashSet<Class<Reportlet>>());\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     public Set<String> getReportletConfClasses() {\n-        Set<String> reportletConfClasses = new HashSet<>();\n-\n-        for (Class<Reportlet> reportletClass : getAllReportletClasses()) {\n-            Class<? extends ReportletConf> reportletConfClass = getReportletConfClass(reportletClass);\n-            if (reportletConfClass != null) {\n-                reportletConfClasses.add(reportletConfClass.getName());\n-            }\n-        }\n-\n-        return reportletConfClasses;\n+        return CollectionUtils2.collect(getAllReportletClasses(),\n+                new Transformer<Class<Reportlet>, String>() {\n+\n+                    @Override\n+                    public String transform(final Class<Reportlet> reportletClass) {\n+                        Class<? extends ReportletConf> reportletConfClass = getReportletConfClass(reportletClass);\n+                        return reportletConfClass == null ? null : reportletConfClass.getName();\n+                    }\n+                }, PredicateUtils.notNullPredicate(), new HashSet<String>());\n     }\n \n     public Class<Reportlet> findReportletClassHavingConfClass(final Class<? extends ReportletConf> reportletConfClass) {"},{"sha":"9a3c64126ecf60994f60a56ab9b599b97f04ec77","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -157,7 +160,13 @@ public ResourceTO read(final String resourceName) {\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public List<ResourceTO> list() {\n-        return binder.getResourceTOs(resourceDAO.findAll());\n+        return CollectionUtils.collect(resourceDAO.findAll(), new Transformer<ExternalResource, ResourceTO>() {\n+\n+            @Override\n+            public ResourceTO transform(final ExternalResource input) {\n+                return binder.getResourceTO(input);\n+            }\n+        }, new ArrayList<ResourceTO>());\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_GETCONNECTOROBJECT')\")"},{"sha":"8e15c9663714f4406a5d6b685291c4711d962d81","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":29,"deletions":18,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -21,6 +21,8 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -126,7 +128,7 @@ public <T extends AbstractSchemaTO> T create(\n                 binder.create((PlainSchemaTO) schemaTO, normalSchema);\n                 normalSchema = plainSchemaDAO.save(normalSchema);\n \n-                created = (T) binder.getSchemaTO(normalSchema, attrUtil);\n+                created = (T) binder.getPlainSchemaTO(normalSchema, attrUtil);\n         }\n         return created;\n     }\n@@ -162,28 +164,37 @@ public <T extends AbstractSchemaTO> List<T> list(final AttributableType attrType\n         List<T> result;\n         switch (schemaType) {\n             case VIRTUAL:\n-                List<VirSchema> virSchemas = virSchemaDAO.findAll(attrUtil.virSchemaClass());\n-                result = new ArrayList<>(virSchemas.size());\n-                for (VirSchema derSchema : virSchemas) {\n-                    result.add((T) binder.getVirSchemaTO(derSchema));\n-                }\n+                result = CollectionUtils.collect(virSchemaDAO.findAll(attrUtil.virSchemaClass()),\n+                        new Transformer<VirSchema, T>() {\n+\n+                            @Override\n+                            public T transform(final VirSchema input) {\n+                                return (T) binder.getVirSchemaTO(input);\n+                            }\n+                        }, new ArrayList<T>());\n                 break;\n \n             case DERIVED:\n-                List<DerSchema> derSchemas = derSchemaDAO.findAll(attrUtil.derSchemaClass());\n-                result = new ArrayList<>(derSchemas.size());\n-                for (DerSchema derSchema : derSchemas) {\n-                    result.add((T) binder.getDerSchemaTO(derSchema));\n-                }\n+                result = CollectionUtils.collect(derSchemaDAO.findAll(attrUtil.derSchemaClass()),\n+                        new Transformer<DerSchema, T>() {\n+\n+                            @Override\n+                            public T transform(final DerSchema input) {\n+                                return (T) binder.getDerSchemaTO(input);\n+                            }\n+                        }, new ArrayList<T>());\n                 break;\n \n             case PLAIN:\n             default:\n-                List<PlainSchema> schemas = plainSchemaDAO.findAll(attrUtil.plainSchemaClass());\n-                result = new ArrayList<>(schemas.size());\n-                for (PlainSchema schema : schemas) {\n-                    result.add((T) binder.getSchemaTO(schema, attrUtil));\n-                }\n+                result = CollectionUtils.collect(plainSchemaDAO.findAll(attrUtil.plainSchemaClass()),\n+                        new Transformer<PlainSchema, T>() {\n+\n+                            @Override\n+                            public T transform(final PlainSchema input) {\n+                                return (T) binder.getPlainSchemaTO(input, attrUtil);\n+                            }\n+                        }, new ArrayList<T>());\n         }\n \n         return result;\n@@ -223,7 +234,7 @@ public <T extends AbstractSchemaTO> T read(\n                     throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n                 }\n \n-                read = (T) binder.getSchemaTO(schema, attrUtil);\n+                read = (T) binder.getPlainSchemaTO(schema, attrUtil);\n         }\n \n         return read;\n@@ -310,7 +321,7 @@ protected AbstractSchemaTO resolveReference(final Method method, final Object...\n                         result = binder.getDerSchemaTO(derSchema);\n                     }\n                 } else {\n-                    result = binder.getSchemaTO(plainSchema, attrUtil);\n+                    result = binder.getPlainSchemaTO(plainSchema, attrUtil);\n                 }\n \n                 return result;"},{"sha":"b2a89cae6e2fdfc150a8fde00304752f38e4994c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -21,6 +21,8 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -47,12 +49,14 @@ public class SecurityQuestionLogic extends AbstractTransactionalLogic<SecurityQu\n \n     @PreAuthorize(\"isAuthenticated()\")\n     public List<SecurityQuestionTO> list() {\n-        List<SecurityQuestionTO> result = new ArrayList<>();\n-        for (SecurityQuestion securityQuestion : securityQuestionDAO.findAll()) {\n-            result.add(binder.getSecurityQuestionTO(securityQuestion));\n-        }\n-\n-        return result;\n+        return CollectionUtils.collect(securityQuestionDAO.findAll(),\n+                new Transformer<SecurityQuestion, SecurityQuestionTO>() {\n+\n+                    @Override\n+                    public SecurityQuestionTO transform(final SecurityQuestion input) {\n+                        return binder.getSecurityQuestionTO(input);\n+                    }\n+                }, new ArrayList<SecurityQuestionTO>());\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -136,7 +140,7 @@ protected SecurityQuestionTO resolveReference(final Method method, final Object.\n             }\n         }\n \n-        if ((key != null) && !key.equals(0l)) {\n+        if ((key != null) && !key.equals(0L)) {\n             try {\n                 return binder.getSecurityQuestionTO(securityQuestionDAO.find(key));\n             } catch (Throwable ignore) {"},{"sha":"4e513288e54910aafa1a37f9e013bdf82ff109d8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n@@ -146,15 +148,16 @@ public int count(final TaskType taskType) {\n     public <T extends AbstractTaskTO> List<T> list(final TaskType taskType,\n             final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n-        TaskUtil taskUtil = taskUtilFactory.getInstance(taskType);\n+        final TaskUtil taskUtil = taskUtilFactory.getInstance(taskType);\n \n-        List<Task> tasks = taskDAO.findAll(page, size, orderByClauses, taskType);\n-        List<T> taskTOs = new ArrayList<>(tasks.size());\n-        for (Task task : tasks) {\n-            taskTOs.add((T) binder.getTaskTO(task, taskUtil));\n-        }\n+        return CollectionUtils.collect(taskDAO.findAll(page, size, orderByClauses, taskType),\n+                new Transformer<Task, T>() {\n \n-        return taskTOs;\n+                    @Override\n+                    public T transform(final Task task) {\n+                        return (T) binder.getTaskTO(task, taskUtil);\n+                    }\n+                }, new ArrayList<T>());\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n@@ -236,8 +239,7 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n-        SyncopeClientException sce = SyncopeClientException.build(\n-                ClientExceptionType.InvalidPropagationTaskExecReport);\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPropagationTaskExecReport);\n \n         TaskUtil taskUtil = taskUtilFactory.getInstance(exec.getTask());\n         if (TaskType.PROPAGATION == taskUtil.getType()) {\n@@ -372,7 +374,7 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n             }\n         }\n \n-        if ((key != null) && !key.equals(0l)) {\n+        if ((key != null) && !key.equals(0L)) {\n             try {\n                 final Task task = taskDAO.find(key);\n                 return binder.getTaskTO(task, taskUtilFactory.getInstance(task));"},{"sha":"b67f543e73aa75599858deeafb3f78ce2baecfed","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":35,"deletions":28,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -24,10 +24,11 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.AttrMod;\n@@ -129,15 +130,16 @@ public int searchCount(final SearchCond searchCondition) {\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public List<UserTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n-        Set<Long> adminGroupIds = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n+        final Set<Long> adminGroupKeys = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n \n-        List<User> users = userDAO.findAll(adminGroupIds, page, size, orderBy);\n-        List<UserTO> userTOs = new ArrayList<>(users.size());\n-        for (User user : users) {\n-            userTOs.add(binder.getUserTO(user));\n-        }\n+        return CollectionUtils.collect(userDAO.findAll(adminGroupKeys, page, size, orderBy),\n+                new Transformer<User, UserTO>() {\n \n-        return userTOs;\n+                    @Override\n+                    public UserTO transform(final User input) {\n+                        return binder.getUserTO(input);\n+                    }\n+                }, new ArrayList<UserTO>());\n     }\n \n     @PreAuthorize(\"isAuthenticated() \"\n@@ -160,15 +162,16 @@ public UserTO read(final Long key) {\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy) {\n \n-        final List<User> matchingUsers = searchDAO.search(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames()),\n+        final List<User> matchingUsers = searchDAO.search(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.\n+                getOwnedEntitlementNames()),\n                 searchCondition, page, size, orderBy, SubjectType.USER);\n+        return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {\n \n-        final List<UserTO> result = new ArrayList<>(matchingUsers.size());\n-        for (User user : matchingUsers) {\n-            result.add(binder.getUserTO(user));\n-        }\n-\n-        return result;\n+            @Override\n+            public UserTO transform(final User input) {\n+                return binder.getUserTO(input);\n+            }\n+        }, new ArrayList<UserTO>());\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n@@ -178,12 +181,15 @@ public UserTO createSelf(final UserTO userTO, final boolean storePassword) {\n \n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     public UserTO create(final UserTO userTO, final boolean storePassword) {\n-        Set<Long> requestGroupIds = new HashSet<>(userTO.getMemberships().size());\n-        for (MembershipTO membership : userTO.getMemberships()) {\n-            requestGroupIds.add(membership.getGroupId());\n-        }\n-        Set<Long> adminGroupIds = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-        requestGroupIds.removeAll(adminGroupIds);\n+        Collection<Long> requestGroupIds = CollectionUtils.removeAll(\n+                CollectionUtils.collect(userTO.getMemberships(), new Transformer<MembershipTO, Long>() {\n+\n+                    @Override\n+                    public Long transform(final MembershipTO membership) {\n+                        return membership.getGroupId();\n+                    }\n+                }, new ArrayList<Long>()),\n+                GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames()));\n         if (!requestGroupIds.isEmpty()) {\n             throw new UnauthorizedGroupException(requestGroupIds);\n         }\n@@ -322,13 +328,14 @@ public UserTO deleteSelf() {\n     public UserTO delete(final Long key) {\n         List<Group> ownedGroups = groupDAO.findOwnedByUser(key);\n         if (!ownedGroups.isEmpty()) {\n-            List<String> owned = new ArrayList<>(ownedGroups.size());\n-            for (Group group : ownedGroups) {\n-                owned.add(group.getKey() + \" \" + group.getName());\n-            }\n-\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n-            sce.getElements().addAll(owned);\n+            sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n+\n+                @Override\n+                public String transform(final Group group) {\n+                    return group.getKey() + \" \" + group.getName();\n+                }\n+            }, new ArrayList<String>()));\n             throw sce;\n         }\n \n@@ -507,7 +514,7 @@ protected UserTO resolveReference(final Method method, final Object... args) thr\n             }\n         }\n \n-        if ((key != null) && !key.equals(0l)) {\n+        if ((key != null) && !key.equals(0L)) {\n             try {\n                 return key instanceof Long ? binder.getUserTO((Long) key) : binder.getUserTO((String) key);\n             } catch (Throwable ignore) {"},{"sha":"d15eef9156e3920ca6555baaaaa3b31cd244103c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -112,7 +112,7 @@ public UserTO submitForm(final WorkflowFormTO form) {\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                     new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                            new AbstractMap.SimpleEntry<UserMod, Boolean>((UserMod) updated.getResult(), Boolean.TRUE),\n+                            new AbstractMap.SimpleEntry<>((UserMod) updated.getResult(), Boolean.TRUE),\n                             updated.getPropByRes(),\n                             updated.getPerformedTasks()));\n "},{"sha":"c64ad843cb8373d6d83002f55ee2af48f45718fe","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/WorkflowLogic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWorkflowLogic.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -72,6 +72,7 @@ public void exportGroupDefinition(final MediaType format, final OutputStream os)\n \n     private void exportDiagram(final WorkflowAdapter adapter, final OutputStream os)\n             throws WorkflowException {\n+        \n         adapter.exportDiagram(os);\n     }\n "},{"sha":"44ddc5c7b78915da6ffafbf0e1c407b76eb39ee0","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/CollectionUtils2.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FCollectionUtils2.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bac03b2569644991e26d2879da2eda47bf9debb9/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FCollectionUtils2.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FCollectionUtils2.java?ref=bac03b2569644991e26d2879da2eda47bf9debb9","patch":"@@ -1,61 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc;\n-\n-import java.util.Iterator;\n-\n-public final class CollectionUtils2 {\n-\n-    /**\n-     * Returns the next element in <tt>iterator</tt> or <tt>defaultValue</tt> if the iterator is empty.\n-     *\n-     * @param defaultValue the default value to return if the iterator is empty\n-     * @return the next element of <tt>iterator</tt> or the default value\n-     */\n-    public static <T> T getNext(final Iterator<? extends T> iterator, final T defaultValue) {\n-        return iterator.hasNext() ? iterator.next() : defaultValue;\n-    }\n-\n-    /**\n-     * Returns the first element in <tt>iterable</tt> or <tt>defaultValue</tt> if the iterable is empty.\n-     *\n-     * <p/>\n-     * If no default value is desired (and the caller instead wants a {@link java.util.NoSuchElementException} to be\n-     * thrown), it is recommended that <tt>iterable.iterator().next()}</tt> is used instead.\n-     *\n-     * @param defaultValue the default value to return if the iterable is empty\n-     * @return the first element of <tt>iterable</tt> or the default value\n-     */\n-    public static <T> T getFirst(final Iterable<? extends T> iterable, final T defaultValue) {\n-        return getNext(iterable.iterator(), defaultValue);\n-    }\n-\n-    /**\n-     * Returns the first element in <tt>iterable</tt> or <tt>null</tt> if the iterable is empty.\n-     *\n-     * @return the first element of <tt>iterable</tt> or <tt>null</tt>\n-     */\n-    public static <T> T getFirstOrNull(final Iterable<? extends T> iterable) {\n-        return getNext(iterable.iterator(), null);\n-    }\n-\n-    private CollectionUtils2() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"e1a817ff2f66324928b070846d31aded82732eec","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/UnauthorizedGroupException.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedGroupException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedGroupException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedGroupException.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.Set;\n \n public class UnauthorizedGroupException extends RuntimeException {\n \n     private static final long serialVersionUID = 7540587364235915081L;\n \n-    private final Set<Long> groupIds;\n+    private final Collection<Long> groupIds;\n \n-    public UnauthorizedGroupException(final Set<Long> groupIds) {\n+    public UnauthorizedGroupException(final Collection<Long> groupIds) {\n         super(\"Missing entitlement for group(s) \" + groupIds);\n         this.groupIds = groupIds;\n     }\n@@ -36,7 +36,7 @@ public UnauthorizedGroupException(final Long groupId) {\n         this(Collections.singleton(groupId));\n     }\n \n-    public Set<Long> getGroupIds() {\n+    public Collection<Long> getGroupIds() {\n         return groupIds;\n     }\n }"},{"sha":"ec297387755df4605b45c20cb26ee4f9a2c72601","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/MalformedPathException.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FMalformedPathException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FMalformedPathException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FMalformedPathException.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+/**\n+ * Thrown when the realm path provided is not well formed.\n+ */\n+public class MalformedPathException extends RuntimeException {\n+\n+    private static final long serialVersionUID = -164735562182120006L;\n+\n+    public MalformedPathException(final String path) {\n+        super(\"Malformed path: \" + path);\n+    }\n+}"},{"sha":"5aa610698bb226c54bac9db29cc74abc1cb2309b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+\n+public interface RealmDAO extends DAO<Realm, Long> {\n+\n+    Realm getRoot();\n+\n+    Realm find(Long key);\n+\n+    Realm find(String fullPath);\n+\n+    List<Realm> findChildren(Realm realm);\n+\n+    List<Realm> findDescendants(Realm realm);\n+\n+    List<Realm> findAll();\n+\n+    Realm save(Realm realm);\n+\n+    void delete(Realm realm);\n+\n+    void delete(Long key);\n+}"},{"sha":"ab8fcac0d178eeb2ae9dd9928b833317dbe73731","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface Realm extends Entity<Long> {\n+\n+    String getName();\n+\n+    Realm getParent();\n+\n+    String getFullPath();\n+    \n+    AccountPolicy getAccountPolicy();\n+\n+    PasswordPolicy getPasswordPolicy();\n+\n+    void setName(String name);\n+\n+    void setParent(Realm parent);\n+\n+    void setAccountPolicy(AccountPolicy accountPolicy);\n+\n+    void setPasswordPolicy(PasswordPolicy passwordPolicy);\n+\n+}"},{"sha":"1dff1f2bbfa29c11cfcfa7311a2452f5b7dc2789","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":32,"deletions":24,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -28,6 +28,8 @@\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -422,15 +424,17 @@ public Group save(final Group group) {\n             group.setPasswordPolicy(null);\n         }\n \n-        // remove attributes without a valid template\n+        // remove plain attributes without a valid template\n         List<GPlainAttr> rToBeDeleted = new ArrayList<>();\n-        for (PlainAttr attr : group.getPlainAttrs()) {\n-            boolean found = false;\n-            for (GPlainAttrTemplate template : group.findInheritedTemplates(GPlainAttrTemplate.class)) {\n-                if (template.getSchema().equals(attr.getSchema())) {\n-                    found = true;\n-                }\n-            }\n+        for (final PlainAttr attr : group.getPlainAttrs()) {\n+            boolean found = CollectionUtils.exists(group.findInheritedTemplates(GPlainAttrTemplate.class),\n+                    new Predicate<GPlainAttrTemplate>() {\n+\n+                        @Override\n+                        public boolean evaluate(final GPlainAttrTemplate template) {\n+                            return template.getSchema().equals(attr.getSchema());\n+                        }\n+                    });\n             if (!found) {\n                 rToBeDeleted.add((GPlainAttr) attr);\n             }\n@@ -441,14 +445,16 @@ public Group save(final Group group) {\n         }\n \n         // remove derived attributes without a valid template\n-        List<GDerAttr> rDerToBeDeleted = new ArrayList<GDerAttr>();\n-        for (DerAttr attr : group.getDerAttrs()) {\n-            boolean found = false;\n-            for (GDerAttrTemplate template : group.findInheritedTemplates(GDerAttrTemplate.class)) {\n-                if (template.getSchema().equals(attr.getSchema())) {\n-                    found = true;\n-                }\n-            }\n+        List<GDerAttr> rDerToBeDeleted = new ArrayList<>();\n+        for (final DerAttr attr : group.getDerAttrs()) {\n+            boolean found = CollectionUtils.exists(group.findInheritedTemplates(GDerAttrTemplate.class),\n+                    new Predicate<GDerAttrTemplate>() {\n+\n+                        @Override\n+                        public boolean evaluate(final GDerAttrTemplate template) {\n+                            return template.getSchema().equals(attr.getSchema());\n+                        }\n+                    });\n             if (!found) {\n                 rDerToBeDeleted.add((GDerAttr) attr);\n             }\n@@ -459,14 +465,16 @@ public Group save(final Group group) {\n         }\n \n         // remove virtual attributes without a valid template\n-        List<GVirAttr> rVirToBeDeleted = new ArrayList<GVirAttr>();\n-        for (VirAttr attr : group.getVirAttrs()) {\n-            boolean found = false;\n-            for (GVirAttrTemplate template : group.findInheritedTemplates(GVirAttrTemplate.class)) {\n-                if (template.getSchema().equals(attr.getSchema())) {\n-                    found = true;\n-                }\n-            }\n+        List<GVirAttr> rVirToBeDeleted = new ArrayList<>();\n+        for (final VirAttr attr : group.getVirAttrs()) {\n+            boolean found = CollectionUtils.exists(group.findInheritedTemplates(GVirAttrTemplate.class),\n+                    new Predicate<GVirAttrTemplate>() {\n+\n+                        @Override\n+                        public boolean evaluate(final GVirAttrTemplate template) {\n+                            return template.getSchema().equals(attr.getSchema());\n+                        }\n+                    });\n             if (!found) {\n                 LOG.debug(\"Removing {} from {} because no template is available for it\", attr, group);\n                 rVirToBeDeleted.add((GVirAttr) attr);"},{"sha":"68c56779cd952598e48d335030283a5ad396a75e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.springframework.stereotype.Repository;\n \n @Repository\n@@ -145,6 +146,15 @@ public <T extends Policy> T save(final T policy) {\n \n     @Override\n     public <T extends Policy> void delete(final T policy) {\n+        if (policy instanceof AccountPolicy || policy instanceof PasswordPolicy) {\n+            final String field = policy instanceof AccountPolicy ? \"accountPolicy\" : \"passwordPolicy\";\n+            entityManager.createQuery(\n+                    \"UPDATE \" + JPARealm.class.getSimpleName() + \" e SET e.\" + field + \" = NULL \"\n+                    + \"WHERE e.\" + field + \"=:policy\").\n+                    setParameter(\"policy\", policy).\n+                    executeUpdate();\n+        }\n+\n         entityManager.remove(policy);\n     }\n }"},{"sha":"896277c2ad37be2220f483227bf592051e93291f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPARealmDAO extends AbstractDAO<Realm, Long> implements RealmDAO {\n+\n+    private static final Pattern PATH_PATTERN = Pattern.compile(\"^(/[A-Za-z0-9]+)+\");\n+\n+    @Override\n+    public Realm getRoot() {\n+        TypedQuery<Realm> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e WHERE e.parent IS NULL\", Realm.class);\n+\n+        Realm result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"Root realm not found\", e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Realm find(final Long key) {\n+        return entityManager.find(JPARealm.class, key);\n+    }\n+\n+    @Override\n+    public Realm find(final String fullPath) {\n+        if (\"/\".equals(fullPath)) {\n+            return getRoot();\n+        }\n+\n+        if (!PATH_PATTERN.matcher(fullPath).matches()) {\n+            throw new MalformedPathException(fullPath);\n+        }\n+\n+        Realm root = getRoot();\n+        if (root == null) {\n+            return null;\n+        }\n+\n+        Realm current = root;\n+        for (final String pathElement : fullPath.substring(1).split(\"/\")) {\n+            current = CollectionUtils.find(findChildren(current), new Predicate<Realm>() {\n+\n+                @Override\n+                public boolean evaluate(final Realm realm) {\n+                    return pathElement.equals(realm.getName());\n+                }\n+            });\n+            if (current == null) {\n+                return null;\n+            }\n+        }\n+        return current;\n+    }\n+\n+    @Override\n+    public List<Realm> findChildren(final Realm realm) {\n+        TypedQuery<Realm> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e WHERE e.parent=:realm\", Realm.class);\n+        query.setParameter(\"realm\", realm);\n+\n+        return query.getResultList();\n+    }\n+\n+    private void findDescendants(final List<Realm> result, final Realm realm) {\n+        result.add(realm);\n+        List<Realm> children = findChildren(realm);\n+        if (children != null) {\n+            for (Realm child : children) {\n+                findDescendants(result, child);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<Realm> findDescendants(final Realm realm) {\n+        List<Realm> result = new ArrayList<>();\n+        findDescendants(result, realm);\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Realm> findAll() {\n+        TypedQuery<Realm> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \", Realm.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Realm save(final Realm realm) {\n+        return entityManager.merge(realm);\n+    }\n+\n+    @Override\n+    public void delete(final Realm realm) {\n+        for (Realm toBeDeleted : findDescendants(realm)) {\n+            toBeDeleted.setParent(null);\n+            entityManager.remove(toBeDeleted);\n+        }\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        Realm realm = find(key);\n+        if (realm == null) {\n+            return;\n+        }\n+\n+        delete(realm);\n+    }\n+\n+}"},{"sha":"a4cadf4d8268d12e1028bac801fd2989f8fcabd5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n@@ -141,7 +142,9 @@ public class JPAEntityFactory implements EntityFactory {\n     public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n         T result;\n \n-        if (reference.equals(User.class)) {\n+        if (reference.equals(Realm.class)) {\n+            result = (T) new JPARealm();\n+        } else if (reference.equals(User.class)) {\n             result = (T) new JPAUser();\n         } else if (reference.equals(Group.class)) {\n             result = (T) new JPAGroup();"},{"sha":"22c48f6aa3321d0968e6b0f9eb63d871324f4fe1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import javax.validation.constraints.Size;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n+\n+@Entity\n+@Table(name = JPARealm.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"name\", \"parent_id\" }))\n+@Cacheable\n+@RealmCheck\n+public class JPARealm extends AbstractEntity<Long> implements Realm {\n+\n+    private static final long serialVersionUID = 5533247460239909964L;\n+\n+    public static final String TABLE = \"Realm\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Size(min = 1)\n+    private String name;\n+\n+    @ManyToOne(optional = true)\n+    private JPARealm parent;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private JPAPasswordPolicy passwordPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private JPAAccountPolicy accountPolicy;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public Realm getParent() {\n+        return parent;\n+    }\n+\n+    @Override\n+    public String getFullPath() {\n+        return getParent() == null\n+                ? StringUtils.EMPTY\n+                : getParent().getFullPath() + \"/\" + getName();\n+    }\n+\n+    @Override\n+    public AccountPolicy getAccountPolicy() {\n+        return accountPolicy == null && getParent() != null ? getParent().getAccountPolicy() : accountPolicy;\n+    }\n+\n+    @Override\n+    public PasswordPolicy getPasswordPolicy() {\n+        return passwordPolicy == null && getParent() != null ? getParent().getPasswordPolicy() : passwordPolicy;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public void setParent(final Realm parent) {\n+        checkType(parent, JPARealm.class);\n+        this.parent = (JPARealm) parent;\n+    }\n+\n+    @Override\n+    public void setAccountPolicy(final AccountPolicy accountPolicy) {\n+        checkType(accountPolicy, JPAAccountPolicy.class);\n+        this.accountPolicy = (JPAAccountPolicy) accountPolicy;\n+    }\n+\n+    @Override\n+    public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n+        checkType(passwordPolicy, JPAPasswordPolicy.class);\n+        this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n+    }\n+\n+}"},{"sha":"a71417e6309fbcb61b203c3b0ef16d54e06752fe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmCheck.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = RealmValidator.class)\n+@Documented\n+public @interface RealmCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.realm}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"aa92d00dfca2af1762ad2b36b23683c762b58e7a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.util.regex.Pattern;\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+\n+public class RealmValidator extends AbstractValidator<RealmCheck, Realm> {\n+\n+    private static final Pattern NAME_PATTERN = Pattern.compile(\"^[A-Za-z0-9]+\");\n+\n+    @Override\n+    public boolean isValid(final Realm object, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = true;\n+\n+        if (\"/\".equals(object.getName())) {\n+            if (object.getParent() != null) {\n+                isValid = false;\n+\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidRealm,\n+                                \"Root realm cannot have a parent realm\")).\n+                        addPropertyNode(\"parent\").addConstraintViolation();\n+            }\n+        } else {\n+            if (object.getParent() == null) {\n+                isValid = false;\n+\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidRealm,\n+                                \"A realm needs to reference a parent realm\")).\n+                        addPropertyNode(\"parent\").addConstraintViolation();\n+            }\n+\n+            if (!NAME_PATTERN.matcher(object.getName()).matches()) {\n+                isValid = false;\n+\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidRealm,\n+                                \"Only letters and numbers are allowed in realm name\")).\n+                        addPropertyNode(\"name\").addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"ea3a058d6a2dcbbf68efd80764f64ee7346dd9d9","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -39,6 +39,15 @@ under the License.\n   <table-generator name=\"SEQ_MAttrPlainValue\" pk-column-value=\"SEQ_MAttrPlainValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_CAttrPlainValue\" pk-column-value=\"SEQ_CAttrPlainValue\" initial-value=\"100\"/>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARealm\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_Realm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_Realm\" pk-column-value=\"SEQ_Realm\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"ea3a058d6a2dcbbf68efd80764f64ee7346dd9d9","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -39,6 +39,15 @@ under the License.\n   <table-generator name=\"SEQ_MAttrPlainValue\" pk-column-value=\"SEQ_MAttrPlainValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_CAttrPlainValue\" pk-column-value=\"SEQ_CAttrPlainValue\" initial-value=\"100\"/>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARealm\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_Realm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_Realm\" pk-column-value=\"SEQ_Realm\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"e26f6d0d28bd74c577ee469ccb09e1669df9c9cd","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -39,6 +39,15 @@ under the License.\n   <table-generator name=\"SEQ_MAttrPlainValue\" pk-column-value=\"SEQ_MAttrPlainValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_CAttrPlainValue\" pk-column-value=\"SEQ_CAttrPlainValue\" initial-value=\"100\"/>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARealm\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_Realm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_Realm\" pk-column-value=\"SEQ_Realm\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"e060c62b3e645bde05ad6b7cb65a6e133f81d680","filename":"core/persistence-jpa/src/main/resources/content.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -18,6 +18,8 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n+  <Realm id=\"1\" name=\"/\"/>\n+\n   <SyncopeConf id=\"1\" \n                creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2014-06-20 11:00:00\" lastChangeDate=\"2014-06-20 11:00:00\"/>\n@@ -109,6 +111,10 @@ under the License.\n   <Notification_events Notification_id=\"2\" events=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>  \n   \n   <!-- Authentication and authorization -->\n+  <Entitlement name=\"REALM_LIST\"/>\n+  <Entitlement name=\"REALM_CREATE\"/>\n+  <Entitlement name=\"REALM_UPDATE\"/>\n+  <Entitlement name=\"REALM_DELETE\"/>\n   <Entitlement name=\"SCHEMA_LIST\"/>\n   <Entitlement name=\"SCHEMA_CREATE\"/>\n   <Entitlement name=\"SCHEMA_READ\"/>"},{"sha":"ccea7dac0613a9ad8408fc6a1c74bcd7d008f4d5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -39,7 +39,7 @@ public class EntitlementTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        assertEquals(\"did not get expected number of entitlements \", 86, list.size());\n+        assertEquals(\"did not get expected number of entitlements \", 90, list.size());\n     }\n \n     @Test"},{"sha":"a08a37ffe96eaa971dc83ac74bdff82f12ea142b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/RealmTest.java","status":"added","additions":171,"deletions":0,"changes":171,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class RealmTest extends AbstractTest {\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Test\n+    public void getRoot() {\n+        assertNotNull(realmDAO.getRoot());\n+    }\n+\n+    @Test\n+    public void find() {\n+        Realm realm = realmDAO.find(3L);\n+        assertNotNull(realm);\n+        assertEquals(\"even\", realm.getName());\n+        assertEquals(1, realm.getParent().getKey(), 0);\n+        assertEquals(realmDAO.getRoot(), realm.getParent());\n+\n+        realm = realmDAO.find(\"/even/two\");\n+        assertNotNull(realm);\n+        assertEquals(4, realm.getKey(), 0);\n+        assertEquals(\"two\", realm.getName());\n+        assertEquals(\"/even/two\", realm.getFullPath());\n+    }\n+\n+    @Test(expected = MalformedPathException.class)\n+    public void findInvalidPath() {\n+        realmDAO.find(\"even/two\");\n+    }\n+\n+    @Test\n+    public void findChildren() {\n+        List<Realm> children = realmDAO.findChildren(realmDAO.find(\"/\"));\n+        assertEquals(2, children.size());\n+        assertTrue(children.contains(realmDAO.find(\"/odd\")));\n+        assertTrue(children.contains(realmDAO.find(\"/even\")));\n+\n+        children = realmDAO.findChildren(realmDAO.find(\"/odd\"));\n+        assertTrue(children.isEmpty());\n+    }\n+\n+    @Test\n+    public void findDescendants() {\n+        assertTrue(CollectionUtils.disjunction(realmDAO.findAll(), realmDAO.findDescendants(realmDAO.getRoot())).\n+                isEmpty());\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<Realm> list = realmDAO.findAll();\n+        assertNotNull(list);\n+        assertFalse(list.isEmpty());\n+        for (Realm realm : list) {\n+            assertNotNull(realm);\n+        }\n+    }\n+\n+    @Test\n+    public void save() {\n+        Realm realm = entityFactory.newEntity(Realm.class);\n+        realm.setName(\"last\");\n+        realm.setParent(realmDAO.find(\"/even/two\"));\n+        assertNull(realm.getKey());\n+\n+        Realm actual = realmDAO.save(realm);\n+        assertNotNull(actual.getKey());\n+        assertEquals(\"last\", actual.getName());\n+        assertEquals(\"/even/two/last\", actual.getFullPath());\n+        assertEquals(realmDAO.find(\"/even/two\"), actual.getParent());\n+        assertNull(realm.getAccountPolicy());\n+        assertNull(realm.getPasswordPolicy());\n+\n+        realm = actual;\n+        realm.setAccountPolicy((AccountPolicy) policyDAO.find(6L));\n+        realm.setPasswordPolicy((PasswordPolicy) policyDAO.find(4L));\n+\n+        actual = realmDAO.save(realm);\n+        assertNotNull(actual.getAccountPolicy());\n+        assertNotNull(actual.getPasswordPolicy());\n+    }\n+\n+    @Test\n+    public void saveInvalidName() {\n+        Realm realm = entityFactory.newEntity(Realm.class);\n+        realm.setName(\" a name\");\n+        realm.setParent(realmDAO.getRoot());\n+\n+        try {\n+            realmDAO.save(realm);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidRealm));\n+        }\n+    }\n+\n+    @Test\n+    public void saveNullParent() {\n+        Realm realm = entityFactory.newEntity(Realm.class);\n+        realm.setName(\"name\");\n+        realm.setParent(null);\n+\n+        try {\n+            realmDAO.save(realm);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertTrue(e.hasViolation(EntityViolationType.InvalidRealm));\n+        }\n+    }\n+\n+    @Test\n+    public void delete() {\n+        Realm realm = entityFactory.newEntity(Realm.class);\n+        realm.setName(\"name\");\n+        realm.setParent(realmDAO.getRoot());\n+\n+        Realm actual = realmDAO.save(realm);\n+        assertNotNull(actual);\n+\n+        Long key = actual.getKey();\n+        assertNotNull(realmDAO.find(key));\n+\n+        realmDAO.delete(key);\n+        assertNull(realmDAO.find(key));\n+    }\n+}"},{"sha":"339d7065284033a94a640224f2bcb97db2aec8cb","filename":"core/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":56,"deletions":47,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -18,6 +18,11 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n+  <Realm id=\"1\" name=\"/\"/>\n+  <Realm id=\"2\" name=\"odd\" parent_id=\"1\"/>\n+  <Realm id=\"3\" name=\"even\" parent_id=\"1\"/>\n+  <Realm id=\"4\" name=\"two\" parent_id=\"3\"/>\n+  \n   <SyncopeConf id=\"1\" \n                creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2014-06-20 11:00:00\" lastChangeDate=\"2014-06-20 11:00:00\"/>\n@@ -127,66 +132,66 @@ under the License.\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n \n   <SyncopeGroup id=\"1\" name=\"root\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"2\" name=\"child\" parent_id=\"1\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"3\" name=\"citizen\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"4\" name=\"employee\" parent_id=\"3\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"5\" name=\"secretary\" parent_id=\"4\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"6\"\n-               name=\"director\" parent_id=\"4\" userOwner_id=\"5\"\n-               inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-               inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n-               passwordPolicy_id=\"4\"\n-               accountPolicy_id=\"6\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                name=\"director\" parent_id=\"4\" userOwner_id=\"5\"\n+                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n+                inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n+                passwordPolicy_id=\"4\"\n+                accountPolicy_id=\"6\"\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"7\"\n-               name=\"managingDirector\" parent_id=\"6\"\n-               inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-               inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"1\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                name=\"managingDirector\" parent_id=\"6\"\n+                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n+                inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"1\"\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"8\"\n-               name=\"otherchild\" parent_id=\"1\"\n-               inheritVirAttrs=\"1\"\n-               passwordPolicy_id=\"4\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                name=\"otherchild\" parent_id=\"1\"\n+                inheritVirAttrs=\"1\"\n+                passwordPolicy_id=\"4\"\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"9\" name=\"groupForWorkflowApproval\" parent_id=\"1\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"10\"\n-               name=\"managingConsultant\" parent_id=\"6\"\n-               inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-               inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"0\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                name=\"managingConsultant\" parent_id=\"6\"\n+                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n+                inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"0\"\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"11\" name=\"groupForWorkflowOptIn\" parent_id=\"1\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"12\" name=\"aGroupForPropagation\" parent_id=\"1\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"13\" name=\"bGroupForPropagation\" parent_id=\"1\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"14\"\n-               name=\"artDirector\" parent_id=\"4\"\n-               inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-               inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n-               passwordPolicy_id=\"8\"\n-               accountPolicy_id=\"6\"\n-               creator=\"admin\" lastModifier=\"admin\" \n-               creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+                name=\"artDirector\" parent_id=\"4\"\n+                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n+                inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n+                passwordPolicy_id=\"8\"\n+                accountPolicy_id=\"6\"\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n   <Membership id=\"1\" user_id=\"1\" group_id=\"1\"\n               creator=\"admin\" lastModifier=\"admin\" \n@@ -1019,6 +1024,10 @@ under the License.\n   <!-- Authentication and authorization -->\n   <Entitlement name=\"base\"/>\n   <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n+  <Entitlement name=\"REALM_LIST\"/>\n+  <Entitlement name=\"REALM_CREATE\"/>\n+  <Entitlement name=\"REALM_UPDATE\"/>\n+  <Entitlement name=\"REALM_DELETE\"/>\n   <Entitlement name=\"SCHEMA_LIST\"/>\n   <Entitlement name=\"SCHEMA_CREATE\"/>\n   <Entitlement name=\"SCHEMA_READ\"/>"},{"sha":"2c69f4bf7d90cb80bc0528912fde05c12d58b268","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnIdBundleManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -37,7 +37,7 @@ public interface ConnIdBundleManager {\n     ConnectorInfo getConnectorInfo(final String location, final String bundleName, final String bundleVersion,\n             final String connectorName);\n \n-    Map<String, List<ConnectorInfo>> getConnectorInfos();\n+    Map<URI, ConnectorInfoManager> getConnInfoManagers();\n \n     void resetConnManagers();\n "},{"sha":"1697cd922a61c348c9822984f22c6024900395c3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+\n+public interface RealmDataBinder {\n+\n+    Realm create(String parentPath, RealmTO realmTO);\n+\n+    void update(Realm realm, RealmTO realmTO);\n+\n+    RealmTO getRealmTO(Realm realm);\n+\n+}"},{"sha":"babfb5ef25edacf238ceebd79641ad6e3c67fbb3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ResourceDataBinder.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import java.util.Collection;\n-import java.util.List;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -32,8 +30,6 @@ public interface ResourceDataBinder {\n \n     ResourceTO getResourceTO(ExternalResource resource);\n \n-    List<ResourceTO> getResourceTOs(Collection<? extends ExternalResource> resources);\n-\n     ExternalResource update(ExternalResource resource, ResourceTO resourceTO);\n \n }"},{"sha":"49e1138aea8478cade7fb081dce874ce5eed38fc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SchemaDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -36,7 +36,7 @@ public interface SchemaDataBinder {\n \n     <T extends DerSchema> DerSchemaTO getDerSchemaTO(T derSchema);\n \n-    <T extends PlainSchema> PlainSchemaTO getSchemaTO(T schema, AttributableUtil attributableUtil);\n+    <T extends PlainSchema> PlainSchemaTO getPlainSchemaTO(T schema, AttributableUtil attributableUtil);\n \n     <T extends VirSchema> VirSchemaTO getVirSchemaTO(T virSchema);\n "},{"sha":"c7ea22acb758760195a02feac989915691e32109","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnIdBundleManagerImpl.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -256,12 +256,8 @@ public ConnectorInfo getConnectorInfo(\n     }\n \n     @Override\n-    public Map<String, List<ConnectorInfo>> getConnectorInfos() {\n-        final Map<String, List<ConnectorInfo>> infos = new LinkedHashMap<>();\n-        for (Map.Entry<URI, ConnectorInfoManager> entry : connInfoManagers.entrySet()) {\n-            infos.put(entry.getKey().toString(), entry.getValue().getConnectorInfos());\n-        }\n-        return infos;\n+    public Map<URI, ConnectorInfoManager> getConnInfoManagers() {\n+        return connInfoManagers;\n     }\n \n     @Override"},{"sha":"a5f12aa2a877f51af2c074ca12708f5d4f79c983","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RealmDataBinderImpl implements RealmDataBinder {\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public Realm create(final String parentPath, final RealmTO realmTO) {\n+        Realm realm = entityFactory.newEntity(Realm.class);\n+\n+        realm.setName(realmTO.getName());\n+        realm.setParent(realmDAO.find(parentPath));\n+\n+        if (realmTO.getPasswordPolicy() != null) {\n+            realm.setPasswordPolicy((PasswordPolicy) policyDAO.find(realmTO.getPasswordPolicy()));\n+        }\n+        if (realmTO.getAccountPolicy() != null) {\n+            realm.setAccountPolicy((AccountPolicy) policyDAO.find(realmTO.getAccountPolicy()));\n+        }\n+\n+        return realm;\n+    }\n+\n+    @Override\n+    public void update(final Realm realm, final RealmTO realmTO) {\n+        realm.setName(realmTO.getName());\n+        realm.setParent(realmTO.getParent() == 0 ? null : realmDAO.find(realmTO.getParent()));\n+\n+        if (realmTO.getPasswordPolicy() != null) {\n+            realm.setPasswordPolicy((PasswordPolicy) policyDAO.find(realmTO.getPasswordPolicy()));\n+        }\n+        if (realmTO.getAccountPolicy() != null) {\n+            realm.setAccountPolicy((AccountPolicy) policyDAO.find(realmTO.getAccountPolicy()));\n+        }\n+    }\n+\n+    @Override\n+    public RealmTO getRealmTO(final Realm realm) {\n+        RealmTO realmTO = new RealmTO();\n+\n+        realmTO.setKey(realm.getKey());\n+        realmTO.setName(realm.getName());\n+        realmTO.setParent(realm.getParent() == null ? 0 : realm.getParent().getKey());\n+        realmTO.setFullPath(realm.getFullPath());\n+        realmTO.setAccountPolicy(realm.getAccountPolicy() == null ? null : realm.getAccountPolicy().getKey());\n+        realmTO.setPasswordPolicy(realm.getPasswordPolicy() == null ? null : realm.getPasswordPolicy().getKey());\n+\n+        return realmTO;\n+    }\n+\n+}"},{"sha":"05a0648ab57c304e11779b5b24fd66bc24f89da8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n@@ -236,16 +234,6 @@ public ConnInstance getConnInstance(final ResourceTO resourceTO) {\n         return connRegistry.getOverriddenConnInstance(connInstanceClone, resourceTO.getConnConfProperties());\n     }\n \n-    @Override\n-    public List<ResourceTO> getResourceTOs(final Collection<? extends ExternalResource> resources) {\n-        List<ResourceTO> resourceTOs = new ArrayList<>();\n-        for (ExternalResource resource : resources) {\n-            resourceTOs.add(getResourceTO(resource));\n-        }\n-\n-        return resourceTOs;\n-    }\n-\n     @Override\n     public ResourceTO getResourceTO(final ExternalResource resource) {\n         if (resource == null) {"},{"sha":"7167922234aac0d6bb00fc87c9b7e02127a8edda","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -90,7 +90,7 @@ public <T extends PlainSchema> void update(final PlainSchemaTO schemaTO, final T\n     }\n \n     @Override\n-    public <T extends PlainSchema> PlainSchemaTO getSchemaTO(\n+    public <T extends PlainSchema> PlainSchemaTO getPlainSchemaTO(\n             final T schema, final AttributableUtil attributableUtil) {\n \n         PlainSchemaTO schemaTO = new PlainSchemaTO();"},{"sha":"cdfb6fedd52d954088d7750508a7381ef4a878df","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.misc.CollectionUtils2;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;"},{"sha":"a8305a697cfa89c67dbff1a6e7617704664c602a","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java","status":"modified","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -21,15 +21,9 @@\n import org.apache.syncope.core.provisioning.java.AbstractTest;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.util.Arrays;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n@@ -59,36 +53,6 @@ public class ResourceDataBinderTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n-    @Test\n-    public void databinding() throws IOException {\n-        ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n-        assertNotNull(resource);\n-\n-        ResourceTO resourceTO = resourceDataBinder.getResourceTO(resource);\n-        assertNotNull(resourceTO);\n-\n-        ExternalResource fromto = resourceDataBinder.update(resource, resourceTO);\n-        assertNotNull(fromto);\n-        assertEquals(resource, fromto);\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, resourceTO);\n-\n-        assertEquals(resourceTO, mapper.readValue(writer.toString(), ResourceTO.class));\n-\n-        List<ResourceTO> resourceTOs = resourceDataBinder.getResourceTOs(resourceDAO.findAll());\n-        assertNotNull(resourceTOs);\n-        assertFalse(resourceTOs.isEmpty());\n-\n-        writer = new StringWriter();\n-        mapper.writeValue(writer, resourceTOs);\n-\n-        ResourceTO[] actual = mapper.readValue(writer.toString(), ResourceTO[].class);\n-        assertEquals(resourceTOs, Arrays.asList(actual));\n-    }\n-\n     @Test\n     public void issue42() {\n         UPlainSchema userId = plainSchemaDAO.find(\"userId\", UPlainSchema.class);"},{"sha":"f2a41d554f7a62626509b37ef9a737e6225a412e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":17,"deletions":14,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n+import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n@@ -89,11 +90,11 @@ public Response toResponse(final Exception ex) {\n             builder = Response.status(Response.Status.UNAUTHORIZED).\n                     header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\n         } else if (ex instanceof UnauthorizedGroupException) {\n-            builder = builder(Response.Status.UNAUTHORIZED, ClientExceptionType.UnauthorizedGroup, getExMessage(ex));\n+            builder = builder(ClientExceptionType.UnauthorizedGroup, getExMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n-            builder = builder(Response.Status.CONFLICT, ClientExceptionType.EntityExists, getExMessage(ex));\n+            builder = builder(ClientExceptionType.EntityExists, getExMessage(ex));\n         } else if (ex instanceof DataIntegrityViolationException) {\n-            builder = builder(Response.Status.CONFLICT, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+            builder = builder(ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n         } else {\n             builder = processNotFoundExceptions(ex);\n             if (builder == null) {\n@@ -161,7 +162,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n \n         ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n \n-        List<ErrorTO> errors = new ArrayList<ErrorTO>();\n+        List<ErrorTO> errors = new ArrayList<>();\n         for (SyncopeClientException sce : ex.getExceptions()) {\n             builder.header(RESTHeaders.ERROR_CODE, sce.getType().getHeaderValue());\n \n@@ -182,7 +183,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n \n     private ResponseBuilder processNotFoundExceptions(final Exception ex) {\n         if (ex instanceof javax.ws.rs.NotFoundException || ex instanceof NotFoundException) {\n-            return builder(Response.Status.NOT_FOUND, ClientExceptionType.NotFound, getExMessage(ex));\n+            return builder(ClientExceptionType.NotFound, getExMessage(ex));\n         }\n \n         return null;\n@@ -245,30 +246,32 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n                 return JAXRSUtils.fromResponse(((BadRequestException) ex).getResponse());\n             }\n         } else if (ex instanceof WorkflowException) {\n-            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.Workflow, getExMessage(ex));\n+            return builder(ClientExceptionType.Workflow, getExMessage(ex));\n         } else if (ex instanceof PersistenceException) {\n-            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.GenericPersistence, getExMessage(ex));\n+            return builder(ClientExceptionType.GenericPersistence, getExMessage(ex));\n         } else if (ibatisPersistenceException != null && ibatisPersistenceException.isAssignableFrom(ex.getClass())) {\n-            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.Workflow,\n+            return builder(ClientExceptionType.Workflow,\n                     getMessage(ex, \"Currently unavailable. Please try later.\"));\n         } else if (ex instanceof JpaSystemException) {\n-            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+            return builder(ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n         } else if (ex instanceof ConfigurationException) {\n-            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.InvalidConnIdConf, getExMessage(ex));\n+            return builder(ClientExceptionType.InvalidConnIdConf, getExMessage(ex));\n         } else if (ex instanceof ParsingValidationException) {\n-            return builder(Response.Status.BAD_REQUEST, ClientExceptionType.InvalidValues, getExMessage(ex));\n+            return builder(ClientExceptionType.InvalidValues, getExMessage(ex));\n+        } else if (ex instanceof MalformedPathException) {\n+            return builder(ClientExceptionType.InvalidPath, getExMessage(ex));\n         }\n \n         return null;\n     }\n \n-    private ResponseBuilder builder(final Response.Status status, final ClientExceptionType hType, final String msg) {\n-        ResponseBuilder builder = Response.status(status).\n+    private ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n+        ResponseBuilder builder = Response.status(hType.getResponseStatus()).\n                 header(RESTHeaders.ERROR_CODE, hType.getHeaderValue()).\n                 header(RESTHeaders.ERROR_INFO, hType.getInfoHeaderValue(msg));\n \n         ErrorTO error = new ErrorTO();\n-        error.setStatus(status.getStatusCode());\n+        error.setStatus(hType.getResponseStatus().getStatusCode());\n         error.setType(hType);\n         error.getElements().add(msg);\n "},{"sha":"79f506cb8890d9963467ccf27b3da95dc7fac4d7","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RealmServiceImpl.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.RealmService;\n+import org.apache.syncope.core.logic.RealmLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class RealmServiceImpl extends AbstractServiceImpl implements RealmService {\n+\n+    @Autowired\n+    private RealmLogic logic;\n+\n+    @Override\n+    public List<RealmTO> list() {\n+        return list(StringUtils.EMPTY);\n+    }\n+\n+    @Override\n+    public List<RealmTO> list(final String fullPath) {\n+        return logic.list(StringUtils.prependIfMissing(fullPath, \"/\"));\n+    }\n+\n+    @Override\n+    public Response create(final String parentPath, final RealmTO realmTO) {\n+        RealmTO created = logic.create(StringUtils.prependIfMissing(parentPath, \"/\"), realmTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getName()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_ID, created.getFullPath()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final String fullPath, final RealmTO realmTO) {\n+        realmTO.setFullPath(StringUtils.prependIfMissing(fullPath, \"/\"));\n+        logic.update(realmTO);\n+    }\n+\n+    @Override\n+    public void delete(final String fullPath) {\n+        logic.delete(StringUtils.prependIfMissing(fullPath, \"/\"));\n+    }\n+\n+}"},{"sha":"ed264d58c6f2e64b69efbeac0b26b3bd3a476b67","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -58,6 +58,7 @@\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n@@ -146,6 +147,8 @@ public abstract class AbstractITCase {\n \n     protected static SyncopeService syncopeService;\n \n+    protected static RealmService realmService;\n+\n     protected static UserService userService;\n \n     protected static UserSelfService userSelfService;\n@@ -214,6 +217,7 @@ public static void restSetup() {\n         adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n \n         syncopeService = adminClient.getService(SyncopeService.class);\n+        realmService = adminClient.getService(RealmService.class);\n         userService = adminClient.getService(UserService.class);\n         userSelfService = adminClient.getService(UserSelfService.class);\n         userWorkflowService = adminClient.getService(UserWorkflowService.class);"},{"sha":"ce2cbd50af6178abd7ea6cf0254a7d2dd5c75a95","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -540,7 +540,7 @@ public void deprovision() {\n \n     @Test\n     public void provision() {\n-        GroupTO groupTO = buildGroupTO(\"assign\");\n+        GroupTO groupTO = buildGroupTO(\"assign\" + getUUIDString());\n         groupTO.getResources().clear();\n \n         GroupTO actual = createGroup(groupTO);\n@@ -566,7 +566,7 @@ public void provision() {\n \n     @Test\n     public void deprovisionUnlinked() {\n-        GroupTO groupTO = buildGroupTO(\"assign\");\n+        GroupTO groupTO = buildGroupTO(\"assign\" + getUUIDString());\n         groupTO.getResources().clear();\n \n         GroupTO actual = createGroup(groupTO);\n@@ -826,7 +826,7 @@ public void issueSYNCOPE632() {\n             assertNotNull(newLDAP);\n \n             // 2. create a group and give the resource created above\n-            groupTO = buildGroupTO(\"lastGroup\");\n+            groupTO = buildGroupTO(\"lastGroup\" + getUUIDString());\n             groupTO.getGPlainAttrTemplates().add(\"icon\");\n             groupTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n             groupTO.getGPlainAttrTemplates().add(\"show\");"},{"sha":"955a21680faeae72f3e20d3f1773fc66829a39a1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationITCase.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -78,8 +78,7 @@ public void create() {\n         notificationTO.setRecipients(SyncopeClient.getUserSearchConditionBuilder().inGroups(7L).query());\n \n         Response response = notificationService.create(notificationTO);\n-        NotificationTO actual = getObject(response.getLocation(), NotificationService.class,\n-                NotificationTO.class);\n+        NotificationTO actual = getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getKey());"},{"sha":"bfc2448c8e2ca29fe683b3d755c115755556c9df","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RealmITCase.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/423e4cca089a3ba9f8458428a40f6d4d74a324f9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java?ref=423e4cca089a3ba9f8458428a40f6d4d74a324f9","patch":"@@ -0,0 +1,186 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AccountPolicyTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.RealmService;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class RealmITCase extends AbstractITCase {\n+\n+    private RealmTO getRealm(final String fullPath) {\n+        return CollectionUtils.find(realmService.list(fullPath), new Predicate<RealmTO>() {\n+\n+            @Override\n+            public boolean evaluate(final RealmTO object) {\n+                return fullPath.equals(object.getFullPath());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<RealmTO> realms = realmService.list();\n+        assertNotNull(realms);\n+        assertFalse(realms.isEmpty());\n+        for (RealmTO realm : realms) {\n+            assertNotNull(realm);\n+        }\n+\n+        try {\n+            realmService.list(\"a name\");\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPath, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void createUpdate() {\n+        final RealmTO realm = new RealmTO();\n+        realm.setName(\"last\");\n+\n+        // 1. create\n+        Response response = realmService.create(\"/even/two\", realm);\n+        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        RealmTO actual = actuals[0];\n+        assertNotNull(actual.getKey());\n+        assertEquals(\"last\", actual.getName());\n+        assertEquals(\"/even/two/last\", actual.getFullPath());\n+        assertEquals(actual.getParent(), getRealm(\"/even/two\").getKey());\n+        assertNull(realm.getAccountPolicy());\n+        assertNull(realm.getPasswordPolicy());\n+\n+        // 2. update setting policies\n+        actual.setAccountPolicy(6L);\n+        actual.setPasswordPolicy(4L);\n+        realmService.update(actual.getFullPath(), actual);\n+\n+        actual = getRealm(actual.getFullPath());\n+        assertNotNull(actual.getAccountPolicy());\n+        assertNotNull(actual.getPasswordPolicy());\n+\n+        // 3. update changing parent\n+        actual.setParent(getRealm(\"/odd\").getKey());\n+        realmService.update(actual.getFullPath(), actual);\n+\n+        actual = getRealm(\"/odd/last\");\n+        assertNotNull(actual);\n+        assertEquals(\"/odd/last\", actual.getFullPath());\n+\n+        assertEquals(1, CollectionUtils.countMatches(realmService.list(), new Predicate<RealmTO>() {\n+\n+            @Override\n+            public boolean evaluate(final RealmTO object) {\n+                return realm.getName().equals(object.getName());\n+            }\n+        }));\n+\n+        // 4. create under invalid path\n+        try {\n+            realmService.create(\"a name\", realm);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidPath, e.getType());\n+        }\n+\n+        // 5. attempt to create duplicate\n+        try {\n+            realmService.create(\"/odd\", realm);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DataIntegrityViolation, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void deletingAccountPolicy() {\n+        // 1. create account policy\n+        AccountPolicyTO policy = new AccountPolicyTO(false);\n+        policy.setDescription(\"deletingAccountPolicy\");\n+\n+        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n+        accountPolicySpec.setMinLength(3);\n+        accountPolicySpec.setMaxLength(8);\n+        policy.setSpecification(accountPolicySpec);\n+\n+        policy = createPolicy(policy);\n+        assertNotNull(policy);\n+\n+        // 2. create realm with policy assigned\n+        RealmTO realm = new RealmTO();\n+        realm.setName(\"withppolicy\");\n+        realm.setAccountPolicy(policy.getKey());\n+\n+        Response response = realmService.create(\"/\", realm);\n+        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        RealmTO actual = actuals[0];\n+        assertEquals(policy.getKey(), actual.getAccountPolicy(), 0);\n+\n+        // 3. remove policy\n+        policyService.delete(policy.getKey());\n+\n+        // 4. verify\n+        actual = getRealm(actual.getFullPath());\n+        assertNull(actual.getAccountPolicy());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        RealmTO realm = new RealmTO();\n+        realm.setName(\"deletable\");\n+\n+        Response response = realmService.create(\"/even/two\", realm);\n+        RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n+        assertNotNull(actuals);\n+        assertTrue(actuals.length > 0);\n+        RealmTO actual = actuals[0];\n+\n+        realmService.delete(actual.getFullPath());\n+\n+        try {\n+            realmService.list(actual.getFullPath());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+}"}]}