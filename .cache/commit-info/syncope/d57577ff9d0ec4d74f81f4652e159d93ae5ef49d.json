{"sha":"d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ1NzU3N2ZmOWQwZWM0ZDc0ZjgxZjQ2NTJlMTU5ZDkzYWU1ZWY0OWQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-19T09:19:54Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-19T09:19:54Z"},"message":"Finally fixing issue with (missing) TOs and MappingJacksonHttpMessageConverter - see https://jira.springsource.org/browse/SPR-7002\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246596 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"91df13feab0171b776ac01540fb4713ddcdb7ae3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/91df13feab0171b776ac01540fb4713ddcdb7ae3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/comments","author":null,"committer":null,"parents":[{"sha":"14c4c33db6a15574b5228afb6a528799bcb0b4ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14c4c33db6a15574b5228afb6a528799bcb0b4ac","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/14c4c33db6a15574b5228afb6a528799bcb0b4ac"}],"stats":{"total":282,"additions":145,"deletions":137},"files":[{"sha":"e998b4db20dcf0f66d5c4f583bfb35851c1b254c","filename":"client/src/main/java/org/syncope/client/to/ConfigurationTOs.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14c4c33db6a15574b5228afb6a528799bcb0b4ac/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14c4c33db6a15574b5228afb6a528799bcb0b4ac/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java?ref=14c4c33db6a15574b5228afb6a528799bcb0b4ac","patch":"@@ -1,43 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class ConfigurationTOs extends AbstractBaseBean\n-        implements Iterable<ConfigurationTO> {\n-\n-    private List<ConfigurationTO> configurations;\n-\n-    public ConfigurationTOs() {\n-        configurations = new ArrayList<ConfigurationTO>();\n-    }\n-\n-    public List<ConfigurationTO> getConfigurations() {\n-        return configurations;\n-    }\n-\n-    public void setConfigurations(List<ConfigurationTO> users) {\n-        this.configurations = users;\n-    }\n-\n-    @Override\n-    public Iterator<ConfigurationTO> iterator() {\n-        return configurations.iterator();\n-    }\n-}"},{"sha":"98582ba3c5538278e18abbb39d6903a375e423cb","filename":"client/src/test/java/org/syncope/client/test/JSONTest.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,11 +18,15 @@\n \n import java.io.IOException;\n import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.junit.Test;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.to.SchemaTO;\n \n public class JSONTest {\n \n@@ -50,4 +54,26 @@ public void testSearchCondition() throws IOException {\n         NodeCond actual = mapper.readValue(writer.toString(), NodeCond.class);\n         assertEquals(searchCondition, actual);\n     }\n+\n+    @Test\n+    public void testLists() throws IOException {\n+        List<SchemaTO> schemas = new ArrayList<SchemaTO>();\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"name1\");\n+        schemas.add(schemaTO);\n+        schemaTO = new SchemaTO();\n+        schemaTO.setName(\"name2\");\n+        schemas.add(schemaTO);\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, schemas);\n+\n+        List<SchemaTO> unserializedSchemas = Arrays.asList(\n+                mapper.readValue(writer.toString(), SchemaTO[].class));\n+        for (SchemaTO unserializedSchema : unserializedSchemas) {\n+            assertNotNull(unserializedSchema);\n+        }\n+    }\n }"},{"sha":"257cf4ceae1e9be8033729905fe76ba90d69c222","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -30,7 +30,6 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConfigurationTO;\n-import org.syncope.client.to.ConfigurationTOs;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n@@ -81,7 +80,7 @@ public void delete(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ConfigurationTOs list(HttpServletRequest request) {\n+    public List<ConfigurationTO> list(HttpServletRequest request) {\n         List<SyncopeConfiguration> configurations =\n                 syncopeConfigurationDAO.findAll();\n         List<ConfigurationTO> configurationTOs =\n@@ -92,9 +91,7 @@ public ConfigurationTOs list(HttpServletRequest request) {\n                     configurationDataBinder.getConfigurationTO(configuration));\n         }\n \n-        ConfigurationTOs result = new ConfigurationTOs();\n-        result.setConfigurations(configurationTOs);\n-        return result;\n+        return configurationTOs;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"8456a176abe6bfbbaffc3a8c001bddf673de9ee8","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -1,4 +1,3 @@\n-\n /*\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n@@ -87,7 +86,7 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n             LOG.debug(\"update called with configuration \" + connectorTO);\n         }\n \n-        ConnectorInstance connectorInstance = null;\n+        ConnectorInstance connectorInstance;\n         try {\n             connectorInstance = binder.updateConnectorInstance(\n                     connectorTO.getId(), connectorTO);\n@@ -126,8 +125,7 @@ public void delete(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ModelAndView list() {\n-\n+    public List<ConnectorInstanceTO> list() {\n         List<ConnectorInstance> connectorInstances =\n                 connectorInstanceDAO.findAll();\n \n@@ -137,7 +135,7 @@ public ModelAndView list() {\n             connectorInstanceTOs.add(binder.getConnectorInstanceTO(connector));\n         }\n \n-        return new ModelAndView().addObject(connectorInstanceTOs);\n+        return connectorInstanceTOs;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -187,7 +185,7 @@ public ModelAndView check(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/getBundles\")\n-    public ModelAndView getBundles()\n+    public List<ConnectorBundleTO> getBundles()\n             throws NotFoundException, MissingConfKeyException {\n \n         ConnectorInfoManager manager =\n@@ -238,6 +236,6 @@ public ModelAndView getBundles()\n             connectorBundleTOs.add(connectorBundleTO);\n         }\n \n-        return new ModelAndView().addObject(connectorBundleTOs);\n+        return connectorBundleTOs;\n     }\n }"},{"sha":"af569b59b0361cb41801201946e74cfbf42e9381","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -24,7 +24,6 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n@@ -79,7 +78,7 @@ public void delete(HttpServletResponse response,\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public ModelAndView list(@PathVariable(\"kind\") final String kind) {\n+    public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         List<AbstractDerivedSchema> derivedAttributeSchemas =\n                 derivedSchemaDAO.findAll(reference);\n@@ -92,7 +91,7 @@ public ModelAndView list(@PathVariable(\"kind\") final String kind) {\n                     derivedSchema));\n         }\n \n-        return new ModelAndView().addObject(derivedSchemaTOs);\n+        return derivedSchemaTOs;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"b1cf5f7382ff2ac19d34c90354fe8fce9ee480d7","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -28,7 +28,6 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -188,7 +187,7 @@ public ResourceTO read(final HttpServletResponse response,\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ModelAndView list(HttpServletResponse response)\n+    public List<ResourceTO> list(HttpServletResponse response)\n             throws NotFoundException {\n \n         List<TargetResource> resources = resourceDAO.findAll();\n@@ -197,12 +196,12 @@ public ModelAndView list(HttpServletResponse response)\n             throw new NotFoundException(\"No resources found\");\n         }\n \n-        return new ModelAndView().addObject(binder.getResourceTOs(resources));\n+        return binder.getResourceTOs(resources);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{roleName}/mappings\")\n-    public ModelAndView getRoleResourcesMapping(\n+    public List<SchemaMappingTO> getRoleResourcesMapping(\n             HttpServletResponse response,\n             @PathVariable(\"roleName\") Long roleId)\n             throws SyncopeClientCompositeErrorException {\n@@ -234,7 +233,6 @@ public ModelAndView getRoleResourcesMapping(\n         Set<TargetResource> resources = role.getTargetResources();\n \n         List<SchemaMappingTO> resourceMappings = null;\n-\n         for (TargetResource resource : resources) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Ask for the mappings of '\" + resource + \"'\");\n@@ -261,6 +259,6 @@ public ModelAndView getRoleResourcesMapping(\n             LOG.debug(\"Mappings found: \" + roleMappings);\n         }\n \n-        return new ModelAndView().addObject(roleMappings);\n+        return roleMappings;\n     }\n }"},{"sha":"d9f50327837c1b02f3389c2e0eb65edfdec805d1","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -25,7 +25,6 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -87,14 +86,14 @@ public void delete(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ModelAndView list(HttpServletRequest request) {\n+    public List<RoleTO> list(HttpServletRequest request) {\n         List<SyncopeRole> roles = syncopeRoleDAO.findAll();\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n         for (SyncopeRole role : roles) {\n             roleTOs.add(roleDataBinder.getRoleTO(role));\n         }\n \n-        return new ModelAndView().addObject(roleTOs);\n+        return roleTOs;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -117,7 +116,7 @@ public RoleTO parent(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/children/{roleId}\")\n-    public ModelAndView children(HttpServletResponse response,\n+    public List<RoleTO> children(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId) {\n \n         List<SyncopeRole> roles = syncopeRoleDAO.findChildren(roleId);\n@@ -126,7 +125,7 @@ public ModelAndView children(HttpServletResponse response,\n             roleTOs.add(roleDataBinder.getRoleTO(role));\n         }\n \n-        return new ModelAndView().addObject(roleTOs);\n+        return roleTOs;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"71517e1a833284d9ca92d65eb8388931c3828e48","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -24,7 +24,6 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.rest.data.SchemaDataBinder;\n@@ -76,8 +75,7 @@ public void delete(@PathVariable(\"kind\") final String kind,\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public ModelAndView list(@PathVariable(\"kind\") final String kind) {\n-\n+    public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n \n@@ -86,7 +84,7 @@ public ModelAndView list(@PathVariable(\"kind\") final String kind) {\n             schemaTOs.add(schemaDataBinder.getSchemaTO(schema));\n         }\n \n-        return new ModelAndView().addObject(schemaTOs);\n+        return schemaTOs;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"02701403bfc83e5410e05d5660ed94da37467846","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -27,7 +27,6 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.propagation.PropagationException;\n@@ -42,6 +41,7 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.UserTO;\n@@ -183,15 +183,14 @@ public UserTO verifyToken(@RequestBody UserTO userTO)\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public ModelAndView list() {\n+    public List<UserTO> list() {\n         List<SyncopeUser> users = syncopeUserDAO.findAll();\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n-\n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, userWorkflow));\n         }\n \n-        return new ModelAndView().addObject(userTOs);\n+        return userTOs;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -232,7 +231,7 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n-    public ModelAndView search(@RequestBody NodeCond searchCondition)\n+    public List<UserTO> search(@RequestBody NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         if (LOG.isDebugEnabled()) {\n@@ -251,7 +250,7 @@ public ModelAndView search(@RequestBody NodeCond searchCondition)\n             result.add(userDataBinder.getUserTO(user, userWorkflow));\n         }\n \n-        return new ModelAndView().addObject(result);\n+        return result;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"646d895518ff68ee5b95103b3f0f6e1c424c61e1","filename":"core/src/test/java/org/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -15,13 +15,14 @@\n package org.syncope.core.rest;\n \n import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n+import java.util.List;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.ConfigurationTO;\n-import org.syncope.client.to.ConfigurationTOs;\n \n public class ConfigurationTestITCase extends AbstractTest {\n \n@@ -70,11 +71,14 @@ public void delete() throws UnsupportedEncodingException {\n \n     @Test\n     public void list() {\n-        ConfigurationTOs configurations = restTemplate.getForObject(\n+        List<ConfigurationTO> configurations = Arrays.asList(\n+                restTemplate.getForObject(\n                 BASE_URL + \"configuration/list.json\",\n-                ConfigurationTOs.class);\n-\n+                ConfigurationTO[].class));\n         assertNotNull(configurations);\n+        for (ConfigurationTO configuration : configurations) {\n+            assertNotNull(configuration);\n+        }\n     }\n \n     @Test"},{"sha":"1efe49c0252300ebe2d70f67d72f467dbb6e85a7","filename":"core/src/test/java/org/syncope/core/rest/ConnectorInstanceTestITCase.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.rest;\n \n import java.io.InputStream;\n+import java.util.Arrays;\n import static org.junit.Assert.*;\n \n import java.util.HashSet;\n@@ -61,7 +62,7 @@ public void createWithException() {\n         ConnectorInstanceTO connectorTO = new ConnectorInstanceTO();\n \n         restTemplate.postForObject(BASE_URL + \"connector/create.json\",\n-                connectorTO, ConnectorInstanceTO.class);\n+                                   connectorTO, ConnectorInstanceTO.class);\n     }\n \n     @Test\n@@ -209,23 +210,23 @@ public void update() {\n     @Test\n     public void deleteWithException() {\n         try {\n-\n             restTemplate.delete(\n                     BASE_URL + \"connector/delete/{connectorId}.json\", \"0\");\n-\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n     }\n \n     @Test\n     public void list() {\n-        List<ConnectorInstanceTO> connectorInstanceTOs =\n+        List<ConnectorInstanceTO> connectorInstanceTOs = Arrays.asList(\n                 restTemplate.getForObject(\n-                BASE_URL + \"connector/list.json\", List.class);\n-\n+                BASE_URL + \"connector/list.json\", ConnectorInstanceTO[].class));\n         assertNotNull(connectorInstanceTOs);\n         assertFalse(connectorInstanceTOs.isEmpty());\n+        for (ConnectorInstanceTO instance : connectorInstanceTOs) {\n+            assertNotNull(instance);\n+        }\n     }\n \n     @Test\n@@ -248,12 +249,14 @@ public void check() {\n \n     @Test\n     public void getBundles() {\n-        List<ConnectorBundleTO> bundles = restTemplate.getForObject(\n+        List<ConnectorBundleTO> bundles = Arrays.asList(\n+                restTemplate.getForObject(\n                 BASE_URL + \"connector/getBundles.json\",\n-                List.class);\n-\n+                ConnectorBundleTO[].class));\n         assertNotNull(bundles);\n-\n         assertFalse(bundles.isEmpty());\n+        for (ConnectorBundleTO bundle : bundles) {\n+            assertNotNull(bundle);\n+        }\n     }\n }"},{"sha":"518d3587ecf735bf3e6bf11741a923b379c53814","filename":"core/src/test/java/org/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest;\n \n+import java.util.Arrays;\n import java.util.List;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.junit.Test;\n@@ -23,10 +24,13 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void derivedList() {\n-        List<DerivedSchemaTO> derivedSchemas =\n+        List<DerivedSchemaTO> derivedSchemas = Arrays.asList(\n                 restTemplate.getForObject(BASE_URL\n-                + \"derivedSchema/user/list.json\", List.class);\n+                + \"derivedSchema/user/list.json\", DerivedSchemaTO[].class));\n         assertFalse(derivedSchemas.isEmpty());\n+        for (DerivedSchemaTO derivedSchemaTO: derivedSchemas) {\n+            assertNotNull(derivedSchemaTO);\n+        }\n     }\n \n     @Test"},{"sha":"46881ff37843f66cd0746b7e93adf89c2a6b397d","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.rest;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import static org.junit.Assert.*;\n \n@@ -38,7 +39,7 @@ public void createExistingResource() {\n         resourceTO.setName(resourceName);\n \n         restTemplate.postForObject(BASE_URL + \"resource/create.json\",\n-                resourceTO, ResourceTO.class);\n+                                   resourceTO, ResourceTO.class);\n     }\n \n     @Test\n@@ -85,7 +86,7 @@ public void updateWithException() {\n             resourceTO.setName(\"resourcenotfound\");\n \n             restTemplate.postForObject(BASE_URL + \"resource/update.json\",\n-                    resourceTO, ResourceTO.class);\n+                                       resourceTO, ResourceTO.class);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -167,11 +168,13 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<ResourceTO> actuals = restTemplate.getForObject(\n-                BASE_URL + \"resource/list.json\", List.class);\n-\n+        List<ResourceTO> actuals = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"resource/list.json\", ResourceTO[].class));\n         assertNotNull(actuals);\n-\n         assertFalse(actuals.isEmpty());\n+        for (ResourceTO resourceTO : actuals) {\n+            assertNotNull(resourceTO);\n+        }\n     }\n }"},{"sha":"969dc53db6d4d8728457fccb714fc98eccc7a99f","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest;\n \n+import java.util.Arrays;\n import java.util.List;\n import static org.junit.Assert.*;\n \n@@ -40,7 +41,7 @@ public void createWithException() {\n         newRoleTO.addAttribute(attributeTO);\n \n         restTemplate.postForObject(BASE_URL + \"role/create\",\n-                newRoleTO, RoleTO.class);\n+                                   newRoleTO, RoleTO.class);\n     }\n \n     @Test\n@@ -54,7 +55,7 @@ public void create() {\n         icon.addValue(\"anIcon\");\n \n         RoleTO newRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n-                roleTO, RoleTO.class);\n+                                                      roleTO, RoleTO.class);\n \n         roleTO.setId(newRoleTO.getId());\n         assertEquals(roleTO, newRoleTO);\n@@ -71,19 +72,22 @@ public void delete() {\n         restTemplate.delete(BASE_URL + \"role/delete/{roleId}\", 7);\n         try {\n             restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\",\n-                    RoleTO.class, 2);\n+                                      RoleTO.class, 2);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n     }\n \n     @Test\n     public void list() {\n-        List<RoleTO> roleTOs = restTemplate.getForObject(BASE_URL\n-                + \"role/list.json\", List.class);\n-\n+        List<RoleTO> roleTOs = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL\n+                + \"role/list.json\", RoleTO[].class));\n         assertNotNull(roleTOs);\n         assertEquals(8, roleTOs.size());\n+        for (RoleTO roleTO : roleTOs) {\n+            assertNotNull(roleTO);\n+        }\n     }\n \n     @Test\n@@ -117,7 +121,7 @@ public void update() {\n         roleTO.addAttribute(icon);\n \n         roleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n-                roleTO, RoleTO.class);\n+                                            roleTO, RoleTO.class);\n \n         assertEquals(1, roleTO.getAttributes().size());\n \n@@ -131,7 +135,7 @@ public void update() {\n         roleMod.addAttributeToBeUpdated(attributeMod);\n \n         roleTO = restTemplate.postForObject(BASE_URL + \"role/update\",\n-                roleMod, RoleTO.class);\n+                                            roleMod, RoleTO.class);\n \n         assertEquals(\"finalRole\", roleTO.getName());\n         assertEquals(2, roleTO.getAttributes().size());"},{"sha":"d263e9debbff40e51579eb1426c8f21098e5f48e","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest;\n \n+import java.util.Arrays;\n import java.util.List;\n import org.junit.Test;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -70,18 +71,29 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas =\n+        List<SchemaTO> userSchemas = Arrays.asList(\n                 restTemplate.getForObject(BASE_URL\n-                + \"schema/user/list.json\", List.class);\n+                + \"schema/user/list.json\", SchemaTO[].class));\n         assertFalse(userSchemas.isEmpty());\n+        for (SchemaTO schemaTO : userSchemas) {\n+            assertNotNull(schemaTO);\n+        }\n \n-        List<SchemaTO> roleSchemas = restTemplate.getForObject(BASE_URL\n-                + \"schema/role/list.json\", List.class);\n+        List<SchemaTO> roleSchemas = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL\n+                + \"schema/role/list.json\", SchemaTO[].class));\n         assertFalse(roleSchemas.isEmpty());\n+        for (SchemaTO schemaTO : roleSchemas) {\n+            assertNotNull(schemaTO);\n+        }\n \n-        List<SchemaTO> membershipSchemas = restTemplate.getForObject(BASE_URL\n-                + \"schema/membership/list.json\", List.class);\n+        List<SchemaTO> membershipSchemas = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL\n+                + \"schema/membership/list.json\", SchemaTO[].class));\n         assertFalse(membershipSchemas.isEmpty());\n+        for (SchemaTO schemaTO : membershipSchemas) {\n+            assertNotNull(schemaTO);\n+        }\n     }\n \n     @Test"},{"sha":"a3cdaab5db3fc1a118a0a1427680b73774d2da03","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":27,"deletions":20,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d57577ff9d0ec4d74f81f4652e159d93ae5ef49d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=d57577ff9d0ec4d74f81f4652e159d93ae5ef49d","patch":"@@ -16,6 +16,7 @@\n \n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n import java.util.Collections;\n import static org.junit.Assert.*;\n \n@@ -90,7 +91,7 @@ public final void createWithException() {\n         newUserTO.addAttribute(attributeTO);\n \n         restTemplate.postForObject(BASE_URL + \"user/create\",\n-                newUserTO, UserTO.class);\n+                                   newUserTO, UserTO.class);\n     }\n \n     @Test\n@@ -138,9 +139,9 @@ public final void create() {\n \n         // 2. activate user\n         newUserTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                newUserTO, UserTO.class);\n+                                               newUserTO, UserTO.class);\n         assertEquals(\"active\",\n-                restTemplate.getForObject(BASE_URL + \"user/status/\"\n+                     restTemplate.getForObject(BASE_URL + \"user/status/\"\n                 + newUserTO.getId(), String.class));\n \n         // 3. try (and fail) to create another user with same (unique) values\n@@ -153,7 +154,7 @@ public final void create() {\n         SyncopeClientException syncopeClientException = null;\n         try {\n             restTemplate.postForObject(BASE_URL + \"user/create\",\n-                    userTO, UserTO.class);\n+                                       userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             syncopeClientException =\n                     e.getException(SyncopeClientExceptionType.InvalidUniques);\n@@ -223,26 +224,29 @@ public final void delete() {\n         UserTO userTO = getSampleTO(\"qqgf.z@nn.com\");\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+                                            userTO, UserTO.class);\n         userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n+                                            userTO, UserTO.class);\n \n         restTemplate.delete(BASE_URL + \"user/delete/{userId}\", userTO.getId());\n         try {\n             restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n-                    UserTO.class, userTO.getId());\n+                                      UserTO.class, userTO.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n     }\n \n     @Test\n     public final void list() {\n-        List<UserTO> users = restTemplate.getForObject(\n-                BASE_URL + \"user/list.json\", List.class);\n-\n+        List<UserTO> users = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"user/list.json\", UserTO[].class));\n         assertNotNull(users);\n         assertEquals(4, users.size());\n+        for (UserTO user : users) {\n+            assertNotNull(user);\n+        }\n     }\n \n     @Test\n@@ -260,9 +264,9 @@ public final void token() {\n         UserTO userTO = getSampleTO(\"d.e@f.com\");\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+                                            userTO, UserTO.class);\n         userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n+                                            userTO, UserTO.class);\n         assertNull(userTO.getToken());\n \n         userTO = restTemplate.getForObject(\n@@ -271,7 +275,7 @@ public final void token() {\n         assertNotNull(userTO.getToken());\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/verifyToken\",\n-                userTO, UserTO.class);\n+                                            userTO, UserTO.class);\n         assertNull(userTO.getToken());\n     }\n \n@@ -293,12 +297,15 @@ public final void search() {\n \n         assertTrue(searchCondition.checkValidity());\n \n-        List<UserTO> matchedUsers = restTemplate.postForObject(\n+        List<UserTO> matchedUsers = Arrays.asList(\n+                restTemplate.postForObject(\n                 BASE_URL + \"user/search\",\n-                searchCondition, List.class);\n-\n+                searchCondition, UserTO[].class));\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n+        for (UserTO user : matchedUsers) {\n+            assertNotNull(user);\n+        }\n     }\n \n     @Test\n@@ -314,9 +321,9 @@ public final void update() {\n         userTO.addMembership(membershipTO);\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+                                            userTO, UserTO.class);\n         userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n-                userTO, UserTO.class);\n+                                            userTO, UserTO.class);\n \n         assertTrue(userTO.getDerivedAttributes().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -344,7 +351,7 @@ public final void update() {\n                 userTO.getMemberships().iterator().next().getId());\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                userMod, UserTO.class);\n+                                            userMod, UserTO.class);\n \n         assertEquals(\"newPassword\", userTO.getPassword());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -357,7 +364,7 @@ public final void update() {\n                 attributeFound = true;\n \n                 assertEquals(Collections.singletonList(\"t.w@spre.net\"),\n-                        attributeTO.getValues());\n+                             attributeTO.getValues());\n             }\n         }\n         assertTrue(attributeFound);"}]}