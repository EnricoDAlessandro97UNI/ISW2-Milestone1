{"sha":"5e1b7647150dcc94739dae4d538a450278d332a8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVlMWI3NjQ3MTUwZGNjOTQ3MzlkYWU0ZDUzOGE0NTAyNzhkMzMyYTg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-06T11:28:58Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-06T11:28:58Z"},"message":"Merge from 0_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246566 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1626e6e2ee015e5df334dc4421ab1d88012fbb5e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1626e6e2ee015e5df334dc4421ab1d88012fbb5e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5e1b7647150dcc94739dae4d538a450278d332a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e1b7647150dcc94739dae4d538a450278d332a8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5e1b7647150dcc94739dae4d538a450278d332a8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e1b7647150dcc94739dae4d538a450278d332a8/comments","author":null,"committer":null,"parents":[{"sha":"bc424fa38bbad819ebf881f5450f7ddfeb0091da","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc424fa38bbad819ebf881f5450f7ddfeb0091da","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bc424fa38bbad819ebf881f5450f7ddfeb0091da"}],"stats":{"total":1081,"additions":647,"deletions":434},"files":[{"sha":"9995aa374fce9238a4d28e16405c115f3662af29","filename":"client/pom.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -49,6 +49,17 @@\n             <artifactId>slf4j-log4j12</artifactId>\n         </dependency>\n         \n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.codehaus.jackson</groupId>\n+            <artifactId>jackson-mapper-lgpl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n     </dependencies>\n \n     <reporting>"},{"sha":"afe49efccbb24601c7fa99065279f0be99ac3182","filename":"client/src/main/java/org/syncope/client/search/AttributeCond.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -0,0 +1,70 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.search;\n+\n+import org.syncope.client.AbstractBaseBean;\n+\n+/**\n+ * Search condition to be applied when comparing attribute values.\n+ */\n+public class AttributeCond extends AbstractBaseBean {\n+\n+    public enum Type {\n+\n+        LIKE, EQ, GT, LT, GE, LE, ISNULL, ISNOTNULL\n+    }\n+    private Type type;\n+    private String schema;\n+    private String expression;\n+\n+    public AttributeCond() {\n+        super();\n+    }\n+\n+    public AttributeCond(final Type conditionType) {\n+        super();\n+        this.type = conditionType;\n+    }\n+\n+    public final String getExpression() {\n+        return expression;\n+    }\n+\n+    public final void setExpression(final String conditionExpression) {\n+        this.expression = conditionExpression;\n+    }\n+\n+    public final String getSchema() {\n+        return schema;\n+    }\n+\n+    public final void setSchema(final String conditionSchema) {\n+        this.schema = conditionSchema;\n+    }\n+\n+    public final Type getType() {\n+        return type;\n+    }\n+\n+    public final void setType(final Type conditionType) {\n+        this.type = conditionType;\n+    }\n+\n+    public final boolean checkValidity() {\n+        return type != null && schema != null\n+                && (type == Type.ISNULL || type == Type.ISNOTNULL\n+                || expression != null);\n+    }\n+}"},{"sha":"89b50ada7aa0dee2c88aa99e62f8f16c1a12480c","filename":"client/src/main/java/org/syncope/client/search/MembershipCond.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FMembershipCond.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -0,0 +1,50 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.search;\n+\n+import org.syncope.client.AbstractBaseBean;\n+\n+/**\n+ * Search condition to be applied when searching for memberships.\n+ */\n+public class MembershipCond extends AbstractBaseBean {\n+\n+    private Long roleId;\n+    private String roleName;\n+\n+    public MembershipCond() {\n+        super();\n+    }\n+\n+    public Long getRoleId() {\n+        return roleId;\n+    }\n+\n+    public void setRoleId(Long roleId) {\n+        this.roleId = roleId;\n+    }\n+\n+    public String getRoleName() {\n+        return roleName;\n+    }\n+\n+    public void setRoleName(String roleName) {\n+        this.roleName = roleName;\n+    }\n+\n+    public final boolean checkValidity() {\n+        return !(roleId == null && roleName == null);\n+    }\n+}"},{"sha":"b9c15364d0981c66d3683e82777cae71aa41a25e","filename":"client/src/main/java/org/syncope/client/search/NodeCond.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -0,0 +1,147 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.search;\n+\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class NodeCond extends AbstractBaseBean {\n+\n+    public enum Type {\n+\n+        LEAF, AND, OR, NOT\n+    }\n+    private Type type;\n+    private AttributeCond attributeCond;\n+    private MembershipCond membershipCond;\n+    private NodeCond leftNodeCond;\n+    private NodeCond rightNodeCond;\n+\n+    public static NodeCond getLeafCond(final AttributeCond attributeCond) {\n+        NodeCond nodeCond = new NodeCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.attributeCond = attributeCond;\n+\n+        return nodeCond;\n+    }\n+\n+    public static NodeCond getLeafCond(final MembershipCond membershipCond) {\n+        NodeCond nodeCond = new NodeCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.membershipCond = membershipCond;\n+\n+        return nodeCond;\n+    }\n+\n+    public static NodeCond getAndCond(final NodeCond leftCond,\n+            final NodeCond rightCond) {\n+\n+        NodeCond nodeCond = new NodeCond();\n+\n+        nodeCond.type = Type.AND;\n+        nodeCond.leftNodeCond = leftCond;\n+        nodeCond.rightNodeCond = rightCond;\n+\n+        return nodeCond;\n+    }\n+\n+    public static NodeCond getOrCond(final NodeCond leftCond,\n+            final NodeCond rightCond) {\n+\n+        NodeCond nodeCond = new NodeCond();\n+\n+        nodeCond.type = Type.OR;\n+        nodeCond.leftNodeCond = leftCond;\n+        nodeCond.rightNodeCond = rightCond;\n+\n+        return nodeCond;\n+    }\n+\n+    public static NodeCond getNotCond(final NodeCond leftCond) {\n+        NodeCond nodeCond = new NodeCond();\n+\n+        nodeCond.type = Type.NOT;\n+        nodeCond.leftNodeCond = nodeCond;\n+\n+        return nodeCond;\n+    }\n+\n+    public AttributeCond getAttributeCond() {\n+        return attributeCond;\n+    }\n+\n+    public final void setAttributeCond(final AttributeCond attributeCond) {\n+        this.attributeCond = attributeCond;\n+    }\n+\n+    public final MembershipCond getMembershipCond() {\n+        return membershipCond;\n+    }\n+\n+    public final void setMembershipCond(final MembershipCond membershipCond) {\n+        this.membershipCond = membershipCond;\n+    }\n+\n+    public final NodeCond getLeftNodeCond() {\n+        return leftNodeCond;\n+    }\n+\n+    public final void setLeftNodeCond(final NodeCond leftNodeCond) {\n+        this.leftNodeCond = leftNodeCond;\n+    }\n+\n+    public final NodeCond getRightNodeCond() {\n+        return rightNodeCond;\n+    }\n+\n+    public final void setRightNodeCond(final NodeCond rightNodeCond) {\n+        this.rightNodeCond = rightNodeCond;\n+    }\n+\n+    public final Type getType() {\n+        return type;\n+    }\n+\n+    public final void setType(final Type type) {\n+        this.type = type;\n+    }\n+\n+    public final boolean checkValidity() {\n+        if (type == null) {\n+            return false;\n+        }\n+\n+        switch (type) {\n+            case LEAF:\n+                return (attributeCond != null && membershipCond == null\n+                        && attributeCond.checkValidity())\n+                        || (attributeCond == null && membershipCond != null\n+                        && membershipCond.checkValidity());\n+            case AND:\n+            case OR:\n+                return (leftNodeCond == null || rightNodeCond == null)\n+                        ? false\n+                        : leftNodeCond.checkValidity()\n+                        && rightNodeCond.checkValidity();\n+            case NOT:\n+                return leftNodeCond == null\n+                        ? false\n+                        : leftNodeCond.checkValidity();\n+        }\n+\n+        return false;\n+    }\n+}"},{"sha":"c03835454f3d20f37014d725812a0153c8fbc6b7","filename":"client/src/main/java/org/syncope/client/to/LeafSearchCondition.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc424fa38bbad819ebf881f5450f7ddfeb0091da/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc424fa38bbad819ebf881f5450f7ddfeb0091da/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java?ref=bc424fa38bbad819ebf881f5450f7ddfeb0091da","patch":"@@ -1,67 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class LeafSearchCondition extends AbstractBaseBean {\n-\n-    public enum Type {\n-\n-        LIKE, EQ, GT, LT, GE, LE\n-    }\n-    private Type type;\n-    private String schema;\n-    private String expression;\n-\n-    public LeafSearchCondition() {\n-    }\n-\n-    public LeafSearchCondition(Type type) {\n-        this.type = type;\n-    }\n-\n-    public String getExpression() {\n-        return expression;\n-    }\n-\n-    public void setExpression(String expression) {\n-        this.expression = expression;\n-    }\n-\n-    public String getSchema() {\n-        return schema;\n-    }\n-\n-    public void setSchema(String schema) {\n-        this.schema = schema;\n-    }\n-\n-    public Type getType() {\n-        return type;\n-    }\n-\n-    public void setType(Type type) {\n-        this.type = type;\n-    }\n-\n-    public boolean checkValidity() {\n-        if (type == null) {\n-            return false;\n-        }\n-\n-        return schema != null && expression != null;\n-    }\n-}"},{"sha":"14bfe2d058825826c6a0e306cb1aa6e8e8535699","filename":"client/src/main/java/org/syncope/client/to/NodeSearchCondition.java","status":"removed","additions":0,"deletions":136,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc424fa38bbad819ebf881f5450f7ddfeb0091da/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc424fa38bbad819ebf881f5450f7ddfeb0091da/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java?ref=bc424fa38bbad819ebf881f5450f7ddfeb0091da","patch":"@@ -1,136 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.to;\n-\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class NodeSearchCondition extends AbstractBaseBean {\n-\n-    public enum Type {\n-\n-        LEAF, AND, OR, NOT\n-    }\n-    private Type type;\n-    private LeafSearchCondition leafSearchCondition;\n-    private NodeSearchCondition leftNodeSearchCondition;\n-    private NodeSearchCondition rightNodeSearchCondition;\n-\n-    public static NodeSearchCondition getLeafCondition(\n-            LeafSearchCondition leafSearchCondition) {\n-\n-        NodeSearchCondition nodeSearchCondition =\n-                new NodeSearchCondition();\n-\n-        nodeSearchCondition.type = Type.LEAF;\n-        nodeSearchCondition.leafSearchCondition = leafSearchCondition;\n-\n-        return nodeSearchCondition;\n-    }\n-\n-    public static NodeSearchCondition getAndSearchCondition(\n-            NodeSearchCondition leftNodeSearchCondition,\n-            NodeSearchCondition rightNodeSearchCondition) {\n-\n-        NodeSearchCondition nodeSearchCondition =\n-                new NodeSearchCondition();\n-\n-        nodeSearchCondition.type = Type.AND;\n-        nodeSearchCondition.leftNodeSearchCondition = leftNodeSearchCondition;\n-        nodeSearchCondition.rightNodeSearchCondition = rightNodeSearchCondition;\n-\n-        return nodeSearchCondition;\n-    }\n-\n-    public static NodeSearchCondition getOrSearchCondition(\n-            NodeSearchCondition leftNodeSearchCondition,\n-            NodeSearchCondition rightNodeSearchCondition) {\n-\n-        NodeSearchCondition nodeSearchCondition =\n-                new NodeSearchCondition();\n-\n-        nodeSearchCondition.type = Type.OR;\n-        nodeSearchCondition.leftNodeSearchCondition = leftNodeSearchCondition;\n-        nodeSearchCondition.rightNodeSearchCondition = rightNodeSearchCondition;\n-\n-        return nodeSearchCondition;\n-    }\n-\n-    public static NodeSearchCondition getNotSearchCondition(\n-            NodeSearchCondition leftNodeSearchCondition) {\n-\n-        NodeSearchCondition nodeSearchCondition =\n-                new NodeSearchCondition();\n-\n-        nodeSearchCondition.type = Type.NOT;\n-        nodeSearchCondition.leftNodeSearchCondition = leftNodeSearchCondition;\n-\n-        return nodeSearchCondition;\n-    }\n-\n-    public void setLeafSearchCondition(LeafSearchCondition leafSearchCondition) {\n-        this.leafSearchCondition = leafSearchCondition;\n-    }\n-\n-    public LeafSearchCondition getLeafSearchCondition() {\n-        return leafSearchCondition;\n-    }\n-\n-    public void setLeftNodeSearchCondition(NodeSearchCondition leftNodeSearchCondition) {\n-        this.leftNodeSearchCondition = leftNodeSearchCondition;\n-    }\n-\n-    public NodeSearchCondition getLeftNodeSearchCondition() {\n-        return leftNodeSearchCondition;\n-    }\n-\n-    public void setRightNodeSearchCondition(NodeSearchCondition rightNodeSearchCondition) {\n-        this.rightNodeSearchCondition = rightNodeSearchCondition;\n-    }\n-\n-    public NodeSearchCondition getRightNodeSearchCondition() {\n-        return rightNodeSearchCondition;\n-    }\n-\n-    public void setType(Type type) {\n-        this.type = type;\n-    }\n-\n-    public Type getType() {\n-        return type;\n-    }\n-\n-    public boolean checkValidity() {\n-        if (type == null) {\n-            return false;\n-        }\n-\n-        switch (type) {\n-            case LEAF:\n-                return leafSearchCondition.checkValidity();\n-            case AND:\n-            case OR:\n-                return (leftNodeSearchCondition == null\n-                        || rightNodeSearchCondition == null)\n-                        ? false\n-                        : leftNodeSearchCondition.checkValidity()\n-                        && rightNodeSearchCondition.checkValidity();\n-            case NOT:\n-                return leftNodeSearchCondition == null ? false\n-                        : leftNodeSearchCondition.checkValidity();\n-        }\n-\n-        return false;\n-    }\n-}"},{"sha":"17eafcc536d2880fc96ae9682e8bbf663a151a2e","filename":"client/src/test/java/org/syncope/client/test/JSONTest.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -0,0 +1,53 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.test;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.junit.Test;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n+import org.syncope.client.search.NodeCond;\n+\n+public class JSONTest {\n+\n+    @Test\n+    public void testSearchCondition() throws IOException {\n+        final AttributeCond usernameCond =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameCond.setSchema(\"username\");\n+        usernameCond.setExpression(\"%o%\");\n+\n+        final MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleName(\"root\");\n+\n+        final NodeCond searchCondition = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameCond),\n+                NodeCond.getLeafCond(membershipCond));\n+\n+        assertTrue(searchCondition.checkValidity());\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, searchCondition);\n+\n+        NodeCond actual = mapper.readValue(writer.toString(), NodeCond.class);\n+        assertEquals(searchCondition, actual);\n+    }\n+}"},{"sha":"fad2651e482e785479a15c803aa2295c3dbf52cc","filename":"console/src/main/java/org/syncope/console/commons/SearchConditionWrapper.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSearchConditionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSearchConditionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSearchConditionWrapper.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -12,24 +12,22 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-\n package org.syncope.console.commons;\n \n-import org.syncope.client.to.LeafSearchCondition.Type;\n+import org.syncope.client.search.NodeCond;\n \n /**\n  * Generic search condition wrapper class.\n  */\n public class SearchConditionWrapper {\n \n-    public enum ConditionType {AND,OR,NOT};\n+    public enum ConditionType {\n \n+        AND, OR, NOT\n+    };\n     private ConditionType conditionType;\n-\n-    private Type type;\n-\n+    private NodeCond.Type type;\n     private String schemaName;\n-\n     private String schemaValue;\n \n     public ConditionType getConditionType() {\n@@ -39,7 +37,7 @@ public ConditionType getConditionType() {\n     public void setConditionType(ConditionType expressionType) {\n         this.conditionType = expressionType;\n     }\n-    \n+\n     public String getSchemaName() {\n         return schemaName;\n     }\n@@ -56,11 +54,11 @@ public void setSchemaValue(String schemaValue) {\n         this.schemaValue = schemaValue;\n     }\n \n-    public Type getType() {\n+    public NodeCond.Type getType() {\n         return type;\n     }\n \n-    public void setType(Type type) {\n+    public void setType(NodeCond.Type type) {\n         this.type = type;\n     }\n }"},{"sha":"6b76d47814d496633fc34c915e534a6043d08b81","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttribute.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -36,10 +36,10 @@ public class MembershipAttribute extends AbstractAttribute {\n     private MembershipSchema schema;\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n-    private List<MembershipAttributeValue> attributeValues;\n+    private List<MembershipAttributeValue> values;\n \n     public MembershipAttribute() {\n-        attributeValues = new ArrayList<MembershipAttributeValue>();\n+        values = new ArrayList<MembershipAttributeValue>();\n     }\n \n     @Override\n@@ -66,26 +66,26 @@ public <T extends AbstractSchema> void setSchema(T schema) {\n     public <T extends AbstractAttributeValue> boolean addValue(\n             T attributeValue) {\n \n-        return attributeValues.add((MembershipAttributeValue) attributeValue);\n+        return values.add((MembershipAttributeValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> boolean removeValue(\n             T attributeValue) {\n \n-        return attributeValues.remove((MembershipAttributeValue) attributeValue);\n+        return values.remove((MembershipAttributeValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> List<T> getValues() {\n-        return (List<T>) attributeValues;\n+        return (List<T>) values;\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> void setValues(\n             List<T> attributeValues) {\n \n-        this.attributeValues = (List<MembershipAttributeValue>) attributeValues;\n+        this.values = (List<MembershipAttributeValue>) attributeValues;\n \n     }\n }"},{"sha":"3a6732887967362e6a5371ab9c0cb13c32a58bdd","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleAttribute.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -36,10 +36,10 @@ public class RoleAttribute extends AbstractAttribute {\n     private RoleSchema schema;\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n-    private List<RoleAttributeValue> attributeValues;\n+    private List<RoleAttributeValue> values;\n \n     public RoleAttribute() {\n-        attributeValues = new ArrayList<RoleAttributeValue>();\n+        values = new ArrayList<RoleAttributeValue>();\n     }\n \n     @Override\n@@ -66,26 +66,26 @@ public <T extends AbstractSchema> void setSchema(T schema) {\n     public <T extends AbstractAttributeValue> boolean addValue(\n             T attributeValue) {\n \n-        return attributeValues.add((RoleAttributeValue) attributeValue);\n+        return values.add((RoleAttributeValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> boolean removeValue(\n             T attributeValue) {\n \n-        return attributeValues.remove((RoleAttributeValue) attributeValue);\n+        return values.remove((RoleAttributeValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> List<T> getValues() {\n-        return (List<T>) attributeValues;\n+        return (List<T>) values;\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> void setValues(\n             List<T> attributeValues) {\n \n-        this.attributeValues = (List<RoleAttributeValue>) attributeValues;\n+        this.values = (List<RoleAttributeValue>) attributeValues;\n \n     }\n }"},{"sha":"e5915da15d971df7fa62e3e411f75aed378b0046","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttribute.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -38,10 +38,10 @@ public class UserAttribute extends AbstractAttribute {\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n-    private List<UserAttributeValue> attributeValues;\n+    private List<UserAttributeValue> values;\n \n     public UserAttribute() {\n-        attributeValues = new ArrayList<UserAttributeValue>();\n+        values = new ArrayList<UserAttributeValue>();\n     }\n \n     @Override\n@@ -68,26 +68,26 @@ public <T extends AbstractSchema> void setSchema(T schema) {\n     public <T extends AbstractAttributeValue> boolean addValue(\n             T attributeValue) {\n \n-        return attributeValues.add((UserAttributeValue) attributeValue);\n+        return values.add((UserAttributeValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> boolean removeValue(\n             T attributeValue) {\n \n-        return attributeValues.remove((UserAttributeValue) attributeValue);\n+        return values.remove((UserAttributeValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> List<T> getValues() {\n-        return (List<T>) attributeValues;\n+        return (List<T>) values;\n     }\n \n     @Override\n     public <T extends AbstractAttributeValue> void setValues(\n             List<T> attributeValues) {\n \n-        this.attributeValues = (List<UserAttributeValue>) attributeValues;\n+        this.values = (List<UserAttributeValue>) attributeValues;\n \n     }\n }"},{"sha":"800d918a9929631e1774188cdad97bff7fe1767d","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -15,7 +15,7 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.client.to.NodeSearchCondition;\n+import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n \n@@ -29,7 +29,7 @@ public interface SyncopeUserDAO extends DAO {\n \n     List<SyncopeUser> findAll();\n \n-    List<SyncopeUser> search(NodeSearchCondition searchCondition);\n+    List<SyncopeUser> search(NodeCond searchCondition);\n \n     SyncopeUser save(SyncopeUser syncopeUser);\n "},{"sha":"53fc93a11754684ccd3870d3e0ca9e85fa4f9119","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/QueryUtils.java","status":"removed","additions":0,"deletions":163,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bc424fa38bbad819ebf881f5450f7ddfeb0091da/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FQueryUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bc424fa38bbad819ebf881f5450f7ddfeb0091da/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FQueryUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FQueryUtils.java?ref=bc424fa38bbad819ebf881f5450f7ddfeb0091da","patch":"@@ -1,163 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.dao.impl;\n-\n-import org.syncope.client.to.LeafSearchCondition;\n-import org.syncope.client.to.NodeSearchCondition;\n-\n-public class QueryUtils {\n-\n-    private static StringBuilder getUserSearchQueryPart(\n-            LeafSearchCondition leafSearchCondition) {\n-\n-        StringBuilder result = new StringBuilder();\n-\n-        String expression = null;\n-        if (leafSearchCondition.getExpression() != null) {\n-            expression = \"'\"\n-                    + leafSearchCondition.getExpression().replaceAll(\"'\", \"\\\\'\")\n-                    + \"'\";\n-        }\n-\n-        switch (leafSearchCondition.getType()) {\n-\n-            case EQ:\n-                result.append(\"schema.name = '\").append(\n-                        leafSearchCondition.getSchema()).append(\"' AND (\");\n-                result.append(\" uav.stringValue = \").append(expression);\n-                result.append(\" OR uav.booleanValue = \").append(expression);\n-                result.append(\" OR uav.dateValue = \").append(expression);\n-                result.append(\" OR uav.longValue = \").append(expression);\n-                result.append(\" OR uav.doubleValue = \").append(expression);\n-                result.append(\")\");\n-                break;\n-\n-            case LIKE:\n-                result.append(\"schema.name = '\").append(\n-                        leafSearchCondition.getSchema()).append(\"' AND (\");\n-                result.append(\" uav.stringValue LIKE \").append(expression);\n-                result.append(\" OR uav.booleanValue LIKE \").append(expression);\n-                result.append(\" OR uav.dateValue LIKE \").append(expression);\n-                result.append(\" OR uav.longValue LIKE \").append(expression);\n-                result.append(\" OR uav.doubleValue LIKE \").append(expression);\n-                result.append(\")\");\n-                break;\n-\n-            case GT:\n-                result.append(\"schema.name = '\").append(\n-                        leafSearchCondition.getSchema()).append(\"' AND (\");\n-                result.append(\" uav.stringValue > \").append(expression);\n-                result.append(\" OR uav.booleanValue > \").append(expression);\n-                result.append(\" OR uav.dateValue > \").append(expression);\n-                result.append(\" OR uav.longValue > \").append(expression);\n-                result.append(\" OR uav.doubleValue > \").append(expression);\n-                result.append(\")\");\n-                break;\n-\n-            case GE:\n-                result.append(\"schema.name = '\").append(\n-                        leafSearchCondition.getSchema()).append(\"' AND (\");\n-                result.append(\" uav.stringValue >= \").append(expression);\n-                result.append(\" OR uav.booleanValue >= \").append(expression);\n-                result.append(\" OR uav.dateValue >= \").append(expression);\n-                result.append(\" OR uav.longValue >= \").append(expression);\n-                result.append(\" OR uav.doubleValue >= \").append(expression);\n-                result.append(\")\");\n-                break;\n-\n-            case LT:\n-                result.append(\"schema.name = '\").append(\n-                        leafSearchCondition.getSchema()).append(\"' AND (\");\n-                result.append(\" uav.stringValue < \").append(expression);\n-                result.append(\" OR uav.booleanValue < \").append(expression);\n-                result.append(\" OR uav.dateValue < \").append(expression);\n-                result.append(\" OR uav.longValue < \").append(expression);\n-                result.append(\" OR uav.doubleValue < \").append(expression);\n-                result.append(\")\");\n-                break;\n-\n-            case LE:\n-                result.append(\"schema.name = '\").append(\n-                        leafSearchCondition.getSchema()).append(\"' AND (\");\n-                result.append(\" uav.stringValue <= \").append(expression);\n-                result.append(\" OR uav.booleanValue <= \").append(expression);\n-                result.append(\" OR uav.dateValue <= \").append(expression);\n-                result.append(\" OR uav.longValue <= \").append(expression);\n-                result.append(\" OR uav.doubleValue <= \").append(expression);\n-                result.append(\")\");\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    private static StringBuilder getUserSearchQueryPart(\n-            NodeSearchCondition searchCondition) {\n-\n-        StringBuilder result = new StringBuilder();\n-\n-        switch (searchCondition.getType()) {\n-\n-            case LEAF:\n-                result = getUserSearchQueryPart(\n-                        searchCondition.getLeafSearchCondition());\n-                break;\n-\n-            case NOT:\n-                result.append(\"NOT (\").append(getUserSearchQueryPart(\n-                        searchCondition.getLeftNodeSearchCondition())).\n-                        append(\")\");\n-                break;\n-\n-            case AND:\n-                result.append(\"(\").append(getUserSearchQueryPart(\n-                        searchCondition.getLeftNodeSearchCondition())).\n-                        append(\") AND (\").append(getUserSearchQueryPart(\n-                        searchCondition.getRightNodeSearchCondition())).\n-                        append(\")\");\n-                break;\n-            case OR:\n-                result.append(\"(\").append(getUserSearchQueryPart(\n-                        searchCondition.getLeftNodeSearchCondition())).\n-                        append(\") OR (\").append(getUserSearchQueryPart(\n-                        searchCondition.getRightNodeSearchCondition())).\n-                        append(\")\");\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    public static String getUserSearchQuery(\n-            NodeSearchCondition searchCondition) {\n-\n-        StringBuilder queryString = new StringBuilder();\n-        queryString.append(\"SELECT u \").\n-                append(\"FROM SyncopeUser u, \").\n-                append(\"UserSchema schema, \").\n-                append(\"UserAttribute ua, \").\n-                append(\"UserAttributeValue uav \").\n-                append(\"WHERE uav.attribute = ua \").\n-                append(\"AND ua.schema = schema \").\n-                append(\"AND ua.owner = u \").\n-                append(\"AND (\");\n-\n-        queryString.append(QueryUtils.getUserSearchQueryPart(searchCondition));\n-\n-        queryString.append(\")\");\n-\n-        return queryString.toString();\n-    }\n-}"},{"sha":"261c694c3877c716eb5c3b8776589f34b930fd8e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SearchUtils.java","status":"added","additions":244,"deletions":0,"changes":244,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchUtils.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -0,0 +1,244 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import org.hibernate.Criteria;\n+import org.hibernate.Session;\n+import org.hibernate.criterion.Criterion;\n+import org.hibernate.criterion.Restrictions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.validation.ValidationException;\n+\n+/**\n+ * Utility class for searching the db.\n+ */\n+@Component\n+public class SearchUtils {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            SearchUtils.class);\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    private Criterion getCriterion(final AttributeCond.Type type,\n+            final AbstractAttributeValue example) {\n+\n+        Criterion result = null;\n+        switch (type) {\n+            case EQ:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.eq(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.eq(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.eq(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.eq(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.eq(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case GE:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.ge(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.ge(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.ge(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.ge(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.ge(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case GT:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.gt(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.gt(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.gt(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.gt(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.gt(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case ISNOTNULL:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.isNotNull(\"av.stringValue\")).\n+                        add(Restrictions.isNotNull(\"av.booleanValue\")).\n+                        add(Restrictions.isNotNull(\"av.longValue\")).\n+                        add(Restrictions.isNotNull(\"av.doubleValue\")).\n+                        add(Restrictions.isNotNull(\"av.dateValue\"));\n+                break;\n+\n+            case LE:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.le(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.le(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.le(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.le(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.le(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case LIKE:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.like(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.like(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.like(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.like(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.like(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            case LT:\n+                result = Restrictions.disjunction().\n+                        add(Restrictions.lt(\"av.stringValue\",\n+                        example.getStringValue())).\n+                        add(Restrictions.lt(\"av.booleanValue\",\n+                        example.getBooleanValue())).\n+                        add(Restrictions.lt(\"av.longValue\",\n+                        example.getLongValue())).\n+                        add(Restrictions.lt(\"av.doubleValue\",\n+                        example.getDoubleValue())).\n+                        add(Restrictions.lt(\"av.dateValue\",\n+                        example.getDateValue()));\n+                break;\n+\n+            default:\n+        }\n+        return result;\n+    }\n+\n+    private Criterion getCriterion(final NodeCond nodeCond) {\n+\n+        Criterion result = null;\n+\n+        switch (nodeCond.getType()) {\n+            case LEAF:\n+                if (nodeCond.getMembershipCond() != null) {\n+                    if (nodeCond.getMembershipCond().getRoleId() != null) {\n+                        result = Restrictions.eq(\"r.id\",\n+                                nodeCond.getMembershipCond().getRoleId());\n+                    }\n+                    if (nodeCond.getMembershipCond().getRoleName() != null) {\n+                        result = Restrictions.eq(\"r.name\",\n+                                nodeCond.getMembershipCond().getRoleName());\n+                    }\n+                } else if (nodeCond.getAttributeCond() != null) {\n+                    UserSchema userSchema = schemaDAO.find(\n+                            nodeCond.getAttributeCond().getSchema(),\n+                            UserSchema.class);\n+                    if (userSchema == null) {\n+                        LOG.warn(\"Ignoring invalid schema '\"\n+                                + nodeCond.getAttributeCond().getSchema()\n+                                + \"'\");\n+                    } else {\n+                        if (nodeCond.getAttributeCond().getType()\n+                                == AttributeCond.Type.ISNULL) {\n+\n+                            result = Restrictions.and(\n+                                    Restrictions.eq(\"a.schema.name\",\n+                                    nodeCond.getAttributeCond().getSchema()),\n+                                    Restrictions.isEmpty(\"a.values\"));\n+                        } else {\n+                            try {\n+                                UserAttributeValue example =\n+                                        userSchema.getValidator().\n+                                        getValue(nodeCond.getAttributeCond().\n+                                        getExpression(),\n+                                        new UserAttributeValue());\n+                                result = Restrictions.and(\n+                                        Restrictions.eq(\"a.schema.name\",\n+                                        nodeCond.getAttributeCond().\n+                                        getSchema()),\n+                                        getCriterion(\n+                                        nodeCond.getAttributeCond().getType(),\n+                                        example));\n+                            } catch (ValidationException e) {\n+                                LOG.error(\"Could not validate expression '\"\n+                                        + nodeCond.getAttributeCond().\n+                                        getExpression() + \"'\", e);\n+                            }\n+                        }\n+                    }\n+\n+                }\n+                break;\n+\n+            case AND:\n+                result = Restrictions.and(\n+                        getCriterion(nodeCond.getLeftNodeCond()),\n+                        getCriterion(nodeCond.getRightNodeCond()));\n+                break;\n+\n+            case OR:\n+                result = Restrictions.or(\n+                        getCriterion(nodeCond.getLeftNodeCond()),\n+                        getCriterion(nodeCond.getRightNodeCond()));\n+                break;\n+\n+            case NOT:\n+                result = Restrictions.not(\n+                        getCriterion(nodeCond.getLeftNodeCond()));\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    public Criteria buildUserCriteria(final Session hibernateSess,\n+            final NodeCond searchCondition) {\n+\n+        Criteria userCriteria = hibernateSess.createCriteria(SyncopeUser.class).\n+                createAlias(\"memberships\", \"m\").\n+                createAlias(\"m.syncopeRole\", \"r\").\n+                createAlias(\"attributes\", \"a\").\n+                createAlias(\"a.values\", \"av\");\n+\n+        userCriteria.add(getCriterion(searchCondition));\n+        userCriteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n+\n+        return userCriteria;\n+    }\n+}"},{"sha":"babe433c630438e994a1aff58f272463540ec8dc","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -18,9 +18,12 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import org.hibernate.Criteria;\n+import org.hibernate.Session;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.client.to.NodeSearchCondition;\n+import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n@@ -30,6 +33,9 @@\n public class SyncopeUserDAOImpl extends AbstractDAOImpl\n         implements SyncopeUserDAO {\n \n+    @Autowired\n+    private SearchUtils searchUtils;\n+\n     @Override\n     @Transactional(readOnly = true)\n     public final SyncopeUser find(final Long id) {\n@@ -90,20 +96,24 @@ public final List<SyncopeUser> findAll() {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public final List<SyncopeUser> search(\n-            final NodeSearchCondition searchCondition) {\n-\n-        String queryString = QueryUtils.getUserSearchQuery(searchCondition);\n+    public final List<SyncopeUser> search(final NodeCond searchCondition) {\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"About to execute query\\n\\t\" + queryString + \"\\n\");\n+            LOG.debug(\"Search condition:\\n\" + searchCondition);\n         }\n \n+        Session hibernateSess = ((Session) entityManager.getDelegate());\n+\n         List<SyncopeUser> result = Collections.EMPTY_LIST;\n         try {\n-            Query query = entityManager.createQuery(queryString);\n-            result = query.getResultList();\n+            Criteria userCriteria = searchUtils.buildUserCriteria(\n+                    hibernateSess, searchCondition);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Criteria to be performed:\\n\" + userCriteria);\n+            }\n+\n+            result = userCriteria.list();\n         } catch (Throwable t) {\n-            LOG.error(\"While executing query\\n\\t\" + queryString + \"\\n\", t);\n+            LOG.error(\"While searching users\", t);\n         }\n \n         return result;"},{"sha":"e53dfe1eb5cc67cedc63e91da98d37a6dd1e514a","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -44,7 +44,7 @@\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n import org.syncope.client.mod.UserMod;\n-import org.syncope.client.to.NodeSearchCondition;\n+import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -235,7 +235,7 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n-    public UserTOs search(@RequestBody NodeSearchCondition searchCondition)\n+    public UserTOs search(@RequestBody NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         if (LOG.isDebugEnabled()) {\n@@ -244,7 +244,6 @@ public UserTOs search(@RequestBody NodeSearchCondition searchCondition)\n \n         if (!searchCondition.checkValidity()) {\n             LOG.error(\"Invalid search condition: \" + searchCondition);\n-\n             throw new InvalidSearchConditionException();\n         }\n "},{"sha":"19f2d8e3c1e68ac077a17ac22ca25db9d44302c2","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeUserDAOTest.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -20,8 +20,9 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.client.to.LeafSearchCondition;\n-import org.syncope.client.to.NodeSearchCondition;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n+import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n \n@@ -60,26 +61,23 @@ public final void save() {\n \n     @Test\n     public final void search() {\n-        LeafSearchCondition usernameLeafCond1 =\n-                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n-        usernameLeafCond1.setSchema(\"username\");\n-        usernameLeafCond1.setExpression(\"%o%\");\n+        AttributeCond usernameLeafCond =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"%o%\");\n \n-        LeafSearchCondition usernameLeafCond2 =\n-                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n-        usernameLeafCond2.setSchema(\"username\");\n-        usernameLeafCond2.setExpression(\"%i%\");\n+        MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleId(1L);\n \n-        NodeSearchCondition searchCondition =\n-                NodeSearchCondition.getAndSearchCondition(\n-                NodeSearchCondition.getLeafCondition(usernameLeafCond1),\n-                NodeSearchCondition.getLeafCondition(usernameLeafCond2));\n+        NodeCond searchCondition = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(membershipCond));\n \n         assertTrue(searchCondition.checkValidity());\n \n         List<SyncopeUser> users = syncopeUserDAO.search(searchCondition);\n         assertNotNull(users);\n-        assertFalse(users.isEmpty());\n+        assertEquals(2, users.size());\n     }\n \n     @Test\n@@ -91,7 +89,7 @@ public final void delete() {\n         SyncopeUser actual = syncopeUserDAO.find(3L);\n         assertNull(\"delete did not work\", actual);\n     }\n-    \n+\n     @Test\n     public final void getRoleResources() {\n         SyncopeUser user = syncopeUserDAO.find(1L);"},{"sha":"ac55810478832eef79b29571d9767621ec200078","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e1b7647150dcc94739dae4d538a450278d332a8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=5e1b7647150dcc94739dae4d538a450278d332a8","patch":"@@ -28,9 +28,9 @@\n import org.syncope.client.mod.MembershipMod;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.AttributeTO;\n-import org.syncope.client.to.LeafSearchCondition;\n+import org.syncope.client.search.AttributeCond;\n import org.syncope.client.to.MembershipTO;\n-import org.syncope.client.to.NodeSearchCondition;\n+import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.UserTOs;\n import org.syncope.client.to.WorkflowActionsTO;\n@@ -263,20 +263,19 @@ public final void token() {\n \n     @Test\n     public final void search() {\n-        LeafSearchCondition usernameLeafCond1 =\n-                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n+        AttributeCond usernameLeafCond1 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n         usernameLeafCond1.setSchema(\"username\");\n         usernameLeafCond1.setExpression(\"%o%\");\n \n-        LeafSearchCondition usernameLeafCond2 =\n-                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n+        AttributeCond usernameLeafCond2 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n         usernameLeafCond2.setSchema(\"username\");\n         usernameLeafCond2.setExpression(\"%i%\");\n \n-        NodeSearchCondition searchCondition =\n-                NodeSearchCondition.getAndSearchCondition(\n-                NodeSearchCondition.getLeafCondition(usernameLeafCond1),\n-                NodeSearchCondition.getLeafCondition(usernameLeafCond2));\n+        NodeCond searchCondition = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameLeafCond1),\n+                NodeCond.getLeafCond(usernameLeafCond2));\n \n         assertTrue(searchCondition.checkValidity());\n "}]}