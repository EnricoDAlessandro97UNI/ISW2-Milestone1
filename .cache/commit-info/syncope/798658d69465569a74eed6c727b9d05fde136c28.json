{"sha":"798658d69465569a74eed6c727b9d05fde136c28","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc5ODY1OGQ2OTQ2NTU2OWE3NGVlZDZjNzI3YjlkMDVmZGUxMzZjMjg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-19T10:39:48Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-19T10:39:48Z"},"message":"[SYNCOPE-43] ReportJob was not adding the new execution to relative report\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1302362 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"230db7811ed1e80a4ad3f8d7ce1499ec559fe208","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/230db7811ed1e80a4ad3f8d7ce1499ec559fe208"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/798658d69465569a74eed6c727b9d05fde136c28","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/798658d69465569a74eed6c727b9d05fde136c28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/798658d69465569a74eed6c727b9d05fde136c28","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/798658d69465569a74eed6c727b9d05fde136c28/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"437ff42708099d39d00eedf4d5e5da9cb0503637","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/437ff42708099d39d00eedf4d5e5da9cb0503637","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/437ff42708099d39d00eedf4d5e5da9cb0503637"}],"stats":{"total":47,"additions":39,"deletions":8},"files":[{"sha":"e0bc5c488cf3176c7f502ea9fd8f2b2f513247fa","filename":"core/src/main/java/org/syncope/core/persistence/beans/Report.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java?ref=798658d69465569a74eed6c727b9d05fde136c28","patch":"@@ -46,7 +46,7 @@ public class Report extends AbstractBaseBean {\n \n     private String cronExpression;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"report\")\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n     private List<ReportExec> executions;\n \n     public Report() {"},{"sha":"98d83c5c75060a02262c5e89accc7803f2d58f5a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ReportDAOImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java?ref=798658d69465569a74eed6c727b9d05fde136c28","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Report;\n import org.syncope.core.persistence.dao.ReportDAO;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -29,6 +30,7 @@\n public class ReportDAOImpl extends AbstractDAOImpl implements ReportDAO {\n \n     @Override\n+    @Transactional(readOnly = true)\n     public Report find(final Long id) {\n         return entityManager.find(Report.class, id);\n     }\n@@ -61,8 +63,8 @@ public int count() {\n     }\n \n     @Override\n+    @Transactional(rollbackFor = Throwable.class)\n     public Report save(final Report report) throws InvalidEntityException {\n-\n         return entityManager.merge(report);\n     }\n "},{"sha":"67315f62a5aef11c5cd95f94ffeff3931f52aae9","filename":"core/src/main/java/org/syncope/core/scheduling/ReportJob.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java?ref=798658d69465569a74eed6c727b9d05fde136c28","patch":"@@ -108,6 +108,9 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         execution.setReport(report);\n         execution = reportExecDAO.save(execution);\n \n+        report.addExec(execution);\n+        report = reportDAO.save(report);\n+\n         // 2. define a SAX handler for generating result as XML\n         TransformerHandler handler;\n \n@@ -133,8 +136,8 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         execution.setStatus(ReportExecStatus.RUNNING);\n         execution = reportExecDAO.save(execution);\n \n-        ConfigurableListableBeanFactory beanFactory = ApplicationContextManager.getApplicationContext()\n-                .getBeanFactory();\n+        ConfigurableListableBeanFactory beanFactory =\n+                ApplicationContextManager.getApplicationContext().getBeanFactory();\n \n         // 3. actual report execution\n         StringBuilder reportExecutionMessage = new StringBuilder();\n@@ -148,8 +151,8 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n \n             // iterate over reportlet instances defined for this report\n             for (ReportletConf reportletConf : report.getReportletConfs()) {\n-                Class<Reportlet> reportletClass = dataBinder\n-                        .findReportletClassHavingConfClass(reportletConf.getClass());\n+                Class<Reportlet> reportletClass =\n+                        dataBinder.findReportletClassHavingConfClass(reportletConf.getClass());\n                 if (reportletClass != null) {\n                     Reportlet autowired = (Reportlet) beanFactory.createBean(reportletClass,\n                             AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);"},{"sha":"05caeaba4b29efcd6a633f76522f55575ee890fa","filename":"core/src/test/java/org/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/798658d69465569a74eed6c727b9d05fde136c28/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=798658d69465569a74eed6c727b9d05fde136c28","patch":"@@ -101,8 +101,7 @@ public void create() {\n         report = restTemplate.postForObject(BASE_URL + \"report/create\", report, ReportTO.class);\n         assertNotNull(report);\n \n-        ReportTO actual = restTemplate\n-                .getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, report.getId());\n+        ReportTO actual = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, report.getId());\n         assertNotNull(actual);\n         assertEquals(actual, report);\n     }\n@@ -241,4 +240,31 @@ public void executeAndExport() throws IOException {\n         assertNotNull(export);\n         assertFalse(export.isEmpty());\n     }\n+\n+    public void issueSYNCOPE43() {\n+        ReportTO reportTO = new ReportTO();\n+        reportTO.setName(\"issueSYNCOPE43\");\n+        reportTO = restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\n+        assertNotNull(reportTO);\n+\n+        ReportExecTO execution = restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\n+                ReportExecTO.class, reportTO.getId());\n+        assertNotNull(execution);\n+\n+        int i = 0;\n+        int maxit = 50;\n+\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+\n+            i++;\n+        } while (reportTO.getExecutions().size() == 0 && i < maxit);\n+\n+        assertEquals(1, reportTO.getExecutions().size());\n+    }\n }"}]}