{"sha":"1bd086af5f873b9e4d221b2eb899dcc8a9733cae","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFiZDA4NmFmNWY4NzNiOWU0ZDIyMWIyZWI4OTlkY2M4YTk3MzNjYWU=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2014-06-19T10:32:44Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2014-06-19T10:32:44Z"},"message":"[SYNCOPE-509]\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1603819 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09d6b7b0507b3b0db312d1eb2f6482d7a6523e47","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/09d6b7b0507b3b0db312d1eb2f6482d7a6523e47"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1bd086af5f873b9e4d221b2eb899dcc8a9733cae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1bd086af5f873b9e4d221b2eb899dcc8a9733cae","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1bd086af5f873b9e4d221b2eb899dcc8a9733cae","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"c356d53465ba4d437ada6576fd93ef5f60aa8371","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c356d53465ba4d437ada6576fd93ef5f60aa8371","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c356d53465ba4d437ada6576fd93ef5f60aa8371"}],"stats":{"total":549,"additions":280,"deletions":269},"files":[{"sha":"9af268771cf6c2d995522df72f2b6ec65ddedd1d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractTasks.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractTasks.java?ref=1bd086af5f873b9e4d221b2eb899dcc8a9733cae","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.rest.TaskRestClient;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n \n@@ -35,6 +36,8 @@ public abstract class AbstractTasks extends Panel {\n     protected static final int WIN_WIDTH = 700;\n \n     protected static final String TASKS = \"Tasks\";\n+    \n+    protected PageReference pageRef;\n \n     @SpringBean\n     protected TaskRestClient restClient;\n@@ -45,7 +48,8 @@ public abstract class AbstractTasks extends Panel {\n     @SpringBean\n     protected XMLRolesReader xmlRolesReader;\n \n-    public AbstractTasks(final String id) {\n+    public AbstractTasks(final String id, final PageReference pageRef) {\n         super(id);\n+        this.pageRef = pageRef;\n     }\n }"},{"sha":"84d3efb772fec836c521731d4bc71832f40962b4","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationTasks.java","status":"modified","additions":68,"deletions":66,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=1bd086af5f873b9e4d221b2eb899dcc8a9733cae","patch":"@@ -60,13 +60,11 @@ public class NotificationTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n-\n     private AjaxDataTablePanel<TaskTO, String> table;\n-\n+    \n     public NotificationTasks(final String id, final PageReference pageRef) {\n-        super(id);\n-\n+        super(id, pageRef);\n+        \n         container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n         add(container);\n@@ -75,7 +73,69 @@ public NotificationTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        table = Tasks.updateTaskTable(\n+                getColumns(),\n+                new TasksProvider<NotificationTaskTO>(restClient, paginatorRows, getId(), NotificationTaskTO.class),\n+                container,\n+                0,\n+                pageRef,\n+                restClient);\n+\n+        container.add(table);\n+\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                target.add(container);\n+                if (operationResult) {\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(getPage().get(Constants.FEEDBACK));\n+                    operationResult = false;\n+                }\n+            }\n+        });\n+\n+        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        window.setInitialHeight(WIN_HEIGHT);\n+        window.setInitialWidth(WIN_WIDTH);\n+        window.setCookieName(VIEW_TASK_WIN_COOKIE_NAME);\n+\n+        final Form paginatorForm = new Form(\"PaginatorForm\");\n+\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequest(), (WebResponse) getResponse(),\n+                        Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS, String.valueOf(paginatorRows));\n+\n+                table = Tasks.updateTaskTable(\n+                        getColumns(),\n+                        new TasksProvider<NotificationTaskTO>(restClient, paginatorRows, getId(),\n+                                NotificationTaskTO.class),\n+                        container,\n+                        table == null ? 0 : (int) table.getCurrentPage(),\n+                        pageRef,\n+                        restClient);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+    }\n+\n+    private List<IColumn<TaskTO, String>> getColumns() {\n+        final List<IColumn<TaskTO, String>> columns = new ArrayList<IColumn<TaskTO, String>>();\n \n         columns.add(new PropertyColumn<TaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n@@ -179,66 +239,8 @@ public void onClick(final AjaxRequestTarget target) {\n                 return panel;\n             }\n         });\n-\n-        table = Tasks.updateTaskTable(\n-                columns,\n-                new TasksProvider<NotificationTaskTO>(restClient, paginatorRows, getId(), NotificationTaskTO.class),\n-                container,\n-                0,\n-                pageRef,\n-                restClient);\n-\n-        container.add(table);\n-\n-        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n-\n-            private static final long serialVersionUID = 8804221891699487139L;\n-\n-            @Override\n-            public void onClose(final AjaxRequestTarget target) {\n-                target.add(container);\n-                if (operationResult) {\n-                    info(getString(Constants.OPERATION_SUCCEEDED));\n-                    target.add(getPage().get(Constants.FEEDBACK));\n-                    operationResult = false;\n-                }\n-            }\n-        });\n-\n-        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-        window.setInitialHeight(WIN_HEIGHT);\n-        window.setInitialWidth(WIN_WIDTH);\n-        window.setCookieName(VIEW_TASK_WIN_COOKIE_NAME);\n-\n-        Form paginatorForm = new Form(\"PaginatorForm\");\n-\n-        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n-                prefMan.getPaginatorChoices());\n-\n-        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getWebRequest(), (WebResponse) getResponse(),\n-                        Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS, String.valueOf(paginatorRows));\n-\n-                table = Tasks.updateTaskTable(\n-                        columns,\n-                        new TasksProvider<NotificationTaskTO>(restClient, paginatorRows, getId(),\n-                        NotificationTaskTO.class),\n-                        container,\n-                        table == null ? 0 : (int) table.getCurrentPage(),\n-                        pageRef,\n-                        restClient);\n-\n-                target.add(container);\n-            }\n-        });\n-\n-        paginatorForm.add(rowsChooser);\n-        add(paginatorForm);\n+        \n+        return columns;\n     }\n \n     @Override"},{"sha":"bcc3d107af633adc735e6fcab65c7a373d50ee03","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":64,"deletions":62,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=1bd086af5f873b9e4d221b2eb899dcc8a9733cae","patch":"@@ -65,12 +65,10 @@ public class PropagationTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n-\n     private AjaxDataTablePanel<TaskTO, String> table;\n \n     public PropagationTasks(final String id, final PageReference pageRef) {\n-        super(id);\n+        super(id, pageRef);\n \n         container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n@@ -80,7 +78,67 @@ public PropagationTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        table = Tasks.updateTaskTable(\n+                getColumns(),\n+                new TasksProvider<PropagationTaskTO>(restClient, paginatorRows, getId(), PropagationTaskTO.class),\n+                container,\n+                0,\n+                pageRef,\n+                restClient);\n+\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                target.add(container);\n+                if (operationResult) {\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(getPage().get(Constants.FEEDBACK));\n+                    operationResult = false;\n+                }\n+            }\n+        });\n+\n+        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        window.setInitialHeight(WIN_HEIGHT);\n+        window.setInitialWidth(WIN_WIDTH);\n+        window.setCookieName(VIEW_TASK_WIN_COOKIE_NAME);\n+\n+        Form paginatorForm = new Form(\"PaginatorForm\");\n+\n+        final DropDownChoice rowsChooser = new DropDownChoice(\n+                \"rowsChooser\", new PropertyModel(this, \"paginatorRows\"), prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequest(), (WebResponse) getResponse(),\n+                        Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS, String.valueOf(paginatorRows));\n+\n+                table = Tasks.updateTaskTable(\n+                        getColumns(),\n+                        new TasksProvider<PropagationTaskTO>(restClient, paginatorRows,\n+                                getId(), PropagationTaskTO.class),\n+                        container,\n+                        table == null ? 0 : (int) table.getCurrentPage(),\n+                        pageRef,\n+                        restClient);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+    }\n+\n+    private List<IColumn<TaskTO, String>> getColumns() {\n+        final List<IColumn<TaskTO, String>> columns = new ArrayList<IColumn<TaskTO, String>>();\n \n         columns.add(new PropertyColumn<TaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n@@ -200,64 +258,8 @@ public void onClick(final AjaxRequestTarget target) {\n                 return panel;\n             }\n         });\n-\n-        table = Tasks.updateTaskTable(\n-                columns,\n-                new TasksProvider<PropagationTaskTO>(restClient, paginatorRows, getId(), PropagationTaskTO.class),\n-                container,\n-                0,\n-                pageRef,\n-                restClient);\n-\n-        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n-\n-            private static final long serialVersionUID = 8804221891699487139L;\n-\n-            @Override\n-            public void onClose(final AjaxRequestTarget target) {\n-                target.add(container);\n-                if (operationResult) {\n-                    info(getString(Constants.OPERATION_SUCCEEDED));\n-                    target.add(getPage().get(Constants.FEEDBACK));\n-                    operationResult = false;\n-                }\n-            }\n-        });\n-\n-        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n-        window.setInitialHeight(WIN_HEIGHT);\n-        window.setInitialWidth(WIN_WIDTH);\n-        window.setCookieName(VIEW_TASK_WIN_COOKIE_NAME);\n-\n-        Form paginatorForm = new Form(\"PaginatorForm\");\n-\n-        final DropDownChoice rowsChooser = new DropDownChoice(\n-                \"rowsChooser\", new PropertyModel(this, \"paginatorRows\"), prefMan.getPaginatorChoices());\n-\n-        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getWebRequest(), (WebResponse) getResponse(),\n-                        Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS, String.valueOf(paginatorRows));\n-\n-                table = Tasks.updateTaskTable(\n-                        columns,\n-                        new TasksProvider<PropagationTaskTO>(restClient, paginatorRows,\n-                        getId(), PropagationTaskTO.class),\n-                        container,\n-                        table == null ? 0 : (int) table.getCurrentPage(),\n-                        pageRef,\n-                        restClient);\n-\n-                target.add(container);\n-            }\n-        });\n-\n-        paginatorForm.add(rowsChooser);\n-        add(paginatorForm);\n+        \n+        return columns;\n     }\n \n     @Override"},{"sha":"0911bcc051453ac7ec102fa6efeac2c94ca01f67","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SchedTasks.java","status":"modified","additions":71,"deletions":70,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=1bd086af5f873b9e4d221b2eb899dcc8a9733cae","patch":"@@ -62,13 +62,11 @@ public class SchedTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n-\n     private AjaxDataTablePanel<TaskTO, String> table;\n-\n+    \n     public SchedTasks(final String id, final PageReference pageRef) {\n-        super(id);\n-\n+        super(id, pageRef);\n+        \n         container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n         add(container);\n@@ -84,7 +82,73 @@ public SchedTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        table = Tasks.updateTaskTable(\n+                getColumns(),\n+                new TasksProvider<SchedTaskTO>(restClient, paginatorRows, getId(), SchedTaskTO.class),\n+                container,\n+                0,\n+                pageRef,\n+                restClient);\n+\n+        container.add(table);\n+\n+        Form paginatorForm = new Form(\"PaginatorForm\");\n+\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n+\n+                table = Tasks.updateTaskTable(\n+                        getColumns(),\n+                        new TasksProvider<SchedTaskTO>(restClient, paginatorRows, getId(), SchedTaskTO.class),\n+                        container,\n+                        table == null ? 0 : (int) table.getCurrentPage(),\n+                        pageRef,\n+                        restClient);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+\n+        AjaxLink createLink = new ClearIndicatingAjaxLink(\"createLink\", pageRef) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                window.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new SchedTaskModalPage(window, new SchedTaskTO(), pageRef);\n+                    }\n+                });\n+\n+                window.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createLink, RENDER, xmlRolesReader.getAllAllowedRoles(TASKS, \"create\"));\n+\n+        add(createLink);\n+    }\n+    \n+    private List<IColumn<TaskTO, String>> getColumns() {\n+        final List<IColumn<TaskTO, String>> columns = new ArrayList<IColumn<TaskTO, String>>();\n \n         columns.add(new PropertyColumn<TaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n@@ -207,70 +271,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 return panel;\n             }\n         });\n-\n-        table = Tasks.updateTaskTable(\n-                columns,\n-                new TasksProvider<SchedTaskTO>(restClient, paginatorRows, getId(), SchedTaskTO.class),\n-                container,\n-                0,\n-                pageRef,\n-                restClient);\n-\n-        container.add(table);\n-\n-        Form paginatorForm = new Form(\"PaginatorForm\");\n-\n-        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n-                prefMan.getPaginatorChoices());\n-\n-        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS,\n-                        String.valueOf(paginatorRows));\n-\n-                table = Tasks.updateTaskTable(\n-                        columns,\n-                        new TasksProvider<SchedTaskTO>(restClient, paginatorRows, getId(), SchedTaskTO.class),\n-                        container,\n-                        table == null ? 0 : (int) table.getCurrentPage(),\n-                        pageRef,\n-                        restClient);\n-\n-                target.add(container);\n-            }\n-        });\n-\n-        paginatorForm.add(rowsChooser);\n-        add(paginatorForm);\n-\n-        AjaxLink createLink = new ClearIndicatingAjaxLink(\"createLink\", pageRef) {\n-\n-            private static final long serialVersionUID = -7978723352517770644L;\n-\n-            @Override\n-            protected void onClickInternal(final AjaxRequestTarget target) {\n-                window.setPageCreator(new ModalWindow.PageCreator() {\n-\n-                    private static final long serialVersionUID = -7834632442532690940L;\n-\n-                    @Override\n-                    public Page createPage() {\n-                        return new SchedTaskModalPage(window, new SchedTaskTO(), pageRef);\n-                    }\n-                });\n-\n-                window.show(target);\n-            }\n-        };\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                createLink, RENDER, xmlRolesReader.getAllAllowedRoles(TASKS, \"create\"));\n-\n-        add(createLink);\n+        return columns;\n     }\n \n     @Override"},{"sha":"17609fca31125a39dcaa8d4f00280ff4965cdb1e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":72,"deletions":70,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1bd086af5f873b9e4d221b2eb899dcc8a9733cae/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=1bd086af5f873b9e4d221b2eb899dcc8a9733cae","patch":"@@ -64,13 +64,11 @@ public class SyncTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n-\n     private AjaxDataTablePanel<TaskTO, String> table;\n-\n+    \n     public SyncTasks(final String id, final PageReference pageRef) {\n-        super(id);\n-\n+        super(id, pageRef);\n+        \n         container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n         add(container);\n@@ -86,7 +84,74 @@ public SyncTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        table = Tasks.updateTaskTable(\n+                getColumns(),\n+                new TasksProvider<SyncTaskTO>(restClient, paginatorRows, getId(), SyncTaskTO.class),\n+                container,\n+                0,\n+                pageRef,\n+                restClient);\n+\n+        container.add(table);\n+\n+        Form paginatorForm = new Form(\"PaginatorForm\");\n+\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n+\n+                table = Tasks.updateTaskTable(\n+                        getColumns(),\n+                        new TasksProvider<SyncTaskTO>(restClient, paginatorRows, getId(), SyncTaskTO.class),\n+                        container,\n+                        table == null ? 0 : (int) table.getCurrentPage(),\n+                        pageRef,\n+                        restClient);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+\n+        // create new user\n+        final AjaxLink createLink = new ClearIndicatingAjaxLink(\"createLink\", pageRef) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                window.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new SyncTaskModalPage(window, new SyncTaskTO(), pageRef);\n+                    }\n+                });\n+\n+                window.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createLink, RENDER, xmlRolesReader.getAllAllowedRoles(TASKS, \"create\"));\n+\n+        add(createLink);\n+    }\n+\n+    private List<IColumn<TaskTO, String>> getColumns() {\n+        final List<IColumn<TaskTO, String>> columns = new ArrayList<IColumn<TaskTO, String>>();\n \n         columns.add(new PropertyColumn<TaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n@@ -252,70 +317,7 @@ public void onClick(final AjaxRequestTarget target) {\n             }\n         });\n \n-        table = Tasks.updateTaskTable(\n-                columns,\n-                new TasksProvider<SyncTaskTO>(restClient, paginatorRows, getId(), SyncTaskTO.class),\n-                container,\n-                0,\n-                pageRef,\n-                restClient);\n-\n-        container.add(table);\n-\n-        Form paginatorForm = new Form(\"PaginatorForm\");\n-\n-        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n-                prefMan.getPaginatorChoices());\n-\n-        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS,\n-                        String.valueOf(paginatorRows));\n-\n-                table = Tasks.updateTaskTable(\n-                        columns,\n-                        new TasksProvider<SyncTaskTO>(restClient, paginatorRows, getId(), SyncTaskTO.class),\n-                        container,\n-                        table == null ? 0 : (int) table.getCurrentPage(),\n-                        pageRef,\n-                        restClient);\n-\n-                target.add(container);\n-            }\n-        });\n-\n-        paginatorForm.add(rowsChooser);\n-        add(paginatorForm);\n-\n-        // create new user\n-        AjaxLink createLink = new ClearIndicatingAjaxLink(\"createLink\", pageRef) {\n-\n-            private static final long serialVersionUID = -7978723352517770644L;\n-\n-            @Override\n-            protected void onClickInternal(final AjaxRequestTarget target) {\n-                window.setPageCreator(new ModalWindow.PageCreator() {\n-\n-                    private static final long serialVersionUID = -7834632442532690940L;\n-\n-                    @Override\n-                    public Page createPage() {\n-                        return new SyncTaskModalPage(window, new SyncTaskTO(), pageRef);\n-                    }\n-                });\n-\n-                window.show(target);\n-            }\n-        };\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(\n-                createLink, RENDER, xmlRolesReader.getAllAllowedRoles(TASKS, \"create\"));\n-\n-        add(createLink);\n+        return columns;\n     }\n \n     @Override"}]}