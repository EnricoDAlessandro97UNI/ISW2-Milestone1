{"sha":"5b42ee2cf1e6489193876b1fd26205a571f733fc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjViNDJlZTJjZjFlNjQ4OTE5Mzg3NmIxZmQyNjIwNWE1NzFmNzMzZmM=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-02-28T15:36:04Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-02-28T15:36:04Z"},"message":"SYNCOPE-10 #resolve #time 4h\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1294694 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"33b6a2e3faceaab6a094d3ce84e57118f90a86ca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/33b6a2e3faceaab6a094d3ce84e57118f90a86ca"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5b42ee2cf1e6489193876b1fd26205a571f733fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b42ee2cf1e6489193876b1fd26205a571f733fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5b42ee2cf1e6489193876b1fd26205a571f733fc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5b42ee2cf1e6489193876b1fd26205a571f733fc/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"88959dace1cf2199a3e87ca61259f5e78af07118","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88959dace1cf2199a3e87ca61259f5e78af07118","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/88959dace1cf2199a3e87ca61259f5e78af07118"}],"stats":{"total":224,"additions":191,"deletions":33},"files":[{"sha":"4380c5c9728472a4f72dc216701fef31bc26ef02","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":39,"deletions":26,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=5b42ee2cf1e6489193876b1fd26205a571f733fc","patch":"@@ -78,11 +78,11 @@ public class ConnectorFacadeProxy {\n     private final ConnectorFacade connector;\n \n     /**\n-     * Set of configure connecto instance capabilities.\n+     * Active connecto instance.\n      *\n      * @see org.syncope.core.persistence.beans.ConnInstance\n      */\n-    private final Set<ConnectorCapability> capabitilies;\n+    private final ConnInstance activeConnInstance;\n \n     /**\n      * Use the passed connector instance to build a ConnectorFacade that will be\n@@ -102,6 +102,8 @@ public ConnectorFacadeProxy(\n             final ConnBundleManager connBundleManager)\n             throws NotFoundException {\n \n+        this.activeConnInstance = connInstance;\n+\n         // specify a connector.\n         ConnectorKey key = new ConnectorKey(\n                 connInstance.getBundleName(),\n@@ -248,8 +250,6 @@ public ConnectorFacadeProxy(\n \n         // Make sure we have set up the Configuration properly\n         connector.validate();\n-\n-        this.capabitilies = connInstance.getCapabilities();\n     }\n \n     /**\n@@ -273,9 +273,9 @@ public Uid create(\n         Uid result = null;\n \n         if (propagationMode == PropagationMode.ONE_PHASE\n-                ? capabitilies.contains(\n+                ? activeConnInstance.getCapabilities().contains(\n                 ConnectorCapability.ONE_PHASE_CREATE)\n-                : capabitilies.contains(\n+                : activeConnInstance.getCapabilities().contains(\n                 ConnectorCapability.TWO_PHASES_CREATE)) {\n \n             propagationAttempted.add(\"create\");\n@@ -284,7 +284,7 @@ public Uid create(\n         } else {\n             LOG.info(\"Create was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\",\n-                    capabitilies);\n+                    activeConnInstance.getCapabilities());\n         }\n \n         return result;\n@@ -312,9 +312,9 @@ public Uid update(final PropagationMode propagationMode,\n         Uid result = null;\n \n         if (propagationMode == PropagationMode.ONE_PHASE\n-                ? capabitilies.contains(\n+                ? activeConnInstance.getCapabilities().contains(\n                 ConnectorCapability.ONE_PHASE_UPDATE)\n-                : capabitilies.contains(\n+                : activeConnInstance.getCapabilities().contains(\n                 ConnectorCapability.TWO_PHASES_UPDATE)) {\n \n             propagationAttempted.add(\"update\");\n@@ -324,7 +324,7 @@ public Uid update(final PropagationMode propagationMode,\n         } else {\n             LOG.info(\"Update for {} was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\",\n-                    uid.getUidValue(), capabitilies);\n+                    uid.getUidValue(), activeConnInstance.getCapabilities());\n         }\n \n         return result;\n@@ -347,9 +347,9 @@ public void delete(final PropagationMode propagationMode,\n             final Set<String> propagationAttempted) {\n \n         if (propagationMode == PropagationMode.ONE_PHASE\n-                ? capabitilies.contains(\n+                ? activeConnInstance.getCapabilities().contains(\n                 ConnectorCapability.ONE_PHASE_DELETE)\n-                : capabitilies.contains(\n+                : activeConnInstance.getCapabilities().contains(\n                 ConnectorCapability.TWO_PHASES_DELETE)) {\n \n             propagationAttempted.add(\"delete\");\n@@ -358,7 +358,7 @@ public void delete(final PropagationMode propagationMode,\n         } else {\n             LOG.info(\"Delete for {} was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\",\n-                    uid.getUidValue(), capabitilies);\n+                    uid.getUidValue(), activeConnInstance.getCapabilities());\n         }\n     }\n \n@@ -370,12 +370,13 @@ public void delete(final PropagationMode propagationMode,\n      */\n     public void sync(final SyncToken token, final SyncResultsHandler handler) {\n \n-        if (capabitilies.contains(ConnectorCapability.SYNC)) {\n+        if (activeConnInstance.getCapabilities().contains(\n+                ConnectorCapability.SYNC)) {\n             connector.sync(ObjectClass.ACCOUNT, token, handler, null);\n         } else {\n             LOG.info(\"Sync was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\",\n-                    capabitilies);\n+                    activeConnInstance.getCapabilities());\n         }\n     }\n \n@@ -387,12 +388,13 @@ public void sync(final SyncToken token, final SyncResultsHandler handler) {\n     public SyncToken getLatestSyncToken() {\n         SyncToken result = null;\n \n-        if (capabitilies.contains(ConnectorCapability.SYNC)) {\n+        if (activeConnInstance.getCapabilities().contains(\n+                ConnectorCapability.SYNC)) {\n             result = connector.getLatestSyncToken(ObjectClass.ACCOUNT);\n         } else {\n             LOG.info(\"getLatestSyncToken was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\",\n-                    capabitilies);\n+                    activeConnInstance.getCapabilities());\n         }\n \n         return result;\n@@ -434,17 +436,18 @@ public ConnectorObject getObject(\n \n         ConnectorObject result = null;\n \n-        if (capabitilies.contains(ConnectorCapability.SEARCH)) {\n+        if (activeConnInstance.getCapabilities().contains(\n+                ConnectorCapability.SEARCH)) {\n             if (operationType == null) {\n                 result = connector.getObject(objectClass, uid, options);\n             } else {\n                 switch (operationType) {\n                     case CREATE:\n                         if (propagationMode == null\n                                 || (propagationMode == PropagationMode.ONE_PHASE\n-                                ? capabitilies.contains(\n+                                ? activeConnInstance.getCapabilities().contains(\n                                 ConnectorCapability.ONE_PHASE_CREATE)\n-                                : capabitilies.contains(\n+                                : activeConnInstance.getCapabilities().contains(\n                                 ConnectorCapability.TWO_PHASES_CREATE))) {\n \n                             result = connector.getObject(\n@@ -454,9 +457,9 @@ public ConnectorObject getObject(\n                     case UPDATE:\n                         if (propagationMode == null\n                                 || (propagationMode == PropagationMode.ONE_PHASE\n-                                ? capabitilies.contains(\n+                                ? activeConnInstance.getCapabilities().contains(\n                                 ConnectorCapability.ONE_PHASE_UPDATE)\n-                                : capabitilies.contains(\n+                                : activeConnInstance.getCapabilities().contains(\n                                 ConnectorCapability.TWO_PHASES_UPDATE))) {\n \n                             result = connector.getObject(\n@@ -470,7 +473,7 @@ public ConnectorObject getObject(\n         } else {\n             LOG.info(\"Search was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\",\n-                    capabitilies);\n+                    activeConnInstance.getCapabilities());\n         }\n \n         return result;\n@@ -489,7 +492,8 @@ public void getAllObjects(\n             final SyncResultsHandler handler,\n             final OperationOptions options) {\n \n-        if (capabitilies.contains(ConnectorCapability.SEARCH)) {\n+        if (activeConnInstance.getCapabilities().contains(\n+                ConnectorCapability.SEARCH)) {\n             connector.search(objectClass, null,\n                     new ResultsHandler() {\n \n@@ -508,7 +512,7 @@ public boolean handle(final ConnectorObject obj) {\n         } else {\n             LOG.info(\"Search was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\",\n-                    capabitilies);\n+                    activeConnInstance.getCapabilities());\n         }\n     }\n \n@@ -623,6 +627,15 @@ public void test() {\n     public String toString() {\n         return \"ConnectorFacadeProxy{\"\n                 + \"connector=\" + connector\n-                + \"capabitilies=\" + capabitilies + '}';\n+                + \"capabitilies=\" + activeConnInstance.getCapabilities() + '}';\n+    }\n+\n+    /**\n+     * Getter for active connector instance.\n+     *\n+     * @return active connector instance.\n+     */\n+    public ConnInstance getActiveConnInstance() {\n+        return activeConnInstance;\n     }\n }"},{"sha":"22d79f19dbfd76e1924fe684cc8c8b4e925a2e2b","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=5b42ee2cf1e6489193876b1fd26205a571f733fc","patch":"@@ -53,6 +53,7 @@\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ConnInstanceDataBinder;\n import org.syncope.core.util.ConnBundleManager;\n@@ -64,6 +65,9 @@\n @RequestMapping(\"/connector\")\n public class ConnInstanceController extends AbstractController {\n \n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n@@ -427,4 +431,24 @@ private Set<ConnConfProperty> mergeConnConfProperties(\n \n         return conf;\n     }\n+\n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{resourceName}/connectorBean\")\n+    @Transactional(readOnly = true)\n+    public ConnInstanceTO readConnectorBean(\n+            @PathVariable(\"resourceName\") String resourceName)\n+            throws NotFoundException {\n+\n+        ExternalResource resource = resourceDAO.find(resourceName);\n+\n+        if (resource == null) {\n+            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+        }\n+\n+        final ConnectorFacadeProxy connector = connLoader.getConnector(resource);\n+\n+        return binder.getConnInstanceTO(connector.getActiveConnInstance());\n+    }\n }"},{"sha":"a292d6ef3e93f8b05c81fa02c39de048c487038e","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=5b42ee2cf1e6489193876b1fd26205a571f733fc","patch":"@@ -38,14 +38,17 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n@@ -60,6 +63,9 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -195,10 +201,20 @@ public ResourceTO read(final HttpServletResponse response,\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public List<ResourceTO> list(HttpServletResponse response)\n+    public List<ResourceTO> list(\n+            @RequestParam(required = false, value = \"connInstanceId\")\n+            final Long connInstanceId)\n             throws NotFoundException {\n \n-        List<ExternalResource> resources = resourceDAO.findAll();\n+        final List<ExternalResource> resources;\n+\n+        if (connInstanceId == null) {\n+            resources = resourceDAO.findAll();\n+        } else {\n+            ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n+            resources = connInstance.getResources();\n+        }\n+\n         if (resources == null) {\n             LOG.error(\"No resources found\");\n             throw new NotFoundException(\"No resources found\");"},{"sha":"32169dfe7b8021e149ee345de9433a33c127af80","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=5b42ee2cf1e6489193876b1fd26205a571f733fc","patch":"@@ -87,6 +87,10 @@ public ExternalResource update(final ExternalResource resource,\n             ConnInstance connector =\n                     connectorInstanceDAO.find(resourceTO.getConnectorId());\n             resource.setConnector(connector);\n+\n+            if (!connector.getResources().contains(resource)) {\n+                connector.addResource(resource);\n+            }\n         }\n \n         resource.setForceMandatoryConstraint("},{"sha":"f1e8152b1efbc0fd61508f65997451a58001f38b","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":95,"deletions":5,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=5b42ee2cf1e6489193876b1fd26205a571f733fc","patch":"@@ -18,11 +18,7 @@\n  */\n package org.syncope.core.rest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n import java.io.IOException;\n import java.io.InputStream;\n@@ -42,6 +38,7 @@\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n+import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.types.ConnConfPropSchema;\n import org.syncope.types.ConnConfProperty;\n@@ -250,6 +247,99 @@ public void update() {\n         assertEquals(actual.getVersion(), connectorTO.getVersion());\n     }\n \n+    @Test\n+    public void issueSYNCOPE10() {\n+        // ----------------------------------\n+        // Copy resource and connector in order to create new objects.\n+        // ----------------------------------\n+        // Retrieve a connector instance template.\n+        ConnInstanceTO connInstanceTO = restTemplate.getForObject(\n+                BASE_URL + \"connector/read/{connectorId}\",\n+                ConnInstanceTO.class, 103L);\n+\n+        assertNotNull(connInstanceTO);\n+\n+        // check for resource\n+        List<ResourceTO> resources = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"resource/list.json?connInstanceId=103\",\n+                ResourceTO[].class));\n+\n+        assertEquals(1, resources.size());\n+\n+        // Retrieve a resource TO template.\n+        ResourceTO resourceTO = resources.get(0);\n+\n+        // Make it new.\n+        resourceTO.setName(\"newAbout103\");\n+\n+        // Make it new.\n+        connInstanceTO.setId(0);\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Create a new connector instance.\n+        // ----------------------------------\n+        connInstanceTO = restTemplate.postForObject(\n+                BASE_URL + \"connector/create.json\",\n+                connInstanceTO, ConnInstanceTO.class);\n+\n+        assertNotNull(connInstanceTO);\n+        assertTrue(connInstanceTO.getCapabilities().isEmpty());\n+\n+        long connId = connInstanceTO.getId();\n+\n+        // Link resourceTO to the new connector instance.\n+        resourceTO.setConnectorId(connId);\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for connector instance update after resource creation.\n+        // ----------------------------------\n+        resourceTO = restTemplate.postForObject(\n+                BASE_URL + \"resource/create.json\",\n+                resourceTO, ResourceTO.class);\n+\n+        assertNotNull(resourceTO);\n+\n+        resources = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"resource/list.json?connInstanceId=\" + connId,\n+                ResourceTO[].class));\n+\n+        assertEquals(1, resources.size());\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for spring bean.\n+        // ----------------------------------\n+        ConnInstanceTO connInstanceBean = restTemplate.getForObject(\n+                BASE_URL + \"connector/{resourceName}/connectorBean\",\n+                ConnInstanceTO.class, resourceTO.getName());\n+\n+        assertNotNull(connInstanceBean);\n+        assertTrue(connInstanceBean.getCapabilities().isEmpty());\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for spring bean update after connector instance update.\n+        // ----------------------------------\n+        connInstanceTO.addCapability(ConnectorCapability.SEARCH);\n+\n+        ConnInstanceTO actual = (ConnInstanceTO) restTemplate.postForObject(\n+                BASE_URL + \"connector/update.json\",\n+                connInstanceTO, ConnInstanceTO.class);\n+\n+        assertNotNull(actual);\n+        assertFalse(connInstanceTO.getCapabilities().isEmpty());\n+\n+        // check for spring bean update\n+        connInstanceBean = restTemplate.getForObject(\n+                BASE_URL + \"connector/{resourceName}/connectorBean\",\n+                ConnInstanceTO.class, resourceTO.getName());\n+\n+        assertFalse(connInstanceBean.getCapabilities().isEmpty());\n+        // ----------------------------------\n+    }\n+\n     @Test\n     public void deleteWithException() {\n         try {"},{"sha":"6015ba2bf339e249c5e62e13bf6930ed9eab629e","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5b42ee2cf1e6489193876b1fd26205a571f733fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=5b42ee2cf1e6489193876b1fd26205a571f733fc","patch":"@@ -397,6 +397,17 @@ public void list() {\n         }\n     }\n \n+    @Test\n+    public void listByType() {\n+        List<ResourceTO> actuals = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"resource/list.json?connInstanceId=105\",\n+                ResourceTO[].class));\n+\n+        assertNotNull(actuals);\n+        assertEquals(1, actuals.size());\n+        assertNotNull(actuals.get(0));\n+    }\n+\n     @Test\n     public void read() {\n         ResourceTO actual = restTemplate.getForObject("}]}