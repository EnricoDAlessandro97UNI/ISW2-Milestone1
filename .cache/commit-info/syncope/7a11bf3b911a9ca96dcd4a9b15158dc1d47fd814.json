{"sha":"7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdhMTFiZjNiOTExYTljYTk2ZGNkNGE5YjE1MTU4ZGMxZDQ3ZmQ4MTQ=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-23T10:11:56Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-23T10:11:56Z"},"message":"refactoring of the report stack , SYNCOPE-158","tree":{"sha":"49af717c79df9966390a64ae4b5034bcd5a9a60d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/49af717c79df9966390a64ae4b5034bcd5a9a60d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"73f73f20692910e6f0c2acf27d5d8bd7982e6b6c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c"}],"stats":{"total":1352,"additions":728,"deletions":624},"files":[{"sha":"7c1755093731bd4e34bd01ba017b8fb7bed29b0e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -18,10 +18,14 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.view.Messages;\n \n public abstract class CommonsResultManager {\n \n+    public void managerNumberFormatException(final String what, final String key) {\n+        Messages.printIdNotNumberDeletedMessage(what, key);\n+    }\n+\n     public void deletedMessage(final String what, final String key) {\n         Messages.printDeletedMessage(what, key);\n     }"},{"sha":"30be7fbf217e682953adb612c7919f4ba1a707ef","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"removed","additions":0,"deletions":352,"changes":352,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=73f73f20692910e6f0c2acf27d5d8bd7982e6b6c","patch":"@@ -1,352 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.io.IOException;\n-import java.io.SequenceInputStream;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n-import org.apache.syncope.client.cli.util.XMLUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n-import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.types.JobStatusType;\n-import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.rest.api.service.ReportService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.xml.sax.SAXException;\n-\n-@Command(name = \"report\")\n-public class ReportCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ReportCommand.class);\n-\n-    private static final String HELP_MESSAGE = \"Usage: report [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    --help \\n\"\n-            + \"    --list \\n\"\n-            + \"    --read \\n\"\n-            + \"       Syntax: --read {REPORT-ID} {REPORT-ID} [...] \\n\"\n-            + \"    --delete \\n\"\n-            + \"       Syntax: --delete {REPORT-ID} {REPORT-ID} [...]\\n\"\n-            + \"    --execute \\n\"\n-            + \"       Syntax: --execute {REPORT-ID} \\n\"\n-            + \"    --read-execution \\n\"\n-            + \"       Syntax: --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n-            + \"    --delete-execution \\n\"\n-            + \"       Syntax: --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n-            + \"    --export-execution-result \\n\"\n-            + \"       Syntax: --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n-            + \"          Format: CSV / HTML / PDF / XML / RTF\"\n-            + \"    --reportlet-class\";\n-    \n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        String[] parameters = input.getParameters();\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final ReportService reportService = SyncopeServices.get(ReportService.class);\n-        switch (Options.fromName(input.getOption())) {\n-            case LIST:\n-                try {\n-                    for (final ReportTO reportTO : reportService.list()) {\n-                        System.out.println(reportTO);\n-                    }\n-                } catch (final SyncopeClientException ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                }\n-                break;\n-            case LIST_JOBS:\n-                try {\n-                    for (final JobStatusType jobStatusType : JobStatusType.values()) {\n-                        System.out.println(\"Report execution for \" + jobStatusType);\n-                        final List<ReportExecTO> reportExecTOs = reportService.listJobs(jobStatusType);\n-                        for (final ReportExecTO reportExecTO : reportExecTOs) {\n-                            System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n-                            System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n-                            System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n-                            System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n-                            System.out.println();\n-                        }\n-                    }\n-                } catch (final SyncopeClientException ex) {\n-                    Messages.printMessage(ex.getMessage());\n-                }\n-                break;\n-            case READ:\n-                final String readErrorMessage = \"report --read {REPORT-ID} {REPORT-ID} [...]\";\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            System.out.println(reportService.read(Long.valueOf(parameter)));\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Report\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readErrorMessage);\n-                }\n-                break;\n-            case DELETE:\n-                final String deleteErrorMessage = \"report --delete {REPORT-ID} {REPORT-ID} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            reportService.delete(Long.valueOf(parameter));\n-                            Messages.printDeletedMessage(\"Report\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Report\", parameter);\n-                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                Messages.printMessage(\"You cannot delete report \" + parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteErrorMessage);\n-                }\n-                break;\n-            case EXECUTE:\n-                final String executeErrorMessage = \"report --execute {REPORT-ID}\";\n-\n-                if (parameters.length == 1) {\n-\n-                    try {\n-                        final Long reportIdToExecute = Long.valueOf(parameters[0]);\n-                        reportService.execute(reportIdToExecute);\n-                        final List<ReportExecTO> executionList\n-                                = reportService.read(reportIdToExecute).getExecutions();\n-                        final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n-                        System.out.println(\" - Report execution id: \" + lastExecution.getKey());\n-                        System.out.println(\" - Report execution status: \" + lastExecution.getStatus());\n-                        System.out.println(\" - Report execution start date: \" + lastExecution.getStartDate());\n-                    } catch (final WebServiceException | SyncopeClientException ex) {\n-                        System.out.println(\"Error:\");\n-                        if (ex.getMessage().startsWith(\"NotFound\")) {\n-                            Messages.printNofFoundMessage(\"Report\", parameters[0]);\n-                        } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                            Messages.printMessage(\"You cannot delete report \" + parameters[0]);\n-                        } else {\n-                            Messages.printMessage(ex.getMessage());\n-                        }\n-                    } catch (final NumberFormatException ex) {\n-                        Messages.printIdNotNumberDeletedMessage(\"report\", parameters[0]);\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(executeErrorMessage);\n-                }\n-                break;\n-            case READ_EXECUTION:\n-                final String readExecutionErrorMessage = \"report --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-\n-                        try {\n-                            ReportExecTO reportExecTO = reportService.readExecution(Long.valueOf(parameter));\n-                            System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n-                            System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n-                            System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n-                            System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            System.out.println(\"Error:\");\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Report\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readExecutionErrorMessage);\n-                }\n-                break;\n-            case DELETE_EXECUTION:\n-                final String deleteExecutionErrorMessage\n-                        = \"report --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-\n-                        try {\n-                            reportService.deleteExecution(Long.valueOf(parameter));\n-                            Messages.printDeletedMessage(\"Report execution\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Report\", parameter);\n-                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                System.out.println(\" - You cannot delete report \" + parameter);\n-                            } else {\n-                                System.out.println(ex.getMessage());\n-                            }\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteExecutionErrorMessage);\n-                }\n-                break;\n-            case EXPORT_EXECUTION_RESULT:\n-                final String exportExecutionErrorMessage\n-                        = \"report --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n-                        + \"          Format: CSV / HTML / PDF / XML / RTF\";\n-\n-                if (parameters.length >= 2) {\n-                    parameters = Arrays.copyOf(parameters, parameters.length - 1);\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            final ReportExecExportFormat format = ReportExecExportFormat.valueOf(input.lastParameter());\n-                            final Long exportId = Long.valueOf(parameter);\n-                            final SequenceInputStream report = (SequenceInputStream) reportService.\n-                                    exportExecutionResult(exportId, format).getEntity();\n-                            switch (format) {\n-                                case XML:\n-                                    final String xmlFinalName = \"export_\" + exportId + \".xml\";\n-                                    XMLUtils.createXMLFile(report, xmlFinalName);\n-                                    Messages.printMessage(xmlFinalName + \" successfully created\");\n-                                    break;\n-                                case CSV:\n-                                    Messages.printMessage(format + \" doesn't supported\");\n-                                    break;\n-                                case PDF:\n-                                    Messages.printMessage(format + \" doesn't supported\");\n-                                    break;\n-                                case HTML:\n-                                    Messages.printMessage(format + \" doesn't supported\");\n-                                    break;\n-                                case RTF:\n-                                    Messages.printMessage(format + \" doesn't supported\");\n-                                    break;\n-                                default:\n-                                    Messages.printMessage(format + \" doesn't supported\");\n-                                    break;\n-                            }\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Report\", parameter);\n-                            } else {\n-                                System.out.println(ex.getMessage());\n-                            }\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n-                        } catch (IOException | ParserConfigurationException | SAXException | TransformerException e) {\n-                            System.out.println(\" - Error creating \" + \"export_\" + parameter + \" \" + e.getMessage());\n-                        } catch (final IllegalArgumentException ex) {\n-                            Messages.printTypeNotValidMessage(\n-                                    \"format\", input.firstParameter(),\n-                                    CommandUtils.fromEnumToArray(ReportExecExportFormat.class));\n-                        }\n-                        break;\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(exportExecutionErrorMessage);\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(HELP_MESSAGE);\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n-        }\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return HELP_MESSAGE;\n-    }\n-\n-    private enum Options {\n-\n-        HELP(\"--help\"),\n-        LIST(\"--list\"),\n-        LIST_JOBS(\"--list-jobs\"),\n-        READ(\"--read\"),\n-        DELETE(\"--delete\"),\n-        EXECUTE(\"--execute\"),\n-        READ_EXECUTION(\"--read-execution\"),\n-        DELETE_EXECUTION(\"--delete-execution\"),\n-        EXPORT_EXECUTION_RESULT(\"--export-execution-result\");\n-\n-        private final String optionName;\n-\n-        Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-}"},{"sha":"e4073c054b76332993a245870e913bde5bd39b7c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationResultManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -21,7 +21,7 @@\n import java.util.Arrays;\n import java.util.LinkedList;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n-import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.client.cli.view.Table;\n import org.apache.syncope.common.lib.to.AttrTO;\n \n public class ConfigurationResultManager extends CommonsResultManager {"},{"sha":"a693aff882678685746ba41e473e57a6f8576321","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -21,7 +21,7 @@\n import java.util.Arrays;\n import java.util.LinkedList;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n-import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.client.cli.view.Table;\n import org.apache.syncope.common.lib.to.LoggerTO;\n \n public class LoggerResultManager extends CommonsResultManager {"},{"sha":"2e0e5cd3d01d10a42bc61b384fda1907c1c96698","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationDelete.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -20,7 +20,7 @@\n \n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.view.Messages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n \n public class NotificationDelete extends AbstractNotificationCommand {"},{"sha":"7d140a38d63092ee6c07fd57764bca9877eab102","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -81,7 +81,7 @@ public void fromList(final PolicyType policyType, final LinkedList<AbstractPolic\n     }\n \n     public void printAccountPolicy(final AccountPolicyTO policyTO) {\n-        System.out.println(\" > KEY: \" + String.valueOf(policyTO.getKey()));\n+        System.out.println(\" > KEY: \" + policyTO.getKey());\n         System.out.println(\"    type: \" + policyTO.getType().name());\n         System.out.println(\"    description: \" + policyTO.getDescription());\n         System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n@@ -93,7 +93,7 @@ public void printAccountPolicy(final AccountPolicyTO policyTO) {\n     }\n \n     public void printPasswordPolicy(final PasswordPolicyTO policyTO) {\n-        System.out.println(\" > KEY: \" + String.valueOf(policyTO.getKey()));\n+        System.out.println(\" > KEY: \" + policyTO.getKey());\n         System.out.println(\"    type: \" + policyTO.getType().name());\n         System.out.println(\"    description: \" + policyTO.getDescription());\n         System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n@@ -105,7 +105,7 @@ public void printPasswordPolicy(final PasswordPolicyTO policyTO) {\n     }\n \n     public void printSyncPolicy(final SyncPolicyTO policyTO) {\n-        System.out.println(\" > KEY: \" + String.valueOf(policyTO.getKey()));\n+        System.out.println(\" > KEY: \" + policyTO.getKey());\n         System.out.println(\"    type: \" + policyTO.getType().name());\n         System.out.println(\"    description: \" + policyTO.getDescription());\n         System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());"},{"sha":"e4c239409f6aba9eabdfa7f4b6c5bbb71be56593","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/AbstractReportCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FAbstractReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FAbstractReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FAbstractReportCommand.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+\n+public abstract class AbstractReportCommand {\n+\n+    protected final ReportService reportService = SyncopeServices.get(ReportService.class);\n+\n+    protected final ReportResultManager reportResultManager = new ReportResultManager();\n+\n+}"},{"sha":"1d64bf13778adc393d8b76784fff10a86a539dc7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportCommand.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportCommand.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"report\")\n+public class ReportCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: report [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {REPORT-ID} {REPORT-ID} [...] \\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {REPORT-ID} {REPORT-ID} [...]\\n\"\n+            + \"    --execute \\n\"\n+            + \"       Syntax: --execute {REPORT-ID} \\n\"\n+            + \"    --read-execution \\n\"\n+            + \"       Syntax: --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n+            + \"    --delete-execution \\n\"\n+            + \"       Syntax: --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n+            + \"    --export-execution-result \\n\"\n+            + \"       Syntax: --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n+            + \"          Format: CSV / HTML / PDF / XML / RTF\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                new ReportList().list();\n+                break;\n+            case LIST_JOBS:\n+                new ReportListJobs().list();\n+                break;\n+            case READ:\n+                new ReportRead(input).read();\n+                break;\n+            case DELETE:\n+                new ReportDelete(input).delete();\n+                break;\n+            case EXECUTE:\n+                new ReportExecute(input).execute();\n+                break;\n+            case READ_EXECUTION:\n+                new ReportReadExecution(input).read();\n+                break;\n+            case DELETE_EXECUTION:\n+                new ReportDeleteExecution(input).delete();\n+                break;\n+            case EXPORT_EXECUTION_RESULT:\n+                new ReportExportExecution(input).export();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new ReportResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        LIST_JOBS(\"--list-jobs\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\"),\n+        EXECUTE(\"--execute\"),\n+        READ_EXECUTION(\"--read-execution\"),\n+        DELETE_EXECUTION(\"--delete-execution\"),\n+        EXPORT_EXECUTION_RESULT(\"--export-execution-result\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"012d04f2e2f714c3dedcaebe1864d7b1465f86cf","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportDelete.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDelete.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class ReportDelete extends AbstractReportCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"report --delete {REPORT-ID} {REPORT-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public ReportDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    reportService.delete(Long.valueOf(parameter));\n+                    reportResultManager.deletedMessage(\"Report\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        reportResultManager.notFoundError(\"Report\", parameter);\n+                    } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                        reportResultManager.generic(\"You cannot delete report \" + parameter);\n+                    } else {\n+                        reportResultManager.generic(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    reportResultManager.managerNumberFormatException(\"report\", parameter);\n+                }\n+            }\n+        } else {\n+            reportResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"4ab53fa9d9f05eb20bc66d928d5aad906e8b7c14","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportDeleteExecution.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDeleteExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDeleteExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportDeleteExecution.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class ReportDeleteExecution extends AbstractReportCommand {\n+\n+    private static final String DELETE_EXECUTION_HELP_MESSAGE\n+            = \"report --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public ReportDeleteExecution(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+\n+                try {\n+                    reportService.deleteExecution(Long.valueOf(parameter));\n+                    reportResultManager.deletedMessage(\"Report execution\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        reportResultManager.notFoundError(\"Report\", parameter);\n+                    } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                        reportResultManager.generic(\"You cannot delete report \" + parameter);\n+                    } else {\n+                        reportResultManager.generic(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    reportResultManager.managerNumberFormatException(\"report\", parameter);\n+                }\n+            }\n+        } else {\n+            reportResultManager.commandOptionError(DELETE_EXECUTION_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"311544d6ed16c5309cd51850a718e2b571489f46","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportExecute.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExecute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExecute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExecute.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+\n+public class ReportExecute extends AbstractReportCommand {\n+\n+    private static final String EXECUTE_HELP_MESSAGE = \"report --execute {REPORT-ID}\";\n+\n+    private final Input input;\n+\n+    public ReportExecute(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void execute() {\n+        if (input.parameterNumber() == 1) {\n+\n+            try {\n+                final Long reportIdToExecute = Long.valueOf(input.firstParameter());\n+                reportService.execute(reportIdToExecute);\n+                final List<ReportExecTO> executionList\n+                        = reportService.read(reportIdToExecute).getExecutions();\n+                final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n+                reportResultManager.printReportExecution(Arrays.asList(lastExecution));\n+            } catch (final WebServiceException | SyncopeClientException ex) {\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    reportResultManager.notFoundError(\"Report\", input.firstParameter());\n+                } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                    reportResultManager.generic(\"You cannot delete report \" + input.firstParameter());\n+                } else {\n+                    reportResultManager.generic(ex.getMessage());\n+                }\n+            } catch (final NumberFormatException ex) {\n+                reportResultManager.managerNumberFormatException(\"report\", input.firstParameter());\n+            }\n+        } else {\n+            reportResultManager.commandOptionError(EXECUTE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"c55d339772ded17fd9ce9fb7506f4792585d8723","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportExportExecution.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExportExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExportExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExportExecution.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.util.Arrays;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.client.cli.util.XMLUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.xml.sax.SAXException;\n+\n+public class ReportExportExecution extends AbstractReportCommand {\n+\n+    private static final String EXPORT_EXECUTION_HELP_MESSAGE\n+            = \"report --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n+            + \"          Format: CSV / HTML / PDF / XML / RTF\";\n+\n+    private final Input input;\n+\n+    public ReportExportExecution(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void export() {\n+        if (input.parameterNumber() >= 2) {\n+            final String[] parameters = Arrays.copyOf(input.getParameters(), input.parameterNumber() - 1);\n+            for (final String parameter : parameters) {\n+                try {\n+                    final ReportExecExportFormat format = ReportExecExportFormat.valueOf(input.lastParameter());\n+                    final Long exportId = Long.valueOf(parameter);\n+                    final SequenceInputStream report = (SequenceInputStream) reportService.\n+                            exportExecutionResult(exportId, format).getEntity();\n+                    switch (format) {\n+                        case XML:\n+                            final String xmlFinalName = \"export_\" + exportId + \".xml\";\n+                            XMLUtils.createXMLFile(report, xmlFinalName);\n+                            reportResultManager.generic(xmlFinalName + \" successfully created\");\n+                            break;\n+                        case CSV:\n+                            reportResultManager.generic(format + \" doesn't supported\");\n+                            break;\n+                        case PDF:\n+                            reportResultManager.generic(format + \" doesn't supported\");\n+                            break;\n+                        case HTML:\n+                            reportResultManager.generic(format + \" doesn't supported\");\n+                            break;\n+                        case RTF:\n+                            reportResultManager.generic(format + \" doesn't supported\");\n+                            break;\n+                        default:\n+                            reportResultManager.generic(format + \" doesn't supported\");\n+                            break;\n+                    }\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    ex.printStackTrace();\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        reportResultManager.notFoundError(\"Report\", parameter);\n+                    } else {\n+                        reportResultManager.generic(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    reportResultManager.managerNumberFormatException(\"report\", parameter);\n+                } catch (IOException | ParserConfigurationException | SAXException | TransformerException e) {\n+                    reportResultManager.generic(\" - Error creating \" + \"export_\" + parameter + \" \" + e.getMessage());\n+                } catch (final IllegalArgumentException ex) {\n+                    reportResultManager.typeNotValidError(\n+                            \"format\", input.firstParameter(),\n+                            CommandUtils.fromEnumToArray(ReportExecExportFormat.class));\n+                }\n+                break;\n+            }\n+        } else {\n+            reportResultManager.commandOptionError(EXPORT_EXECUTION_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"d43f21fdb55f27ae41c12dd926925edf8cf08097","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportList.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportList.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class ReportList extends AbstractReportCommand {\n+\n+    public void list() {\n+        try {\n+            reportResultManager.fromList(reportService.list());\n+        } catch (final SyncopeClientException ex) {\n+            reportResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+}"},{"sha":"9bc688eff0110a9c9eea1a031ad652bd18115c08","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportListJobs.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportListJobs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportListJobs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportListJobs.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n+\n+public class ReportListJobs extends AbstractReportCommand {\n+\n+    public void list() {\n+        try {\n+            for (final JobStatusType jobStatusType : JobStatusType.values()) {\n+                reportResultManager.printReportExecution(reportService.listJobs(jobStatusType));\n+            }\n+        } catch (final SyncopeClientException ex) {\n+            reportResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"dd9760e46806be67ca6ba1ca654b32edbafac4ce","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportRead.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportRead.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+\n+public class ReportRead extends AbstractReportCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"report --read {REPORT-ID} {REPORT-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public ReportRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            final List<ReportTO> reportTOs = new ArrayList<>();\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    reportTOs.add(reportService.read(Long.valueOf(parameter)));\n+                } catch (final NumberFormatException ex) {\n+                    reportResultManager.managerNumberFormatException(\"report\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        reportResultManager.notFoundError(\"Report\", parameter);\n+                    } else {\n+                        reportResultManager.generic(ex.getMessage());\n+                    }\n+                }\n+            }\n+            reportResultManager.fromList(reportTOs);\n+        } else {\n+            reportResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"95c61cd23752541587c2d14b7cc51e7de0bb0073","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportReadExecution.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportReadExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportReadExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportReadExecution.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+\n+public class ReportReadExecution extends AbstractReportCommand {\n+\n+    private static final String READ_EXECUTION_HELP_MESSAGE\n+            = \"report --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public ReportReadExecution(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            final List<ReportExecTO> reportExecTOs = new ArrayList<>();\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    reportExecTOs.add(reportService.readExecution(Long.valueOf(parameter)));\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    System.out.println(\"Error:\");\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        reportResultManager.notFoundError(\"Report\", parameter);\n+                    } else {\n+                        reportResultManager.generic(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    reportResultManager.managerNumberFormatException(\"report\", parameter);\n+                }\n+            }\n+            reportResultManager.printReportExecution(reportExecTOs);\n+        } else {\n+            reportResultManager.commandOptionError(READ_EXECUTION_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"cc1b41ad274aa03a03734a2520bd523391633a66","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportResultManager.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.report;\n+\n+import java.util.List;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+\n+public class ReportResultManager extends CommonsResultManager {\n+\n+    public void fromList(final List<ReportTO> reportTOs) {\n+        for (final ReportTO reportTO : reportTOs) {\n+            printReport(reportTO);\n+        }\n+    }\n+\n+    private void printReport(final ReportTO reportTO) {\n+        System.out.println(\" > REPORT ID: \" + reportTO.getKey());\n+        System.out.println(\"    type: \" + reportTO.getName());\n+        System.out.println(\"    type: \" + reportTO.getCronExpression());\n+        System.out.println(\"    type: \" + reportTO.getLatestExecStatus());\n+        System.out.println(\"    type: \" + reportTO.getLastExec());\n+        System.out.println(\"    type: \" + reportTO.getNextExec());\n+        System.out.println(\"    type: \" + reportTO.getStartDate());\n+        System.out.println(\"    type: \" + reportTO.getEndDate());\n+        System.out.println(\"    CONF:\");\n+        for (final AbstractReportletConf reportletConf : reportTO.getReportletConfs()) {\n+            printReportletConf(reportletConf);\n+        }\n+        System.out.println(\"    EXECUTION:\");\n+        printReportExecution(reportTO.getExecutions());\n+    }\n+\n+    private void printReportletConf(final AbstractReportletConf reportletConf) {\n+        if (reportletConf instanceof UserReportletConf) {\n+            final UserReportletConf userReportletConf = (UserReportletConf) reportletConf;\n+            System.out.println(\"       name: \" + userReportletConf.getName());\n+            System.out.println(\"       features: \" + userReportletConf.getFeatures());\n+            System.out.println(\"       plain attributes: \" + userReportletConf.getPlainAttrs());\n+            System.out.println(\"       derived attributes: \" + userReportletConf.getDerAttrs());\n+            System.out.println(\"       virtual attributes: \" + userReportletConf.getVirAttrs());\n+            System.out.println(\"       matching condition: \" + userReportletConf.getMatchingCond());\n+        }\n+    }\n+\n+    public void printReportExecution(final List<ReportExecTO> reportExecTOs) {\n+        for (final ReportExecTO reportExecTO : reportExecTOs) {\n+            System.out.println(\"       REPORT EXEC ID: \" + reportExecTO.getKey());\n+            System.out.println(\"       status: \" + reportExecTO.getStatus());\n+            System.out.println(\"       message: \" + reportExecTO.getMessage());\n+            System.out.println(\"       start date: \" + reportExecTO.getStartDate());\n+            System.out.println(\"       end date: \" + reportExecTO.getEndDate());\n+            System.out.println(\"       report id: \" + reportExecTO.getReport());\n+        }\n+    }\n+}"},{"sha":"5963eb85ab2070bef2281982a8a0feda593264de","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaResultManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -21,7 +21,7 @@\n import java.util.Arrays;\n import java.util.LinkedList;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n-import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.client.cli.view.Table;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;"},{"sha":"df5bbea592b3759959909c034a7f11ce6a6d242e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/TwoColumnTable.java","status":"removed","additions":0,"deletions":262,"changes":262,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java?ref=73f73f20692910e6f0c2acf27d5d8bd7982e6b6c","patch":"@@ -1,262 +0,0 @@\n-\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.messages;\n-\n-import java.util.Map;\n-\n-public class TwoColumnTable {\n-\n-    private static final int TABLE_BORDER = 1;\n-\n-    private static final int MIN_COLUMN_SPACE = 2;\n-\n-    private static final int MIN_COLUMN_SIZE = 5;\n-\n-    private int tableWidth;\n-\n-    private int firstColumntContentWidth;\n-\n-    private int secondColumntContentWidth;\n-\n-    private final String title;\n-\n-    private final String firstColumnHeader;\n-\n-    private int firstColumnMaxWidth;\n-\n-    private final String secondColumnHeader;\n-\n-    private int secondColumnMaxWidth;\n-\n-    public TwoColumnTable(final String title,\n-            final String firstColumnHeader,\n-            final int firstColumnMaxWidth,\n-            final String secondColumnHeader,\n-            final int secondColumnMaxWidth) {\n-\n-        this.firstColumnHeader = firstColumnHeader.toUpperCase();\n-\n-        if (firstColumnMaxWidth < MIN_COLUMN_SIZE) {\n-            this.firstColumnMaxWidth = MIN_COLUMN_SIZE;\n-        } else {\n-            this.firstColumnMaxWidth = firstColumnMaxWidth;\n-        }\n-\n-        this.secondColumnHeader = secondColumnHeader.toUpperCase();\n-\n-        if (secondColumnMaxWidth < MIN_COLUMN_SIZE) {\n-            this.secondColumnMaxWidth = MIN_COLUMN_SIZE;\n-        } else {\n-            this.secondColumnMaxWidth = secondColumnMaxWidth;\n-        }\n-\n-        tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + firstColumnMaxWidth + secondColumnMaxWidth;\n-\n-        if (title.length() > firstColumnMaxWidth + secondColumnMaxWidth) {\n-            tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + title.length();\n-        }\n-\n-        firstColumntContentWidth = (MIN_COLUMN_SPACE * 2) + firstColumnMaxWidth;\n-        secondColumntContentWidth = (MIN_COLUMN_SPACE * 2) + secondColumnMaxWidth;\n-\n-        this.title = title.toUpperCase();\n-    }\n-\n-    public void printTable(final Map<String, String> value) {\n-\n-        if (value.isEmpty()) {\n-            firstColumnMaxWidth = firstColumnHeader.length();\n-            secondColumnMaxWidth = secondColumnHeader.length();\n-            firstColumntContentWidth = (MIN_COLUMN_SPACE * 2) + firstColumnMaxWidth;\n-            secondColumntContentWidth = (MIN_COLUMN_SPACE * 2) + secondColumnMaxWidth;\n-            tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + firstColumnMaxWidth + secondColumnMaxWidth;\n-            if (title.length() > firstColumnMaxWidth + secondColumnMaxWidth) {\n-                tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + title.length();\n-            }\n-        }\n-\n-        final StringBuilder table = new StringBuilder();\n-\n-// ################ BORDER-TOP ################\n-        for (int i = 0; i < tableWidth; i++) {\n-            table.append(\"#\");\n-        }\n-        table.append(\"\\n\");\n-// ################ BORDER-TOP ################\n-\n-// ################ TABLE-TITLE ################\n-        table.append(\"#\");\n-        for (int i = 0; i < titleFirstSpace(title); i++) {\n-            table.append(\" \");\n-        }\n-        table.append(title);\n-        for (int i = 0; i < titleSecondSpace(title); i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        table.append(\"\\n\");\n-// ################ TABLE-TITLE ################\n-\n-// ################ BORDER-TOP ################\n-        for (int i = 0; i < tableWidth; i++) {\n-            table.append(\"#\");\n-        }\n-        table.append(\"\\n\");\n-// ################ BORDER-TOP ################\n-\n-// ################ LIST-SPACE ################\n-        table.append(\"#\");\n-        for (int i = 0; i < firstColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        for (int i = 0; i < secondColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        table.append(\"\\n\");\n-// ################ LIST-SPACE ################\n-\n-// ################ HEADER-TITLE ################\n-        table.append(\"#\");\n-        for (int i = 0; i < firstColumnFirstSpace(firstColumnHeader); i++) {\n-            table.append(\" \");\n-        }\n-        table.append(firstColumnHeader);\n-        for (int i = 0; i < firstColumnSecondSpace(firstColumnHeader); i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        for (int i = 0; i < secondColumnFirstSpace(secondColumnHeader); i++) {\n-            table.append(\" \");\n-        }\n-        table.append(secondColumnHeader);\n-        for (int i = 0; i < secondColumnSecondSpace(secondColumnHeader); i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        table.append(\"\\n\");\n-// ################ HEADER-TITLE ################\n-\n-// ################ LIST-SPACE ################\n-        table.append(\"#\");\n-        for (int i = 0; i < firstColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        for (int i = 0; i < secondColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        table.append(\"\\n\");\n-// ################ LIST-SPACE ################\n-\n-// ################ BORDER-TOP ################\n-        for (int i = 0; i < tableWidth; i++) {\n-            table.append(\"#\");\n-        }\n-        table.append(\"\\n\");\n-// ################ BORDER-TOP ################\n-\n-// ################ LIST-SPACE ################\n-        table.append(\"#\");\n-        for (int i = 0; i < firstColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        for (int i = 0; i < secondColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        table.append(\"\\n\");\n-// ################ LIST-SPACE ################\n-\n-// ################ CONTENT ################\n-        for (final Map.Entry<String, String> entrySet : value.entrySet()) {\n-            final String firstColumnValue = entrySet.getKey();\n-            final String secondColumnValue = entrySet.getValue();\n-            table.append(\"#\");\n-            for (int i = 0; i < firstColumnFirstSpace(firstColumnValue); i++) {\n-                table.append(\" \");\n-            }\n-            table.append(firstColumnValue);\n-            for (int i = 0; i < firstColumnSecondSpace(firstColumnValue); i++) {\n-                table.append(\" \");\n-            }\n-            table.append(\"#\");\n-            for (int i = 0; i < secondColumnFirstSpace(secondColumnValue); i++) {\n-                table.append(\" \");\n-            }\n-            table.append(secondColumnValue);\n-            for (int i = 0; i < secondColumnSecondSpace(secondColumnValue); i++) {\n-                table.append(\" \");\n-            }\n-            table.append(\"#\");\n-            table.append(\"\\n\");\n-        }\n-// ################ CONTENT ################\n-\n-// ################ LIST-SPACE ################\n-        table.append(\"#\");\n-        for (int i = 0; i < firstColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        for (int i = 0; i < secondColumntContentWidth; i++) {\n-            table.append(\" \");\n-        }\n-        table.append(\"#\");\n-        table.append(\"\\n\");\n-// ################ LIST-SPACE ################\n-\n-// ################ BORDER-BOTTOM ################\n-        for (int i = 0; i < tableWidth; i++) {\n-            table.append(\"#\");\n-        }\n-// ################ BORDER-BOTTOM ################\n-\n-        System.out.println(table.toString() + \"\\n\");\n-    }\n-\n-    private int titleFirstSpace(final String wordToPrint) {\n-        return ((tableWidth - 2) - (wordToPrint.length())) / 2;\n-    }\n-\n-    private int titleSecondSpace(final String wordToPrint) {\n-        return tableWidth - 2 - (titleFirstSpace(wordToPrint) + wordToPrint.length());\n-    }\n-\n-    private int firstColumnFirstSpace(final String wordToPrint) {\n-        return (MIN_COLUMN_SPACE * 2 + (firstColumnMaxWidth - wordToPrint.length())) / 2;\n-    }\n-\n-    private int firstColumnSecondSpace(final String wordToPrint) {\n-        return firstColumntContentWidth - (firstColumnFirstSpace(wordToPrint) + wordToPrint.length());\n-    }\n-\n-    private int secondColumnFirstSpace(final String wordToPrint) {\n-        return (MIN_COLUMN_SPACE * 2 + (secondColumnMaxWidth - wordToPrint.length())) / 2;\n-    }\n-\n-    private int secondColumnSecondSpace(final String wordToPrint) {\n-        return secondColumntContentWidth - (secondColumnFirstSpace(wordToPrint) + wordToPrint.length());\n-    }\n-\n-}"},{"sha":"4489b9be8db0546f118abd15741e208075212e84","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/view/Messages.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FMessages.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FMessages.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FMessages.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.cli.messages;\n+package org.apache.syncope.client.cli.view;\n \n public final class Messages {\n ","previous_filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Messages.java"},{"sha":"5230f421417de9456fc5d0098a6f90ad54d3288e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/view/Table.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fview%2FTable.java?ref=7a11bf3b911a9ca96dcd4a9b15158dc1d47fd814","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.cli.messages;\n+package org.apache.syncope.client.cli.view;\n \n import java.util.LinkedHashSet;\n import java.util.LinkedList;","previous_filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Table.java"}]}