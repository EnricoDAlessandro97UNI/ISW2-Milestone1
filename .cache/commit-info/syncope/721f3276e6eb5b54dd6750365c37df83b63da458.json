{"sha":"721f3276e6eb5b54dd6750365c37df83b63da458","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcyMWYzMjc2ZTZlYjViNTRkZDY3NTAzNjVjMzdkZjgzYjYzZGE0NTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-03T12:03:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-03T12:03:04Z"},"message":"[SYNCOPE-620] Several enhancements","tree":{"sha":"37ca6b37f122d417e9114bdbd7718f3659ab7cf9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/37ca6b37f122d417e9114bdbd7718f3659ab7cf9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/721f3276e6eb5b54dd6750365c37df83b63da458","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/721f3276e6eb5b54dd6750365c37df83b63da458","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/721f3276e6eb5b54dd6750365c37df83b63da458","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/721f3276e6eb5b54dd6750365c37df83b63da458/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"42f78fee6e0419fb5be8cd334cee8e076749a12e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/42f78fee6e0419fb5be8cd334cee8e076749a12e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/42f78fee6e0419fb5be8cd334cee8e076749a12e"}],"stats":{"total":303,"additions":241,"deletions":62},"files":[{"sha":"0fa46dd94b87f10c2db20b2a03f57d077725a19a","filename":"syncope620/fit/reference/pom.xml","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Ffit%2Freference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Ffit%2Freference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fpom.xml?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -434,6 +434,27 @@ under the License.\n       </build>\n     </profile>\n     \n+    <profile>\n+      <id>light</id>\n+      \n+      <build>\n+        <resources>\n+          <resource>\n+            <directory>src/main/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>workflow.properties</exclude>\n+              <exclude>provisioning.properties</exclude>\n+            </excludes>\n+          </resource>\n+          <resource>\n+            <directory>src/main/resources/light</directory>\n+            <filtering>true</filtering>\n+          </resource>\n+        </resources>\n+      </build>\n+    </profile>\n+    \n     <profile>\n       <id>all</id>\n       <activation>"},{"sha":"2ed4d0de6d4ef1e1758027062f044bd5d1d787a7","filename":"syncope620/fit/reference/src/main/resources/light/provisioning.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flight%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flight%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flight%2Fprovisioning.properties?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+userProvisioningManager=org.apache.syncope.server.provisioning.java.DefaultUserProvisioningManager\n+roleProvisioningManager=org.apache.syncope.server.provisioning.java.DefaultRoleProvisioningManager"},{"sha":"2c08d50177e737a1b87ba503331c424313b26967","filename":"syncope620/fit/reference/src/main/resources/light/workflow.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flight%2Fworkflow.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flight%2Fworkflow.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flight%2Fworkflow.properties?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+wf.directory=${conf.directory}\n+jobExecutorActivate=false\n+uwfAdapter=org.apache.syncope.server.workflow.java.DefaultUserWorkflowAdapter\n+rwfAdapter=org.apache.syncope.server.workflow.java.DefaultRoleWorkflowAdapter\n\\ No newline at end of file"},{"sha":"2a5098cc9042febcb12f5f4bda4b06b888c7a627","filename":"syncope620/server/logic/src/main/java/org/apache/syncope/server/logic/init/ImplementationClassNamesLoader.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FImplementationClassNamesLoader.java?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -18,12 +18,13 @@\n  */\n package org.apache.syncope.server.logic.init;\n \n-import java.io.IOException;\n+import java.lang.reflect.Modifier;\n import java.util.Collections;\n import java.util.EnumMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.server.provisioning.api.job.PushJob;\n import org.apache.syncope.server.provisioning.api.job.SyncJob;\n import org.apache.syncope.server.provisioning.api.job.TaskJob;\n@@ -36,11 +37,10 @@\n import org.apache.syncope.server.persistence.api.attrvalue.validation.Validator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.support.ResourcePatternResolver;\n-import org.springframework.core.type.ClassMetadata;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.core.type.filter.AssignableTypeFilter;\n import org.springframework.stereotype.Component;\n import org.springframework.util.ClassUtils;\n \n@@ -68,9 +68,6 @@ public enum Type {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ImplementationClassNamesLoader.class);\n \n-    @Autowired\n-    private ResourcePatternResolver resResolver;\n-\n     private Map<Type, Set<String>> classNames;\n \n     @Override\n@@ -87,59 +84,62 @@ public void load() {\n             classNames.put(type, new HashSet<String>());\n         }\n \n-        try {\n-            for (Resource resource : resResolver.getResources(\"classpath*:**/*.class\")) {\n-                ClassMetadata metadata = factory.getMetadataReader(resource).getClassMetadata();\n-\n-                try {\n-                    Class<?> clazz = ClassUtils.forName(metadata.getClassName(), ClassUtils.getDefaultClassLoader());\n-                    Set<Class<?>> interfaces = ClassUtils.getAllInterfacesForClassAsSet(clazz);\n-\n-                    if (interfaces.contains(Reportlet.class) && !metadata.isAbstract()) {\n-                        classNames.get(Type.REPORTLET).add(clazz.getName());\n-                    }\n-\n-                    if ((interfaces.contains(TaskJob.class))\n-                            && !metadata.isAbstract()\n-                            && !SyncJob.class.getName().equals(metadata.getClassName())\n-                            && !PushJob.class.getName().equals(metadata.getClassName())) {\n-\n-                        classNames.get(Type.TASKJOB).add(metadata.getClassName());\n-                    }\n-\n-                    if (interfaces.contains(SyncActions.class) && !metadata.isAbstract()) {\n-                        classNames.get(Type.SYNC_ACTIONS).add(metadata.getClassName());\n-                    }\n-\n-                    if (interfaces.contains(PushActions.class) && !metadata.isAbstract()) {\n-                        classNames.get(Type.PUSH_ACTIONS).add(metadata.getClassName());\n-                    }\n-\n-                    if (interfaces.contains(SyncCorrelationRule.class) && !metadata.isAbstract()) {\n-                        classNames.get(Type.SYNC_CORRELATION_RULE).add(metadata.getClassName());\n-                    }\n-\n-                    // TODO: SYNCOPE-631\n-                    /* if (interfaces.contains(PushCorrelationRule.class) && !metadata.isAbstract()) {\n-                     * classNames.get(Type.PUSH_CORRELATION_RULES).add(metadata.getClassName());\n-                     * } */\n-                    if (interfaces.contains(PropagationActions.class) && !metadata.isAbstract()) {\n-                        classNames.get(Type.PROPAGATION_ACTIONS).add(metadata.getClassName());\n-                    }\n-\n-                    if (interfaces.contains(Validator.class) && !metadata.isAbstract()) {\n-                        classNames.get(Type.VALIDATOR).add(metadata.getClassName());\n-                    }\n-                } catch (ClassNotFoundException e) {\n-                    LOG.warn(\"Could not load class {}\", metadata.getClassName());\n-                } catch (LinkageError e) {\n-                    LOG.warn(\"Could not link class {}\", metadata.getClassName());\n+        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(TaskJob.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(SyncActions.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(SyncCorrelationRule.class));\n+        // TODO: SYNCOPE-631\n+        //scanner.addIncludeFilter(new AssignableTypeFilter(PushCorrelationRule.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n+\n+        for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n+            try {\n+                Class<?> clazz = ClassUtils.resolveClassName(\n+                        bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n+                boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n+\n+                if (Reportlet.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.REPORTLET).add(clazz.getName());\n+                }\n+\n+                if (TaskJob.class.isAssignableFrom(clazz) && !isAbsractClazz\n+                        && !SyncJob.class.isAssignableFrom(clazz)\n+                        && !PushJob.class.isAssignableFrom(clazz)) {\n+\n+                    classNames.get(Type.TASKJOB).add(bd.getBeanClassName());\n+                }\n+\n+                if (SyncActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.SYNC_ACTIONS).add(bd.getBeanClassName());\n+                }\n+\n+                if (PushActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.PUSH_ACTIONS).add(bd.getBeanClassName());\n                 }\n+\n+                if (SyncCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.SYNC_CORRELATION_RULE).add(bd.getBeanClassName());\n+                }\n+\n+                // TODO: SYNCOPE-631\n+                /* if (PushCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                 * classNames.get(Type.PUSH_CORRELATION_RULES).add(metadata.getClassName());\n+                 * } */\n+                \n+                if (PropagationActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n+                }\n+\n+                if (Validator.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.VALIDATOR).add(bd.getBeanClassName());\n+                }\n+            } catch (Throwable t) {\n+                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n             }\n-        } catch (IOException e) {\n-            LOG.error(\"While searching for implementatiom classes\", e);\n         }\n-\n         classNames = Collections.unmodifiableMap(classNames);\n \n         LOG.debug(\"Implementation classes found: {}\", classNames);"},{"sha":"bd26305ea916a522dc50f87651ddf61d1ad3fd47","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/spring/MultiJarAwarePersistenceUnitPostProcessor.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fspring%2FMultiJarAwarePersistenceUnitPostProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fspring%2FMultiJarAwarePersistenceUnitPostProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fspring%2FMultiJarAwarePersistenceUnitPostProcessor.java?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -28,14 +28,16 @@\n import org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo;\n import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n \n+/**\n+ * Allows having JPA entities spread in several JAR files; this is needed in order to support the Syncope extensions.\n+ */\n public class MultiJarAwarePersistenceUnitPostProcessor implements PersistenceUnitPostProcessor {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MultiJarAwarePersistenceUnitPostProcessor.class);\n \n     @Override\n     public void postProcessPersistenceUnitInfo(final MutablePersistenceUnitInfo pui) {\n-        ClassPathScanningCandidateComponentProvider scanner =\n-                new ClassPathScanningCandidateComponentProvider(false);\n+        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(AbstractEntity.class.getPackage().getName())) {"},{"sha":"0f2768c92737a5e8c2a7cb4ab01d34d8016c0500","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/QueryResourceInfoComparator.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FQueryResourceInfoComparator.java?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cxf.jaxrs.ext.ResourceComparator;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfoComparator;\n+import org.apache.cxf.jaxrs.model.Parameter;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n+\n+public class QueryResourceInfoComparator extends OperationResourceInfoComparator implements ResourceComparator {\n+\n+    public QueryResourceInfoComparator() {\n+        super(null, null);\n+    }\n+\n+    @Override\n+    public int compare(final ClassResourceInfo cri1, final ClassResourceInfo cri2, final Message message) {\n+        // Leave Class selection to CXF\n+        return 0;\n+    }\n+\n+    @Override\n+    public int compare(final OperationResourceInfo oper1, final OperationResourceInfo oper2, final Message message) {\n+        // Check if CXF can make a decision\n+        int cxfResult = super.compare(oper1, oper2);\n+        if (cxfResult != 0) {\n+            return cxfResult;\n+        }\n+\n+        int op1Counter = getMatchingRate(oper1, message);\n+        int op2Counter = getMatchingRate(oper2, message);\n+\n+        return op1Counter == op2Counter\n+                ? 0\n+                : op1Counter < op2Counter\n+                ? 1\n+                : -1;\n+    }\n+\n+    /**\n+     * This method calculates a number indicating a good or bad match between values provided within the request and\n+     * expected method parameters. A higher number means a better match.\n+     *\n+     * @param operation The operation to be rated, based on contained parameterInfo values.\n+     * @param message A message containing query and header values from user request\n+     * @return A positive or negative number, indicating a good match between query and method\n+     */\n+    protected int getMatchingRate(final OperationResourceInfo operation, final Message message) {\n+        List<Parameter> params = operation.getParameters();\n+        if (params == null || params.isEmpty()) {\n+            return 0;\n+        }\n+\n+        // Get Request QueryParams\n+        String query = (String) message.get(Message.QUERY_STRING);\n+        String path = (String) message.get(Message.REQUEST_URI);\n+        Map<String, List<String>> qParams = JAXRSUtils.getStructuredParams(query, \"&\", true, false);\n+        Map<String, List<String>> mParams = JAXRSUtils.getMatrixParams(path, true);\n+        // Get Request Headers\n+        Map<?, ?> qHeader = (java.util.Map<?, ?>) message.get(Message.PROTOCOL_HEADERS);\n+\n+        int rate = 0;\n+        for (Parameter p : params) {\n+            switch (p.getType()) {\n+                case QUERY:\n+                    if (qParams.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                case MATRIX:\n+                    if (mParams.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                case HEADER:\n+                    if (qHeader.containsKey(p.getName())) {\n+                        rate += 2;\n+                    } else if (p.getDefaultValue() == null) {\n+                        rate -= 1;\n+                    }\n+                    break;\n+                default:\n+                    break;\n+            }\n+        }\n+        return rate;\n+    }\n+}"},{"sha":"dac6a1c08cd971957129f72725793ff75209a050","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/RestServiceExceptionMapper.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.server.rest.cxf.service;\n+package org.apache.syncope.server.rest.cxf;\n \n import java.util.ArrayList;\n import java.util.List;","previous_filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/RestServiceExceptionMapper.java"},{"sha":"6e7bd364d34051c484e97facb29ed7932d3c0b35","filename":"syncope620/server/rest-cxf/src/main/resources/META-INF/cxf/org.apache.cxf.Logger","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcxf%2Forg.apache.cxf.Logger","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcxf%2Forg.apache.cxf.Logger","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fcxf%2Forg.apache.cxf.Logger?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -0,0 +1 @@\n+org.apache.cxf.common.logging.Slf4jLogger"},{"sha":"f4c8f48641d7a7fb1d223dee24cb322670dd2044","filename":"syncope620/server/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/721f3276e6eb5b54dd6750365c37df83b63da458/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=721f3276e6eb5b54dd6750365c37df83b63da458","patch":"@@ -66,7 +66,7 @@ under the License.\n     <property name=\"mapper\" ref=\"jacksonObjectMapper\"/>\n   </bean>\n \n-  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.server.rest.cxf.service.RestServiceExceptionMapper\"/>\n+  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.server.rest.cxf.RestServiceExceptionMapper\"/>\n \n   <bean id=\"validationProvider\" class=\"org.apache.cxf.validation.BeanValidationProvider\"/>\n   <bean id=\"validationInInterceptor\" class=\"org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor\">\n@@ -93,6 +93,9 @@ under the License.\n   <jaxrs:server id=\"restContainer\" address=\"/\" \n                 basePackages=\"org.apache.syncope.common.rest.api.service, org.apache.syncope.server.rest.cxf.service\" \n                 staticSubresourceResolution=\"true\">\n+    <jaxrs:resourceComparator>\n+      <bean class=\"org.apache.syncope.server.rest.cxf.QueryResourceInfoComparator\"/>\n+    </jaxrs:resourceComparator>\n     <jaxrs:properties> \n       <entry key=\"search.lax.property.match\" value=\"true\"/> \n     </jaxrs:properties> "}]}