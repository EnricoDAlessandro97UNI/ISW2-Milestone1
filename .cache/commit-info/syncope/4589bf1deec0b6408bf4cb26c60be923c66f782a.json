{"sha":"4589bf1deec0b6408bf4cb26c60be923c66f782a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ1ODliZjFkZWVjMGI2NDA4YmY0Y2IyNmM2MGJlOTIzYzY2Zjc4MmE=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-05-21T07:45:28Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-05-21T15:09:59Z"},"message":"[SYNCOPE-1472] fixed multiple entries creation in relationship tables through list checks and constraints on many yo many relationships","tree":{"sha":"77d956ed3b212845075f4b352de430aea0f5ded3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/77d956ed3b212845075f4b352de430aea0f5ded3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4589bf1deec0b6408bf4cb26c60be923c66f782a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4589bf1deec0b6408bf4cb26c60be923c66f782a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4589bf1deec0b6408bf4cb26c60be923c66f782a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4589bf1deec0b6408bf4cb26c60be923c66f782a/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"4722c928d951c282cc67d78f66427ffb5c005c39","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4722c928d951c282cc67d78f66427ffb5c005c39","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4722c928d951c282cc67d78f66427ffb5c005c39"}],"stats":{"total":322,"additions":284,"deletions":38},"files":[{"sha":"1af918d57871b706d1d20eca7c69ca1e81f0fc45","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyType.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -53,7 +54,9 @@ public class JPAAnyType extends AbstractProvidedKeyEntity implements AnyType {\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyType_id\", referencedColumnName = \"id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\", referencedColumnName = \"id\"))\n+            @JoinColumn(name = \"anyTypeClass_id\", referencedColumnName = \"id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"anyType_id\", \"anyTypeClass_id\" }))\n     private List<JPAAnyTypeClass> classes = new ArrayList<>();\n \n     @Override\n@@ -69,7 +72,7 @@ public void setKind(final AnyTypeKind kind) {\n     @Override\n     public boolean add(final AnyTypeClass anyTypeClass) {\n         checkType(anyTypeClass, JPAAnyTypeClass.class);\n-        return this.classes.add((JPAAnyTypeClass) anyTypeClass);\n+        return classes.contains((JPAAnyTypeClass) anyTypeClass) || this.classes.add((JPAAnyTypeClass) anyTypeClass);\n     }\n \n     @Override"},{"sha":"80cafacde95a19a006e9c2e6d6b7afb673e4ee1e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -77,7 +77,9 @@ public class JPARealm extends AbstractGeneratedKeyEntity implements Realm {\n             joinColumns =\n             @JoinColumn(name = \"realm_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"realm_id\", \"implementation_id\" }))\n     private List<JPAImplementation> actions = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"realm\")\n@@ -87,7 +89,8 @@ public class JPARealm extends AbstractGeneratedKeyEntity implements Realm {\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"realm_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"resource_id\"))\n+            @JoinColumn(name = \"resource_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"realm_id\", \"resource_id\" }))\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n     @Override\n@@ -173,7 +176,7 @@ public List<? extends AnyTemplateRealm> getTemplates() {\n     @Override\n     public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);\n-        return resources.add((JPAExternalResource) resource);\n+        return resources.contains((JPAExternalResource) resource) || resources.add((JPAExternalResource) resource);\n     }\n \n     @Override"},{"sha":"710521cac95e5e076e8289f6d7c76e379d6e2bc6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -30,6 +30,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -55,7 +56,9 @@ public class JPAReport extends AbstractGeneratedKeyEntity implements Report {\n             joinColumns =\n             @JoinColumn(name = \"report_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"report_id\", \"implementation_id\" }))\n     private List<JPAImplementation> reportlets = new ArrayList<>();\n \n     private String cronExpression;"},{"sha":"2a0269aceb37d0e5d4b0834d2d7d839dcc6125f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -36,6 +36,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import org.apache.syncope.core.persistence.api.entity.Application;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n@@ -67,15 +68,19 @@ public class JPARole extends AbstractProvidedKeyEntity implements Role {\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"role_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"realm_id\"))\n+            @JoinColumn(name = \"realm_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"role_id\", \"realm_id\" }))\n     @Valid\n     private List<JPARealm> realms = new ArrayList<>();\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"role_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"dynamicRealm_id\"))\n+            @JoinColumn(name = \"dynamicRealm_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"role_id\", \"dynamicRealm_id\" }))\n     @Valid\n     private List<JPADynRealm> dynRealms = new ArrayList<>();\n \n@@ -90,7 +95,9 @@ public class JPARole extends AbstractProvidedKeyEntity implements Role {\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"role_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"privilege_id\"))\n+            @JoinColumn(name = \"privilege_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"role_id\", \"privilege_id\" }))\n     @Valid\n     private Set<JPAPrivilege> privileges = new HashSet<>();\n \n@@ -102,7 +109,7 @@ public Set<String> getEntitlements() {\n     @Override\n     public boolean add(final Realm realm) {\n         checkType(realm, JPARealm.class);\n-        return realms.add((JPARealm) realm);\n+        return realms.contains((JPARealm) realm) || realms.add((JPARealm) realm);\n     }\n \n     @Override\n@@ -113,7 +120,7 @@ public List<? extends Realm> getRealms() {\n     @Override\n     public boolean add(final DynRealm dynamicRealm) {\n         checkType(dynamicRealm, JPADynRealm.class);\n-        return dynRealms.add((JPADynRealm) dynamicRealm);\n+        return dynRealms.contains((JPADynRealm) dynamicRealm) || dynRealms.add((JPADynRealm) dynamicRealm);\n     }\n \n     @Override"},{"sha":"91af63ac356575382780442b14aa8c4848103d6b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -75,14 +76,16 @@\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyObject_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"resource_id\"))\n+            @JoinColumn(name = \"resource_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"anyObject_id\", \"resource_id\" }))\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n     @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyObject_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\"))\n+            @JoinColumn(name = \"anyTypeClass_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"anyObject_id\", \"anyTypeClass_id\" }))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n@@ -117,7 +120,7 @@ public void setType(final AnyType type) {\n     @Override\n     public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);\n-        return resources.add((JPAExternalResource) resource);\n+        return resources.contains((JPAExternalResource) resource) || resources.add((JPAExternalResource) resource);\n     }\n \n     @Override\n@@ -139,7 +142,7 @@ protected List<? extends APlainAttr> internalGetPlainAttrs() {\n     @Override\n     public boolean add(final AnyTypeClass auxClass) {\n         checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+        return auxClasses.contains((JPAAnyTypeClass) auxClass) || this.auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n     @Override"},{"sha":"5f1da3053bbe449f1d00ae363d4ac2db892c9bc7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -79,14 +80,16 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"resource_id\"))\n+            @JoinColumn(name = \"resource_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"group_id\", \"resource_id\" }))\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n     @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\"))\n+            @JoinColumn(name = \"anyTypeClass_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"group_id\", \"anyTypeClass_id\" }))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"group\")\n@@ -122,7 +125,7 @@ public void setType(final AnyType type) {\n     @Override\n     public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);\n-        return resources.add((JPAExternalResource) resource);\n+        return resources.contains((JPAExternalResource) resource) || resources.add((JPAExternalResource) resource);\n     }\n \n     @Override\n@@ -190,7 +193,7 @@ public void setUDynMembership(final UDynGroupMembership uDynMembership) {\n     @Override\n     public boolean add(final AnyTypeClass auxClass) {\n         checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+        return auxClasses.contains((JPAAnyTypeClass) auxClass) || this.auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n     @Override"},{"sha":"207096ab1b843f800fdeb062f2fce9685941a6ec","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -54,7 +54,8 @@ public class JPATypeExtension extends AbstractGeneratedKeyEntity implements Type\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"typeExtension_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\"))\n+            @JoinColumn(name = \"anyTypeClass_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"typeExtension_id\", \"anyTypeClass_id\" }))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @Override"},{"sha":"f9c43026a5dbf6813ec7685485f4d29eb21c1090","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -28,6 +28,7 @@\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -54,7 +55,9 @@ public class JPAAccountPolicy extends AbstractPolicy implements AccountPolicy {\n             joinColumns =\n             @JoinColumn(name = \"policy_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"policy_id\", \"implementation_id\" }))\n     private List<JPAImplementation> rules = new ArrayList<>();\n \n     /**\n@@ -64,7 +67,9 @@ public class JPAAccountPolicy extends AbstractPolicy implements AccountPolicy {\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"accountPolicy_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"resource_id\"))\n+            @JoinColumn(name = \"resource_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"accountPolicy_id\", \"resource_id\" }))\n     private Set<JPAExternalResource> resources = new HashSet<>();\n \n     @Override"},{"sha":"ffbfd31b063ec49c014f0b3dc0bb4ca68ebaecc2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -50,7 +51,9 @@ public class JPAPasswordPolicy extends AbstractPolicy implements PasswordPolicy\n             joinColumns =\n             @JoinColumn(name = \"policy_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"policy_id\", \"implementation_id\" }))\n     private List<JPAImplementation> rules = new ArrayList<>();\n \n     @Override"},{"sha":"c0a71750d1c5e37b103dd8333484750021f84c67","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -41,6 +41,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -159,7 +160,9 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n             joinColumns =\n             @JoinColumn(name = \"resource_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"resource_id\", \"implementation_id\" }))\n     private List<JPAImplementation> propagationActions = new ArrayList<>();\n \n     @Override"},{"sha":"e81450f3e8fac710f9b364800a9655ed6594cbcd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -51,7 +52,9 @@ public class JPAMappingItem extends AbstractItem implements MappingItem {\n             joinColumns =\n             @JoinColumn(name = \"item_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n     private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override"},{"sha":"90423b423e281f25a08e899f966ea8d55695c827","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnitItem.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n@@ -51,7 +52,9 @@ public class JPAOrgUnitItem extends AbstractItem implements OrgUnitItem {\n             joinColumns =\n             @JoinColumn(name = \"item_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n     private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override"},{"sha":"331e68b97d0432813e29e230bd4d7e9873f732fb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -69,7 +69,9 @@ public class JPAProvision extends AbstractGeneratedKeyEntity implements Provisio\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"provision_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\"))\n+            @JoinColumn(name = \"anyTypeClass_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"provision_id\", \"anyTypeClass_id\" }))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @Lob"},{"sha":"12172112e22175493fc9f8ca24ee912c4adc6fed","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPullTask.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPullTask.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -33,6 +33,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.PullMode;\n@@ -65,7 +66,9 @@ public class JPAPullTask extends AbstractProvisioningTask implements PullTask {\n             joinColumns =\n             @JoinColumn(name = \"task_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"task_id\", \"implementation_id\" }))\n     private List<JPAImplementation> actions = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pullTask\")"},{"sha":"a4a3f4c84d4011ececddf5e8de8eae98964e916a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -31,6 +31,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -53,7 +54,9 @@ public class JPAPushTask extends AbstractProvisioningTask implements PushTask {\n             joinColumns =\n             @JoinColumn(name = \"task_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"task_id\", \"implementation_id\" }))\n     private List<JPAImplementation> actions = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"pushTask\")"},{"sha":"f580e9167ec9db4b8db4ac49cdb23db3db572708","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -42,6 +42,7 @@\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.persistence.Transient;\n+import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -88,7 +89,8 @@\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"role_id\"))\n+            @JoinColumn(name = \"role_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"user_id\", \"role_id\" }))\n     private List<JPARole> roles = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n@@ -152,14 +154,16 @@\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"resource_id\"))\n+            @JoinColumn(name = \"resource_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"user_id\", \"resource_id\" }))\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n     @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\"))\n+            @JoinColumn(name = \"anyTypeClass_id\"),\n+            uniqueConstraints = @UniqueConstraint(columnNames = { \"user_id\", \"anyTypeClass_id\" }))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n@@ -189,7 +193,7 @@ public void setType(final AnyType type) {\n     @Override\n     public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);\n-        return resources.add((JPAExternalResource) resource);\n+        return resources.contains((JPAExternalResource) resource) || resources.add((JPAExternalResource) resource);\n     }\n \n     @Override\n@@ -419,7 +423,7 @@ public void setSecurityAnswer(final String securityAnswer) {\n     @Override\n     public boolean add(final AnyTypeClass auxClass) {\n         checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+        return auxClasses.contains((JPAAnyTypeClass) auxClass) || this.auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n     @Override"},{"sha":"f70762035be0d2f4f345e32754138e735cce300a","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCProviderItem.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProviderItem.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n@@ -62,14 +63,17 @@ public void setOP(final OIDCProvider op) {\n             joinColumns =\n             @JoinColumn(name = \"item_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n     private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n         checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n-        return this.transformers.add((JPAImplementation) transformer);\n+        return transformers.contains((JPAImplementation) transformer)\n+                || this.transformers.add((JPAImplementation) transformer);\n     }\n \n     @Override"},{"sha":"002878981f50bbb5e3b35f7922d1a7f99023bc54","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdPItem.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdPItem.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import javax.persistence.UniqueConstraint;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n@@ -51,7 +52,9 @@ public class JPASAML2IdPItem extends AbstractItem implements SAML2IdPItem {\n             joinColumns =\n             @JoinColumn(name = \"item_id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"implementation_id\"))\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"item_id\", \"implementation_id\" }))\n     private List<JPAImplementation> transformers = new ArrayList<>();\n \n     @Override\n@@ -69,7 +72,8 @@ public void setIdP(final SAML2IdP idp) {\n     public boolean add(final Implementation transformer) {\n         checkType(transformer, JPAImplementation.class);\n         checkImplementationType(transformer, IdMImplementationType.ITEM_TRANSFORMER);\n-        return this.transformers.add((JPAImplementation) transformer);\n+        return transformers.contains((JPAImplementation) transformer)\n+                || this.transformers.add((JPAImplementation) transformer);\n     }\n \n     @Override"},{"sha":"13f5c9baab201d779815a1e97715b98d685d14fc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -35,11 +35,13 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -207,4 +209,35 @@ public void issueSYNCOPE756() {\n             assertEquals(ClientExceptionType.InvalidAnyType, e.getType());\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1472() {\n+        // 1. assign resource-db-scripted again to Canon MF 8030cn and update twice\n+        AnyObjectUR anyObjectPatch = new AnyObjectUR();\n+        anyObjectPatch.setKey(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n+        anyObjectPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_DBSCRIPTED).build());\n+        anyObjectPatch.getAuxClasses().add(new StringPatchItem.Builder().value(\"csv\").build());\n+\n+        for (int i = 0; i < 2; i++) {\n+            updateAnyObject(anyObjectPatch);\n+        }\n+\n+        // 2. remove resources and auxiliary classes\n+        anyObjectPatch.getResources().clear();\n+        anyObjectPatch.getResources().add(new StringPatchItem.Builder()\n+                .value(RESOURCE_NAME_DBSCRIPTED)\n+                .operation(PatchOperation.DELETE)\n+                .build());\n+        anyObjectPatch.getAuxClasses().clear();\n+        anyObjectPatch.getAuxClasses().add(new StringPatchItem.Builder()\n+                .value(\"csv\")\n+                .operation(PatchOperation.DELETE)\n+                .build());\n+\n+        updateAnyObject(anyObjectPatch);\n+\n+        AnyObjectTO printer = anyObjectService.read(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n+        assertFalse(printer.getResources().contains(RESOURCE_NAME_DBSCRIPTED), \"Should not contain removed resources\");\n+        assertFalse(printer.getAuxClasses().contains(\"csv\"), \"Should not contain removed auxiliary classes\");\n+    }\n }"},{"sha":"e5eb88dbd920512570f1b083a875196ac1dc37ef","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyTypeITCase.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyTypeITCase.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -178,4 +178,23 @@ public void issueSYNCOPE754() {\n             anyTypeService.update(group);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1472() {\n+        // 1. add any type class csv twice to PRINTER any type\n+        AnyTypeTO anyTypeTO = anyTypeService.read(\"PRINTER\");\n+        anyTypeTO.getClasses().clear();\n+        anyTypeTO.getClasses().add(\"minimal printer\");\n+        anyTypeTO.getClasses().add(\"csv\");\n+        anyTypeTO.getClasses().add(\"csv\");\n+        anyTypeService.update(anyTypeTO);\n+\n+        // 2. read again and remove any type class\n+        anyTypeTO = anyTypeService.read(\"PRINTER\");\n+        anyTypeTO.getClasses().remove(\"csv\");\n+        anyTypeService.update(anyTypeTO);\n+\n+        assertFalse(anyTypeService.read(\"PRINTER\").getClasses().contains(\"csv\"), \n+                \"Should not contain removed any type classes\");\n+    }\n }"},{"sha":"50b87c353cf4a99b7740dfb3d04d32a15ceb89ca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -1157,4 +1157,40 @@ public void issueSYNCOPE1467() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1472() {\n+        // 1. update group artDirector by assigning twice resource-testdb and auxiliary class csv\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(\"ece66293-8f31-4a84-8e8d-23da36e70846\");\n+        groupUR.getResources().add(new StringPatchItem.Builder()\n+                .value(RESOURCE_NAME_TESTDB)\n+                .operation(PatchOperation.ADD_REPLACE)\n+                .build());\n+        groupUR.getAuxClasses().add(new StringPatchItem.Builder()\n+                .operation(PatchOperation.ADD_REPLACE)\n+                .value(\"csv\")\n+                .build());\n+        for (int i = 0; i < 2; i++) {\n+            updateGroup(groupUR);\n+        }\n+\n+        // 2. remove resources and auxiliary classes\n+        groupUR.getResources().clear();\n+        groupUR.getResources().add(new StringPatchItem.Builder()\n+                .value(RESOURCE_NAME_TESTDB)\n+                .operation(PatchOperation.DELETE)\n+                .build());\n+        groupUR.getAuxClasses().clear();\n+        groupUR.getAuxClasses().add(new StringPatchItem.Builder()\n+                .value(\"csv\")\n+                .operation(PatchOperation.DELETE)\n+                .build());\n+\n+        updateGroup(groupUR);\n+\n+        GroupTO groupTO = groupService.read(\"ece66293-8f31-4a84-8e8d-23da36e70846\");\n+        assertFalse(groupTO.getResources().contains(RESOURCE_NAME_TESTDB), \"Should not contain removed resources\");\n+        assertFalse(groupTO.getAuxClasses().contains(\"csv\"), \"Should not contain removed auxiliary classes\");\n+    }\n }"},{"sha":"4e7c6842a656f7d0cab934477c7d76b81c6b50c9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -268,4 +268,23 @@ public void propagate() {\n         assertNull(\n                 getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=test,o=isp\"));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1472() {\n+        // 1. assign twice resource-ldap-orgunit to /odd\n+        RealmTO realmTO = realmService.list(\"/odd\").get(0);\n+        realmTO.getResources().clear();\n+        realmTO.getResources().add(\"resource-ldap-orgunit\");\n+        realmTO.getResources().add(\"resource-ldap-orgunit\");\n+        realmTO = realmService.update(realmTO).readEntity(new GenericType<ProvisioningResult<RealmTO>>() {\n+        }).getEntity();\n+\n+        // 2. remove resource-ldap-orgunit resource\n+        realmTO.getResources().remove(\"resource-ldap-orgunit\");\n+\n+        realmTO = realmService.update(realmTO).readEntity(new GenericType<ProvisioningResult<RealmTO>>() {\n+        }).getEntity();\n+\n+        assertFalse(realmTO.getResources().contains(\"resource-ldap-orgunit\"), \"Should not contain removed resources\");\n+    }\n }"},{"sha":"3794dcbc2e100ca38d7fca5ac89ff65aa2bd133b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RoleITCase.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -28,8 +28,10 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.FlowableEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -146,4 +148,30 @@ public void dynMembership() {\n         assertTrue(bellini.getDynMemberships().isEmpty());\n         assertTrue(bellini.getPrivileges().isEmpty());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1472() {\n+        final DynRealmTO dynRealmTO = new DynRealmTO();\n+        dynRealmTO.setKey(\"dynRealm\");\n+        dynRealmTO.getDynMembershipConds().put(AnyTypeKind.USER.name(), \"username=~rossini\");\n+        dynRealmService.create(dynRealmTO);\n+\n+        // 1. associate role Other again to /odd realm and twice to dynRealm\n+        RoleTO roleTO = roleService.read(\"Other\");\n+        roleTO.getRealms().add(\"/odd\");\n+        roleTO.getDynRealms().add(\"dynRealm\");\n+        roleTO.getDynRealms().add(\"dynRealm\");\n+        roleService.update(roleTO);\n+\n+        // 2. update by removing realm and dynamic realm\n+        roleTO = roleService.read(\"Other\");\n+        roleTO.getRealms().remove(\"/odd\");\n+        roleTO.getDynRealms().remove(\"dynRealm\");\n+        roleService.update(roleTO);\n+\n+        roleTO = roleService.read(\"Other\");\n+\n+        assertFalse(roleTO.getRealms().contains(\"/odd\"), \"Should not contain removed realms\");\n+        assertFalse(roleTO.getDynRealms().contains(\"dynRealm\"), \"Should not contain removed dynamic realms\");\n+    }\n }"},{"sha":"aa032355dd24f516a8ab33be617ac5428904c295","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4589bf1deec0b6408bf4cb26c60be923c66f782a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=4589bf1deec0b6408bf4cb26c60be923c66f782a","patch":"@@ -1504,4 +1504,55 @@ public void issueSYNCOPE1337() {\n             confParamOps.set(SyncopeConstants.MASTER_DOMAIN, \"password.cipher.algorithm\", original);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1472() {\n+        // 1. update user rossini by assigning twice resource-testdb2 and auxiliary class csv\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n+        userUR.setPassword(new PasswordPatch.Builder()\n+                .onSyncope(false)\n+                .resource(RESOURCE_NAME_TESTDB)\n+                .value(\"Password123\")\n+                .build());\n+        userUR.getResources().add(new StringPatchItem.Builder()\n+                .value(RESOURCE_NAME_TESTDB)\n+                .operation(PatchOperation.ADD_REPLACE)\n+                .build());\n+        userUR.getAuxClasses().add(new StringPatchItem.Builder()\n+                .operation(PatchOperation.ADD_REPLACE)\n+                .value(\"csv\")\n+                .build());\n+        userUR.getRoles().add(new StringPatchItem.Builder()\n+                .operation(PatchOperation.ADD_REPLACE)\n+                .value(\"Other\")\n+                .build());\n+\n+        for (int i = 0; i < 2; i++) {\n+            updateUser(userUR);\n+        }\n+\n+        // 2. remove resources, auxiliary classes and roles\n+        userUR.getResources().clear();\n+        userUR.getResources().add(new StringPatchItem.Builder()\n+                .value(RESOURCE_NAME_TESTDB)\n+                .operation(PatchOperation.DELETE)\n+                .build());\n+        userUR.getAuxClasses().clear();\n+        userUR.getAuxClasses().add(new StringPatchItem.Builder()\n+                .value(\"csv\")\n+                .operation(PatchOperation.DELETE)\n+                .build());\n+        userUR.getRoles().clear();\n+        userUR.getRoles().add(new StringPatchItem.Builder()\n+                .value(\"Other\")\n+                .operation(PatchOperation.DELETE)\n+                .build());\n+        updateUser(userUR);\n+\n+        UserTO userTO = userService.read(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n+        assertFalse(userTO.getResources().contains(RESOURCE_NAME_TESTDB), \"Should not contain removed resources\");\n+        assertFalse(userTO.getAuxClasses().contains(\"csv\"), \"Should not contain removed auxiliary classes\");\n+        assertFalse(userTO.getRoles().contains(\"Other\"),\"Should not contain removed roles\");\n+    }\n }"}]}