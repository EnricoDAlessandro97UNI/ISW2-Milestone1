{"sha":"3c19e35153170af40169fd1d42bcc2551dc73190","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNjMTllMzUxNTMxNzBhZjQwMTY5ZmQxZDQyYmNjMjU1MWRjNzMxOTA=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-03-11T16:11:53Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-03-11T16:11:53Z"},"message":"[SYNCOPE-774] fixes the issue by improving feature","tree":{"sha":"550e572c02c0cba7500278c6b5614d49a5c37515","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/550e572c02c0cba7500278c6b5614d49a5c37515"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3c19e35153170af40169fd1d42bcc2551dc73190","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3c19e35153170af40169fd1d42bcc2551dc73190","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3c19e35153170af40169fd1d42bcc2551dc73190","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3c19e35153170af40169fd1d42bcc2551dc73190/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"61a7fdd38e412a30eeb24161400c669a2c3f3228","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61a7fdd38e412a30eeb24161400c669a2c3f3228","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61a7fdd38e412a30eeb24161400c669a2c3f3228"}],"stats":{"total":421,"additions":289,"deletions":132},"files":[{"sha":"e15b151ab0a1ce65de7fae4bd3f67379905801a1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":29,"deletions":4,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -25,6 +25,8 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n+import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n@@ -76,6 +78,8 @@ public enum CheckAvailability {\n \n     private final Model<CheckAvailability> check;\n \n+    private final ListView<T> beans;\n+\n     private final List<T> listOfItems;\n \n     /**\n@@ -148,7 +152,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         addInnerObject(header(toBeIncluded));\n \n-        final ListView<T> beans = new ListView<T>(\"beans\", listOfItems) {\n+        beans = new ListView<T>(\"beans\", listOfItems) {\n \n             private static final long serialVersionUID = 1L;\n \n@@ -335,6 +339,18 @@ protected Component getValueComponent(final String key, final T bean) {\n                     : new Label(\"field\", new ResourceModel(value.toString(), value.toString()));\n         }\n \n+        protected T getActualItem(final T item, final List<T> list) {\n+            return item == null\n+                    ? null\n+                    : IteratorUtils.find(list.iterator(), new Predicate<T>() {\n+\n+                        @Override\n+                        public boolean evaluate(final T object) {\n+                            return item.equals(object);\n+                        }\n+                    });\n+        }\n+\n         @Override\n         protected WizardMgtPanel<T> newInstance(final String id) {\n             return new ListViewPanel<T>(id, items, reference, includes, actions, check, reuseItem, model) {\n@@ -346,6 +362,10 @@ protected Component getValueComponent(final String key, final T bean) {\n                     return Builder.this.getValueComponent(key, bean);\n                 }\n \n+                @Override\n+                protected T getActualItem(final T item, final List<T> list) {\n+                    return Builder.this.getActualItem(item, list);\n+                }\n             };\n         }\n     }\n@@ -354,14 +374,17 @@ protected Component getValueComponent(final String key, final T bean) {\n     @SuppressWarnings(\"unchecked\")\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof AjaxWizard.NewItemEvent) {\n-\n             final T item = ((AjaxWizard.NewItemEvent<T>) event.getPayload()).getItem();\n             final AjaxRequestTarget target = ((AjaxWizard.NewItemEvent<T>) event.getPayload()).getTarget();\n \n             if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n-                if (item != null && !this.listOfItems.contains(item)) {\n-                    this.listOfItems.add(item);\n+                final T old = getActualItem(item, ListViewPanel.this.listOfItems);\n+                int indexOf = ListViewPanel.this.listOfItems.size();\n+                if (old != null) {\n+                    indexOf = ListViewPanel.this.listOfItems.indexOf(old);\n+                    ListViewPanel.this.listOfItems.remove(old);\n                 }\n+                ListViewPanel.this.listOfItems.add(indexOf, item);\n             }\n \n             target.add(ListViewPanel.this);\n@@ -373,6 +396,8 @@ public void onEvent(final IEvent<?> event) {\n         }\n     }\n \n+    protected abstract T getActualItem(final T item, final List<T> list);\n+\n     public static class ListViewReload {\n \n         private final AjaxRequestTarget target;"},{"sha":"b044ed07cb2cab362df120f4a9a63eb23811c3d1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceDetailsPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.java?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -106,9 +106,9 @@ public ResourceDetailsPanel(\n                 setChoices(Arrays.asList(TraceLevel.values())));\n \n         container.add(new AjaxDropDownChoicePanel<>(\n-                \"syncTraceLevel\",\n-                new ResourceModel(\"syncTraceLevel\", \"syncTraceLevel\").getObject(),\n-                new PropertyModel<TraceLevel>(model, \"syncTraceLevel\"),\n+                \"pullTraceLevel\",\n+                new ResourceModel(\"pullTraceLevel\", \"pullTraceLevel\").getObject(),\n+                new PropertyModel<TraceLevel>(model, \"pullTraceLevel\"),\n                 false).\n                 setChoices(Arrays.asList(TraceLevel.values())));\n "},{"sha":"935b80034b7ee8785e61027164677aa8da400c0f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"modified","additions":205,"deletions":113,"changes":318,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -21,23 +21,29 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.console.commons.ConnIdSpecialAttributeName;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.JexlHelpUtils;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MappingPurposePanel;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n@@ -77,9 +83,14 @@ public class ResourceMappingPanel extends Panel {\n     private static final String DEF_FIELD_STYLE = \"\";\n \n     /**\n-     * Schema rest client.\n+     * Any type rest client.\n      */\n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n+    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n+    /**\n+     * Any type class rest client.\n+     */\n+    private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n \n     /**\n      * ConnInstance rest client.\n@@ -217,10 +228,127 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 }\n \n                 AnyTypeKind entity = null;\n-                if (mapItem.getIntMappingType() != null) {\n+                if (provisionTO.getAnyType().equals(AnyTypeKind.GROUP.name())) {\n+                    // support for clone\n+                    entity = AnyTypeKind.GROUP;\n+                } else if (mapItem.getIntMappingType() != null) {\n                     entity = mapItem.getIntMappingType().getAnyTypeKind();\n                 }\n \n+                // it will happen just in case of clone to create a new mapping for group object\n+                if (mapItem.getIntMappingType() != null && mapItem.getIntMappingType().getAnyTypeKind() != entity) {\n+                    mapItem.setIntMappingType(null);\n+                    mapItem.setIntAttrName(null);\n+                }\n+\n+                //--------------------------------\n+                // Entity\n+                // -------------------------------\n+                final AjaxDropDownChoicePanel<AnyTypeKind> entitiesPanel = new AjaxDropDownChoicePanel<>(\n+                        \"entities\",\n+                        new ResourceModel(\"entities\", \"entities\").getObject(),\n+                        new Model<>(entity));\n+\n+                entitiesPanel.hideLabel();\n+                entitiesPanel.setChoices(provisionTO.getAnyType().equals(AnyTypeKind.GROUP.name())\n+                        ? Collections.<AnyTypeKind>singletonList(AnyTypeKind.GROUP)\n+                        : Arrays.asList(AnyTypeKind.values()));\n+\n+                entitiesPanel.setStyleSheet(false, DEF_FIELD_STYLE);\n+                item.add(entitiesPanel);\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // Internal attribute type\n+                // -------------------------------\n+                final List<IntMappingType> attrTypes = new ArrayList<>(getAttributeTypes(entity));\n+                final AjaxDropDownChoicePanel<IntMappingType> intMappingTypes = new AjaxDropDownChoicePanel<>(\n+                        \"intMappingTypes\",\n+                        new ResourceModel(\"intMappingTypes\", \"intMappingTypes\").getObject(),\n+                        new PropertyModel<IntMappingType>(mapItem, \"intMappingType\"),\n+                        false);\n+                intMappingTypes.setNullValid(true).setRequired(true).hideLabel();\n+                intMappingTypes.setChoices(attrTypes);\n+                item.add(intMappingTypes);\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // Internal attribute\n+                // -------------------------------\n+                final AjaxDropDownChoicePanel<String> intAttrNames = new AjaxDropDownChoicePanel<>(\n+                        \"intAttrNames\",\n+                        getString(\"intAttrNames\"),\n+                        new PropertyModel<String>(mapItem, \"intAttrName\"),\n+                        false);\n+                intAttrNames.setChoices(Collections.<String>emptyList());\n+                intAttrNames.setNullValid(true).setRequired(true).hideLabel();\n+                item.add(intAttrNames);\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // External attribute\n+                // -------------------------------\n+                final AjaxTextFieldPanel extAttrNames = new AjaxTextFieldPanel(\n+                        \"extAttrName\",\n+                        new ResourceModel(\"extAttrNames\", \"extAttrNames\").getObject(),\n+                        new PropertyModel<String>(mapItem, \"extAttrName\"));\n+                extAttrNames.setChoices(schemaNames);\n+\n+                boolean required = !mapItem.isPassword();\n+                extAttrNames.setRequired(required).hideLabel();\n+                extAttrNames.setEnabled(required);\n+                item.add(extAttrNames);\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // Mandatory\n+                // -------------------------------\n+                final AjaxTextFieldPanel mandatory = new AjaxTextFieldPanel(\n+                        \"mandatoryCondition\",\n+                        new ResourceModel(\"mandatoryCondition\", \"mandatoryCondition\").getObject(),\n+                        new PropertyModel<String>(mapItem, \"mandatoryCondition\"));\n+                mandatory.hideLabel();\n+                mandatory.setChoices(Arrays.asList(new String[] { \"true\", \"false\" }));\n+                item.add(mandatory);\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // Connector object key\n+                // -------------------------------\n+                final AjaxCheckBoxPanel connObjectKey = new AjaxCheckBoxPanel(\n+                        \"connObjectKey\",\n+                        new ResourceModel(\"connObjectKey\", \"connObjectKey\").getObject(),\n+                        new PropertyModel<Boolean>(mapItem, \"connObjectKey\"), false);\n+                connObjectKey.hideLabel();\n+                item.add(connObjectKey);\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // Password\n+                // -------------------------------\n+                final AjaxCheckBoxPanel password = new AjaxCheckBoxPanel(\n+                        \"password\",\n+                        new ResourceModel(\"password\", \"password\").getObject(),\n+                        new PropertyModel<Boolean>(mapItem, \"password\"), false);\n+                item.add(password.hideLabel());\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // Purpose\n+                // -------------------------------\n+                final WebMarkupContainer purpose = new WebMarkupContainer(\"purpose\");\n+                purpose.setOutputMarkupId(Boolean.TRUE);\n+\n+                final MappingPurposePanel panel = new MappingPurposePanel(\n+                        \"purposeActions\", new PropertyModel<MappingPurpose>(mapItem, \"purpose\"), purpose);\n+\n+                purpose.add(panel.setRenderBodyOnly(true));\n+                item.add(purpose);\n+                // -------------------------------\n+\n+                //--------------------------------\n+                // Remove\n+                // -------------------------------\n                 final ActionLinksPanel.Builder<Serializable> actions = ActionLinksPanel.builder();\n                 actions.add(new ActionLink<Serializable>() {\n \n@@ -242,47 +370,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         }\n                     }\n                 }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_UPDATE);\n-\n                 item.add(actions.build(\"toRemove\"));\n-\n-                final AjaxDropDownChoicePanel<String> intAttrNames = new AjaxDropDownChoicePanel<>(\n-                        \"intAttrNames\",\n-                        getString(\"intAttrNames\"),\n-                        new PropertyModel<String>(mapItem, \"intAttrName\"),\n-                        false);\n-                intAttrNames.setChoices(schemaNames);\n-                intAttrNames.setRequired(true).hideLabel();\n-\n-                intAttrNames.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-                    private static final long serialVersionUID = -1107858522700306810L;\n-\n-                    @Override\n-                    protected void onUpdate(final AjaxRequestTarget target) {\n-                    }\n-                });\n-                item.add(intAttrNames);\n-\n-                final List<IntMappingType> attrTypes = new ArrayList<>(getAttributeTypes(entity));\n-                final AjaxDropDownChoicePanel<IntMappingType> intMappingTypes = new AjaxDropDownChoicePanel<>(\n-                        \"intMappingTypes\",\n-                        new ResourceModel(\"intMappingTypes\", \"intMappingTypes\").getObject(),\n-                        new PropertyModel<IntMappingType>(mapItem, \"intMappingType\"));\n-                intMappingTypes.setRequired(true).hideLabel();\n-                intMappingTypes.setChoices(attrTypes);\n-                item.add(intMappingTypes);\n-\n-                final AjaxDropDownChoicePanel<AnyTypeKind> entitiesPanel = new AjaxDropDownChoicePanel<>(\n-                        \"entities\",\n-                        new ResourceModel(\"entities\", \"entities\").getObject(),\n-                        new Model<>(entity));\n-\n-                entitiesPanel.hideLabel();\n-                entitiesPanel.setChoices(provisionTO.getAnyType().equals(AnyTypeKind.GROUP.name())\n-                        ? Collections.<AnyTypeKind>singletonList(AnyTypeKind.GROUP)\n-                        : Arrays.asList(AnyTypeKind.values()));\n-\n-                entitiesPanel.setStyleSheet(false, DEF_FIELD_STYLE);\n+                // -------------------------------\n \n                 entitiesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n@@ -300,38 +389,30 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         target.add(intAttrNames);\n                     }\n                 });\n-                item.add(entitiesPanel);\n \n-                final FieldPanel<String> extAttrNames = new AjaxTextFieldPanel(\n-                        \"extAttrName\",\n-                        new ResourceModel(\"extAttrNames\", \"extAttrNames\").getObject(),\n-                        new PropertyModel<String>(mapItem, \"extAttrName\"));\n-                ((AjaxTextFieldPanel) extAttrNames).setChoices(schemaNames);\n+                intMappingTypes.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n-                boolean required = false;\n-                if (mapItem.isPassword()) {\n-                    ((AjaxTextFieldPanel) extAttrNames).setModelObject(null);\n-                } else {\n-                    required = true;\n-                }\n-                extAttrNames.setRequired(required).hideLabel();\n-                extAttrNames.setEnabled(required);\n-                item.add(extAttrNames);\n+                    private static final long serialVersionUID = -1107858522700306810L;\n \n-                final AjaxTextFieldPanel mandatory = new AjaxTextFieldPanel(\n-                        \"mandatoryCondition\",\n-                        new ResourceModel(\"mandatoryCondition\", \"mandatoryCondition\").getObject(),\n-                        new PropertyModel<String>(mapItem, \"mandatoryCondition\"));\n-                mandatory.hideLabel();\n-                mandatory.setChoices(Arrays.asList(new String[] { \"true\", \"false\" }));\n-                item.add(mandatory);\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                        setAttrNames(intMappingTypes.getModelObject(), intAttrNames);\n+                        target.add(intAttrNames);\n \n-                final AjaxCheckBoxPanel connObjectKey = new AjaxCheckBoxPanel(\n-                        \"connObjectKey\",\n-                        new ResourceModel(\"connObjectKey\", \"connObjectKey\").getObject(),\n-                        new PropertyModel<Boolean>(mapItem, \"connObjectKey\"));\n+                        setConnObjectKey(intMappingTypes.getModelObject(), connObjectKey, password);\n+                        target.add(connObjectKey);\n+                    }\n+                });\n+\n+                intAttrNames.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                    private static final long serialVersionUID = -1107858522700306810L;\n+\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                    }\n+                });\n \n-                connObjectKey.hideLabel();\n                 connObjectKey.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n                     private static final long serialVersionUID = -1107858522700306810L;\n@@ -348,60 +429,38 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         target.add(mandatory);\n                     }\n                 });\n-                item.add(connObjectKey);\n-\n-                final AjaxCheckBoxPanel password = new AjaxCheckBoxPanel(\n-                        \"password\",\n-                        new ResourceModel(\"password\", \"password\").getObject(),\n-                        new PropertyModel<Boolean>(mapItem, \"password\"));\n \n-                password.hideLabel();\n                 password.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n                     private static final long serialVersionUID = -1107858522700306810L;\n \n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n                         extAttrNames.setEnabled(!mapItem.isConnObjectKey() && !password.getModelObject());\n-                        extAttrNames.setModelObject(null);\n+                        extAttrNames.setModelObject(password.getModelObject()\n+                                ? ConnIdSpecialAttributeName.PASSWORD : extAttrNames.getModelObject());\n                         extAttrNames.setRequired(!password.getModelObject());\n                         target.add(extAttrNames);\n \n                         setConnObjectKey(intMappingTypes.getModelObject(), connObjectKey, password);\n                         target.add(connObjectKey);\n                     }\n                 });\n-                item.add(password);\n-                if (!AnyTypeKind.USER.name().equals(provisionTO.getAnyType())) {\n-                    password.setVisible(false);\n-                }\n-\n-                final WebMarkupContainer purpose = new WebMarkupContainer(\"purpose\");\n-                purpose.setOutputMarkupId(Boolean.TRUE);\n \n-                final MappingPurposePanel panel = new MappingPurposePanel(\n-                        \"purposeActions\", new PropertyModel<MappingPurpose>(mapItem, \"purpose\"), purpose);\n-\n-                purpose.add(panel.setRenderBodyOnly(true));\n-\n-                item.add(purpose);\n-\n-                intMappingTypes.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-                    private static final long serialVersionUID = -1107858522700306810L;\n+                setAttrNames(mapItem.getIntMappingType(), intAttrNames);\n+                setConnObjectKey(mapItem.getIntMappingType(), connObjectKey, password);\n \n-                    @Override\n-                    protected void onUpdate(final AjaxRequestTarget target) {\n-                        setAttrNames(intMappingTypes.getModelObject(), intAttrNames);\n-                        target.add(intAttrNames);\n+                if (!AnyTypeKind.USER.name().equals(provisionTO.getAnyType())) {\n+                    password.setVisible(false);\n \n-                        setConnObjectKey(intMappingTypes.getModelObject(), connObjectKey, password);\n-                        target.add(connObjectKey);\n+                    // Changes required by clone ....\n+                    extAttrNames.setEnabled(!mapItem.isConnObjectKey());\n+                    if (mapItem.isPassword()) {\n+                        // re-enable if and only if cloned objec mapping item was a password\n+                        intAttrNames.setEnabled(true);\n                     }\n-                });\n-\n-                setAttrNames(mapItem.getIntMappingType(), intAttrNames);\n-                setConnObjectKey(mapItem.getIntMappingType(), connObjectKey, password);\n+                    mapItem.setPassword(false);\n+                }\n             }\n         };\n \n@@ -443,8 +502,9 @@ public boolean evaluate(final ConnIdObjectClassTO object) {\n \n                     @Override\n                     public boolean evaluate(final String object) {\n-                        return !(\"__NAME__\".equals(object) || \"__ENABLE__\".equals(object)\n-                                || \"__PASSWORD__\".equals(object));\n+                        return !(ConnIdSpecialAttributeName.NAME.equals(object)\n+                                || ConnIdSpecialAttributeName.ENABLE.equals(object)\n+                                || ConnIdSpecialAttributeName.PASSWORD.equals(object));\n                     }\n                 }));\n     }\n@@ -472,30 +532,60 @@ private void setEnabled() {\n      * @param toBeUpdated drop down choice to be updated.\n      */\n     private void setAttrNames(final IntMappingType type, final AjaxDropDownChoicePanel<String> toBeUpdated) {\n+\n         toBeUpdated.setRequired(true);\n         toBeUpdated.setEnabled(true);\n \n         if (type == null || type.getAnyTypeKind() == null) {\n             toBeUpdated.setChoices(Collections.<String>emptyList());\n         } else {\n+            Collection<AnyTypeTO> anyTypeTOs = type.getAnyTypeKind() == AnyTypeKind.ANY_OBJECT\n+                    ? CollectionUtils.select(anyTypeRestClient.list(), new Predicate<AnyTypeTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final AnyTypeTO object) {\n+                            return object.getKind() == AnyTypeKind.ANY_OBJECT;\n+                        }\n+                    })\n+                    : Collections.singletonList(anyTypeRestClient.get(type.getAnyTypeKind().name()));\n+\n+            final List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n+            for (AnyTypeTO anyTypeTO : anyTypeTOs) {\n+                anyTypeClassTOs.addAll(anyTypeClassRestClient.list(anyTypeTO.getClasses()));\n+            }\n+\n+            List<String> choices;\n+\n             switch (type) {\n                 // user attribute names\n                 case UserPlainSchema:\n                 case GroupPlainSchema:\n                 case AnyObjectPlainSchema:\n-                    toBeUpdated.setChoices(schemaRestClient.getPlainSchemaNames());\n+                    final Set<String> plains = new HashSet<>();\n+                    for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n+                        plains.addAll(anyTypeClassTO.getPlainSchemas());\n+                    }\n+                    choices = new ArrayList<>(plains);\n                     break;\n \n                 case UserDerivedSchema:\n                 case GroupDerivedSchema:\n                 case AnyObjectDerivedSchema:\n-                    toBeUpdated.setChoices(schemaRestClient.getDerSchemaNames());\n+                    final Set<String> deriveds = new HashSet<>();\n+                    for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n+                        deriveds.addAll(anyTypeClassTO.getDerSchemas());\n+                    }\n+                    choices = new ArrayList<>(deriveds);\n                     break;\n \n                 case UserVirtualSchema:\n                 case GroupVirtualSchema:\n                 case AnyObjectVirtualSchema:\n-                    toBeUpdated.setChoices(schemaRestClient.getVirSchemaNames());\n+                    final Set<String> virtuals = new HashSet<>();\n+                    for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n+                        virtuals.addAll(anyTypeClassTO.getVirSchemas());\n+                    }\n+                    choices = new ArrayList<>(virtuals);\n                     break;\n \n                 case UserKey:\n@@ -507,8 +597,10 @@ private void setAttrNames(final IntMappingType type, final AjaxDropDownChoicePan\n                 default:\n                     toBeUpdated.setRequired(false);\n                     toBeUpdated.setEnabled(false);\n-                    toBeUpdated.setChoices(Collections.<String>emptyList());\n+                    choices = Collections.<String>emptyList();\n             }\n+            Collections.sort(choices);\n+            toBeUpdated.setChoices(choices);\n         }\n     }\n "},{"sha":"f9ebc9b597a7f748977d27839768938a6e7d54c3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceModal.java","status":"modified","additions":32,"deletions":7,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -21,7 +21,9 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -90,9 +92,31 @@ public Panel getPanel(final String panelId) {\n         //--------------------------------\n         // Resource provision panels\n         //--------------------------------\n-        final ListViewPanel.Builder<ProvisionTO> builder = new ListViewPanel.Builder<>(ProvisionTO.class, pageRef);\n+        final ListViewPanel.Builder<ProvisionTO> builder\n+                = new ListViewPanel.Builder<ProvisionTO>(ProvisionTO.class, pageRef) {\n+\n+            private static final long serialVersionUID = 4907732721283972943L;\n+\n+            @Override\n+            protected ProvisionTO getActualItem(final ProvisionTO item, final List<ProvisionTO> list) {\n+                return item == null\n+                        ? null\n+                        : IteratorUtils.find(list.iterator(), new Predicate<ProvisionTO>() {\n+\n+                            @Override\n+                            public boolean evaluate(final ProvisionTO in) {\n+                                return ((item.getKey() == null && in.getKey() == null)\n+                                        || (in.getKey() != null && in.getKey().equals(item.getKey())))\n+                                        && ((item.getAnyType() == null && in.getAnyType() == null)\n+                                        || (in.getAnyType() != null && in.getAnyType().equals(item.getAnyType())));\n+                            }\n+                        });\n+            }\n+        };\n+\n         builder.setItems(model.getObject().getProvisions());\n         builder.includes(\"anyType\", \"objectClass\");\n+        builder.setReuseItem(false);\n \n         builder.\n                 addAction(new ActionLink<ProvisionTO>() {\n@@ -122,8 +146,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                         provisionTO.setSyncToken(null);\n-                        send(pageRef.getPage(), Broadcast.DEPTH,\n-                                new AjaxWizard.NewItemFinishEvent<>(provisionTO, target));\n+                        send(pageRef.getPage(), Broadcast.DEPTH, new ListViewPanel.ListViewReload(target));\n                     }\n                 }, ActionLink.ActionType.RESET_TIME, StandardEntitlement.RESOURCE_UPDATE).\n                 addAction(new ActionLink<ProvisionTO>() {\n@@ -132,8 +155,11 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        send(pageRef.getPage(), Broadcast.DEPTH,\n-                                new AjaxWizard.NewItemActionEvent<>(SerializationUtils.clone(provisionTO), target));\n+                        final ProvisionTO clone = SerializationUtils.clone(provisionTO);\n+                        clone.setKey(0L);\n+                        clone.setAnyType(null);\n+                        clone.setObjectClass(null);\n+                        send(pageRef.getPage(), Broadcast.DEPTH, new AjaxWizard.NewItemActionEvent<>(clone, target));\n                     }\n                 }, ActionLink.ActionType.CLONE, StandardEntitlement.RESOURCE_CREATE).\n                 addAction(new ActionLink<ProvisionTO>() {\n@@ -143,8 +169,7 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n                         model.getObject().getProvisions().remove(provisionTO);\n-                        send(pageRef.getPage(), Broadcast.DEPTH,\n-                                new AjaxWizard.NewItemFinishEvent<ProvisionTO>(null, target));\n+                        send(pageRef.getPage(), Broadcast.DEPTH, new ListViewPanel.ListViewReload(target));\n                     }\n                 }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_DELETE);\n "},{"sha":"9d714130e49a0054382e7ccf65d403d53fba598b","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -77,7 +77,7 @@ public String transform(final ProvisionTO provisionTO) {\n             final List<String> res = new ArrayList<>();\n \n             CollectionUtils.filter(CollectionUtils.collect(new AnyTypeRestClient().list(),\n-                            EntityTOUtils.<String, AnyTypeTO>keyTransformer(), res),\n+                    EntityTOUtils.<String, AnyTypeTO>keyTransformer(), res),\n                     new Predicate<String>() {\n \n                 @Override\n@@ -242,7 +242,6 @@ protected WizardModel buildModelSteps(final ProvisionTO modelObject, final Wizar\n \n     @Override\n     protected Serializable onApplyInternal(final ProvisionTO modelObject) {\n-        this.resourceTO.getProvisions().add(modelObject);\n         return modelObject;\n     }\n }"},{"sha":"6aec71b9d911d9d375dca002ae7f278d657d47ad","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -471,7 +471,7 @@ div.listview-actions a {\n }\n \n .btn-circle, .circular-actions a {\n-  border-radius: 15px;\n+  border-radius: 15px !important;\n   font-size: 12px;\n   height: 30px;\n   line-height: 1.42857;"},{"sha":"3d7486b89323851e41483bc0b85939e4d93b2b60","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/ResourceDetailsPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.html?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -57,7 +57,7 @@\n       </div>\n \n       <div class=\"form-group\">\n-        <span wicket:id=\"syncTraceLevel\">[syncTraceLevel]</span>\n+        <span wicket:id=\"pullTraceLevel\">[pullTraceLevel]</span>\n       </div>\n     </div>\n "},{"sha":"b025aa9aa5ddf8766237556835fd5f36d216f9e1","filename":"fit/console-reference/src/test/resources/core-rebel.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Fcore-rebel.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Fcore-rebel.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Fcore-rebel.xml?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -66,7 +66,7 @@ under the License.\n \n   <web>\n     <link target=\"/\">\n-      <dir name=\"${basedir}/../fit/core-reference/src/main/webapp\">\n+      <dir name=\"${basedir}/../core-reference/src/main/webapp\">\n       </dir>\n     </link>\n     <link target=\"/\">"},{"sha":"04a2808f9a9932f8fefbd131cfc636ca4add055e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19e35153170af40169fd1d42bcc2551dc73190/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19e35153170af40169fd1d42bcc2551dc73190/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=3c19e35153170af40169fd1d42bcc2551dc73190","patch":"@@ -59,6 +59,22 @@ public void showTopologyToggleMenu() {\n         wicketTester.assertComponent(\"body:toggle:togglePanelContainer:container:actions:edit\", AjaxLink.class);\n     }\n \n+    @Test\n+    public void editProvisioning() {\n+        wicketTester.clickLink(\"body:topologyLI:topology\");\n+        wicketTester.executeAjaxEvent(\"body:resources:8:resources:0:res\", Constants.ON_CLICK);\n+        wicketTester.clickLink(\"body:toggle:togglePanelContainer:container:actions:edit\");\n+\n+        wicketTester.clickLink(\n+                \"body:toggle:outerObjectsRepeater:0:outer:form:content:tabbedPanel:tabs-container:tabs:1:link\");\n+\n+        wicketTester.clickLink(\"body:toggle:outerObjectsRepeater:0:outer:form:content:tabbedPanel:panel:container:\"\n+                + \"content:group:beans:0:actions:panelMapping:mappingLink\");\n+\n+        wicketTester.assertComponent(\"body:toggle:outerObjectsRepeater:0:outer:form:content:tabbedPanel:panel:\"\n+                + \"container:content:wizard:form:view:mapping:mappingContainer:mappings:1\", WebMarkupContainer.class);\n+    }\n+\n     @Test\n     public void executePullTask() {\n         wicketTester.clickLink(\"body:topologyLI:topology\");"}]}