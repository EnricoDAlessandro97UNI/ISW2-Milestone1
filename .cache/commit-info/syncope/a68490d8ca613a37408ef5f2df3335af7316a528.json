{"sha":"a68490d8ca613a37408ef5f2df3335af7316a528","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE2ODQ5MGQ4Y2E2MTNhMzc0MDhlZjVmMmRmMzMzNWFmNzMxNmE1Mjg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-07T12:55:39Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-07T12:55:39Z"},"message":"Now dynamically (re)reload connector instances upon change\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246468 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b8c359f77a0faac49f862c25d0ce0fed788301d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b8c359f77a0faac49f862c25d0ce0fed788301d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a68490d8ca613a37408ef5f2df3335af7316a528","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a68490d8ca613a37408ef5f2df3335af7316a528","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a68490d8ca613a37408ef5f2df3335af7316a528","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a68490d8ca613a37408ef5f2df3335af7316a528/comments","author":null,"committer":null,"parents":[{"sha":"8bdd9e49189c36d2099009ba954c1f6a53069fc1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8bdd9e49189c36d2099009ba954c1f6a53069fc1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8bdd9e49189c36d2099009ba954c1f6a53069fc1"}],"stats":{"total":382,"additions":203,"deletions":179},"files":[{"sha":"edbc0f9041699858aea959d27e2e90b22fdcec61","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -21,13 +21,9 @@\n public class ConnectorInstanceTO extends AbstractBaseBean {\n \n     private Long id;\n-\n     private String bundleName;\n-\n     private String version;\n-\n     private String connectorName;\n-\n     private Set<PropertyTO> configuration;\n \n     public Long getId() {\n@@ -55,19 +51,23 @@ public void setVersion(String bundleversion) {\n     }\n \n     public Set<PropertyTO> getConfiguration() {\n-        if (this.configuration == null)\n+        if (this.configuration == null) {\n             this.configuration = new HashSet<PropertyTO>();\n+        }\n         return this.configuration;\n     }\n \n     public boolean addConfiguration(PropertyTO property) {\n-        if (this.configuration == null)\n+        if (this.configuration == null) {\n             this.configuration = new HashSet<PropertyTO>();\n+        }\n         return this.configuration.add(property);\n     }\n \n     public boolean removeConfiguration(PropertyTO property) {\n-        if (this.configuration == null) return true;\n+        if (this.configuration == null) {\n+            return true;\n+        }\n         return this.configuration.remove(property);\n     }\n "},{"sha":"7c92410653e4c92be912c77477753d245bb2ab0e","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceBeansLoader.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bdd9e49189c36d2099009ba954c1f6a53069fc1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bdd9e49189c36d2099009ba954c1f6a53069fc1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java?ref=8bdd9e49189c36d2099009ba954c1f6a53069fc1","patch":"@@ -1,107 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence;\n-\n-import java.util.List;\n-import java.util.Set;\n-import javax.servlet.ServletContextEvent;\n-import javax.servlet.ServletContextListener;\n-import org.identityconnectors.framework.api.ConnectorFacade;\n-import org.identityconnectors.framework.api.ConnectorInfoManager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.client.to.PropertyTO;\n-import org.syncope.core.persistence.beans.ConnectorInstance;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n-import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n-import org.syncope.core.rest.controller.ConnectorInstanceController;\n-import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n-\n-public class ConnectorInstanceBeansLoader implements ServletContextListener {\n-\n-    private static final Logger log = LoggerFactory.getLogger(\n-            ConnectorInstanceBeansLoader.class);\n-\n-    @Override\n-    public void contextInitialized(ServletContextEvent sce) {\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        DefaultListableBeanFactory beanFactory =\n-                (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-        ConnectorInstanceDAO connectorInstanceDAO =\n-                (ConnectorInstanceDAO) context.getBean(\n-                \"connectorInstanceDAOImpl\");\n-\n-        SyncopeConfigurationDAO syncopeConfigurationDAO =\n-                (SyncopeConfigurationDAO) context.getBean(\n-                \"syncopeConfigurationDAOImpl\");\n-\n-        SyncopeConfiguration syncopeConfiguration = null;\n-        try {\n-            syncopeConfiguration = syncopeConfigurationDAO.find(\n-                    \"identityconnectors.bundle.directory\");\n-        } catch (MissingConfKeyException e) {\n-            log.error(\"Missing configuration\", e);\n-        }\n-\n-        List<ConnectorInstance> instances = connectorInstanceDAO.findAll();\n-        Set<PropertyTO> properties = null;\n-\n-        for (ConnectorInstance instance : instances) {\n-            try {\n-\n-                properties = (Set<PropertyTO>) ConnectorInstanceDataBinder.buildFromXML(\n-                        instance.getXmlConfiguration());\n-\n-                ConnectorInfoManager manager =\n-                        ConnectorInstanceController.getConnectorManager(\n-                        syncopeConfiguration.getConfValue());\n-\n-                ConnectorFacade connector =\n-                        ConnectorInstanceController.getConnectorFacade(\n-                        manager,\n-                        instance.getBundleName(),\n-                        instance.getVersion(),\n-                        instance.getConnectorName(),\n-                        properties);\n-\n-                if (log.isInfoEnabled()) {\n-                    log.info(\"Connector instance \" + connector);\n-                }\n-\n-                beanFactory.registerSingleton(\n-                        instance.getId().toString(), connector);\n-\n-                if (log.isInfoEnabled()) {\n-                    log.info(\"Registered bean \" + instance.getId().toString());\n-                }\n-\n-            } catch (Throwable t) {\n-                log.error(\"While loading bundles\", t);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void contextDestroyed(ServletContextEvent sce) {\n-    }\n-}"},{"sha":"a7b77ff38f2180b00b843dacab5892f64747dbbb","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -0,0 +1,142 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import java.util.List;\n+import java.util.Set;\n+import javassist.NotFoundException;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.api.ConnectorInfoManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.client.to.PropertyTO;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.rest.controller.ConnectorInstanceController;\n+import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n+\n+/**\n+ * Load identity connector instances on application startup.\n+ */\n+public class ConnectorInstanceLoader implements ServletContextListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            ConnectorInstanceLoader.class);\n+\n+    private static ConnectorInfoManager getConnectorManager() {\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        SyncopeConfigurationDAO syncopeConfigurationDAO =\n+                (SyncopeConfigurationDAO) context.getBean(\n+                \"syncopeConfigurationDAOImpl\");\n+\n+        ConnectorInfoManager manager = null;\n+        try {\n+            SyncopeConfiguration connectorBundleDir =\n+                    syncopeConfigurationDAO.find(\n+                    \"identityconnectors.bundle.directory\");\n+            manager = ConnectorInstanceController.getConnectorManager(\n+                    connectorBundleDir.getConfValue());\n+        } catch (MissingConfKeyException e) {\n+            LOG.error(\"Missing configuration\", e);\n+        } catch (NotFoundException e) {\n+            LOG.error(\"Could not find Connector Manager\", e);\n+        }\n+\n+        return manager;\n+    }\n+\n+    private static synchronized DefaultListableBeanFactory getBeanFactory() {\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        return (DefaultListableBeanFactory) context.getBeanFactory();\n+    }\n+\n+    public static ConnectorFacade getConnectorFacade(final String id)\n+            throws BeansException {\n+\n+        return (ConnectorFacade) getBeanFactory().getBean(id);\n+    }\n+\n+    public static void registerConnectorFacade(final ConnectorInstance instance)\n+            throws NotFoundException {\n+\n+        if (getBeanFactory().containsSingleton(instance.getId().toString())) {\n+            removeConnectorFacade(instance.getId().toString());\n+        }\n+\n+        ConnectorFacade connector =\n+                ConnectorInstanceController.getConnectorFacade(\n+                getConnectorManager(),\n+                instance.getBundleName(),\n+                instance.getVersion(),\n+                instance.getConnectorName(),\n+                (Set<PropertyTO>) ConnectorInstanceDataBinder.buildFromXML(\n+                instance.getXmlConfiguration()));\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Connector instance \" + connector);\n+        }\n+\n+        getBeanFactory().registerSingleton(\n+                instance.getId().toString(), connector);\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Registered bean \" + instance.getId().toString());\n+        }\n+    }\n+\n+    public static void removeConnectorFacade(final String id) {\n+        getBeanFactory().destroySingleton(id);\n+    }\n+\n+    @Override\n+    public final void contextInitialized(final ServletContextEvent sce) {\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        ConnectorInstanceDAO connectorInstanceDAO =\n+                (ConnectorInstanceDAO) context.getBean(\n+                \"connectorInstanceDAOImpl\");\n+\n+        List<ConnectorInstance> instances = connectorInstanceDAO.findAll();\n+        for (ConnectorInstance instance : instances) {\n+            try {\n+                registerConnectorFacade(instance);\n+            } catch (NotFoundException e) {\n+                LOG.error(\"While loading connector bundle for instance \"\n+                        + instance, e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public final void contextDestroyed(final ServletContextEvent sce) {\n+    }\n+}"},{"sha":"973155ead7861b3b7723f75869f7d0c2fcf98b2a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -28,7 +28,10 @@\n @Transactional(rollbackFor = {Throwable.class})\n public abstract class AbstractDAOImpl implements DAO {\n \n-    protected static final Logger log =\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n             LoggerFactory.getLogger(AbstractDAOImpl.class);\n \n     @PersistenceContext(type = PersistenceContextType.EXTENDED)"},{"sha":"6fca044c4e32f8ca2149d2f60dff78464b84f4fe","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnectorInstanceDAOImpl.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -15,9 +15,11 @@\n package org.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n+import javassist.NotFoundException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n \n@@ -27,25 +29,35 @@ public class ConnectorInstanceDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public ConnectorInstance find(Long id) {\n+    public final ConnectorInstance find(final Long id) {\n         return entityManager.find(ConnectorInstance.class, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<ConnectorInstance> findAll() {\n+    public final List<ConnectorInstance> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM ConnectorInstance e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    public ConnectorInstance save(ConnectorInstance connector) {\n-        return entityManager.merge(connector);\n+    public final ConnectorInstance save(final ConnectorInstance connector) {\n+        ConnectorInstance actual = entityManager.merge(connector);\n+        try {\n+            ConnectorInstanceLoader.registerConnectorFacade(actual);\n+        } catch (NotFoundException e) {\n+            LOG.error(\"While restingering the connector facade for instance \"\n+                    + actual, e);\n+        }\n+\n+        return actual;\n     }\n \n     @Override\n-    public void delete(Long id) {\n+    public final void delete(final Long id) {\n         entityManager.remove(find(id));\n+\n+        ConnectorInstanceLoader.removeConnectorFacade(id.toString());\n     }\n }"},{"sha":"b9d6c0e8229314fd01974a3f57afed54e5b3ec5b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -47,8 +47,8 @@ public Membership find(SyncopeUser user, SyncopeRole role) {\n         try {\n             result = (Membership) query.getSingleResult();\n         } catch (NoResultException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"No membership was found for user \"\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"No membership was found for user \"\n                         + user + \" and role \" + role);\n             }\n         }"},{"sha":"18856af87c3c647932b70035f32d13a508e51439","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/OSWorkflowPropertyDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FOSWorkflowPropertyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FOSWorkflowPropertyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FOSWorkflowPropertyDAOImpl.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -47,7 +47,7 @@ public OSWorkflowProperty find(Long workflowEntryId, String propertyKey) {\n             result = (OSWorkflowProperty) query.getSingleResult();\n         } catch (NoResultException e) {\n         } catch (Throwable t) {\n-            log.error(\"Unexpected exception\", t);\n+            LOG.error(\"Unexpected exception\", t);\n         }\n \n         return result;"},{"sha":"66f2b4deb0499f8c7b345f59e1ea2f1642375b92","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -151,8 +151,8 @@ public void removeMapping(Long mappingId) {\n              * * RoleSchema\n              * * MembershipSchema\n              */\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Schema type \" + schemaType.getClassName());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Schema type \" + schemaType.getClassName());\n             }\n             AbstractSchema schema = find(schemaName,\n                     schemaType.getSchemaClass());\n@@ -167,8 +167,8 @@ public void removeMapping(Long mappingId) {\n              * * AccountId\n              * * Password\n              */\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Wrong schema type \" + schemaType.getClassName());\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Wrong schema type \" + schemaType.getClassName());\n             }\n         }\n         // --------------------------------------"},{"sha":"97eb9e0edada468a6ee362106ade5bdeb1018b06","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfigurationDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -58,7 +58,7 @@ public void delete(String name) {\n         try {\n             entityManager.remove(find(name));\n         } catch (MissingConfKeyException e) {\n-            log.error(\"Could not find \" + name, e);\n+            LOG.error(\"Could not find \" + name, e);\n         }\n     }\n }"},{"sha":"7bd2384786b862ebbe37f780d63bfbcd4df65f72","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -84,16 +84,16 @@ public List<SyncopeUser> findAll() {\n     @Transactional(readOnly = true)\n     public List<SyncopeUser> search(NodeSearchCondition searchCondition) {\n         String queryString = QueryUtils.getUserSearchQuery(searchCondition);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"About to execute query\\n\\t\" + queryString + \"\\n\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"About to execute query\\n\\t\" + queryString + \"\\n\");\n         }\n \n         List<SyncopeUser> result = Collections.EMPTY_LIST;\n         try {\n             Query query = entityManager.createQuery(queryString);\n             result = query.getResultList();\n         } catch (Throwable t) {\n-            log.error(\"While executing query\\n\\t\" + queryString + \"\\n\", t);\n+            LOG.error(\"While executing query\\n\\t\" + queryString + \"\\n\", t);\n         }\n \n         return result;"},{"sha":"eaef44def973c361de5a8c3e2ecfe52add26f9b4","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -216,7 +216,6 @@ private Set<String> provision(SyncopeUser user,\n                             preparedAttributes.values().iterator().next());\n                     propagate(resource, type, accountId, attributes);\n \n-\n                     provisioned.add(resource.getName());\n                 } catch (Throwable t) {\n                     LOG.error(\"Exception during provision on resource \""},{"sha":"de9131ba3f5b65dc372262b30ef483c96f34c4e6","filename":"core/src/main/java/org/syncope/core/persistence/util/ApplicationContextManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Futil%2FApplicationContextManager.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -21,7 +21,8 @@ public class ApplicationContextManager {\n     private static ConfigurableApplicationContext ctx;\n \n     public static void setApplicationContext(\n-            ConfigurableApplicationContext applicationContext) {\n+            final ConfigurableApplicationContext applicationContext) {\n+\n         ctx = applicationContext;\n     }\n "},{"sha":"29e08fd76560a45716caa09efa3bc83cc41fcb60","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":10,"deletions":27,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -30,7 +30,6 @@\n import org.identityconnectors.common.IOUtil;\n import org.identityconnectors.framework.api.APIConfiguration;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n import org.identityconnectors.framework.api.ConnectorInfo;\n@@ -63,7 +62,9 @@ public class ConnectorInstanceController extends AbstractController {\n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n     @Autowired\n-    SyncopeConfigurationDAO syncopeConfigurationDAO;\n+    private SyncopeConfigurationDAO syncopeConfigurationDAO;\n+    @Autowired\n+    private ConnectorInstanceDataBinder binder;\n \n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n@@ -76,9 +77,6 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n             log.debug(\"Create called with configuration \" + connectorTO);\n         }\n \n-        ConnectorInstanceDataBinder binder =\n-                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n-\n         ConnectorInstance actual = null;\n \n         try {\n@@ -88,7 +86,6 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n \n             // Everything went out fine, we can flush to the database\n             actual = connectorInstanceDAO.save(connectorInstance);\n-\n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + connectorTO, e);\n \n@@ -143,9 +140,6 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n             log.debug(\"update called with configuration \" + connectorTO);\n         }\n \n-        ConnectorInstanceDataBinder binder =\n-                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n-\n         ConnectorInstance actual = null;\n \n         try {\n@@ -154,9 +148,7 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n                     connectorTO.getId(), connectorTO);\n \n             // Everything went out fine, we can flush to the database\n-            actual = connectorInstanceDAO.save(\n-                    connectorInstance);\n-\n+            actual = connectorInstanceDAO.save(connectorInstance);\n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + connectorTO, e);\n \n@@ -254,9 +246,6 @@ public ConnectorInstanceTOs list() {\n \n         ConnectorInstanceTOs connectorInstanceTOs = new ConnectorInstanceTOs();\n \n-        ConnectorInstanceDataBinder binder =\n-                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n-\n         for (ConnectorInstance connector : connectorInstances) {\n             connectorInstanceTOs.addInstance(\n                     binder.getConnectorInstanceTO(connector));\n@@ -280,9 +269,6 @@ public ConnectorInstanceTO read(HttpServletResponse response,\n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n \n-        ConnectorInstanceDataBinder binder =\n-                new ConnectorInstanceDataBinder(connectorInstanceDAO);\n-\n         return binder.getConnectorInstanceTO(connectorInstance);\n     }\n \n@@ -445,15 +431,12 @@ public static ConnectorFacade getConnectorFacade(\n         }\n \n         // Print out what the properties are (not necessary)\n-        List<String> propertyNames = properties.getPropertyNames();\n-\n-        for (String propName : propertyNames) {\n-            ConfigurationProperty prop = properties.getProperty(propName);\n-\n-            if (log.isDebugEnabled()) {\n-                log.debug(\n-                        \"\\nProperty Name: \" + prop.getName()\n-                        + \"\\nProperty Type: \" + prop.getType());\n+        if (log.isDebugEnabled()) {\n+            for (String propName : properties.getPropertyNames()) {\n+                log.debug(\"\\nProperty Name: \"\n+                        + properties.getProperty(propName).getName()\n+                        + \"\\nProperty Type: \"\n+                        + properties.getProperty(propName).getType());\n             }\n         }\n "},{"sha":"3e79986eea8b38df14cf5f3ca142b9c5aa5aaa5d","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":9,"deletions":18,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -43,13 +43,8 @@ public class ConnectorInstanceDataBinder {\n             ConnectorInstanceDataBinder.class);\n     private static final String[] ignoreProperties = {\n         \"id\", \"resources\", \"xmlConfiguration\", \"configuration\"};\n-    private ConnectorInstanceDAO connectorInstanceDAO;\n-\n     @Autowired\n-    public ConnectorInstanceDataBinder(\n-            ConnectorInstanceDAO connectorInstanceDAO) {\n-        this.connectorInstanceDAO = connectorInstanceDAO;\n-    }\n+    private ConnectorInstanceDAO connectorInstanceDAO;\n \n     public ConnectorInstance getConnectorInstance(\n             ConnectorInstanceTO connectorTO)\n@@ -145,8 +140,11 @@ public ConnectorInstance updateConnectorInstance(\n         }\n \n         try {\n-            log.error(URLEncoder.encode(\n-                    serializeToXML(connectorTO.getConfiguration()), \"UTF-8\"));\n+            if (log.isDebugEnabled()) {\n+                log.debug(URLEncoder.encode(\n+                        serializeToXML(connectorTO.getConfiguration()),\n+                        \"UTF-8\"));\n+            }\n             // Throw composite exception if there is at least one element set\n             // in the composing exceptions\n         } catch (UnsupportedEncodingException ex) {\n@@ -169,7 +167,7 @@ public ConnectorInstance updateConnectorInstance(\n \n     public ConnectorInstanceTO getConnectorInstanceTO(\n             ConnectorInstance connectorInstance) {\n-        \n+\n         ConnectorInstanceTO connectorInstanceTO =\n                 new ConnectorInstanceTO();\n \n@@ -187,7 +185,6 @@ public ConnectorInstanceTO getConnectorInstanceTO(\n \n     public static String serializeToXML(Object obj) {\n         try {\n-\n             ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n             XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n             encoder.writeObject(obj);\n@@ -198,16 +195,13 @@ public static String serializeToXML(Object obj) {\n \n             return URLEncoder.encode(res, \"UTF-8\");\n         } catch (Throwable t) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Exception during connector serialization\", t);\n-            }\n+            log.error(\"Exception during connector serialization\", t);\n             return null;\n         }\n     }\n \n     public static Object buildFromXML(String xml) {\n         try {\n-\n             ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n                     URLDecoder.decode(xml, \"UTF-8\").getBytes());\n \n@@ -216,11 +210,8 @@ public static Object buildFromXML(String xml) {\n             decoder.close();\n \n             return object;\n-\n         } catch (Throwable t) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Exception during connector serialization\", t);\n-            }\n+            log.error(\"Exception during connector deserialization\", t);\n             return null;\n         }\n     }"},{"sha":"5920ba49108cf953969387ab3e9b9e2957adc98e","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a68490d8ca613a37408ef5f2df3335af7316a528/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=a68490d8ca613a37408ef5f2df3335af7316a528","patch":"@@ -35,7 +35,7 @@\n         <listener-class>org.syncope.core.persistence.DefaultContentLoader</listener-class>\n     </listener>\n     <listener>\n-        <listener-class>org.syncope.core.persistence.ConnectorInstanceBeansLoader</listener-class>\n+        <listener-class>org.syncope.core.persistence.ConnectorInstanceLoader</listener-class>\n     </listener>\n \n     <servlet>"}]}