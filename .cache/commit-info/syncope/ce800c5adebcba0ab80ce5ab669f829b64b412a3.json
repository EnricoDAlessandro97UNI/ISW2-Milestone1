{"sha":"ce800c5adebcba0ab80ce5ab669f829b64b412a3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNlODAwYzVhZGViY2JhMGFiODBjZTVhYjY2OWY4MjliNjRiNDEyYTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-21T15:15:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-21T15:15:45Z"},"message":"[SYNCOPE-319] Some more refinements\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1448677 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4692e8c9ed6e26eed82a4e5867a231032d06bbda","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4692e8c9ed6e26eed82a4e5867a231032d06bbda"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ce800c5adebcba0ab80ce5ab669f829b64b412a3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce800c5adebcba0ab80ce5ab669f829b64b412a3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce800c5adebcba0ab80ce5ab669f829b64b412a3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce800c5adebcba0ab80ce5ab669f829b64b412a3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"329bc0d3fe85a17219de7799741e181a1695f3d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/329bc0d3fe85a17219de7799741e181a1695f3d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/329bc0d3fe85a17219de7799741e181a1695f3d2"}],"stats":{"total":194,"additions":99,"deletions":95},"files":[{"sha":"3e3bc8741b0c5cd2364b3b07ef708de8c5650b4e","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeClientExceptionType.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -29,6 +29,7 @@ public enum SyncopeClientExceptionType {\n     GenericPersistence(\"Syncope.GenericPersistence\", \"Syncope.GenericPersistence.cause\"),\r\n     InvalidLogger(\"Syncope.InvalidLogger\", \"Syncope.InvalidLogger.message\"),\r\n     InvalidConnInstance(\"Syncope.InvalidConnInstance\", \"Syncope.InvalidConnInstance.message\"),\r\n+    InvalidConnIdConf(\"Syncope.InvalidConnIdConf\", \"Syncope.InvalidConnIdConf.message\"),\r\n     InvalidPasswordPolicy(\"Syncope.InvalidPasswordPolicy\", \"Syncope.InvalidPasswordPolicy.reason\"),\r\n     InvalidAccountPolicy(\"Syncope.InvalidAccountPolicy\", \"Syncope.InvalidAccountPolicy.reason\"),\r\n     InvalidSyncPolicy(\"Syncope.InvalidSyncPolicy\", \"Syncope.InvalidSyncPolicy.reason\"),\r\n@@ -38,8 +39,8 @@ public enum SyncopeClientExceptionType {\n     InvalidSchemaDefinition(\"Syncope.InvalidSchemaDefinition\", \"\"),\r\n     InvalidSearchCondition(\"Syncope.InvalidSearchCondition\", \"\"),\r\n     InvalidPropagationTaskExecReport(\r\n-            \"Syncope.InvalidPropagationTaskExecReport\",\r\n-            \"Syncope.InvalidPropagationTaskExecReport.element\"),\r\n+    \"Syncope.InvalidPropagationTaskExecReport\",\r\n+    \"Syncope.InvalidPropagationTaskExecReport.element\"),\r\n     InvalidUSchema(\"Syncope.InvalidUSchemaUpdate\", \"Syncope.InvalidUSchemaUpdate.name\"),\r\n     InvalidUDerSchema(\"Syncope.InvalidUDerSchemaUpdate\", \"Syncope.InvalidUDerSchemaUpdate.name\"),\r\n     InvalidUVirSchema(\"Syncope.InvalidUVirSchemaUpdate\", \"Syncope.InvalidUVirSchemaUpdate.name\"),\r\n@@ -70,14 +71,12 @@ public enum SyncopeClientExceptionType {\n \r\n     private String elementHeaderName;\r\n \r\n-    private SyncopeClientExceptionType(String headerValue, String elementHeaderName) {\r\n-\r\n+    private SyncopeClientExceptionType(final String headerValue, final String elementHeaderName) {\r\n         this.headerValue = headerValue;\r\n         this.elementHeaderName = elementHeaderName;\r\n     }\r\n \r\n-    public static SyncopeClientExceptionType getFromHeaderValue(String exceptionTypeHeaderValue) {\r\n-\r\n+    public static SyncopeClientExceptionType getFromHeaderValue(final String exceptionTypeHeaderValue) {\r\n         SyncopeClientExceptionType result = null;\r\n         for (SyncopeClientExceptionType syncopeClientExceptionType : values()) {\r\n             if (exceptionTypeHeaderValue.equals(syncopeClientExceptionType.getHeaderValue())) {\r"},{"sha":"0743ca6e61a333cd30d4fc8e9a8e96091e1ff559","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -119,6 +119,7 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n                     error(getString(\"error\") + \": \" + e.getMessage());\n                 }\n                 target.add(feedbackPanel);\n+                target.add(connectorContainer);\n             }\n \n             @Override\n@@ -578,4 +579,4 @@ public List<ConnInstanceTO> getConnectorsListDB() {\n             return connectorRestClient.getAllConnectors();\n         }\n     }\n-}\n+}\n\\ No newline at end of file"},{"sha":"0fec863719318ae2391635f1f6e1ee0010d6e838","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -49,7 +49,6 @@\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -87,14 +86,13 @@ public class ResourceConnConfPanel extends Panel {\n \n     private WebMarkupContainer connConfPropContainer;\n \n-    private AjaxLink check;\n+    private AjaxLink<Void> check;\n \n     private boolean createFlag;\n \n     private ResourceTO resourceTO;\n \n     public ResourceConnConfPanel(final String id, final ResourceTO resourceTO, final boolean createFlag) {\n-\n         super(id);\n         setOutputMarkupId(true);\n \n@@ -107,7 +105,7 @@ public ResourceConnConfPanel(final String id, final ResourceTO resourceTO, final\n         connConfPropContainer.setOutputMarkupId(true);\n         add(connConfPropContainer);\n \n-        check = new IndicatingAjaxLink(\"check\", new ResourceModel(\"check\")) {\n+        check = new IndicatingAjaxLink<Void>(\"check\") {\n \n             private static final long serialVersionUID = -4199438518229098169L;\n "},{"sha":"2d5ed1ea290f3f004f9c80d9485ef41d747e68a9","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":7,"deletions":17,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -43,20 +43,16 @@ public class ConnectorRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -6870366819966266617L;\n \n-    /**\n-     * Get all connectors.\n-     *\n-     * @return ConnectorInstanceTOs\n-     */\n     public List<ConnInstanceTO> getAllConnectors() {\n-        return getService(ConnectorService.class).list(SyncopeSession.get().getLocale().toString());\n+        List<ConnInstanceTO> connectors = Collections.<ConnInstanceTO>emptyList();\n+        try {\n+            connectors = getService(ConnectorService.class).list(SyncopeSession.get().getLocale().toString());\n+        } catch (Exception e) {\n+            LOG.error(\"While reading connectors\", e);\n+        }\n+        return connectors;\n     }\n \n-    /**\n-     * Create new connector.\n-     *\n-     * @param connectorTO\n-     */\n     public void create(final ConnInstanceTO connectorTO) {\n         connectorTO.setConfiguration(filterProperties(connectorTO.getConfiguration()));\n         getService(ConnectorService.class).create(connectorTO);\n@@ -164,12 +160,6 @@ public boolean check(final ConnInstanceTO connectorTO) {\n         return check;\n     }\n \n-    /**\n-     * Test resource connection.\n-     *\n-     * @param resourceTO resource\n-     * @return Connection status\n-     */\n     public boolean check(final ResourceTO resourceTO) {\n         boolean check = false;\n         try {"},{"sha":"fd517569cf0a1333bb46bbd6f6b6c7462a2cecd8","filename":"core/src/main/java/org/apache/syncope/core/init/ConnectorManager.java","status":"modified","additions":22,"deletions":10,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnectorManager.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.init;\n \n+import java.util.List;\n import java.util.Locale;\n import java.util.Set;\n import org.apache.commons.lang.SerializationUtils;\n@@ -31,11 +32,12 @@\n import org.apache.syncope.core.propagation.impl.ConnectorFacadeProxy;\n import org.apache.syncope.core.rest.data.ResourceDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n+import org.identityconnectors.framework.api.ConnectorInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -59,9 +61,7 @@ private String getBeanName(final ExternalResource resource) {\n     }\n \n     @Override\n-    public Connector getConnector(final ExternalResource resource)\n-            throws BeansException {\n-\n+    public Connector getConnector(final ExternalResource resource) {\n         // Try to re-create connector bean from underlying resource (useful for managing failover scenarios)\n         if (!ApplicationContextProvider.getBeanFactory().containsBean(getBeanName(resource))) {\n             registerConnector(resource);\n@@ -76,8 +76,10 @@ public Connector createConnector(final ConnInstance connInstance, final Set<Conn\n \n         connInstanceClone.setConfiguration(configuration);\n \n-        return ApplicationContextProvider.getBeanFactory().getBean(\n-                \"connectorFacadeProxy\", ConnectorFacadeProxy.class, connInstanceClone);\n+        Connector connector = new ConnectorFacadeProxy(connInstanceClone);\n+        ApplicationContextProvider.getBeanFactory().autowireBean(connector);\n+\n+        return connector;\n     }\n \n     @Override\n@@ -104,21 +106,30 @@ public void unregisterConnector(final String id) {\n     @Transactional(readOnly = true)\n     @Override\n     public void load() {\n-        // This is needed to avoid encoding problems when sending error messages via REST\n+        // This is needed in order to avoid encoding problems when sending error messages via REST\n         CurrentLocale.set(Locale.ENGLISH);\n \n-        // Next load all resource-specific connectors.\n+        // Init ConnIdBundleManager\n+        List<ConnectorInfo> connInfos = ConnIdBundleManager.getConnManager().getConnectorInfos();\n+        if (LOG.isDebugEnabled()) {\n+            for (ConnectorInfo connInfo : connInfos) {\n+                LOG.debug(\"Found connector bundle {}\", connInfo.getConnectorDisplayName());\n+            }\n+        }\n+\n+        // Next load all resource-specific connectors\n+        int connectors = 0;\n         for (ExternalResource resource : resourceDAO.findAll()) {\n             LOG.info(\"Registering resource-connector pair {}-{}\", resource, resource.getConnector());\n             try {\n                 registerConnector(resource);\n+                connectors++;\n             } catch (Exception e) {\n                 LOG.error(\"While registering resource-connector pair {}-{}\", resource, resource.getConnector(), e);\n             }\n         }\n \n-        LOG.info(\"Done loading {} connectors\", ApplicationContextProvider.getBeanFactory().getBeansOfType(\n-                ConnectorFacadeProxy.class, false, true).size());\n+        LOG.info(\"Done loading {} connectors\", connectors);\n     }\n \n     @Transactional(readOnly = true)\n@@ -137,6 +148,7 @@ public void unload() {\n         LOG.info(\"Done unloading {} connectors\", connectors);\n \n         ConnectorFacadeFactory.getInstance().dispose();\n+        ConnIdBundleManager.resetConnManager();\n         LOG.info(\"All connector resources disposed\");\n     }\n }"},{"sha":"430373ccf4543571ed8bbfd049b3dc6827be9b3c","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AsyncConnectorFacade.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -24,6 +24,7 @@\n import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeInfo;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n@@ -139,24 +140,21 @@ public Future<Set<Attribute>> getObjectAttributes(\n     }\n \n     @Async\n-    public Future<Set<String>> getSchema(\n-            final ConnectorFacade connector,\n-            final boolean showall) {\n+    public Future<Set<String>> getSchema(final ConnectorFacade connector, final boolean showall) {\n         final Set<String> resourceSchemaNames = new HashSet<String>();\n \n-        final Schema schema = connector.schema();\n-\n         try {\n+            final Schema schema = connector.schema();\n             for (ObjectClassInfo info : schema.getObjectClassInfo()) {\n                 for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n-                    if (showall || !isSpecialName(attrInfo.getName())) {\n+                    if (showall || !AttributeUtil.isSpecialName(attrInfo.getName())) {\n                         resourceSchemaNames.add(attrInfo.getName());\n                     }\n                 }\n             }\n         } catch (Exception e) {\n             // catch exception in order to manage unpredictable behaviors\n-            LOG.debug(\"Unsupported operation {}\", e);\n+            LOG.debug(\"While reading schema on connector {}\", connector, e);\n         }\n \n         return new AsyncResult<Set<String>>(resourceSchemaNames);\n@@ -173,8 +171,4 @@ public Future<String> test(final ConnectorFacade connector) {\n         connector.test();\n         return new AsyncResult<String>(\"OK\");\n     }\n-\n-    private boolean isSpecialName(final String name) {\n-        return (name.startsWith(\"__\") && name.endsWith(\"__\"));\n-    }\n }"},{"sha":"63edeb61b28ad6740834a22194684b4aeaa5dca5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -148,7 +148,7 @@ public <T extends PolicyTO> List<T> listByType(@PathVariable(\"kind\") final Strin\n \n         final List<T> policyTOs = new ArrayList<T>();\n         for (Policy policy : policies) {\n-            policyTOs.add((T) binder.getPolicyTO(policy));\n+            policyTOs.add(binder.<T>getPolicyTO(policy));\n         }\n \n         auditManager.audit(Category.policy, PolicySubCategory.list, Result.success,"},{"sha":"3d452edacd7625782d28b67516b49b2b273135e1","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":47,"deletions":43,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -18,16 +18,15 @@\n  */\r\n package org.apache.syncope.core.rest.utils;\r\n \r\n-import java.util.Map.Entry;\r\n+import java.util.Map;\r\n import java.util.Set;\r\n-\r\n import javax.persistence.PersistenceException;\r\n+import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.HttpHeaders;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.Response.ResponseBuilder;\r\n import javax.ws.rs.ext.ExceptionMapper;\r\n import javax.ws.rs.ext.Provider;\r\n-\r\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n import org.apache.syncope.common.services.InvalidSearchConditionException;\r\n import org.apache.syncope.common.types.EntityViolationType;\r\n@@ -46,35 +45,41 @@\n import org.slf4j.LoggerFactory;\r\n import org.springframework.dao.DataIntegrityViolationException;\r\n import org.springframework.orm.jpa.JpaSystemException;\r\n+import org.springframework.security.access.AccessDeniedException;\r\n \r\n @Provider\r\n public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n \r\n     private static final String BASIC_REALM_UNAUTHORIZED = \"Basic realm=\\\"Spring Security Application\\\"\";\r\n+\r\n     private static final Logger LOG = LoggerFactory.getLogger(RestServiceExceptionMapper.class);\r\n+\r\n     public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n \r\n     @Override\r\n     public Response toResponse(final Exception ex) {\r\n         LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\r\n \r\n         if (ex instanceof SyncopeClientCompositeErrorException) {\r\n-            return getCompositeExceptionResponse(ex);\r\n+            return getCompositeExceptionResponse((SyncopeClientCompositeErrorException) ex);\r\n         }\r\n \r\n-        if (ex instanceof org.springframework.security.access.AccessDeniedException) {\r\n-            return Response.status(Response.Status.UNAUTHORIZED)\r\n-                    .header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED).build();\r\n+        if (ex instanceof AccessDeniedException) {\r\n+            return Response.status(Response.Status.UNAUTHORIZED).\r\n+                    header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED).\r\n+                    build();\r\n         }\r\n \r\n         if (ex instanceof UnauthorizedRoleException) {\r\n-            return buildResponse(Response.status(Response.Status.FORBIDDEN), SyncopeClientExceptionType.UnauthorizedRole,\r\n+            return buildResponse(Response.status(Response.Status.FORBIDDEN),\r\n+                    SyncopeClientExceptionType.UnauthorizedRole,\r\n                     getExMessage(ex));\r\n         }\r\n \r\n         if (ex instanceof DataIntegrityViolationException) {\r\n-            return buildResponse(Response.status(Response.Status.CONFLICT), \r\n-                    SyncopeClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n+            return buildResponse(Response.status(Response.Status.CONFLICT),\r\n+                    SyncopeClientExceptionType.DataIntegrityViolation,\r\n+                    getExMessage(ex));\r\n         }\r\n \r\n         Response response = processBadRequestExceptions(ex);\r\n@@ -93,21 +98,20 @@ public Response toResponse(final Exception ex) {\n         }\r\n \r\n         // Rest is interpreted as InternalServerError\r\n-        return Response.status(Response.Status.INTERNAL_SERVER_ERROR)\r\n-                .header(SyncopeClientExceptionType.Unknown.getElementHeaderName(), getExMessage(ex))\r\n-                .build();\r\n+        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).\r\n+                header(SyncopeClientExceptionType.Unknown.getElementHeaderName(), getExMessage(ex)).\r\n+                build();\r\n     }\r\n-    \r\n+\r\n     @Override\r\n     public Exception fromResponse(final Response r) {\r\n         throw new UnsupportedOperationException(\r\n                 \"Call of fromResponse() method is not expected in RestServiceExceptionMapper\");\r\n     }\r\n \r\n-    public Response getCompositeExceptionResponse(Exception ex) {\r\n-        ResponseBuilder responseBuilder = Response.status(((SyncopeClientCompositeErrorException) ex)\r\n-                .getStatusCode().value());\r\n-        for (SyncopeClientException sce : ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\r\n+    private Response getCompositeExceptionResponse(final SyncopeClientCompositeErrorException ex) {\r\n+        ResponseBuilder responseBuilder = Response.status(ex.getStatusCode().value());\r\n+        for (SyncopeClientException sce : ex.getExceptions()) {\r\n             responseBuilder.header(EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n \r\n             for (String attributeName : sce.getElements()) {\r\n@@ -117,7 +121,7 @@ public Response getCompositeExceptionResponse(Exception ex) {\n         return responseBuilder.build();\r\n     }\r\n \r\n-    private Response processServerErrorExceptions(Exception ex) {\r\n+    private Response processServerErrorExceptions(final Exception ex) {\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\r\n         if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, getMessage(ex,\r\n@@ -126,13 +130,13 @@ private Response processServerErrorExceptions(Exception ex) {\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n \r\n         } else if (ex instanceof ConfigurationException) {\r\n-            return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidExternalResource, getExMessage(ex));\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidConnIdConf, getExMessage(ex));\r\n         }\r\n \r\n         return null;\r\n     }\r\n \r\n-    private Response processNotFoundExceptions(Exception ex) {\r\n+    private Response processNotFoundExceptions(final Exception ex) {\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.NOT_FOUND);\r\n \r\n         if (ex instanceof javax.ws.rs.NotFoundException) {\r\n@@ -148,58 +152,58 @@ private Response processNotFoundExceptions(Exception ex) {\n         return null;\r\n     }\r\n \r\n-    private Response processBadRequestExceptions(Exception ex) {\r\n+    private Response processBadRequestExceptions(final Exception ex) {\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.BAD_REQUEST);\r\n \r\n-        if (ex instanceof javax.ws.rs.BadRequestException) {\r\n-            if (((javax.ws.rs.BadRequestException) ex).getResponse() != null) {\r\n-                return ((javax.ws.rs.BadRequestException) ex).getResponse();\r\n-            } else {\r\n+        if (ex instanceof BadRequestException) {\r\n+            if (((BadRequestException) ex).getResponse() == null) {\r\n                 return responseBuilder.build();\r\n+            } else {\r\n+                return ((BadRequestException) ex).getResponse();\r\n             }\r\n-            \r\n+\r\n         } else if (ex instanceof InvalidEntityException) {\r\n             SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\"Invalid\"\r\n                     + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n \r\n             responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n \r\n-            for (@SuppressWarnings(\"rawtypes\")\r\n-            Entry<Class, Set<EntityViolationType>> violation : ((InvalidEntityException) ex).getViolations().entrySet()) {\r\n+            for (@SuppressWarnings(\"rawtypes\") Map.Entry<Class, Set<EntityViolationType>> violation :\r\n+                    ((InvalidEntityException) ex).getViolations().entrySet()) {\r\n \r\n                 for (EntityViolationType violationType : violation.getValue()) {\r\n-                    responseBuilder.header(exType.getElementHeaderName(), violation.getClass().getSimpleName() + \": \"\r\n-                            + violationType);\r\n+                    responseBuilder.header(exType.getElementHeaderName(),\r\n+                            violation.getClass().getSimpleName() + \": \" + violationType);\r\n                 }\r\n             }\r\n             return responseBuilder.build();\r\n         } else if (ex instanceof WorkflowException) {\r\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, getExMessage(ex));\r\n-\r\n         } else if (ex instanceof PropagationException) {\r\n-            return buildResponse(responseBuilder, SyncopeClientExceptionType.Propagation, getMessage(ex, ((PropagationException) ex).getResourceName()));\r\n-\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.Propagation, getMessage(ex,\r\n+                    ((PropagationException) ex).getResourceName()));\r\n         } else if (ex instanceof InvalidSearchConditionException) {\r\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidSearchCondition, getExMessage(ex));\r\n-\r\n         } else if (ex instanceof PersistenceException) {\r\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.GenericPersistence, getExMessage(ex));\r\n         }\r\n \r\n         return null;\r\n     }\r\n \r\n-    private Response buildResponse(ResponseBuilder responseBuilder, SyncopeClientExceptionType hType, String msg) {\r\n-        return responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, hType.getHeaderValue())\r\n-               .header(hType.getElementHeaderName(), msg)\r\n-               .build();\r\n+    private Response buildResponse(final ResponseBuilder responseBuilder, final SyncopeClientExceptionType hType,\r\n+            final String msg) {\r\n+\r\n+        return responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, hType.getHeaderValue()).\r\n+                header(hType.getElementHeaderName(), msg).\r\n+                build();\r\n     }\r\n \r\n-    public String getMessage(Throwable ex, String msg) {\r\n-        return (msg != null) ? msg : getExMessage(ex);\r\n+    private String getMessage(final Throwable ex, final String msg) {\r\n+        return (msg == null) ? getExMessage(ex) : msg;\r\n     }\r\n \r\n-    public String getExMessage(Throwable ex) {\r\n+    private String getExMessage(final Throwable ex) {\r\n         return (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage();\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file"},{"sha":"1926bb338183ec13372a36c8f70c639db60d0c98","filename":"core/src/main/java/org/apache/syncope/core/util/ConnIdBundleManager.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -111,6 +111,12 @@ private static void initConnManager() {\n         connManager = manager;\n     }\n \n+    public static void resetConnManager() {\n+        synchronized (LOCK) {\n+            connManager = null;\n+        }\n+    }\n+\n     public static ConnectorInfoManager getConnManager() {\n         synchronized (LOCK) {\n             if (connManager == null) {"},{"sha":"b9d2f3867893d9e8e9dda010febe62d7783d3abf","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce800c5adebcba0ab80ce5ab669f829b64b412a3/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=ce800c5adebcba0ab80ce5ab669f829b64b412a3","patch":"@@ -135,8 +135,8 @@ under the License.\n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof ConfigurationException) {\n         response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.InvalidExternalResource.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.InvalidExternalResource.getElementHeaderName(),\n+                SyncopeClientExceptionType.InvalidConnIdConf.getHeaderValue());\n+        response.setHeader(SyncopeClientExceptionType.InvalidConnIdConf.getElementHeaderName(),\n                 ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;"}]}