{"sha":"d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ0ZWNkZjZiZDdlZTVhNzE4YjE0OGMyYjUxMGJiZjMxOWIzYjA0YTM=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-06-19T13:55:04Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-06-19T13:55:04Z"},"message":"[SYNCOPE-1112] provide available schema type to better build fiqul expression","tree":{"sha":"97f95273b6ac0d3e8ce87dd9a841cb85eba22595","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/97f95273b6ac0d3e8ce87dd9a841cb85eba22595"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"37b70e661ab4ab0566cda5e1641edd042e23f96e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/37b70e661ab4ab0566cda5e1641edd042e23f96e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/37b70e661ab4ab0566cda5e1641edd042e23f96e"}],"stats":{"total":72,"additions":50,"deletions":22},"files":[{"sha":"dd95128f42c7c648057799bad299f02d0b082da8","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","patch":"@@ -163,19 +163,22 @@ public void onEvent(final IEvent<?> event) {\n                     UserDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(\n                             precond + SearchUtils.buildFIQL(\n                                     AnyPanel.this.searchPanel.getModel().getObject(),\n-                                    SyncopeClient.getUserSearchConditionBuilder()), target);\n+                                    SyncopeClient.getUserSearchConditionBuilder(),\n+                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes()), target);\n                     break;\n                 case GROUP:\n                     GroupDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(\n                             precond + SearchUtils.buildFIQL(\n                                     AnyPanel.this.searchPanel.getModel().getObject(),\n-                                    SyncopeClient.getGroupSearchConditionBuilder()), target);\n+                                    SyncopeClient.getGroupSearchConditionBuilder(),\n+                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes()), target);\n                     break;\n                 case ANY_OBJECT:\n                     AnyObjectDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(\n                             precond + SearchUtils.buildFIQL(\n                                     AnyPanel.this.searchPanel.getModel().getObject(),\n-                                    SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey())), target);\n+                                    SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()),\n+                                    AnyPanel.this.searchPanel.getAvailableSchemaTypes()), target);\n                     break;\n                 default:\n             }"},{"sha":"050896f62263504d839a1e598c065df856247681","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":18,"deletions":8,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -29,7 +30,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.search.SearchableFields;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -56,7 +57,7 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected IModel<List<String>> dnames;\n \n-    protected IModel<List<String>> anames;\n+    protected IModel<Map<String, PlainSchemaTO>> anames;\n \n     protected IModel<List<String>> resourceNames;\n \n@@ -167,16 +168,21 @@ protected List<String> load() {\n             }\n         };\n \n-        anames = new LoadableDetachableModel<List<String>>() {\n+        anames = new LoadableDetachableModel<Map<String, PlainSchemaTO>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected List<String> load() {\n-                return CollectionUtils.collect(\n-                        schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeRestClient.read(type).getClasses().\n-                                toArray(new String[] {})),\n-                        EntityTOUtils.<AbstractSchemaTO>keyTransformer(), new ArrayList<String>());\n+            protected Map<String, PlainSchemaTO> load() {\n+                final List<PlainSchemaTO> schemas = schemaRestClient.<PlainSchemaTO>getSchemas(\n+                        SchemaType.PLAIN,\n+                        anyTypeRestClient.read(type).getClasses().toArray(new String[] {}));\n+\n+                final Map<String, PlainSchemaTO> res = new HashMap<>();\n+                for (PlainSchemaTO schema : schemas) {\n+                    res.put(schema.getKey(), schema);\n+                }\n+                return res;\n             }\n         };\n \n@@ -199,4 +205,8 @@ public IModel<List<SearchClause>> getModel() {\n     public String getBackObjectType() {\n         return this.type;\n     }\n+\n+    public Map<String, PlainSchemaTO> getAvailableSchemaTypes() {\n+        return anames.getObject();\n+    }\n }"},{"sha":"28958eed8b77b2f994071c920bf066b32efa403f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n@@ -71,7 +72,7 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {\n \n     private final IModel<List<SearchClause.Type>> types;\n \n-    private final IModel<List<String>> anames;\n+    private final IModel<Map<String, PlainSchemaTO>> anames;\n \n     private final IModel<List<String>> dnames;\n \n@@ -101,7 +102,7 @@ public SearchClausePanel(\n             final Model<SearchClause> clause,\n             final boolean required,\n             final IModel<List<SearchClause.Type>> types,\n-            final IModel<List<String>> anames,\n+            final IModel<Map<String, PlainSchemaTO>> anames,\n             final IModel<List<String>> dnames,\n             final IModel<Map<String, String>> groupNames,\n             final IModel<List<String>> roleNames,\n@@ -194,7 +195,7 @@ protected List<String> load() {\n                     case ATTRIBUTE:\n                         final List<String> names = new ArrayList<>(dnames.getObject());\n                         if (anames != null && anames.getObject() != null && !anames.getObject().isEmpty()) {\n-                            names.addAll(anames.getObject());\n+                            names.addAll(anames.getObject().keySet());\n                         }\n                         Collections.sort(names);\n                         return names;"},{"sha":"4f42e2da318a3b46bd7f62bd270f8d70ff4e40df","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=d4ecdf6bd7ee5a718b148c2b510bbf319b3b04a3","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -38,6 +39,8 @@\n import org.apache.syncope.common.lib.search.SyncopeFiqlSearchCondition;\n import org.apache.syncope.common.lib.search.SyncopeProperty;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -195,6 +198,13 @@ private static SearchClause getPrimitiveSearchClause(final SearchCondition<Searc\n     }\n \n     public static String buildFIQL(final List<SearchClause> clauses, final AbstractFiqlSearchConditionBuilder builder) {\n+        return buildFIQL(clauses, builder, Collections.emptyMap());\n+    }\n+\n+    public static String buildFIQL(\n+            final List<SearchClause> clauses,\n+            final AbstractFiqlSearchConditionBuilder builder,\n+            final Map<String, PlainSchemaTO> availableSchemaTypes) {\n         LOG.debug(\"Generating FIQL from List<SearchClause>: {}\", clauses);\n \n         CompleteCondition prevCondition;\n@@ -249,6 +259,10 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n \n                     case ATTRIBUTE:\n                         if (StringUtils.isNotBlank(clause.getProperty())) {\n+                            boolean isLong = availableSchemaTypes.get(clause.getProperty()) != null\n+                                    && availableSchemaTypes.get(clause.getProperty()).getType()\n+                                    == AttrSchemaType.Long;\n+\n                             SyncopeProperty property = builder.is(clause.getProperty());\n                             switch (clause.getComparator()) {\n                                 case IS_NULL:\n@@ -260,26 +274,26 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n                                     break;\n \n                                 case LESS_THAN:\n-                                    condition = StringUtils.isNumeric(clause.getProperty())\n-                                            ? property.lessThan(NumberUtils.toDouble(clause.getValue()))\n+                                    condition = isLong\n+                                            ? property.lessThan(NumberUtils.toLong(clause.getValue()))\n                                             : property.lexicalBefore(clause.getValue());\n                                     break;\n \n                                 case LESS_OR_EQUALS:\n-                                    condition = StringUtils.isNumeric(clause.getProperty())\n-                                            ? property.lessOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n+                                    condition = isLong\n+                                            ? property.lessOrEqualTo(NumberUtils.toLong(clause.getValue()))\n                                             : property.lexicalNotAfter(clause.getValue());\n                                     break;\n \n                                 case GREATER_THAN:\n-                                    condition = StringUtils.isNumeric(clause.getProperty())\n-                                            ? property.greaterThan(NumberUtils.toDouble(clause.getValue()))\n+                                    condition = isLong\n+                                            ? property.greaterThan(NumberUtils.toLong(clause.getValue()))\n                                             : property.lexicalAfter(clause.getValue());\n                                     break;\n \n                                 case GREATER_OR_EQUALS:\n-                                    condition = StringUtils.isNumeric(clause.getProperty())\n-                                            ? property.greaterOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n+                                    condition = isLong\n+                                            ? property.greaterOrEqualTo(NumberUtils.toLong(clause.getValue()))\n                                             : property.lexicalNotBefore(clause.getValue());\n                                     break;\n "}]}