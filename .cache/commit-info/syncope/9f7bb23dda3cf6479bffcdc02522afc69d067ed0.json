{"sha":"9f7bb23dda3cf6479bffcdc02522afc69d067ed0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlmN2JiMjNkZGEzY2Y2NDc5YmZmY2RjMDI1MjJhZmM2OWQwNjdlZDA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-07-03T12:38:37Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-07-03T12:38:37Z"},"message":"[SYNCOPE-313] Resolving IT conflicts\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1607611 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8390bead562353c4f412614b00cc1069a2f5943d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8390bead562353c4f412614b00cc1069a2f5943d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9f7bb23dda3cf6479bffcdc02522afc69d067ed0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f7bb23dda3cf6479bffcdc02522afc69d067ed0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9f7bb23dda3cf6479bffcdc02522afc69d067ed0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f7bb23dda3cf6479bffcdc02522afc69d067ed0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"eca2559de04ffb631e938dd671ca5128faeadd5a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eca2559de04ffb631e938dd671ca5128faeadd5a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eca2559de04ffb631e938dd671ca5128faeadd5a"}],"stats":{"total":97,"additions":67,"deletions":30},"files":[{"sha":"fa7a385aa8b8dc872de43892f1e300f4cb12abe0","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":67,"deletions":29,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f7bb23dda3cf6479bffcdc02522afc69d067ed0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f7bb23dda3cf6479bffcdc02522afc69d067ed0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=9f7bb23dda3cf6479bffcdc02522afc69d067ed0","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.apache.syncope.core.rest.AbstractTest.userService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -36,9 +37,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-\n import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.client.SyncopeClient;\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.mod.StatusMod;\n@@ -71,19 +70,23 @@\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MatchingRule;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.types.SubjectType;\n import org.apache.syncope.common.types.UnmatchingRule;\n+import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.wrap.PushActionClass;\n+import org.apache.syncope.common.wrap.ResourceName;\n+import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.DBPasswordSyncActions;\n import org.apache.syncope.core.sync.impl.LDAPPasswordSyncActions;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.apache.syncope.core.util.Encryptor;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n-import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -97,10 +100,17 @@ public class TaskTestITCase extends AbstractTest {\n \n     private static final Long SYNC_TASK_ID = 4L;\n \n+    @BeforeClass\n+    public static void testSyncActionsSetup() {\n+        SyncTaskTO syncTask = taskService.read(SYNC_TASK_ID);\n+        syncTask.getActionsClassNames().add(TestSyncActions.class.getName());\n+        taskService.update(SYNC_TASK_ID, syncTask);\n+    }\n+\n     /**\n      * Remove initial and synchronized users to make test re-runnable.\n      */\n-    public void removeTestUsers() {\n+    private void removeTestUsers() {\n         for (int i = 0; i < 10; i++) {\n             String cUserName = \"test\" + i;\n             try {\n@@ -351,7 +361,7 @@ public void sync() throws Exception {\n             assertTrue(Integer.valueOf(userTO.getAttrMap().get(\"fullname\").getValues().get(0)) <= 10);\n             assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n             assertTrue(userTO.getResources().contains(RESOURCE_NAME_WS2));\n-            \n+\n             // Matching --> Update (no link)\n             assertFalse(userTO.getResources().contains(RESOURCE_NAME_CSV));\n \n@@ -394,7 +404,7 @@ public void sync() throws Exception {\n             final Set<Long> pushTaskIds = new HashSet<Long>();\n             pushTaskIds.add(25L);\n             pushTaskIds.add(26L);\n-            \n+\n             execSyncTasks(pushTaskIds, 50, false);\n             // Matching --> UNLINK\n             assertFalse(readUser(\"test9\").getResources().contains(RESOURCE_NAME_CSV));\n@@ -430,8 +440,37 @@ public void reconcileFromDB() {\n         assertEquals(\"active\", userTO.getStatus());\n     }\n \n+    /**\n+     * Clean Syncope and LDAP resource status.\n+     */\n+    private void ldapCleanup() {\n+        PagedResult<RoleTO> matchingRoles = roleService.search(\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query());\n+        if (matchingRoles.getSize() > 0) {\n+            for (RoleTO role : matchingRoles.getResult()) {\n+                roleService.bulkDeassociation(role.getId(),\n+                        ResourceDeassociationActionType.UNLINK,\n+                        CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class));\n+                roleService.delete(role.getId());\n+            }\n+        }\n+        PagedResult<UserTO> matchingUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"syncFromLDAP\").query());\n+        if (matchingUsers.getSize() > 0) {\n+            for (UserTO user : matchingUsers.getResult()) {\n+                userService.bulkDeassociation(user.getId(),\n+                        ResourceDeassociationActionType.UNLINK,\n+                        CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceName.class));\n+                userService.delete(user.getId());\n+            }\n+        }\n+    }\n+\n     @Test\n     public void reconcileFromLDAP() {\n+        // First of all, clear any potential conflict with existing user / role\n+        ldapCleanup();\n+\n         // Update sync task\n         TaskExecTO execution = execSyncTask(11L, 20, false);\n \n@@ -1097,7 +1136,7 @@ public TaskExecTO call() throws Exception {\n             return test.execSyncTask(taskId, maxWaitSeconds, dryRun);\n         }\n     }\n-    \n+\n     @Test\n     public void issueSYNCOPE313DB() throws Exception {\n         // 1. create user in DB\n@@ -1117,7 +1156,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         // 3. Update the password in the DB\n         String newPassword = Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n         jdbcTemplate.execute(\n-            \"UPDATE test set PASSWORD='\" + newPassword + \"' where ID='\" + user.getUsername() + \"'\");\n+                \"UPDATE test set PASSWORD='\" + newPassword + \"' where ID='\" + user.getUsername() + \"'\");\n \n         // 4. Sync the user from the resource\n         SyncTaskTO syncTask = new SyncTaskTO();\n@@ -1128,15 +1167,15 @@ public void issueSYNCOPE313DB() throws Exception {\n         syncTask.setResource(RESOURCE_NAME_TESTDB);\n         syncTask.getActionsClassNames().add(DBPasswordSyncActions.class.getName());\n         Response taskResponse = taskService.create(syncTask);\n-        \n+\n         SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n-        \n+\n         syncTask = taskService.read(actual.getId());\n         assertNotNull(syncTask);\n         assertEquals(actual.getId(), syncTask.getId());\n         assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n-        \n+\n         TaskExecTO execution = execSyncTask(syncTask.getId(), 50, false);\n         final String status = execution.getStatus();\n         assertNotNull(status);\n@@ -1145,24 +1184,25 @@ public void issueSYNCOPE313DB() throws Exception {\n         // 5. Test the sync'd user\n         UserTO updatedUser = userService.read(user.getId());\n         assertEquals(newPassword, updatedUser.getPassword());\n-        \n+\n         // 6. Delete SyncTask + user\n         taskService.delete(syncTask.getId());\n         deleteUser(user.getId());\n     }\n-    \n-    // @Ignore'd for now as it is causing a failure in the 'reconcileFromLDAP' test\n+\n     @Test\n-    @org.junit.Ignore\n     public void issueSYNCOPE313LDAP() throws Exception {\n+        // First of all, clear any potential conflict with existing user / role\n+        ldapCleanup();\n+\n         // 1. create user in LDAP\n         UserTO user = UserTestITCase.getUniqueSampleTO(\"syncope313-ldap@syncope.apache.org\");\n         user.setPassword(\"security\");\n         user.getResources().add(RESOURCE_NAME_LDAP);\n         user = createUser(user);\n         assertNotNull(user);\n         assertFalse(user.getResources().isEmpty());\n-        \n+\n         // 2. request to change password only on Syncope and not on LDAP\n         UserMod userMod = new UserMod();\n         userMod.setId(user.getId());\n@@ -1172,31 +1212,29 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         pwdPropRequest.getResourceNames().clear();\n         userMod.setPwdPropRequest(pwdPropRequest);\n         updateUser(userMod);\n-        \n+\n         // 3. Check that the Syncope user now has the changed password\n         UserTO updatedUser = userService.read(user.getId());\n-        String encodedNewPassword = \n-            Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n+        String encodedNewPassword = Encryptor.getInstance().encode(\"new-security\", CipherAlgorithm.SHA1);\n         assertEquals(encodedNewPassword, updatedUser.getPassword());\n \n         // 4. Check that the LDAP resource has the old password\n-        ConnObjectTO connObject = \n+        ConnObjectTO connObject =\n                 resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, user.getId());\n-        \n+\n         assertNotNull(getLdapRemoteObject(\n                 connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n                 \"security\",\n                 connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n-        \n+\n         // 5. Update the LDAP Connector to retrieve passwords\n         ResourceTO ldapResource = resourceService.read(RESOURCE_NAME_LDAP);\n         ConnInstanceTO resourceConnector = connectorService.read(ldapResource.getConnectorId());\n-        ConnConfProperty property = \n-            resourceConnector.getConfigurationMap().get(\"retrievePasswordsWithSearch\");\n+        ConnConfProperty property = resourceConnector.getConfigurationMap().get(\"retrievePasswordsWithSearch\");\n         property.getValues().clear();\n         property.getValues().add(Boolean.TRUE);\n         connectorService.update(ldapResource.getConnectorId(), resourceConnector);\n-        \n+\n         // 6. Sync the user from the resource\n         SyncTaskTO syncTask = new SyncTaskTO();\n         syncTask.setName(\"LDAP Sync Task\");\n@@ -1206,15 +1244,15 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         syncTask.setResource(RESOURCE_NAME_LDAP);\n         syncTask.getActionsClassNames().add(LDAPPasswordSyncActions.class.getName());\n         Response taskResponse = taskService.create(syncTask);\n-        \n+\n         SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n-        \n+\n         syncTask = taskService.read(actual.getId());\n         assertNotNull(syncTask);\n         assertEquals(actual.getId(), syncTask.getId());\n         assertEquals(actual.getJobClassName(), syncTask.getJobClassName());\n-        \n+\n         TaskExecTO execution = execSyncTask(syncTask.getId(), 50, false);\n         final String status = execution.getStatus();\n         assertNotNull(status);\n@@ -1224,7 +1262,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         String syncedPassword = Encryptor.getInstance().encode(\"security\", CipherAlgorithm.SHA1);\n         updatedUser = userService.read(user.getId());\n         assertEquals(syncedPassword, updatedUser.getPassword());\n-        \n+\n         // 8. Delete SyncTask + user + reset the connector\n         taskService.delete(syncTask.getId());\n         property.getValues().clear();"},{"sha":"e45c8cb8451502c5c12375e79e9016d8698f8c85","filename":"core/src/test/resources/content.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f7bb23dda3cf6479bffcdc02522afc69d067ed0/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f7bb23dda3cf6479bffcdc02522afc69d067ed0/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=9f7bb23dda3cf6479bffcdc02522afc69d067ed0","patch":"@@ -884,7 +884,6 @@ under the License.\n         jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"\n         userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derivedAttributes\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virtualAttributes\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"roleId\":8,\"roleName\":null,\"attributes\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[]}]}'\n         roleTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"roleOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"rAttrTemplates\":[],\"rDerAttrTemplates\":[],\"rVirAttrTemplates\":[],\"mAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n-  <SyncTask_actionsClassNames SyncTask_id=\"4\" element=\"org.apache.syncope.core.sync.TestSyncActions\"/>\n   <Task DTYPE=\"SchedTask\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.quartz.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" subjectType=\"USER\" subjectId=\"1\""}]}