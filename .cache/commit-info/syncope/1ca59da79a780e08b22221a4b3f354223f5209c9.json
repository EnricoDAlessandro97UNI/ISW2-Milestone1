{"sha":"1ca59da79a780e08b22221a4b3f354223f5209c9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFjYTU5ZGE3OWE3ODBlMDhiMjIyMjFhNGIzZjM1NDIyM2Y1MjA5Yzk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-05T17:40:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-05T17:40:28Z"},"message":"Renaming IncompatiblePolicyException to InvalidPasswordPolicySpecException and making it checked\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1442674 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0be0d9fa0900777737595b4ddc487a9a506b77e9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0be0d9fa0900777737595b4ddc487a9a506b77e9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1ca59da79a780e08b22221a4b3f354223f5209c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ca59da79a780e08b22221a4b3f354223f5209c9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1ca59da79a780e08b22221a4b3f354223f5209c9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1ca59da79a780e08b22221a4b3f354223f5209c9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d26c63d6e86fe7e121c60e543a81d781d0559e7f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d26c63d6e86fe7e121c60e543a81d781d0559e7f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d26c63d6e86fe7e121c60e543a81d781d0559e7f"}],"stats":{"total":109,"additions":46,"deletions":63},"files":[{"sha":"9fefc67bb212c6efa6301803dc92f09466f851ce","filename":"common/src/main/java/org/apache/syncope/common/types/AbstractPolicySpec.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ca59da79a780e08b22221a4b3f354223f5209c9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ca59da79a780e08b22221a4b3f354223f5209c9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java?ref=1ca59da79a780e08b22221a4b3f354223f5209c9","patch":"@@ -20,7 +20,7 @@\n \r\n import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n-public class AbstractPolicySpec extends AbstractBaseBean {\r\n+public abstract class AbstractPolicySpec extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 2740439904103716653L;\r\n \r"},{"sha":"c8216f900de26740c5e1135b46d34241564f5a1b","filename":"common/src/main/java/org/apache/syncope/common/types/PasswordPolicySpec.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ca59da79a780e08b22221a4b3f354223f5209c9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ca59da79a780e08b22221a4b3f354223f5209c9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java?ref=1ca59da79a780e08b22221a4b3f354223f5209c9","patch":"@@ -20,11 +20,9 @@\n \r\n import java.util.ArrayList;\r\n import java.util.List;\r\n-\r\n import javax.xml.bind.annotation.XmlElement;\r\n import javax.xml.bind.annotation.XmlElementWrapper;\r\n import javax.xml.bind.annotation.XmlType;\r\n-\r\n import org.apache.syncope.common.annotation.SchemaList;\r\n \r\n @XmlType\r"},{"sha":"308edb77ab93befcb6c93c1a4162f3f1a18a818f","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=1ca59da79a780e08b22221a4b3f354223f5209c9","patch":"@@ -57,7 +57,7 @@\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.AttributableUtil;\n-import org.apache.syncope.core.util.IncompatiblePolicyException;\n+import org.apache.syncope.core.util.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.util.JexlUtil;\n import org.apache.syncope.core.util.MappingUtil;\n import org.identityconnectors.common.security.GuardedByteArray;\n@@ -164,7 +164,7 @@ public <T extends AbstractAttributableTO> T getAttributableTO(final ConnectorObj\n             String password;\n             try {\n                 password = pwdGen.generatePasswordFromPwdSpec(ppSpecs);\n-            } catch (IncompatiblePolicyException e) {\n+            } catch (InvalidPasswordPolicySpecException e) {\n                 LOG.error(\"Could not generate policy-compliant random password for {}\", subjectTO, e);\n \n                 password = RandomStringUtils.randomAlphanumeric(16);"},{"sha":"a5f6aa03bd82ff394d3c7f8ebadd53fd51331404","filename":"core/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java","status":"modified","additions":26,"deletions":46,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java?ref=1ca59da79a780e08b22221a4b3f354223f5209c9","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n-import org.apache.syncope.core.util.IncompatiblePolicyException;\n+import org.apache.syncope.core.util.InvalidPasswordPolicySpecException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -46,7 +46,7 @@ public class PasswordGenerator {\n     private PolicyDAO policyDAO;\n \n     public String generatePasswordFromPwdSpec(final List<PasswordPolicySpec> passwordPolicySpecs)\n-            throws IncompatiblePolicyException {\n+            throws InvalidPasswordPolicySpecException {\n \n         PasswordPolicySpec policySpec = mergePolicySpecs(passwordPolicySpecs);\n \n@@ -56,7 +56,7 @@ public String generatePasswordFromPwdSpec(final List<PasswordPolicySpec> passwor\n     }\n \n     public String generateUserPassword(final SyncopeUser user)\n-            throws IncompatiblePolicyException {\n+            throws InvalidPasswordPolicySpecException {\n \n         List<PasswordPolicySpec> userPasswordPolicies = new ArrayList<PasswordPolicySpec>();\n         PasswordPolicySpec passwordPolicySpec = policyDAO.getGlobalPasswordPolicy().getSpecification();\n@@ -165,70 +165,50 @@ private PasswordPolicySpec mergePolicySpecs(final List<PasswordPolicySpec> userP\n     }\n \n     private void evaluateFinalPolicySpec(final PasswordPolicySpec policySpec)\n-            throws IncompatiblePolicyException {\n+            throws InvalidPasswordPolicySpecException {\n \n         if (policySpec.getMinLength() == 0) {\n-            LOG.error(\"Minimum length given is zero\");\n-            throw new IncompatiblePolicyException(\"Minimum length given is zero\");\n+            throw new InvalidPasswordPolicySpecException(\"Minimum length is zero\");\n         }\n         if (policySpec.isMustEndWithAlpha() && policySpec.isMustntEndWithAlpha()) {\n-            LOG.error(\"Incompatible password policy specification: mustEndWithAlpha and\"\n-                    + \"mustntEndWithAlpha are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithAlpha and\"\n-                    + \"mustntEndWithAlpha are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustEndWithAlpha and mustntEndWithAlpha are both true\");\n         }\n         if (policySpec.isMustEndWithAlpha() && policySpec.isMustEndWithDigit()) {\n-            LOG.error(\"Incompatible password policy specification: mustEndWithAlpha and\"\n-                    + \"mustEndWithDigit are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithAlpha and\"\n-                    + \"mustEndWithDigit are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustEndWithAlpha and mustEndWithDigit are both true\");\n         }\n         if (policySpec.isMustEndWithDigit() && policySpec.isMustntEndWithDigit()) {\n-            LOG.error(\"Incompatible password policy specification: mustEndWithDigit and\"\n-                    + \"mustntEndWithDigit are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithDigit and\"\n-                    + \"mustntEndWithDigit are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustEndWithDigit and mustntEndWithDigit are both true\");\n         }\n         if (policySpec.isMustEndWithNonAlpha() && policySpec.isMustntEndWithNonAlpha()) {\n-            LOG.error(\"Incompatible password policy specification: mustEndWithNonAlpha and\"\n-                    + \"mustntEndWithNonAlpha are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustEndWithNonAlpha and\"\n-                    + \"mustntEndWithNonAlpha are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustEndWithNonAlpha and mustntEndWithNonAlpha are both true\");\n         }\n         if (policySpec.isMustStartWithAlpha() && policySpec.isMustntStartWithAlpha()) {\n-            LOG.error(\"Incompatible password policy specification: mustStartWithAlpha and\"\n-                    + \"mustntStartWithAlpha are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithAlpha and\"\n-                    + \"mustntStartWithAlpha are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustStartWithAlpha and mustntStartWithAlpha are both true\");\n         }\n         if (policySpec.isMustStartWithAlpha() && policySpec.isMustStartWithDigit()) {\n-            LOG.error(\"Incompatible password policy specification: mustStartWithAlpha and\"\n-                    + \"mustStartWithDigit are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithAlpha and\"\n-                    + \"mustStartWithDigit are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustStartWithAlpha and mustStartWithDigit are both true\");\n         }\n         if (policySpec.isMustStartWithDigit() && policySpec.isMustntStartWithDigit()) {\n-            LOG.error(\"Incompatible password policy specification: mustStartWithDigit and\"\n-                    + \"mustntStartWithDigit are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithDigit and\"\n-                    + \" mustntStartWithDigit are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustStartWithDigit and mustntStartWithDigit are both true\");\n         }\n         if (policySpec.isMustStartWithNonAlpha() && policySpec.isMustntStartWithNonAlpha()) {\n-            LOG.error(\"Incompatible password policy specification: mustStartWithNonAlpha\"\n-                    + \"and mustntStartWithNonAlpha are true\");\n-            throw new IncompatiblePolicyException(\"Incompatible password policy specification: mustStartWithNonAlpha\"\n-                    + \"and mustntStartWithNonAlpha are true\");\n+            throw new InvalidPasswordPolicySpecException(\n+                    \"mustStartWithNonAlpha and mustntStartWithNonAlpha are both true\");\n         }\n         if (policySpec.getMinLength() > policySpec.getMaxLength()) {\n-            LOG.error(\"Minimun length given (\" + policySpec.getMinLength() + \") is higher than\"\n-                    + \"maximum allowed (\" + policySpec.getMaxLength() + \")\");\n-            throw new IncompatiblePolicyException(\"Minimun length given (\" + policySpec.getMinLength() + \")\"\n-                    + \"is higher than maximum allowed (\" + policySpec.getMaxLength() + \")\");\n+            throw new InvalidPasswordPolicySpecException(\"Minimun length (\" + policySpec.getMinLength() + \")\"\n+                    + \"is greater than maximum length (\" + policySpec.getMaxLength() + \")\");\n         }\n     }\n \n     private String generatePassword(final PasswordPolicySpec policySpec) {\n-\n         String[] generatedPassword = new String[policySpec.getMinLength()];\n \n         for (int i = 0; i < generatedPassword.length; i++) {\n@@ -298,15 +278,15 @@ private void checkEndChar(final String[] generatedPassword, final PasswordPolicy\n         }\n     }\n \n-    private int firstEmptyChar(String[] generatedPStrings) {\n+    private int firstEmptyChar(final String[] generatedPStrings) {\n         int index = 0;\n         while (!generatedPStrings[index].isEmpty()) {\n             index++;\n         }\n         return index;\n     }\n \n-    private void checkRequired(String[] generatedPassword, final PasswordPolicySpec policySpec) {\n+    private void checkRequired(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n         if (policySpec.isDigitRequired()\n                 && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n             generatedPassword[firstEmptyChar(generatedPassword)] = RandomStringUtils.randomNumeric(1);\n@@ -328,7 +308,7 @@ private void checkRequired(String[] generatedPassword, final PasswordPolicySpec\n         }\n     }\n \n-    private void checkPrefixAndSuffix(String[] generatedPassword, final PasswordPolicySpec policySpec) {\n+    private void checkPrefixAndSuffix(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n         for (Iterator<String> it = policySpec.getPrefixesNotPermitted().iterator(); it.hasNext();) {\n             String prefix = it.next();\n             if (StringUtils.join(generatedPassword).startsWith(prefix)) {"},{"sha":"90a477cfa306f2f171f0e20bb052a8e8a933e480","filename":"core/src/main/java/org/apache/syncope/core/util/InvalidPasswordPolicySpecException.java","status":"renamed","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FInvalidPasswordPolicySpecException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FInvalidPasswordPolicySpecException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FInvalidPasswordPolicySpecException.java?ref=1ca59da79a780e08b22221a4b3f354223f5209c9","patch":"@@ -18,15 +18,20 @@\n  */\n package org.apache.syncope.core.util;\n \n-public class IncompatiblePolicyException extends RuntimeException {\n+/**\n+ * Raise when the merge of two or more PasswordPolicySpec leds to incompatible condition.\n+ *\n+ * @see org.apache.syncope.common.types.PasswordPolicySpec\n+ */\n+public class InvalidPasswordPolicySpecException extends Exception {\n \n     private static final long serialVersionUID = 4810651743226663580L;\n \n-    public IncompatiblePolicyException(String msg) {\n+    public InvalidPasswordPolicySpecException(final String msg) {\n         super(msg);\n     }\n \n-    public IncompatiblePolicyException(String msg, Exception e) {\n+    public InvalidPasswordPolicySpecException(final String msg, final Exception e) {\n         super(msg, e);\n     }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/util/IncompatiblePolicyException.java"},{"sha":"14bae8a59a1562fa02073e25c18ce18c927f870b","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=1ca59da79a780e08b22221a4b3f354223f5209c9","patch":"@@ -206,7 +206,7 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                 } else if (resource.isRandomPwdIfNotProvided()) {\n                     try {\n                         passwordAttrValue = passwordGenerator.generateUserPassword(user);\n-                    } catch (IncompatiblePolicyException e) {\n+                    } catch (InvalidPasswordPolicySpecException e) {\n                         LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n \n                         passwordAttrValue = RandomStringUtils.randomAlphanumeric(16);"},{"sha":"e78a5defdffa4c6bb70c087dd57541df234384c7","filename":"core/src/test/java/org/apache/syncope/core/connid/PasswordGeneratorTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1ca59da79a780e08b22221a4b3f354223f5209c9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java?ref=1ca59da79a780e08b22221a4b3f354223f5209c9","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n-import org.apache.syncope.core.util.IncompatiblePolicyException;\n+import org.apache.syncope.core.util.InvalidPasswordPolicySpecException;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -50,7 +50,7 @@ public void issueSYNCOPE226() {\n         String password = \"\";\n         try {\n             password = passwordGenerator.generateUserPassword(user);\n-        } catch (IncompatiblePolicyException ex) {\n+        } catch (InvalidPasswordPolicySpecException ex) {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);\n@@ -69,7 +69,7 @@ public void testPasswordGenerator() {\n         try {\n             password = passwordGenerator.generateUserPassword(user);\n \n-        } catch (IncompatiblePolicyException ex) {\n+        } catch (InvalidPasswordPolicySpecException ex) {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);\n@@ -79,7 +79,7 @@ public void testPasswordGenerator() {\n \n     @Test\n     public void startEndWithDigit()\n-            throws IncompatiblePolicyException {\n+            throws InvalidPasswordPolicySpecException {\n \n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n@@ -96,7 +96,7 @@ public void startEndWithDigit()\n \n     @Test\n     public void startWithDigitAndWithAlpha()\n-            throws IncompatiblePolicyException {\n+            throws InvalidPasswordPolicySpecException {\n \n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n@@ -113,7 +113,7 @@ public void startWithDigitAndWithAlpha()\n \n     @Test\n     public void passwordWithNonAlpha()\n-            throws IncompatiblePolicyException {\n+            throws InvalidPasswordPolicySpecException {\n \n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setNonAlphanumericRequired(true);\n@@ -128,9 +128,9 @@ public void passwordWithNonAlpha()\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n-    @Test(expected = IncompatiblePolicyException.class)\n+    @Test(expected = InvalidPasswordPolicySpecException.class)\n     public void incopatiblePolicies()\n-            throws IncompatiblePolicyException {\n+            throws InvalidPasswordPolicySpecException {\n \n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMinLength(12);"}]}