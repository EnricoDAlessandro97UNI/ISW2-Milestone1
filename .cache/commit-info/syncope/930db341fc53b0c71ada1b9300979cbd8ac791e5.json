{"sha":"930db341fc53b0c71ada1b9300979cbd8ac791e5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkzMGRiMzQxZmM1M2IwYzcxYWRhMWI5MzAwOTc5Y2JkOGFjNzkxZTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-11T08:42:22Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-11T08:42:22Z"},"message":"[SYNCOPE-741] Merge from 1_2_X","tree":{"sha":"cd3faf4f1a72805c2429ee1bb82be51807aa62bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cd3faf4f1a72805c2429ee1bb82be51807aa62bb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/930db341fc53b0c71ada1b9300979cbd8ac791e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/930db341fc53b0c71ada1b9300979cbd8ac791e5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/930db341fc53b0c71ada1b9300979cbd8ac791e5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/930db341fc53b0c71ada1b9300979cbd8ac791e5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d5ba39a3d935b733a4e79732d2a79cc7d6afda6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0d5ba39a3d935b733a4e79732d2a79cc7d6afda6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0d5ba39a3d935b733a4e79732d2a79cc7d6afda6"}],"stats":{"total":444,"additions":331,"deletions":113},"files":[{"sha":"ae6d4642947808eb34790e21230372b28cab33c8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -39,18 +39,18 @@ public List<TaskExecTO> listRunningJobs() {\n         return taskService.listJobs(JobStatusType.RUNNING);\n     }\n \n-    public <T extends AbstractTaskTO> T read(final String taskId) {\n-        return taskService.read(Long.valueOf(taskId));\n+    public <T extends AbstractTaskTO> T read(final String taskKey) {\n+        return taskService.read(Long.valueOf(taskKey), true);\n     }\n \n-    public void delete(final String taskId) {\n-        taskService.delete(Long.valueOf(taskId));\n+    public void delete(final String taskKey) {\n+        taskService.delete(Long.valueOf(taskKey));\n     }\n \n     public List<AbstractTaskTO> list(final String type) {\n         return taskService.list(new TaskQuery.Builder().type(TaskType.valueOf(type)).build()).getResult();\n     }\n-    \n+\n     public List<AbstractTaskTO> listPropagationTask() {\n         return taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult();\n     }"},{"sha":"876e640e3041f04928e8caf0c132b7b4382afc39","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -93,29 +93,29 @@ private TaskType getTaskType(final Class<?> reference) {\n         return result;\n     }\n \n-    public PropagationTaskTO readPropagationTask(final Long taskId) {\n-        return getService(TaskService.class).read(taskId);\n+    public PropagationTaskTO readPropagationTask(final Long taskKey) {\n+        return getService(TaskService.class).read(taskKey, false);\n     }\n \n-    public NotificationTaskTO readNotificationTask(final Long taskId) {\n-        return getService(TaskService.class).read(taskId);\n+    public NotificationTaskTO readNotificationTask(final Long taskKey) {\n+        return getService(TaskService.class).read(taskKey, false);\n     }\n \n-    public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final Long taskId) {\n-        return getService(TaskService.class).read(taskId);\n+    public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final Long taskKey) {\n+        return getService(TaskService.class).read(taskKey, false);\n     }\n \n-    public void delete(final Long taskId, final Class<? extends AbstractTaskTO> taskToClass) {\n-        getService(TaskService.class).delete(taskId);\n+    public void delete(final Long taskKey, final Class<? extends AbstractTaskTO> taskToClass) {\n+        getService(TaskService.class).delete(taskKey);\n     }\n \n     @Override\n-    public void startExecution(final long taskId) {\n-        startExecution(taskId, false);\n+    public void startExecution(final long taskKey) {\n+        startExecution(taskKey, false);\n     }\n \n-    public void startExecution(final long taskId, final boolean dryRun) {\n-        getService(TaskService.class).execute(taskId, dryRun);\n+    public void startExecution(final long taskKey, final boolean dryRun) {\n+        getService(TaskService.class).execute(taskKey, dryRun);\n     }\n \n     @Override"},{"sha":"4763b13265654b2f7fb588af09832383517771b1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -42,13 +42,13 @@ public Builder details(final boolean details) {\n \n     private Boolean details;\n \n-    public boolean isDetails() {\n+    public Boolean getDetails() {\n         return details == null ? true : details;\n     }\n \n     @QueryParam(JAXRSService.PARAM_DETAILS)\n     @DefaultValue(\"true\")\n-    public void setDetails(final boolean details) {\n+    public void setDetails(final Boolean details) {\n         this.details = details;\n     }\n }"},{"sha":"626b0bb2dc4f7824d10ba0c0e8f707ff10133643","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskExecQuery.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskExecQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskExecQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskExecQuery.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.PathParam;\n+\n+public class TaskExecQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = -8792519310029596796L;\n+\n+    public static class Builder extends AbstractQuery.Builder<TaskExecQuery, Builder> {\n+\n+        @Override\n+        protected TaskExecQuery newInstance() {\n+            return new TaskExecQuery();\n+        }\n+\n+        public Builder key(final Long key) {\n+            getInstance().setKey(key);\n+            return this;\n+        }\n+    }\n+\n+    private Long key;\n+\n+    public Long getKey() {\n+        return key;\n+    }\n+\n+    @NotNull\n+    @PathParam(\"key\")\n+    public void setKey(final Long key) {\n+        this.key = key;\n+    }\n+\n+}"},{"sha":"75442c851865e636cefa413b09fe49b9dba8efe1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -20,6 +20,7 @@\n \n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.DefaultValue;\n import javax.ws.rs.MatrixParam;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -57,6 +58,11 @@ public Builder anyTypeKey(final Long anyTypeKey) {\n             return this;\n         }\n \n+        public Builder details(final boolean details) {\n+            getInstance().setDetails(details);\n+            return this;\n+        }\n+\n         @Override\n         public TaskQuery build() {\n             if (getInstance().type == null) {\n@@ -75,6 +81,8 @@ public TaskQuery build() {\n \n     private Long anyTypeKey;\n \n+    private Boolean details;\n+\n     public TaskType getType() {\n         return type;\n     }\n@@ -113,4 +121,14 @@ public void setAnyTypeKey(final Long anyTypeKey) {\n         this.anyTypeKey = anyTypeKey;\n     }\n \n+    public Boolean getDetails() {\n+        return details == null ? true : details;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_DETAILS)\n+    @DefaultValue(\"true\")\n+    public void setDetails(final Boolean details) {\n+        this.details = details;\n+    }\n+\n }"},{"sha":"7e03bfe6b4d9b80866989444b2473383a2e5cd69","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n /**\n@@ -54,31 +55,23 @@ public interface TaskService extends JAXRSService {\n      * Returns the task matching the given key.\n      *\n      * @param key key of task to be read\n+     * @param details whether include executions or not, defaults to true\n      * @param <T> type of taskTO\n      * @return task with matching id\n      */\n     @GET\n     @Path(\"{key}\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractTaskTO> T read(@NotNull @PathParam(\"key\") Long key);\n-\n-    /**\n-     * Returns the task execution with the given id.\n-     *\n-     * @param executionKey key of task execution to be read\n-     * @return task execution with matching Id\n-     */\n-    @GET\n-    @Path(\"executions/{executionKey}\")\n-    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    TaskExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n+    <T extends AbstractTaskTO> T read(\n+            @NotNull @PathParam(\"key\") Long key,\n+            @QueryParam(JAXRSService.PARAM_DETAILS) @DefaultValue(\"true\") boolean details);\n \n     /**\n      * Returns a paged list of existing tasks matching the given query.\n      *\n      * @param query query conditions\n      * @param <T> type of taskTO\n-     * @return paged list of existing tasks matching type and the given query\n+     * @return paged list of existing tasks matching the given query\n      */\n     @GET\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -113,6 +106,28 @@ public interface TaskService extends JAXRSService {\n     @Path(\"{key}\")\n     void delete(@NotNull @PathParam(\"key\") Long key);\n \n+    /*\n+     * Returns the task execution with the given id.\n+     *\n+     * @param executionKey key of task execution to be read\n+     * @return task execution with matching Id\n+     */\n+    @GET\n+    @Path(\"executions/{executionKey}\")\n+    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    TaskExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n+\n+    /**\n+     * Returns a paged list of task executions matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return paged list of task executions the given query\n+     */\n+    @GET\n+    @Path(\"{key}/executions\")\n+    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    PagedResult<TaskExecTO> listExecutions(@BeanParam TaskExecQuery query);\n+\n     /**\n      * Deletes the task execution matching the provided key.\n      *"},{"sha":"1c48f622350b1b898caec314f8fd9ad97dc5203e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":40,"deletions":21,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -113,7 +113,7 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n             throw sce;\n         }\n \n-        return binder.getTaskTO(task, taskUtils);\n+        return binder.getTaskTO(task, taskUtils, false);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_UPDATE + \"')\")\n@@ -145,7 +145,7 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n             throw sce;\n         }\n \n-        return binder.getTaskTO(task, taskUtils);\n+        return binder.getTaskTO(task, taskUtils, false);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n@@ -159,37 +159,28 @@ public int count(\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractTaskTO> List<T> list(\n             final TaskType type, final String resource, final AnyTypeKind anyTypeKind, final Long anyTypeKey,\n-            final int page, final int size, final List<OrderByClause> orderByClauses) {\n+            final int page, final int size, final List<OrderByClause> orderByClauses, final boolean details) {\n \n         final TaskUtils taskUtils = taskUtilsFactory.getInstance(type);\n \n         return CollectionUtils.collect(taskDAO.findAll(\n                 type, resourceDAO.find(resource), anyTypeKind, anyTypeKey, page, size, orderByClauses),\n                 new Transformer<Task, T>() {\n \n-                    @Override\n-                    public T transform(final Task task) {\n-                        return (T) binder.getTaskTO(task, taskUtils);\n-                    }\n-                }, new ArrayList<T>());\n+            @Override\n+            public T transform(final Task task) {\n+                return (T) binder.getTaskTO(task, taskUtils, details);\n+            }\n+        }, new ArrayList<T>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public <T extends AbstractTaskTO> T read(final Long taskKey) {\n+    public <T extends AbstractTaskTO> T read(final Long taskKey, final boolean details) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskKey);\n         }\n-        return binder.getTaskTO(task, taskUtilsFactory.getInstance(task));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public TaskExecTO readExecution(final Long execKey) {\n-        TaskExec taskExec = taskExecDAO.find(execKey);\n-        if (taskExec == null) {\n-            throw new NotFoundException(\"Task execution \" + execKey);\n-        }\n-        return binder.getTaskExecTO(taskExec);\n+        return binder.getTaskTO(task, taskUtilsFactory.getInstance(task), details);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n@@ -253,7 +244,7 @@ public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n         }\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n-        T taskToDelete = binder.getTaskTO(task, taskUtils);\n+        T taskToDelete = binder.getTaskTO(task, taskUtils, true);\n \n         if (TaskType.SCHEDULED == taskUtils.getType()\n                 || TaskType.SYNCHRONIZATION == taskUtils.getType()\n@@ -266,6 +257,34 @@ public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n         return taskToDelete;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    public TaskExecTO readExecution(final Long execKey) {\n+        TaskExec taskExec = taskExecDAO.find(execKey);\n+        if (taskExec == null) {\n+            throw new NotFoundException(\"Task execution \" + execKey);\n+        }\n+        return binder.getTaskExecTO(taskExec);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    public int countExecutions(final Long taskId) {\n+        return taskExecDAO.count(taskId);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n+    public List<TaskExecTO> listExecutions(\n+            final Long taskKey, final int page, final int size, final List<OrderByClause> orderByClauses) {\n+\n+        return CollectionUtils.collect(taskExecDAO.findAll(taskKey, page, size, orderByClauses),\n+                new Transformer<TaskExec, TaskExecTO>() {\n+\n+            @Override\n+            public TaskExecTO transform(final TaskExec taskExec) {\n+                return binder.getTaskExecTO(taskExec);\n+            }\n+        }, new ArrayList<TaskExecTO>());\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n     public TaskExecTO deleteExecution(final Long execKey) {\n         TaskExec taskExec = taskExecDAO.find(execKey);\n@@ -299,7 +318,7 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n         if ((key != null) && !key.equals(0L)) {\n             try {\n                 final Task task = taskDAO.find(key);\n-                return binder.getTaskTO(task, taskUtilsFactory.getInstance(task));\n+                return binder.getTaskTO(task, taskUtilsFactory.getInstance(task), false);\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"72e298843c8498836112c613acb8d0e5966ee6cf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n \n@@ -33,6 +34,10 @@ public interface TaskExecDAO extends DAO<TaskExec, Long> {\n \n     List<TaskExec> findAll(TaskType type);\n \n+    int count(Long taskKey);\n+\n+    List<TaskExec> findAll(Long taskKey, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n+\n     TaskExec save(TaskExec execution);\n \n     void saveAndAdd(Long taskId, TaskExec execution);"},{"sha":"582cd181af1f66d9e4e184774b5621a9f75371bc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -149,7 +149,9 @@ private String toOrderByStatement(\n             }\n         }\n \n-        if (statement.length() > 0) {\n+        if (statement.length() == 0) {\n+            statement.append(\"ORDER BY t.id DESC\");\n+        } else {\n             statement.insert(0, \"ORDER BY \");\n         }\n         return statement.toString();\n@@ -167,9 +169,7 @@ public <T extends Task> List<T> findAll(\n             final List<OrderByClause> orderByClauses) {\n \n         StringBuilder queryString = buildFindAllQuery(type, resource, anyTypeKind, anyTypeKey).\n-                append(orderByClauses.isEmpty()\n-                        ? \"ORDER BY t.id DESC\"\n-                        : toOrderByStatement(getEntityReference(type), orderByClauses));\n+                append(toOrderByStatement(getEntityReference(type), orderByClauses));\n \n         Query query = entityManager().createQuery(queryString.toString());\n         query.setParameter(\"type\", type);"},{"sha":"48760564bf14e59cd0dd2491c4b190b9e4c5e0a0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":56,"deletions":8,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -19,16 +19,19 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class JPATaskExecDAO extends AbstractDAO<TaskExec, Long> implements TaskExecDAO {\n@@ -67,14 +70,59 @@ public <T extends Task> TaskExec findLatestEnded(final T task) {\n \n     @Override\n     public List<TaskExec> findAll(final TaskType type) {\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(JPATaskExec.class.getSimpleName()).\n-                append(\" e WHERE e.task IN (\").\n-                append(\"SELECT t FROM \").\n-                append(taskDAO.getEntityReference(type).getSimpleName()).\n-                append(\" t)\");\n-\n-        TypedQuery<TaskExec> query = entityManager().createQuery(queryString.toString(), TaskExec.class);\n+        String queryString = \"SELECT e FROM \" + JPATaskExec.class.getSimpleName()\n+                + \" e WHERE e.task IN (\"\n+                + \"SELECT t FROM \" + taskDAO.getEntityReference(type).getSimpleName() + \" t)\";\n+\n+        TypedQuery<TaskExec> query = entityManager().createQuery(queryString, TaskExec.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public int count(final Long taskKey) {\n+        Query countQuery = entityManager().createNativeQuery(\n+                \"SELECT COUNT(e.id) FROM \" + JPATaskExec.TABLE + \" e WHERE e.task_id=?1\");\n+        countQuery.setParameter(1, taskKey);\n+\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n+    private String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+        StringBuilder statement = new StringBuilder();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            String field = clause.getField().trim();\n+            if (ReflectionUtils.findField(JPATaskExec.class, field) != null) {\n+                statement.append(\"e.\").append(field).append(' ').append(clause.getDirection().name());\n+            }\n+        }\n+\n+        if (statement.length() == 0) {\n+            statement.append(\"ORDER BY e.id DESC\");\n+        } else {\n+            statement.insert(0, \"ORDER BY \");\n+        }\n+        return statement.toString();\n+    }\n+\n+    @Override\n+    public List<TaskExec> findAll(\n+            final Long taskKey, final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n+\n+        String queryString =\n+                \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e WHERE e.task.id=:taskKey \"\n+                + toOrderByStatement(orderByClauses);\n+\n+        TypedQuery<TaskExec> query = entityManager().createQuery(queryString, TaskExec.class);\n+        query.setParameter(\"taskKey\", taskKey);\n+\n+        // page starts from 1, while setFirtResult() starts from 0\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage >= 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n         return query.getResultList();\n     }\n "},{"sha":"dcaca2b876092fdd9e95eba7d24b8f427134891f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/TaskDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -32,7 +32,7 @@ public interface TaskDataBinder {\n \n     TaskExecTO getTaskExecTO(TaskExec execution);\n \n-    <T extends AbstractTaskTO> T getTaskTO(Task task, TaskUtils taskUtil);\n+    <T extends AbstractTaskTO> T getTaskTO(Task task, TaskUtils taskUtil, boolean details);\n \n     void updateSchedTask(SchedTask task, SchedTaskTO taskTO, TaskUtils taskUtil);\n "},{"sha":"d3035a3ba0e8f1b50ccfa92f07533a7c3e4d7d98","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -280,7 +280,7 @@ private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n     }\n \n     @Override\n-    public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils) {\n+    public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils, final boolean details) {\n         T taskTO = taskUtils.newTaskTO();\n         BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n \n@@ -289,9 +289,11 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n         taskTO.setStartDate(latestExec == null ? null : latestExec.getStartDate());\n         taskTO.setEndDate(latestExec == null ? null : latestExec.getEndDate());\n \n-        for (TaskExec execution : task.getExecs()) {\n-            if (execution != null) {\n-                taskTO.getExecutions().add(getTaskExecTO(execution));\n+        if (details) {\n+            for (TaskExec execution : task.getExecs()) {\n+                if (execution != null) {\n+                    taskTO.getExecutions().add(getTaskExecTO(execution));\n+                }\n             }\n         }\n "},{"sha":"e1b43b4b32aca924b2bb7bdf5d53c8065cbccef4","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -117,7 +117,7 @@ protected PagedResult<TO> list(final AnyListQuery listQuery) {\n                         listQuery.getSize(),\n                         getOrderByClauses(listQuery.getOrderBy()),\n                         realm,\n-                        listQuery.isDetails()),\n+                        listQuery.getDetails()),\n                 listQuery.getPage(),\n                 listQuery.getSize(),\n                 getAnyLogic().count(realm));\n@@ -138,7 +138,7 @@ public PagedResult<TO> search(final AnySearchQuery searchQuery) {\n                         searchQuery.getSize(),\n                         getOrderByClauses(searchQuery.getOrderBy()),\n                         isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n-                        searchQuery.isDetails()),\n+                        searchQuery.getDetails()),\n                 searchQuery.getPage(),\n                 searchQuery.getSize(),\n                 getAnyLogic().searchCount(cond, isAssignableCond ? SyncopeConstants.ROOT_REALM : realm));"},{"sha":"b5227e40417cab58151ca81f4ca706d3bf0de345","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -63,7 +63,7 @@ public PagedResult<AnyObjectTO> list(final String type, final AnyListQuery listQ\n \n         AnySearchQuery searchQuery = new AnySearchQuery();\n         searchQuery.setFiql(new AnyObjectFiqlSearchConditionBuilder(type).query());\n-        searchQuery.setDetails(listQuery.isDetails());\n+        searchQuery.setDetails(listQuery.getDetails());\n         searchQuery.setOrderBy(listQuery.getOrderBy());\n         searchQuery.setPage(listQuery.getPage());\n         searchQuery.setSize(listQuery.getSize());"},{"sha":"748d9987eba4d8841f35df440fbe78a6b70e4a3f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":28,"deletions":13,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.logic.TaskLogic;\n@@ -65,11 +66,6 @@ public void delete(final Long key) {\n         logic.delete(key);\n     }\n \n-    @Override\n-    public void deleteExecution(final Long executionKey) {\n-        logic.deleteExecution(executionKey);\n-    }\n-\n     @Override\n     public TaskExecTO execute(final Long key, final boolean dryRun) {\n         return logic.execute(key, dryRun);\n@@ -86,7 +82,8 @@ public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n                         query.getAnyTypeKey(),\n                         query.getPage(),\n                         query.getSize(),\n-                        getOrderByClauses(query.getOrderBy())),\n+                        getOrderByClauses(query.getOrderBy()),\n+                        query.getDetails()),\n                 query.getPage(),\n                 query.getSize(),\n                 logic.count(\n@@ -97,13 +94,8 @@ public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n     }\n \n     @Override\n-    public <T extends AbstractTaskTO> T read(final Long key) {\n-        return logic.read(key);\n-    }\n-\n-    @Override\n-    public TaskExecTO readExecution(final Long executionKey) {\n-        return logic.readExecution(executionKey);\n+    public <T extends AbstractTaskTO> T read(final Long key, final boolean details) {\n+        return logic.read(key, details);\n     }\n \n     @Override\n@@ -117,6 +109,29 @@ public void update(final AbstractTaskTO taskTO) {\n         }\n     }\n \n+    @Override\n+    public TaskExecTO readExecution(final Long executionKey) {\n+        return logic.readExecution(executionKey);\n+    }\n+\n+    @Override\n+    public PagedResult<TaskExecTO> listExecutions(final TaskExecQuery query) {\n+        return buildPagedResult(\n+                logic.listExecutions(\n+                        query.getKey(),\n+                        query.getPage(),\n+                        query.getSize(),\n+                        getOrderByClauses(query.getOrderBy())),\n+                query.getPage(),\n+                query.getSize(),\n+                logic.countExecutions(query.getKey()));\n+    }\n+\n+    @Override\n+    public void deleteExecution(final Long executionKey) {\n+        logic.deleteExecution(executionKey);\n+    }\n+\n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n         BulkActionResult result = new BulkActionResult();"},{"sha":"88d2450d8a667cd61129341ba89e3c8c31730cfd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -94,7 +94,7 @@ protected void removeTestUsers() {\n     protected static TaskExecTO execTask(final TaskService taskService, final Long taskKey, final String initialStatus,\n             final int maxWaitSeconds, final boolean dryRun) {\n \n-        AbstractTaskTO taskTO = taskService.read(taskKey);\n+        AbstractTaskTO taskTO = taskService.read(taskKey, true);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n@@ -112,7 +112,7 @@ protected static TaskExecTO execTask(final TaskService taskService, final Long t\n             } catch (InterruptedException e) {\n             }\n \n-            taskTO = taskService.read(taskTO.getKey());\n+            taskTO = taskService.read(taskTO.getKey(), true);\n \n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getExecutions());"},{"sha":"bb5634213225e5c816ee0e6d65869adf6fb47b65","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -198,7 +198,7 @@ public void createResourceAndSync() {\n         response = adminClient.getService(TaskService.class).create(task);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n         task = adminClient.getService(TaskService.class).read(\n-                Long.valueOf(StringUtils.substringAfterLast(response.getLocation().toASCIIString(), \"/\")));\n+                Long.valueOf(StringUtils.substringAfterLast(response.getLocation().toASCIIString(), \"/\")), true);\n         assertNotNull(resource);\n \n         // synchronize"},{"sha":"0d186934898536d52a5d57ac7935a0e1de968024","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationTaskITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -144,7 +144,7 @@ public void notifyByMail() throws Exception {\n         assertTrue(verifyMail(sender, subject, recipient));\n \n         // verify message body\n-        taskTO = taskService.read(taskTO.getKey());\n+        taskTO = taskService.read(taskTO.getKey(), true);\n         assertNotNull(taskTO);\n         assertTrue(taskTO.isExecuted());\n         assertNotNull(taskTO.getTextBody());\n@@ -191,7 +191,7 @@ public void notifyByMailWithRetry() throws Exception {\n             // 4. verify notification could not be delivered\n             execTask(taskService, taskTO.getKey(), NotificationJob.Status.NOT_SENT.name(), 5, false);\n \n-            taskTO = taskService.read(taskTO.getKey());\n+            taskTO = taskService.read(taskTO.getKey(), true);\n             assertNotNull(taskTO);\n             assertFalse(taskTO.isExecuted());\n             assertFalse(taskTO.getExecutions().isEmpty());\n@@ -217,7 +217,7 @@ public void issueSYNCOPE81() {\n         // generate an execution in order to verify the deletion of a notification task with one or more executions\n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        taskTO = taskService.read(taskTO.getKey());\n+        taskTO = taskService.read(taskTO.getKey(), true);\n         assertTrue(taskTO.isExecuted());\n         assertFalse(taskTO.getExecutions().isEmpty());\n \n@@ -240,7 +240,7 @@ public void issueSYNCOPE86() {\n             execNotificationTask(taskService, taskTO.getKey(), 50);\n \n             // 4. verify\n-            taskTO = taskService.read(taskTO.getKey());\n+            taskTO = taskService.read(taskTO.getKey(), true);\n             assertNotNull(taskTO);\n             assertTrue(taskTO.isExecuted());\n             assertEquals(1, taskTO.getExecutions().size());\n@@ -269,7 +269,7 @@ public void issueSYNCOPE192() throws Exception {\n         assertTrue(verifyMail(sender, subject, recipient));\n \n         // verify that last exec status was updated\n-        taskTO = taskService.read(taskTO.getKey());\n+        taskTO = taskService.read(taskTO.getKey(), true);\n         assertNotNull(taskTO);\n         assertTrue(taskTO.isExecuted());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -291,7 +291,7 @@ public void issueSYNCOPE445() throws Exception {\n         assertTrue(verifyMail(sender, subject, recipient));\n \n         // verify task\n-        taskTO = taskService.read(taskTO.getKey());\n+        taskTO = taskService.read(taskTO.getKey(), true);\n         assertTrue(taskTO.isExecuted());\n         assertNotNull(taskTO);\n         assertTrue(taskTO.getRecipients().contains(\"syncope445@syncope.apache.org\"));"},{"sha":"cd2a010c80d3b86a2bddc7f28e1680eea9bc4cd2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":44,"deletions":1,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -69,7 +70,7 @@ public void paginatedList() {\n \n     @Test\n     public void read() {\n-        final PropagationTaskTO taskTO = taskService.read(3L);\n+        final PropagationTaskTO taskTO = taskService.read(3L, true);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -109,4 +110,46 @@ public void bulkAction() {\n         assertFalse(taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult().\n                 containsAll(after));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE741() {\n+        for (int i = 0; i < 3; i++) {\n+            taskService.execute(1L, false);\n+            taskService.execute(2L, false);\n+        }\n+        try {\n+            Thread.sleep(3000);\n+        } catch (InterruptedException e) {\n+            // ignore\n+        }\n+\n+        // check list\n+        PagedResult<AbstractTaskTO> tasks = taskService.list(\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n+        for (AbstractTaskTO item : tasks.getResult()) {\n+            assertTrue(item.getExecutions().isEmpty());\n+        }\n+\n+        tasks = taskService.list(\n+                new TaskQuery.Builder().type(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n+        for (AbstractTaskTO item : tasks.getResult()) {\n+            assertFalse(item.getExecutions().isEmpty());\n+        }\n+\n+        // check read\n+        PropagationTaskTO task = taskService.read(1L, false);\n+        assertNotNull(task);\n+        assertEquals(1L, task.getKey());\n+        assertTrue(task.getExecutions().isEmpty());\n+\n+        task = taskService.read(1L, true);\n+        assertNotNull(task);\n+        assertEquals(1L, task.getKey());\n+        assertFalse(task.getExecutions().isEmpty());\n+\n+        // check list executions\n+        PagedResult<TaskExecTO> execs = taskService.listExecutions(\n+                new TaskExecQuery.Builder().key(1L).page(1).size(2).build());\n+        assertTrue(execs.getTotalCount() >= execs.getResult().size());\n+    }\n }"},{"sha":"2213f532e8b2af0d37eac17a93bbec211324f831","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -73,7 +73,7 @@ public void getPushActionsClasses() {\n \n     @Test\n     public void read() {\n-        PushTaskTO pushTaskTO = taskService.<PushTaskTO>read(17L);\n+        PushTaskTO pushTaskTO = taskService.<PushTaskTO>read(17L, true);\n         assertEquals(UnmatchingRule.ASSIGN, pushTaskTO.getUnmatchingRule());\n         assertEquals(MatchingRule.UPDATE, pushTaskTO.getMatchingRule());\n     }\n@@ -104,7 +104,7 @@ public void createPushTask() {\n         final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n         assertNotNull(actual);\n \n-        task = taskService.read(actual.getKey());\n+        task = taskService.read(actual.getKey(), true);\n         assertNotNull(task);\n         assertEquals(task.getKey(), actual.getKey());\n         assertEquals(task.getJobDelegateClassName(), actual.getJobDelegateClassName());"},{"sha":"3d1605dc24368a478b3c73f6716c0c0ea2ab7dce","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -67,15 +67,15 @@ public void list() {\n \n     @Test\n     public void update() {\n-        SchedTaskTO task = taskService.read(SCHED_TASK_ID);\n+        SchedTaskTO task = taskService.read(SCHED_TASK_ID, true);\n         assertNotNull(task);\n \n         SchedTaskTO taskMod = new SchedTaskTO();\n         taskMod.setKey(5);\n         taskMod.setCronExpression(null);\n \n         taskService.update(taskMod);\n-        SchedTaskTO actual = taskService.read(taskMod.getKey());\n+        SchedTaskTO actual = taskService.read(taskMod.getKey(), true);\n         assertNotNull(actual);\n         assertEquals(task.getKey(), actual.getKey());\n         assertNull(actual.getCronExpression());\n@@ -94,7 +94,7 @@ public void issueSYNCOPE144() {\n         assertEquals(\"issueSYNCOPE144\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n \n-        task = taskService.read(actual.getKey());\n+        task = taskService.read(actual.getKey(), true);\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144\", task.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());"},{"sha":"b774bdea7eb98f21b8a673ea16fe7cb885766ec1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -83,7 +83,7 @@ public class SyncTaskITCase extends AbstractTaskITCase {\n \n     @BeforeClass\n     public static void testSyncActionsSetup() {\n-        SyncTaskTO syncTask = taskService.read(SYNC_TASK_ID);\n+        SyncTaskTO syncTask = taskService.read(SYNC_TASK_ID, true);\n         syncTask.getActionsClassNames().add(TestSyncActions.class.getName());\n         taskService.update(syncTask);\n     }\n@@ -129,7 +129,7 @@ public void create() {\n         SyncTaskTO actual = getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n \n-        task = taskService.read(actual.getKey());\n+        task = taskService.read(actual.getKey(), true);\n         assertNotNull(task);\n         assertEquals(actual.getKey(), task.getKey());\n         assertEquals(actual.getJobDelegateClassName(), task.getJobDelegateClassName());\n@@ -458,7 +458,7 @@ public void filteredReconciliation() {\n             jdbcTemplate.execute(\"INSERT INTO testsync VALUES (1002, 'user2', 'Rossi', 'mail2@apache.org')\");\n \n             // 2. create new sync task for test-db, with reconciliation filter (surname 'Rossi') \n-            task = taskService.read(10L);\n+            task = taskService.read(10L, true);\n             task.setSyncMode(SyncMode.FILTERED_RECONCILIATION);\n             task.setReconciliationFilterBuilderClassName(TestReconciliationFilterBuilder.class.getName());\n             Response response = taskService.create(task);\n@@ -536,13 +536,13 @@ public void issueSYNCOPE68() {\n             //-----------------------------\n \n             // Update sync task\n-            SyncTaskTO task = taskService.read(9L);\n+            SyncTaskTO task = taskService.read(9L, true);\n             assertNotNull(task);\n \n             task.getTemplates().put(AnyTypeKind.USER.name(), template);\n \n             taskService.update(task);\n-            SyncTaskTO actual = taskService.read(task.getKey());\n+            SyncTaskTO actual = taskService.read(task.getKey(), true);\n             assertNotNull(actual);\n             assertEquals(task.getKey(), actual.getKey());\n             assertFalse(actual.getTemplates().get(AnyTypeKind.USER.name()).getResources().isEmpty());\n@@ -631,7 +631,7 @@ public void issueSYNCOPE258() {\n \n         execProvisioningTask(taskService, task.getKey(), 50, false);\n \n-        SyncTaskTO executed = taskService.read(task.getKey());\n+        SyncTaskTO executed = taskService.read(task.getKey(), true);\n         assertEquals(1, executed.getExecutions().size());\n \n         // asser for just one match\n@@ -689,7 +689,7 @@ public void issueSYNCOPE307() {\n         assertTrue(userTO.getVirAttrMap().isEmpty());\n \n         // Update sync task\n-        SyncTaskTO task = taskService.read(12L);\n+        SyncTaskTO task = taskService.read(12L, true);\n         assertNotNull(task);\n \n         UserTO template = new UserTO();\n@@ -755,7 +755,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         SyncTaskTO actual = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n \n-        syncTask = taskService.read(actual.getKey());\n+        syncTask = taskService.read(actual.getKey(), true);\n         assertNotNull(syncTask);\n         assertEquals(actual.getKey(), syncTask.getKey());\n         assertEquals(actual.getJobDelegateClassName(), syncTask.getJobDelegateClassName());"},{"sha":"199fe0b1ab1271be55d2a4809f77aa4f3093afb2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/930db341fc53b0c71ada1b9300979cbd8ac791e5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=930db341fc53b0c71ada1b9300979cbd8ac791e5","patch":"@@ -168,7 +168,7 @@ public void createUserWithNoPropagation() {\n         assertTrue(newMaxKey > maxKey);\n \n         // get last task\n-        PropagationTaskTO taskTO = taskService.read(newMaxKey);\n+        PropagationTaskTO taskTO = taskService.read(newMaxKey, true);\n         assertNotNull(taskTO);\n         assertFalse(taskTO.getExecutions().isEmpty());\n         assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED.name(), taskTO.getExecutions().get(0).getStatus());\n@@ -353,7 +353,7 @@ public void create() {\n         assertFalse(tasks.getResult().isEmpty());\n \n         long maxKey = tasks.getResult().iterator().next().getKey();\n-        PropagationTaskTO taskTO = taskService.read(maxKey);\n+        PropagationTaskTO taskTO = taskService.read(maxKey, true);\n \n         assertNotNull(taskTO);\n         int maxTaskExecutions = taskTO.getExecutions().size();\n@@ -400,7 +400,7 @@ public void create() {\n         assertEquals(newMaxKey, maxKey);\n \n         // get last task\n-        taskTO = taskService.read(newMaxKey);\n+        taskTO = taskService.read(newMaxKey, true);\n \n         assertNotNull(taskTO);\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n@@ -764,7 +764,7 @@ public void verifyTaskRegistration() {\n         // all update executions have to be registered\n         assertTrue(newMaxKey > maxKey);\n \n-        PropagationTaskTO taskTO = taskService.read(newMaxKey);\n+        PropagationTaskTO taskTO = taskService.read(newMaxKey, true);\n \n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());"}]}