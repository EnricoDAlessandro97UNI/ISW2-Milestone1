{"sha":"e5860a76a5584edf780df180eb9229ddf44de684","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU1ODYwYTc2YTU1ODRlZGY3ODBkZjE4MGViOTIyOWRkZjQ0ZGU2ODQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-12T09:50:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-12T10:41:49Z"},"message":"[SYNCOPE-1299] Core implementation","tree":{"sha":"6f6c34d86d6b462cf57f6b8fcd2248acc5c5130c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6f6c34d86d6b462cf57f6b8fcd2248acc5c5130c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e5860a76a5584edf780df180eb9229ddf44de684","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e5860a76a5584edf780df180eb9229ddf44de684","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e5860a76a5584edf780df180eb9229ddf44de684","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e5860a76a5584edf780df180eb9229ddf44de684/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3c4a351534e3221a2ce0f0a9660b442f8dbfdc74","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3c4a351534e3221a2ce0f0a9660b442f8dbfdc74","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3c4a351534e3221a2ce0f0a9660b442f8dbfdc74"}],"stats":{"total":1307,"additions":1151,"deletions":156},"files":[{"sha":"cdef68366c294b01d5d7530f1ef254ed408bc8e9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningTaskTO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningTaskTO.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -33,8 +33,7 @@\n @XmlRootElement(name = \"provisioningTask\")\n @XmlType\n @XmlSeeAlso({ PushTaskTO.class, PullTaskTO.class })\n-@Schema(\n-        allOf = { SchedTaskTO.class },\n+@Schema(allOf = { SchedTaskTO.class },\n         subTypes = { PushTaskTO.class, PullTaskTO.class }, discriminatorProperty = \"@class\")\n public abstract class ProvisioningTaskTO extends SchedTaskTO {\n "},{"sha":"2ebf6999ed940e1d17769d92c5ee91d200354e46","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReconciliationRequest.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationRequest.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ReconciliationAction;\n+\n+public class ReconciliationRequest extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -2592156800185957182L;\n+\n+    private AnyTypeKind anyTypeKind;\n+\n+    private String anyKey;\n+\n+    private String resourceKey;\n+\n+    private ReconciliationAction action;\n+\n+    private boolean remediation;\n+\n+    private final List<String> actions = new ArrayList<>();\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n+    }\n+\n+    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n+        this.anyTypeKind = anyTypeKind;\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public String getAnyKey() {\n+        return anyKey;\n+    }\n+\n+    public void setAnyKey(final String anyKey) {\n+        this.anyKey = anyKey;\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public String getResourceKey() {\n+        return resourceKey;\n+    }\n+\n+    public void setResourceKey(final String resourceKey) {\n+        this.resourceKey = resourceKey;\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n+    public ReconciliationAction getAction() {\n+        return action;\n+    }\n+\n+    public void setAction(final ReconciliationAction action) {\n+        this.action = action;\n+    }\n+\n+    public boolean isRemediation() {\n+        return remediation;\n+    }\n+\n+    public void setRemediation(final boolean remediation) {\n+        this.remediation = remediation;\n+    }\n+\n+    @XmlElementWrapper(name = \"actions\")\n+    @XmlElement(name = \"action\")\n+    @JsonProperty(\"actions\")\n+    public List<String> getActions() {\n+        return actions;\n+    }\n+}"},{"sha":"2d7af983bb013c2fdc38c435abc2b31820da6029","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReconciliationStatus.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationStatus.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+/**\n+ * Reconciliation status.\n+ */\n+@XmlRootElement(name = \"reconciliationStatus\")\n+@XmlType\n+public class ReconciliationStatus extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -8516345256596521490L;\n+\n+    private ConnObjectTO onSyncope;\n+\n+    private ConnObjectTO onResource;\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public ConnObjectTO getOnSyncope() {\n+        return onSyncope;\n+    }\n+\n+    public void setOnSyncope(final ConnObjectTO onSyncope) {\n+        this.onSyncope = onSyncope;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public ConnObjectTO getOnResource() {\n+        return onResource;\n+    }\n+\n+    public void setOnResource(final ConnObjectTO onResource) {\n+        this.onResource = onResource;\n+    }\n+}"},{"sha":"8a8f744a4fb9642800934eb90920c303065403a5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -74,6 +74,7 @@ public enum ClientExceptionType {\n     InUse(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n     DelegatedAdministration(Response.Status.FORBIDDEN),\n+    Reconciliation(Response.Status.BAD_REQUEST),\n     Unknown(Response.Status.BAD_REQUEST),\n     Workflow(Response.Status.BAD_REQUEST);\n "},{"sha":"19b68c2ce855d50eb450e99c59aaf63f1f5a0910","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ReconciliationAction.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReconciliationAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReconciliationAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReconciliationAction.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ReconciliationAction {\n+    PUSH,\n+    PULL\n+\n+}"},{"sha":"77eb840e048f6e71a4c0d07631c727aec2be3c7f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.ReconciliationStatus;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+\n+/**\n+ * REST operations for tasks.\n+ */\n+@Tag(name = \"Reconciliation\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"reconciliation\")\n+public interface ReconciliationService extends JAXRSService {\n+\n+    /**\n+     * Gets current attributes on Syncope and on the given External Resource, related to given user, group or\n+     * any object.\n+     *\n+     * @param anyTypeKind anyTypeKind\n+     * @param anyKey user, group or any object: if value looks like a UUID then it is interpreted as key, otherwise as\n+     * a (user)name\n+     * @param resourceKey resource key\n+     * @return reconciliation status\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    ReconciliationStatus status(\n+            @NotNull @QueryParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n+            @NotNull @QueryParam(\"anyKey\") String anyKey,\n+            @NotNull @QueryParam(\"resourceKey\") String resourceKey);\n+\n+    /**\n+     * Perform the required reconciliation action (PUSH or PULL) to the given user, group or any object and\n+     * External Resource.\n+     *\n+     * @param request reconciliation request\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void reconcile(@NotNull ReconciliationRequest request);\n+}"},{"sha":"a36c159eba9eed7d0f2ba6731c2c72ddd30f8472","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"added","additions":232,"deletions":0,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,232 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.collections.IteratorChain;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.ReconciliationStatus;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePushExecutor;\n+import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ReconciliationLogic extends AbstractTransactionalLogic<AbstractBaseBean> {\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private MappingManager mappingManager;\n+\n+    @Autowired\n+    private ConnectorFactory connFactory;\n+\n+    @Autowired\n+    private SyncopeSinglePullExecutor singlePullExecutor;\n+\n+    @Autowired\n+    private SyncopeSinglePushExecutor singlePushExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Pair<Any<?>, Provision> init(final AnyTypeKind anyTypeKind, final String anyKey, final String resourceKey) {\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n+\n+        Any<?> any = anyUtils.dao().authFind(anyKey);\n+        if (any == null) {\n+            throw new NotFoundException(anyTypeKind + \" '\" + anyKey + \"'\");\n+        }\n+\n+        ExternalResource resource = resourceDAO.find(resourceKey);\n+        if (resource == null) {\n+            throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n+        }\n+        Provision provision = resource.getProvision(any.getType()).orElseThrow(()\n+                -> new NotFoundException(\"Provision for \" + any.getType() + \" on Resource '\" + resourceKey + \"'\"));\n+        if (provision.getMapping() == null) {\n+            throw new NotFoundException(\"Mapping for \" + any.getType() + \" on Resource '\" + resourceKey + \"'\");\n+        }\n+\n+        return (Pair<Any<?>, Provision>) Pair.of(any, provision);\n+    }\n+\n+    private ConnObjectTO getOnSyncope(final Any<?> any, final Provision provision, final String resourceKey) {\n+        Pair<String, Set<Attribute>> attrs = mappingManager.prepareAttrs(any, null, false, true, provision);\n+\n+        MappingItem connObjectKey = provision.getMapping().getConnObjectKeyItem().orElseThrow(()\n+                -> new NotFoundException(\"No RemoteKey set for \" + resourceKey));\n+\n+        ConnObjectTO connObjectTO = ConnObjectUtils.getConnObjectTO(attrs.getRight());\n+        if (attrs.getLeft() != null) {\n+            connObjectTO.getAttrs().add(new AttrTO.Builder().\n+                    schema(connObjectKey.getExtAttrName()).value(attrs.getLeft()).build());\n+            connObjectTO.getAttrs().add(new AttrTO.Builder().\n+                    schema(Uid.NAME).value(attrs.getLeft()).build());\n+        }\n+\n+        return connObjectTO;\n+    }\n+\n+    private ConnObjectTO getOnResource(final Any<?> any, final Provision provision) {\n+        // 1. build connObjectKeyItem\n+        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).orElseThrow(()\n+                -> new NotFoundException(\"ConnObjectKey for \" + any.getType()\n+                        + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision).orElseThrow(()\n+                -> new NotFoundException(\"Value for ConnObjectKey for \" + any.getType()\n+                        + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+\n+        // 2. determine attributes to query\n+        Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(provision).stream().\n+                map(virSchema -> virSchema.asLinkingMappingItem()).collect(Collectors.toSet());\n+        Iterator<MappingItem> mapItems = new IteratorChain<>(\n+                provision.getMapping().getItems().iterator(),\n+                linkinMappingItems.iterator());\n+\n+        // 3. read from the underlying connector\n+        ConnObjectTO connObjectTO = null;\n+\n+        Connector connector = connFactory.getConnector(provision.getResource());\n+        ConnectorObject connectorObject = connector.getObject(\n+                provision.getObjectClass(),\n+                AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue),\n+                MappingUtils.buildOperationOptions(mapItems));\n+        if (connectorObject != null) {\n+            Set<Attribute> attributes = connectorObject.getAttributes();\n+            if (AttributeUtil.find(Uid.NAME, attributes) == null) {\n+                attributes.add(connectorObject.getUid());\n+            }\n+            if (AttributeUtil.find(Name.NAME, attributes) == null) {\n+                attributes.add(connectorObject.getName());\n+            }\n+\n+            connObjectTO = ConnObjectUtils.getConnObjectTO(attributes);\n+        }\n+\n+        return connObjectTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    public ReconciliationStatus status(final AnyTypeKind anyTypeKind, final String anyKey, final String resourceKey) {\n+        Pair<Any<?>, Provision> init = init(anyTypeKind, anyKey, resourceKey);\n+\n+        ReconciliationStatus status = new ReconciliationStatus();\n+        status.setOnSyncope(getOnSyncope(init.getLeft(), init.getRight(), resourceKey));\n+        status.setOnResource(getOnResource(init.getLeft(), init.getRight()));\n+\n+        return status;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    public void reconcile(final ReconciliationRequest request) {\n+        Pair<Any<?>, Provision> init = init(request.getAnyTypeKind(), request.getAnyKey(), request.getResourceKey());\n+\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n+        try {\n+            List<ProvisioningReport> results = null;\n+            switch (request.getAction()) {\n+                case PUSH:\n+                    results = singlePushExecutor.push(\n+                            init.getRight(),\n+                            connFactory.getConnector(init.getRight().getResource()),\n+                            init.getLeft(),\n+                            request.getActions());\n+                    break;\n+\n+                case PULL:\n+                    results = singlePullExecutor.pull(\n+                            init.getRight(),\n+                            connFactory.getConnector(init.getRight().getResource()),\n+                            init.getRight().getMapping().getConnObjectKeyItem().get().getExtAttrName(),\n+                            mappingManager.getConnObjectKeyValue(init.getLeft(), init.getRight()).get(),\n+                            realmDAO.findByFullPath(init.getLeft().getRealm().getFullPath()),\n+                            request.isRemediation(),\n+                            request.getActions());\n+                    break;\n+\n+                default:\n+            }\n+\n+            if (results != null && !results.isEmpty()\n+                    && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n+\n+                sce.getElements().add(results.get(0).getMessage());\n+            }\n+        } catch (JobExecutionException e) {\n+            sce.getElements().add(e.getMessage());\n+        }\n+\n+        if (!sce.isEmpty()) {\n+            throw sce;\n+        }\n+    }\n+\n+    @Override\n+    protected AbstractBaseBean resolveReference(final Method method, final Object... os)\n+            throws UnresolvedReferenceException {\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"e59350e975d6c38089dc7224728cb2ddf308bf91","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -22,11 +22,12 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AnyUtils {\n \n-    AnyTypeKind getAnyTypeKind();\n+    AnyTypeKind anyTypeKind();\n \n     <T extends Any<?>> Class<T> anyClass();\n \n@@ -45,9 +46,11 @@ public interface AnyUtils {\n     <T extends PlainAttrValue> T newPlainAttrUniqueValue();\n \n     <T extends PlainAttrValue> T clonePlainAttrValue(T src);\n-    \n+\n     <T extends AnyTO> T newAnyTO();\n \n+    <A extends Any<?>> AnyDAO<A> dao();\n+\n     Set<ExternalResource> getAllResources(Any<?> any);\n \n     <S extends Schema> AllowedSchemas<S> getAllowedSchemas(Any<?> any, Class<S> reference);"},{"sha":"64550a75e62f290bc7cb11336b21a062b25bd26a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -92,8 +92,8 @@ protected AnyUtils init() {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public String findKey(final String username) {\n-        return findKey(username, JPAAnyObject.TABLE);\n+    public String findKey(final String name) {\n+        return findKey(name, JPAAnyObject.TABLE);\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"15fa17c79ef19a539f40c8aa9e9cf5c875fd1e18","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -113,7 +114,7 @@ protected JPAAnyUtils(final AnyTypeKind typeKind) {\n     }\n \n     @Override\n-    public AnyTypeKind getAnyTypeKind() {\n+    public AnyTypeKind anyTypeKind() {\n         return anyTypeKind;\n     }\n \n@@ -337,6 +338,29 @@ public <T extends AnyTO> T newAnyTO() {\n         return result;\n     }\n \n+    @Override\n+    public <A extends Any<?>> AnyDAO<A> dao() {\n+        AnyDAO<A> result = null;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = (AnyDAO<A>) userDAO;\n+                break;\n+\n+            case GROUP:\n+                result = (AnyDAO<A>) groupDAO;\n+                break;\n+\n+            case ANY_OBJECT:\n+                result = (AnyDAO<A>) anyObjectDAO;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public Set<ExternalResource> getAllResources(final Any<?> any) {"},{"sha":"bbf843033fe9c0e7c2d82a32a05a2fe4bb6c6926","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePullExecutor.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.quartz.JobExecutionException;\n+\n+public interface SyncopeSinglePullExecutor {\n+\n+    List<ProvisioningReport> pull(\n+            Provision provision,\n+            Connector connector,\n+            String connObjectKey,\n+            String connObjectValue,\n+            Realm realm,\n+            boolean remediation,\n+            List<String> actions) throws JobExecutionException;\n+}"},{"sha":"906830102ec3afc1c58a7201c24306bf07af02d3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePushExecutor.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.quartz.JobExecutionException;\n+\n+public interface SyncopeSinglePushExecutor {\n+\n+    List<ProvisioningReport> push(\n+            Provision provision,\n+            Connector connector,\n+            Any<?> any,\n+            List<String> actions) throws JobExecutionException;\n+}"},{"sha":"83d8e760714adb5d167ed0a40abb72179d34c175","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -674,7 +674,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n \n         IntAttrName intAttrName;\n         try {\n-            intAttrName = intAttrNameParser.parse(mapItem.getIntAttrName(), anyUtils.getAnyTypeKind());\n+            intAttrName = intAttrNameParser.parse(mapItem.getIntAttrName(), anyUtils.anyTypeKind());\n         } catch (ParseException e) {\n             LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", mapItem.getIntAttrName(), e);\n             return;"},{"sha":"35e0356ad28af93d807a06c6cc6b74eaa235f9a9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -171,7 +171,7 @@ public boolean handle(final SyncDelta delta) {\n             ProvisioningReport ignoreResult = new ProvisioningReport();\n             ignoreResult.setOperation(ResourceOperation.NONE);\n             ignoreResult.setAnyType(provision == null\n-                    ? getAnyUtils().getAnyTypeKind().name() : provision.getAnyType().getKey());\n+                    ? getAnyUtils().anyTypeKind().name() : provision.getAnyType().getKey());\n             ignoreResult.setStatus(ProvisioningReport.Status.IGNORE);\n             ignoreResult.setKey(null);\n             ignoreResult.setName(delta.getObject().getName().getNameValue());\n@@ -914,7 +914,7 @@ protected void finalize(\n         }\n \n         notificationManager.createTasks(AuditElements.EventCategoryType.PULL,\n-                getAnyUtils().getAnyTypeKind().name().toLowerCase(),\n+                getAnyUtils().anyTypeKind().name().toLowerCase(),\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,\n@@ -924,7 +924,7 @@ protected void finalize(\n                 furtherInput);\n \n         auditManager.audit(AuditElements.EventCategoryType.PULL,\n-                getAnyUtils().getAnyTypeKind().name().toLowerCase(),\n+                getAnyUtils().anyTypeKind().name().toLowerCase(),\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,"},{"sha":"63f397b9be8cde8fdc26bfc358263e6f60bf21cd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -256,7 +256,7 @@ protected void doHandle(final Any<?> any) throws JobExecutionException {\n                 : null;\n \n         LOG.debug(\"Propagating {} with key {} towards {}\",\n-                anyUtils.getAnyTypeKind(), any.getKey(), profile.getTask().getResource());\n+                anyUtils.anyTypeKind(), any.getKey(), profile.getTask().getResource());\n \n         Object output = null;\n         Result resultStatus = null;"},{"sha":"f8b73a2b1d5cdafa5ff46ca86bb996344fc881e7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":15,"deletions":34,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -80,14 +80,6 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i\n \n     protected ProvisioningProfile<PullTask, PullActions> profile;\n \n-    protected RealmPullResultHandler rhandler;\n-\n-    protected AnyObjectPullResultHandler ahandler;\n-\n-    protected UserPullResultHandler uhandler;\n-\n-    protected GroupPullResultHandler ghandler;\n-\n     @Override\n     public void setLatestSyncToken(final ObjectClass objectClass, final SyncToken latestSyncToken) {\n         latestSyncTokens.put(objectClass, latestSyncToken);\n@@ -168,30 +160,18 @@ protected void setGroupOwners(final GroupPullResultHandler ghandler) {\n     }\n \n     protected RealmPullResultHandler buildRealmHandler() {\n-        RealmPullResultHandler handler = (RealmPullResultHandler) ApplicationContextProvider.getBeanFactory().\n+        return (RealmPullResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultRealmPullResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setProfile(profile);\n-        handler.setPullExecutor(this);\n-\n-        return handler;\n     }\n \n     protected AnyObjectPullResultHandler buildAnyObjectHandler() {\n-        AnyObjectPullResultHandler handler = (AnyObjectPullResultHandler) ApplicationContextProvider.getBeanFactory().\n+        return (AnyObjectPullResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultAnyObjectPullResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setProfile(profile);\n-        handler.setPullExecutor(this);\n-\n-        return handler;\n     }\n \n     protected UserPullResultHandler buildUserHandler() {\n-        UserPullResultHandler handler = (UserPullResultHandler) ApplicationContextProvider.getBeanFactory().\n+        return (UserPullResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultUserPullResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setProfile(profile);\n-        handler.setPullExecutor(this);\n-\n-        return handler;\n     }\n \n     protected GroupPullResultHandler buildGroupHandler() {\n@@ -245,7 +225,9 @@ protected String doExecuteProvisioning(\n             OperationOptions options = MappingUtils.buildOperationOptions(\n                     MappingUtils.getPullItems(orgUnit.getItems()).iterator());\n \n-            rhandler = buildRealmHandler();\n+            RealmPullResultHandler handler = buildRealmHandler();\n+            handler.setProfile(profile);\n+            handler.setPullExecutor(this);\n \n             try {\n                 switch (pullTask.getPullMode()) {\n@@ -257,7 +239,7 @@ protected String doExecuteProvisioning(\n                         connector.sync(\n                                 orgUnit.getObjectClass(),\n                                 orgUnit.getSyncToken(),\n-                                rhandler,\n+                                handler,\n                                 options);\n \n                         if (!dryRun) {\n@@ -271,14 +253,14 @@ protected String doExecuteProvisioning(\n                                 ImplementationManager.build(pullTask.getReconFilterBuilder());\n                         connector.filteredReconciliation(orgUnit.getObjectClass(),\n                                 filterBuilder,\n-                                rhandler,\n+                                handler,\n                                 options);\n                         break;\n \n                     case FULL_RECONCILIATION:\n                     default:\n                         connector.fullReconciliation(orgUnit.getObjectClass(),\n-                                rhandler,\n+                                handler,\n                                 options);\n                         break;\n                 }\n@@ -288,18 +270,15 @@ protected String doExecuteProvisioning(\n         }\n \n         // ...then provisions for any types\n-        ahandler = buildAnyObjectHandler();\n-        uhandler = buildUserHandler();\n-        ghandler = buildGroupHandler();\n-\n+        SyncopePullResultHandler handler;\n+        GroupPullResultHandler ghandler = buildGroupHandler();\n         for (Provision provision : pullTask.getResource().getProvisions()) {\n             if (provision.getMapping() != null) {\n                 status.set(\"Pulling \" + provision.getObjectClass().getObjectClassValue());\n \n-                SyncopePullResultHandler handler;\n                 switch (provision.getAnyType().getKind()) {\n                     case USER:\n-                        handler = uhandler;\n+                        handler = buildUserHandler();\n                         break;\n \n                     case GROUP:\n@@ -308,8 +287,10 @@ protected String doExecuteProvisioning(\n \n                     case ANY_OBJECT:\n                     default:\n-                        handler = ahandler;\n+                        handler = buildAnyObjectHandler();\n                 }\n+                handler.setProfile(profile);\n+                handler.setPullExecutor(this);\n \n                 try {\n                     Set<MappingItem> linkingMappingItems = virSchemaDAO.findByProvision(provision).stream()."},{"sha":"941e5e40b803a8585ec57461676e8c450844bf1b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":7,"deletions":16,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -26,11 +26,10 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n-import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -148,10 +147,10 @@ public Optional<String> match(\n             try {\n                 List<String> anyKeys = match(connObj, provision.get(), anyUtils);\n                 if (anyKeys.isEmpty()) {\n-                    LOG.debug(\"No matching {} found for {}, aborting\", anyUtils.getAnyTypeKind(), connObj);\n+                    LOG.debug(\"No matching {} found for {}, aborting\", anyUtils.anyTypeKind(), connObj);\n                 } else {\n                     if (anyKeys.size() > 1) {\n-                        LOG.warn(\"More than one {} found {} - taking first only\", anyUtils.getAnyTypeKind(), anyKeys);\n+                        LOG.warn(\"More than one {} found {} - taking first only\", anyUtils.anyTypeKind(), anyKeys);\n                     }\n \n                     result = Optional.ofNullable(anyKeys.iterator().next());\n@@ -164,14 +163,6 @@ public Optional<String> match(\n         return result;\n     }\n \n-    private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n-        return AnyTypeKind.USER == anyTypeKind\n-                ? userDAO\n-                : AnyTypeKind.ANY_OBJECT == anyTypeKind\n-                        ? anyObjectDAO\n-                        : groupDAO;\n-    }\n-\n     private List<String> findByConnObjectKey(\n             final ConnectorObject connObj, final Provision provision, final AnyUtils anyUtils) {\n \n@@ -213,7 +204,7 @@ private List<String> findByConnObjectKey(\n         if (intAttrName.getField() != null) {\n             switch (intAttrName.getField()) {\n                 case \"key\":\n-                    Any<?> any = getAnyDAO(provision.getAnyType().getKind()).find(connObjectKey);\n+                    Any<?> any = anyUtils.dao().find(connObjectKey);\n                     if (any != null) {\n                         result.add(any.getKey());\n                     }\n@@ -256,13 +247,13 @@ private List<String> findByConnObjectKey(\n                         }\n                     }\n \n-                    result.addAll(getAnyDAO(provision.getAnyType().getKind()).\n+                    result.addAll(anyUtils.dao().\n                             findByPlainAttrValue(intAttrName.getSchemaName(), value).stream().\n                             map(Entity::getKey).collect(Collectors.toList()));\n                     break;\n \n                 case DERIVED:\n-                    result.addAll(getAnyDAO(provision.getAnyType().getKind()).\n+                    result.addAll(anyUtils.dao().\n                             findByDerAttrValue(intAttrName.getSchemaName(), connObjectKey).stream().\n                             map(Entity::getKey).collect(Collectors.toList()));\n                     break;\n@@ -312,7 +303,7 @@ public List<String> match(\n \n         try {\n             return rule.isPresent()\n-                    ? findByCorrelationRule(connObj, provision, rule.get(), anyUtils.getAnyTypeKind())\n+                    ? findByCorrelationRule(connObj, provision, rule.get(), anyUtils.anyTypeKind())\n                     : findByConnObjectKey(connObj, provision, anyUtils);\n         } catch (RuntimeException e) {\n             LOG.error(\"Could not match {} with any existing {}\", connObj, provision.getAnyType(), e);"},{"sha":"2207f423fa21cc4541feb0aa452580deaa33d286","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":15,"deletions":71,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -27,18 +27,15 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.MutablePair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -62,42 +59,22 @@\n \n public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n \n-    /**\n-     * User DAO.\n-     */\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n     /**\n      * Search DAO.\n      */\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n-    /**\n-     * Group DAO.\n-     */\n     @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n+    protected RealmDAO realmDAO;\n \n     @Autowired\n-    protected RealmDAO realmDAO;\n+    protected AnyUtilsFactory anyUtilsFactory;\n \n     protected ProvisioningProfile<PushTask, PushActions> profile;\n \n     protected final Map<String, MutablePair<Integer, String>> handled = new HashMap<>();\n \n-    protected RealmPushResultHandler rhandler;\n-\n-    protected AnyObjectPushResultHandler ahandler;\n-\n-    protected UserPushResultHandler uhandler;\n-\n-    protected GroupPushResultHandler ghandler;\n-\n     protected void reportHandled(final String anyType, final String key) {\n         MutablePair<Integer, String> pair = handled.get(anyType);\n         if (pair == null) {\n@@ -125,25 +102,6 @@ public String currentStatus() {\n         return status.get();\n     }\n \n-    protected AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n-        AnyDAO<?> result;\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = userDAO;\n-                break;\n-\n-            case GROUP:\n-                result = groupDAO;\n-                break;\n-\n-            case ANY_OBJECT:\n-            default:\n-                result = anyObjectDAO;\n-        }\n-\n-        return result;\n-    }\n-\n     protected void doHandle(\n             final List<? extends Any<?>> anys,\n             final SyncopePushResultHandler handler,\n@@ -168,35 +126,23 @@ protected void doHandle(\n     }\n \n     protected RealmPushResultHandler buildRealmHandler() {\n-        RealmPushResultHandler handler = (RealmPushResultHandler) ApplicationContextProvider.getBeanFactory().\n+        return (RealmPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultRealmPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setProfile(profile);\n-\n-        return handler;\n     }\n \n     protected AnyObjectPushResultHandler buildAnyObjectHandler() {\n-        AnyObjectPushResultHandler handler = (AnyObjectPushResultHandler) ApplicationContextProvider.getBeanFactory().\n+        return (AnyObjectPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultAnyObjectPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setProfile(profile);\n-\n-        return handler;\n     }\n \n     protected UserPushResultHandler buildUserHandler() {\n-        UserPushResultHandler handler = (UserPushResultHandler) ApplicationContextProvider.getBeanFactory().\n+        return (UserPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultUserPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setProfile(profile);\n-\n-        return handler;\n     }\n \n     protected GroupPushResultHandler buildGroupHandler() {\n-        GroupPushResultHandler handler = (GroupPushResultHandler) ApplicationContextProvider.getBeanFactory().\n+        return (GroupPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultGroupPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setProfile(profile);\n-\n-        return handler;\n     }\n \n     @Override\n@@ -233,13 +179,14 @@ protected String doExecuteProvisioning(\n         if (pushTask.getResource().getOrgUnit() != null) {\n             status.set(\"Pushing realms\");\n \n-            rhandler = buildRealmHandler();\n+            RealmPushResultHandler handler = buildRealmHandler();\n+            handler.setProfile(profile);\n \n             for (Realm realm : realmDAO.findDescendants(profile.getTask().getSourceRealm())) {\n                 // Never push the root realm\n                 if (realm.getParent() != null) {\n                     try {\n-                        rhandler.handle(realm.getKey());\n+                        handler.handle(realm.getKey());\n                         reportHandled(SyncopeConstants.REALM_ANYTYPE, realm.getName());\n                     } catch (Exception e) {\n                         LOG.warn(\"Failure pushing '{}' on '{}'\", realm, pushTask.getResource(), e);\n@@ -250,30 +197,27 @@ protected String doExecuteProvisioning(\n         }\n \n         // ...then provisions for any types\n-        ahandler = buildAnyObjectHandler();\n-        uhandler = buildUserHandler();\n-        ghandler = buildGroupHandler();\n-\n         for (Provision provision : pushTask.getResource().getProvisions()) {\n             if (provision.getMapping() != null) {\n                 status.set(\"Pushing \" + provision.getAnyType().getKey());\n \n-                AnyDAO<?> anyDAO = getAnyDAO(provision.getAnyType().getKind());\n+                AnyDAO<?> anyDAO = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao();\n \n                 SyncopePushResultHandler handler;\n                 switch (provision.getAnyType().getKind()) {\n                     case USER:\n-                        handler = uhandler;\n+                        handler = buildUserHandler();\n                         break;\n \n                     case GROUP:\n-                        handler = ghandler;\n+                        handler = buildGroupHandler();\n                         break;\n \n                     case ANY_OBJECT:\n                     default:\n-                        handler = ahandler;\n+                        handler = buildAnyObjectHandler();\n                 }\n+                handler.setProfile(profile);\n \n                 Optional<? extends PushTaskAnyFilter> anyFilter = pushTask.getFilter(provision.getAnyType());\n                 String filter = anyFilter.isPresent()"},{"sha":"f4f57b4d2f2e497a6cc515dd22b7753a2330c75f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.collections.IteratorChain;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.pushpull.GroupPullResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SinglePullJobDelegate extends PullJobDelegate implements SyncopeSinglePullExecutor {\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    @Override\n+    public List<ProvisioningReport> pull(\n+            final Provision provision,\n+            final Connector connector,\n+            final String connObjectKey,\n+            final String connObjectValue,\n+            final Realm realm,\n+            final boolean remediation,\n+            final List<String> actionKeys) throws JobExecutionException {\n+\n+        LOG.debug(\"Executing pull on {}\", provision.getResource());\n+\n+        List<PullActions> actions = new ArrayList<>();\n+        actionKeys.forEach(key -> {\n+            Implementation impl = implementationDAO.find(key);\n+            if (impl == null || impl.getType() != ImplementationType.PULL_ACTIONS) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n+            } else {\n+                try {\n+                    actions.add(ImplementationManager.build(impl));\n+                } catch (Exception e) {\n+                    LOG.warn(\"While building {}\", impl, e);\n+                }\n+            }\n+        });\n+\n+        try {\n+            Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(provision).stream().\n+                    map(virSchema -> virSchema.asLinkingMappingItem()).collect(Collectors.toSet());\n+            Iterator<MappingItem> mapItems = new IteratorChain<>(\n+                    provision.getMapping().getItems().iterator(),\n+                    linkinMappingItems.iterator());\n+            OperationOptions options = MappingUtils.buildOperationOptions(mapItems);\n+\n+            PullTask pullTask = entityFactory.newEntity(PullTask.class);\n+            pullTask.setResource(provision.getResource());\n+            pullTask.setMatchingRule(MatchingRule.UPDATE);\n+            pullTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n+            pullTask.setPullMode(PullMode.FILTERED_RECONCILIATION);\n+            pullTask.setPerformCreate(true);\n+            pullTask.setPerformUpdate(true);\n+            pullTask.setRemediation(remediation);\n+            pullTask.setDestinationRealm(realm);\n+\n+            profile = new ProvisioningProfile<>(connector, pullTask);\n+            profile.setDryRun(false);\n+            profile.setResAct(ConflictResolutionAction.FIRSTMATCH);\n+            profile.getActions().addAll(actions);\n+\n+            for (PullActions action : actions) {\n+                action.beforeAll(profile);\n+            }\n+\n+            SyncopePullResultHandler handler;\n+            GroupPullResultHandler ghandler = buildGroupHandler();\n+            switch (provision.getAnyType().getKind()) {\n+                case USER:\n+                    handler = buildUserHandler();\n+                    break;\n+\n+                case GROUP:\n+                    handler = ghandler;\n+                    break;\n+\n+                case ANY_OBJECT:\n+                default:\n+                    handler = buildAnyObjectHandler();\n+            }\n+            handler.setProfile(profile);\n+            handler.setPullExecutor(this);\n+\n+            // execute filtered pull\n+            connector.filteredReconciliation(\n+                    provision.getObjectClass(),\n+                    new AccountReconciliationFilterBuilder(connObjectKey, connObjectValue),\n+                    handler,\n+                    options);\n+\n+            try {\n+                setGroupOwners(ghandler);\n+            } catch (Exception e) {\n+                LOG.error(\"While setting group owners\", e);\n+            }\n+\n+            for (PullActions action : actions) {\n+                action.afterAll(profile);\n+            }\n+\n+            return profile.getResults();\n+        } catch (Exception e) {\n+            throw e instanceof JobExecutionException\n+                    ? (JobExecutionException) e\n+                    : new JobExecutionException(\"While pulling from connector\", e);\n+        }\n+    }\n+\n+    class AccountReconciliationFilterBuilder implements ReconFilterBuilder {\n+\n+        private final String key;\n+\n+        private final String value;\n+\n+        AccountReconciliationFilterBuilder(final String key, final String value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public Filter build() {\n+            return FilterBuilder.equalTo(AttributeBuilder.build(key, value));\n+        }\n+    }\n+}"},{"sha":"76bdc16549f55b7d396090d602fb24b354eb9af4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.ImplementationType;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePushExecutor;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SinglePushJobDelegate extends PushJobDelegate implements SyncopeSinglePushExecutor {\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    @Override\n+    public List<ProvisioningReport> push(\n+            final Provision provision,\n+            final Connector connector,\n+            final Any<?> any,\n+            final List<String> actionKeys) throws JobExecutionException {\n+\n+        LOG.debug(\"Executing push on {}\", provision.getResource());\n+\n+        List<PushActions> actions = new ArrayList<>();\n+        actionKeys.forEach(key -> {\n+            Implementation impl = implementationDAO.find(key);\n+            if (impl == null || impl.getType() != ImplementationType.PUSH_ACTIONS) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n+            } else {\n+                try {\n+                    actions.add(ImplementationManager.build(impl));\n+                } catch (Exception e) {\n+                    LOG.warn(\"While building {}\", impl, e);\n+                }\n+            }\n+        });\n+\n+        try {\n+            PushTask pushTask = entityFactory.newEntity(PushTask.class);\n+            pushTask.setResource(provision.getResource());\n+            pushTask.setMatchingRule(MatchingRule.UPDATE);\n+            pushTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n+            pushTask.setPerformCreate(true);\n+            pushTask.setPerformUpdate(true);\n+\n+            profile = new ProvisioningProfile<>(connector, pushTask);\n+            profile.getActions().addAll(actions);\n+            profile.setResAct(null);\n+\n+            for (PushActions action : actions) {\n+                action.beforeAll(profile);\n+            }\n+\n+            SyncopePushResultHandler handler;\n+            switch (provision.getAnyType().getKind()) {\n+                case USER:\n+                    handler = buildUserHandler();\n+                    break;\n+\n+                case GROUP:\n+                    handler = buildGroupHandler();\n+                    break;\n+\n+                case ANY_OBJECT:\n+                default:\n+                    handler = buildAnyObjectHandler();\n+            }\n+            handler.setProfile(profile);\n+\n+            doHandle(Arrays.asList(any), handler, pushTask.getResource());\n+\n+            for (PushActions action : actions) {\n+                action.afterAll(profile);\n+            }\n+\n+            return profile.getResults();\n+        } catch (Exception e) {\n+            throw e instanceof JobExecutionException\n+                    ? (JobExecutionException) e\n+                    : new JobExecutionException(\"While pushing to connector\", e);\n+        }\n+    }\n+}"},{"sha":"63e44cb6f9dfd040edcb9b669a0f5d829e1658cf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -242,8 +242,8 @@ public <T extends AnyPatch> T getAnyPatch(\n         updated.setKey(key);\n \n         T anyPatch = null;\n-        if (null != anyUtils.getAnyTypeKind()) {\n-            switch (anyUtils.getAnyTypeKind()) {\n+        if (null != anyUtils.anyTypeKind()) {\n+            switch (anyUtils.anyTypeKind()) {\n                 case USER:\n                     UserTO originalUser = (UserTO) original;\n                     UserTO updatedUser = (UserTO) updated;"},{"sha":"9d028e4c7081486c9a340ca460af39122bfd8aaa","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":8,"deletions":18,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -64,18 +64,6 @@\n \n     protected abstract P newPatch(String key);\n \n-    protected String getActualKey(final String key) {\n-        String actualKey = key;\n-        if (!SyncopeConstants.UUID_PATTERN.matcher(key).matches()) {\n-            actualKey = getAnyDAO().findKey(key);\n-            if (actualKey == null) {\n-                throw new NotFoundException(\"User, Group or Any Object for \" + key);\n-            }\n-        }\n-\n-        return actualKey;\n-    }\n-\n     @Override\n     public Set<AttrTO> read(final String key, final SchemaType schemaType) {\n         TO any = read(key);\n@@ -124,7 +112,7 @@ public AttrTO read(final String key, final SchemaType schemaType, final String s\n \n     @Override\n     public TO read(final String key) {\n-        return getAnyLogic().read(getActualKey(key));\n+        return getAnyLogic().read(getActualKey(getAnyDAO(), key));\n     }\n \n     @Override\n@@ -161,7 +149,7 @@ protected Date findLastChange(final String key) {\n     }\n \n     protected Response doUpdate(final P anyPatch) {\n-        anyPatch.setKey(getActualKey(anyPatch.getKey()));\n+        anyPatch.setKey(getActualKey(getAnyDAO(), anyPatch.getKey()));\n         Date etagDate = findLastChange(anyPatch.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n@@ -196,21 +184,23 @@ private void addUpdateOrReplaceAttr(\n \n     @Override\n     public Response update(final String key, final SchemaType schemaType, final AttrTO attrTO) {\n-        String actualKey = getActualKey(key);\n+        String actualKey = getActualKey(getAnyDAO(), key);\n         addUpdateOrReplaceAttr(actualKey, schemaType, attrTO, PatchOperation.ADD_REPLACE);\n         return modificationResponse(read(actualKey, schemaType, attrTO.getSchema()));\n     }\n \n     @Override\n     public void delete(final String key, final SchemaType schemaType, final String schema) {\n-        String actualKey = getActualKey(key);\n         addUpdateOrReplaceAttr(\n-                actualKey, schemaType, new AttrTO.Builder().schema(schema).build(), PatchOperation.DELETE);\n+                getActualKey(getAnyDAO(), key),\n+                schemaType,\n+                new AttrTO.Builder().schema(schema).build(),\n+                PatchOperation.DELETE);\n     }\n \n     @Override\n     public Response delete(final String key) {\n-        String actualKey = getActualKey(key);\n+        String actualKey = getActualKey(getAnyDAO(), key);\n \n         Date etagDate = findLastChange(actualKey);\n         checkETag(String.valueOf(etagDate.getTime()));"},{"sha":"caef5d85be8c502b1a113e166aca873720d54a5e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -37,12 +37,15 @@\n import org.apache.cxf.jaxrs.ext.search.SearchContext;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -64,6 +67,18 @@ abstract class AbstractServiceImpl implements JAXRSService {\n     @Context\n     protected SearchContext searchContext;\n \n+    protected String getActualKey(final AnyDAO<?> dao, final String pretendingKey) {\n+        String actualKey = pretendingKey;\n+        if (!SyncopeConstants.UUID_PATTERN.matcher(pretendingKey).matches()) {\n+            actualKey = dao.findKey(pretendingKey);\n+            if (actualKey == null) {\n+                throw new NotFoundException(\"User, Group or Any Object for \" + pretendingKey);\n+            }\n+        }\n+\n+        return actualKey;\n+    }\n+\n     protected boolean isNullPriorityAsync() {\n         return BooleanUtils.toBoolean(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.NULL_PRIORITY_ASYNC));\n     }"},{"sha":"3a7d40b6480f37cff9fc3d30e4767e9d51d63431","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -71,7 +71,7 @@ public Response create(final AnyObjectTO anyObjectTO) {\n \n     @Override\n     public Response update(final AnyObjectTO anyObjectTO) {\n-        anyObjectTO.setKey(getActualKey(anyObjectTO.getKey()));\n+        anyObjectTO.setKey(getActualKey(getAnyDAO(), anyObjectTO.getKey()));\n         AnyObjectTO before = logic.read(anyObjectTO.getKey());\n \n         checkETag(before.getETagValue());"},{"sha":"bc621e9d14985fd57f91ded4cd0784346433d0ce","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -68,7 +68,7 @@ public Response create(final GroupTO groupTO) {\n \n     @Override\n     public Response update(final GroupTO groupTO) {\n-        groupTO.setKey(getActualKey(groupTO.getKey()));\n+        groupTO.setKey(getActualKey(getAnyDAO(), groupTO.getKey()));\n         GroupTO before = logic.read(groupTO.getKey());\n \n         checkETag(before.getETagValue());"},{"sha":"80d89d5833a03d1944de06d808c966efbda201db","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReconciliationServiceImpl.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.ReconciliationStatus;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.rest.api.service.ReconciliationService;\n+import org.apache.syncope.core.logic.ReconciliationLogic;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReconciliationServiceImpl extends AbstractServiceImpl implements ReconciliationService {\n+\n+    @Autowired\n+    private ReconciliationLogic logic;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    @Override\n+    public ReconciliationStatus status(final AnyTypeKind anyTypeKind, final String anyKey, final String resourceKey) {\n+        return logic.status(\n+                anyTypeKind,\n+                getActualKey(anyUtilsFactory.getInstance(anyTypeKind).dao(), anyKey),\n+                resourceKey);\n+    }\n+\n+    @Override\n+    public void reconcile(final ReconciliationRequest request) {\n+        request.setAnyKey(\n+                getActualKey(anyUtilsFactory.getInstance(request.getAnyTypeKind()).dao(), request.getAnyKey()));\n+        logic.reconcile(request);\n+    }\n+}"},{"sha":"99dc24db563de41cabaee2c9131618a70e22e72f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -67,7 +67,7 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n \n     @Override\n     public Response update(final UserTO userTO) {\n-        userTO.setKey(getActualKey(userTO.getKey()));\n+        userTO.setKey(getActualKey(getAnyDAO(), userTO.getKey()));\n         UserTO before = logic.read(userTO.getKey());\n \n         checkETag(before.getETagValue());"},{"sha":"759f5e4a55c1fe0a3f614d38362e29dcf91bb4d3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -85,6 +85,7 @@\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n+import org.apache.syncope.common.rest.api.service.ReconciliationService;\n import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n import org.apache.syncope.common.rest.api.service.RemediationService;\n import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n@@ -228,6 +229,8 @@ public abstract class AbstractITCase {\n \n     protected static TaskService taskService;\n \n+    protected static ReconciliationService reconciliationService;\n+\n     protected static WorkflowService workflowService;\n \n     protected static MailTemplateService mailTemplateService;\n@@ -307,6 +310,7 @@ public static void restSetup() {\n         reportTemplateService = adminClient.getService(ReportTemplateService.class);\n         reportService = adminClient.getService(ReportService.class);\n         taskService = adminClient.getService(TaskService.class);\n+        reconciliationService = adminClient.getService(ReconciliationService.class);\n         policyService = adminClient.getService(PolicyService.class);\n         workflowService = adminClient.getService(WorkflowService.class);\n         mailTemplateService = adminClient.getService(MailTemplateService.class);"},{"sha":"172e69c818c305a9dfd6d5763cb7d4bff8c56107","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReconciliationITCase.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e5860a76a5584edf780df180eb9229ddf44de684/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e5860a76a5584edf780df180eb9229ddf44de684/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java?ref=e5860a76a5584edf780df180eb9229ddf44de684","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Date;\n+import javax.sql.DataSource;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.ReconciliationStatus;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ReconciliationAction;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(locations = { \"classpath:testJDBCEnv.xml\" })\n+public class ReconciliationITCase extends AbstractITCase {\n+\n+    @Autowired\n+    private DataSource testDataSource;\n+\n+    @Test\n+    public void push() {\n+        // 1. create printer, with no resources\n+        AnyObjectTO printer = AnyObjectITCase.getSampleTO(\"reconciliation\");\n+        printer.getResources().clear();\n+        printer = createAnyObject(printer).getEntity();\n+        assertNotNull(printer.getKey());\n+\n+        // 2. verify no printer with that name is on the external resource's db\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        assertEquals(0, jdbcTemplate.queryForList(\n+                \"SELECT id FROM testPRINTER WHERE printername=?\", printer.getName()).size());\n+\n+        // 3. verify reconciliation status\n+        ReconciliationStatus status =\n+                reconciliationService.status(AnyTypeKind.ANY_OBJECT, printer.getName(), \"resource-db-scripted\");\n+        assertNotNull(status);\n+        assertNotNull(status.getOnSyncope());\n+        assertNull(status.getOnResource());\n+\n+        // 4. push\n+        ReconciliationRequest request = new ReconciliationRequest();\n+        request.setAction(ReconciliationAction.PUSH);\n+        request.setAnyKey(printer.getKey());\n+        request.setAnyTypeKind(AnyTypeKind.ANY_OBJECT);\n+        request.setResourceKey(\"resource-db-scripted\");\n+        reconciliationService.reconcile(request);\n+\n+        // 5. verify that printer is now propagated\n+        assertEquals(1, jdbcTemplate.queryForList(\n+                \"SELECT id FROM testPRINTER WHERE printername=?\", printer.getName()).size());\n+\n+        // 6. verify resource was not assigned\n+        printer = anyObjectService.read(printer.getKey());\n+        assertTrue(printer.getResources().isEmpty());\n+\n+        // 7. verify reconciliation status\n+        status = reconciliationService.status(AnyTypeKind.ANY_OBJECT, printer.getName(), \"resource-db-scripted\");\n+        assertNotNull(status);\n+        assertNotNull(status.getOnSyncope());\n+        assertNotNull(status.getOnResource());\n+\n+        // __ENABLE__ management depends on the actual connector...\n+        AttrTO enable = status.getOnSyncope().getAttr(OperationalAttributes.ENABLE_NAME).orElse(null);\n+        if (enable != null) {\n+            status.getOnSyncope().getAttrs().remove(enable);\n+        }\n+        assertEquals(status.getOnSyncope(), status.getOnResource());\n+    }\n+\n+    @Test\n+    public void pull() {\n+        // 1. create printer, with no resources\n+        AnyObjectTO printer = AnyObjectITCase.getSampleTO(\"reconciliation\");\n+        printer.getResources().clear();\n+        printer = createAnyObject(printer).getEntity();\n+        assertNotNull(printer.getKey());\n+        assertNotEquals(\"Nowhere\", printer.getPlainAttr(\"location\").get().getValues().get(0));\n+\n+        // 2. create table into the external resource's db, with same name\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        jdbcTemplate.update(\n+                \"INSERT INTO TESTPRINTER (id, printername, location, deleted, lastmodification) VALUES (?,?,?,?,?)\",\n+                printer.getKey(), printer.getName(), \"Nowhere\", false, new Date());\n+\n+        // 3. verify reconciliation status\n+        ReconciliationStatus status =\n+                reconciliationService.status(AnyTypeKind.ANY_OBJECT, printer.getName(), \"resource-db-scripted\");\n+        assertNotNull(status);\n+        assertNotNull(status.getOnSyncope());\n+        assertNotNull(status.getOnResource());\n+        assertNotEquals(status.getOnSyncope().getAttr(\"LOCATION\"), status.getOnResource().getAttr(\"LOCATION\"));\n+\n+        // 4. pull\n+        ReconciliationRequest request = new ReconciliationRequest();\n+        request.setAction(ReconciliationAction.PULL);\n+        request.setAnyKey(printer.getKey());\n+        request.setAnyTypeKind(AnyTypeKind.ANY_OBJECT);\n+        request.setResourceKey(\"resource-db-scripted\");\n+        reconciliationService.reconcile(request);\n+\n+        // 5. verify reconciliation result (and resource is still not assigned)\n+        printer = anyObjectService.read(printer.getKey());\n+        assertEquals(\"Nowhere\", printer.getPlainAttr(\"location\").get().getValues().get(0));\n+        assertTrue(printer.getResources().isEmpty());\n+    }\n+}"}]}