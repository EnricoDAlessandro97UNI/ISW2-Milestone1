{"sha":"07451e4cc978a56b0e958fb59608b7e431e6f7e7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA3NDUxZTRjYzk3OGE1NmIwZTk1OGZiNTk2MDhiN2U0MzFlNmY3ZTc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-23T12:22:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-23T12:22:27Z"},"message":"[SYNCOPE-666] Adjusting TypeExtension for JAXB","tree":{"sha":"c583d8b3013166ff69640e87cec44e34fc3da6a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c583d8b3013166ff69640e87cec44e34fc3da6a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/07451e4cc978a56b0e958fb59608b7e431e6f7e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/07451e4cc978a56b0e958fb59608b7e431e6f7e7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/07451e4cc978a56b0e958fb59608b7e431e6f7e7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/07451e4cc978a56b0e958fb59608b7e431e6f7e7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c3e4c38dc0eede729ca7504e32e0291833f394ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c3e4c38dc0eede729ca7504e32e0291833f394ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c3e4c38dc0eede729ca7504e32e0291833f394ff"}],"stats":{"total":199,"additions":138,"deletions":61},"files":[{"sha":"209b33ea535957b947ef6ddbb16e891394056918","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java","status":"modified","additions":23,"deletions":10,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/07451e4cc978a56b0e958fb59608b7e431e6f7e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/07451e4cc978a56b0e958fb59608b7e431e6f7e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java?ref=07451e4cc978a56b0e958fb59608b7e431e6f7e7","patch":"@@ -20,13 +20,15 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n \n @XmlRootElement(name = \"groupPatch\")\n @XmlType\n@@ -44,9 +46,7 @@ public class GroupPatch extends AnyPatch {\n \n     private StringReplacePatchItem udynMembershipCond;\n \n-    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n-    @JsonIgnore\n-    private final Map<String, Set<String>> typeExtensions = new HashMap<>();\n+    private final List<TypeExtensionTO> typeExtensions = new ArrayList<>();\n \n     public StringReplacePatchItem getName() {\n         return name;\n@@ -88,8 +88,21 @@ public void setUDynMembershipCond(final StringReplacePatchItem udynMembershipCon\n         this.udynMembershipCond = udynMembershipCond;\n     }\n \n-    @JsonProperty\n-    public Map<String, Set<String>> getTypeExtensions() {\n+    @JsonIgnore\n+    public TypeExtensionTO getTypeExtension(final String anyType) {\n+        return CollectionUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n+\n+            @Override\n+            public boolean evaluate(final TypeExtensionTO typeExtension) {\n+                return anyType != null && anyType.equals(typeExtension.getAnyType());\n+            }\n+        });\n+    }\n+\n+    @XmlElementWrapper(name = \"typeExtensions\")\n+    @XmlElement(name = \"typeExtension\")\n+    @JsonProperty(\"typeExtensions\")\n+    public List<TypeExtensionTO> getTypeExtensions() {\n         return typeExtensions;\n     }\n "},{"sha":"c304b9e6187d9d53769ac821d4eef9e0bcda2c8a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/07451e4cc978a56b0e958fb59608b7e431e6f7e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/07451e4cc978a56b0e958fb59608b7e431e6f7e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=07451e4cc978a56b0e958fb59608b7e431e6f7e7","patch":"@@ -20,13 +20,14 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"group\")\n@@ -45,9 +46,7 @@ public class GroupTO extends AnyTO {\n \n     private String udynMembershipCond;\n \n-    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n-    @JsonIgnore\n-    private final Map<String, Set<String>> typeExtensions = new HashMap<>();\n+    private final List<TypeExtensionTO> typeExtensions = new ArrayList<>();\n \n     @Override\n     public String getType() {\n@@ -99,21 +98,22 @@ public void setUDynMembershipCond(final String uDynMembershipCond) {\n         this.udynMembershipCond = uDynMembershipCond;\n     }\n \n-    @JsonProperty\n-    public Map<String, Set<String>> getTypeExtensions() {\n-        return typeExtensions;\n-    }\n+    @JsonIgnore\n+    public TypeExtensionTO getTypeExtension(final String anyType) {\n+        return CollectionUtils.find(typeExtensions, new Predicate<TypeExtensionTO>() {\n \n-    public static long fromDisplayName(final String displayName) {\n-        long result = 0;\n-        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\n-            try {\n-                result = Long.valueOf(displayName.split(\" \")[0]);\n-            } catch (NumberFormatException e) {\n-                // ignore\n+            @Override\n+            public boolean evaluate(final TypeExtensionTO typeExtension) {\n+                return anyType != null && anyType.equals(typeExtension.getAnyType());\n             }\n-        }\n+        });\n+    }\n \n-        return result;\n+    @XmlElementWrapper(name = \"typeExtensions\")\n+    @XmlElement(name = \"typeExtension\")\n+    @JsonProperty(\"typeExtensions\")\n+    public List<TypeExtensionTO> getTypeExtensions() {\n+        return typeExtensions;\n     }\n+\n }"},{"sha":"f8dea412fb9f9e120cb9016e53b1604603b2bada","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/TypeExtensionTO.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/07451e4cc978a56b0e958fb59608b7e431e6f7e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTypeExtensionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/07451e4cc978a56b0e958fb59608b7e431e6f7e7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTypeExtensionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTypeExtensionTO.java?ref=07451e4cc978a56b0e958fb59608b7e431e6f7e7","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"typeExtension\")\n+@XmlType\n+public class TypeExtensionTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -5422809645030924811L;\n+\n+    private String anyType;\n+\n+    private final List<String> auxClasses = new ArrayList<>();\n+\n+    public String getAnyType() {\n+        return anyType;\n+    }\n+\n+    public void setAnyType(final String anyType) {\n+        this.anyType = anyType;\n+    }\n+\n+    @XmlElementWrapper(name = \"auxClasses\")\n+    @XmlElement(name = \"class\")\n+    @JsonProperty(\"auxClasses\")\n+    public List<String> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n+}"},{"sha":"9562ff70e0215474fc79057772ef735464c428fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/07451e4cc978a56b0e958fb59608b7e431e6f7e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/07451e4cc978a56b0e958fb59608b7e431e6f7e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=07451e4cc978a56b0e958fb59608b7e431e6f7e7","patch":"@@ -19,18 +19,17 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -128,17 +127,17 @@ public Group create(final Group group, final GroupTO groupTO) {\n         }\n \n         // type extensions\n-        for (Map.Entry<String, Set<String>> entry : groupTO.getTypeExtensions().entrySet()) {\n-            AnyType anyType = anyTypeDAO.find(entry.getKey());\n+        for (TypeExtensionTO typeExtTO : groupTO.getTypeExtensions()) {\n+            AnyType anyType = anyTypeDAO.find(typeExtTO.getAnyType());\n             if (anyType == null) {\n-                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n+                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), typeExtTO.getAnyType());\n             } else {\n                 TypeExtension typeExt = entityFactory.newEntity(TypeExtension.class);\n                 typeExt.setAnyType(anyType);\n                 typeExt.setGroup(group);\n                 group.add(typeExt);\n \n-                for (String name : entry.getValue()) {\n+                for (String name : typeExtTO.getAuxClasses()) {\n                     AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n                     if (anyTypeClass == null) {\n                         LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), name);\n@@ -224,10 +223,10 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         }\n \n         // type extensions\n-        for (Map.Entry<String, Set<String>> entry : groupPatch.getTypeExtensions().entrySet()) {\n-            AnyType anyType = anyTypeDAO.find(entry.getKey());\n+        for (TypeExtensionTO typeExtTO : groupPatch.getTypeExtensions()) {\n+            AnyType anyType = anyTypeDAO.find(typeExtTO.getAnyType());\n             if (anyType == null) {\n-                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n+                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), typeExtTO.getAnyType());\n             } else {\n                 TypeExtension typeExt = group.getTypeExtension(anyType);\n                 if (typeExt == null) {\n@@ -238,7 +237,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n                 }\n \n                 // add all classes contained in the TO\n-                for (String name : entry.getValue()) {\n+                for (String name : typeExtTO.getAuxClasses()) {\n                     AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n                     if (anyTypeClass == null) {\n                         LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), name);\n@@ -249,7 +248,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n                 // remove all classes not contained in the TO\n                 for (Iterator<? extends AnyTypeClass> itor = typeExt.getAuxClasses().iterator(); itor.hasNext();) {\n                     AnyTypeClass anyTypeClass = itor.next();\n-                    if (!entry.getValue().contains(anyTypeClass.getKey())) {\n+                    if (!typeExtTO.getAuxClasses().contains(anyTypeClass.getKey())) {\n                         itor.remove();\n                     }\n                 }\n@@ -264,7 +263,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         // remove all type extensions not contained in the TO\n         for (Iterator<? extends TypeExtension> itor = group.getTypeExtensions().iterator(); itor.hasNext();) {\n             TypeExtension typeExt = itor.next();\n-            if (!groupPatch.getTypeExtensions().containsKey(typeExt.getAnyType().getKey())) {\n+            if (groupPatch.getTypeExtension(typeExt.getAnyType().getKey()) == null) {\n                 itor.remove();\n             }\n         }\n@@ -308,14 +307,17 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n         }\n \n         for (TypeExtension typeExt : group.getTypeExtensions()) {\n-            groupTO.getTypeExtensions().put(typeExt.getAnyType().getKey(),\n-                    CollectionUtils.collect(typeExt.getAuxClasses(), new Transformer<AnyTypeClass, String>() {\n-\n-                        @Override\n-                        public String transform(final AnyTypeClass clazz) {\n-                            return clazz.getKey();\n-                        }\n-                    }, new HashSet<String>()));\n+            TypeExtensionTO typeExtTO = new TypeExtensionTO();\n+            typeExtTO.setAnyType(typeExt.getAnyType().getKey());\n+            typeExtTO.getAuxClasses().addAll(CollectionUtils.collect(typeExt.getAuxClasses(),\n+                    new Transformer<AnyTypeClass, String>() {\n+\n+                @Override\n+                public String transform(final AnyTypeClass clazz) {\n+                    return clazz.getKey();\n+                }\n+            }));\n+            groupTO.getTypeExtensions().add(typeExtTO);\n         }\n \n         return groupTO;"},{"sha":"052262c8b8854e257d65aa9d968e16b7544bcc48","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/07451e4cc978a56b0e958fb59608b7e431e6f7e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/07451e4cc978a56b0e958fb59608b7e431e6f7e7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=07451e4cc978a56b0e958fb59608b7e431e6f7e7","patch":"@@ -28,9 +28,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.AccessControlException;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n@@ -65,6 +62,7 @@\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -692,25 +690,34 @@ public void capabilitiesOverride() {\n \n     @Test\n     public void typeExtensions() {\n+        TypeExtensionTO typeExtension = new TypeExtensionTO();\n+        typeExtension.setAnyType(AnyTypeKind.USER.name());\n+        typeExtension.getAuxClasses().add(\"csv\");\n+\n         GroupTO groupTO = getBasicSampleTO(\"typeExtensions\");\n-        groupTO.getTypeExtensions().put(AnyTypeKind.USER.name(), Collections.singleton(\"csv\"));\n+        groupTO.getTypeExtensions().add(typeExtension);\n \n         groupTO = createGroup(groupTO).getAny();\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getTypeExtensions().size());\n-        assertEquals(1, groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).size());\n-        assertEquals(Collections.singleton(\"csv\"), groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()));\n+        assertEquals(1, groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().size());\n+        assertTrue(groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().contains(\"csv\"));\n+\n+        typeExtension = new TypeExtensionTO();\n+        typeExtension.setAnyType(AnyTypeKind.USER.name());\n+        typeExtension.getAuxClasses().add(\"csv\");\n+        typeExtension.getAuxClasses().add(\"other\");\n \n         GroupPatch groupPatch = new GroupPatch();\n         groupPatch.setKey(groupTO.getKey());\n-        groupPatch.getTypeExtensions().put(AnyTypeKind.USER.name(), new HashSet<>(Arrays.asList(\"csv\", \"other\")));\n+        groupPatch.getTypeExtensions().add(typeExtension);\n \n         groupTO = updateGroup(groupPatch).getAny();\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getTypeExtensions().size());\n-        assertEquals(2, groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).size());\n-        assertTrue(groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).contains(\"csv\"));\n-        assertTrue(groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).contains(\"other\"));\n+        assertEquals(2, groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().size());\n+        assertTrue(groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().contains(\"csv\"));\n+        assertTrue(groupTO.getTypeExtension(AnyTypeKind.USER.name()).getAuxClasses().contains(\"other\"));\n     }\n \n     @Test"}]}