{"sha":"4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQzMDVhMWEwZTQxZDI5YTAyNTFlMDllYjY4ODBjYzVjNGExYTRlZmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-04-04T13:51:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-04-04T13:51:56Z"},"message":"[SYNCOPE-54] Moved lastExecStatus from TaskDataBinder's on-the-fly set to TaskTO to actual optional field of Task: in this way NotificationJob can see which NotificationTasks have been executed, even if the correspondant TaskExec was not stored\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1309387 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0b02ac78b458d5814ab1550cbf836a8bc987ad2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b0b02ac78b458d5814ab1550cbf836a8bc987ad2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b3b389cdd61adb3a142d9696fd0334def032138b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b3b389cdd61adb3a142d9696fd0334def032138b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b3b389cdd61adb3a142d9696fd0334def032138b"}],"stats":{"total":75,"additions":48,"deletions":27},"files":[{"sha":"f88683e2629c786a043e4ffb5a7327e70eb8e156","filename":"core/src/main/java/org/syncope/core/notification/NotificationManager.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -19,7 +19,6 @@\n package org.syncope.core.notification;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n@@ -247,7 +246,7 @@ private String getRecipientEmail(\n     }\n \n     /**\n-     * Execute TaskExec persist within a transaction.\n+     * Store execution of a NotificationTask.\n      *\n      * @param execution task execution.\n      * @return merged task execution.\n@@ -257,4 +256,15 @@ public TaskExec storeExecution(final TaskExec execution) {\n         task.addExec(execution);\n         return taskExecDAO.save(execution);\n     }\n+\n+    /**\n+     * Update latest execution status of a NotificationTask.\n+     *\n+     * @param execution task execution\n+     */\n+    public void updateLatestExecStatus(final TaskExec execution) {\n+        NotificationTask task = taskDAO.find(execution.getTask().getId());\n+        task.setLatestExecStatus(execution.getStatus());\n+        taskDAO.save(task);\n+    }\n }"},{"sha":"96ce9efe45ffa8371f2cc8b296d977e583bbce7a","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.DiscriminatorColumn;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n@@ -40,6 +41,9 @@ public class Task extends AbstractBaseBean {\n     @Id\n     private Long id;\n \n+    @Column(nullable = true)\n+    private String latestExecStatus;\n+\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n     private List<TaskExec> executions;\n \n@@ -53,6 +57,14 @@ public Long getId() {\n         return id;\n     }\n \n+    public String getLatestExecStatus() {\n+        return latestExecStatus;\n+    }\n+\n+    public void setLatestExecStatus(String latestExecStatus) {\n+        this.latestExecStatus = latestExecStatus;\n+    }\n+\n     public boolean addExec(TaskExec exec) {\n         return exec != null && !executions.contains(exec) && executions.add(exec);\n     }"},{"sha":"1cf198fbca6ce812907f15276c860f65028b1795","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -29,7 +29,7 @@ public interface TaskDAO extends DAO {\n \n     <T extends Task> T find(Long id);\n \n-    <T extends Task> List<T> findWithoutExecs(Class<T> reference);\n+    <T extends Task> List<T> findToExec(Class<T> reference);\n \n     <T extends Task> List<T> findAll(ExternalResource resource, Class<T> reference);\n "},{"sha":"c03f71f62ef1fa5c1e031b96227b5775272ffaf2","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -41,20 +41,19 @@ public <T extends Task> T find(final Long id) {\n     }\n \n     private <T extends Task> StringBuilder buildfindAllQuery(final Class<T> reference) {\n-\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(reference.getSimpleName()).append(\" e \");\n         if (SchedTask.class.equals(reference)) {\n-            queryString.append(\"WHERE e.id NOT IN (SELECT e.id FROM \").append(SyncTask.class.getSimpleName()).append(\n-                    \" e) \");\n+            queryString.append(\"WHERE e.id NOT IN (SELECT e.id FROM \").\n+                    append(SyncTask.class.getSimpleName()).append(\" e) \");\n         }\n \n         return queryString;\n     }\n \n     @Override\n-    public <T extends Task> List<T> findWithoutExecs(final Class<T> reference) {\n+    public <T extends Task> List<T> findToExec(final Class<T> reference) {\n         StringBuilder queryString = buildfindAllQuery(reference);\n-        queryString.append(\"WHERE e.executions IS EMPTY\");\n+        queryString.append(\"WHERE e.latestExecStatus IS NULL\");\n         final Query query = entityManager.createQuery(queryString.toString());\n         return query.getResultList();\n     }\n@@ -127,7 +126,7 @@ public <T extends Task> int count(final Class<T> reference) {\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     @Override\n     public <T extends Task> T save(final T task) {\n         return entityManager.merge(task);"},{"sha":"377a24ce06a9488b3b79b74f3a7c3ae2cf12fce5","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -42,10 +42,10 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.init.JobInstanceLoader;\n-import org.syncope.core.persistence.beans.SchedTask;\n-import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -62,9 +62,9 @@ public class TaskDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = { \"latestExecStatus\", \"executions\", \"resource\", \"user\" };\n+    private static final String[] IGNORE_TASK_PROPERTIES = {\"executions\", \"resource\", \"user\"};\n \n-    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"id\", \"task\" };\n+    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n \n     @Autowired\n     private TaskExecDAO taskExecDAO;\n@@ -203,11 +203,6 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n         TaskTO taskTO = taskUtil.newTaskTO();\n         BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n \n-        TaskExec latestExec = taskExecDAO.findLatestStarted(task);\n-        taskTO.setLatestExecStatus(latestExec == null\n-                ? \"\"\n-                : latestExec.getStatus());\n-\n         for (TaskExec execution : task.getExecs()) {\n             taskTO.addExecution(getTaskExecTO(execution));\n         }"},{"sha":"38576590039f2fd7ba477e74b87559d5f511515a","filename":"core/src/main/java/org/syncope/core/scheduling/AbstractTaskJob.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractTaskJob.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -33,9 +33,8 @@\n import org.syncope.core.persistence.dao.TaskExecDAO;\n \n /**\n- * Base job implementation that delegates to concrete implementation the actual\n- * job execution and provides some background settings (like as the\n- * corresponding Task, for example).\n+ * Base job implementation that delegates to concrete implementation the actual job execution and provides some\n+ * background settings (like as the corresponding Task, for example).\n  */\n public abstract class AbstractTaskJob implements StatefulJob {\n \n@@ -117,20 +116,23 @@ public final void execute(final JobExecutionContext context) throws JobExecution\n         if (hasToBeRegistered(execution)) {\n             taskExecDAO.save(execution);\n         }\n+\n+        task.setLatestExecStatus(execution.getStatus());\n+        task = taskDAO.save(task);\n     }\n \n     /**\n      * The actual execution, delegated to child classes.\n-     * \n+     *\n      * @param dryRun whether to actually touch the data\n      * @return the task execution status to be set\n      * @throws JobExecutionException if anything goes wrong\n      */\n     protected abstract String doExecute(boolean dryRun) throws JobExecutionException;\n \n     /**\n-     * Template method to determine whether this job's task execution has\n-     * to be persisted or not.\n+     * Template method to determine whether this job's task execution has to be persisted or not.\n+     *\n      * @param execution task execution\n      * @return wether to persist or not\n      */"},{"sha":"d3b42471735835810b798d7ba6f7e9c6761c93e7","filename":"core/src/main/java/org/syncope/core/scheduling/NotificationJob.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -53,6 +53,7 @@ enum Status {\n \n         SENT,\n         NOT_SENT\n+\n     }\n \n     /**\n@@ -203,6 +204,8 @@ public TaskExec executeSingle(final NotificationTask task) {\n             execution = notificationManager.storeExecution(execution);\n         }\n \n+        notificationManager.updateLatestExecStatus(execution);\n+\n         return execution;\n     }\n \n@@ -212,7 +215,7 @@ public void execute(final JobExecutionContext context)\n \n         LOG.debug(\"Waking up...\");\n \n-        for (NotificationTask task : taskDAO.findWithoutExecs(NotificationTask.class)) {\n+        for (NotificationTask task : taskDAO.findToExec(NotificationTask.class)) {\n             executeSingle(task);\n         }\n "},{"sha":"6aff24d26a1215089308f8b2680cd3c8edab07a8","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -54,7 +54,7 @@ public class TaskTest extends AbstractTest {\n \n     @Test\n     public void findWithoutExecs() {\n-        List<PropagationTask> tasks = taskDAO.findWithoutExecs(PropagationTask.class);\n+        List<PropagationTask> tasks = taskDAO.findToExec(PropagationTask.class);\n         assertNotNull(tasks);\n         assertEquals(3, tasks.size());\n     }"},{"sha":"0b292bd46a189c527007c6121340702edb3a6a98","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=4305a1a0e41d29a0251e09eb6880cc5c4a1a4efb","patch":"@@ -473,7 +473,7 @@ under the License.\n                  mandatoryCondition=\"false\" resource_name=\"resource-ldap\"/>\n                    \n   <Task DTYPE=\"PropagationTask\" id=\"1\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n-        resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n+        resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\" latestExecStatus=\"SUCCESS\"\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n   <TaskExec id=\"1\" task_id=\"1\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"2\" propagationMode=\"ONE_PHASE\" propagationOperation=\"CREATE\""}]}