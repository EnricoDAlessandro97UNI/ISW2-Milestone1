{"sha":"14c4c33db6a15574b5228afb6a528799bcb0b4ac","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE0YzRjMzNkYjZhMTU1NzRiNTIyOGFmYjZhNTI4Nzk5YmNiMGI0YWM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-18T08:45:02Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-10-18T08:45:02Z"},"message":"the schema retrieved from the targetresource won't be used to verify mandatory conditions. accountId and password will be provided to the target resource using the names __NAME__ and __PASSWORD__ rispectively.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246595 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac84da522c691d6aecaf67ba7c43dcb004c978cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ac84da522c691d6aecaf67ba7c43dcb004c978cd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/14c4c33db6a15574b5228afb6a528799bcb0b4ac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14c4c33db6a15574b5228afb6a528799bcb0b4ac","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/14c4c33db6a15574b5228afb6a528799bcb0b4ac","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/14c4c33db6a15574b5228afb6a528799bcb0b4ac/comments","author":null,"committer":null,"parents":[{"sha":"d2b97b3c80838d416350e8e7debeb9f70a00315a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2b97b3c80838d416350e8e7debeb9f70a00315a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d2b97b3c80838d416350e8e7debeb9f70a00315a"}],"stats":{"total":139,"additions":69,"deletions":70},"files":[{"sha":"e3f9d98be58e5fe6793b39da777c953bc40cebed","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConnector.java","status":"modified","additions":48,"deletions":67,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14c4c33db6a15574b5228afb6a528799bcb0b4ac/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14c4c33db6a15574b5228afb6a528799bcb0b4ac/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java?ref=14c4c33db6a15574b5228afb6a528799bcb0b4ac","patch":"@@ -74,19 +74,23 @@ public class WebServiceConnector implements\n      */\n     private static final Logger LOG =\n             LoggerFactory.getLogger(WebServiceConnector.class);\n+\n     /**\n      * Place holder for the Connection created in the init method.\n      */\n     private WebServiceConnection connection;\n+\n     /**\n      * Place holder for the {@link Configuration} passed into the init() method\n      * {@link WebServiceConnector#init}.\n      */\n     private WebServiceConfiguration config;\n+\n     /**\n      * Schema.\n      */\n     private Schema schema = null;\n+\n     /**\n      * Web Service Attributes.\n      */\n@@ -240,52 +244,41 @@ public Uid create(\n             LOG.debug(\"Account to be created: \" + accountName);\n         }\n \n-        // check schema\n-        if (schema == null || wsAttributes == null) {\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Reload schema\");\n-            }\n-\n-            schema();\n-        }\n-\n-        // to be used in order to check for mandatory attributes\n-        Set<String> mandatoryAttributes = new HashSet<String>();\n-\n-        for (WSAttribute wsAttr : wsAttributes.values()) {\n-            if (!wsAttr.isNullable()) {\n-                mandatoryAttributes.add(getAttributeName(wsAttr));\n-            }\n-        }\n-\n         // to be user in order to pass information to the web service\n-        List<WSAttributeValue> attributes =\n+        final List<WSAttributeValue> attributes =\n                 new ArrayList<WSAttributeValue>();\n \n-        WSAttributeValue wsAttributeValue = null;\n-\n-        String attribute = null;\n+        WSAttributeValue wsAttributeValue;\n+        WSAttribute wsAttribute;\n \n         // retrieve attributes\n         for (Attribute attr : attrs) {\n-            attribute = attr.getName();\n+\n+            wsAttribute = new WSAttribute(attr.getName());\n+\n+            if (attr.is(Name.NAME)) {\n+                wsAttribute.setKey(true);\n+                wsAttribute.setNullable(false);\n+            }\n+\n+            if (attr.is(OperationalAttributeInfos.PASSWORD.getName())) {\n+                wsAttribute.setName(\n+                        OperationalAttributeInfos.PASSWORD.getName());\n+                wsAttribute.setPassword(true);\n+            }\n \n             if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Attribute name: \" + attribute);\n+                LOG.debug(\n+                        \"\\nAttribute: \"\n+                        + \"\\n\\tName: \" + wsAttribute.getName()\n+                        + \"\\n\\tIsKey: \" + wsAttribute.isKey()\n+                        + \"\\n\\tIsPassword: \" + wsAttribute.isPassword());\n             }\n \n-            wsAttributeValue =\n-                    new WSAttributeValue(wsAttributes.get(attribute));\n+            wsAttributeValue = new WSAttributeValue(wsAttribute);\n \n             Object value = AttributeUtil.getSingleValue(attr);\n \n-            if (value == null && !wsAttributeValue.isNullable()) {\n-                // TODO: provisioningexception\n-                throw new IllegalArgumentException(\n-                        \"Missing required parameter '\" + attr.getName() + \"'\");\n-            }\n-\n             if (value instanceof GuardedString\n                     || value instanceof GuardedByteArray) {\n \n@@ -295,16 +288,6 @@ public Uid create(\n             }\n \n             attributes.add(wsAttributeValue);\n-\n-            if (!wsAttributeValue.isNullable()) {\n-                mandatoryAttributes.remove(attribute);\n-            }\n-        }\n-\n-        // check for mandatory attributes\n-        if (!mandatoryAttributes.isEmpty()) {\n-            throw new IllegalArgumentException(\n-                    \"Missing required parameters: \" + mandatoryAttributes);\n         }\n \n         if (LOG.isDebugEnabled()) {\n@@ -574,43 +557,41 @@ public Uid update(ObjectClass objclass,\n             throw new IllegalStateException(\"Web Service client not found\");\n         }\n \n-        // check schema\n-        if (schema == null || wsAttributes == null) {\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Reload schema\");\n-            }\n-\n-            schema();\n-        }\n-\n         // to be user in order to pass information to the web service\n-        List<WSAttributeValue> attributes =\n+        final List<WSAttributeValue> attributes =\n                 new ArrayList<WSAttributeValue>();\n \n-        WSAttributeValue wsAttributeValue = null;\n-\n-        String attribute = null;\n+        WSAttributeValue wsAttributeValue;\n+        WSAttribute wsAttribute;\n \n         // retrieve attributes\n         for (Attribute attr : replaceAttributes) {\n-            attribute = attr.getName();\n+\n+            wsAttribute = new WSAttribute(attr.getName());\n+\n+            if (attr.is(Name.NAME)) {\n+                wsAttribute.setKey(true);\n+                wsAttribute.setNullable(false);\n+            }\n+\n+            if (attr.is(OperationalAttributeInfos.PASSWORD.getName())) {\n+                wsAttribute.setName(\n+                        OperationalAttributeInfos.PASSWORD.getName());\n+                wsAttribute.setPassword(true);\n+            }\n \n             if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Attribute name: \" + attribute);\n+                LOG.debug(\n+                        \"\\nAttribute: \"\n+                        + \"\\n\\tName: \" + wsAttribute.getName()\n+                        + \"\\n\\tIsKey: \" + wsAttribute.isKey()\n+                        + \"\\n\\tIsPassword: \" + wsAttribute.isPassword());\n             }\n \n-            wsAttributeValue =\n-                    new WSAttributeValue(wsAttributes.get(attribute));\n+            wsAttributeValue = new WSAttributeValue(wsAttribute);\n \n             Object value = AttributeUtil.getSingleValue(attr);\n \n-            if (value == null && !wsAttributeValue.isNullable()) {\n-                // TODO: provisioningexception\n-                throw new IllegalArgumentException(\n-                        \"Missing required parameter\");\n-            }\n-\n             if (value instanceof GuardedString\n                     || value instanceof GuardedByteArray) {\n "},{"sha":"55bd5c83770d5987497346680a72e7765beb96d4","filename":"identityconnectors/bundles/staticws/staticwebservice/src/test/java/org/syncope/identityconnectors/bundles/StaticWSTestITCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14c4c33db6a15574b5228afb6a528799bcb0b4ac/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14c4c33db6a15574b5228afb6a528799bcb0b4ac/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java?ref=14c4c33db6a15574b5228afb6a528799bcb0b4ac","patch":"@@ -50,6 +50,7 @@\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -231,6 +232,7 @@ public void checkForOperation() {\n      * Gets schema from the target resource.\n      */\n     @Test\n+    @Ignore\n     public void schema() {\n         Schema schema = connector.schema();\n "},{"sha":"7c78841f4b575d8b27112950638d094db26c5ab6","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/ProvisioningImpl.java","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/14c4c33db6a15574b5228afb6a528799bcb0b4ac/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/14c4c33db6a15574b5228afb6a528799bcb0b4ac/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java?ref=14c4c33db6a15574b5228afb6a528799bcb0b4ac","patch":"@@ -139,12 +139,20 @@ public String update(String accountid, List<WSAttributeValue> data)\n \n             StringBuilder set = new StringBuilder();\n             for (WSAttributeValue attr : data) {\n-                if (!attr.isKey()) {\n+                if (!attr.isKey()\n+                        || !accountid.equals(attr.getValue().toString())) {\n                     if (set.length() > 0) {\n                         set.append(\",\");\n                     }\n \n-                    set.append(attr.getName()).append('=');\n+                    if (\"__NAME__\".equals(attr.getName())) {\n+                        set.append(\"userId=\");\n+                    } else if (\"__PASSWORD__\".equals(attr.getName())) {\n+                            set.append(\"password=\");\n+                        } else {\n+                            set.append(attr.getName()).append('=');\n+                        }\n+\n                     if (attr.getValue() != null) {\n                         set.append(\"'\").\n                                 append(attr.getValue().toString()).\n@@ -282,11 +290,19 @@ public String create(List<WSAttributeValue> data)\n                 if (keys.length() > 0) {\n                     keys.append(\",\");\n                 }\n-                keys.append(attr.getName());\n+\n+                if (\"__NAME__\".equals(attr.getName())) {\n+                    keys.append(\"userId\");\n+                } else if (\"__PASSWORD__\".equals(attr.getName())) {\n+                        keys.append(\"password\");\n+                    } else {\n+                        keys.append(attr.getName());\n+                    }\n \n                 if (values.length() > 0) {\n                     values.append(\",\");\n                 }\n+\n                 values.append(\n                         \"'\"\n                         + (attr.getValue() == null ? null : attr.getValue().toString())"}]}