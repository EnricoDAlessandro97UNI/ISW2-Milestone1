{"sha":"c1c79bebdb0aa586b2f4530c03d86cda06356a54","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMxYzc5YmViZGIwYWE1ODZiMmY0NTMwYzAzZDg2Y2RhMDYzNTZhNTQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-03T14:24:59Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-03T14:24:59Z"},"message":"(Fixes issue #34)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246464 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86137317255308c5caacb570f9736bd20d5848d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/86137317255308c5caacb570f9736bd20d5848d1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c1c79bebdb0aa586b2f4530c03d86cda06356a54","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1c79bebdb0aa586b2f4530c03d86cda06356a54","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1c79bebdb0aa586b2f4530c03d86cda06356a54","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1c79bebdb0aa586b2f4530c03d86cda06356a54/comments","author":null,"committer":null,"parents":[{"sha":"b21bf3e456f1727f576b93b4e81e871c6c6e39c6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b21bf3e456f1727f576b93b4e81e871c6c6e39c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b21bf3e456f1727f576b93b4e81e871c6c6e39c6"}],"stats":{"total":339,"additions":183,"deletions":156},"files":[{"sha":"df34f79bc47a4b0e6db8b2443314b661b773fc00","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributeValue.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -49,16 +49,14 @@ public Boolean getBooleanValue() {\n         if (booleanValue == null) {\n             return null;\n         }\n-        return booleanValue == 'T' ? Boolean.TRUE : Boolean.FALSE;\n+        return isBooleanAsCharacter(booleanValue);\n     }\n \n     public void setBooleanValue(Boolean booleanValue) {\n         if (booleanValue == null) {\n             this.booleanValue = null;\n-        } else if (booleanValue == Boolean.TRUE) {\n-            this.booleanValue = 'T';\n         } else {\n-            this.booleanValue = 'F';\n+            this.booleanValue = getBooleanAsCharacter(booleanValue);\n         }\n     }\n "},{"sha":"d7b027966ad1f3c62fa05e8a5af43fe6dbc5feab","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -31,6 +31,23 @@ public abstract class AbstractBaseBean implements Serializable {\n     protected static final Logger log = LoggerFactory.getLogger(\n             AbstractBaseBean.class);\n \n+    /**\n+     * @param property the character representing a boolean value\n+     * @return the boolean value corresponding to the property param\n+     */\n+    protected final boolean isBooleanAsCharacter(final Character property) {\n+        return property != null && property == 'T';\n+    }\n+\n+    /**\n+     *\n+     * @param value the boolean value to be represented as character\n+     * @return the character corresponding to the property param\n+     */\n+    protected final Character getBooleanAsCharacter(final boolean value) {\n+        return value ? 'T' : 'F';\n+    }\n+\n     /**\n      * @return fields to be excluded when computing equals() or hashcode()\n      */"},{"sha":"a8806d7daa8e200f70381ac2c8ea5bcdfeeba10a","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":34,"deletions":26,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -40,49 +40,43 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n-\n     @Column(nullable = false)\n     @Enumerated(STRING)\n     private SchemaValueType type;\n-\n     /**\n      * All the mappings of the attribute schema.\n      */\n     @OneToMany(targetEntity = SchemaMapping.class,\n     cascade = {CascadeType.MERGE, CascadeType.REFRESH},\n     fetch = FetchType.EAGER)\n     private List<SchemaMapping> mappings;\n-\n     /**\n      * Specify if the attribute should be stored on the local repository.\n      */\n     @Basic\n     private Character virtual;\n-\n     @Basic\n     private Character mandatory;\n-\n     @Basic\n     private Character multivalue;\n-\n     @Basic\n     private Character uniquevalue;\n-\n+    @Basic\n+    private Character readonly;\n     @Column(nullable = true)\n     private String conversionPattern;\n-\n     @Column(nullable = true)\n     private String validatorClass;\n-\n     @Transient\n     private AttributeValidator validator;\n \n     public AbstractSchema() {\n         type = SchemaValueType.String;\n-        virtual = 'F';\n-        mandatory = 'F';\n-        multivalue = 'F';\n-        uniquevalue = 'F';\n+        virtual = getBooleanAsCharacter(false);\n+        mandatory = getBooleanAsCharacter(false);\n+        multivalue = getBooleanAsCharacter(false);\n+        uniquevalue = getBooleanAsCharacter(false);\n+        readonly = getBooleanAsCharacter(false);\n     }\n \n     public String getName() {\n@@ -102,8 +96,9 @@ public void setType(SchemaValueType type) {\n     }\n \n     public List<SchemaMapping> getMappings() {\n-        if (this.mappings == null)\n+        if (this.mappings == null) {\n             this.mappings = new ArrayList<SchemaMapping>();\n+        }\n \n         return this.mappings;\n     }\n@@ -113,8 +108,9 @@ public void setMappings(List<SchemaMapping> mappings) {\n     }\n \n     public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null)\n+        if (this.mappings == null) {\n             this.mappings = new ArrayList<SchemaMapping>();\n+        }\n \n         return this.mappings.contains(mapping) || this.mappings.add(mapping);\n     }\n@@ -124,35 +120,43 @@ public boolean removeMapping(SchemaMapping mapping) {\n     }\n \n     public boolean isVirtual() {\n-        return virtual != null && virtual == 'T';\n+        return isBooleanAsCharacter(virtual);\n     }\n \n     public void setVirtual(boolean virtual) {\n-        this.virtual = virtual ? 'T' : 'F';\n+        this.virtual = getBooleanAsCharacter(virtual);\n     }\n \n     public boolean isMandatory() {\n-        return mandatory != null && mandatory == 'T';\n+        return isBooleanAsCharacter(mandatory);\n     }\n \n     public void setMandatory(boolean mandatory) {\n-        this.mandatory = mandatory ? 'T' : 'F';\n+        this.mandatory = getBooleanAsCharacter(mandatory);\n     }\n \n     public boolean isMultivalue() {\n-        return multivalue != null && multivalue == 'T';\n+        return isBooleanAsCharacter(multivalue);\n     }\n \n     public void setMultivalue(boolean multivalue) {\n-        this.multivalue = multivalue ? 'T' : 'F';\n+        this.multivalue = getBooleanAsCharacter(multivalue);\n     }\n \n     public boolean isUniquevalue() {\n-        return uniquevalue != null && uniquevalue == 'T';\n+        return isBooleanAsCharacter(uniquevalue);\n     }\n \n     public void setUniquevalue(boolean uniquevalue) {\n-        this.uniquevalue = uniquevalue ? 'T' : 'F';\n+        this.uniquevalue = getBooleanAsCharacter(uniquevalue);\n+    }\n+\n+    public boolean isReadonly() {\n+        return isBooleanAsCharacter(readonly);\n+    }\n+\n+    public void setReadonly(boolean readonly) {\n+        this.readonly = getBooleanAsCharacter(readonly);\n     }\n \n     public AttributeValidator getValidator() {\n@@ -169,7 +173,9 @@ public AttributeValidator getValidator() {\n                         (AttributeValidator) validatorConstructor.newInstance(\n                         this);\n             } catch (Exception e) {\n-                log.error(\"Could not instantiate validator of type \" + getValidatorClass() + \", reverting to AttributeBasicValidator\", e);\n+                log.error(\"Could not instantiate validator of type \"\n+                        + getValidatorClass()\n+                        + \", reverting to AttributeBasicValidator\", e);\n             }\n         }\n \n@@ -191,15 +197,17 @@ public void setValidatorClass(String validatorClass) {\n     public String getConversionPattern() {\n         if (!getType().isConversionPatternNeeded() && log.isDebugEnabled()) {\n \n-            log.debug(\"Conversion pattern is not needed: \" + this + \"'s type is \" + getType());\n+            log.debug(\"Conversion pattern is not needed: \" + this\n+                    + \"'s type is \" + getType());\n         }\n \n         return conversionPattern;\n     }\n \n     public void setConversionPattern(String conversionPattern) {\n         if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern will be ignored: \" + \"this attribute type is \" + getType());\n+            log.warn(\"Conversion pattern will be ignored: \"\n+                    + \"this attribute type is \" + getType());\n         }\n \n         this.conversionPattern = conversionPattern;"},{"sha":"a2bbaa01720cd9baee72e9594f2b8d240985f9a1","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -70,21 +70,23 @@ public class SchemaMapping extends AbstractBaseBean {\n     private Character nullable;\n \n     public SchemaMapping() {\n-        accountid = 'F';\n-        password = 'F';\n-        nullable = 'T';\n+        super();\n+\n+        accountid = getBooleanAsCharacter(false);\n+        password = getBooleanAsCharacter(false);\n+        nullable = getBooleanAsCharacter(true);\n     }\n \n     public Long getId() {\n         return id;\n     }\n \n     public boolean isAccountid() {\n-        return accountid != null && accountid == 'T';\n+        return isBooleanAsCharacter(accountid);\n     }\n \n     public void setAccountid(boolean accountid) {\n-        this.accountid = accountid ? 'T' : 'F';\n+        this.accountid = getBooleanAsCharacter(accountid);\n     }\n \n     public String getField() {\n@@ -96,19 +98,19 @@ public void setField(String field) {\n     }\n \n     public boolean isNullable() {\n-        return nullable != null && nullable == 'T';\n+        return isBooleanAsCharacter(nullable);\n     }\n \n     public void setNullable(boolean nullable) {\n-        this.nullable = nullable ? 'T' : 'F';\n+        this.nullable = getBooleanAsCharacter(nullable);\n     }\n \n     public boolean isPassword() {\n-        return password != null && password == 'T';\n+        return isBooleanAsCharacter(password);\n     }\n \n     public void setPassword(boolean password) {\n-        this.password = password ? 'T' : 'F';\n+        this.password = getBooleanAsCharacter(password);\n     }\n \n     public TargetResource getResource() {"},{"sha":"de7e15d643786284582f7230562c3703796caf2e","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -38,47 +38,42 @@ public class TargetResource extends AbstractBaseBean {\n      */\n     @Id\n     private String name;\n-\n     /**\n      * The resource type is identified by the associated connector.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private ConnectorInstance connector;\n-\n     /**\n      * Users associated to this resource.\n      */\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"targetResources\")\n     private Set<SyncopeUser> users;\n-\n     /**\n      * Roles associated to this resource.\n      */\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"targetResources\")\n     private Set<SyncopeRole> roles;\n-\n     /**\n      * Attribute mappings.\n      */\n     @OneToMany(cascade = {CascadeType.MERGE, CascadeType.REFRESH},\n     mappedBy = \"resource\")\n     private List<SchemaMapping> mappings;\n-\n     @Column(nullable = false)\n     @Basic\n     private Character forceMandatoryConstraint;\n \n-    public TargetResource(){\n-        this.forceMandatoryConstraint = 'F';\n+    public TargetResource() {\n+        this.forceMandatoryConstraint = getBooleanAsCharacter(false);\n     }\n \n     public boolean isForceMandatoryConstraint() {\n-        return forceMandatoryConstraint != null &&\n-                forceMandatoryConstraint == 'T';\n+        return isBooleanAsCharacter(forceMandatoryConstraint);\n     }\n \n     public void setForceMandatoryConstraint(boolean forceMandatoryConstraint) {\n-        this.forceMandatoryConstraint = forceMandatoryConstraint ? 'T' : 'F';\n+        this.forceMandatoryConstraint =\n+                getBooleanAsCharacter(forceMandatoryConstraint);\n     }\n \n     public ConnectorInstance getConnector() {"},{"sha":"82cef2db601ed18d5241304d806f48ff1e9bf113","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -45,27 +45,19 @@ public class SyncopeRole extends AbstractAttributable {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-\n     private String name;\n-\n     @ManyToOne(optional = true)\n     private SyncopeRole parent;\n-\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeRole\")\n     private List<Membership> memberships;\n-\n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     private List<RoleAttribute> attributes;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     private List<RoleDerivedAttribute> derivedAttributes;\n-\n     @Basic\n     private Character inheritAttributes;\n-\n     @Basic\n     private Character inheritDerivedAttributes;\n \n@@ -74,8 +66,8 @@ public SyncopeRole() {\n         entitlements = new HashSet<Entitlement>();\n         attributes = new ArrayList<RoleAttribute>();\n         derivedAttributes = new ArrayList<RoleDerivedAttribute>();\n-        inheritAttributes = 'F';\n-        inheritDerivedAttributes = 'F';\n+        inheritAttributes = getBooleanAsCharacter(false);\n+        inheritDerivedAttributes = getBooleanAsCharacter(false);\n     }\n \n     public Long getId() {\n@@ -171,7 +163,8 @@ public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n     public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.remove((RoleDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.remove(\n+                (RoleDerivedAttribute) derivedAttribute);\n     }\n \n     @Override\n@@ -187,18 +180,20 @@ public void setDerivedAttributes(\n     }\n \n     public boolean isInheritAttributes() {\n-        return inheritAttributes != null && inheritAttributes == 'T';\n+        return isBooleanAsCharacter(inheritAttributes);\n     }\n \n     public void setInheritAttributes(boolean inheritAttributes) {\n-        this.inheritAttributes = inheritAttributes ? 'T' : 'F';\n+        this.inheritAttributes = getBooleanAsCharacter(inheritAttributes);\n     }\n \n     public boolean isInheritDerivedAttributes() {\n-        return inheritDerivedAttributes != null && inheritDerivedAttributes == 'T';\n+        return isBooleanAsCharacter(inheritDerivedAttributes);\n     }\n \n     public void setInheritDerivedAttributes(boolean inheritDerivedAttributes) {\n-        this.inheritDerivedAttributes = inheritDerivedAttributes ? 'T' : 'F';\n+        this.inheritDerivedAttributes =\n+                getBooleanAsCharacter(inheritDerivedAttributes);\n+\n     }\n }"},{"sha":"96fc7e1e93db051c999b5e1d6fddd68fa554da77","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":41,"deletions":34,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -38,19 +38,22 @@ public class SchemaDAOImpl extends AbstractDAOImpl\n \n     @Autowired\n     private AttributeDAO attributeDAO;\n-\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n     @Override\n     @Transactional(readOnly = true)\n-    public <T extends AbstractSchema> T find(String name, Class<T> reference) {\n+    public <T extends AbstractSchema> T find(final String name,\n+            final Class<T> reference) {\n+\n         return entityManager.find(reference, name);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public <T extends AbstractSchema> List<T> findAll(Class<T> reference) {\n+    public <T extends AbstractSchema> List<T> findAll(\n+            final Class<T> reference) {\n+\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n@@ -73,20 +76,24 @@ public <T extends AbstractSchema> void delete(\n \n         T schema = find(name, reference);\n \n-        if (schema == null) return;\n+        if (schema == null) {\n+            return;\n+        }\n \n         // --------------------------------------\n         // Remove all mappings\n         // --------------------------------------\n         List<SchemaMapping> mappings = schema.getMappings();\n         schema.setMappings(Collections.EMPTY_LIST);\n \n-        for (SchemaMapping mapping : mappings)\n+        for (SchemaMapping mapping : mappings) {\n             removeMapping(mapping.getId());\n+        }\n         // --------------------------------------\n \n-        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas())\n+        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n             derivedSchema.removeSchema(schema);\n+        }\n \n         schema.setDerivedSchemas(Collections.EMPTY_LIST);\n \n@@ -124,7 +131,9 @@ public void removeMapping(Long mappingId) {\n         // Get mapping object\n         SchemaMapping mapping = findMapping(mappingId);\n \n-        if (mapping == null) return;\n+        if (mapping == null) {\n+            return;\n+        }\n \n         // --------------------------------------\n         // Synchronize schema\n@@ -145,10 +154,12 @@ public void removeMapping(Long mappingId) {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Schema type \" + schemaType.getClassName());\n             }\n-            AbstractSchema schema = find(schemaName, schemaType.getSchemaType());\n+            AbstractSchema schema = find(schemaName,\n+                    schemaType.getSchemaType());\n \n-            if (schema != null)\n+            if (schema != null) {\n                 schema.removeMapping(mapping);\n+            }\n \n         } catch (ClassCastException e) {\n             /**\n@@ -168,8 +179,9 @@ public void removeMapping(Long mappingId) {\n         TargetResource resource =\n                 resourceDAO.find(mapping.getResource().getName());\n \n-        if (resource != null)\n+        if (resource != null) {\n             resource.removeMapping(mapping);\n+        }\n \n         mapping.setResource(null);\n         // --------------------------------------\n@@ -184,15 +196,15 @@ public boolean isMandatoryOnResource(\n             AbstractSchema schema, TargetResource resource) {\n \n         Query query = entityManager.createQuery(\n-                \"SELECT e \" +\n-                \"FROM SchemaMapping e \" +\n-                \"WHERE e.schemaName='\" + schema.getName() + \"' \" +\n-                \"AND e.resource.name='\" + resource.getName() + \"' \" +\n-                \"AND e.nullable='F'\");\n-\n-        return schema.isMandatory() ||\n-                (resource.isForceMandatoryConstraint() &&\n-                !query.getResultList().isEmpty());\n+                \"SELECT e \"\n+                + \"FROM SchemaMapping e \"\n+                + \"WHERE e.schemaName='\" + schema.getName() + \"' \"\n+                + \"AND e.resource.name='\" + resource.getName() + \"' \"\n+                + \"AND e.nullable='F'\");\n+\n+        return schema.isMandatory()\n+                || (resource.isForceMandatoryConstraint()\n+                && !query.getResultList().isEmpty());\n     }\n \n     @Override\n@@ -204,28 +216,23 @@ public boolean isMandatoryOnResource(\n \n         for (TargetResource resource : resources) {\n             if (resource.isForceMandatoryConstraint()) {\n-\n-                queryBuilder.append(\n-                        (queryBuilder.length() > 0 ? \" OR \" : \"\") +\n-                        \"e.resource.name='\" + resource.getName() + \"'\");\n-\n+                queryBuilder.append(queryBuilder.length() > 0 ? \" OR \" : \"\");\n+                queryBuilder.append(\"e.resource.name='\");\n+                queryBuilder.append(resource.getName());\n+                queryBuilder.append(\"'\");\n             }\n         }\n \n         Query query = null;\n-\n         if (queryBuilder.length() > 0) {\n-\n             query = entityManager.createQuery(\n-                    \"SELECT e \" +\n-                    \"FROM SchemaMapping e \" +\n-                    \"WHERE e.schemaName='\" + schema.getName() + \"' \" +\n-                    \"AND (\" + queryBuilder.toString() + \") \" +\n-                    \"AND e.nullable='F'\");\n-\n+                    \"SELECT e \"\n+                    + \"FROM SchemaMapping e \"\n+                    + \"WHERE e.schemaName='\" + schema.getName() + \"' \"\n+                    + \"AND (\" + queryBuilder.toString() + \") \"\n+                    + \"AND e.nullable='F'\");\n         }\n \n-        return schema.isMandatory() ||\n-                (query != null && !query.getResultList().isEmpty());\n+        return query != null && !query.getResultList().isEmpty();\n     }\n }"},{"sha":"8cb3f171c7222172d63818ffab093654081cb488","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":42,"deletions":38,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -59,36 +59,27 @@ public abstract class AbstractAttributableDataBinder {\n \n     protected static final Logger log = LoggerFactory.getLogger(\n             AbstractAttributableDataBinder.class);\n-\n     @Autowired\n     protected SyncopeRoleDAO syncopeRoleDAO;\n-\n     @Autowired\n     protected SchemaDAO schemaDAO;\n-\n     @Autowired\n     protected DerivedSchemaDAO derivedSchemaDAO;\n-\n     @Autowired\n     protected AttributeDAO attributeDAO;\n-\n     @Autowired\n     protected DerivedAttributeDAO derivedAttributeDAO;\n-\n     @Autowired\n     protected AttributeValueDAO attributeValueDAO;\n-\n     @Autowired\n     protected SyncopeUserDAO syncopeUserDAO;\n-\n     @Autowired\n     protected ResourceDAO resourceDAO;\n-\n     @Autowired\n     protected MembershipDAO membershipDAO;\n \n-    private <T extends AbstractSchema> AbstractSchema getSchema(\n-            String schemaName, Class<T> reference) {\n+    private <T extends AbstractSchema> T getSchema(\n+            final String schemaName, final Class<T> reference) {\n \n         T schema = schemaDAO.find(schemaName, reference);\n \n@@ -98,26 +89,25 @@ private <T extends AbstractSchema> AbstractSchema getSchema(\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Ignoring invalid schema \" + schemaName);\n             }\n-        } else if (schema.isVirtual()) {\n-                schema = null;\n+        } else if (schema.isVirtual() || schema.isReadonly()) {\n+            schema = null;\n \n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring virtual schema \" + schemaName);\n-                }\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring virtual or readonly schema \" + schemaName);\n             }\n+        }\n \n         return schema;\n     }\n \n-    private <T extends AbstractDerivedSchema> AbstractDerivedSchema getDerivedSchema(\n-            String derivedSchemaName, Class<T> reference) {\n+    private <T extends AbstractDerivedSchema> T getDerivedSchema(\n+            final String derivedSchemaName, final Class<T> reference) {\n \n         T derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n \n-        if (derivedSchema == null) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Ignoring invalid derivedschema \" + derivedSchemaName);\n-            }\n+        if (derivedSchema == null && log.isDebugEnabled()) {\n+            log.debug(\"Ignoring invalid derivedschema \"\n+                    + derivedSchemaName);\n         }\n \n         return derivedSchema;\n@@ -155,7 +145,8 @@ private void fillAttribute(Set<String> values,\n         for (String value : valuesProvided) {\n             if (value == null || value.length() == 0) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Null value for \" + schema.getName() + \", ignoring\");\n+                    log.debug(\"Null value for \" + schema.getName()\n+                            + \", ignoring\");\n                 }\n             } else {\n                 attributeValue = attributableUtil.newAttributeValue();\n@@ -164,7 +155,8 @@ private void fillAttribute(Set<String> values,\n                     attributeValue = attribute.addValue(value,\n                             attributeValue);\n                 } catch (ValidationException e) {\n-                    log.error(\"Invalid value for attribute \" + schema.getName() + \": \" + value, e);\n+                    log.error(\"Invalid value for attribute \"\n+                            + schema.getName() + \": \" + value, e);\n \n                     invalidValues.addElement(value);\n                 }\n@@ -180,29 +172,32 @@ private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n \n-\n         Set<TargetResource> resources = new HashSet<TargetResource>();\n         resources.addAll(attributable.getTargetResources());\n         resources.addAll(attributable.getInheritedTargetResources());\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Check mandatory constraint among resources \" + resources);\n+            log.debug(\"Check mandatory constraint among resources \"\n+                    + resources);\n         }\n \n         // Check if there is some mandatory schema defined for which no value\n         // has been provided\n         List<T> allSchemas = schemaDAO.findAll(referenceSchema);\n \n         for (T schema : allSchemas) {\n-            if (attributable.getAttribute(schema.getName()) == null && (schema.isMandatory() || schemaDAO.isMandatoryOnResource(schema, resources))) {\n+            if (attributable.getAttribute(schema.getName()) == null\n+                    && !schema.isVirtual() && !schema.isReadonly()\n+                    && (schema.isMandatory()\n+                    || schemaDAO.isMandatoryOnResource(schema, resources))) {\n \n-                log.error(\"Mandatory schema \" + schema.getName() + \" not provided with values\");\n+                log.error(\"Mandatory schema \" + schema.getName()\n+                        + \" not provided with values\");\n \n                 requiredValuesMissing.addElement(schema.getName());\n             }\n         }\n \n-\n         return requiredValuesMissing;\n     }\n \n@@ -242,7 +237,8 @@ protected ResourceOperations fill(\n                 attribute = attributable.getAttribute(schema.getName());\n                 if (attribute == null) {\n                     if (log.isDebugEnabled()) {\n-                        log.debug(\"No attribute found for schema \" + schema.getName());\n+                        log.debug(\"No attribute found for schema \"\n+                                + schema.getName());\n                     }\n                 } else {\n                     attributable.removeAttribute(attribute);\n@@ -344,7 +340,8 @@ protected ResourceOperations fill(\n                         derivedSchema.getName());\n                 if (derivedAttribute == null) {\n                     if (log.isDebugEnabled()) {\n-                        log.debug(\"No derived attribute found for schema \" + derivedSchema.getName());\n+                        log.debug(\"No derived attribute found for schema \"\n+                                + derivedSchema.getName());\n                     }\n                 } else {\n                     derivedAttributeDAO.delete(derivedAttribute);\n@@ -353,8 +350,8 @@ protected ResourceOperations fill(\n         }\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"About derived attributes to be removed:\\n\" +\n-                    resourceOperations);\n+            log.debug(\"About derived attributes to be removed:\\n\"\n+                    + resourceOperations);\n         }\n \n         // 4. derived attributes to be added\n@@ -379,8 +376,8 @@ protected ResourceOperations fill(\n         }\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"About derived attributes to be added:\\n\" +\n-                    resourceOperations);\n+            log.debug(\"About derived attributes to be added:\\n\"\n+                    + resourceOperations);\n         }\n \n         // 5. resources to be removed\n@@ -456,7 +453,8 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n         AbstractAttributeValue attributeValue = null;\n         for (AttributeTO attributeTO : attributableTO.getAttributes()) {\n             // Only consider attributeTO with values\n-            if (attributeTO.getValues() != null && !attributeTO.getValues().isEmpty()) {\n+            if (attributeTO.getValues() != null\n+                    && !attributeTO.getValues().isEmpty()) {\n \n                 schema = getSchema(attributeTO.getSchema(),\n                         attributableUtil.getSchemaClass());\n@@ -542,6 +540,7 @@ protected AbstractAttributableTO fillTO(\n             attributeTO.setSchema(attribute.getSchema().getName());\n             attributeTO.setValues(new HashSet(\n                     attribute.getAttributeValuesAsStrings()));\n+            attributeTO.setReadonly(attribute.getSchema().isReadonly());\n \n             abstractAttributableTO.addAttribute(attributeTO);\n         }\n@@ -552,6 +551,7 @@ protected AbstractAttributableTO fillTO(\n             attributeTO.setSchema(\n                     derivedAttribute.getDerivedSchema().getName());\n             attributeTO.addValue(derivedAttribute.getValue(attributes));\n+            attributeTO.setReadonly(true);\n \n             abstractAttributableTO.addDerivedAttribute(attributeTO);\n         }\n@@ -574,10 +574,14 @@ public void checkUniqueness(AbstractAttributable attributable)\n             for (AbstractAttributeValue attributeValue :\n                     attribute.getAttributeValues()) {\n \n-                if (attribute.getSchema().isUniquevalue() && attributeValueDAO.nonUniqueAttributeValue(\n+                if (attribute.getSchema().isUniquevalue()\n+                        && attributeValueDAO.nonUniqueAttributeValue(\n                         attributeValue)) {\n \n-                    log.error(\"Unique value schema \" + attribute.getSchema().getName() + \" with no unique value: \" + attributeValue.getValueAsString());\n+                    log.error(\"Unique value schema \"\n+                            + attribute.getSchema().getName()\n+                            + \" with no unique value: \"\n+                            + attributeValue.getValueAsString());\n \n                     invalidUniques.addElement(attribute.getSchema().getName());\n                 }"},{"sha":"a1a3c5450365e37863e84812c9ed9921c138edc3","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -40,11 +40,11 @@\n                           confValue=\"/tmp/bundles\"/>\n \n     <UserSchema name=\"surname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"F\"/>\n+                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"firstname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"/>\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"T\" uniquevalue=\"F\"\n+                mandatory=\"F\" multivalue=\"T\" uniquevalue=\"F\" readonly='F'\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n                \n     <UserDerivedSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n@@ -57,7 +57,7 @@\n     <SyncopeRole id=\"0\" name=\"/\" inheritAttributes=\"F\" inheritDerivedAttributes=\"F\"/>\n \n     <MembershipSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"F\"\n-                      mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"\n+                      mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n \n </dataset>"},{"sha":"f9b8abbff0703f65b818d0941705472beb4b09fe","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -36,14 +36,13 @@ public class SchemaDAOTest extends AbstractTest {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n-\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n     @Test\n     public final void findAll() {\n         List<UserSchema> userList = schemaDAO.findAll(UserSchema.class);\n-        assertEquals(8, userList.size());\n+        assertEquals(9, userList.size());\n \n         List<RoleSchema> roleList = schemaDAO.findAll(RoleSchema.class);\n         assertEquals(2, roleList.size());\n@@ -114,7 +113,7 @@ public final void checkForMandatoryOnResource() {\n \n         // multi choice\n         TargetResource resource1 =\n-                resourceDAO.find(\"ws-target-resource-1\");\n+                resourceDAO.find(\"ws-target-resource-list-mappings-2\");\n         TargetResource resource2 =\n                 resourceDAO.find(\"ws-target-resource-update\");\n "},{"sha":"597264e189282fa4462e91dfc9e96d73c9c2ba84","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1c79bebdb0aa586b2f4530c03d86cda06356a54/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=c1c79bebdb0aa586b2f4530c03d86cda06356a54","patch":"@@ -59,33 +59,35 @@\n     <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n \n     <UserSchema name=\"username\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"T\"/>\n+                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'/>\n     <UserSchema name=\"userId\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"T\"\n+                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n     <UserSchema name=\"loginDate\" type=\"Date\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"T\" uniquevalue=\"F\"\n+                mandatory=\"F\" multivalue=\"T\" uniquevalue=\"F\" readonly='F'\n                 conversionPattern=\"yyyy-MM-dd\"/>\n     <UserSchema name=\"firstname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"/>\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"surname\" type=\"String\" virtual=\"F\"\n-                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"F\"/>\n+                mandatory=\"T\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"type\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"/>\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"T\"\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"T\" readonly='F'\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n     <UserSchema name=\"activationDate\" type=\"Date\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n-                \n+    <UserSchema name=\"uselessReadonly\" type=\"String\" virtual=\"F\"\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='T'/>\n+\n     <RoleSchema name=\"icon\" type=\"String\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"/>\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n     <RoleSchema name=\"show\" type=\"Boolean\" virtual=\"F\"\n-                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"/>\n+                mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'/>\n \n     <MembershipSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"F\"\n-                      mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\"\n+                      mandatory=\"F\" multivalue=\"F\" uniquevalue=\"F\" readonly='F'\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n \n     <UserAttribute id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n@@ -148,7 +150,7 @@\n     <TargetResource name=\"ws-target-resource-1\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n     <TargetResource name=\"ws-target-resource-2\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n     <TargetResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\" forceMandatoryConstraint=\"F\"/>\n-    <TargetResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\" forceMandatoryConstraint=\"F\"/>\n+    <TargetResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n     <TargetResource name=\"ws-target-resource-delete\" connector_id=\"102\" forceMandatoryConstraint=\"F\"/>\n     <TargetResource name=\"ws-target-resource-update\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n "}]}