{"sha":"934398172f91b1128a0d3bac12c4a0ac2e1dea55","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkzNDM5ODE3MmY5MWIxMTI4YTBkM2JhYzEyYzRhMGFjMmUxZGVhNTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-23T09:04:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-26T07:26:45Z"},"message":"[SYNCOPE-714] Preliminary changes + small refactoring of ConnectorService","tree":{"sha":"995c8d7327d7b54d55651e0ffeac76e2ce130727","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/995c8d7327d7b54d55651e0ffeac76e2ce130727"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/934398172f91b1128a0d3bac12c4a0ac2e1dea55","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/934398172f91b1128a0d3bac12c4a0ac2e1dea55","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/934398172f91b1128a0d3bac12c4a0ac2e1dea55","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/934398172f91b1128a0d3bac12c4a0ac2e1dea55/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f584fb5939dda2b24497b0ff465cc8935c8e5b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7f584fb5939dda2b24497b0ff465cc8935c8e5b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7f584fb5939dda2b24497b0ff465cc8935c8e5b1"}],"stats":{"total":156,"additions":50,"deletions":106},"files":[{"sha":"246e0eb25c843243bd3e6f5339f1a8e35ef016be","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceConnConfPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -116,7 +116,7 @@ private List<ConnConfProperty> getConnConfProperties() {\n         List<ConnConfProperty> props = new ArrayList<>();\n         Long connectorKey = resourceTO.getConnector();\n         if (connectorKey != null && connectorKey > 0) {\n-            for (ConnConfProperty property : restClient.getConnectorProperties(connectorKey)) {\n+            for (ConnConfProperty property : restClient.read(connectorKey).getConfiguration()) {\n                 if (property.isOverridable()) {\n                     props.add(property);\n                 }"},{"sha":"8c8499326c3845d4f8d0dee46084fd4d0802caee","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":2,"deletions":21,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -108,24 +108,6 @@ public List<ConnBundleTO> getAllBundles() {\n         return bundles;\n     }\n \n-    /**\n-     * Get all configuration properties for the given connector instance.\n-     *\n-     * @param connectorId the connector id\n-     * @return List of ConnConfProperty, or an empty list in case none found\n-     */\n-    public List<ConnConfProperty> getConnectorProperties(final Long connectorId) {\n-        List<ConnConfProperty> properties = null;\n-\n-        try {\n-            properties = getService(ConnectorService.class).getConfigurationProperties(connectorId);\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting connector configuration properties\", e);\n-        }\n-\n-        return properties;\n-    }\n-\n     private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> properties) {\n         Set<ConnConfProperty> newProperties = new HashSet<>();\n \n@@ -185,8 +167,7 @@ public boolean check(final ResourceTO resourceTO) {\n     public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n         List<String> schemaNames = new ArrayList<>();\n         try {\n-            List<PlainSchemaTO> response = getService(ConnectorService.class).\n-                    getSchemaNames(connectorTO.getKey(), connectorTO, false);\n+            List<PlainSchemaTO> response = getService(ConnectorService.class).buildSchemaNames(connectorTO, false);\n             for (PlainSchemaTO schema : response) {\n                 schemaNames.add(schema.getKey());\n             }\n@@ -203,7 +184,7 @@ public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n     public List<ConnIdObjectClass> getSupportedObjectClasses(final ConnInstanceTO connectorTO) {\n         List<ConnIdObjectClass> result = Collections.emptyList();\n         try {\n-            result = getService(ConnectorService.class).getSupportedObjectClasses(connectorTO.getKey(), connectorTO);\n+            result = getService(ConnectorService.class).buildSupportedObjectClasses(connectorTO);\n         } catch (Exception e) {\n             LOG.error(\"While getting supported object classes\", e);\n         }"},{"sha":"ea63718a95ab12603bbe5345f39dc46f56020943","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":12,"deletions":24,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n \n /**\n@@ -58,47 +57,36 @@ public interface ConnectorService extends JAXRSService {\n     List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\n \n     /**\n-     * Returns configuration for given connector instance.\n+     * Builds the list of schema names managed by the connector bundle matching the given connector instance key, with\n+     * the provided configuration.\n      *\n-     * @param key connector instance key to read configuration from\n-     * @return configuration for given connector instance\n-     */\n-    @GET\n-    @Path(\"{key}/configuration\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ConnConfProperty> getConfigurationProperties(@NotNull @PathParam(\"key\") Long key);\n-\n-    /**\n-     * Returns schema names for connector bundle matching the given connector instance key.\n-     *\n-     * @param key connector instance key to be used for schema lookup\n-     * @param connInstanceTO connector instance object to provide special configuration properties\n+     * @param connInstanceTO connector instance object providing configuration properties\n      * @param includeSpecial if set to true, special schema names (like '__PASSWORD__') will be included;\n      * default is false\n-     * @return schema names for connector bundle matching the given connector instance key\n+     * @return schema names for the connector bundle matching the given connector instance key, with the provided\n+     * configuration\n      */\n     @POST\n     @Path(\"{key}/schemaNames\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<PlainSchemaTO> getSchemaNames(@NotNull @PathParam(\"key\") Long key,\n+    List<PlainSchemaTO> buildSchemaNames(\n             @NotNull ConnInstanceTO connInstanceTO,\n             @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\n \n     /**\n-     * Returns supported object classes for connector bundle matching the given connector instance key.\n+     * Builds the list of supported ConnId object classes for the connector bundle matching the given connector instance\n+     * key, with the provided configuration.\n      *\n-     * @param key connector instance key to be used for schema lookup\n-     * @param connInstanceTO connector instance object to provide special configuration properties\n-     * @return supported object classes for connector bundle matching the given connector instance key\n+     * @param connInstanceTO connector instance object providing configuration properties\n+     * @return supported object classes for the connector bundle matching the given connector instance key, with the\n+     * provided configuration\n      */\n     @POST\n     @Path(\"{key}/supportedObjectClasses\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ConnIdObjectClass> getSupportedObjectClasses(\n-            @NotNull @PathParam(\"key\") Long key,\n-            @NotNull ConnInstanceTO connInstanceTO);\n+    List<ConnIdObjectClass> buildSupportedObjectClasses(@NotNull ConnInstanceTO connInstanceTO);\n \n     /**\n      * Returns connector instance with matching key."},{"sha":"cc6aaed8a5d1fb819a5843693a98a4c4b3fd2c8c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -204,7 +205,7 @@ public List<ConnBundleTO> getBundles(final String lang) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public List<String> getSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n+    public List<PlainSchemaTO> buildSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n@@ -217,12 +218,22 @@ public List<String> getSchemaNames(final ConnInstanceTO connInstanceTO, final bo\n         // We cannot use Spring bean because this method could be used during resource definition or modification:\n         // bean couldn't exist or couldn't be updated.\n         // This is the reason why we should take a \"not mature\" connector facade proxy to ask for schema names.\n-        return new ArrayList<>(connFactory.createConnector(connInstance, conf).getSchemaNames(includeSpecial));\n+        Set<String> schemaNames = connFactory.createConnector(connInstance, conf).getSchemaNames(includeSpecial);\n+\n+        return CollectionUtils.collect(schemaNames, new Transformer<String, PlainSchemaTO>() {\n+\n+            @Override\n+            public PlainSchemaTO transform(final String name) {\n+                PlainSchemaTO schemaTO = new PlainSchemaTO();\n+                schemaTO.setKey(name);\n+                return schemaTO;\n+            }\n+        }, new ArrayList<PlainSchemaTO>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n+    public List<String> buildSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n@@ -237,24 +248,13 @@ public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceT\n         // This is the reason why we should take a \"not mature\" connector facade proxy to ask for object classes.\n         Set<ObjectClass> objectClasses = connFactory.createConnector(connInstance, conf).getSupportedObjectClasses();\n \n-        List<String> result = new ArrayList<>(objectClasses.size());\n-        for (ObjectClass objectClass : objectClasses) {\n-            result.add(objectClass.getObjectClassValue());\n-        }\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceKey) {\n-\n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceKey);\n-        if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connInstanceKey + \"'\");\n-        }\n+        return CollectionUtils.collect(objectClasses, new Transformer<ObjectClass, String>() {\n \n-        return new ArrayList<>(connInstance.getConfiguration());\n+            @Override\n+            public String transform(final ObjectClass objectClass) {\n+                return objectClass.getObjectClassValue();\n+            }\n+        }, new ArrayList<String>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")"},{"sha":"7c28b66bbfa2ee0d16be027a15851698b7c47e72","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -58,13 +58,14 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n     private EntityFactory entityFactory;\n \n     @Override\n-    public Set<ConnConfProperty> mergeConnConfProperties(final Set<ConnConfProperty> primary,\n+    public Set<ConnConfProperty> mergeConnConfProperties(\n+            final Set<ConnConfProperty> primary,\n             final Set<ConnConfProperty> secondary) {\n \n-        final Set<ConnConfProperty> conf = new HashSet<>();\n+        Set<ConnConfProperty> conf = new HashSet<>();\n \n         // to be used to control managed prop (needed by overridden mechanism)\n-        final Set<String> propertyNames = new HashSet<>();\n+        Set<String> propertyNames = new HashSet<>();\n \n         // get overridden connector configuration properties\n         for (ConnConfProperty prop : primary) {\n@@ -232,7 +233,7 @@ public boolean evaluate(final ConnConfProperty candidate) {\n                 property = new ConnConfProperty();\n                 connInstanceTO.getConfiguration().add(property);\n             }\n-            \n+\n             property.setSchema(schema);\n         }\n "},{"sha":"ac0694d416540e97a40dfa9e9e80c95d36218a79","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":4,"deletions":30,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -19,17 +19,13 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n-import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -64,35 +60,13 @@ public List<ConnBundleTO> getBundles(final String lang) {\n     }\n \n     @Override\n-    public List<ConnConfProperty> getConfigurationProperties(final Long key) {\n-        return logic.getConfigurationProperties(key);\n+    public List<PlainSchemaTO> buildSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n+        return logic.buildSchemaNames(connInstanceTO, includeSpecial);\n     }\n \n     @Override\n-    public List<PlainSchemaTO> getSchemaNames(final Long key, final ConnInstanceTO connInstanceTO,\n-            final boolean includeSpecial) {\n-\n-        connInstanceTO.setKey(key);\n-\n-        return CollectionUtils.collect(logic.getSchemaNames(connInstanceTO, includeSpecial),\n-                new Transformer<String, PlainSchemaTO>() {\n-\n-                    @Override\n-                    public PlainSchemaTO transform(final String name) {\n-                        PlainSchemaTO schemaTO = new PlainSchemaTO();\n-                        schemaTO.setKey(name);\n-                        return schemaTO;\n-                    }\n-                }, new ArrayList<PlainSchemaTO>());\n-    }\n-\n-    @Override\n-    public List<ConnIdObjectClass> getSupportedObjectClasses(final Long key,\n-            final ConnInstanceTO connInstanceTO) {\n-\n-        connInstanceTO.setKey(key);\n-\n-        return CollectionWrapper.wrap(logic.getSupportedObjectClasses(connInstanceTO), ConnIdObjectClass.class);\n+    public List<ConnIdObjectClass> buildSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n+        return CollectionWrapper.wrap(logic.buildSupportedObjectClasses(connInstanceTO), ConnIdObjectClass.class);\n     }\n \n     @Override"},{"sha":"71859a7e2142993f5cd017f8722ecb7188eb2e43","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -397,7 +397,7 @@ public void getBundles() {\n \n     @Test\n     public void getConnectorConfiguration() {\n-        List<ConnConfProperty> props = connectorService.getConfigurationProperties(104L);\n+        Set<ConnConfProperty> props = connectorService.read(104L, Locale.ENGLISH.getLanguage()).getConfiguration();\n         assertNotNull(props);\n         assertFalse(props.isEmpty());\n     }\n@@ -541,13 +541,13 @@ public void validate() {\n     public void getSchemaNames() {\n         ConnInstanceTO conn = connectorService.read(101L, Locale.ENGLISH.getLanguage());\n \n-        List<PlainSchemaTO> schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, true);\n+        List<PlainSchemaTO> schemaNames = connectorService.buildSchemaNames(conn, true);\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n         assertNotNull(schemaNames.get(0).getKey());\n         assertNull(schemaNames.get(0).getEnumerationValues());\n \n-        schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, false);\n+        schemaNames = connectorService.buildSchemaNames(conn, false);\n \n         assertNotNull(schemaNames);\n         assertEquals(1, schemaNames.size());\n@@ -557,7 +557,7 @@ public void getSchemaNames() {\n         // to be used with overridden properties\n         conn.getConfiguration().clear();\n \n-        schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, true);\n+        schemaNames = connectorService.buildSchemaNames(conn, true);\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n     }\n@@ -567,7 +567,7 @@ public void getSupportedObjectClasses() {\n         ConnInstanceTO ldap = connectorService.read(105L, Locale.ENGLISH.getLanguage());\n         assertNotNull(ldap);\n \n-        List<ConnIdObjectClass> objectClasses = connectorService.getSupportedObjectClasses(ldap.getKey(), ldap);\n+        List<ConnIdObjectClass> objectClasses = connectorService.buildSupportedObjectClasses(ldap);\n         assertNotNull(objectClasses);\n         assertEquals(2, objectClasses.size());\n         assertTrue(objectClasses.contains(\n@@ -578,7 +578,7 @@ public void getSupportedObjectClasses() {\n         ConnInstanceTO csv = connectorService.read(104L, Locale.ENGLISH.getLanguage());\n         assertNotNull(csv);\n \n-        objectClasses = connectorService.getSupportedObjectClasses(csv.getKey(), csv);\n+        objectClasses = connectorService.buildSupportedObjectClasses(csv);\n         assertNotNull(objectClasses);\n         assertEquals(1, objectClasses.size());\n         assertTrue(objectClasses.contains("}]}