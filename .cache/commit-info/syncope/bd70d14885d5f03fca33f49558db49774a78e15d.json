{"sha":"bd70d14885d5f03fca33f49558db49774a78e15d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJkNzBkMTQ4ODVkNWYwM2ZjYTMzZjQ5NTU4ZGI0OTc3NGE3OGUxNWQ=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2019-08-13T08:33:08Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2019-08-13T11:04:38Z"},"message":"[SYNCOPE-1481] Fix membership attribute panel","tree":{"sha":"3ae861c77b82ec1bd8f1840351238119d0c83285","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3ae861c77b82ec1bd8f1840351238119d0c83285"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bd70d14885d5f03fca33f49558db49774a78e15d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd70d14885d5f03fca33f49558db49774a78e15d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bd70d14885d5f03fca33f49558db49774a78e15d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd70d14885d5f03fca33f49558db49774a78e15d/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"cd6f08bda7d56ab473b2cc886882e36bb9fbd7eb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cd6f08bda7d56ab473b2cc886882e36bb9fbd7eb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cd6f08bda7d56ab473b2cc886882e36bb9fbd7eb"}],"stats":{"total":162,"additions":132,"deletions":30},"files":[{"sha":"895805bd899f7db497d865a9d30bdd18f80953d5","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=bd70d14885d5f03fca33f49558db49774a78e15d","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -121,4 +122,31 @@ public void setObject(final Boolean object) {\n         return this;\n     }\n \n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public FieldPanel<Boolean> setNewModel(final Attributable attributableTO, final String schema) {\n+        field.setModel(new Model() {\n+\n+            private static final long serialVersionUID = -4214654722524358000L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                if (!attributableTO.getPlainAttr(schema).get().getValues().isEmpty()) {\n+                    return Boolean.TRUE.toString().equalsIgnoreCase(\n+                            attributableTO.getPlainAttr(schema).get().getValues().get(0));\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public void setObject(final Serializable object) {\n+                attributableTO.getPlainAttr(schema).get().getValues().clear();\n+                attributableTO.getPlainAttr(schema).get().getValues().add(\n+                        object == null ? Boolean.FALSE.toString() : object.toString());\n+            }\n+\n+        });\n+\n+        return this;\n+    }\n+\n }"},{"sha":"3e2181f382327a1fc05f4cef679e5ed8e50e9b72","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxSpinnerFieldPanel.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxSpinnerFieldPanel.java?ref=bd70d14885d5f03fca33f49558db49774a78e15d","patch":"@@ -29,6 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.model.IModel;\n@@ -173,6 +174,44 @@ public void setObject(final T object) {\n         return this;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public FieldPanel<T> setNewModel(final Attributable attributableTO, final String schema) {\n+        field.setModel(new Model() {\n+\n+            private static final long serialVersionUID = -4214654722524358000L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                List<String> values = attributableTO.getPlainAttr(schema).get().getValues();\n+                if (!values.isEmpty()) {\n+                    return reference.equals(Integer.class)\n+                            ? reference.cast(NumberUtils.toInt(values.get(0)))\n+                            : reference.equals(Long.class)\n+                            ? reference.cast(NumberUtils.toLong(values.get(0)))\n+                            : reference.equals(Short.class)\n+                            ? reference.cast(NumberUtils.toShort(values.get(0)))\n+                            : reference.equals(Float.class)\n+                            ? reference.cast(NumberUtils.toFloat(values.get(0)))\n+                            : reference.equals(byte.class)\n+                            ? reference.cast(NumberUtils.toByte(values.get(0)))\n+                            : reference.cast(NumberUtils.toDouble(values.get(0)));\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public void setObject(final Serializable object) {\n+                attributableTO.getPlainAttr(schema).get().getValues().clear();\n+                if (object != null) {\n+                    attributableTO.getPlainAttr(schema).get().getValues().add(object.toString());\n+                }\n+            }\n+\n+        });\n+\n+        return this;\n+    }\n+\n     @Override\n     public AjaxSpinnerFieldPanel<T> clone() {\n         AjaxSpinnerFieldPanel<T> panel = new AjaxSpinnerFieldPanel<>(getId(), name, reference, model, options, false);"},{"sha":"ccaf57b698f543b733bd597b499d8c4e15ee2148","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/DateFieldPanel.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=bd70d14885d5f03fca33f49558db49774a78e15d","patch":"@@ -24,6 +24,7 @@\n import java.util.Date;\n import java.util.List;\n import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.markup.head.IHeaderResponse;\n import org.apache.wicket.markup.head.JavaScriptHeaderItem;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -120,6 +121,37 @@ public void setObject(final Date object) {\n         return this;\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public FieldPanel<Date> setNewModel(final Attributable attributableTO, final String schema) {\n+        field.setModel(new Model() {\n+\n+            private static final long serialVersionUID = -4214654722524358000L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                if (!attributableTO.getPlainAttr(schema).get().getValues().isEmpty()) {\n+                    try {\n+                        return fmt.parse(attributableTO.getPlainAttr(schema).get().getValues().get(0));\n+                    } catch (ParseException ex) {\n+                        LOG.error(\"While parsing date\", ex);\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public void setObject(final Serializable object) {\n+                attributableTO.getPlainAttr(schema).get().getValues().clear();\n+                if (object != null) {\n+                    attributableTO.getPlainAttr(schema).get().getValues().add(fmt.format(object));\n+                }\n+            }\n+\n+        });\n+\n+        return this;\n+    }\n+\n     @Override\n     public void renderHead(final IHeaderResponse response) {\n         super.renderHead(response);"},{"sha":"1fedce430fd24581f1e4bb4bb81d81182f98f401","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/FieldPanel.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=bd70d14885d5f03fca33f49558db49774a78e15d","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.Attributable;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.markup.html.form.FormComponent;\n@@ -126,6 +127,31 @@ public FieldPanel<T> setNewModel(final IModel<T> model) {\n         return this;\n     }\n \n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public FieldPanel<T> setNewModel(final Attributable attributableTO, final String schema) {\n+        field.setModel(new Model() {\n+\n+            private static final long serialVersionUID = -4214654722524358000L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                return (!attributableTO.getPlainAttr(schema).get().getValues().isEmpty())\n+                        ? attributableTO.getPlainAttr(schema).get().getValues().get(0)\n+                        : null;\n+            }\n+\n+            @Override\n+            public void setObject(final Serializable object) {\n+                attributableTO.getPlainAttr(schema).get().getValues().clear();\n+                if (object != null) {\n+                    attributableTO.getPlainAttr(schema).get().getValues().add(object.toString());\n+                }\n+            }\n+        });\n+        \n+        return this;\n+    }\n+\n     /**\n      * Used by MultiFieldPanel to attach items (usually strings).\n      * This method has to be overridden in case of type conversion is required."},{"sha":"9d5953f41e0108370d25f13727e56d1d2aaeecd1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":7,"deletions":30,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd70d14885d5f03fca33f49558db49774a78e15d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=bd70d14885d5f03fca33f49558db49774a78e15d","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n-import java.io.Serializable;\n import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.ArrayList;\n@@ -215,12 +214,12 @@ protected void setAttrs(final MembershipTO membershipTO) {\n         attrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().\n                 map(schema -> {\n                     Attr attrTO = new Attr();\n-                    attrTO.setSchema(schema.getKey());\n-                    if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n-                        attrTO.getValues().add(StringUtils.EMPTY);\n-                    } else {\n-                        attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n-                    }\n+            attrTO.setSchema(schema.getKey());\n+            if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n+                attrTO.getValues().add(StringUtils.EMPTY);\n+            } else {\n+                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+            }\n                     return attrTO;\n                 }).collect(Collectors.toList()));\n \n@@ -418,29 +417,7 @@ protected void populateItem(final ListItem<Attr> item) {\n                     AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n                     if (mode == AjaxWizard.Mode.TEMPLATE\n                             || !schemas.get(attrTO.getSchema()).isMultivalue()) {\n-\n-                        FieldPanel.class.cast(panel).setNewModel(new Model() {\n-\n-                            private static final long serialVersionUID = -4214654722524358000L;\n-\n-                            @Override\n-                            public Serializable getObject() {\n-                                return (!attributableTO.getObject().getPlainAttr(attrTO.getSchema()).\n-                                        get().getValues().isEmpty())\n-                                                ? attributableTO.getObject().getPlainAttr(attrTO.getSchema()).\n-                                                        get().getValues().get(0)\n-                                                : null;\n-                            }\n-\n-                            @Override\n-                            public void setObject(final Serializable object) {\n-                                attributableTO.getObject().getPlainAttr(attrTO.getSchema()).get().getValues().clear();\n-                                if (object != null) {\n-                                    attributableTO.getObject().getPlainAttr(attrTO.getSchema()).\n-                                            get().getValues().add(object.toString());\n-                                }\n-                            }\n-                        });\n+                        FieldPanel.class.cast(panel).setNewModel(attributableTO.getObject(), attrTO.getSchema());\n                     } else {\n                         // SYNCOPE-1476 set form as multipart to properly manage membership attributes\n                         panel = new MultiFieldPanel.Builder<>(new ListModel<String>() {"}]}