{"sha":"a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE5MGQ1MGVjNWUyOWU1MjhiZWFjZDNhNGUyYTAzMmI2YjE2OWMyYjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-12T11:32:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-12T11:33:03Z"},"message":"Handling notification and audit events in a Quartz job rather than in the same, possibly failing, transaction of the event itself","tree":{"sha":"7af023aaadb15e419aa18f99c8c2de87684869b8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7af023aaadb15e419aa18f99c8c2de87684869b8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ec5f834f68a92e2d808f5fd347264b7518ab73d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9ec5f834f68a92e2d808f5fd347264b7518ab73d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9ec5f834f68a92e2d808f5fd347264b7518ab73d"}],"stats":{"total":279,"additions":196,"deletions":83},"files":[{"sha":"a70f3c01e73dad22fb87219ac65337a4e459b68f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -20,19 +20,22 @@\n \n import java.lang.reflect.Method;\n import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n+import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.annotation.Around;\n import org.aspectj.lang.annotation.Aspect;\n import org.aspectj.lang.reflect.MethodSignature;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n @Aspect\n public class LogicInvocationHandler {\n@@ -46,7 +49,7 @@ public class LogicInvocationHandler {\n     private AuditManager auditManager;\n \n     @Autowired\n-    private ApplicationEventPublisher publisher;\n+    private SchedulerFactoryBean scheduler;\n \n     @Around(\"execution(* org.apache.syncope.core.logic.AbstractLogic+.*(..))\")\n     public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n@@ -94,7 +97,8 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n             LOG.debug(\"After throwing {}.{}\", clazz.getSimpleName(), event);\n             throw t;\n         } finally {\n-            publisher.publishEvent(new AfterHandlingEvent(this,\n+            Map<String, Object> jobMap = new HashMap<>();\n+            jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n                     notificationsAvailable,\n                     auditRequested,\n                     AuditElements.EventCategoryType.LOGIC,\n@@ -105,6 +109,7 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n                     before,\n                     output,\n                     input));\n+            AfterHandlingJob.schedule(scheduler, jobMap);\n         }\n     }\n }"},{"sha":"b207cb911fd51187eab2a1a1b3a215a92d7c6520","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/AfterHandlingEvent.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FAfterHandlingEvent.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -18,13 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.api.event;\n \n+import java.io.Serializable;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.springframework.context.ApplicationEvent;\n \n-public class AfterHandlingEvent extends ApplicationEvent {\n+public class AfterHandlingEvent implements Serializable {\n \n     private static final long serialVersionUID = 5950986229089263378L;\n \n+    public static final String JOBMAP_KEY = \"AfterHandlingEvent\";\n+\n     private final boolean notificationsAvailable;\n \n     private final boolean auditRequested;\n@@ -46,7 +48,6 @@ public class AfterHandlingEvent extends ApplicationEvent {\n     private final Object[] input;\n \n     public AfterHandlingEvent(\n-            final Object source,\n             final boolean notificationsAvailable,\n             final boolean auditRequested,\n             final AuditElements.EventCategoryType type,\n@@ -58,8 +59,6 @@ public AfterHandlingEvent(\n             final Object output,\n             final Object... input) {\n \n-        super(source);\n-\n         this.notificationsAvailable = notificationsAvailable;\n         this.auditRequested = auditRequested;\n         this.type = type;"},{"sha":"359538b117a2d1ad682a9f963d9019d3b483ad09","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -31,9 +31,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.event.EventListener;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(readOnly = true)\n@@ -80,8 +78,6 @@ public boolean auditRequested(\n         return auditRequested;\n     }\n \n-    @EventListener\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public void audit(final AfterHandlingEvent event) {\n         if (event.isAuditRequested()) {"},{"sha":"19bbf1eb248eb1a8554d480884fa37115294abc4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractInterruptableJob.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-\n import java.util.Date;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n@@ -35,7 +34,7 @@\n public abstract class AbstractInterruptableJob implements InterruptableJob {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AbstractInterruptableJob.class);\n-    \n+\n     /**\n      * The current running thread containing the task to be executed.\n      */\n@@ -46,7 +45,11 @@ public abstract class AbstractInterruptableJob implements InterruptableJob {\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         this.runningThread.set(Thread.currentThread());\n-        this.interruptMaxRetries = context.getMergedJobDataMap().getLong(JobManager.INTERRUPT_MAX_RETRIES_KEY);\n+        try {\n+            this.interruptMaxRetries = context.getMergedJobDataMap().getLong(JobManager.INTERRUPT_MAX_RETRIES_KEY);\n+        } catch (Exception e) {\n+            LOG.debug(\"Could not set {}, defaults to {}\", JobManager.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries, e);\n+        }\n     }\n \n     @Override"},{"sha":"86a97ca9ce8e3fccf868dcd8bd49d549959476bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.api.job.JobNamer;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.quartz.JobBuilder;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.SchedulerException;\n+import org.quartz.Trigger;\n+import org.quartz.TriggerBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+\n+/**\n+ * Quartz job for asynchronous handling of notification / audit events.\n+ * Instead of direct synchronous invocation - which occurs in the same transaction where the event is generated, the\n+ * execution of the scheduled code happens in a new transaction.\n+ */\n+public class AfterHandlingJob extends AbstractInterruptableJob {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AfterHandlingJob.class);\n+\n+    public static void schedule(final SchedulerFactoryBean scheduler, final Map<String, Object> jobMap) {\n+        @SuppressWarnings(\"unchecked\")\n+        AfterHandlingJob jobInstance = (AfterHandlingJob) ApplicationContextProvider.getBeanFactory().\n+                createBean(AfterHandlingJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+        String jobName = AfterHandlingJob.class.getName() + UUID.randomUUID();\n+\n+        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n+\n+        ApplicationContextProvider.getBeanFactory().registerSingleton(jobName, jobInstance);\n+\n+        JobBuilder jobDetailBuilder = JobBuilder.newJob(AfterHandlingJob.class).\n+                withIdentity(jobName).\n+                usingJobData(new JobDataMap(jobMap));\n+\n+        TriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger().\n+                withIdentity(JobNamer.getTriggerName(jobName)).\n+                startNow();\n+\n+        try {\n+            scheduler.getScheduler().scheduleJob(jobDetailBuilder.build(), triggerBuilder.build());\n+        } catch (SchedulerException e) {\n+            LOG.error(\"Could not schedule, aborting\", e);\n+        }\n+    }\n+\n+    @Autowired\n+    private NotificationManager notificationManager;\n+\n+    @Autowired\n+    private AuditManager auditManager;\n+\n+    @Override\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        super.execute(context);\n+\n+        try {\n+            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n+                    new AuthContextUtils.Executable<Void>() {\n+\n+                @Override\n+                public Void exec() {\n+                    notificationManager.createTasks(\n+                            (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));\n+                    auditManager.audit(\n+                            (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));\n+                    return null;\n+                }\n+            });\n+        } catch (RuntimeException e) {\n+            throw new JobExecutionException(\"While handling notification / audit events\", e);\n+        }\n+    }\n+\n+}"},{"sha":"3ef734b867c97fa86432f61a85f18488caa38c11","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJobDelegate.java","status":"modified","additions":4,"deletions":16,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJobDelegate.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -31,13 +31,11 @@\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n-import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n import org.springframework.mail.javamail.MimeMessageHelper;\n@@ -49,9 +47,6 @@ public class NotificationJobDelegate {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJobDelegate.class);\n \n-    /**\n-     * Task DAO.\n-     */\n     @Autowired\n     private TaskDAO taskDAO;\n \n@@ -67,9 +62,6 @@ public class NotificationJobDelegate {\n     @Autowired\n     private NotificationManager notificationManager;\n \n-    @Autowired\n-    private ApplicationEventPublisher publisher;\n-\n     private long maxRetries;\n \n     private void init() {\n@@ -156,9 +148,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(report.toString());\n                     }\n \n-                    publisher.publishEvent(new AfterHandlingEvent(this,\n-                            true,\n-                            true,\n+                    notificationManager.createTasks(\n                             AuditElements.EventCategoryType.TASK,\n                             \"notification\",\n                             null,\n@@ -167,7 +157,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                             null,\n                             null,\n                             task,\n-                            \"Successfully sent notification to \" + to));\n+                            \"Successfully sent notification to \" + to);\n                 } catch (Exception e) {\n                     LOG.error(\"Could not send e-mail\", e);\n \n@@ -176,9 +166,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n                     }\n \n-                    publisher.publishEvent(new AfterHandlingEvent(this,\n-                            true,\n-                            true,\n+                    notificationManager.createTasks(\n                             AuditElements.EventCategoryType.TASK,\n                             \"notification\",\n                             null,\n@@ -187,7 +175,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                             null,\n                             null,\n                             task,\n-                            \"Could not send notification to \" + to, e));\n+                            \"Could not send notification to \" + to, e);\n                 }\n \n                 execution.setEnd(new Date());"},{"sha":"c438da3d7ba8565011cb15c8a128951281ab90c3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -81,9 +81,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.context.event.EventListener;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n@@ -279,8 +277,6 @@ public boolean evaluate(final Notification notification) {\n         });\n     }\n \n-    @EventListener\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public void createTasks(final AfterHandlingEvent event) {\n         if (event.isNotificationsAvailable()) {"},{"sha":"bbc6eb010dbf059891a39bfba87f27b281046fbe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -20,7 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -50,13 +52,14 @@\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -67,7 +70,7 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n     protected MappingManager mappingManager;\n \n     @Autowired\n-    private ApplicationEventPublisher publisher;\n+    protected SchedulerFactoryBean scheduler;\n \n     protected abstract String getName(Any<?> any);\n \n@@ -362,7 +365,8 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                 throw new JobExecutionException(e);\n             } finally {\n-                publisher.publishEvent(new AfterHandlingEvent(this,\n+                Map<String, Object> jobMap = new HashMap<>();\n+                jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n                         true,\n                         true,\n                         AuditElements.EventCategoryType.PUSH,\n@@ -373,6 +377,7 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n                         beforeObj,\n                         output,\n                         any));\n+                AfterHandlingJob.schedule(scheduler, jobMap);\n             }\n         }\n     }"},{"sha":"20371b577a8383c52cd96efa5ce6fe5ad025177a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPushResultHandlerImpl.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -39,14 +41,15 @@\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n+import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -55,7 +58,7 @@\n         implements SyncopePushResultHandler {\n \n     @Autowired\n-    private ApplicationEventPublisher publisher;\n+    protected SchedulerFactoryBean scheduler;\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n@@ -319,7 +322,8 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                 throw new JobExecutionException(e);\n             } finally {\n-                publisher.publishEvent(new AfterHandlingEvent(this,\n+                Map<String, Object> jobMap = new HashMap<>();\n+                jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n                         true,\n                         true,\n                         AuditElements.EventCategoryType.PUSH,\n@@ -330,6 +334,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                         beforeObj,\n                         output,\n                         realm));\n+                AfterHandlingJob.schedule(scheduler, jobMap);\n             }\n         }\n     }"},{"sha":"841b2260a23844ac39b9c57ea7643a5551e5fc3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -54,7 +54,6 @@ protected <T extends Job> void schedule(final Class<T> reference, final Map<Stri\n         String jobName = getClass().getName() + UUID.randomUUID();\n \n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n-        jobMap.put(JobManager.INTERRUPT_MAX_RETRIES_KEY, 1L);\n \n         ApplicationContextProvider.getBeanFactory().registerSingleton(jobName, jobInstance);\n "},{"sha":"6d7c897d94cbc27f98bea09d08babad6c0866f95","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":21,"deletions":13,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.fit.core;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n@@ -31,8 +30,6 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -160,18 +157,29 @@ protected void execProvisioningTasks(final TaskService taskService,\n         service.shutdownNow();\n     }\n \n-    protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n-        PagedResult<NotificationTaskTO> tasks =\n-                taskService.list(new TaskQuery.Builder(TaskType.NOTIFICATION).page(1).size(100).build());\n-        assertNotNull(tasks);\n-        assertFalse(tasks.getResult().isEmpty());\n+    protected NotificationTaskTO findNotificationTask(final String notification, final int maxWaitSeconds) {\n+        int i = 0;\n+        int maxit = maxWaitSeconds;\n \n-        return IterableUtils.find(tasks.getResult(), new Predicate<NotificationTaskTO>() {\n+        NotificationTaskTO notificationTask = null;\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n \n-            @Override\n-            public boolean evaluate(final NotificationTaskTO task) {\n-                return sender.equals(task.getSender());\n+            PagedResult<NotificationTaskTO> tasks =\n+                    taskService.list(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).build());\n+            if (!tasks.getResult().isEmpty()) {\n+                notificationTask = tasks.getResult().get(0);\n             }\n-        });\n+\n+            i++;\n+        } while (notificationTask == null && i < maxit);\n+        if (notificationTask == null) {\n+            fail(\"Timeout when looking for notification tasks from notification \" + notification);\n+        }\n+\n+        return notificationTask;\n     }\n }"},{"sha":"e7fc955b0c3806d5cbb9fe38d0c0dda8f810ef36","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":31,"deletions":27,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -21,7 +21,6 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import com.icegreen.greenmail.util.GreenMail;\n@@ -37,13 +36,15 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -134,40 +135,40 @@ private boolean verifyMail(final String sender, final String subject, final Stri\n     public void notifyByMail() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n-        String recipient = createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n-        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        assertTrue(verifyMail(sender, subject, recipient));\n+        assertTrue(verifyMail(sender, subject, created.getRight()));\n \n         // verify message body\n         taskTO = taskService.read(taskTO.getKey(), true);\n         assertNotNull(taskTO);\n         assertTrue(taskTO.isExecuted());\n         assertNotNull(taskTO.getTextBody());\n         assertTrue(\"Notification mail text doesn't contain expected content.\",\n-                taskTO.getTextBody().contains(\"Your email address is \" + recipient + \".\"));\n+                taskTO.getTextBody().contains(\"Your email address is \" + created.getRight() + \".\"));\n         assertTrue(\"Notification mail text doesn't contain expected content.\",\n                 taskTO.getTextBody().contains(\"Your email address inside a link: \"\n-                        + \"http://localhost/?email=\" + recipient.replaceAll(\"@\", \"%40\")));\n+                        + \"http://localhost/?email=\" + created.getRight().replaceAll(\"@\", \"%40\")));\n     }\n \n     @Test\n     public void notifyByMailEmptyAbout() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n-        String recipient = createNotificationTask(true, false, TraceLevel.ALL, sender, subject);\n-        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        Pair<String, String> created = createNotificationTask(true, false, TraceLevel.ALL, sender, subject);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        assertTrue(verifyMail(sender, subject, recipient));\n+        assertTrue(verifyMail(sender, subject, created.getRight()));\n     }\n \n     @Test\n@@ -184,8 +185,8 @@ public void notifyByMailWithRetry() throws Exception {\n             // 3. create notification and user\n             String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n             String subject = \"Test notification \" + getUUIDString();\n-            createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n-            NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+            Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, subject);\n+            NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getNotification());\n             assertTrue(taskTO.getExecutions().isEmpty());\n@@ -211,8 +212,8 @@ public void notifyByMailWithRetry() throws Exception {\n     @Test\n     public void issueSYNCOPE81() {\n         String sender = \"syncope81@syncope.apache.org\";\n-        createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n-        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -231,10 +232,10 @@ public void issueSYNCOPE81() {\n     public void issueSYNCOPE86() {\n         // 1. create notification task\n         String sender = \"syncope86@syncope.apache.org\";\n-        createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n+        Pair<String, String> created = createNotificationTask(true, true, TraceLevel.ALL, sender, \"Test notification\");\n \n         // 2. get NotificationTaskTO for user just created\n-        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -258,8 +259,8 @@ public void issueSYNCOPE86() {\n     public void issueSYNCOPE192() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n-        String recipient = createNotificationTask(true, true, TraceLevel.NONE, sender, subject);\n-        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        Pair<String, String> created = createNotificationTask(true, true, TraceLevel.NONE, sender, subject);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -271,7 +272,7 @@ public void issueSYNCOPE192() throws Exception {\n         } catch (InterruptedException e) {\n         }\n \n-        assertTrue(verifyMail(sender, subject, recipient));\n+        assertTrue(verifyMail(sender, subject, created.getRight()));\n \n         // verify that last exec status was updated\n         taskTO = taskService.read(taskTO.getKey(), true);\n@@ -285,16 +286,16 @@ public void issueSYNCOPE192() throws Exception {\n     public void issueSYNCOPE445() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n-        String recipient = createNotificationTask(\n+        Pair<String, String> created = createNotificationTask(\n                 true, true, TraceLevel.ALL, sender, subject, \"syncope445@syncope.apache.org\");\n-        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         execNotificationTask(taskService, taskTO.getKey(), 50);\n \n-        assertTrue(verifyMail(sender, subject, recipient));\n+        assertTrue(verifyMail(sender, subject, created.getRight()));\n \n         // verify task\n         taskTO = taskService.read(taskTO.getKey(), true);\n@@ -341,7 +342,7 @@ public void issueSYNCOPE446() throws Exception {\n         assertNotNull(groupTO);\n \n         // 3. verify\n-        NotificationTaskTO taskTO = findNotificationTaskBySender(sender);\n+        NotificationTaskTO taskTO = findNotificationTask(notification.getKey(), 50);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n         assertTrue(taskTO.getRecipients().containsAll(\n@@ -361,13 +362,16 @@ public void issueSYNCOPE446() throws Exception {\n     public void issueSYNCOPE492() throws Exception {\n         String sender = \"syncopetest-\" + getUUIDString() + \"@syncope.apache.org\";\n         String subject = \"Test notification \" + getUUIDString();\n-        createNotificationTask(false, true, TraceLevel.NONE, sender, subject, \"syncope445@syncope.apache.org\");\n+        Pair<String, String> created =\n+                createNotificationTask(false, true, TraceLevel.NONE, sender, subject, \"syncope445@syncope.apache.org\");\n \n         // verify that no task was created for disabled notification\n-        assertNull(findNotificationTaskBySender(sender));\n+        PagedResult<NotificationTaskTO> tasks =\n+                taskService.list(new TaskQuery.Builder(TaskType.NOTIFICATION).notification(created.getLeft()).build());\n+        assertEquals(0, tasks.getSize());\n     }\n \n-    private String createNotificationTask(\n+    private Pair<String, String> createNotificationTask(\n             final boolean active,\n             final boolean includeAbout,\n             final TraceLevel traceLevel,\n@@ -383,7 +387,7 @@ private String createNotificationTask(\n         if (includeAbout) {\n             notification.getAbouts().put(AnyTypeKind.USER.name(),\n                     SyncopeClient.getUserSearchConditionBuilder().\n-                    inGroups(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").query());\n+                            inGroups(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").query());\n         }\n \n         notification.setRecipientsFIQL(SyncopeClient.getUserSearchConditionBuilder().\n@@ -410,7 +414,7 @@ private String createNotificationTask(\n \n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n-        return userTO.getUsername();\n+        return Pair.of(notification.getKey(), userTO.getUsername());\n     }\n \n }"},{"sha":"a4cc27d1d1ba40a1c3df766139c471d09f3c70c9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a90d50ec5e29e528beacd3a4e2a032b6b169c2b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=a90d50ec5e29e528beacd3a4e2a032b6b169c2b5","patch":"@@ -426,7 +426,7 @@ public void issueSYNCOPE648() {\n \n         execProvisioningTask(taskService, actual.getKey(), 50, false);\n \n-        NotificationTaskTO taskTO = findNotificationTaskBySender(\"syncope648@syncope.apache.org\");\n+        NotificationTaskTO taskTO = findNotificationTask(notification.getKey(), 50);\n         assertNotNull(taskTO);\n     }\n }"}]}