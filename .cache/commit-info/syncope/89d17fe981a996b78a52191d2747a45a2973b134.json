{"sha":"89d17fe981a996b78a52191d2747a45a2973b134","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg5ZDE3ZmU5ODFhOTk2Yjc4YTUyMTkxZDI3NDdhNDVhMjk3M2IxMzQ=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-26T12:18:30Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-26T12:18:30Z"},"message":"[SYNCOPE-392] removed controllers from result handlers\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1605756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fe149d9268c329525fb838ac8f34469fb0fa956d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fe149d9268c329525fb838ac8f34469fb0fa956d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/89d17fe981a996b78a52191d2747a45a2973b134","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89d17fe981a996b78a52191d2747a45a2973b134","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/89d17fe981a996b78a52191d2747a45a2973b134","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89d17fe981a996b78a52191d2747a45a2973b134/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"e039f8936228fcde8a4c4428c8e241376fd509f8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e039f8936228fcde8a4c4428c8e241376fd509f8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e039f8936228fcde8a4c4428c8e241376fd509f8"}],"stats":{"total":1061,"additions":689,"deletions":372},"files":[{"sha":"7a92e2c2f92e90d043454c3873ba6c6dab7cf42d","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":52,"deletions":10,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -133,7 +133,27 @@ public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry\n             final Set<String> noPropResourceNames, final List<MembershipTO> membershipTOs)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey());\n+        return getUserCreateTaskIds(\n+                wfResult.getResult().getKey(),\n+                wfResult.getResult().getValue(),\n+                wfResult.getPropByRes(),\n+                password,\n+                vAttrs,\n+                membershipTOs,\n+                noPropResourceNames);\n+    }\n+\n+    public List<PropagationTask> getUserCreateTaskIds(\n+            final Long id,\n+            final Boolean enabled,\n+            final PropagationByResource propByRes,\n+            final String password,\n+            final Collection<AttributeTO> vAttrs,\n+            final Collection<MembershipTO> membershipTOs,\n+            final Collection<String> noPropResourceNames)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeUser user = userDataBinder.getUserFromId(id);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n             userDataBinder.fillVirtual(user, vAttrs, AttributableUtil.getInstance(AttributableType.USER));\n \n@@ -148,8 +168,7 @@ public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry\n                 }\n             }\n         }\n-        return getCreateTaskIds(user, password,\n-                wfResult.getResult().getValue(), wfResult.getPropByRes(), noPropResourceNames);\n+        return getCreateTaskIds(user, password, enabled, propByRes, noPropResourceNames);\n     }\n \n     /**\n@@ -178,21 +197,44 @@ public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfR\n      * @throws NotFoundException if role is not found\n      * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n      */\n-    public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfResult,\n-            final Collection<AttributeTO> vAttrs, final Set<String> noPropResourceNames)\n+    public List<PropagationTask> getRoleCreateTaskIds(\n+            final WorkflowResult<Long> wfResult,\n+            final Collection<AttributeTO> vAttrs,\n+            final Collection<String> noPropResourceNames)\n             throws NotFoundException, UnauthorizedRoleException {\n+        return getRoleCreateTaskIds(wfResult.getResult(), vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n+    }\n \n-        SyncopeRole role = roleDataBinder.getRoleFromId(wfResult.getResult());\n+    /**\n+     * Create the role on every associated resource.\n+     *\n+     * @param id role id\n+     * @param vAttrs virtual attributes to be set\n+     * @param propByRes operation to be performed per resource\n+     * @param noPropResourceNames external resources performing not to be considered for propagation\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if role is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n+     */\n+    public List<PropagationTask> getRoleCreateTaskIds(\n+            final Long id,\n+            final Collection<AttributeTO> vAttrs,\n+            final PropagationByResource propByRes,\n+            final Collection<String> noPropResourceNames)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeRole role = roleDataBinder.getRoleFromId(id);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n             roleDataBinder.fillVirtual(role, vAttrs, AttributableUtil.getInstance(AttributableType.ROLE));\n         }\n \n-        return getCreateTaskIds(role, null, null, wfResult.getPropByRes(), noPropResourceNames);\n+        return getCreateTaskIds(role, null, null, propByRes, noPropResourceNames);\n     }\n \n     protected List<PropagationTask> getCreateTaskIds(final AbstractSubject subject,\n             final String password, final Boolean enable,\n-            final PropagationByResource propByRes, final Set<String> noPropResourceNames) {\n+            final PropagationByResource propByRes,\n+            final Collection<String> noPropResourceNames) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n             return Collections.<PropagationTask>emptyList();\n@@ -361,7 +403,7 @@ protected List<PropagationTask> getUpdateTaskIds(final AbstractSubject subject,\n                                 : membershipMod.getVirAttrsToRemove(),\n                                 membershipMod.getVirAttrsToUpdate() == null ? Collections.<AttributeMod>emptySet()\n                                 : membershipMod.getVirAttrsToUpdate(), AttributableUtil.getInstance(\n-                                        AttributableType.MEMBERSHIP));\n+                                AttributableType.MEMBERSHIP));\n                     }\n                 }\n             }\n@@ -679,7 +721,7 @@ protected <T extends AbstractSubject> List<PropagationTask> createTasks(final T\n         return tasks;\n     }\n \n-    private MembershipTO findMembershipTO(final Membership membership, final List<MembershipTO> memberships) {\n+    private MembershipTO findMembershipTO(final Membership membership, final Collection<MembershipTO> memberships) {\n         for (MembershipTO membershipTO : memberships) {\n             if (membershipTO.getRoleId() == membership.getSyncopeRole().getId()) {\n                 return membershipTO;"},{"sha":"cbec1f42fd813f35396bb1ff56366d517c24bc42","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncProfile.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncProfile.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -23,8 +23,6 @@\n import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.propagation.Connector;\n-import org.apache.syncope.core.sync.AbstractSyncActions;\n-import org.apache.syncope.core.sync.SyncResult;\n \n public class SyncProfile<T extends AbstractSyncTask, A extends AbstractSyncActions<?>> {\n "},{"sha":"0666a1370929fe5d233625918da195756543ff08","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncUtilities.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncUtilities.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncUtilities.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncUtilities.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.core.persistence.dao.search.SubjectCond;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.propagation.Connector;\n-import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.identityconnectors.framework.common.objects.Attribute;"},{"sha":"e1958a756f44083ac700426b73194b2bf7990077","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSubjectPushResultHandler.java","status":"modified","additions":45,"deletions":91,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -19,36 +19,54 @@\n package org.apache.syncope.core.sync.impl;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.common.to.AbstractSubjectTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.persistence.beans.AbstractSubject;\n-import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.PushTask;\n-import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.propagation.TimeoutException;\n-import org.apache.syncope.core.propagation.impl.AbstractPropagationTaskExecutor;\n-import org.apache.syncope.core.rest.controller.AbstractSubjectController;\n import org.apache.syncope.core.sync.PushActions;\n import org.apache.syncope.core.sync.SyncResult;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.MappingUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.Uid;\n import org.quartz.JobExecutionException;\n import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractSubjectPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions> {\n \n+    protected abstract String getName(final AbstractSubject subject);\n+\n+    protected abstract AbstractSubjectTO getSubjectTO(final long id);\n+\n+    protected abstract AbstractSubject getSubject(final long id);\n+\n+    protected abstract AbstractSubject deprovision(final AbstractSubject sbj, final SyncResult result);\n+\n+    protected abstract AbstractSubject provision(\n+            final AbstractSubject sbj, final Boolean enabled, final SyncResult result);\n+\n+    protected abstract AbstractSubject link(final AbstractSubject sbj, final Boolean unlink, final SyncResult result);\n+\n+    protected abstract AbstractSubject unassign(final AbstractSubject sbj, final SyncResult result);\n+\n+    protected abstract AbstractSubject assign(final AbstractSubject sbj, Boolean enabled, final SyncResult result);\n+\n+    protected abstract AbstractSubject update(\n+            final AbstractSubject sbj,\n+            final String accountId,\n+            final Set<Attribute> attributes,\n+            final ConnectorObject beforeObj,\n+            final SyncResult result);\n+\n+    protected abstract ConnectorObject getRemoteObject(final String accountId);\n+\n     @Transactional\n     public boolean handle(final AbstractSubject subject) {\n         try {\n@@ -67,32 +85,20 @@ protected final void doHandle(final AbstractSubject subject)\n             profile.setResults(new ArrayList<SyncResult>());\n         }\n \n-        final AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n+        final AbstractSubject toBeHandled = getSubject(subject.getId());\n+        \n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(toBeHandled);\n \n         final SyncResult result = new SyncResult();\n         profile.getResults().add(result);\n \n-        result.setId(subject.getId());\n+        result.setId(toBeHandled.getId());\n         result.setSubjectType(attrUtil.getType());\n \n-        final AbstractSubjectController<?, ?> controller;\n-        final AbstractSubject toBeHandled;\n-\n-        final Boolean enabled;\n-\n-        if (attrUtil.getType() == AttributableType.USER) {\n-            toBeHandled = userDataBinder.getUserFromId(subject.getId());\n-            result.setName(((SyncopeUser) toBeHandled).getUsername());\n-            enabled = profile.getSyncTask().isSyncStatus()\n-                    ? ((SyncopeUser) toBeHandled).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n-                    : null;\n-            controller = userController;\n-        } else {\n-            toBeHandled = roleDataBinder.getRoleFromId(subject.getId());\n-            result.setName(((SyncopeRole) toBeHandled).getName());\n-            enabled = null;\n-            controller = roleController;\n-        }\n+        result.setName(getName(toBeHandled));\n+        final Boolean enabled = toBeHandled instanceof SyncopeUser && profile.getSyncTask().isSyncStatus()\n+                ? ((SyncopeUser) toBeHandled).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n+                : null;\n \n         LOG.debug(\"Propagating {} with ID {} towards {}\",\n                 attrUtil.getType(), toBeHandled.getId(), profile.getSyncTask().getResource());\n@@ -117,11 +123,8 @@ protected final void doHandle(final AbstractSubject subject)\n                     enabled, // propagate status (suspended or not) if required\n                     profile.getSyncTask().getResource()); // target external resource\n \n-            final ObjectClass oclass =\n-                    attrUtil.getType() == AttributableType.USER ? ObjectClass.ACCOUNT : ObjectClass.GROUP;\n-\n             // Try to read remote object (user / group) BEFORE any actual operation\n-            beforeObj = getRemoteObject(oclass, values.getKey(), profile.getSyncTask().getResource().getName());\n+            beforeObj = getRemoteObject(values.getKey());\n \n             if (beforeObj == null) {\n                 operation = profile.getSyncTask().getUnmatchigRule().name().toLowerCase();\n@@ -131,27 +134,21 @@ protected final void doHandle(final AbstractSubject subject)\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeAssign(this.getProfile(), values, toBeHandled);\n                         }\n-                        controller.assign(\n-                                toBeHandled.getId(),\n-                                Collections.singleton(profile.getSyncTask().getResource().getName()), true, null);\n+                        assign(toBeHandled, enabled, result);\n                         break;\n                     case PROVISION:\n                         result.setOperation(ResourceOperation.CREATE);\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeProvision(this.getProfile(), values, toBeHandled);\n                         }\n-                        controller.provision(\n-                                toBeHandled.getId(),\n-                                Collections.singleton(profile.getSyncTask().getResource().getName()), true, null);\n+                        provision(toBeHandled, enabled, result);\n                         break;\n                     case UNLINK:\n                         result.setOperation(ResourceOperation.NONE);\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeUnlink(this.getProfile(), values, toBeHandled);\n                         }\n-                        controller.unlink(\n-                                toBeHandled.getId(), Collections.\n-                                singleton(profile.getSyncTask().getResource().getName()));\n+                        link(toBeHandled, false, result);\n                         break;\n                     default:\n                     // do nothing\n@@ -165,56 +162,35 @@ protected final void doHandle(final AbstractSubject subject)\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeUpdate(this.getProfile(), values, toBeHandled);\n                         }\n-\n-                        AbstractPropagationTaskExecutor.createOrUpdate(\n-                                oclass,\n-                                values.getKey(),\n-                                values.getValue(),\n-                                profile.getSyncTask().getResource().getName(),\n-                                profile.getSyncTask().getResource().getPropagationMode(),\n-                                beforeObj,\n-                                profile.getConnector(),\n-                                new HashSet<String>(),\n-                                connObjectUtil);\n+                        update(toBeHandled, values.getKey(), values.getValue(), beforeObj, result);\n                         break;\n                     case DEPROVISION:\n                         result.setOperation(ResourceOperation.DELETE);\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeDeprovision(this.getProfile(), values, toBeHandled);\n                         }\n-                        controller.deprovision(\n-                                toBeHandled.getId(), Collections.\n-                                singleton(profile.getSyncTask().getResource().getName()));\n+                        deprovision(toBeHandled, result);\n                         break;\n                     case UNASSIGN:\n                         result.setOperation(ResourceOperation.DELETE);\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeUnassign(this.getProfile(), values, toBeHandled);\n                         }\n-                        controller.unlink(\n-                                toBeHandled.getId(), Collections.\n-                                singleton(profile.getSyncTask().getResource().getName()));\n-                        controller.deprovision(\n-                                toBeHandled.getId(), Collections.\n-                                singleton(profile.getSyncTask().getResource().getName()));\n+                        unassign(toBeHandled, result);\n                         break;\n                     case LINK:\n                         result.setOperation(ResourceOperation.NONE);\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeLink(this.getProfile(), values, toBeHandled);\n                         }\n-                        controller.link(\n-                                toBeHandled.getId(), Collections.\n-                                singleton(profile.getSyncTask().getResource().getName()));\n+                        link(toBeHandled, true, result);\n                         break;\n                     case UNLINK:\n                         result.setOperation(ResourceOperation.NONE);\n                         for (PushActions action : profile.getActions()) {\n                             action.beforeUnlink(this.getProfile(), values, toBeHandled);\n                         }\n-                        controller.unlink(\n-                                toBeHandled.getId(), Collections.\n-                                singleton(profile.getSyncTask().getResource().getName()));\n+                        link(toBeHandled, false, result);\n                         break;\n                     default:\n                     // do nothing\n@@ -223,7 +199,7 @@ protected final void doHandle(final AbstractSubject subject)\n \n             result.setStatus(SyncResult.Status.SUCCESS);\n             resultStatus = AuditElements.Result.SUCCESS;\n-            output = getRemoteObject(oclass, values.getKey(), profile.getSyncTask().getResource().getName());\n+            output = getRemoteObject(values.getKey());\n         } catch (Exception e) {\n             result.setStatus(SyncResult.Status.FAILURE);\n             result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n@@ -256,26 +232,4 @@ protected final void doHandle(final AbstractSubject subject)\n                     toBeHandled);\n         }\n     }\n-\n-    private ConnectorObject getRemoteObject(\n-            final ObjectClass oclass, final String accountId, final String resource) {\n-        ConnectorObject obj = null;\n-\n-        try {\n-\n-            final Uid uid = new Uid(accountId);\n-\n-            profile.getConnector().getObject(\n-                    oclass,\n-                    uid,\n-                    profile.getConnector().getOperationOptions(Collections.<AbstractMappingItem>emptySet()));\n-\n-        } catch (TimeoutException toe) {\n-            LOG.debug(\"Request timeout\", toe);\n-            throw toe;\n-        } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", accountId, ignore);\n-        }\n-        return obj;\n-    }\n }"},{"sha":"f421ec529cfcc605314c539c5c3220b21c56eecd","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSubjectSyncResultHandler.java","status":"modified","additions":164,"deletions":242,"changes":406,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectSyncResultHandler.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -29,19 +29,13 @@\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.mod.AbstractSubjectMod;\n import org.apache.syncope.common.to.AbstractSubjectTO;\n-import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.propagation.PropagationException;\n-import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.impl.PropagationManager;\n-import org.apache.syncope.core.rest.controller.AbstractSubjectController;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.sync.SyncActions;\n@@ -59,12 +53,6 @@ public abstract class AbstractSubjectSyncResultHandler extends AbstractSyncopeRe\n     @Autowired\n     protected SyncUtilities syncUtilities;\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n     @Autowired\n     protected AttributableTransformer attrTransformer;\n \n@@ -87,13 +75,21 @@ protected abstract AbstractSubjectTO create(\n             final SyncDelta _delta,\n             final SyncResult result);\n \n+    protected abstract AbstractSubjectTO link(\n+            final AbstractSubjectTO before,\n+            final SyncResult result,\n+            final boolean unlink)\n+            throws Exception;\n+\n     protected abstract AbstractSubjectTO update(\n             final AbstractSubjectTO before,\n             final AbstractSubjectMod subjectMod,\n             final SyncDelta delta,\n             final SyncResult result)\n             throws Exception;\n \n+    protected abstract void deprovision(final Long id, final boolean unlink) throws Exception;\n+\n     protected abstract void delete(final Long id);\n \n     @Override\n@@ -175,6 +171,7 @@ private List<SyncResult> create(\n \n             try {\n                 actual = create(actual, _delta, result);\n+                result.setName(getName(actual));\n                 output = actual;\n                 resultStatus = Result.SUCCESS;\n             } catch (PropagationException e) {\n@@ -195,25 +192,7 @@ private List<SyncResult> create(\n                 action.after(this.getProfile(), _delta, actual, result);\n             }\n \n-            notificationManager.createTasks(\n-                    AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                    AttributableType.USER.name().toLowerCase(),\n-                    profile.getSyncTask().getResource().getName(),\n-                    operation,\n-                    resultStatus,\n-                    null,\n-                    output,\n-                    _delta);\n-\n-            auditManager.audit(\n-                    AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                    AttributableType.USER.name().toLowerCase(),\n-                    profile.getSyncTask().getResource().getName(),\n-                    operation,\n-                    resultStatus,\n-                    null,\n-                    output,\n-                    _delta);\n+            audit(operation, resultStatus, null, output, _delta);\n         }\n \n         return Collections.singletonList(result);\n@@ -245,73 +224,59 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n             result.setStatus(SyncResult.Status.SUCCESS);\n             result.setId(id);\n \n-            try {\n-                before = userDataBinder.getUserTO(id);\n+            before = getSubjectTO(id);\n \n-                if (dryRun) {\n-                    output = before;\n+            if (before == null) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), id));\n+            } else {\n+                result.setName(getName(before));\n+            }\n+\n+            if (!dryRun) {\n+                if (before == null) {\n+                    resultStatus = Result.FAILURE;\n+                    output = null;\n                 } else {\n+                    try {\n+                        final AbstractSubjectMod attributableMod = getSubjectMod(before, delta);\n \n-                    final AbstractSubjectMod attributableMod = getSubjectMod(before, delta);\n+                        // Attribute value transformation (if configured)\n+                        final AbstractSubjectMod actual = attrTransformer.transform(attributableMod);\n+                        LOG.debug(\"Transformed: {}\", actual);\n \n-                    // Attribute value transformation (if configured)\n-                    final AbstractSubjectMod actual = attrTransformer.transform(attributableMod);\n-                    LOG.debug(\"Transformed: {}\", actual);\n+                        for (SyncActions action : profile.getActions()) {\n+                            delta = action.beforeUpdate(this.getProfile(), delta, before, attributableMod);\n+                        }\n \n-                    for (SyncActions action : profile.getActions()) {\n-                        delta = action.beforeUpdate(this.getProfile(), delta, before, attributableMod);\n-                    }\n+                        final AbstractSubjectTO updated = update(before, attributableMod, delta, result);\n \n-                    final AbstractSubjectTO updated = update(before, attributableMod, delta, result);\n+                        for (SyncActions action : profile.getActions()) {\n+                            action.after(this.getProfile(), delta, updated, result);\n+                        }\n \n-                    for (SyncActions action : profile.getActions()) {\n-                        action.after(this.getProfile(), delta, updated, result);\n+                        output = updated;\n+                        resultStatus = Result.SUCCESS;\n+                        result.setName(getName(updated));\n+                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+                    } catch (PropagationException e) {\n+                        // A propagation failure doesn't imply a synchronization failure.\n+                        // The propagation exception status will be reported into the propagation task execution.\n+                        LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    } catch (Exception e) {\n+                        result.setStatus(SyncResult.Status.FAILURE);\n+                        result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                        LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n                     }\n-\n-                    output = updated;\n                 }\n-\n-                resultStatus = Result.SUCCESS;\n-            } catch (PropagationException e) {\n-                // A propagation failure doesn't imply a synchronization failure.\n-                // The propagation exception status will be reported into the propagation task execution.\n-                LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n-            } catch (Exception e) {\n-                result.setStatus(SyncResult.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n+                audit(\"update\", resultStatus, before, output, delta);\n             }\n             updResults.add(result);\n-\n-            if (!dryRun) {\n-                notificationManager.createTasks(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        profile.getSyncTask().getResource().getName(),\n-                        \"update\",\n-                        resultStatus,\n-                        before,\n-                        output,\n-                        delta);\n-\n-                auditManager.audit(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        profile.getSyncTask().getResource().getName(),\n-                        \"update\",\n-                        resultStatus,\n-                        before,\n-                        output,\n-                        delta);\n-            }\n-\n-            LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n         }\n-\n         return updResults;\n     }\n \n@@ -332,13 +297,6 @@ protected List<SyncResult> deprovision(\n \n         final List<SyncResult> updResults = new ArrayList<SyncResult>();\n \n-        final AbstractSubjectController<?, ?> controller;\n-        if (AttributableType.USER == attrUtil.getType()) {\n-            controller = userController;\n-        } else {\n-            controller = roleController;\n-        }\n-\n         for (Long id : subjects) {\n             LOG.debug(\"About to unassign resource {}\", id);\n \n@@ -351,74 +309,57 @@ protected List<SyncResult> deprovision(\n             result.setStatus(SyncResult.Status.SUCCESS);\n             result.setId(id);\n \n-            final AbstractSubjectTO before = controller.read(id);\n-            result.setName(before instanceof UserTO ? UserTO.class.cast(before).getUsername()\n-                    : before instanceof RoleTO ? RoleTO.class.cast(before).getName() : null);\n+            final AbstractSubjectTO before = getSubjectTO(id);\n \n-            try {\n-                if (!dryRun) {\n-                    if (unlink) {\n-                        for (SyncActions action : profile.getActions()) {\n-                            action.beforeUnassign(this.getProfile(), delta, before);\n+            if (before == null) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), id));\n+            }\n+\n+            if (!dryRun) {\n+                if (before == null) {\n+                    resultStatus = Result.FAILURE;\n+                    output = null;\n+                } else {\n+                    result.setName(getName(before));\n+\n+                    try {\n+                        if (unlink) {\n+                            for (SyncActions action : profile.getActions()) {\n+                                action.beforeUnassign(this.getProfile(), delta, before);\n+                            }\n+                        } else {\n+                            for (SyncActions action : profile.getActions()) {\n+                                action.beforeDeprovision(this.getProfile(), delta, before);\n+                            }\n                         }\n-                        controller.unlink(\n-                                id, Collections.<String>singleton(profile.getSyncTask().getResource().getName()));\n-                    } else {\n+\n+                        deprovision(id, unlink);\n+                        output = getSubjectTO(id);\n+\n                         for (SyncActions action : profile.getActions()) {\n-                            action.beforeDeprovision(this.getProfile(), delta, before);\n+                            action.after(this.getProfile(), delta, AbstractSubjectTO.class.cast(output), result);\n                         }\n-                    }\n \n-                    controller.deprovision(\n-                            id, Collections.<String>singleton(profile.getSyncTask().getResource().getName()));\n-\n-                    output = controller.read(id);\n-                    for (SyncActions action : profile.getActions()) {\n-                        action.after(this.getProfile(), delta, AbstractSubjectTO.class.cast(output), result);\n+                        resultStatus = Result.SUCCESS;\n+                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+                    } catch (PropagationException e) {\n+                        // A propagation failure doesn't imply a synchronization failure.\n+                        // The propagation exception status will be reported into the propagation task execution.\n+                        LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    } catch (Exception e) {\n+                        result.setStatus(SyncResult.Status.FAILURE);\n+                        result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                        LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n                     }\n-                } else {\n-                    output = before;\n                 }\n-\n-                resultStatus = Result.SUCCESS;\n-            } catch (PropagationException e) {\n-                // A propagation failure doesn't imply a synchronization failure.\n-                // The propagation exception status will be reported into the propagation task execution.\n-                LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n-            } catch (Exception e) {\n-                result.setStatus(SyncResult.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n+                audit(unlink ? \"unassign\" : \"deprovision\", resultStatus, before, output, delta);\n             }\n             updResults.add(result);\n-\n-            if (!dryRun) {\n-                notificationManager.createTasks(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        profile.getSyncTask().getResource().getName(),\n-                        unlink ? \"unassign\" : \"deprovision\",\n-                        resultStatus,\n-                        before,\n-                        output,\n-                        delta);\n-\n-                auditManager.audit(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        profile.getSyncTask().getResource().getName(),\n-                        unlink ? \"unassign\" : \"deprovision\",\n-                        resultStatus,\n-                        before,\n-                        output,\n-                        delta);\n-            }\n-\n-            LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n         }\n \n         return updResults;\n@@ -441,13 +382,6 @@ protected List<SyncResult> link(\n \n         final List<SyncResult> updResults = new ArrayList<SyncResult>();\n \n-        final AbstractSubjectController<?, ?> controller;\n-        if (AttributableType.USER == attrUtil.getType()) {\n-            controller = userController;\n-        } else {\n-            controller = roleController;\n-        }\n-\n         for (Long id : subjects) {\n             LOG.debug(\"About to unassign resource {}\", id);\n \n@@ -460,73 +394,56 @@ protected List<SyncResult> link(\n             result.setStatus(SyncResult.Status.SUCCESS);\n             result.setId(id);\n \n-            final AbstractSubjectTO before = controller.read(id);\n-            result.setName(before instanceof UserTO ? UserTO.class.cast(before).getUsername()\n-                    : before instanceof RoleTO ? RoleTO.class.cast(before).getName() : null);\n+            final AbstractSubjectTO before = getSubjectTO(id);\n \n-            try {\n-                if (!dryRun) {\n-                    if (unlink) {\n-                        for (SyncActions action : profile.getActions()) {\n-                            action.beforeUnlink(this.getProfile(), delta, before);\n+            if (before == null) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), id));\n+            }\n+\n+            if (!dryRun) {\n+                if (before == null) {\n+                    resultStatus = Result.FAILURE;\n+                    output = null;\n+                } else {\n+                    result.setName(getName(before));\n+\n+                    try {\n+                        if (unlink) {\n+                            for (SyncActions action : profile.getActions()) {\n+                                action.beforeUnlink(this.getProfile(), delta, before);\n+                            }\n+                        } else {\n+                            for (SyncActions action : profile.getActions()) {\n+                                action.beforeLink(this.getProfile(), delta, before);\n+                            }\n                         }\n-                        controller.unlink(\n-                                id, Collections.<String>singleton(profile.getSyncTask().getResource().getName()));\n-                    } else {\n+\n+                        output = link(before, result, unlink);\n+\n                         for (SyncActions action : profile.getActions()) {\n-                            action.beforeLink(this.getProfile(), delta, before);\n+                            action.after(this.getProfile(), delta, AbstractSubjectTO.class.cast(output), result);\n                         }\n-                        controller.link(\n-                                id, Collections.<String>singleton(profile.getSyncTask().getResource().getName()));\n-                    }\n \n-                    output = controller.read(id);\n-                    for (SyncActions action : profile.getActions()) {\n-                        action.after(this.getProfile(), delta, AbstractSubjectTO.class.cast(output), result);\n+                        resultStatus = Result.SUCCESS;\n+                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+                    } catch (PropagationException e) {\n+                        // A propagation failure doesn't imply a synchronization failure.\n+                        // The propagation exception status will be reported into the propagation task execution.\n+                        LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    } catch (Exception e) {\n+                        result.setStatus(SyncResult.Status.FAILURE);\n+                        result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                        LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n                     }\n-                } else {\n-                    output = before;\n                 }\n-\n-                resultStatus = Result.SUCCESS;\n-            } catch (PropagationException e) {\n-                // A propagation failure doesn't imply a synchronization failure.\n-                // The propagation exception status will be reported into the propagation task execution.\n-                LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n-            } catch (Exception e) {\n-                result.setStatus(SyncResult.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n+                audit(unlink ? \"unlink\" : \"link\", resultStatus, before, output, delta);\n             }\n             updResults.add(result);\n-\n-            if (!dryRun) {\n-                notificationManager.createTasks(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        profile.getSyncTask().getResource().getName(),\n-                        unlink ? \"unlink\" : \"link\",\n-                        resultStatus,\n-                        before,\n-                        output,\n-                        delta);\n-\n-                auditManager.audit(\n-                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                        attrUtil.getType().name().toLowerCase(),\n-                        profile.getSyncTask().getResource().getName(),\n-                        unlink ? \"unlink\" : \"link\",\n-                        resultStatus,\n-                        before,\n-                        output,\n-                        delta);\n-            }\n-\n-            LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n         }\n \n         return updResults;\n@@ -556,12 +473,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                 before = getSubjectTO(id);\n \n                 result.setId(id);\n-                if (before instanceof UserTO) {\n-                    result.setName(((UserTO) before).getUsername());\n-                }\n-                if (before instanceof RoleTO) {\n-                    result.setName(((RoleTO) before).getName());\n-                }\n+                result.setName(getName(before));\n                 result.setOperation(ResourceOperation.DELETE);\n                 result.setSubjectType(attrUtil.getType());\n                 result.setStatus(SyncResult.Status.SUCCESS);\n@@ -586,25 +498,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                         action.after(this.getProfile(), delta, before, result);\n                     }\n \n-                    notificationManager.createTasks(\n-                            AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                            attrUtil.getType().name().toLowerCase(),\n-                            profile.getSyncTask().getResource().getName(),\n-                            \"delete\",\n-                            resultStatus,\n-                            before,\n-                            output,\n-                            delta);\n-\n-                    auditManager.audit(\n-                            AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                            attrUtil.getType().name().toLowerCase(),\n-                            profile.getSyncTask().getResource().getName(),\n-                            \"delete\",\n-                            resultStatus,\n-                            before,\n-                            output,\n-                            delta);\n+                    audit(\"delete\", resultStatus, before, output, delta);\n                 }\n \n                 delResults.add(result);\n@@ -707,4 +601,32 @@ protected final void doHandle(final SyncDelta delta, final Collection<SyncResult\n             LOG.warn(e.getMessage());\n         }\n     }\n+\n+    private void audit(\n+            final String event,\n+            final Result result,\n+            final Object before,\n+            final Object output,\n+            final Object... input) {\n+\n+        notificationManager.createTasks(\n+                AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                getAttributableUtil().getType().name().toLowerCase(),\n+                profile.getSyncTask().getResource().getName(),\n+                event,\n+                result,\n+                before,\n+                output,\n+                input);\n+\n+        auditManager.audit(\n+                AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                getAttributableUtil().getType().name().toLowerCase(),\n+                profile.getSyncTask().getResource().getName(),\n+                event,\n+                result,\n+                before,\n+                output,\n+                input);\n+    }\n }"},{"sha":"1bfd4d71f93e451702c1d0af954eed8cd3bdd858","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeResultHandler.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -23,8 +23,8 @@\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n-import org.apache.syncope.core.rest.controller.RoleController;\n-import org.apache.syncope.core.rest.controller.UserController;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.AbstractSyncActions;\n@@ -41,12 +41,6 @@\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSyncopeResultHandler.class);\n \n-    @Autowired\n-    protected UserController userController;\n-\n-    @Autowired\n-    protected RoleController roleController;\n-\n     /**\n      * User data binder.\n      */\n@@ -77,6 +71,18 @@\n     @Autowired\n     protected AuditManager auditManager;\n \n+    /**\n+     * Propagation manager.\n+     */\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+    \n+    /**\n+     * task executor.\n+     */\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n     /**\n      * User workflow adapter.\n      */"},{"sha":"8142d10db225fea11200517734b3f219cb997885","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/PushJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -123,7 +123,7 @@ protected String executeWithSecurityContext(\n                         // user propagation\n                         uhandler.handle(localUser);\n                     } catch (Exception e) {\n-                        LOG.warn(\"Failure pushing user '{}' on '{}'\", localUser, pushTask.getResource());\n+                        LOG.warn(\"Failure pushing user '{}' on '{}'\", localUser, pushTask.getResource(), e);\n                         if (!continueOnError()) {\n                             throw new JobExecutionException(\"While pushing users on connector\", e);\n                         }\n@@ -140,7 +140,7 @@ protected String executeWithSecurityContext(\n                     // role propagation\n                     rhandler.handle(localRole);\n                 } catch (Exception e) {\n-                    LOG.warn(\"Failure pushing role '{}' on '{}'\", localRole, pushTask.getResource());\n+                    LOG.warn(\"Failure pushing role '{}' on '{}'\", localRole, pushTask.getResource(), e);\n                     if (!continueOnError()) {\n                         throw new JobExecutionException(\"While pushing roles on connector\", e);\n                     }"},{"sha":"94557f4059fc49ab45c0c1a77c9d148073bdca9a","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/RolePushResultHandler.java","status":"modified","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -18,5 +18,168 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n+import static org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler.LOG;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.to.AbstractSubjectTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.AbstractSubject;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.propagation.TimeoutException;\n+import org.apache.syncope.core.propagation.impl.AbstractPropagationTaskExecutor;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+\n public class RolePushResultHandler extends AbstractSubjectPushResultHandler {\n+\n+    @Override\n+    protected AbstractSubject deprovision(final AbstractSubject sbj, final SyncResult result) {\n+        final RoleTO before = roleDataBinder.getRoleTO(SyncopeRole.class.cast(sbj));\n+\n+        final List<String> noPropResources = new ArrayList<String>(before.getResources());\n+        noPropResources.remove(profile.getSyncTask().getResource().getName());\n+\n+        taskExecutor.execute(propagationManager.getRoleDeleteTaskIds(before.getId(), noPropResources));\n+\n+        result.setId(before.getId());\n+        return roleDataBinder.getRoleFromId(before.getId());\n+    }\n+\n+    @Override\n+    protected AbstractSubject provision(final AbstractSubject sbj, final Boolean enabled, final SyncResult result) {\n+        final RoleTO before = roleDataBinder.getRoleTO(SyncopeRole.class.cast(sbj));\n+\n+        final List<String> noPropResources = new ArrayList<String>(before.getResources());\n+        noPropResources.remove(profile.getSyncTask().getResource().getName());\n+\n+        final PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.CREATE, profile.getSyncTask().getResource().getName());\n+\n+        taskExecutor.execute(propagationManager.getRoleCreateTaskIds(\n+                before.getId(),\n+                Collections.unmodifiableCollection(before.getVirAttrs()),\n+                propByRes,\n+                noPropResources));\n+\n+        result.setId(before.getId());\n+        return roleDataBinder.getRoleFromId(before.getId());\n+    }\n+\n+    @Override\n+    protected AbstractSubject link(\n+            final AbstractSubject sbj, final Boolean unlink, final SyncResult result) {\n+\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setId(sbj.getId());\n+\n+        if (unlink) {\n+            roleMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        } else {\n+            roleMod.getResourcesToAdd().add(profile.getSyncTask().getResource().getName());\n+        }\n+\n+        rwfAdapter.update(roleMod);\n+\n+        result.setId(sbj.getId());\n+        return roleDataBinder.getRoleFromId(sbj.getId());\n+    }\n+\n+    @Override\n+    protected AbstractSubject unassign(final AbstractSubject sbj, final SyncResult result) {\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setId(sbj.getId());\n+        roleMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        rwfAdapter.update(roleMod);\n+        return deprovision(sbj, result);\n+    }\n+\n+    @Override\n+    protected AbstractSubject assign(final AbstractSubject sbj, final Boolean enabled, final SyncResult result) {\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setId(sbj.getId());\n+        roleMod.getResourcesToAdd().add(profile.getSyncTask().getResource().getName());\n+        rwfAdapter.update(roleMod);\n+        return provision(sbj, enabled, result);\n+    }\n+\n+    @Override\n+    protected AbstractSubject update(\n+            final AbstractSubject sbj,\n+            final String accountId,\n+            final Set<Attribute> attributes,\n+            final ConnectorObject beforeObj,\n+            final SyncResult result) {\n+\n+        AbstractPropagationTaskExecutor.createOrUpdate(\n+                ObjectClass.GROUP,\n+                accountId,\n+                attributes,\n+                profile.getSyncTask().getResource().getName(),\n+                profile.getSyncTask().getResource().getPropagationMode(),\n+                beforeObj,\n+                profile.getConnector(),\n+                new HashSet<String>(),\n+                connObjectUtil);\n+\n+        result.setId(sbj.getId());\n+        return userDataBinder.getUserFromId(sbj.getId());\n+    }\n+\n+    @Override\n+    protected String getName(final AbstractSubject subject) {\n+        return SyncopeRole.class.cast(subject).getName();\n+    }\n+\n+    @Override\n+    protected AbstractSubjectTO getSubjectTO(final long id) {\n+        try {\n+            return roleDataBinder.getRoleTO(id);\n+        } catch (Exception e) {\n+            LOG.warn(\"Error retrieving user {}\", id, e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    protected AbstractSubject getSubject(final long id) {\n+        try {\n+            return roleDataBinder.getRoleFromId(id);\n+        } catch (Exception e) {\n+            LOG.warn(\"Error retrieving user {}\", id, e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    protected ConnectorObject getRemoteObject(final String accountId) {\n+        ConnectorObject obj = null;\n+\n+        try {\n+\n+            final Uid uid = new Uid(accountId);\n+\n+            profile.getConnector().getObject(\n+                    ObjectClass.GROUP,\n+                    uid,\n+                    profile.getConnector().getOperationOptions(Collections.<AbstractMappingItem>emptySet()));\n+\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", accountId, ignore);\n+        }\n+        return obj;\n+    }\n }"},{"sha":"8eb3960042a1ba3e1fbb2f37ef05ea88612038dd","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/RoleSyncResultHandler.java","status":"modified","additions":40,"deletions":2,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRoleSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRoleSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRoleSyncResultHandler.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.common.mod.AbstractSubjectMod;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AbstractSubjectTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.RoleTO;\n@@ -58,7 +59,12 @@ protected String getName(final AbstractSubjectTO subjectTO) {\n \n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long id) {\n-        return roleDataBinder.getRoleTO(id);\n+        try {\n+            return roleDataBinder.getRoleTO(id);\n+        } catch (Exception e) {\n+            LOG.warn(\"Error retrieving role {}\", id, e);\n+            return null;\n+        }\n     }\n \n     @Override\n@@ -100,6 +106,25 @@ protected AbstractSubjectTO create(\n         return roleTO;\n     }\n \n+    @Override\n+    protected AbstractSubjectTO link(\n+            final AbstractSubjectTO before,\n+            final SyncResult result,\n+            final boolean unlink)\n+            throws Exception {\n+\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setId(before.getId());\n+\n+        if (unlink) {\n+            roleMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        } else {\n+            roleMod.getResourcesToAdd().add(profile.getSyncTask().getResource().getName());\n+        }\n+\n+        return userDataBinder.getUserTO(rwfAdapter.update(roleMod).getResult());\n+    }\n+\n     @Override\n     protected AbstractSubjectTO update(\n             final AbstractSubjectTO before,\n@@ -135,7 +160,20 @@ protected AbstractSubjectTO update(\n     }\n \n     @Override\n-    protected void delete(Long id) {\n+    protected void deprovision(final Long id, final boolean unlink) {\n+\n+        taskExecutor.execute(\n+                propagationManager.getRoleDeleteTaskIds(id, profile.getSyncTask().getResource().getName()));\n+\n+        if (unlink) {\n+            final UserMod userMod = new UserMod();\n+            userMod.setId(id);\n+            userMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        }\n+    }\n+\n+    @Override\n+    protected void delete(final Long id) {\n         try {\n             taskExecutor.execute(\n                     propagationManager.getRoleDeleteTaskIds(id, profile.getSyncTask().getResource().getName()));"},{"sha":"035e07c97639eaa021a26775468882dbab37af40","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/UserPushResultHandler.java","status":"modified","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserPushResultHandler.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -18,5 +18,170 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n+import static org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler.LOG;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.AbstractSubjectTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.AbstractSubject;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.propagation.TimeoutException;\n+import org.apache.syncope.core.propagation.impl.AbstractPropagationTaskExecutor;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+\n public class UserPushResultHandler extends AbstractSubjectPushResultHandler {\n+\n+    @Override\n+    protected AbstractSubject deprovision(final AbstractSubject sbj, final SyncResult result) {\n+        final UserTO before = userDataBinder.getUserTO(sbj.getId());\n+\n+        final List<String> noPropResources = new ArrayList<String>(before.getResources());\n+        noPropResources.remove(profile.getSyncTask().getResource().getName());\n+\n+        taskExecutor.execute(propagationManager.getUserDeleteTaskIds(before.getId(), noPropResources));\n+\n+        result.setId(before.getId());\n+        return userDataBinder.getUserFromId(before.getId());\n+    }\n+\n+    @Override\n+    protected AbstractSubject provision(final AbstractSubject sbj, final Boolean enabled, final SyncResult result) {\n+        final UserTO before = userDataBinder.getUserTO(sbj.getId());\n+\n+        final List<String> noPropResources = new ArrayList<String>(before.getResources());\n+        noPropResources.remove(profile.getSyncTask().getResource().getName());\n+\n+        final PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.CREATE, profile.getSyncTask().getResource().getName());\n+\n+        taskExecutor.execute(propagationManager.getUserCreateTaskIds(\n+                before.getId(),\n+                enabled,\n+                propByRes,\n+                null,\n+                Collections.unmodifiableCollection(before.getVirAttrs()),\n+                Collections.unmodifiableCollection(before.getMemberships()),\n+                noPropResources));\n+\n+        result.setId(before.getId());\n+        return userDataBinder.getUserFromId(before.getId());\n+    }\n+\n+    @Override\n+    protected AbstractSubject link(\n+            final AbstractSubject sbj, final Boolean unlink, final SyncResult result) {\n+\n+        final UserMod userMod = new UserMod();\n+        userMod.setId(sbj.getId());\n+\n+        if (unlink) {\n+            userMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        } else {\n+            userMod.getResourcesToAdd().add(profile.getSyncTask().getResource().getName());\n+        }\n+\n+        uwfAdapter.update(userMod);\n+\n+        result.setId(sbj.getId());\n+        return userDataBinder.getUserFromId(sbj.getId());\n+    }\n+\n+    @Override\n+    protected AbstractSubject unassign(final AbstractSubject sbj, final SyncResult result) {\n+        final UserMod userMod = new UserMod();\n+        userMod.setId(sbj.getId());\n+        userMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        uwfAdapter.update(userMod);\n+        return deprovision(sbj, result);\n+    }\n+\n+    @Override\n+    protected AbstractSubject assign(final AbstractSubject sbj, final Boolean enabled, final SyncResult result) {\n+        final UserMod userMod = new UserMod();\n+        userMod.setId(sbj.getId());\n+        userMod.getResourcesToAdd().add(profile.getSyncTask().getResource().getName());\n+        uwfAdapter.update(userMod);\n+        return provision(sbj, enabled, result);\n+    }\n+\n+    @Override\n+    protected AbstractSubject update(\n+            final AbstractSubject sbj,\n+            final String accountId,\n+            final Set<Attribute> attributes,\n+            final ConnectorObject beforeObj,\n+            final SyncResult result) {\n+\n+        AbstractPropagationTaskExecutor.createOrUpdate(\n+                ObjectClass.ACCOUNT,\n+                accountId,\n+                attributes,\n+                profile.getSyncTask().getResource().getName(),\n+                profile.getSyncTask().getResource().getPropagationMode(),\n+                beforeObj,\n+                profile.getConnector(),\n+                new HashSet<String>(),\n+                connObjectUtil);\n+\n+        result.setId(sbj.getId());\n+        return userDataBinder.getUserFromId(sbj.getId());\n+    }\n+\n+    @Override\n+    protected String getName(final AbstractSubject subject) {\n+        return SyncopeUser.class.cast(subject).getUsername();\n+    }\n+\n+    @Override\n+    protected AbstractSubjectTO getSubjectTO(final long id) {\n+        try {\n+            return userDataBinder.getUserTO(id);\n+        } catch (Exception e) {\n+            LOG.warn(\"Error retrieving user {}\", id, e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    protected AbstractSubject getSubject(final long id) {\n+        try {\n+            return userDataBinder.getUserFromId(id);\n+        } catch (Exception e) {\n+            LOG.warn(\"Error retrieving user {}\", id, e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    protected ConnectorObject getRemoteObject(final String accountId) {\n+        ConnectorObject obj = null;\n+\n+        try {\n+\n+            final Uid uid = new Uid(accountId);\n+\n+            profile.getConnector().getObject(\n+                    ObjectClass.ACCOUNT,\n+                    uid,\n+                    profile.getConnector().getOperationOptions(Collections.<AbstractMappingItem>emptySet()));\n+\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", accountId, ignore);\n+        }\n+        return obj;\n+    }\n }"},{"sha":"0d40cf0ef2639a1ebad8e2dd8ff281eb26afbba0","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/UserSyncResultHandler.java","status":"modified","additions":44,"deletions":7,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserSyncResultHandler.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -53,7 +53,12 @@ protected String getName(final AbstractSubjectTO subjectTO) {\n \n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long id) {\n-        return userDataBinder.getUserTO(id);\n+        try {\n+            return userDataBinder.getUserTO(id);\n+        } catch (Exception e) {\n+            LOG.warn(\"Error retrieving user {}\", id, e);\n+            return null;\n+        }\n     }\n \n     @Override\n@@ -88,16 +93,35 @@ protected AbstractSubjectTO create(\n         userTO = userDataBinder.getUserTO(created.getResult().getKey());\n \n         result.setId(created.getResult().getKey());\n-        result.setName(getName(subjectTO));\n \n         return userTO;\n     }\n \n+    @Override\n+    protected AbstractSubjectTO link(\n+            final AbstractSubjectTO before,\n+            final SyncResult result,\n+            final boolean unlink)\n+            throws Exception {\n+\n+        final UserMod userMod = new UserMod();\n+        userMod.setId(before.getId());\n+\n+        if (unlink) {\n+            userMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        } else {\n+            userMod.getResourcesToAdd().add(profile.getSyncTask().getResource().getName());\n+        }\n+\n+        return userDataBinder.getUserTO(uwfAdapter.update(userMod).getResult().getKey().getId());\n+    }\n+\n     @Override\n     protected AbstractSubjectTO update(\n             final AbstractSubjectTO before,\n             final AbstractSubjectMod subjectMod,\n-            final SyncDelta delta, final SyncResult result)\n+            final SyncDelta delta,\n+            final SyncResult result)\n             throws Exception {\n \n         final UserMod userMod = UserMod.class.cast(subjectMod);\n@@ -113,7 +137,8 @@ protected AbstractSubjectTO update(\n                     + ExceptionUtils.getRootCauseMessage(e));\n \n             updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                    new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, false), new PropagationByResource(),\n+                    new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, false),\n+                    new PropagationByResource(),\n                     new HashSet<String>());\n         }\n \n@@ -145,10 +170,22 @@ protected AbstractSubjectTO update(\n \n         taskExecutor.execute(tasks);\n \n-        final UserTO after = userDataBinder.getUserTO(updated.getResult().getKey().getId());\n+        return userDataBinder.getUserTO(updated.getResult().getKey().getId());\n+    }\n+\n+    @Override\n+    protected void deprovision(\n+            final Long id,\n+            final boolean unlink) {\n+\n+        taskExecutor.execute(\n+                propagationManager.getUserDeleteTaskIds(id, profile.getSyncTask().getResource().getName()));\n \n-        result.setName(getName(after));\n-        return after;\n+        if (unlink) {\n+            final UserMod userMod = new UserMod();\n+            userMod.setId(id);\n+            userMod.getResourcesToRemove().add(profile.getSyncTask().getResource().getName());\n+        }\n     }\n \n     @Override"},{"sha":"b6ceb4955add0d6deeee247f26e5a3b276ef4de8","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89d17fe981a996b78a52191d2747a45a2973b134/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=89d17fe981a996b78a52191d2747a45a2973b134","patch":"@@ -30,11 +30,6 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathFactory;\n import org.activiti.bpmn.converter.BpmnXMLConverter;\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.editor.constants.ModelDataJsonConstants;\n@@ -85,8 +80,6 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.w3c.dom.Document;\n-import org.w3c.dom.NodeList;\n \n /**\n  * Activiti (http://www.activiti.org/) based implementation."}]}