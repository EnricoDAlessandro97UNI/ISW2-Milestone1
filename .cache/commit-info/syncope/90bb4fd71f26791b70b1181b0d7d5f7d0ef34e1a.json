{"sha":"90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkwYmI0ZmQ3MWYyNjc5MWI3MGIxMTgxYjBkN2Q1ZjdkMGVmMzRlMWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-22T15:28:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-22T15:28:45Z"},"message":"[SYNCOPE-431] Merge from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1544573 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2f05b87c9318d97933f8e92c95238d23b248db1c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2f05b87c9318d97933f8e92c95238d23b248db1c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0485cfd3806df4f4f97c818184136b06329be9ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0485cfd3806df4f4f97c818184136b06329be9ef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0485cfd3806df4f4f97c818184136b06329be9ef"},{"sha":"61be542bec77bdbe92518963b09e527466ca55ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61be542bec77bdbe92518963b09e527466ca55ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61be542bec77bdbe92518963b09e527466ca55ad"}],"stats":{"total":579,"additions":243,"deletions":336},"files":[{"sha":"64a41ee64c7929df32234c3ab32956e6de535865","filename":"common/src/main/java/org/apache/syncope/common/to/EventCategoryTO.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEventCategoryTO.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,28 +1,34 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.common.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.types.AuditElements;\n \n-@XmlRootElement(name = \"user\")\n+@XmlRootElement(name = \"eventCategory\")\n @XmlType\n public class EventCategoryTO extends AbstractBaseBean {\n \n@@ -34,7 +40,7 @@ public class EventCategoryTO extends AbstractBaseBean {\n \n     private String subcategory;\n \n-    private List<String> events;\n+    private final List<String> events = new ArrayList<String>();\n \n     /**\n      * Constructor for Type.REST event category.\n@@ -74,14 +80,10 @@ public void setSubcategory(final String subcategory) {\n         this.subcategory = subcategory;\n     }\n \n+    @XmlElementWrapper(name = \"events\")\n+    @XmlElement(name = \"event\")\n+    @JsonProperty(\"events\")\n     public List<String> getEvents() {\n-        if (events == null) {\n-            events = new ArrayList<String>();\n-        }\n         return events;\n     }\n-\n-    public void setEvents(final List<String> events) {\n-        this.events = events;\n-    }\n }"},{"sha":"c934e7067d4fb88b1ecf7f4d5452cfe44b129cae","filename":"common/src/main/java/org/apache/syncope/common/util/LoggerEventUtils.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.common.util;\n "},{"sha":"1a89612b4d1a1c62ac6b0063eda007fb12350949","filename":"console/src/main/java/org/apache/syncope/console/commons/ActionTableCheckGroup.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FActionTableCheckGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FActionTableCheckGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FActionTableCheckGroup.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.console.commons;\n "},{"sha":"11eeb595783186f69273581e236a688a154937b1","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractStatusModalPage.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractStatusModalPage.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.console.pages;\n "},{"sha":"ffbb4f045f8bbdfea718d64cb766864fa5eef4e9","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportletConfModalPage.java","status":"modified","additions":28,"deletions":27,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -71,8 +71,8 @@ public class ReportletConfModalPage extends BaseModalPage {\n \n     private static final long serialVersionUID = 3910027601200382958L;\n \n-    private static final String[] EXCLUDE_PROPERTIES = new String[]{\"serialVersionUID\", \"class\", \"name\",\n-        \"reportletClassName\"};\n+    private static final String[] EXCLUDE_PROPERTIES = new String[] { \"serialVersionUID\", \"class\", \"name\",\n+        \"reportletClassName\" };\n \n     private AbstractReportletConf reportletConf;\n \n@@ -104,30 +104,31 @@ public ReportletConfModalPage(final AbstractReportletConf reportletConf, final M\n         final AjaxDropDownChoicePanel<String> reportletClass = new AjaxDropDownChoicePanel<String>(\"reportletClass\",\n                 \"reportletClass\", new IModel<String>() {\n \n-            private static final long serialVersionUID = -2316468110411802130L;\n+                    private static final long serialVersionUID = -2316468110411802130L;\n \n-            @Override\n-            public String getObject() {\n-                return ReportletConfModalPage.this.reportletConf == null\n+                    @Override\n+                    public String getObject() {\n+                        return ReportletConfModalPage.this.reportletConf == null\n                         ? null\n                         : ReportletConfModalPage.this.reportletConf.getClass().getName();\n-            }\n+                    }\n \n-            @Override\n-            public void setObject(final String object) {\n-                try {\n-                    Class<?> reportletClass = Class.forName(object);\n-                    ReportletConfModalPage.this.reportletConf = (AbstractReportletConf) reportletClass.newInstance();\n-                    propertiesContainer.replace(buildPropView());\n-                } catch (Exception e) {\n-                    LOG.error(\"Cannot find or initialize {}\", object, e);\n-                }\n-            }\n+                    @Override\n+                    public void setObject(final String object) {\n+                        try {\n+                            Class<?> reportletClass = Class.forName(object);\n+                            ReportletConfModalPage.this.reportletConf = (AbstractReportletConf) reportletClass.\n+                            newInstance();\n+                            propertiesContainer.replace(buildPropView());\n+                        } catch (Exception e) {\n+                            LOG.error(\"Cannot find or initialize {}\", object, e);\n+                        }\n+                    }\n \n-            @Override\n-            public void detach() {\n-            }\n-        });\n+                    @Override\n+                    public void detach() {\n+                    }\n+                });\n         reportletClass.setStyleSheet(\"long_dynamicsize\");\n         reportletClass.setChoices(reportRestClient.getReportletConfClasses());\n         ((DropDownChoice) reportletClass.getField()).setNullValid(true);\n@@ -254,15 +255,15 @@ protected void populateItem(final ListItem<String> item) {\n                 try {\n                     field = ReportletConfModalPage.this.reportletConf.getClass().getDeclaredField(fieldName);\n                 } catch (Exception e) {\n-                    LOG.error(\"Could not find field {} in class {}\", new Object[]{fieldName,\n-                        ReportletConfModalPage.this.reportletConf.getClass(), e});\n+                    LOG.error(\"Could not find field {} in class {}\",\n+                            fieldName, ReportletConfModalPage.this.reportletConf.getClass(), e);\n                 }\n                 if (field == null) {\n                     return;\n                 }\n \n-                BeanWrapper wrapper = PropertyAccessorFactory\n-                        .forBeanPropertyAccess(ReportletConfModalPage.this.reportletConf);\n+                BeanWrapper wrapper = PropertyAccessorFactory.\n+                        forBeanPropertyAccess(ReportletConfModalPage.this.reportletConf);\n \n                 Panel panel;\n \n@@ -333,15 +334,15 @@ protected void populateItem(final ListItem<String> item) {\n                     } else if (listItemType.isEnum()) {\n                         panel = new CheckBoxMultipleChoiceFieldPanel(\"value\", new PropertyModel(\n                                 ReportletConfModalPage.this.reportletConf, fieldName), new ListModel(Arrays\n-                                .asList(listItemType.getEnumConstants())));\n+                                        .asList(listItemType.getEnumConstants())));\n                     } else {\n                         if (((List) wrapper.getPropertyValue(fieldName)).isEmpty()) {\n                             ((List) wrapper.getPropertyValue(fieldName)).add(null);\n                         }\n \n                         panel = new MultiValueSelectorPanel(\"value\", new PropertyModel<List>(\n                                 ReportletConfModalPage.this.reportletConf, fieldName), buildSinglePanel(\n-                                field.getType(), fieldName, \"panel\"));\n+                                        field.getType(), fieldName, \"panel\"));\n                     }\n                 } else {\n                     panel = buildSinglePanel(field.getType(), fieldName, \"value\");"},{"sha":"8b63a05dcd6f300ed319175147e3a37fe96ec552","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ImagePanel.java","status":"modified","additions":19,"deletions":16,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FImagePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FImagePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FImagePanel.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,25 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.apache.syncope.console.pages.panels;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.behavior.Behavior;\n import org.apache.wicket.markup.html.image.Image;\n import org.apache.wicket.markup.html.panel.Panel;\n \n-/*\n- * Copyright 2013 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n public class ImagePanel extends Panel {\n \n     private static final long serialVersionUID = 5564818820574092960L;\n@@ -33,7 +36,7 @@ public ImagePanel(final String id, final String img) {\n     }\n \n     @Override\n-    public Component add(Behavior... behaviors) {\n+    public Component add(final Behavior... behaviors) {\n         this.img.add(behaviors);\n         return this;\n     }"},{"sha":"a41d3f06aeff38c46abfcba6d4781ab43f2a9555","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -178,15 +178,13 @@ public Page createPage() {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-\n                             policyRestClient.delete(accountPolicyTO.getId(), accountPolicyTO.getClass());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-\n                         } catch (SyncopeClientException e) {\n                             error(getString(Constants.OPERATION_ERROR));\n \n-                            LOG.error(\"While deleting resource {}({})\", new Object[]{accountPolicyTO.getId(),\n-                                accountPolicyTO.getDescription()}, e);\n+                            LOG.error(\"While deleting resource {}({})\",\n+                                    accountPolicyTO.getId(), accountPolicyTO.getDescription(), e);\n                         }\n \n                         target.add(container);"},{"sha":"59bcdd8e5425630175f1d6f548075b01d6f47ae6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SelectedEventsPanel.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectedEventsPanel.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.console.pages.panels;\n "},{"sha":"b32e3c180658a02a49d2c75bf21ad1b53a49acd1","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -193,7 +193,6 @@ public Membership getMembership(final Long syncopeRoleId) {\n \n             membership = itor.next();\n             if (membership.getSyncopeRole() != null && syncopeRoleId.equals(membership.getSyncopeRole().getId())) {\n-\n                 result = membership;\n             }\n         }"},{"sha":"90f5e826287ce06ab46dcb71050aeceb2d80bb05","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -24,7 +24,12 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n \n-public abstract class AbstractController<T extends AbstractBaseBean> {\n+/**\n+ * Superclass for all controllers.\n+ *\n+ * @param <T> transfer object used for input / output\n+ */\n+abstract class AbstractController<T extends AbstractBaseBean> {\n \n     /**\n      * Logger."},{"sha":"76b8b59c9f5779c622d55187f92c7dab40a771e5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractTransactionalController.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractTransactionalController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -21,6 +21,12 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = {Throwable.class})\n-public abstract class AbstractTransactionalController<T extends AbstractBaseBean> extends AbstractController<T> {\n+/**\n+ * Adds Spring's transactional support to <tt>AbstractController</tt>.\n+ *\n+ * @param <T> transfer object used for input / output\n+ * @see AbstractController\n+ */\n+@Transactional(rollbackFor = { Throwable.class })\n+abstract class AbstractTransactionalController<T extends AbstractBaseBean> extends AbstractController<T> {\n }"},{"sha":"7982907925eda4870168a48cc327995b979ea6bf","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -65,7 +65,6 @@ public class ConfigurationController extends AbstractTransactionalController<Con\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_CREATE')\")\n     public ConfigurationTO create(final ConfigurationTO configurationTO) {\n-        LOG.debug(\"Configuration create called with parameters {}\", configurationTO);\n \n         SyncopeConf conf = binder.create(configurationTO);\n         conf = confDAO.save(conf);"},{"sha":"5d2741ad21fc5bfc5ef1d1ef0b94ba1de57880a6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnectorController.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -72,8 +72,6 @@ public class ConnectorController extends AbstractTransactionalController<ConnIns\n \n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n     public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n-        LOG.debug(\"ConnInstance create called with configuration {}\", connInstanceTO);\n-\n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n@@ -89,8 +87,6 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n \n     @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n     public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n-        LOG.debug(\"Connector update called with configuration {}\", connInstanceTO);\n-\n         ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getId(), connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n@@ -273,8 +269,8 @@ public List<ConnConfProperty> getConfigurationProperties(final Long connInstance\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @Transactional(readOnly = true)\n     public boolean check(final ConnInstanceTO connInstanceTO) {\n-        final Connector connector = connFactory.createConnector(binder.getConnInstance(connInstanceTO), connInstanceTO.\n-                getConfiguration());\n+        final Connector connector = connFactory.createConnector(\n+                binder.getConnInstance(connInstanceTO), connInstanceTO.getConfiguration());\n \n         boolean result;\n         try {\n@@ -307,8 +303,6 @@ public void reload() {\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n     public BulkActionRes bulk(final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n@@ -329,8 +323,9 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n      * {@inheritDoc}\n      */\n     @Override\n-    protected ConnInstanceTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected ConnInstanceTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"8f9349f411ab68715fa37f5b7d93ed3862d8ef67","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ControllerHandler.java","status":"renamed","additions":19,"deletions":17,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FControllerHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FControllerHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FControllerHandler.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,26 +1,28 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n-package org.apache.syncope.core.services;\n+package org.apache.syncope.core.rest.controller;\n \n import java.lang.reflect.Method;\n+import java.util.Arrays;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.notification.NotificationManager;\n-import org.apache.syncope.core.rest.controller.AbstractController;\n-import org.apache.syncope.core.rest.controller.UnresolvedReferenceException;\n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.annotation.Around;\n import org.aspectj.lang.annotation.Aspect;\n@@ -61,8 +63,8 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n         Object before = null;\n \n         try {\n-            LOG.debug(\"Before {}.{}({})\",\n-                    new Object[] {clazz.getSimpleName(), event, input == null || input.length == 0 ? \"\" : \"...\"});\n+            LOG.debug(\"Before {}.{}({})\", clazz.getSimpleName(), event,\n+                    input == null || input.length == 0 ? \"\" : Arrays.asList(input));\n \n             try {\n                 before = ((AbstractController) joinPoint.getTarget()).resolveBeanReference(method, input);\n@@ -73,7 +75,7 @@ public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {\n             output = joinPoint.proceed();\n             result = AuditElements.Result.SUCCESS;\n \n-            LOG.debug(\"After returning {}.{}\", clazz.getSimpleName(), event);\n+            LOG.debug(\"After returning {}.{}: {}\", clazz.getSimpleName(), event, output);\n             return output;\n         } catch (Throwable t) {\n             output = t;","previous_filename":"core/src/main/java/org/apache/syncope/core/services/ControllerHandler.java"},{"sha":"64044c7ef102fb3344fcde1c6fa749107802f352","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -66,14 +66,11 @@ public List<NotificationTO> list() {\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n     public NotificationTO create(final NotificationTO notificationTO) {\n-        LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n         return binder.getNotificationTO(notificationDAO.save(binder.createNotification(notificationTO)));\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n     public NotificationTO update(final NotificationTO notificationTO) {\n-        LOG.debug(\"ConnNotificationtor update called with parameter {}\", notificationTO);\n-\n         Notification notification = notificationDAO.find(notificationTO.getId());\n         if (notification == null) {\n             LOG.error(\"Could not find notification '\" + notificationTO.getId() + \"'\");\n@@ -106,6 +103,7 @@ public NotificationTO delete(final Long notificationId) {\n     @Override\n     protected NotificationTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"58197bbe47cfbf7116c5cd272e35182dfa8fb205","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -54,12 +54,10 @@ public class PolicyController extends AbstractTransactionalController<AbstractPo\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     public <T extends AbstractPolicyTO> T create(final T policyTO) {\n-        LOG.debug(\"Creating policy \" + policyTO);\n         return binder.getPolicyTO(policyDAO.save(binder.getPolicy(null, policyTO)));\n     }\n \n     private <T extends AbstractPolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n-        LOG.debug(\"Updating policy \" + policyTO);\n         binder.getPolicy(policy, policyTO);\n         K savedPolicy = policyDAO.save(policy);\n         return binder.getPolicyTO(savedPolicy);\n@@ -98,7 +96,6 @@ public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n-        LOG.debug(\"Listing policies\");\n \n         List<? extends Policy> policies = policyDAO.find(type);\n \n@@ -112,8 +109,6 @@ public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     public PasswordPolicyTO getGlobalPasswordPolicy() {\n-        LOG.debug(\"Reading global password policy\");\n-\n         PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No password policy found\");\n@@ -124,8 +119,6 @@ public PasswordPolicyTO getGlobalPasswordPolicy() {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     public AccountPolicyTO getGlobalAccountPolicy() {\n-        LOG.debug(\"Reading global account policy\");\n-\n         AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No account policy found\");\n@@ -136,8 +129,6 @@ public AccountPolicyTO getGlobalAccountPolicy() {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     public SyncPolicyTO getGlobalSyncPolicy() {\n-        LOG.debug(\"Reading global sync policy\");\n-\n         SyncPolicy policy = policyDAO.getGlobalSyncPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No sync policy found\");\n@@ -148,8 +139,6 @@ public SyncPolicyTO getGlobalSyncPolicy() {\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     public <T extends AbstractPolicyTO> T read(final Long id) {\n-        LOG.debug(\"Reading policy with id {}\", id);\n-\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");"},{"sha":"e3a52f6d83b3a4bfec3f3b36651326af8f33df35","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -83,8 +83,6 @@ public class ReportController extends AbstractTransactionalController<ReportTO>\n \n     @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n     public ReportTO create(final ReportTO reportTO) {\n-        LOG.debug(\"Creating report \" + reportTO);\n-\n         Report report = new Report();\n         binder.getReport(report, reportTO);\n         report = reportDAO.save(report);\n@@ -104,8 +102,6 @@ public ReportTO create(final ReportTO reportTO) {\n \n     @PreAuthorize(\"hasRole('REPORT_UPDATE')\")\n     public ReportTO update(final ReportTO reportTO) {\n-        LOG.debug(\"Report update called with parameter {}\", reportTO);\n-\n         Report report = reportDAO.find(reportTO.getId());\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportTO.getId());\n@@ -190,8 +186,6 @@ public ReportExecTO readExecution(final Long executionId) {\n     public void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n-        LOG.debug(\"Exporting result of {} as {}\", reportExec, format);\n-\n         // streaming SAX handler from a compressed byte array stream\n         ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());\n         ZipInputStream zis = new ZipInputStream(bais);\n@@ -277,10 +271,6 @@ public ReportExecTO execute(final Long reportId) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n \n-        ReportExecTO result;\n-\n-        LOG.debug(\"Triggering new execution of report {}\", report);\n-\n         try {\n             jobInstanceLoader.registerJob(report);\n \n@@ -294,7 +284,7 @@ public ReportExecTO execute(final Long reportId) {\n             throw sce;\n         }\n \n-        result = new ReportExecTO();\n+        ReportExecTO result = new ReportExecTO();\n         result.setReport(reportId);\n         result.setStartDate(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n@@ -332,8 +322,9 @@ public ReportExecTO deleteExecution(final Long executionId) {\n      * {@inheritDoc}\n      */\n     @Override\n-    protected ReportTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected ReportTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args) && (\"create\".equals(method.getName())"},{"sha":"cebf20c957aa76764b4ecd6f60249d99fc352482","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -91,8 +91,6 @@ public class ResourceController extends AbstractTransactionalController<Resource\n \n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n-        LOG.debug(\"Resource creation: {}\", resourceTO);\n-\n         if (StringUtils.isBlank(resourceTO.getName())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n             sce.getElements().add(\"Resource name\");\n@@ -110,8 +108,6 @@ public ResourceTO create(final ResourceTO resourceTO) {\n \n     @PreAuthorize(\"hasRole('RESOURCE_UPDATE')\")\n     public ResourceTO update(final ResourceTO resourceTO) {\n-        LOG.debug(\"Role update request: {}\", resourceTO);\n-\n         ExternalResource resource = resourceDAO.find(resourceTO.getName());\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceTO.getName() + \"'\");\n@@ -251,8 +247,6 @@ public boolean check(final ResourceTO resourceTO) {\n \n     @PreAuthorize(\"hasRole('RESOURCE_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n     public BulkActionRes bulk(final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n@@ -273,8 +267,9 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n      * {@inheritDoc}\n      */\n     @Override\n-    protected ResourceTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected ResourceTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         String name = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"1fb06da1259de792fc366de91e99c06f5f195bf6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":14,"deletions":44,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -51,22 +51,21 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+/**\n+ * Note that this controller does not extend AbstractTransactionalController, hence does not provide any\n+ * Spring's Transactional logic at class level.\n+ *\n+ * @see AbstractTransactionalController\n+ */\n @Component\n public class RoleController extends AbstractResourceAssociator<RoleTO> {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(RoleController.class);\n-\n     @Autowired\n     protected RoleDAO roleDAO;\n \n@@ -175,20 +174,18 @@ public List<RoleTO> children(final Long roleId) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<RoleTO> search(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return search(searchCondition, -1, -1);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n \n-        LOG.debug(\"Role search called with condition {}\", searchCondition);\n-\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n@@ -207,7 +204,7 @@ public List<RoleTO> search(final NodeCond searchCondition, final int page, final\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public int searchCount(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n@@ -235,8 +232,6 @@ public List<RoleTO> list() {\n \n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n     public RoleTO create(final RoleTO roleTO) {\n-        LOG.debug(\"Role create called with parameters {}\", roleTO);\n-\n         // Check that this operation is allowed to be performed by caller\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {\n@@ -266,18 +261,13 @@ public RoleTO create(final RoleTO roleTO) {\n \n         final RoleTO savedTO = binder.getRoleTO(created.getResult());\n         savedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return created role\\n{}\", savedTO);\n-\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     public RoleTO update(final RoleMod roleMod) {\n-        LOG.debug(\"Role update called with {}\", roleMod);\n-\n         // Check that this operation is allowed to be performed by caller\n-        SyncopeRole role = binder.getRoleFromId(roleMod.getId());\n+        binder.getRoleFromId(roleMod.getId());\n \n         // Attribute value transformation (if configured)\n         RoleMod actual = attrTransformer.transform(roleMod);\n@@ -300,16 +290,11 @@ public RoleTO update(final RoleMod roleMod) {\n         }\n         final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n-\n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n     public RoleTO delete(final Long roleId) {\n-        LOG.debug(\"Role delete called for {}\", roleId);\n-\n         List<SyncopeRole> ownedRoles = roleDAO.findOwnedByRole(roleId);\n         if (!ownedRoles.isEmpty()) {\n             List<String> owned = new ArrayList<String>(ownedRoles.size());\n@@ -347,37 +332,27 @@ public RoleTO delete(final Long roleId) {\n \n         rwfAdapter.delete(roleId);\n \n-        LOG.debug(\"Role successfully deleted: {}\", roleId);\n-\n         return roleTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public RoleTO unlink(final Long roleId, final Collection<String> resources) {\n-        LOG.debug(\"About to unlink role({}) and resources {}\", roleId, resources);\n-\n         final RoleMod roleMod = new RoleMod();\n         roleMod.setId(roleId);\n \n         roleMod.getResourcesToRemove().addAll(resources);\n \n         final WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n \n-        final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n-\n-        LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n-\n-        return updatedTO;\n+        return binder.getRoleTO(updated.getResult());\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public RoleTO unassign(final Long roleId, final Collection<String> resources) {\n-        LOG.debug(\"About to unassign role({}) and resources {}\", roleId, resources);\n-\n         final RoleMod roleMod = new RoleMod();\n         roleMod.setId(roleId);\n         roleMod.getResourcesToRemove().addAll(resources);\n@@ -386,11 +361,9 @@ public RoleTO unassign(final Long roleId, final Collection<String> resources) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public RoleTO deprovision(final Long roleId, final Collection<String> resources) {\n-        LOG.debug(\"About to deprovision role({}) from resources {}\", roleId, resources);\n-\n         final SyncopeRole role = binder.getRoleFromId(roleId);\n \n         final Set<String> noPropResourceName = role.getResourceNames();\n@@ -408,9 +381,6 @@ public RoleTO deprovision(final Long roleId, final Collection<String> resources)\n \n         final RoleTO updatedTO = binder.getRoleTO(role);\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n-\n         return updatedTO;\n     }\n "},{"sha":"cc6f98ed3152cc98230b5b499f14eb97d90fe709","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -274,6 +274,7 @@ public <T extends AbstractSchemaTO> void update(final AttributableType attrType,\n     @Override\n     protected SchemaTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n+\n         String kind = null;\n         String name = null;\n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"8d91fb900dee4ecea2cd9a13bde08ac9ac0122c8","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -87,8 +87,6 @@ public class TaskController extends AbstractTransactionalController<AbstractTask\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n-        LOG.debug(\"Creating task \" + taskTO);\n-\n         TaskUtil taskUtil = TaskUtil.getInstance(taskTO);\n \n         SchedTask task = binder.createSchedTask(taskTO, taskUtil);\n@@ -114,8 +112,6 @@ public SyncTaskTO updateSync(final SyncTaskTO taskTO) {\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n     public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n-        LOG.debug(\"Task update called with parameter {}\", taskTO);\n-\n         SchedTask task = taskDAO.find(taskTO.getId());\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskTO.getId());\n@@ -175,7 +171,7 @@ public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final in\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     public Set<String> getJobClasses() {\n         return classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB);\n-        }\n+    }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     public Set<String> getSyncActionsClasses() {\n@@ -189,7 +185,7 @@ public <T extends AbstractTaskTO> T read(final Long taskId) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n         return binder.getTaskTO(task, TaskUtil.getInstance(task));\n-}\n+    }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     public TaskExecTO readExecution(final Long executionId) {\n@@ -209,7 +205,6 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n         TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n         TaskExecTO result = null;\n-        LOG.debug(\"Execution started for {}\", task);\n         switch (taskUtil.getType()) {\n             case PROPAGATION:\n                 final TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n@@ -250,7 +245,7 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n \n             default:\n         }\n-        LOG.debug(\"Execution finished for {}, {}\", task, result);\n+\n         return result;\n     }\n \n@@ -332,8 +327,6 @@ public TaskExecTO deleteExecution(final Long executionId) {\n             + \"(#bulkAction.operation == #bulkAction.operation.EXECUTE or \"\n             + \"#bulkAction.operation == #bulkAction.operation.DRYRUN))\")\n     public BulkActionRes bulk(final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         switch (bulkAction.getOperation()) {\n@@ -382,12 +375,14 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n      * {@inheritDoc}\n      */\n     @Override\n-    protected AbstractTaskTO resolveReference(final Method method, final Object... args) throws\n-            UnresolvedReferenceException {\n+    protected AbstractTaskTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args)\n                 && !\"deleteExecution\".equals(method.getName()) && !\"readExecution\".equals(method.getName())) {\n+\n             for (int i = 0; id == null && i < args.length; i++) {\n                 if (args[i] instanceof Long) {\n                     id = (Long) args[i];"},{"sha":"46d754bc6ad63d35721e2c15d3b0ca1799304b98","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UnauthorizedRoleException.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -23,9 +23,9 @@\n \n public class UnauthorizedRoleException extends RuntimeException {\n \n-\tprivate static final long serialVersionUID = 7540587364235915081L;\n-\t\n-\tprivate final Set<Long> roleIds;\n+    private static final long serialVersionUID = 7540587364235915081L;\n+\n+    private final Set<Long> roleIds;\n \n     public UnauthorizedRoleException(final Set<Long> roleIds) {\n         super(\"Missing entitlement for role(s) \" + roleIds);"},{"sha":"ca63ef699cfe3a065f10ca700eeeac2a85df8418","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UnresolvedReferenceException.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnresolvedReferenceException.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -1,17 +1,20 @@\n /*\n- * Copyright 2013 The Apache Software Foundation.\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.rest.controller;\n \n@@ -23,6 +26,7 @@ public class UnresolvedReferenceException extends Exception {\n     private static final long serialVersionUID = -675489116009955632L;\n \n     public UnresolvedReferenceException() {\n+        super();\n     }\n \n     public UnresolvedReferenceException(Throwable cause) {"},{"sha":"a2f292bd20cc9b68de6adac009f94661fe5f2c62","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":15,"deletions":59,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -57,27 +57,20 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n- * Note that this controller does not extend AbstractController, hence does not provide any Spring's Transactional logic\n- * at class level.\n+ * Note that this controller does not extend AbstractTransactionalController, hence does not provide any\n+ * Spring's Transactional logic at class level.\n  *\n- * @see AbstractController\n+ * @see AbstractTransactionalController\n  */\n @Component\n public class UserController extends AbstractResourceAssociator<UserTO> {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(UserController.class);\n-\n     @Autowired\n     protected UserDAO userDAO;\n \n@@ -120,13 +113,13 @@ public Long getUserId(final String username) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public int count() {\n         return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n@@ -138,7 +131,7 @@ public int searchCount(final NodeCond searchCondition) throws InvalidSearchCondi\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> list() {\n         List<SyncopeUser> users = userDAO.findAll(\n                 EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n@@ -152,7 +145,7 @@ public List<UserTO> list() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> list(final int page, final int size) {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n@@ -173,26 +166,24 @@ public UserTO readSelf() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public UserTO read(final Long userId) {\n         return binder.getUserTO(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> search(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return search(searchCondition, -1, -1);\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     public List<UserTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n \n-        LOG.debug(\"User search called with condition {}\", searchCondition);\n-\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n@@ -222,8 +213,6 @@ public UserTO createSelf(final UserTO userTO) {\n \n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     public UserTO create(final UserTO userTO) {\n-        LOG.debug(\"User create called with {}\", userTO);\n-\n         Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n         for (MembershipTO membership : userTO.getMemberships()) {\n             requestRoleIds.add(membership.getRoleId());\n@@ -260,9 +249,6 @@ protected UserTO doCreate(final UserTO userTO) {\n \n         final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n         savedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return created user\\n{}\", savedTO);\n-\n         return savedTO;\n     }\n \n@@ -280,8 +266,6 @@ public UserTO updateSelf(final UserMod userMod) {\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     public UserTO update(final UserMod userMod) {\n-        LOG.debug(\"User update called with {}\", userMod);\n-\n         // AttributableMod transformation (if configured)\n         UserMod actual = attrTransformer.transform(userMod);\n         LOG.debug(\"Transformed: {}\", actual);\n@@ -303,9 +287,6 @@ public UserTO update(final UserMod userMod) {\n \n         final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n-\n         return updatedTO;\n     }\n \n@@ -332,10 +313,8 @@ protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, fina\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO status(final StatusMod statusMod) {\n-        LOG.debug(\"About to mod status {}\", statusMod);\n-\n         SyncopeUser user = binder.getUserFromId(statusMod.getId());\n \n         WorkflowResult<Long> updated;\n@@ -362,9 +341,6 @@ public UserTO status(final StatusMod statusMod) {\n \n         final UserTO savedTO = binder.getUserTO(updated.getResult());\n         savedTO.getPropagationStatusTOs().addAll(propReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", savedTO);\n-\n         return savedTO;\n     }\n \n@@ -378,8 +354,6 @@ public UserTO deleteSelf() {\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     public UserTO delete(final Long userId) {\n-        LOG.debug(\"User delete called for {}\", userId);\n-\n         List<SyncopeRole> ownedRoles = roleDAO.findOwnedByUser(userId);\n         if (!ownedRoles.isEmpty()) {\n             List<String> owned = new ArrayList<String>(ownedRoles.size());\n@@ -397,7 +371,6 @@ public UserTO delete(final Long userId) {\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-\n         List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n \n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n@@ -421,8 +394,6 @@ public UserTO delete(final Long userId) {\n         }\n         deletedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n \n-        LOG.debug(\"User successfully deleted: {}\", userId);\n-\n         return deletedTO;\n     }\n \n@@ -431,8 +402,6 @@ public UserTO delete(final Long userId) {\n             + \"(#bulkAction.operation == #bulkAction.operation.REACTIVATE or \"\n             + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n     public BulkActionRes bulk(final BulkAction bulkAction) {\n-        LOG.debug(\"Bulk '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n-\n         BulkActionRes res = new BulkActionRes();\n \n         switch (bulkAction.getOperation()) {\n@@ -482,31 +451,23 @@ public BulkActionRes bulk(final BulkAction bulkAction) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO unlink(final Long userId, final Collection<String> resources) {\n-        LOG.debug(\"About to unlink user({}) and resources {}\", userId, resources);\n-\n         final UserMod userMod = new UserMod();\n         userMod.setId(userId);\n \n         userMod.getResourcesToRemove().addAll(resources);\n \n         WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n \n-        final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n-\n-        return updatedTO;\n+        return binder.getUserTO(updated.getResult().getKey().getId());\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO unassign(final Long userId, final Collection<String> resources) {\n-        LOG.debug(\"About to unassign user({}) and resources {}\", userId, resources);\n-\n         final UserMod userMod = new UserMod();\n         userMod.setId(userId);\n         userMod.getResourcesToRemove().addAll(resources);\n@@ -515,11 +476,9 @@ public UserTO unassign(final Long userId, final Collection<String> resources) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public UserTO deprovision(final Long userId, final Collection<String> resources) {\n-        LOG.debug(\"About to deprovision user({}) from resources {}\", userId, resources);\n-\n         final SyncopeUser user = binder.getUserFromId(userId);\n \n         final Set<String> noPropResourceName = user.getResourceNames();\n@@ -537,9 +496,6 @@ public UserTO deprovision(final Long userId, final Collection<String> resources)\n \n         final UserTO updatedUserTO = binder.getUserTO(user);\n         updatedUserTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", updatedUserTO);\n-\n         return updatedUserTO;\n     }\n "},{"sha":"a11af7208e694aa06ac7cba10e1c700c5153d302","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserWorkflowController.java","status":"modified","additions":13,"deletions":26,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -55,60 +55,51 @@ public class UserWorkflowController extends AbstractTransactionalController<Work\n     protected UserDataBinder binder;\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO claimForm(final String taskId) {\n-        return uwfAdapter.claimForm(taskId,\n-                SecurityContextHolder.getContext().getAuthentication().getName());\n+        return uwfAdapter.claimForm(taskId, SecurityContextHolder.getContext().getAuthentication().getName());\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     public UserTO executeWorkflow(final UserTO userTO, final String taskId) {\n-        LOG.debug(\"About to execute {} on {}\", taskId, userTO.getId());\n-\n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                 new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, null),\n-                updated.getPropByRes(), updated.getPerformedTasks()));\n+                        new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, null),\n+                        updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks);\n \n-        final UserTO savedTO = binder.getUserTO(updated.getResult());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", savedTO);\n-\n-        return savedTO;\n+        return binder.getUserTO(updated.getResult());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public WorkflowFormTO getFormForUser(final Long userId) {\n         SyncopeUser user = binder.getUserFromId(userId);\n         return uwfAdapter.getForm(user.getWorkflowId());\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms() {\n         return uwfAdapter.getForms();\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public List<WorkflowFormTO> getForms(final Long userId, final String formName) {\n         SyncopeUser user = binder.getUserFromId(userId);\n         return uwfAdapter.getForms(user.getWorkflowId(), formName);\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(final WorkflowFormTO form) {\n-        LOG.debug(\"About to process form {}\", form);\n-\n         WorkflowResult<? extends AbstractAttributableMod> updated =\n                 uwfAdapter.submitForm(form, SecurityContextHolder.getContext().getAuthentication().getName());\n \n@@ -119,18 +110,14 @@ public UserTO submitForm(final WorkflowFormTO form) {\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                     new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                    new AbstractMap.SimpleEntry<UserMod, Boolean>((UserMod) updated.getResult(), Boolean.TRUE),\n-                    updated.getPropByRes(),\n-                    updated.getPerformedTasks()));\n+                            new AbstractMap.SimpleEntry<UserMod, Boolean>((UserMod) updated.getResult(), Boolean.TRUE),\n+                            updated.getPropByRes(),\n+                            updated.getPerformedTasks()));\n \n             taskExecutor.execute(tasks);\n         }\n \n-        final UserTO savedTO = binder.getUserTO(updated.getResult().getId());\n-\n-        LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n-\n-        return savedTO;\n+        return binder.getUserTO(updated.getResult().getId());\n     }\n \n     @Override"},{"sha":"487509ffb37508771cb54e99bfba5a091311646b","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=90bb4fd71f26791b70b1181b0d7d5f7d0ef34e1a","patch":"@@ -39,11 +39,10 @@ under the License.\n   <aop:aspectj-autoproxy/>\n   \n   <context:component-scan base-package=\"org.apache.syncope.core.rest.controller\"/>\n+  <bean class=\"org.apache.syncope.core.rest.controller.ControllerHandler\"/>\n \n   <!-- CXF Configuration - BEGIN -->\n-  <context:component-scan base-package=\"org.apache.syncope.core.services\"/>\n-  \n-  <bean id=\"controllerHandler\" name=\"controllerHandler\" class=\"org.apache.syncope.core.services.ControllerHandler\" />\n+  <context:component-scan base-package=\"org.apache.syncope.core.services\"/>  \n \n   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n     <property name=\"namespacePrefixes\">"}]}