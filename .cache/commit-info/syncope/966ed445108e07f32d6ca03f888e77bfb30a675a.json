{"sha":"966ed445108e07f32d6ca03f888e77bfb30a675a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk2NmVkNDQ1MTA4ZTA3ZjMyZDZjYTAzZjg4OGU3N2JmYjMwYTY3NWE=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-09-03T10:23:51Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-09-03T10:23:51Z"},"message":"Fixes issue SYNCOPE-51 and SYNCOPE-100 special thanks to Bob and Massimiliano\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1380190 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e07d700a1ff6830c3797a5cc40337a8e68c397b4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e07d700a1ff6830c3797a5cc40337a8e68c397b4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/966ed445108e07f32d6ca03f888e77bfb30a675a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/966ed445108e07f32d6ca03f888e77bfb30a675a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/966ed445108e07f32d6ca03f888e77bfb30a675a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/966ed445108e07f32d6ca03f888e77bfb30a675a/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"b845ad3c7a8a4632af7207129224b86049a45ddc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b845ad3c7a8a4632af7207129224b86049a45ddc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b845ad3c7a8a4632af7207129224b86049a45ddc"}],"stats":{"total":536,"additions":419,"deletions":117},"files":[{"sha":"40ce764077bd0fa09a706ae87464d3c861a9b71f","filename":"archetype/src/main/resources/archetype-resources/core/src/main/resources/security.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n adminUser=admin\n-adminMD5Password=5f4dcc3b5aa765d61d8327deb882cf99\n+adminPassword=5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\n+adminPasswordAlgorithm=SHA1"},{"sha":"40ce764077bd0fa09a706ae87464d3c861a9b71f","filename":"archetype/src/main/resources/archetype-resources/core/src/test/resources/security.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n adminUser=admin\n-adminMD5Password=5f4dcc3b5aa765d61d8327deb882cf99\n+adminPassword=5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\n+adminPasswordAlgorithm=SHA1"},{"sha":"d3240706d26f611e83dabafd95d86618a3bb1e4f","filename":"client/src/main/java/org/apache/syncope/types/CipherAlgorithm.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FCipherAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FCipherAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FCipherAlgorithm.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -20,10 +20,13 @@\n \n public enum CipherAlgorithm {\n \n-    MD5(\"MD5\"),\n     SHA1(\"SHA-1\"),\n     SHA256(\"SHA-256\"),\n-    AES(\"AES\");\n+    AES(\"AES\"),\n+    SMD5(\"S-MD5\"),\n+    SSHA1(\"S-SHA-1\"),\n+    SSHA256(\"S-SHA-256\"),\n+    BCRYPT(\"BCRYPT\");\n \n     final private String algorithm;\n "},{"sha":"cf29fb8debf6403123f144c5c17fe2d49aeb5f71","filename":"core/pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -274,6 +274,12 @@ under the License.\n       <groupId>org.connid</groupId>\n       <artifactId>framework-internal</artifactId>\n     </dependency>\n+    \n+    <dependency>\n+      <groupId>org.jasypt</groupId>\n+      <artifactId>jasypt</artifactId>\n+      <version>${jasypt.version}</version>\n+    </dependency> \n \n     <!-- TEST -->\n     <dependency>\n@@ -669,6 +675,7 @@ under the License.\n                   <skip>false</skip>\n                   <includes>\n                     <include>**/dao/**Test.java</include>\n+                    <include>**/security/**Test.java</include>\n                   </includes>\n                   <excludes>\n                     <exclude>**/relationships/**Test.java</exclude>\n@@ -689,6 +696,7 @@ under the License.\n                   </includes>\n                   <excludes>\n                     <exclude>**/dao/**Test.java</exclude>\n+                    <exclude>**/security/**Test.java</exclude>\n                     <exclude>${sureExcludes}</exclude>\n                   </excludes>\n                 </configuration>"},{"sha":"2f25f20efc628315dec08c635550304ec784f30d","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":2,"deletions":51,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -20,7 +20,6 @@\n \n import java.io.UnsupportedEncodingException;\n import java.security.InvalidKeyException;\n-import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n import java.util.Calendar;\n@@ -30,10 +29,8 @@\n import java.util.List;\n import java.util.Set;\n import javax.crypto.BadPaddingException;\n-import javax.crypto.Cipher;\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.spec.SecretKeySpec;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n@@ -56,9 +53,7 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.RandomStringUtils;\n-import org.springframework.security.crypto.codec.Base64;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -67,6 +62,7 @@\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.validation.entity.SyncopeUserCheck;\n+import org.apache.syncope.core.security.PasswordEncoder;\n import org.apache.syncope.types.CipherAlgorithm;\n \n @Entity\n@@ -76,16 +72,6 @@ public class SyncopeUser extends AbstractAttributable {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n \n-    private static SecretKeySpec keySpec;\n-\n-    static {\n-        try {\n-            keySpec = new SecretKeySpec(ArrayUtils.subarray(\"1abcdefghilmnopqrstuvz2!\".getBytes(\"UTF8\"), 0, 16), \"AES\");\n-        } catch (Exception e) {\n-            LOG.error(\"Error during key specification\", e);\n-        }\n-    }\n-\n     @Id\n     private Long id;\n \n@@ -514,42 +500,7 @@ private String encodePassword(final String password, final CipherAlgorithm ciphe\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n-        String encodedPassword = null;\n-\n-        if (password != null) {\n-            if (cipherAlgoritm == null || cipherAlgoritm == CipherAlgorithm.AES) {\n-\n-                final byte[] cleartext = password.getBytes(\"UTF8\");\n-\n-                final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n-\n-                cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n-\n-                byte[] encoded = cipher.doFinal(cleartext);\n-\n-                encodedPassword = new String(Base64.encode(encoded));\n-            } else {\n-                MessageDigest algorithm = MessageDigest.getInstance(cipherAlgoritm.getAlgorithm());\n-\n-                algorithm.reset();\n-                algorithm.update(password.getBytes());\n-\n-                byte[] messageDigest = algorithm.digest();\n-\n-                StringBuilder hexString = new StringBuilder();\n-                for (int i = 0; i < messageDigest.length; i++) {\n-                    String hex = Integer.toHexString(0xff & messageDigest[i]);\n-                    if (hex.length() == 1) {\n-                        hexString.append('0');\n-                    }\n-                    hexString.append(hex);\n-                }\n-\n-                encodedPassword = hexString.toString();\n-            }\n-        }\n-\n-        return encodedPassword;\n+        return PasswordEncoder.encodePassword(password, cipherAlgoritm);\n     }\n \n     public boolean verifyPasswordHistory(final String password, final int size) {"},{"sha":"c978c8860e6da54ba23a4cd566619a28efb9dbd2","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":40,"deletions":14,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.security.PasswordEncoder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n@@ -95,22 +96,14 @@ public SyncopeUser getUserFromId(final Long userId)\n     public boolean verifyPassword(final String username, final String password)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = getUserFromUsername(username);\n-\n-        SyncopeUser passwordUser = new SyncopeUser();\n-        passwordUser.setPassword(password, user.getCipherAlgoritm(), 0);\n-\n-        return user.getPassword().equalsIgnoreCase(passwordUser.getPassword());\n+        return verifyPassword(getUserFromUsername(username), password);\n     }\n \n     @Transactional(readOnly = true)\n     public boolean verifyPassword(final SyncopeUser user, final String password)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser passwordUser = new SyncopeUser();\n-        passwordUser.setPassword(password, user.getCipherAlgoritm(), 0);\n-\n-        return user.getPassword().equalsIgnoreCase(passwordUser.getPassword());\n+        return PasswordEncoder.verifyPassword(password, user.getCipherAlgoritm(), user.getPassword());\n     }\n \n     @Transactional(readOnly = true)\n@@ -137,8 +130,23 @@ public SyncopeUser getUserFromUsername(final String username)\n         return user;\n     }\n \n-    private CipherAlgorithm getCipherAlgoritm() {\n-        return CipherAlgorithm.valueOf(confDAO.find(\"password.cipher.algorithm\", \"AES\").getValue());\n+    /**\n+     * Get pre-configured password cipher algorithm.\n+     *\n+     * @return cipher algorithm.\n+     * @throws NotFoundException in case of algorithm not included into\n+     * <code>CipherAlgorithm</code>.\n+     */\n+    private CipherAlgorithm getCipherAlgoritm()\n+            throws NotFoundException {\n+\n+        final String algorithm = confDAO.find(\"password.cipher.algorithm\", \"AES\").getValue();\n+\n+        try {\n+            return CipherAlgorithm.valueOf(algorithm);\n+        } catch (IllegalArgumentException e) {\n+            throw new NotFoundException(\"Cipher algorithm \" + algorithm);\n+        }\n     }\n \n     public void create(final SyncopeUser user, final UserTO userTO)\n@@ -191,7 +199,16 @@ public void create(final SyncopeUser user, final UserTO userTO)\n         if (userTO.getPassword() == null || userTO.getPassword().isEmpty()) {\n             LOG.error(\"No password provided\");\n         } else {\n-            user.setPassword(userTO.getPassword(), getCipherAlgoritm(), passwordHistorySize);\n+            try {\n+                user.setPassword(userTO.getPassword(), getCipherAlgoritm(), passwordHistorySize);\n+            } catch (NotFoundException e) {\n+                final SyncopeClientException invalidAlgorith =\n+                        new SyncopeClientException(SyncopeClientExceptionType.NotFound);\n+                invalidAlgorith.addElement(e.getMessage());\n+                scce.addException(invalidAlgorith);\n+\n+                throw scce;\n+            }\n         }\n \n         // set username\n@@ -233,7 +250,16 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n                 // ignore exceptions\n             }\n \n-            user.setPassword(userMod.getPassword(), getCipherAlgoritm(), passwordHistorySize);\n+            try {\n+                user.setPassword(userMod.getPassword(), getCipherAlgoritm(), passwordHistorySize);\n+            } catch (NotFoundException e) {\n+                final SyncopeClientException invalidAlgorith =\n+                        new SyncopeClientException(SyncopeClientExceptionType.NotFound);\n+                invalidAlgorith.addElement(e.getMessage());\n+                scce.addException(invalidAlgorith);\n+\n+                throw scce;\n+            }\n \n             user.setChangePwdDate(new Date());\n "},{"sha":"9f554f821846ab8d621aca8b032841ad90a0f707","filename":"core/src/main/java/org/apache/syncope/core/security/EncodePasswordCLI.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.security;\n+\n+import java.util.Arrays;\n+import org.apache.syncope.types.CipherAlgorithm;\n+\n+/**\n+ * Command line version of encoder to encode the admin password\n+ */\n+public class EncodePasswordCLI {\n+\n+    /**\n+     * @param args\n+     */\n+    public static void main(String[] args)\n+            throws Exception {\n+\n+        if (args.length != 2) {\n+            usage();\n+            System.exit(0);\n+        }\n+\n+        if (CipherAlgorithm.valueOf(args[1]).getAlgorithm().isEmpty()) {\n+            System.out.println(\"Unsupported algorithm \" + args[1]);\n+            usage();\n+            System.exit(0);\n+        }\n+\n+        System.out.println(\"Encoding password '\" + args[0] + \"' with \" + args[1]);\n+        System.out.println(PasswordEncoder.encodePassword(args[0], CipherAlgorithm.valueOf(args[1])));\n+    }\n+\n+    private static void usage() {\n+        System.out.println(\"Usage: EncodePassword <password> <algorithm>\");\n+        System.out.println(\"Supported algorithms:\" + Arrays.toString(CipherAlgorithm.values()));\n+    }\n+}"},{"sha":"ac96f54af9e688617ff73e5efd15e8f855c098ac","filename":"core/src/main/java/org/apache/syncope/core/security/PasswordEncoder.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoder.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.security;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.SecretKeySpec;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.syncope.types.CipherAlgorithm;\n+import org.jasypt.digest.StandardStringDigester;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.crypto.bcrypt.BCrypt;\n+import org.springframework.security.crypto.codec.Base64;\n+\n+/**\n+ * TODO: Description of the class.\n+ *\n+ * @author bl\n+ *\n+ * @since\n+ *\n+ */\n+public class PasswordEncoder {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(PasswordEncoder.class);\n+\n+    private static SecretKeySpec keySpec;\n+\n+    static {\n+        try {\n+            keySpec = new SecretKeySpec(ArrayUtils.subarray(\"1abcdefghilmnopqrstuvz2!\".getBytes(\"UTF8\"), 0, 16), \"AES\");\n+        } catch (Exception e) {\n+            LOG.error(\"Error during key specification\", e);\n+        }\n+    }\n+\n+    public static String encodePassword(final String password, final CipherAlgorithm cipherAlgorithm)\n+            throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n+            IllegalBlockSizeException, BadPaddingException {\n+\n+        String encodedPassword = null;\n+\n+        if (password != null) {\n+            if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n+\n+                final byte[] cleartext = password.getBytes(\"UTF8\");\n+\n+                final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n+                cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n+                byte[] encoded = cipher.doFinal(cleartext);\n+\n+                encodedPassword = new String(Base64.encode(encoded));\n+            } else if (cipherAlgorithm.getAlgorithm().equals(\"BCRYPT\")) {\n+                encodedPassword = BCrypt.hashpw(password, BCrypt.gensalt());\n+            } else {\n+                encodedPassword = getDigester(cipherAlgorithm).digest(password);\n+\n+            }\n+        }\n+\n+        return encodedPassword;\n+    }\n+\n+    public static boolean verifyPassword(String password, CipherAlgorithm cipherAlgorithm, String digestedPassword) {\n+\n+        boolean res = false;\n+\n+        try {\n+            if (password != null) {\n+                if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n+\n+                    final byte[] cleartext = password.getBytes(\"UTF8\");\n+\n+                    final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n+                    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n+                    byte[] encoded = cipher.doFinal(cleartext);\n+\n+                    res = new String(Base64.encode(encoded)).equals(digestedPassword);\n+                } else if (cipherAlgorithm.getAlgorithm().equals(\"BCRYPT\")) {\n+                    res = BCrypt.checkpw(password, digestedPassword);\n+                } else {\n+                    res = getDigester(cipherAlgorithm).matches(password, digestedPassword);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Could not verify password\", e);\n+        }\n+\n+        return res;\n+    }\n+\n+    private static StandardStringDigester getDigester(CipherAlgorithm cipherAlgorithm) {\n+        StandardStringDigester digester = new StandardStringDigester();\n+\n+        if (cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n+            // Salted ...\n+            digester.setAlgorithm(cipherAlgorithm.getAlgorithm().replaceFirst(\"S\\\\-\", \"\"));\n+            digester.setIterations(100000);\n+            digester.setSaltSizeBytes(16);\n+        } else {\n+            // Not salted ...\n+            digester.setAlgorithm(cipherAlgorithm.getAlgorithm());\n+            digester.setIterations(1);\n+            digester.setSaltSizeBytes(0);\n+\n+        }\n+\n+        digester.setStringOutputType(\"hexadecimal\");\n+        return digester;\n+    }\n+}"},{"sha":"c4e2de0eedbe67d5b5f3bf86bbe536e69aab0aaa","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":44,"deletions":19,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -19,24 +19,24 @@\n package org.apache.syncope.core.security;\n \n import java.util.Date;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.types.AuditElements.AuthenticationSubCategory;\n+import org.apache.syncope.types.AuditElements.Category;\n+import org.apache.syncope.types.AuditElements.Result;\n+import org.apache.syncope.types.CipherAlgorithm;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.security.authentication.AuthenticationProvider;\n import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.types.CipherAlgorithm;\n-import org.apache.syncope.types.AuditElements.AuthenticationSubCategory;\n-import org.apache.syncope.types.AuditElements.Category;\n-import org.apache.syncope.types.AuditElements.Result;\n-import org.springframework.security.authentication.DisabledException;\n \n @Configurable\n public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n@@ -56,21 +56,43 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n \n     private String adminUser;\n \n-    private String adminMD5Password;\n+    private String adminPassword;\n \n-    public String getAdminMD5Password() {\n-        return adminMD5Password;\n+    /**\n+     * @return the adminPassword\n+     */\n+    public String getAdminPassword() {\n+        return adminPassword;\n     }\n \n-    public void setAdminMD5Password(String adminMD5Password) {\n-        this.adminMD5Password = adminMD5Password;\n+    /**\n+     * @param adminPassword the adminPassword to set\n+     */\n+    public void setAdminPassword(final String adminPassword) {\n+        this.adminPassword = adminPassword;\n     }\n \n+    /**\n+     * @return the adminPasswordAlgorithm\n+     */\n+    public String getAdminPasswordAlgorithm() {\n+        return adminPasswordAlgorithm;\n+    }\n+\n+    /**\n+     * @param adminPasswordAlgorithm the adminPasswordAlgorithm to set\n+     */\n+    public void setAdminPasswordAlgorithm(final String adminPasswordAlgorithm) {\n+        this.adminPasswordAlgorithm = adminPasswordAlgorithm;\n+    }\n+\n+    private String adminPasswordAlgorithm;\n+\n     public String getAdminUser() {\n         return adminUser;\n     }\n \n-    public void setAdminUser(String adminUser) {\n+    public void setAdminUser(final String adminUser) {\n         this.adminUser = adminUser;\n     }\n \n@@ -95,18 +117,21 @@ public Authentication authenticate(final Authentication authentication)\n         String username = authentication.getPrincipal().toString();\n \n         if (adminUser.equals(username)) {\n-            passwordUser.setPassword(authentication.getCredentials().toString(), CipherAlgorithm.MD5, 0);\n-            authenticated = adminMD5Password.equalsIgnoreCase(passwordUser.getPassword());\n+            authenticated = PasswordEncoder.verifyPassword(\n+                    authentication.getCredentials().toString(),\n+                    CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n+                    adminPassword);\n         } else {\n             user = userDAO.find(username);\n \n             if (user != null) {\n                 if (user.getSuspended()) {\n                     throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n                 }\n-\n-                passwordUser.setPassword(authentication.getCredentials().toString(), user.getCipherAlgoritm(), 0);\n-                authenticated = user.getPassword().equalsIgnoreCase(passwordUser.getPassword());\n+                authenticated = PasswordEncoder.verifyPassword(\n+                        authentication.getCredentials().toString(),\n+                        user.getCipherAlgoritm(),\n+                        user.getPassword());\n             }\n         }\n "},{"sha":"e7a34114ff6001e6e0a67042ca85a2f0861d0dc9","filename":"core/src/main/java/org/apache/syncope/core/workflow/NoOpUserWorkflowAdapter.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -37,11 +37,11 @@\n /**\n  * Simple implementation basically not involving any workflow engine.\n  */\n-@Transactional(rollbackFor = { Throwable.class })\n+@Transactional(rollbackFor = {Throwable.class})\n public class NoOpUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n-    private static final List<String> TASKS = Arrays.asList(new String[] { \"create\", \"activate\", \"update\", \"suspend\",\n-            \"reactivate\", \"delete\" });\n+    private static final List<String> TASKS = Arrays.asList(new String[]{\"create\", \"activate\", \"update\", \"suspend\",\n+                \"reactivate\", \"delete\"});\n \n     public static final String ENABLED = \"enabled\";\n \n@@ -53,7 +53,8 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n \n     @Override\n     public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n-            final Boolean enabled) throws WorkflowException {\n+            final Boolean enabled)\n+            throws WorkflowException {\n \n         SyncopeUser user = new SyncopeUser();\n         dataBinder.create(user, userTO);\n@@ -88,7 +89,8 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n     }\n \n     @Override\n-    protected WorkflowResult<Long> doActivate(final SyncopeUser user, final String token) throws WorkflowException {\n+    protected WorkflowResult<Long> doActivate(final SyncopeUser user, final String token)\n+            throws WorkflowException {\n \n         if (!user.checkToken(token)) {\n             throw new WorkflowException(new RuntimeException(\"Wrong token: \" + token));\n@@ -114,7 +116,8 @@ protected WorkflowResult<Map.Entry<Long, Boolean>> doUpdate(final SyncopeUser us\n     }\n \n     @Override\n-    protected WorkflowResult<Long> doSuspend(final SyncopeUser user) throws WorkflowException {\n+    protected WorkflowResult<Long> doSuspend(final SyncopeUser user)\n+            throws WorkflowException {\n \n         user.setStatus(\"suspended\");\n         SyncopeUser updated = userDAO.save(user);\n@@ -123,7 +126,8 @@ protected WorkflowResult<Long> doSuspend(final SyncopeUser user) throws Workflow\n     }\n \n     @Override\n-    protected WorkflowResult<Long> doReactivate(final SyncopeUser user) throws WorkflowException {\n+    protected WorkflowResult<Long> doReactivate(final SyncopeUser user)\n+            throws WorkflowException {\n \n         user.setStatus(\"active\");\n         SyncopeUser updated = userDAO.save(user);\n@@ -132,7 +136,8 @@ protected WorkflowResult<Long> doReactivate(final SyncopeUser user) throws Workf\n     }\n \n     @Override\n-    protected void doDelete(final SyncopeUser user) throws WorkflowException {\n+    protected void doDelete(final SyncopeUser user)\n+            throws WorkflowException {\n \n         userDAO.delete(user);\n     }\n@@ -145,19 +150,22 @@ public WorkflowResult<Long> execute(final UserTO userTO, final String taskId)\n     }\n \n     @Override\n-    public WorkflowDefinitionTO getDefinition() throws WorkflowException {\n+    public WorkflowDefinitionTO getDefinition()\n+            throws WorkflowException {\n \n         return new WorkflowDefinitionTO();\n     }\n \n     @Override\n-    public void updateDefinition(final WorkflowDefinitionTO definition) throws NotFoundException, WorkflowException {\n+    public void updateDefinition(final WorkflowDefinitionTO definition)\n+            throws NotFoundException, WorkflowException {\n \n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n \n     @Override\n-    public List<String> getDefinedTasks() throws WorkflowException {\n+    public List<String> getDefinedTasks()\n+            throws WorkflowException {\n \n         return TASKS;\n     }\n@@ -168,7 +176,8 @@ public List<WorkflowFormTO> getForms() {\n     }\n \n     @Override\n-    public WorkflowFormTO getForm(final String workflowId) throws NotFoundException, WorkflowException {\n+    public WorkflowFormTO getForm(final String workflowId)\n+            throws NotFoundException, WorkflowException {\n \n         return null;\n     }"},{"sha":"21b643383eeac614a55bf013b07b116384b84cb6","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -24,7 +24,7 @@ under the License.\n   <SyncopeConf confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n   <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n   <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n-  <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"MD5\"/>\n+  <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"SHA1\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"false\"/>\n     \n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"Global Sync Policy\" type=\"GLOBAL_SYNC\""},{"sha":"40ce764077bd0fa09a706ae87464d3c861a9b71f","filename":"core/src/main/resources/security.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n adminUser=admin\n-adminMD5Password=5f4dcc3b5aa765d61d8327deb882cf99\n+adminPassword=5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\n+adminPasswordAlgorithm=SHA1"},{"sha":"5ffb922ac060c6bdfaaa765452b58223d0a5f959","filename":"core/src/main/resources/securityContext.xml","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -36,14 +36,15 @@ under the License.\n   </security:http>\n \n   <bean id=\"syncopeUserDetailsService\"\n-          class=\"org.apache.syncope.core.security.SyncopeUserDetailsService\">\n+        class=\"org.apache.syncope.core.security.SyncopeUserDetailsService\">\n     <property name=\"adminUser\" value=\"${adminUser}\"/>\n   </bean>\n \n   <bean id=\"syncopeAuthenticationProvider\"\n-          class=\"org.apache.syncope.core.security.SyncopeAuthenticationProvider\">\n+        class=\"org.apache.syncope.core.security.SyncopeAuthenticationProvider\">\n     <property name=\"adminUser\" value=\"${adminUser}\"/>\n-    <property name=\"adminMD5Password\" value=\"${adminMD5Password}\"/>\n+    <property name=\"adminPassword\" value=\"${adminPassword}\"/>\n+    <property name=\"adminPasswordAlgorithm\" value=\"${adminPasswordAlgorithm}\"/>\n     <property name=\"syncopeUserDetailsService\" ref=\"syncopeUserDetailsService\"/>\n   </bean>\n "},{"sha":"2ff2914b5e26fc5f1f83a53e1dae8b23e7a99af3","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":36,"deletions":6,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.client.to.MembershipTO;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.search.ResourceCond;\n+import org.apache.syncope.client.to.ConfigurationTO;\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.PasswordPolicyTO;\n import org.apache.syncope.client.to.PolicyTO;\n@@ -552,8 +553,7 @@ public void create() {\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n-        Boolean verify = restTemplate.\n-                getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=password123\",\n+        Boolean verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=password123\",\n                 Boolean.class, newUserTO.getUsername());\n         assertTrue(verify);\n \n@@ -869,8 +869,7 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = Arrays.\n-                asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n+        users = Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n@@ -1122,7 +1121,7 @@ public void update() {\n         assertNotNull(userTO);\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n-        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5, 0);\n+        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.SHA1, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         assertEquals(1, userTO.getMemberships().size());\n@@ -1174,7 +1173,7 @@ public void updatePasswordOnly() {\n         assertNotNull(userTO.getChangePwdDate());\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n-        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5, 0);\n+        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.SHA1, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         List<PropagationTaskTO> afterTasks = Arrays.asList(restTemplate.getForObject(\n@@ -2000,4 +1999,35 @@ public void issueSYNCOPE185() {\n         }\n         assertNotNull(sce);\n     }\n+\n+    @Test()\n+    public void issueSYNCOPE51() {\n+        ConfigurationTO defaultConfigurationTO = restTemplate.getForObject(\n+                BASE_URL + \"configuration/read/{key}.json\", ConfigurationTO.class, \"password.cipher.algorithm\");\n+\n+        ConfigurationTO configurationTO = new ConfigurationTO();\n+        configurationTO.setKey(\"password.cipher.algorithm\");\n+        configurationTO.setValue(\"MD5\");\n+\n+        ConfigurationTO newConfTO =\n+                restTemplate.postForObject(BASE_URL + \"configuration/update\", configurationTO, ConfigurationTO.class);\n+\n+        assertEquals(configurationTO, newConfTO);\n+\n+        UserTO userTO = getSampleTO(\"syncope51@syncope.apache.org\");\n+        userTO.setPassword(\"password\");\n+\n+        try {\n+            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            assertTrue(\n+                    e.getException(SyncopeClientExceptionType.NotFound).getElements().iterator().next().contains(\"MD5\"));\n+        }\n+\n+        ConfigurationTO oldConfTO = restTemplate.postForObject(\n+                BASE_URL + \"configuration/update\", defaultConfigurationTO, ConfigurationTO.class);\n+\n+        assertEquals(defaultConfigurationTO, oldConfTO);\n+    }\n }"},{"sha":"74d36d8e3c6e87bb841df7f75f072e068aa78f6d","filename":"core/src/test/java/org/apache/syncope/core/security/PasswordEncoderTest.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.security;\n+\n+import static org.junit.Assert.*;\n+import org.apache.syncope.types.CipherAlgorithm;\n+import org.junit.Test;\n+\n+/**\n+ * Testclass to test all encryption algorithms.\n+ */\n+public class PasswordEncoderTest {\n+\n+    private final String password = \"password\";\n+    \n+    /**\n+     * Verify all algorithms\n+     */\n+    @Test\n+    public void testEncoder()\n+            throws Exception {\n+\n+        for (CipherAlgorithm cipherAlgorithm : CipherAlgorithm.values()) {\n+            final String encPassword = PasswordEncoder.encodePassword(password, cipherAlgorithm);\n+\n+            assertNotNull(encPassword);\n+            assertTrue(PasswordEncoder.verifyPassword(password, cipherAlgorithm, encPassword));\n+            assertFalse(PasswordEncoder.verifyPassword(\"pass\", cipherAlgorithm, encPassword));\n+\n+            // check that same password encoded with BCRYPT or Salted versions results in different digest\n+            if (cipherAlgorithm.equals(CipherAlgorithm.BCRYPT) || cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n+                final String encSamePassword = PasswordEncoder.encodePassword(password, cipherAlgorithm);\n+                assertNotNull(encSamePassword);\n+                assertFalse(encSamePassword.equals(encPassword));\n+                assertTrue(PasswordEncoder.verifyPassword(password, cipherAlgorithm, encSamePassword));\n+            }\n+        }\n+\n+    }\n+}"},{"sha":"c83014027ea9dcb68ad32fc11eb5cfa78c2846cc","filename":"core/src/test/resources/content.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -24,7 +24,7 @@ under the License.\n   <SyncopeConf confKey=\"smtp.host\" confValue=\"not-existing\"/>\n   <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n   <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n-  <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"MD5\"/>\n+  <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"SHA1\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n \n   <!-- sample policies -->\n@@ -36,13 +36,13 @@ under the License.\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3Corg.apache.syncope.types.AccountPolicySpec%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E4%3C%2FminLength%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A++%3CallUpperCase%3Efalse%3C%2FallUpperCase%3E%0A++%3CallLowerCase%3Efalse%3C%2FallLowerCase%3E%0A++%3CpropagateSuspension%3Efalse%3C%2FpropagateSuspension%3E%0A++%3CpermittedLoginRetries%3E3%3C%2FpermittedLoginRetries%3E%0A%3C%2Forg.apache.syncope.types.AccountPolicySpec%3E\"/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%2F%3E\"/>\n     \n-  <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+  <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user1\" creationDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+  <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user2\" creationDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeUser id=\"3\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+  <SyncopeUser id=\"3\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user3\" creationDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeUser id=\"4\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+  <SyncopeUser id=\"4\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                username=\"user4\" creationDate=\"2010-10-20 11:00:00\"/>\n \n   <SyncopeRole id=\"1\" name=\"root\"/>"},{"sha":"40ce764077bd0fa09a706ae87464d3c861a9b71f","filename":"core/src/test/resources/security.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/core%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n adminUser=admin\n-adminMD5Password=5f4dcc3b5aa765d61d8327deb882cf99\n+adminPassword=5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\n+adminPasswordAlgorithm=SHA1"},{"sha":"9ce0a4677e815c7764b24cd417b9a40d005358a8","filename":"pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/966ed445108e07f32d6ca03f888e77bfb30a675a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/966ed445108e07f32d6ca03f888e77bfb30a675a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=966ed445108e07f32d6ca03f888e77bfb30a675a","patch":"@@ -273,6 +273,8 @@ under the License.\n     <apacheds.version>1.5.7</apacheds.version>\n \n     <tomcat.version>7.0.29</tomcat.version>\n+\n+    <jasypt.version>1.9.0</jasypt.version>\n  \n     <bundles.directory>${project.build.directory}/bundles</bundles.directory>\n     <log.directory>${project.build.directory}/log</log.directory>"}]}