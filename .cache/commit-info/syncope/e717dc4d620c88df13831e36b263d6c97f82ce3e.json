{"sha":"e717dc4d620c88df13831e36b263d6c97f82ce3e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU3MTdkYzRkNjIwYzg4ZGYxMzgzMWUzNmIyNjNkNmM5N2Y4MmNlM2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-24T13:29:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-24T13:29:39Z"},"message":"[SYNCOPE-354] ResourceOperation.DELETE not always resolve to delete() on connector, it might also become update() - removing the condition from LDAPMembershipSyncActions\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1471403 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"21fbf2d2b5f27e2922b73db47ab0d621673d883b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/21fbf2d2b5f27e2922b73db47ab0d621673d883b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e717dc4d620c88df13831e36b263d6c97f82ce3e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e717dc4d620c88df13831e36b263d6c97f82ce3e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e717dc4d620c88df13831e36b263d6c97f82ce3e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e717dc4d620c88df13831e36b263d6c97f82ce3e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"db5ac6b4368721ee47114ede686718d3175b1a24","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/db5ac6b4368721ee47114ede686718d3175b1a24","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/db5ac6b4368721ee47114ede686718d3175b1a24"}],"stats":{"total":116,"additions":86,"deletions":30},"files":[{"sha":"6f8b2479b251bceb0ede3c79124004e41fd77cce","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/LDAPMembershipPropagationActions.java","status":"modified","additions":19,"deletions":26,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e717dc4d620c88df13831e36b263d6c97f82ce3e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e717dc4d620c88df13831e36b263d6c97f82ce3e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FLDAPMembershipPropagationActions.java?ref=e717dc4d620c88df13831e36b263d6c97f82ce3e","patch":"@@ -27,7 +27,6 @@\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -45,7 +44,7 @@\n /**\n  * Simple action for propagating role memberships to LDAP groups, when the same resource is configured for both users\n  * and roles.\n- * \n+ *\n  * @see org.apache.syncope.core.sync.impl.LDAPMembershipSyncActions\n  */\n public class LDAPMembershipPropagationActions extends DefaultPropagationActions {\n@@ -72,36 +71,30 @@ protected String getGroupMembershipAttrName() {\n     public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n         super.before(task, beforeObj);\n \n-        if (ResourceOperation.DELETE != task.getPropagationOperation()\n-                && AttributableType.USER == task.getSubjectType() && task.getResource().getRmapping() != null) {\n-\n+        if (AttributableType.USER == task.getSubjectType() && task.getResource().getRmapping() != null) {\n             SyncopeUser user = userDAO.find(task.getSubjectId());\n-            if (user == null) {\n-                throw new IllegalArgumentException(\"User \" + task.getSubjectId() + \" not found\");\n-            }\n+            if (user != null) {\n+                List<String> roleAccountLinks = new ArrayList<String>();\n+                for (SyncopeRole role : user.getRoles()) {\n+                    if (role.getResourceNames().contains(task.getResource().getName())\n+                            && StringUtils.isNotBlank(task.getResource().getRmapping().getAccountLink())) {\n \n-            List<String> roleAccountLinks = new ArrayList<String>();\n-            for (SyncopeRole role : user.getRoles()) {\n-                if (role.getResourceNames().contains(task.getResource().getName())\n-                        && StringUtils.isNotBlank(task.getResource().getRmapping().getAccountLink())) {\n+                        LOG.debug(\"Evaluating accountLink for {}\", role);\n \n-                    LOG.debug(\"Evaluating accountLink for {}\", role);\n-\n-                    final JexlContext jexlContext = new MapContext();\n-                    jexlUtil.addFieldsToContext(role, jexlContext);\n-                    jexlUtil.addAttrsToContext(role.getAttributes(), jexlContext);\n-                    jexlUtil.addDerAttrsToContext(role.getDerivedAttributes(), role.getAttributes(), jexlContext);\n-                    final String roleAccountLink = jexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(),\n-                            jexlContext);\n-                    LOG.debug(\"AccountLink for {} is '{}'\", role, roleAccountLink);\n-                    if (StringUtils.isNotBlank(roleAccountLink)) {\n-                        roleAccountLinks.add(roleAccountLink);\n+                        final JexlContext jexlContext = new MapContext();\n+                        jexlUtil.addFieldsToContext(role, jexlContext);\n+                        jexlUtil.addAttrsToContext(role.getAttributes(), jexlContext);\n+                        jexlUtil.addDerAttrsToContext(role.getDerivedAttributes(), role.getAttributes(), jexlContext);\n+                        final String roleAccountLink =\n+                                jexlUtil.evaluate(task.getResource().getRmapping().getAccountLink(), jexlContext);\n+                        LOG.debug(\"AccountLink for {} is '{}'\", role, roleAccountLink);\n+                        if (StringUtils.isNotBlank(roleAccountLink)) {\n+                            roleAccountLinks.add(roleAccountLink);\n+                        }\n                     }\n                 }\n-            }\n-            LOG.debug(\"Role accountLinks to propagate for membership: {}\", roleAccountLinks);\n+                LOG.debug(\"Role accountLinks to propagate for membership: {}\", roleAccountLinks);\n \n-            if (!roleAccountLinks.isEmpty()) {\n                 Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n                 attributes.add(AttributeBuilder.build(getGroupMembershipAttrName(), roleAccountLinks));\n                 task.setAttributes(attributes);"},{"sha":"00ccd34d51b9dee82f2ddb731382bee2ed74988c","filename":"core/src/main/java/org/apache/syncope/core/util/URIUtil.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e717dc4d620c88df13831e36b263d6c97f82ce3e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FURIUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e717dc4d620c88df13831e36b263d6c97f82ce3e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FURIUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FURIUtil.java?ref=e717dc4d620c88df13831e36b263d6c97f82ce3e","patch":"@@ -43,14 +43,14 @@ private URIUtil() {\n     public static URI buildForConnId(final String location) throws MalformedURLException, URISyntaxException {\n         final String candidate = location.trim();\n \n-        if (!location.startsWith(\"file:\")\n-                && !location.startsWith(\"connid:\") && !location.startsWith(\"connids:\")) {\n+        if (!candidate.startsWith(\"file:\")\n+                && !candidate.startsWith(\"connid:\") && !candidate.startsWith(\"connids:\")) {\n \n             throw new IllegalArgumentException(candidate + \" is not a valid URI for file or connid(s) schemes\");\n         }\n \n         URI uri;\n-        if (location.startsWith(\"file:\")) {\n+        if (candidate.startsWith(\"file:\")) {\n             uri = new File(new URL(candidate).getFile()).getAbsoluteFile().toURI();\n         } else {\n             uri = new URI(candidate);"},{"sha":"0437fa2a16cee1f9148ed7e3970dadbb64a777f7","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":64,"deletions":1,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e717dc4d620c88df13831e36b263d6c97f82ce3e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e717dc4d620c88df13831e36b263d6c97f82ce3e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=e717dc4d620c88df13831e36b263d6c97f82ce3e","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.apache.syncope.core.rest.AbstractTest.getUUIDString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n@@ -47,13 +48,15 @@\n import org.apache.syncope.common.to.BulkActionRes.Status;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.PropagationRequestTO;\n import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n@@ -560,7 +563,7 @@ public void createWithReject() {\n         Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());\n \n         UserTO userTO = getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n-        userTO.addResource(\"resource-testdb\");\n+        userTO.addResource(RESOURCE_NAME_TESTDB);\n \n         // User with role 9 are defined in workflow as subject to approval\n         MembershipTO membershipTO = new MembershipTO();\n@@ -2119,6 +2122,66 @@ public void bulkActions() {\n         assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n     }\n \n+    @Test\n+    public void issueSYNCOPE354() {\n+        // change resource-ldap role mapping for including uniqueMember (need for assertions below)\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        for (MappingItemTO item : ldap.getRmapping().getItems()) {\n+            if (\"description\".equals(item.getExtAttrName())) {\n+                item.setExtAttrName(\"uniqueMember\");\n+            }\n+        }\n+        resourceService.update(ldap.getName(), ldap);\n+\n+        // 1. create role with LDAP resource\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"SYNCOPE354-\" + getUUIDString());\n+        roleTO.setParent(8L);\n+        roleTO.addResource(RESOURCE_NAME_LDAP);\n+\n+        roleTO = createRole(roleService, roleTO);\n+        assertNotNull(roleTO);\n+\n+        // 2. create user with LDAP resource and membership of the above role\n+        UserTO userTO = getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n+        userTO.addResource(RESOURCE_NAME_LDAP);\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(roleTO.getId());\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = createUser(userTO);\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        // 3. read role on resource, check that user DN is included in uniqueMember\n+        ConnObjectTO connObj =\n+                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, roleTO.getId());\n+        assertNotNull(connObj);\n+        assertTrue(connObj.getAttributeMap().get(\"uniqueMember\").getValues().\n+                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n+\n+        // 4. remove membership\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.addMembershipToBeRemoved(userTO.getMemberships().iterator().next().getId());\n+\n+        userTO = userService.update(userMod.getId(), userMod);\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        // 5. read role on resource, check that user DN was removed from uniqueMember\n+        connObj = resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.ROLE, roleTO.getId());\n+        assertNotNull(connObj);\n+        assertFalse(connObj.getAttributeMap().get(\"uniqueMember\").getValues().\n+                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n+\n+        // 6. restore original resource-ldap role mapping\n+        for (MappingItemTO item : ldap.getRmapping().getItems()) {\n+            if (\"uniqueMember\".equals(item.getExtAttrName())) {\n+                item.setExtAttrName(\"description\");\n+            }\n+        }\n+        resourceService.update(ldap.getName(), ldap);\n+    }\n+\n     private boolean getBooleanAttribute(ConnObjectTO connObjectTO, String attrName) {\n         return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n     }"}]}