{"sha":"cde6c5bc6ee611b138996ee57cf7fb031a55560c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNkZTZjNWJjNmVlNjExYjEzODk5NmVlNTdjZjdmYjAzMWE1NTU2MGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-26T14:20:03Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-26T14:20:03Z"},"message":"White noise: format","tree":{"sha":"6d66ae712acc04acd9d683f0c1d304d213fae4b8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6d66ae712acc04acd9d683f0c1d304d213fae4b8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cde6c5bc6ee611b138996ee57cf7fb031a55560c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cde6c5bc6ee611b138996ee57cf7fb031a55560c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cde6c5bc6ee611b138996ee57cf7fb031a55560c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cde6c5bc6ee611b138996ee57cf7fb031a55560c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a9e83e85b5dadb24a71b6b0ab12e3ba33fe9800e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9e83e85b5dadb24a71b6b0ab12e3ba33fe9800e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a9e83e85b5dadb24a71b6b0ab12e3ba33fe9800e"}],"stats":{"total":43,"additions":21,"deletions":22},"files":[{"sha":"962edc40d39be6b7af788b8c576a888eda6c06c5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cde6c5bc6ee611b138996ee57cf7fb031a55560c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cde6c5bc6ee611b138996ee57cf7fb031a55560c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=cde6c5bc6ee611b138996ee57cf7fb031a55560c","patch":"@@ -73,30 +73,29 @@ public JobDelegate getDelegate() {\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         try {\n-            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n-                    () -> {\n-                        try {\n-                            ImplementationDAO implementationDAO =\n+            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY), () -> {\n+                try {\n+                    ImplementationDAO implementationDAO =\n                             ApplicationContextProvider.getApplicationContext().getBean(ImplementationDAO.class);\n-                            Implementation implementation = implementationDAO.find(\n-                                    context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n-                            if (implementation == null) {\n-                                LOG.error(\"Could not find Implementation '{}', aborting\",\n-                                        context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n-                            } else {\n-                                delegate = ImplementationManager.<SchedTaskJobDelegate>build(implementation);\n-                                delegate.execute(\n-                                        taskKey,\n-                                        context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n-                                        context);\n-                            }\n-                        } catch (Exception e) {\n-                            LOG.error(\"While executing task {}\", taskKey, e);\n-                            throw new RuntimeException(e);\n-                        }\n+                    Implementation implementation = implementationDAO.find(\n+                            context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n+                    if (implementation == null) {\n+                        LOG.error(\"Could not find Implementation '{}', aborting\",\n+                                context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n+                    } else {\n+                        delegate = ImplementationManager.<SchedTaskJobDelegate>build(implementation);\n+                        delegate.execute(\n+                                taskKey,\n+                                context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),\n+                                context);\n+                    }\n+                } catch (Exception e) {\n+                    LOG.error(\"While executing task {}\", taskKey, e);\n+                    throw new RuntimeException(e);\n+                }\n \n-                        return null;\n-                    });\n+                return null;\n+            });\n         } catch (RuntimeException e) {\n             LOG.error(\"While executing task {}\", taskKey, e);\n             throw new JobExecutionException(\"While executing task \" + taskKey, e);"}]}