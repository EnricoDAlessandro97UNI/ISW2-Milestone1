{"sha":"64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY0YzQxYWE0ZmQ0YWI1YjRlNDgxZDEzZjY3OGIzZjEwZWE0MzgwYmU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-02T15:37:15Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-02T15:37:15Z"},"message":"Added password policy management.\n\nUpdate issue 78\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247110 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"33cd0a42ce5dbe254d9d18134c2c65969789d162","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/33cd0a42ce5dbe254d9d18134c2c65969789d162"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/comments","author":null,"committer":null,"parents":[{"sha":"51cdf7b2afd25703fd4587f54b30e99b8725eaa7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51cdf7b2afd25703fd4587f54b30e99b8725eaa7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51cdf7b2afd25703fd4587f54b30e99b8725eaa7"}],"stats":{"total":708,"additions":526,"deletions":182},"files":[{"sha":"3ff15f26913e8051391e968ce406cfc76867af1c","filename":"client/src/main/java/org/syncope/client/mod/AccountPolicyMod.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -14,22 +14,22 @@\n  */\n package org.syncope.client.mod;\n \n-import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.AccountPolicy;\n \n public class AccountPolicyMod extends PolicyMod {\n \n     private static final long serialVersionUID = 5410030012094184828L;\n \n-    private PasswordPolicy specification;\n+    private AccountPolicy specification;\n \n     public AccountPolicyMod() {\n     }\n \n-    public PasswordPolicy getSpecification() {\n-        return specification;\n+    public void setSpecification(AccountPolicy specification) {\n+        this.specification = specification;\n     }\n \n-    public void setSpecification(PasswordPolicy specification) {\n-        this.specification = specification;\n+    public AccountPolicy getSpecification() {\n+        return specification;\n     }\n }"},{"sha":"9070d4322cc028cf33bbdd8717e18e00bb048345","filename":"client/src/main/java/org/syncope/client/mod/PasswordPolicyMod.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -25,11 +25,11 @@ public class PasswordPolicyMod extends PolicyMod {\n     public PasswordPolicyMod() {\n     }\n \n-    public PasswordPolicy getSpecification() {\n-        return specification;\n-    }\n-\n     public void setSpecification(PasswordPolicy specification) {\n         this.specification = specification;\n     }\n+\n+    public PasswordPolicy getSpecification() {\n+        return specification;\n+    }\n }"},{"sha":"9cdf0e218eaacb7bef26f63a77ddef36f754ce51","filename":"client/src/main/java/org/syncope/client/mod/PolicyMod.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -25,6 +25,8 @@ public abstract class PolicyMod extends AbstractBaseBean {\n \n     private PolicyType type;\n \n+    private String description;\n+\n     public PolicyMod() {\n     }\n \n@@ -43,4 +45,12 @@ public PolicyType getType() {\n     public void setType(PolicyType type) {\n         this.type = type;\n     }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n }"},{"sha":"5630762022dfb205ca28332770629edec0e97c1d","filename":"client/src/main/java/org/syncope/client/mod/RoleMod.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -16,6 +16,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.syncope.client.to.PasswordPolicyTO;\n \n public class RoleMod extends AbstractAttributableMod {\n \n@@ -31,6 +32,8 @@ public class RoleMod extends AbstractAttributableMod {\n \n     private List<String> entitlements;\n \n+    private PasswordPolicyTO passwordPolicy;\n+\n     public RoleMod() {\n         super();\n \n@@ -91,4 +94,12 @@ public void setEntitlements(List<String> entitlements) {\n             this.entitlements.addAll(entitlements);\n         }\n     }\n+\n+    public PasswordPolicyTO getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(PasswordPolicyTO passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n }"},{"sha":"ee4a33d39cce577719b288b42a81a710257fef8e","filename":"client/src/main/java/org/syncope/client/mod/SyncPolicyMod.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -25,11 +25,11 @@ public class SyncPolicyMod extends PolicyMod {\n     public SyncPolicyMod() {\n     }\n \n-    public SyncPolicy getSpecification() {\n-        return specification;\n-    }\n-\n     public void setSpecification(SyncPolicy specification) {\n         this.specification = specification;\n     }\n+\n+    public SyncPolicy getSpecification() {\n+        return specification;\n+    }\n }"},{"sha":"648a4d849ac2707628e70cc922af8c50b412c1ad","filename":"client/src/main/java/org/syncope/client/to/AccountPolicyTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -27,11 +27,11 @@ public AccountPolicyTO() {\n         setType(PolicyType.ACCOUNT);\n     }\n \n-    public AccountPolicy getSpecification() {\n-        return specification;\n+    public void setSpecification(final AccountPolicy specification) {\n+        this.specification = specification;\n     }\n \n-    public void setSpecification(AccountPolicy specification) {\n-        this.specification = specification;\n+    public AccountPolicy getSpecification() {\n+        return specification;\n     }\n }"},{"sha":"c1ec7dac439fccc90d1fdd7a0dc35daa7f22143a","filename":"client/src/main/java/org/syncope/client/to/PasswordPolicyTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -27,11 +27,11 @@ public PasswordPolicyTO() {\n         setType(PolicyType.PASSWORD);\n     }\n \n-    public PasswordPolicy getSpecification() {\n-        return specification;\n+    public void setSpecification(final PasswordPolicy specification) {\n+        this.specification = specification;\n     }\n \n-    public void setSpecification(PasswordPolicy specification) {\n-        this.specification = specification;\n+    public PasswordPolicy getSpecification() {\n+        return specification;\n     }\n }"},{"sha":"b4df9c6deb4690293b63385b00cbc22b059eb4b9","filename":"client/src/main/java/org/syncope/client/to/PolicyTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -23,6 +23,8 @@ public abstract class PolicyTO extends AbstractBaseBean {\n \n     private long id;\n \n+    private String description;\n+\n     private PolicyType type;\n \n     public long getId() {\n@@ -33,6 +35,14 @@ public void setId(long id) {\n         this.id = id;\n     }\n \n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n     public PolicyType getType() {\n         return type;\n     }"},{"sha":"400c5beafb048d2167adb23ffdcabe9138cbb426","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -55,6 +55,8 @@ public class ResourceTO extends AbstractBaseBean {\n \n     private TraceLevel updateTraceLevel;\n \n+    private Long passwordPolicy;\n+\n     public ResourceTO() {\n         mappings = new ArrayList<SchemaMappingTO>();\n         optionalPropagationMode = PropagationMode.ASYNC;\n@@ -144,4 +146,12 @@ public TraceLevel getUpdateTraceLevel() {\n     public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\n         this.updateTraceLevel = updateTraceLevel;\n     }\n+\n+    public Long getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(Long passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n }"},{"sha":"eb4c18a0dadbbfcc7cf6cfb0ab90b473d720306e","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -21,6 +21,8 @@\n @JsonIgnoreProperties({\"displayName\", \"empty\"})\n public class RoleTO extends AbstractAttributableTO {\n \n+    private static final long serialVersionUID = -7785920258290147542L;\n+\n     private String name;\n \n     private long parent;\n@@ -33,6 +35,8 @@ public class RoleTO extends AbstractAttributableTO {\n \n     private List<String> entitlements;\n \n+    private Long passwordPolicy;\n+\n     public RoleTO() {\n         entitlements = new ArrayList<String>();\n     }\n@@ -98,6 +102,14 @@ public void setEntitlements(List<String> entitlements) {\n         }\n     }\n \n+    public Long getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(Long passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n+\n     public String getDisplayName() {\n         return getId() + \" \" + getName();\n     }"},{"sha":"a3ffe427d0ad09f4940856f0de720ccb623d2bac","filename":"client/src/main/java/org/syncope/client/to/SyncPolicyTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -27,11 +27,11 @@ public SyncPolicyTO() {\n         setType(PolicyType.SYNC);\n     }\n \n-    public SyncPolicy getSpecification() {\n-        return specification;\n+    public void setSpecification(final SyncPolicy specification) {\n+        this.specification = specification;\n     }\n \n-    public void setSpecification(SyncPolicy specification) {\n-        this.specification = specification;\n+    public SyncPolicy getSpecification() {\n+        return specification;\n     }\n }"},{"sha":"b760346b1af1bd6c007025f5357a959e418d5c0d","filename":"client/src/main/java/org/syncope/types/PolicyType.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -20,13 +20,25 @@ public enum PolicyType {\n      * Account policy like:\n      * password expire time, change password at first access, ...\n      */\n-    ACCOUNT,\n+    ACCOUNT(\"Account Policy\"),\n+    GLOBAL_ACCOUNT(\"Account Global Policy\"),\n     /**\n      * Password policy regarding password syntax.\n      */\n-    PASSWORD,\n+    PASSWORD(\"Password Policy\"),\n+    GLOBAL_PASSWORD(\"Password Global Policy\"),\n     /**\n      * SYNC policy regarding account conflicts resolution.\n      */\n-    SYNC\n+    SYNC(\"Synchronization Policy\");\n+\n+    private String description;\n+\n+    PolicyType(final String description) {\n+        this.description = description;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n }"},{"sha":"2fb3d60695cd90ba15b866ab1e55418b31d1c90a","filename":"client/src/test/java/org/syncope/client/test/JSONTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -23,10 +23,14 @@\n import java.util.List;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.SchemaTO;\n+import org.syncope.client.to.SyncPolicyTO;\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyncPolicy;\n \n public class JSONTest {\n "},{"sha":"6dc974ee46049306641ad514547b29cf1b92905e","filename":"console/src/main/java/org/syncope/console/pages/panels/PasswordPolicyPanel.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -51,6 +51,7 @@\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PolicyType;\n \n public class PasswordPolicyPanel extends Panel {\n \n@@ -95,7 +96,16 @@ protected List<String> load() {\n     public PasswordPolicyPanel(String id) {\n         super(id);\n \n-        final PasswordPolicyTO policyTO = policyRestClient.getPasswordPolicy();\n+        final PasswordPolicyTO policyTO;\n+\n+        if (policyRestClient.getPasswordPolicy() == null) {\n+            policyTO = new PasswordPolicyTO();\n+            policyTO.setType(PolicyType.GLOBAL_PASSWORD);\n+            policyTO.setDescription(\"Global Password Policy\");\n+            policyTO.setSpecification(new PasswordPolicy());\n+        } else {\n+            policyTO = policyRestClient.getPasswordPolicy();\n+        }\n \n         final PasswordPolicy policy = policyTO.getSpecification() != null\n                 ? policyTO.getSpecification() : new PasswordPolicy();\n@@ -250,6 +260,7 @@ protected void onSubmit(\n                     policyMod.setId(policyTO.getId());\n                     policyMod.setType(policyTO.getType());\n                     policyMod.setSpecification(policyTO.getSpecification());\n+                    policyMod.setDescription(policyTO.getDescription());\n \n                     policyRestClient.updatePasswordPolicy(policyMod);\n                 } else {"},{"sha":"7bdd162afcdf2539c74de9d70ec39f0d816839b7","filename":"console/src/main/java/org/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -27,7 +27,7 @@ public class PolicyRestClient extends AbstractBaseRestClient {\n     public PasswordPolicyTO getPasswordPolicy() {\n         try {\n             return restTemplate.getForObject(\n-                    baseURL + \"policy/password/read\", PasswordPolicyTO.class);\n+                    baseURL + \"policy/password/global/read\", PasswordPolicyTO.class);\n         } catch (Exception e) {\n             LOG.debug(\"No password policy found\", e);\n             return new PasswordPolicyTO();"},{"sha":"e5f3012c17096b8b1ca17b409d40cff7b6eef116","filename":"core/src/main/java/org/syncope/core/persistence/beans/Policy.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -40,6 +40,9 @@ public class Policy extends AbstractBaseBean {\n     @Id\n     private Long id;\n \n+    @Column(nullable = false)\n+    private String description;\n+\n     @Column(nullable = false)\n     @Enumerated(EnumType.STRING)\n     private PolicyType type;\n@@ -56,6 +59,14 @@ public void setId(Long id) {\n         this.id = id;\n     }\n \n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n     public PolicyType getType() {\n         return type;\n     }"},{"sha":"bec0ec64cdb32f9b8f4c19fee42d88092c642a61","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -113,6 +113,9 @@ public class TargetResource extends AbstractBaseBean {\n     @Column(nullable = false)\n     private TraceLevel updateTraceLevel;\n \n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private Policy passwordPolicy;\n+\n     /**\n      * Default constructor.\n      */\n@@ -280,4 +283,12 @@ public TraceLevel getUpdateTraceLevel() {\n     public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\n         this.updateTraceLevel = updateTraceLevel;\n     }\n+\n+    public Policy getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(Policy passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n }"},{"sha":"bc2b0aac2ca5263b84459c16afd043cc6294e7ad","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -38,6 +38,7 @@\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.Policy;\n \n @Entity\n @Table(uniqueConstraints =\n@@ -89,6 +90,9 @@ public class SyncopeRole extends AbstractAttributable {\n     @Max(1)\n     private Integer inheritVirtualAttributes;\n \n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private Policy passwordPolicy;\n+\n     public SyncopeRole() {\n         super();\n \n@@ -265,4 +269,12 @@ public List<RVirAttr> findInheritedVirtualAttributes() {\n \n         return result;\n     }\n+\n+    public Policy getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(Policy passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n }"},{"sha":"9e3c1c87d41d9e14aff02f1bbc0bb2a26a812b74","filename":"core/src/main/java/org/syncope/core/persistence/dao/PolicyDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -22,11 +22,11 @@ public interface PolicyDAO extends DAO {\n \n     Policy find(Long id);\n \n-    Policy getPasswordPolicy();\n+    Policy getGlobalPasswordPolicy();\n \n     List<Policy> find(PolicyType type);\n \n-    Policy getAccountPolicy();\n+    Policy getGlobalAccountPolicy();\n \n     List<Policy> findAll();\n "},{"sha":"d69fcb94b71d2715fcc1203e80800215c97e0a73","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -41,9 +41,9 @@ public List<Policy> find(final PolicyType type) {\n     }\n \n     @Override\n-    public Policy getPasswordPolicy() {\n+    public Policy getGlobalPasswordPolicy() {\n \n-        List<Policy> policies = find(PolicyType.PASSWORD);\n+        List<Policy> policies = find(PolicyType.GLOBAL_PASSWORD);\n         if (policies != null && !policies.isEmpty()) {\n             return policies.get(0);\n         } else {\n@@ -52,8 +52,8 @@ public Policy getPasswordPolicy() {\n     }\n \n     @Override\n-    public Policy getAccountPolicy() {\n-        List<Policy> policies = find(PolicyType.ACCOUNT);\n+    public Policy getGlobalAccountPolicy() {\n+        List<Policy> policies = find(PolicyType.GLOBAL_ACCOUNT);\n         if (policies != null && !policies.isEmpty()) {\n             return policies.get(0);\n         } else {"},{"sha":"77942f304c53bfd9c39a50dac20cd2a4ae56e051","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -56,7 +56,7 @@ public boolean isValid(\n             // ------------------------------\n             LOG.debug(\"Password Policy enforcement\");\n \n-            final Policy policy = policyDAO.getPasswordPolicy();\n+            final Policy policy = policyDAO.getGlobalPasswordPolicy();\n \n             // evaluate policy\n             PasswordPolicy passwordPolicy = evaluator.evaluate(policy, object);"},{"sha":"18b4776511cf68548c33dabbc802d2e45473e864","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -43,9 +43,11 @@ public boolean isValid(\n         context.disableDefaultConstraintViolation();\n \n         if (object.getSpecification() != null\n-                && ((object.getType() == PolicyType.PASSWORD\n+                && (((object.getType() == PolicyType.PASSWORD\n+                || object.getType() == PolicyType.GLOBAL_PASSWORD)\n                 && !(object.getSpecification() instanceof PasswordPolicy))\n-                || (object.getType() == PolicyType.ACCOUNT\n+                || ((object.getType() == PolicyType.ACCOUNT\n+                || object.getType() == PolicyType.GLOBAL_ACCOUNT)\n                 && !(object.getSpecification() instanceof AccountPolicy))\n                 || (object.getType() == PolicyType.SYNC\n                 && !(object.getSpecification() instanceof SyncPolicy)))) {\n@@ -60,9 +62,9 @@ public boolean isValid(\n         }\n \n         switch (object.getType()) {\n-            case PASSWORD:\n+            case GLOBAL_PASSWORD:\n                 // just one policy with type PASSWORD\n-                Policy passwordPolicy = policyDAO.getPasswordPolicy();\n+                Policy passwordPolicy = policyDAO.getGlobalPasswordPolicy();\n                 if (passwordPolicy != null\n                         && !passwordPolicy.getId().equals(object.getId())) {\n \n@@ -74,11 +76,13 @@ public boolean isValid(\n                     return false;\n                 }\n                 break;\n+            case PASSWORD:\n+                break;\n \n-            case ACCOUNT:\n+            case GLOBAL_ACCOUNT:\n \n                 // just one policy with type ACCOUNT\n-                Policy accountPolicy = policyDAO.getAccountPolicy();\n+                Policy accountPolicy = policyDAO.getGlobalAccountPolicy();\n                 if (accountPolicy != null\n                         && !accountPolicy.getId().equals(object.getId())) {\n \n@@ -91,6 +95,9 @@ public boolean isValid(\n                 }\n                 break;\n \n+            case ACCOUNT:\n+                break;\n+                \n             case SYNC:\n             default:\n         }"},{"sha":"20f1eda747fee224caaf2c7e2200a8cf73d9dca3","filename":"core/src/main/java/org/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -42,7 +42,7 @@ public <T extends AbstractPolicy> T evaluate(\n \n         if (policy != null) {\n             switch (policy.getType()) {\n-                case PASSWORD:\n+                case GLOBAL_PASSWORD:\n                     final PasswordPolicy spec = policy.getSpecification();\n                     final PasswordPolicy passwordPolicy = new PasswordPolicy();\n \n@@ -92,9 +92,13 @@ public <T extends AbstractPolicy> T evaluate(\n \n                     result = (T) passwordPolicy;\n                     break;\n-                case ACCOUNT:\n+                case PASSWORD:\n+                    break;\n+                case GLOBAL_ACCOUNT:\n                     result = null;\n                     break;\n+                case ACCOUNT:\n+                    break;\n                 case SYNC:\n                     break;\n                 default:"},{"sha":"8de1889141315413b3f13b58123f9add462bf35c","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":26,"deletions":115,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -40,11 +40,9 @@\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.syncope.types.AccountPolicy;\n+import org.syncope.core.rest.data.PolicyDataBinder;\n import org.syncope.types.EntityViolationType;\n-import org.syncope.types.PasswordPolicy;\n import org.syncope.types.PolicyType;\n-import org.syncope.types.SyncPolicy;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -54,16 +52,16 @@ public class PolicyController extends AbstractController {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private PolicyDataBinder policyDataBinder;\n+\n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/create\")\n     public PasswordPolicyTO create(final HttpServletResponse response,\n             final @RequestBody PasswordPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        Policy policy = new Policy();\n-        policy.setType(policyTO.getType());\n-        policy.setSpecification(policyTO.getSpecification());\n-\n+        final Policy policy = policyDataBinder.getPolicy(policyTO);\n         return (PasswordPolicyTO) create(policy, policyTO);\n     }\n \n@@ -73,10 +71,7 @@ public AccountPolicyTO create(final HttpServletResponse response,\n             final @RequestBody AccountPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        Policy policy = new Policy();\n-        policy.setType(policyTO.getType());\n-        policy.setSpecification(policyTO.getSpecification());\n-\n+        final Policy policy = policyDataBinder.getPolicy(policyTO);\n         return (AccountPolicyTO) create(policy, policyTO);\n     }\n \n@@ -86,10 +81,7 @@ public SyncPolicyTO create(final HttpServletResponse response,\n             final @RequestBody SyncPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        Policy policy = new Policy();\n-        policy.setType(policyTO.getType());\n-        policy.setSpecification(policyTO.getSpecification());\n-\n+        final Policy policy = policyDataBinder.getPolicy(policyTO);\n         return (SyncPolicyTO) create(policy, policyTO);\n \n     }\n@@ -138,19 +130,10 @@ public PasswordPolicyTO update(final HttpServletResponse response,\n \n         LOG.debug(\"Updating policy \" + policyMod);\n \n-        Policy policy = new Policy();\n-        policy.setId(policyMod.getId());\n-        policy.setType(policyMod.getType());\n-        policy.setSpecification(policyMod.getSpecification());\n+        final Policy policy = policyDataBinder.getPolicy(policyMod);\n+        final Policy actual = update(policy);\n \n-        Policy actual = update(policy);\n-\n-        PasswordPolicyTO policyTO = new PasswordPolicyTO();\n-        policyTO.setId(actual.getId());\n-        policyTO.setType(actual.getType());\n-        policyTO.setSpecification((PasswordPolicy) actual.getSpecification());\n-\n-        return policyTO;\n+        return (PasswordPolicyTO) policyDataBinder.getPolicyTO(actual);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n@@ -161,19 +144,10 @@ public AccountPolicyTO update(final HttpServletResponse response,\n \n         LOG.debug(\"Updating policy \" + policyMod);\n \n-        Policy policy = new Policy();\n-        policy.setId(policyMod.getId());\n-        policy.setType(policyMod.getType());\n-        policy.setSpecification(policyMod.getSpecification());\n-\n-        Policy actual = update(policy);\n+        final Policy policy = policyDataBinder.getPolicy(policyMod);\n+        final Policy actual = update(policy);\n \n-        AccountPolicyTO policyTO = new AccountPolicyTO();\n-        policyTO.setId(actual.getId());\n-        policyTO.setType(actual.getType());\n-        policyTO.setSpecification((AccountPolicy) actual.getSpecification());\n-\n-        return policyTO;\n+        return (AccountPolicyTO) policyDataBinder.getPolicyTO(actual);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n@@ -184,19 +158,10 @@ public SyncPolicyTO update(final HttpServletResponse response,\n \n         LOG.debug(\"Updating policy \" + policyMod);\n \n-        Policy policy = new Policy();\n-        policy.setId(policyMod.getId());\n-        policy.setType(policyMod.getType());\n-        policy.setSpecification(policyMod.getSpecification());\n-\n-        Policy actual = update(policy);\n+        final Policy policy = policyDataBinder.getPolicy(policyMod);\n+        final Policy actual = update(policy);\n \n-        SyncPolicyTO policyTO = new SyncPolicyTO();\n-        policyTO.setId(actual.getId());\n-        policyTO.setType(actual.getType());\n-        policyTO.setSpecification((SyncPolicy) actual.getSpecification());\n-\n-        return policyTO;\n+        return (SyncPolicyTO) policyDataBinder.getPolicyTO(actual);\n     }\n \n     private Policy update(final Policy policy)\n@@ -247,72 +212,42 @@ public List<PolicyTO> listByType(\n                 policyDAO.find(PolicyType.valueOf(kind.toUpperCase()));\n \n         final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n-        PolicyTO policyTO;\n \n         for (Policy policy : policies) {\n-            switch (policy.getType()) {\n-                case PASSWORD:\n-                    policyTO = new PasswordPolicyTO();\n-                    ((PasswordPolicyTO) policyTO).setSpecification(\n-                            (PasswordPolicy) policy.getSpecification());\n-                    break;\n-                case ACCOUNT:\n-                    policyTO = new AccountPolicyTO();\n-                    ((AccountPolicyTO) policyTO).setSpecification(\n-                            (AccountPolicy) policy.getSpecification());\n-                    break;\n-                default:\n-                    policyTO = new SyncPolicyTO();\n-                    ((SyncPolicyTO) policyTO).setSpecification(\n-                            (SyncPolicy) policy.getSpecification());\n-            }\n-\n-            policyTO.setId(policy.getId());\n-            policyTO.setType(policy.getType());\n-            policyTOs.add(policyTO);\n+            policyTOs.add(policyDataBinder.getPolicyTO(policy));\n         }\n \n         return policyTOs;\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/password/read\")\n-    public PasswordPolicyTO getPasswordPolicy(\n+    @RequestMapping(method = RequestMethod.GET, value = \"/password/global/read\")\n+    public PasswordPolicyTO getGlobalPasswordPolicy(\n             final HttpServletResponse response) throws NotFoundException {\n \n         LOG.debug(\"Reading password policy\");\n-        Policy policy = policyDAO.getPasswordPolicy();\n+        Policy policy = policyDAO.getGlobalPasswordPolicy();\n \n         if (policy == null) {\n             throw new NotFoundException(\"No password policy found\");\n         }\n \n-        PasswordPolicyTO policyTO = new PasswordPolicyTO();\n-        policyTO.setId(policy.getId());\n-        policyTO.setSpecification((PasswordPolicy) policy.getSpecification());\n-        policyTO.setType(policy.getType());\n-\n-        return policyTO;\n+        return (PasswordPolicyTO) policyDataBinder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/account/read\")\n-    public AccountPolicyTO getAccountPolicy(\n+    @RequestMapping(method = RequestMethod.GET, value = \"/account/global/read\")\n+    public AccountPolicyTO getGlobalAccountPolicy(\n             final HttpServletResponse response) throws NotFoundException {\n \n         LOG.debug(\"Reading account policy\");\n-        Policy policy = policyDAO.getAccountPolicy();\n+        Policy policy = policyDAO.getGlobalAccountPolicy();\n \n         if (policy == null) {\n             throw new NotFoundException(\"No account policy found\");\n         }\n \n-        AccountPolicyTO policyTO = new AccountPolicyTO();\n-        policyTO.setId(policy.getId());\n-        policyTO.setSpecification((AccountPolicy) policy.getSpecification());\n-        policyTO.setType(policy.getType());\n-\n-        return policyTO;\n+        return (AccountPolicyTO) policyDataBinder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n@@ -328,31 +263,7 @@ public PolicyTO read(\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n-\n-        final PolicyTO policyTO;\n-\n-        switch (policy.getType()) {\n-            case PASSWORD:\n-                policyTO = new PasswordPolicyTO();\n-                ((PasswordPolicyTO) policyTO).setSpecification(\n-                        (PasswordPolicy) policy.getSpecification());\n-                break;\n-            case ACCOUNT:\n-                policyTO = new AccountPolicyTO();\n-                ((AccountPolicyTO) policyTO).setSpecification(\n-                        (AccountPolicy) policy.getSpecification());\n-                break;\n-            default:\n-                policyTO = new SyncPolicyTO();\n-                ((SyncPolicyTO) policyTO).setSpecification(\n-                        (SyncPolicy) policy.getSpecification());\n-\n-        }\n-\n-        policyTO.setId(policy.getId());\n-        policyTO.setType(policy.getType());\n-\n-        return policyTO;\n+        return policyDataBinder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")"},{"sha":"e2cc44657bcf2e4f725b22e3f3163d9717a74d92","filename":"core/src/main/java/org/syncope/core/rest/data/PolicyDataBinder.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -0,0 +1,156 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.mod.AccountPolicyMod;\n+import org.syncope.client.mod.PasswordPolicyMod;\n+import org.syncope.client.mod.PolicyMod;\n+import org.syncope.client.mod.SyncPolicyMod;\n+import org.syncope.client.to.AccountPolicyTO;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n+import org.syncope.client.to.SyncPolicyTO;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.types.AccountPolicy;\n+import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.SyncPolicy;\n+\n+@Component\n+public class PolicyDataBinder {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n+            PolicyDataBinder.class);\n+\n+    /**\n+     * Get policy TO from policy bean.\n+     * @param policy bean.\n+     * @return policy TO.\n+     */\n+    public PolicyTO getPolicyTO(Policy policy) {\n+\n+        final PolicyTO policyTO;\n+\n+        if (policy != null) {\n+            switch (policy.getType()) {\n+                case GLOBAL_PASSWORD:\n+                case PASSWORD:\n+                    policyTO = new PasswordPolicyTO();\n+                    ((PasswordPolicyTO) policyTO).setSpecification(\n+                            (PasswordPolicy) policy.getSpecification());\n+                    break;\n+                case GLOBAL_ACCOUNT:\n+                case ACCOUNT:\n+                    policyTO = new AccountPolicyTO();\n+                    ((AccountPolicyTO) policyTO).setSpecification(\n+                            (AccountPolicy) policy.getSpecification());\n+                    break;\n+                default:\n+                    policyTO = new SyncPolicyTO();\n+                    ((SyncPolicyTO) policyTO).setSpecification(\n+                            (SyncPolicy) policy.getSpecification());\n+\n+            }\n+\n+            policyTO.setId(policy.getId());\n+            policyTO.setType(policy.getType());\n+            policyTO.setDescription(policy.getDescription());\n+        } else {\n+            policyTO = null;\n+        }\n+\n+        return policyTO;\n+    }\n+\n+    /**\n+     * Get policy bean from policy TO.\n+     * @param policy TO.\n+     * @return policy bean.\n+     */\n+    public Policy getPolicy(PolicyTO policyTO) {\n+\n+        final Policy policy;\n+\n+        if (policyTO != null) {\n+            policy = new Policy();\n+            policy.setId(policyTO.getId());\n+            policy.setType(policyTO.getType());\n+            policy.setDescription(policyTO.getDescription());\n+\n+            switch (policy.getType()) {\n+                case GLOBAL_PASSWORD:\n+                case PASSWORD:\n+                    policy.setSpecification(\n+                            ((PasswordPolicyTO) policyTO).getSpecification());\n+                    break;\n+                case GLOBAL_ACCOUNT:\n+                case ACCOUNT:\n+                    policy.setSpecification(\n+                            ((AccountPolicyTO) policyTO).getSpecification());\n+                    break;\n+                default:\n+                    policy.setSpecification(\n+                            ((SyncPolicyTO) policyTO).getSpecification());\n+\n+            }\n+        } else {\n+            policy = null;\n+        }\n+\n+        return policy;\n+    }\n+\n+    /**\n+     * Get policy bean from policy mod.\n+     * @param policy mod.\n+     * @return policy bean.\n+     */\n+    public Policy getPolicy(PolicyMod policyMod) {\n+\n+        final Policy policy;\n+\n+        if (policyMod != null) {\n+            policy = new Policy();\n+            policy.setId(policyMod.getId());\n+            policy.setType(policyMod.getType());\n+            policy.setDescription(policyMod.getDescription());\n+\n+            switch (policy.getType()) {\n+                case GLOBAL_PASSWORD:\n+                case PASSWORD:\n+                    policy.setSpecification(\n+                            ((PasswordPolicyMod) policyMod).getSpecification());\n+                    break;\n+                case GLOBAL_ACCOUNT:\n+                case ACCOUNT:\n+                    policy.setSpecification(\n+                            ((AccountPolicyMod) policyMod).getSpecification());\n+                    break;\n+                default:\n+                    policy.setSpecification(\n+                            ((SyncPolicyMod) policyMod).getSpecification());\n+            }\n+        } else {\n+            policy = null;\n+        }\n+\n+        return policy;\n+    }\n+}"},{"sha":"393f3370381ba48ea8051d0ceea3508b42c1e4b2","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -31,6 +31,7 @@\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.util.JexlUtil;\n import org.syncope.types.SourceMappingType;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -53,6 +54,12 @@ public class ResourceDataBinder {\n     @Autowired\n     private JexlUtil jexlUtil;\n \n+    @Autowired\n+    private PolicyDataBinder policyDataBinder;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n     public TargetResource getResource(final ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -115,6 +122,9 @@ public TargetResource getResource(final TargetResource resource,\n         resource.setUpdateTraceLevel(resourceTO.getUpdateTraceLevel());\n         resource.setDeleteTraceLevel(resourceTO.getDeleteTraceLevel());\n \n+        resource.setPasswordPolicy(resourceTO.getPasswordPolicy() != null\n+                ? policyDAO.find(resourceTO.getPasswordPolicy()) : null);\n+\n         return resource;\n     }\n \n@@ -165,6 +175,9 @@ public ResourceTO getResourceTO(TargetResource resource) {\n         resourceTO.setUpdateTraceLevel(resource.getUpdateTraceLevel());\n         resourceTO.setDeleteTraceLevel(resource.getDeleteTraceLevel());\n \n+        resourceTO.setPasswordPolicy(resource.getPasswordPolicy() != null\n+                ? resource.getPasswordPolicy().getId() : null);\n+\n         return resourceTO;\n     }\n "},{"sha":"f73f30160e7d42c6ecce55d0538ad6ccfce972c9","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -34,6 +34,9 @@ public class RoleDataBinder extends AbstractAttributableDataBinder {\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n+    @Autowired\n+    private PolicyDataBinder policyDataBinder;\n+\n     public SyncopeRole create(final RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -96,6 +99,9 @@ public SyncopeRole create(final RoleTO roleTO)\n             }\n         }\n \n+        role.setPasswordPolicy(roleTO.getPasswordPolicy() != null\n+                ? policyDAO.find(roleTO.getPasswordPolicy()) : null);\n+\n         return role;\n     }\n \n@@ -154,6 +160,9 @@ public ResourceOperations update(SyncopeRole role, RoleMod roleMod)\n             }\n         }\n \n+        role.setPasswordPolicy(\n+                policyDataBinder.getPolicy(roleMod.getPasswordPolicy()));\n+\n         // attributes, derived attributes, virtual attributes and resources\n         return fill(role, roleMod, AttributableUtil.ROLE, scce);\n     }\n@@ -180,6 +189,9 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.addEntitlement(entitlement.getName());\n         }\n \n+        roleTO.setPasswordPolicy(role.getPasswordPolicy() != null\n+                ? role.getPasswordPolicy().getId() : null);\n+\n         return roleTO;\n     }\n }"},{"sha":"a0d179625f4fcabdfd28ee05bb1c82866b000b12","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -113,7 +113,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n         int passwordHistorySize = 0;\n \n         try {\n-            Policy policy = policyDAO.getPasswordPolicy();\n+            Policy policy = policyDAO.getGlobalPasswordPolicy();\n             PasswordPolicy passwordPolicy = policy.getSpecification();\n             passwordHistorySize = passwordPolicy.getHistoryLength();\n         } catch (Throwable ignore) {\n@@ -184,7 +184,7 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n             int passwordHistorySize = 0;\n \n             try {\n-                Policy policy = policyDAO.getPasswordPolicy();\n+                Policy policy = policyDAO.getGlobalPasswordPolicy();\n                 PasswordPolicy passwordPolicy = policy.getSpecification();\n                 passwordHistorySize = passwordPolicy.getHistoryLength();\n             } catch (Throwable ignore) {"},{"sha":"ec49a13fc3b9addb8a7f2d053ce8943006026abb","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -54,11 +54,11 @@ public final void findByType() {\n     }\n \n     @Test\n-    public final void findPasswordPolicy() {\n-        Policy policy = policyDAO.getPasswordPolicy();\n+    public final void findGlobalPasswordPolicy() {\n+        Policy policy = policyDAO.getGlobalPasswordPolicy();\n         assertNotNull(\"findById did not work\", policy);\n \n-        assertEquals(PolicyType.PASSWORD, policy.getType());\n+        assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n \n         assertEquals(\"invalid policy values\",\n                 8, ((PasswordPolicy) policy.getSpecification()).getMinLength());\n@@ -75,6 +75,7 @@ public final void saveInvalidPolicy() {\n         Policy policy = new Policy();\n         policy.setSpecification(passwordPolicy);\n         policy.setType(PolicyType.SYNC);\n+        policy.setDescription(\"sync policy\");\n \n         policyDAO.save(policy);\n     }\n@@ -89,7 +90,8 @@ public final void saveSecondPasswordPolicy() {\n \n         Policy policy = new Policy();\n         policy.setSpecification(passwordPolicy);\n-        policy.setType(PolicyType.PASSWORD);\n+        policy.setType(PolicyType.GLOBAL_PASSWORD);\n+        policy.setDescription(\"global password policy\");\n \n         policyDAO.save(policy);\n     }\n@@ -99,6 +101,7 @@ public final void create() {\n         Policy policy = new Policy();\n         policy.setType(PolicyType.SYNC);\n         policy.setSpecification(new SyncPolicy());\n+        policy.setDescription(\"Sync policy\");\n \n         policy = policyDAO.save(policy);\n \n@@ -112,15 +115,14 @@ public final void update() {\n         specification.setMaxLength(8);\n         specification.setMinLength(6);\n \n-        Policy policy = policyDAO.getPasswordPolicy();\n+        Policy policy = policyDAO.getGlobalPasswordPolicy();\n         assertNotNull(policy);\n         policy.setSpecification(specification);\n \n-\n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n-        assertEquals(PolicyType.PASSWORD, policy.getType());\n+        assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n         assertEquals(\n                 ((PasswordPolicy) policy.getSpecification()).getMaxLength(), 8);\n         assertEquals("},{"sha":"8cc7b871c3e2647169e044f96b8258529b12a124","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -37,9 +37,11 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.SourceMappingType;\n@@ -68,6 +70,30 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private ResourceDataBinder resourceDataBinder;\n \n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    public final void createWithPasswordPolicy() {\n+        final String RESOURCE_NAME = \"resourceWithPasswordPolicy\";\n+\n+        Policy policy = policyDAO.find(4L);\n+        TargetResource resource = new TargetResource();\n+        resource.setName(RESOURCE_NAME);\n+        resource.setPasswordPolicy(policy);\n+\n+        TargetResource actual = resourceDAO.save(resource);\n+        assertNotNull(actual);\n+\n+        actual = resourceDAO.find(actual.getName());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+\n+        resourceDAO.delete(RESOURCE_NAME);\n+        assertNull(resourceDAO.find(RESOURCE_NAME));\n+\n+        assertNotNull(policyDAO.find(4L));\n+    }\n+\n     /**\n      * @see http://code.google.com/p/syncope/issues/detail?id=42\n      */"},{"sha":"99e2a797393c05431a54e6ba05d5080ed90dd550","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -29,6 +29,9 @@\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.AbstractTest;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n \n @Transactional\n public class RoleTest extends AbstractTest {\n@@ -51,6 +54,30 @@ public class RoleTest extends AbstractTest {\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    public final void createWithPasswordPolicy() {\n+        final String ROLE_NAME = \"roleWithPasswordPolicy\";\n+\n+        Policy policy = policyDAO.find(4L);\n+        SyncopeRole role = new SyncopeRole();\n+        role.setName(ROLE_NAME);\n+        role.setPasswordPolicy(policy);\n+\n+        SyncopeRole actual = roleDAO.save(role);\n+        assertNotNull(actual);\n+\n+        actual = roleDAO.find(actual.getId());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+\n+        roleDAO.delete(actual.getId());\n+        assertNull(roleDAO.find(actual.getId()));\n+\n+        assertNotNull(policyDAO.find(4L));\n+    }\n+\n     @Test\n     public final void delete() {\n         roleDAO.delete(2L);"},{"sha":"71b85d3408918fc7fdf25c75835294e83eab3922","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":26,"deletions":9,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -51,43 +51,59 @@ public final void read() {\n     }\n \n     @Test\n-    public final void getPasswordPolicy() {\n+    public final void getGlobalPasswordPolicy() {\n         PasswordPolicyTO policyTO = restTemplate.getForObject(\n-                BASE_URL + \"policy/password/read\", PasswordPolicyTO.class);\n+                BASE_URL + \"policy/password/global/read\", PasswordPolicyTO.class);\n \n         assertNotNull(policyTO);\n-        assertEquals(PolicyType.PASSWORD, policyTO.getType());\n+        assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n         assertEquals(8,\n                 ((PasswordPolicy) policyTO.getSpecification()).getMinLength());\n     }\n \n     @Test\n     @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void getAccountPolicy() {\n+    public final void getGlobalAccountPolicy() {\n         AccountPolicyTO policyTO = restTemplate.getForObject(\n-                BASE_URL + \"policy/account/read\", AccountPolicyTO.class);\n+                BASE_URL + \"policy/account/global/read\", AccountPolicyTO.class);\n \n         assertNull(policyTO);\n+        assertEquals(PolicyType.GLOBAL_ACCOUNT, policyTO.getType());\n     }\n \n     @Test\n     @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void saveWithException() {\n+    public final void createWithException() {\n \n         PasswordPolicyTO policy = new PasswordPolicyTO();\n         policy.setSpecification(new PasswordPolicy());\n-        policy.setType(PolicyType.PASSWORD);\n+        policy.setType(PolicyType.GLOBAL_PASSWORD);\n+        policy.setDescription(\"global password policy\");\n \n         restTemplate.postForObject(\n                 BASE_URL + \"policy/password/create\",\n                 policy, PasswordPolicyTO.class);\n     }\n \n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public final void createMissingDescription() {\n+\n+        SyncPolicyTO policy = new SyncPolicyTO();\n+        policy.setSpecification(new SyncPolicy());\n+        policy.setType(PolicyType.SYNC);\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"policy/sync/create\",\n+                policy, PasswordPolicyTO.class);\n+    }\n+\n     @Test\n     public final void create() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicy());\n         policy.setType(PolicyType.SYNC);\n+        policy.setDescription(\"Sync policy\");\n \n         SyncPolicyTO policyTO = restTemplate.postForObject(\n                 BASE_URL + \"policy/sync/create\", policy, SyncPolicyTO.class);\n@@ -109,15 +125,16 @@ public final void update() {\n \n         PasswordPolicyMod policyMod = new PasswordPolicyMod();\n         policyMod.setId(policyTO.getId());\n-        policyMod.setType(PolicyType.PASSWORD);\n+        policyMod.setType(PolicyType.GLOBAL_PASSWORD);\n         policyMod.setSpecification(policy);\n+        policyMod.setDescription(policyTO.getDescription());\n \n         policyTO = restTemplate.postForObject(\n                 BASE_URL + \"policy/password/update\",\n                 policyMod, PasswordPolicyTO.class);\n \n         assertNotNull(policyTO);\n-        assertEquals(PolicyType.PASSWORD, policyTO.getType());\n+        assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n         assertEquals(22,\n                 ((PasswordPolicyTO) policyTO).getSpecification().getMaxLength());\n         assertEquals(8,"},{"sha":"2ec6579afdde0b52a123ce7b45ef60bfa7c50af6","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -86,6 +86,40 @@ public void create() {\n         assertNotNull(actual);\n     }\n \n+    @Test\n+    public void createWithPasswordPolicy() {\n+        String resourceName = \"res-with-password-policy\";\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setName(resourceName);\n+        resourceTO.setConnectorId(102L);\n+        resourceTO.setPasswordPolicy(4L);\n+\n+        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n+        schemaMappingTO.setDestAttrName(\"uid\");\n+        schemaMappingTO.setSourceAttrName(\"userId\");\n+        schemaMappingTO.setSourceMappingType(SourceMappingType.UserSchema);\n+        schemaMappingTO.setAccountid(true);\n+        resourceTO.addMapping(schemaMappingTO);\n+\n+        ResourceTO actual = restTemplate.postForObject(\n+                BASE_URL + \"resource/create.json\",\n+                resourceTO, ResourceTO.class);\n+\n+        assertNotNull(actual);\n+\n+        // check the existence\n+\n+        actual = restTemplate.getForObject(\n+                BASE_URL + \"resource/read/{resourceName}.json\",\n+                ResourceTO.class,\n+                resourceName);\n+\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+        assertEquals(4L, (long) actual.getPasswordPolicy());\n+    }\n+\n     @Test\n     public void updateWithException() {\n         try {"},{"sha":"fd4de3cbc11562a04f685b0bc931d880cb605ee5","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -61,6 +61,26 @@ public void create() {\n         assertEquals(roleTO, newRoleTO);\n     }\n \n+    @Test\n+    public void createWithPasswordPolicy() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"roleWithPassword\");\n+        roleTO.setParent(8L);\n+        roleTO.setPasswordPolicy(4L);\n+\n+        RoleTO actual = restTemplate.postForObject(BASE_URL + \"role/create\",\n+                roleTO, RoleTO.class);\n+\n+        assertNotNull(actual);\n+\n+        actual = restTemplate.getForObject(BASE_URL\n+                + \"role/read/{roleId}.json\", RoleTO.class, actual.getId());\n+\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+        assertEquals(4L, (long) actual.getPasswordPolicy());\n+    }\n+\n     @Test\n     public void delete() {\n         try {"},{"sha":"f8ba3fc06eb3d319174de985d8e4d7235a8ca58f","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/64c41aa4fd4ab5b4e481d13f678b3f10ea4380be/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=64c41aa4fd4ab5b4e481d13f678b3f10ea4380be","patch":"@@ -385,9 +385,10 @@\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n     <!-- sample policies -->\n-    <Policy id=\"1\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\" type=\"SYNC\"/>\n-    <Policy id=\"2\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicy%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E1%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\" type=\"PASSWORD\"/>\n-    <Policy id=\"3\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\" type=\"SYNC\"/>\n+    <Policy id=\"1\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\"/>\n+    <Policy id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicy%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E1%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n+    <Policy id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\"/>\n+    <Policy id=\"4\" description=\"global password policy\" type=\"PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicy%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E1%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n \n     <!-- Authentication and authorization -->\n     <Entitlement name=\"base\"/>"}]}