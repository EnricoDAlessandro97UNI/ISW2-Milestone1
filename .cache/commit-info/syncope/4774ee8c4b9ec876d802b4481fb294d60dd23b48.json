{"sha":"4774ee8c4b9ec876d802b4481fb294d60dd23b48","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ3NzRlZThjNGI5ZWM4NzZkODAyYjQ0ODFmYjI5NGQ2MGRkMjNiNDg=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-07-14T09:05:37Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-07-14T09:05:37Z"},"message":"SYNCOPE-1577: Support CAS protocol for client applications (#203)","tree":{"sha":"968a067f9a7000abd27150e27a1811a6ed0145f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/968a067f9a7000abd27150e27a1811a6ed0145f6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4774ee8c4b9ec876d802b4481fb294d60dd23b48","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDXVhCRBK7hj4Ov3rIwAAdHIIAAfun1WSj200wGVjf7dZMllw\nBuktZUNNJUJTiwfDcq2FiA9FhLBydeA+Fc3SSkuu5H2j55Z7UncO/9p+OFLrzRjQ\nSiexhHjebvTq8ry+XblT1QsqgAPCkCeYrqyDQoomqb2wB3V34M1C3vPibamchC1m\nvmfC/0DOpAiSBSvuw6HiBqNNOZ2geVXQw7nYuhgD5DR4gs+TTWFNPuP9kTeo4Cs2\nhdZux7gyp9ozZYOX3pXBkG3lVdl/evxEPKUdTSR0GrHQexC9/PS4eosR0SF8UZLD\niOpPUlctPYWtRy7WsQo9L9JL7KpMqxPpQ/aAzwymuXLk02/QpPBFcF91ERYekI4=\n=032j\n-----END PGP SIGNATURE-----\n","payload":"tree 968a067f9a7000abd27150e27a1811a6ed0145f6\nparent 61aa7153a7a2a86de69b6fb403b0ce95b618d7e6\nauthor Misagh Moayyed <mm1844@gmail.com> 1594717537 +0430\ncommitter GitHub <noreply@github.com> 1594717537 +0430\n\nSYNCOPE-1577: Support CAS protocol for client applications (#203)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4774ee8c4b9ec876d802b4481fb294d60dd23b48","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4774ee8c4b9ec876d802b4481fb294d60dd23b48","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4774ee8c4b9ec876d802b4481fb294d60dd23b48/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"61aa7153a7a2a86de69b6fb403b0ce95b618d7e6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61aa7153a7a2a86de69b6fb403b0ce95b618d7e6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61aa7153a7a2a86de69b6fb403b0ce95b618d7e6"}],"stats":{"total":623,"additions":611,"deletions":12},"files":[{"sha":"67c0ec4db620027559f4c8f265939c74ad8de505","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/CASSPTO.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FCASSPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FCASSPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FCASSPTO.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to.client;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+@Schema(allOf = {ClientAppTO.class})\n+public class CASSPTO extends ClientAppTO {\n+\n+    private static final long serialVersionUID = -5370888503924521351L;\n+\n+    private String serviceId;\n+\n+    public String getServiceId() {\n+        return serviceId;\n+    }\n+\n+    public void setServiceId(final String serviceId) {\n+        this.serviceId = serviceId;\n+    }\n+\n+    @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n+    @JsonProperty(\"_class\")\n+    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.client.CASSPTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        CASSPTO rhs = (CASSPTO) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.serviceId, rhs.serviceId)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(this.serviceId)\n+            .toHashCode();\n+    }\n+}"},{"sha":"b8cd021b7740edf5fbf96fcac98f3881e1eb0d57","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/ClientAppType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientAppType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientAppType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientAppType.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -20,6 +20,7 @@\n \n public enum ClientAppType {\n     SAML2SP,\n+    CASSP,\n     OIDCRP;\n \n }"},{"sha":"ec2261ba047569b96a7545cbb5e533229b6e79b5","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/ClientAppLogic.java","status":"modified","additions":37,"deletions":8,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -39,8 +39,10 @@\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n@@ -74,6 +76,9 @@ public class ClientAppLogic extends AbstractTransactionalLogic<ClientAppTO> {\n     @Autowired\n     private OIDCRPDAO oidcrpDAO;\n \n+    @Autowired\n+    private CASSPDAO casspDAO;\n+\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n@@ -88,7 +93,9 @@ public <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n             case OIDCRP:\n                 stream = oidcrpDAO.findAll().stream().map(binder::getClientAppTO);\n                 break;\n-\n+            case CASSP:\n+                stream = casspDAO.findAll().stream().map(binder::getClientAppTO);\n+                break;\n             case SAML2SP:\n             default:\n                 stream = saml2spDAO.findAll().stream().map(binder::getClientAppTO);\n@@ -97,7 +104,7 @@ public <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n         return stream.collect(Collectors.toList());\n     }\n \n-    private void checkType(final ClientAppType type, final ClientAppUtils clientAppUtils) {\n+    private static void checkType(final ClientAppType type, final ClientAppUtils clientAppUtils) {\n         if (clientAppUtils.getType() != type) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n             sce.getElements().add(\"Found \" + type + \", expected \" + clientAppUtils.getType());\n@@ -118,7 +125,15 @@ public <T extends ClientAppTO> T read(final ClientAppType type, final String key\n                 checkType(type, clientAppUtilsFactory.getInstance(oidcrp));\n \n                 return binder.getClientAppTO(oidcrp);\n+            case CASSP:\n+                CASSP cassp = casspDAO.find(key);\n+                if (cassp == null) {\n+                    throw new NotFoundException(\"Client app \" + key + \" not found\");\n+                }\n \n+                checkType(type, clientAppUtilsFactory.getInstance(cassp));\n+\n+                return binder.getClientAppTO(cassp);\n             case SAML2SP:\n             default:\n                 SAML2SP saml2sp = saml2spDAO.find(key);\n@@ -139,7 +154,8 @@ public ClientAppTO create(final ClientAppType type, final ClientAppTO clientAppT\n         switch (type) {\n             case OIDCRP:\n                 return binder.getClientAppTO(oidcrpDAO.save(binder.create(clientAppTO)));\n-\n+            case CASSP:\n+                return binder.getClientAppTO(casspDAO.save(binder.create(clientAppTO)));\n             case SAML2SP:\n             default:\n                 return binder.getClientAppTO(saml2spDAO.save(binder.create(clientAppTO)));\n@@ -159,7 +175,14 @@ public void update(final ClientAppType type, final ClientAppTO clientAppTO) {\n                 binder.update(oidcrp, clientAppTO);\n                 oidcrpDAO.save(oidcrp);\n                 break;\n-\n+            case CASSP:\n+                CASSP cassp = casspDAO.find(clientAppTO.getKey());\n+                if (cassp == null) {\n+                    throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n+                }\n+                binder.update(cassp, clientAppTO);\n+                casspDAO.save(cassp);\n+                break;\n             case SAML2SP:\n             default:\n                 SAML2SP saml2sp = saml2spDAO.find(clientAppTO.getKey());\n@@ -181,7 +204,13 @@ public void delete(final ClientAppType type, final String key) {\n                 }\n                 oidcrpDAO.delete(oidcrp);\n                 break;\n-\n+            case CASSP:\n+                CASSP cassp = casspDAO.find(key);\n+                if (cassp == null) {\n+                    throw new NotFoundException(\"Client app \" + key + \" not found\");\n+                }\n+                casspDAO.delete(cassp);\n+                break;\n             case SAML2SP:\n             default:\n                 SAML2SP saml2sp = saml2spDAO.find(key);\n@@ -216,9 +245,9 @@ protected ClientAppTO resolveReference(final Method method, final Object... args\n                 }\n \n                 return binder.getClientAppTO(clientApp);\n-            } catch (Throwable ignore) {\n-                LOG.debug(\"Unresolved reference\", ignore);\n-                throw new UnresolvedReferenceException(ignore);\n+            } catch (Throwable ex) {\n+                LOG.debug(\"Unresolved reference\", ex);\n+                throw new UnresolvedReferenceException(ex);\n             }\n         }\n "},{"sha":"5c179bd416c85e06d10896577100005956fb1ca7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/CASSPDAO.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FCASSPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FCASSPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FCASSPDAO.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n+\n+import java.util.List;\n+\n+public interface CASSPDAO extends DAO<CASSP> {\n+\n+    CASSP find(String key);\n+\n+    CASSP findByClientAppId(Long clientAppId);\n+\n+    CASSP findByName(String name);\n+\n+    List<CASSP> findAll();\n+\n+    CASSP save(CASSP clientApp);\n+\n+    void delete(String key);\n+\n+    void delete(CASSP clientApp);\n+}"},{"sha":"88cf6a57499c3d4bdf6016f549371bb1b0dd3aae","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/CASSP.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FCASSP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FCASSP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FCASSP.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+public interface CASSP extends ClientApp {\n+\n+    void setServiceId(String serviceId);\n+\n+    String getServiceId();\n+}"},{"sha":"c59a45997058c8e6b0249dbbbf358b385dc89961","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPACASSPDAO.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSP;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+\n+import java.util.List;\n+\n+@Repository\n+public class JPACASSPDAO extends AbstractDAO<CASSP> implements CASSPDAO {\n+\n+    @Override\n+    public CASSP find(final String key) {\n+        return entityManager().find(JPACASSP.class, key);\n+    }\n+\n+    private CASSP find(final String column, final Object value) {\n+        TypedQuery<CASSP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPACASSP.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n+            CASSP.class);\n+        query.setParameter(\"value\", value);\n+\n+        CASSP result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No OIDCRP found with \" + column + \" {}\", value, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public CASSP findByClientAppId(final Long clientAppId) {\n+        return find(\"clientAppId\", clientAppId);\n+    }\n+\n+    @Override\n+    public CASSP findByName(final String name) {\n+        return find(\"name\", name);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<CASSP> findAll() {\n+        TypedQuery<CASSP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPACASSP.class.getSimpleName() + \" e\", CASSP.class);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public CASSP save(final CASSP clientApp) {\n+        return entityManager().merge(clientApp);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        CASSP rpTO = find(key);\n+        if (rpTO == null) {\n+            return;\n+        }\n+\n+        delete(rpTO);\n+    }\n+\n+    @Override\n+    public void delete(final CASSP clientApp) {\n+        entityManager().remove(clientApp);\n+    }\n+}"},{"sha":"5ec9130875e891a0a7180a8f63211d936f937e6d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -58,6 +58,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n@@ -114,6 +115,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n@@ -329,6 +331,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAttrReleasePolicy();\n         } else if (reference.equals(OIDCRP.class)) {\n             result = (E) new JPAOIDCRP();\n+        } else if (reference.equals(CASSP.class)) {\n+            result = (E) new JPACASSP();\n         } else if (reference.equals(SAML2SP.class)) {\n             result = (E) new JPASAML2SP();\n         } else if (reference.equals(SAML2IdPMetadata.class)) {"},{"sha":"763930d7bae27a00606c737d10dc61deb1017a20","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPACASSP.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPACASSP.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = JPACASSP.TABLE)\n+public class JPACASSP extends AbstractClientApp implements CASSP {\n+\n+    public static final String TABLE = \"CASSP\";\n+\n+    private static final long serialVersionUID = 6422422526695279794L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String serviceId;\n+\n+    public String getServiceId() {\n+        return serviceId;\n+    }\n+\n+    public void setServiceId(final String serviceId) {\n+        this.serviceId = serviceId;\n+    }\n+}"},{"sha":"3cb32b3c6527530be2dc6aa70270ebc4972263e3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtils.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n@@ -42,7 +43,8 @@ public Class<? extends ClientApp> clientAppClass() {\n         switch (type) {\n             case OIDCRP:\n                 return OIDCRP.class;\n-\n+            case CASSP:\n+                return CASSP.class;\n             case SAML2SP:\n             default:\n                 return SAML2SP.class;"},{"sha":"512f999490a517a920a125a24f9b4803db70e017","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtilsFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n+import org.apache.syncope.common.lib.to.client.CASSPTO;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n@@ -42,6 +44,8 @@ public ClientAppUtils getInstance(final ClientApp clientApp) {\n         ClientAppType type;\n         if (clientApp instanceof SAML2SP) {\n             type = ClientAppType.SAML2SP;\n+        } else if (clientApp instanceof CASSP) {\n+            type = ClientAppType.CASSP;\n         } else if (clientApp instanceof OIDCRP) {\n             type = ClientAppType.OIDCRP;\n         } else {\n@@ -56,6 +60,8 @@ public ClientAppUtils getInstance(final Class<? extends ClientAppTO> clientAppCl\n         ClientAppType type;\n         if (clientAppClass == SAML2SPTO.class) {\n             type = ClientAppType.SAML2SP;\n+        } else if (clientAppClass == CASSPTO.class) {\n+            type = ClientAppType.CASSP;\n         } else if (clientAppClass == OIDCRPTO.class) {\n             type = ClientAppType.OIDCRP;\n         } else {"},{"sha":"45aa0f6d5f79776236dcf693e2c2dfedd8ac4f6e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/CASSPTest.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FCASSPTest.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+@Transactional(\"Master\")\n+public class CASSPTest extends AbstractClientAppTest {\n+\n+    @Autowired\n+    private CASSPDAO casspDAO;\n+\n+    @Test\n+    public void find() {\n+        int beforeCount = casspDAO.findAll().size();\n+\n+        CASSP rp = entityFactory.newEntity(CASSP.class);\n+        rp.setName(\"CAS\");\n+        rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        rp.setDescription(\"This is a sample CAS RP\");\n+        rp.setServiceId(\"https://syncope.apache.org/.*\");\n+\n+        AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n+        rp.setAccessPolicy(accessPolicy);\n+\n+        AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n+        rp.setAuthPolicy(authPolicy);\n+\n+        casspDAO.save(rp);\n+\n+        assertNotNull(rp);\n+        assertNotNull(rp.getKey());\n+\n+        int afterCount = casspDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+\n+\n+        rp = casspDAO.findByName(\"CAS\");\n+        assertNotNull(rp);\n+        \n+        rp = casspDAO.findByClientAppId(rp.getClientAppId());\n+        assertNotNull(rp);\n+\n+        casspDAO.delete(rp);\n+        assertNull(casspDAO.findByName(\"CAS\"));\n+    }\n+}"},{"sha":"cc811fae5fa7ae7f557255a89dd9e3b4cb6865c8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":85,"deletions":3,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -19,13 +19,16 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.client.CASSPTO;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n@@ -34,7 +37,6 @@\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n \n @Component\n public class ClientAppDataBinderImpl implements ClientAppDataBinder {\n@@ -52,6 +54,8 @@ public <T extends ClientApp> T create(final ClientAppTO clientAppTO) {\n             return (T) doCreate((SAML2SPTO) clientAppTO);\n         } else if (clientAppTO instanceof OIDCRPTO) {\n             return (T) doCreate((OIDCRPTO) clientAppTO);\n+        } else if (clientAppTO instanceof CASSPTO) {\n+            return (T) doCreate((CASSPTO) clientAppTO);\n         } else {\n             throw new IllegalArgumentException(\"Unsupported client app: \" + clientAppTO.getClass().getName());\n         }\n@@ -63,6 +67,8 @@ public <T extends ClientApp> void update(final T clientApp, final ClientAppTO cl\n             doUpdate((SAML2SP) clientApp, (SAML2SPTO) clientAppTO);\n         } else if (clientAppTO instanceof OIDCRPTO) {\n             doUpdate((OIDCRP) clientApp, (OIDCRPTO) clientAppTO);\n+        } else if (clientAppTO instanceof CASSPTO) {\n+            doUpdate((CASSP) clientApp, (CASSPTO) clientAppTO);\n         } else {\n             throw new IllegalArgumentException(\"Unsupported client app: \" + clientAppTO.getClass().getName());\n         }\n@@ -75,6 +81,8 @@ public <T extends ClientAppTO> T getClientAppTO(final ClientApp clientApp) {\n             return (T) getClientAppTO((SAML2SP) clientApp);\n         } else if (clientApp instanceof OIDCRP) {\n             return (T) getClientAppTO((OIDCRP) clientApp);\n+        } else if (clientApp instanceof CASSP) {\n+            return (T) getClientAppTO((CASSP) clientApp);\n         } else {\n             throw new IllegalArgumentException(\"Unsupported client app: \" + clientApp.getClass().getName());\n         }\n@@ -86,6 +94,12 @@ private SAML2SP doCreate(final SAML2SPTO clientAppTO) {\n         return saml2sp;\n     }\n \n+    private CASSP doCreate(final CASSPTO clientAppTO) {\n+        CASSP saml2sp = entityFactory.newEntity(CASSP.class);\n+        update(saml2sp, clientAppTO);\n+        return saml2sp;\n+    }\n+\n     private void doUpdate(final SAML2SP clientApp, final SAML2SPTO clientAppTO) {\n         clientApp.setDescription(clientAppTO.getDescription());\n         clientApp.setName(clientAppTO.getName());\n@@ -147,7 +161,7 @@ private void doUpdate(final SAML2SP clientApp, final SAML2SPTO clientAppTO) {\n         }\n     }\n \n-    private SAML2SPTO getClientAppTO(final SAML2SP clientApp) {\n+    private static SAML2SPTO getClientAppTO(final SAML2SP clientApp) {\n         SAML2SPTO clientAppTO = new SAML2SPTO();\n \n         clientAppTO.setName(clientApp.getName());\n@@ -240,7 +254,7 @@ private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n         }\n     }\n \n-    private OIDCRPTO getClientAppTO(final OIDCRP clientApp) {\n+    private static OIDCRPTO getClientAppTO(final OIDCRP clientApp) {\n         OIDCRPTO clientAppTO = new OIDCRPTO();\n \n         clientAppTO.setName(clientApp.getName());\n@@ -265,4 +279,72 @@ private OIDCRPTO getClientAppTO(final OIDCRP clientApp) {\n \n         return clientAppTO;\n     }\n+\n+    private void doUpdate(final CASSP clientApp, final CASSPTO clientAppTO) {\n+        clientApp.setName(clientAppTO.getName());\n+        clientApp.setClientAppId(clientAppTO.getClientAppId());\n+        clientApp.setDescription(clientAppTO.getDescription());\n+        clientApp.setServiceId(clientAppTO.getServiceId());\n+\n+        if (clientAppTO.getAuthPolicy() == null) {\n+            clientApp.setAuthPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAuthPolicy());\n+            if (policy instanceof AuthPolicy) {\n+                clientApp.setAuthPolicy((AuthPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n+                    + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (clientAppTO.getAccessPolicy() == null) {\n+            clientApp.setAccessPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAccessPolicy());\n+            if (policy instanceof AccessPolicy) {\n+                clientApp.setAccessPolicy((AccessPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n+                    + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (clientAppTO.getAttrReleasePolicy() == null) {\n+            clientApp.setAttrReleasePolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAttrReleasePolicy());\n+            if (policy instanceof AttrReleasePolicy) {\n+                clientApp.setAttrReleasePolicy((AttrReleasePolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n+                    + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+    }\n+\n+    private static CASSPTO getClientAppTO(final CASSP clientApp) {\n+        CASSPTO clientAppTO = new CASSPTO();\n+\n+        clientAppTO.setName(clientApp.getName());\n+        clientAppTO.setKey(clientApp.getKey());\n+        clientAppTO.setDescription(clientApp.getDescription());\n+        clientAppTO.setClientAppId(clientApp.getClientAppId());\n+        clientAppTO.setServiceId(clientApp.getServiceId());\n+\n+        clientAppTO.setAuthPolicy(clientApp.getAuthPolicy() == null\n+            ? null : clientApp.getAuthPolicy().getKey());\n+        clientAppTO.setAccessPolicy(clientApp.getAccessPolicy() == null\n+            ? null : clientApp.getAccessPolicy().getKey());\n+        clientAppTO.setAttrReleasePolicy(clientApp.getAttrReleasePolicy() == null\n+            ? null : clientApp.getAttrReleasePolicy().getKey());\n+\n+        return clientAppTO;\n+    }\n }"},{"sha":"ba6cf59d7b7c3a66153d6f0990c26f15da04c8c2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -27,13 +27,17 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.to.client.CASSPTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n+import java.util.UUID;\n+\n public class ClientAppITCase extends AbstractITCase {\n \n     @Test\n@@ -99,6 +103,11 @@ public void createOIDCRP() {\n         createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n     }\n \n+    @Test\n+    public void createCASSP() {\n+        createClientApp(ClientAppType.CASSP, buildCASSP());\n+    }\n+\n     @Test\n     public void readOIDCRP() {\n         OIDCRPTO oidcrpTO = buildOIDCRP();\n@@ -115,6 +124,17 @@ public void readOIDCRP() {\n         assertNotNull(found.getAuthPolicy());\n     }\n \n+    @Test\n+    public void readCASSP() {\n+        CASSPTO casspTO = buildCASSP();\n+        casspTO = createClientApp(ClientAppType.CASSP, casspTO);\n+        CASSPTO found = clientAppService.read(ClientAppType.CASSP, casspTO.getKey());\n+        assertNotNull(found);\n+        assertNotNull(found.getServiceId());\n+        assertNotNull(found.getAccessPolicy());\n+        assertNotNull(found.getAuthPolicy());\n+    }\n+\n     @Test\n     public void updateOIDCRP() {\n         OIDCRPTO oidcrpTO = buildOIDCRP();\n@@ -151,4 +171,45 @@ public void delete() {\n             assertNotNull(e);\n         }\n     }\n+\n+    @Test\n+    public void deleteCASSP() {\n+        CASSPTO casspTO = buildCASSP();\n+        casspTO = createClientApp(ClientAppType.CASSP, casspTO);\n+\n+        clientAppService.delete(ClientAppType.CASSP, casspTO.getKey());\n+\n+        try {\n+            clientAppService.read(ClientAppType.CASSP, casspTO.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    private CASSPTO buildCASSP() {\n+        AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n+        authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n+        authPolicyTO.setDescription(\"Authentication Policy\");\n+        authPolicyTO = createPolicy(PolicyType.AUTH, authPolicyTO);\n+        assertNotNull(authPolicyTO);\n+\n+        AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n+        accessPolicyTO.setKey(\"AccessPolicyTest_\" + getUUIDString());\n+        accessPolicyTO.setDescription(\"Access policy\");\n+        accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n+        assertNotNull(accessPolicyTO);\n+\n+        CASSPTO casspTO = new CASSPTO();\n+        casspTO.setName(\"ExampleRP_\" + getUUIDString());\n+        casspTO.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        casspTO.setDescription(\"Example OIDC RP application\");\n+        casspTO.setServiceId(\"https://cassp.example.org/\" + UUID.randomUUID().getMostSignificantBits());\n+\n+        casspTO.setAuthPolicy(authPolicyTO.getKey());\n+        casspTO.setAccessPolicy(accessPolicyTO.getKey());\n+        return casspTO;\n+    }\n+\n+\n }"},{"sha":"d5b870dd2fbc5afcabddc77e9aa9e04bd00fd8e8","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPTOMapper.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4774ee8c4b9ec876d802b4481fb294d60dd23b48/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4774ee8c4b9ec876d802b4481fb294d60dd23b48/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java?ref=4774ee8c4b9ec876d802b4481fb294d60dd23b48","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter.mapping;\n+\n+import org.apereo.cas.services.RegexRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+\n+import org.apache.syncope.common.lib.to.client.CASSPTO;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.springframework.stereotype.Component;\n+\n+@ClientAppMapFor(clientAppClass = CASSPTO.class)\n+@Component\n+public class CASSPTOMapper implements ClientAppMapper {\n+\n+    @Override\n+    public RegisteredService build(\n+        final ClientAppTO clientAppTO,\n+        final RegisteredServiceAuthenticationPolicy authPolicy,\n+        final RegisteredServiceAccessStrategy accessStrategy,\n+        final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n+\n+        CASSPTO rp = CASSPTO.class.cast(clientAppTO);\n+\n+        RegexRegisteredService service = new RegexRegisteredService();\n+\n+        service.setServiceId(rp.getServiceId());\n+        service.setId(rp.getClientAppId());\n+        service.setName(rp.getName());\n+        service.setDescription(rp.getDescription());\n+        service.setAccessStrategy(accessStrategy);\n+        service.setAuthenticationPolicy(authPolicy);\n+        service.setAttributeReleasePolicy(attributeReleasePolicy);\n+\n+        return service;\n+    }\n+\n+}"}]}