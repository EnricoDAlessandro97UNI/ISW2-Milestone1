{"sha":"b96bb5a6172c52e46edb391236ae17eef95411c6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI5NmJiNWE2MTcyYzUyZTQ2ZWRiMzkxMjM2YWUxN2VlZjk1NDExYzY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-05T14:30:03Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-05T14:30:03Z"},"message":"Removing Date-related panels to avoid usage in 2.0.0","tree":{"sha":"d3bf712801b081a8d83bf01e8d433be950c41312","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d3bf712801b081a8d83bf01e8d433be950c41312"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b96bb5a6172c52e46edb391236ae17eef95411c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b96bb5a6172c52e46edb391236ae17eef95411c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b96bb5a6172c52e46edb391236ae17eef95411c6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b96bb5a6172c52e46edb391236ae17eef95411c6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"89f5ead3859fa29f75adbbea0901c0321107db09","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89f5ead3859fa29f75adbbea0901c0321107db09","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/89f5ead3859fa29f75adbbea0901c0321107db09"}],"stats":{"total":421,"additions":0,"deletions":421},"files":[{"sha":"1f5aaf6282405ec974ed709a0b7a9627186353cf","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/DateFieldPanel.java","status":"removed","additions":0,"deletions":132,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89f5ead3859fa29f75adbbea0901c0321107db09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89f5ead3859fa29f75adbbea0901c0321107db09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=89f5ead3859fa29f75adbbea0901c0321107db09","patch":"@@ -1,132 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.wicket.markup.html.form;\n-\n-import java.io.Serializable;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Locale;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n-import org.springframework.util.StringUtils;\n-\n-public class DateFieldPanel extends FieldPanel<Date> {\n-\n-    private static final long serialVersionUID = -428975732068281726L;\n-\n-    protected final String name;\n-\n-    protected final String datePattern;\n-\n-    protected DateFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n-        super(id, model);\n-        this.name = name;\n-        this.datePattern = datePattern;\n-    }\n-\n-    @Override\n-    public FieldPanel<Date> setNewModel(final List<Serializable> list) {\n-        final SimpleDateFormat formatter = datePattern == null\n-                ? new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.getDefault())\n-                : new SimpleDateFormat(datePattern, Locale.getDefault());\n-\n-        setNewModel(new Model<Date>() {\n-\n-            private static final long serialVersionUID = 527651414610325237L;\n-\n-            @Override\n-            public Date getObject() {\n-                Date date = null;\n-\n-                if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {\n-                    try {\n-                        // Parse string using datePattern\n-                        date = formatter.parse(list.get(0).toString());\n-                    } catch (ParseException e) {\n-                        LOG.error(\"invalid parse exception\", e);\n-                    }\n-                }\n-\n-                return date;\n-            }\n-\n-            @Override\n-            public void setObject(final Date object) {\n-                list.clear();\n-                if (object != null) {\n-                    list.add(formatter.format(object));\n-                }\n-            }\n-        });\n-\n-        return this;\n-    }\n-\n-    @SuppressWarnings(\"rawtypes\")\n-    @Override\n-    public FieldPanel<Date> setNewModel(final ListItem item) {\n-        final SimpleDateFormat formatter = datePattern == null\n-                ? new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.getDefault())\n-                : new SimpleDateFormat(datePattern, Locale.getDefault());\n-\n-        IModel<Date> model = new Model<Date>() {\n-\n-            private static final long serialVersionUID = 6799404673615637845L;\n-\n-            @Override\n-            public Date getObject() {\n-                Date date = null;\n-\n-                final Object obj = item.getModelObject();\n-\n-                if (obj != null && !obj.toString().isEmpty()) {\n-                    if (obj instanceof String) {\n-                        // Parse string using datePattern\n-                        try {\n-                            date = formatter.parse(obj.toString());\n-                        } catch (ParseException e) {\n-                            LOG.error(\"While parsing date\", e);\n-                        }\n-                    } else if (obj instanceof Date) {\n-                        // Don't parse anything\n-                        date = (Date) obj;\n-                    } else {\n-                        // consider Long\n-                        date = new Date((Long) obj);\n-                    }\n-                }\n-\n-                return date;\n-            }\n-\n-            @Override\n-            @SuppressWarnings(\"unchecked\")\n-            public void setObject(final Date object) {\n-                item.setModelObject(object != null ? formatter.format(object) : null);\n-            }\n-        };\n-\n-        field.setModel(model);\n-        return this;\n-    }\n-}"},{"sha":"add3de6506a73b23c10a53bc584abcb053fa2922","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/DateTextFieldPanel.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89f5ead3859fa29f75adbbea0901c0321107db09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89f5ead3859fa29f75adbbea0901c0321107db09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java?ref=89f5ead3859fa29f75adbbea0901c0321107db09","patch":"@@ -1,88 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.wicket.markup.html.form;\n-\n-import java.util.Date;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.datetime.markup.html.form.DateTextField;\n-import org.apache.wicket.extensions.yui.calendar.DatePicker;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n-\n-public class DateTextFieldPanel extends DateFieldPanel {\n-\n-    private static final long serialVersionUID = 1919852712185883648L;\n-\n-    public DateTextFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n-        super(id, name, model, datePattern);\n-\n-        field = DateTextField.forDatePattern(\"field\", model, datePattern);\n-\n-        if (!isReadOnly()) {\n-            field.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-                private static final long serialVersionUID = -1107858522700306810L;\n-\n-                @Override\n-                protected void onUpdate(final AjaxRequestTarget target) {\n-                    // nothing to do\n-                }\n-            });\n-        }\n-\n-        field.add(getDatePicker());\n-\n-        add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));\n-    }\n-\n-    /**\n-     * Setup a DatePicker component.\n-     */\n-    private DatePicker getDatePicker() {\n-        final DatePicker picker = new DatePicker() {\n-\n-            private static final long serialVersionUID = 4166072895162221956L;\n-\n-            @Override\n-            protected boolean enableMonthYearSelection() {\n-                return true;\n-            }\n-        };\n-\n-        picker.setShowOnFieldClick(true);\n-\n-        return picker;\n-    }\n-\n-    @Override\n-    public FieldPanel<Date> clone() {\n-        final FieldPanel<Date> panel = new DateTextFieldPanel(getId(), name, new Model<Date>(), datePattern);\n-        panel.setRequired(isRequired());\n-        panel.setReadOnly(isReadOnly());\n-        panel.setTitle(title);\n-\n-        if (isRequiredLabelAdded) {\n-            panel.addRequiredLabel();\n-        }\n-\n-        return panel;\n-    }\n-}"},{"sha":"67d72d179eccccf65363f98c7ea0adf03a4b93e2","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"removed","additions":0,"deletions":201,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/89f5ead3859fa29f75adbbea0901c0321107db09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/89f5ead3859fa29f75adbbea0901c0321107db09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=89f5ead3859fa29f75adbbea0901c0321107db09","patch":"@@ -1,201 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.wicket.markup.html.form;\n-\n-import java.util.Calendar;\n-import java.util.Date;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.wicket.AttributeModifier;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.extensions.yui.calendar.DateTimeField;\n-import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.markup.html.form.FormComponent;\n-import org.apache.wicket.markup.html.form.validation.AbstractFormValidator;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.validation.IValidationError;\n-import org.apache.wicket.validation.ValidationError;\n-\n-public class DateTimeFieldPanel extends DateFieldPanel {\n-\n-    private static final long serialVersionUID = -428975732068281726L;\n-\n-    private Form<?> form = null;\n-\n-    public DateTimeFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n-        super(id, name, model, datePattern);\n-\n-        field = new DateTimeField(\"field\", model);\n-\n-        final Calendar cal = Calendar.getInstance();\n-\n-        field.get(\"hours\").add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @SuppressWarnings(\"deprecation\")\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                final Integer hours = ((DateTimeField) field).getHours();\n-                if (hours != null) {\n-                    cal.set(hours > 12 ? Calendar.HOUR_OF_DAY : Calendar.HOUR, hours);\n-                    field.setModelObject(cal.getTime());\n-                }\n-            }\n-        });\n-\n-        field.get(\"minutes\").add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @SuppressWarnings(\"deprecation\")\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                final Integer minutes = ((DateTimeField) field).getMinutes();\n-                if (minutes != null) {\n-                    cal.set(Calendar.MINUTE, minutes);\n-                    field.setModelObject(cal.getTime());\n-                }\n-            }\n-        });\n-\n-        field.get(\"date\").add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @SuppressWarnings(\"deprecation\")\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                final Date date = ((DateTimeField) field).getDate();\n-                if (date == null) {\n-                    field.setModelObject(null);\n-                } else {\n-                    cal.setTime(date);\n-                    cal.set(Calendar.AM_PM, \"PM\".equals(\"\" + ((DateTimeField) field).getAmOrPm())\n-                            ? Calendar.PM\n-                            : Calendar.AM);\n-                    field.setModelObject(cal.getTime());\n-                }\n-            }\n-        });\n-\n-        field.get(\"amOrPmChoice\").add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @SuppressWarnings(\"deprecation\")\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                cal.set(Calendar.AM_PM, \"PM\".equals(\"\" + ((DateTimeField) field).getAmOrPm()) ? Calendar.PM\n-                        : Calendar.AM);\n-                field.setModelObject(cal.getTime());\n-            }\n-        });\n-\n-        add(field.setLabel(new Model<String>(name)).setOutputMarkupId(true));\n-    }\n-\n-    /**\n-     * Custom form validator for registering and handling DateTimeField components that are in it.\n-     */\n-    private class DateTimeFormValidator extends AbstractFormValidator {\n-\n-        private static final long serialVersionUID = 6842264694946633582L;\n-\n-        private FormComponent<?>[] dateTimeComponents;\n-\n-        public DateTimeFormValidator(final DateTimeField dateTimeComponent) {\n-            if (dateTimeComponent == null) {\n-                throw new IllegalArgumentException(\"argument dateTimeComponent cannot be null\");\n-            }\n-\n-            dateTimeComponents = new FormComponent<?>[] { dateTimeComponent };\n-        }\n-\n-        @Override\n-        public FormComponent<?>[] getDependentFormComponents() {\n-            return dateTimeComponents;\n-        }\n-\n-        /**\n-         * Validation rule : all 3 fields (date,hours,minutes) must be not-null.\n-         *\n-         * @param form\n-         */\n-        @SuppressWarnings(\"deprecation\")\n-        @Override\n-        public void validate(final Form<?> form) {\n-            final DateTimeField dateTimeField = (DateTimeField) dateTimeComponents[0];\n-\n-            if (!(dateTimeField.getDate() != null && dateTimeField.getHours() != null\n-                    && dateTimeField.getMinutes() != null)) {\n-\n-                ValidationError ve = new ValidationError();\n-                ve.setVariables(DateTimeFormValidator.this.variablesMap());\n-                ve.addKey(resourceKey());\n-                dateTimeComponents[0].error((IValidationError) ve);\n-            }\n-        }\n-    }\n-\n-    @SuppressWarnings(\"rawtypes\")\n-    public FieldPanel<Date> setFormValidator(final Form<?> form) {\n-        if (field == null) {\n-            LOG.error(\"Error setting form validator\");\n-        } else {\n-            form.add(new DateTimeFormValidator(((DateTimeField) field)));\n-            this.form = form;\n-        }\n-\n-        return this;\n-    }\n-\n-    @Override\n-    public FieldPanel<Date> setStyleSheet(final String classes) {\n-        field.get(\"date\").add(AttributeModifier.replace(\"class\", (classes == null ? \"\" : classes) + \" date_size\"));\n-\n-        field.get(\"hours\").add(AttributeModifier.replace(\"class\", classes == null ? \"\" : classes));\n-\n-        field.get(\"minutes\").add(AttributeModifier.replace(\"class\", classes == null ? \"\" : classes));\n-\n-        field.get(\"amOrPmChoice\").add(AttributeModifier.replace(\"class\", classes == null ? \"\" : classes));\n-\n-        return this;\n-    }\n-\n-    @Override\n-    public FieldPanel<Date> clone() {\n-        final FieldPanel<Date> panel = new DateTimeFieldPanel(getId(), name, new Model<Date>(null), datePattern);\n-\n-        panel.setRequired(isRequired());\n-        panel.setReadOnly(isReadOnly());\n-        panel.setTitle(title);\n-\n-        if (isRequiredLabelAdded) {\n-            panel.addRequiredLabel();\n-        }\n-\n-        if (form != null && isRequired()) {\n-            ((DateTimeFieldPanel) panel).setFormValidator(form);\n-        }\n-\n-        return panel;\n-    }\n-}"}]}