{"sha":"3028c41e3787e5d8b052209d8442d7fb1f3706b9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMwMjhjNDFlMzc4N2U1ZDhiMDUyMjA5ZDg0NDJkN2ZiMWYzNzA2Yjk=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-04T16:37:04Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-04T16:37:04Z"},"message":"[[SYNCOPE-231]\n* Extracting SchemaType from SchemaService Interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1442169 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4250e222a69e22d864985bb089150468951a67c9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4250e222a69e22d864985bb089150468951a67c9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3028c41e3787e5d8b052209d8442d7fb1f3706b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3028c41e3787e5d8b052209d8442d7fb1f3706b9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3028c41e3787e5d8b052209d8442d7fb1f3706b9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3028c41e3787e5d8b052209d8442d7fb1f3706b9/comments","author":null,"committer":null,"parents":[{"sha":"27e122bfe0b735eca2bee009a1fe23a49e864fc3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/27e122bfe0b735eca2bee009a1fe23a49e864fc3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/27e122bfe0b735eca2bee009a1fe23a49e864fc3"}],"stats":{"total":191,"additions":108,"deletions":83},"files":[{"sha":"7047c4c7eeb09f9e7b6f0bc6c55c48270f9ab975","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SchemaServiceProxy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.to.VirtualSchemaTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.types.SchemaType;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n @SuppressWarnings(\"unchecked\")\r"},{"sha":"58b8de6bdd57fc0bacbc8d7d67c624422e1ea547","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":1,"deletions":35,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -26,47 +26,13 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.core.Response;\r\n-import javax.xml.bind.annotation.XmlEnum;\r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.types.SchemaType;\r\n \r\n @Path(\"schemas/{kind}/{type}\")\r\n public interface SchemaService {\r\n \r\n-    @XmlEnum\r\n-    enum SchemaType {\r\n-\r\n-        /**\r\n-         * Derived schema calculated based on other attributes.\r\n-         */\r\n-        DERIVED(\"derivedSchema\"),\r\n-\r\n-        /**\r\n-         * Standard schema for normal attributes to be stored within syncope.\r\n-         */\r\n-        NORMAL(\"schema\"),\r\n-\r\n-        /**\r\n-         * Virtual schema for attributes fetched from remote resources only.\r\n-         */\r\n-        VIRTUAL(\"virtualSchema\");\r\n-\r\n-        public static SchemaType fromString(String value) {\r\n-            return SchemaType.valueOf(value.toUpperCase());\r\n-        }\r\n-\r\n-        // TODO remove name once CXF migration is complete\r\n-        private final String name;\r\n-\r\n-        private SchemaType(String name) {\r\n-            this.name = name;\r\n-        }\r\n-\r\n-        public String toSpringURL() {\r\n-            return name;\r\n-        }\r\n-    }\r\n-\r\n     /**\r\n      * @param kind Kind for schema to be created\r\n      * @param type Type for schema to be created\r"},{"sha":"9677be5a04b75f1051ad33819931ac6ad7daf6f9","filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+@XmlEnum\r\n+public\r\n+enum SchemaType {\r\n+\r\n+    /**\r\n+     * Derived schema calculated based on other attributes.\r\n+     */\r\n+    DERIVED(\"derivedSchema\"),\r\n+\r\n+    /**\r\n+     * Standard schema for normal attributes to be stored within syncope.\r\n+     */\r\n+    NORMAL(\"schema\"),\r\n+\r\n+    /**\r\n+     * Virtual schema for attributes fetched from remote resources only.\r\n+     */\r\n+    VIRTUAL(\"virtualSchema\");\r\n+\r\n+    public static SchemaType fromString(String value) {\r\n+        return SchemaType.valueOf(value.toUpperCase());\r\n+    }\r\n+\r\n+    // TODO remove name once CXF migration is complete\r\n+    private final String name;\r\n+\r\n+    private SchemaType(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String toSpringURL() {\r\n+        return name;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"83b1739c218d2ba681c8bebd6d7e0349e8c375ff","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -23,12 +23,12 @@\n \n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.SchemaService;\n-import org.apache.syncope.common.services.SchemaService.SchemaType;\n import org.apache.syncope.common.to.DerivedSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.ValidatorTO;\n import org.apache.syncope.common.to.VirtualSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;"},{"sha":"4258a31f2d32f2154cb5ba067c3b8a49fa596b86","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.to.VirtualSchemaTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.types.SchemaType;\r\n import org.apache.syncope.core.rest.controller.DerivedSchemaController;\r\n import org.apache.syncope.core.rest.controller.SchemaController;\r\n import org.apache.syncope.core.rest.controller.VirtualSchemaController;\r"},{"sha":"890442c7d05ec1eb3c86f1e73bb82f6f546509c1","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -67,7 +67,6 @@\n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.services.WorkflowService;\n-import org.apache.syncope.common.services.SchemaService.SchemaType;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.PolicyTO;\n@@ -76,6 +75,7 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\n import org.junit.Before;\n import org.junit.runner.RunWith;"},{"sha":"cb27d06604b561e1c893feb28f4f58f876e4420c","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n@@ -91,7 +92,7 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(AttributeSchemaType.String);\n \n-        response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         SchemaTO newSchemaTO = getObject(response, SchemaTO.class, entitlementService);\n         assertEquals(schemaTO, newSchemaTO);\n \n@@ -110,18 +111,18 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(userTO);\n \n         // 3. read the schema created above (as admin) - success\n-        schemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaName);\n+        schemaTO = schemaService.read(AttributableType.USER, SchemaType.NORMAL, schemaName);\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n         SchemaService schemaService2 = setupCredentials(schemaService, SchemaService.class, userTO.getUsername(), \"password123\");\n \n-        schemaTO = schemaService2.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaName);\n+        schemaTO = schemaService2.read(AttributableType.USER, SchemaType.NORMAL, schemaName);\n         assertNotNull(schemaTO);\n \n         // 5. update the schema create above (as user) - failure\n         try {\n-            schemaService2.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaName, schemaTO);\n+            schemaService2.update(AttributableType.ROLE, SchemaType.NORMAL, schemaName, schemaTO);\n             fail(\"Schemaupdate as user schould not work\");\n         } catch (HttpClientErrorException e) {\n             assertNotNull(e);"},{"sha":"436764e52cce64eba6ac73e60d4f5395124d8829","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -27,9 +27,9 @@\n import javax.ws.rs.core.Response;\n \n import org.apache.http.HttpStatus;\n-import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.DerivedSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.junit.FixMethodOrder;\n@@ -43,7 +43,7 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n     public void list() {\n         @SuppressWarnings(\"unchecked\")\n         List<DerivedSchemaTO> derivedSchemas = (List<DerivedSchemaTO>) schemaService.list(AttributableType.USER,\n-                SchemaService.SchemaType.DERIVED);\n+                SchemaType.DERIVED);\n         assertFalse(derivedSchemas.isEmpty());\n         for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);\n@@ -52,7 +52,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        DerivedSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED,\n+        DerivedSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaType.DERIVED,\n                 \"cn\");\n         assertNotNull(derivedSchemaTO);\n     }\n@@ -63,33 +63,33 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n+        Response response = createSchema(AttributableType.USER, SchemaType.DERIVED, schema);\n         DerivedSchemaTO actual = getObject(response, DerivedSchemaTO.class, schemaService);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED, actual.getName());\n+        actual = schemaService.read(AttributableType.USER, SchemaType.DERIVED, actual.getName());\n         assertNotNull(actual);\n         assertEquals(actual.getExpression(), \"derived_sx + '_' + derived_dx\");\n     }\n \n     @Test\n     public void delete() {\n-        DerivedSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.DERIVED,\n+        DerivedSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED,\n                 \"rderiveddata\");\n         assertNotNull(schema);\n \n-        schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.DERIVED,\n+        schemaService.delete(AttributableType.ROLE, SchemaType.DERIVED,\n                 schema.getName());\n \n         Throwable t = null;\n         try {\n-            schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n+            schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         } finally {\n             // Recreate schema to make test re-runnable\n-            Response response = createSchema(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schema);\n+            Response response = createSchema(AttributableType.ROLE, SchemaType.DERIVED, schema);\n             assertNotNull(response);\n             assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n         }\n@@ -98,23 +98,23 @@ public void delete() {\n \n     @Test\n     public void update() {\n-        DerivedSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED,\n+        DerivedSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n                 \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n         try {\n             schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n \n-            schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED,\n+            schemaService.update(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n                     schema.getName(), schema);\n \n-            schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n+            schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.DERIVED, \"mderiveddata\");\n             assertNotNull(schema);\n             assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n         } finally {\n             // Set updated back to make test re-runnable\n             schema.setExpression(\"mderived_sx + '-' + mderived_dx\");\n-            schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED,\n+            schemaService.update(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n                     schema.getName(), schema);\n         }\n     }"},{"sha":"e4338b727323b892ef9ab6bae2880db9ab2992ab","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -30,13 +30,13 @@\n import javax.ws.rs.core.Response;\n \n import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -55,11 +55,11 @@ public void create() {\n         SchemaTO schemaTO = buildSchemaTO(\"testAttribute\", AttributeSchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n \n-        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         SchemaTO newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        response = createSchema(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n+        response = createSchema(AttributableType.MEMBERSHIP, SchemaType.NORMAL, schemaTO);\n         newSchemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n@@ -71,7 +71,7 @@ public void createWithNotPermittedName() {\n         schemaTO.setType(AttributeSchemaType.String);\n \n         try {\n-            createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+            createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -89,7 +89,7 @@ public void createREnumWithoutEnumeration() {\n         schemaTO.setType(AttributeSchemaType.Enum);\n \n         try {\n-            createSchema(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO);\n+            createSchema(AttributableType.ROLE, SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -108,7 +108,7 @@ public void createUEnumWithoutEnumeration() {\n         schemaTO.setType(AttributeSchemaType.Enum);\n \n         try {\n-            createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+            createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -124,12 +124,12 @@ public void createUEnumWithoutEnumeration() {\n     public void delete() {\n         SchemaTO schemaTO = buildSchemaTO(\"todelete\", AttributeSchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n-        createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n \n-        schemaService.delete(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n+        schemaService.delete(AttributableType.USER, SchemaType.NORMAL, schemaTO.getName());\n         SchemaTO firstname = null;\n         try {\n-            firstname = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName());\n+            firstname = schemaService.read(AttributableType.USER, SchemaType.NORMAL, schemaTO.getName());\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -139,20 +139,20 @@ public void delete() {\n     @SuppressWarnings(\"unchecked\")\n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas = (List<SchemaTO>) schemaService.list(AttributableType.USER, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> userSchemas = (List<SchemaTO>) schemaService.list(AttributableType.USER, SchemaType.NORMAL);\n         assertFalse(userSchemas.isEmpty());\n         for (SchemaTO schemaTO : userSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> roleSchemas = (List<SchemaTO>) schemaService.list(AttributableType.ROLE, SchemaService.SchemaType.NORMAL);\n+        List<SchemaTO> roleSchemas = (List<SchemaTO>) schemaService.list(AttributableType.ROLE, SchemaType.NORMAL);\n         assertFalse(roleSchemas.isEmpty());\n         for (SchemaTO schemaTO : roleSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n         List<SchemaTO> membershipSchemas = (List<SchemaTO>) schemaService.list(AttributableType.MEMBERSHIP,\n-                SchemaService.SchemaType.NORMAL);\n+                SchemaType.NORMAL);\n         assertFalse(membershipSchemas.isEmpty());\n         for (SchemaTO schemaTO : membershipSchemas) {\n             assertNotNull(schemaTO);\n@@ -161,17 +161,17 @@ public void list() {\n \n     @Test\n     public void update() {\n-        SchemaTO schemaTO = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n+        SchemaTO schemaTO = schemaService.read(AttributableType.ROLE, SchemaType.NORMAL, \"icon\");\n         assertNotNull(schemaTO);\n \n-        schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL,\n+        schemaService.update(AttributableType.ROLE, SchemaType.NORMAL,\n                 schemaTO.getName(), schemaTO);\n-        SchemaTO updatedTO = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n+        SchemaTO updatedTO = schemaService.read(AttributableType.ROLE, SchemaType.NORMAL, \"icon\");\n         assertEquals(schemaTO, updatedTO);\n \n         updatedTO.setType(AttributeSchemaType.Date);\n         try {\n-            schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), updatedTO);\n+            schemaService.update(AttributableType.ROLE, SchemaType.NORMAL, schemaTO.getName(), updatedTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -185,7 +185,7 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(AttributeSchemaType.Double);\n \n-        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n@@ -197,7 +197,7 @@ public void issue258() {\n \n         schemaTO.setType(AttributeSchemaType.Long);\n         try {\n-            schemaService.update(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(AttributableType.USER, SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -210,7 +210,7 @@ public void issue259() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue259\", AttributeSchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n@@ -235,7 +235,7 @@ public void issue260() {\n         SchemaTO schemaTO = buildSchemaTO(\"schema_issue260\", AttributeSchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n+        Response response = createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n         schemaTO = getObject(response, SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n@@ -246,7 +246,7 @@ public void issue260() {\n \n         schemaTO.setUniqueConstraint(false);\n         try {\n-            schemaService.update(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(AttributableType.USER, SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);"},{"sha":"e1000077cb1c4f0f31245d7b57ee32456b107e12","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3028c41e3787e5d8b052209d8442d7fb1f3706b9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=3028c41e3787e5d8b052209d8442d7fb1f3706b9","patch":"@@ -25,9 +25,9 @@\n \n import javax.ws.rs.core.Response;\n \n-import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.VirtualSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.junit.FixMethodOrder;\n@@ -40,7 +40,7 @@ public class VirtualSchemaTestITCase extends AbstractTest {\n     @Test\n     public void list() {\n         @SuppressWarnings(\"unchecked\")\n-        List<VirtualSchemaTO> vSchemas = (List<VirtualSchemaTO>) schemaService.list(AttributableType.USER, SchemaService.SchemaType.VIRTUAL);\n+        List<VirtualSchemaTO> vSchemas = (List<VirtualSchemaTO>) schemaService.list(AttributableType.USER, SchemaType.VIRTUAL);\n         assertFalse(vSchemas.isEmpty());\n         for (VirtualSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n@@ -49,7 +49,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        VirtualSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.VIRTUAL,\n+        VirtualSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL,\n                 \"mvirtualdata\");\n         assertNotNull(vSchemaTO);\n     }\n@@ -59,26 +59,26 @@ public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n+        Response response = createSchema(AttributableType.USER, SchemaType.VIRTUAL, schema);\n         VirtualSchemaTO actual = getObject(response, VirtualSchemaTO.class, schemaService);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, actual.getName());\n+        actual = schemaService.read(AttributableType.USER, SchemaType.VIRTUAL, actual.getName());\n         assertNotNull(actual);\n     }\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL,\n+        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL,\n                 \"rvirtualdata\");\n         assertNotNull(schema);\n \n-        schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL,\n+        schemaService.delete(AttributableType.ROLE, SchemaType.VIRTUAL,\n                 schema.getName());\n \n         Throwable t = null;\n         try {\n-            schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n+            schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL, \"rvirtualdata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));"}]}