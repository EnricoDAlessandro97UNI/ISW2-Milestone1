{"sha":"dd1c82adc6cfd340f198c6123971bff27a826562","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRkMWM4MmFkYzZjZmQzNDBmMTk4YzYxMjM5NzFiZmYyN2E4MjY1NjI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-01-25T16:12:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-01-25T16:56:11Z"},"message":"[SYNCOPE-1610] Refactoring ReconQuery to work with FIQL (#234)","tree":{"sha":"53ada057f2930d31850129c95f14d2fbbd0a26a3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/53ada057f2930d31850129c95f14d2fbbd0a26a3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dd1c82adc6cfd340f198c6123971bff27a826562","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd1c82adc6cfd340f198c6123971bff27a826562","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dd1c82adc6cfd340f198c6123971bff27a826562","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd1c82adc6cfd340f198c6123971bff27a826562/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"235f0500e21152f87142da45e6aa4fcd519a8b1e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/235f0500e21152f87142da45e6aa4fcd519a8b1e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/235f0500e21152f87142da45e6aa4fcd519a8b1e"}],"stats":{"total":1043,"additions":726,"deletions":317},"files":[{"sha":"afe327818c6db317f37dae6898f38cae687bba50","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":39,"deletions":21,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -27,6 +27,8 @@\n import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.ListViewPanel.ListViewReload;\n import org.apache.syncope.client.console.panels.search.AbstractSearchPanel;\n import org.apache.syncope.client.console.panels.search.ConnObjectSearchPanel;\n@@ -70,11 +72,15 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.model.util.ListModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class ConnObjectListViewPanel extends Panel {\n \n     private static final long serialVersionUID = 4986172040062752781L;\n \n+    private static final Logger LOG = LoggerFactory.getLogger(ConnObjectListViewPanel.class);\n+\n     private static final int SIZE = 10;\n \n     private static final String STATUS = \"Status\";\n@@ -139,25 +145,31 @@ public void onClick(final AjaxRequestTarget target) {\n         accordion.setOutputMarkupId(true);\n         add(accordion.setEnabled(true).setVisible(true));\n \n-        final List<ConnObjectTO> listOfItems = reloadItems(resource.getKey(), anyType, null, null);\n+        List<ConnObjectTO> listOfItems = reloadItems(resource.getKey(), anyType, null, null);\n \n-        final ListViewPanel.Builder<ConnObjectTO> builder = new ListViewPanel.Builder<ConnObjectTO>(\n+        ListViewPanel.Builder<ConnObjectTO> builder = new ListViewPanel.Builder<ConnObjectTO>(\n                 ConnObjectTO.class, pageRef) {\n \n             private static final long serialVersionUID = -8251750413385566738L;\n \n             @Override\n             protected Component getValueComponent(final String key, final ConnObjectTO bean) {\n                 if (StringUtils.equals(key, STATUS)) {\n-                    ReconStatus status = ReconciliationRestClient.status(\n-                            new ReconQuery.Builder(anyType, resource.getKey()).\n-                                    connObjectKeyValue(bean.getAttr(ConnIdSpecialName.UID).get().getValues().get(0)).\n-                                    build());\n+                    ReconStatus status;\n+                    try {\n+                        status = ReconciliationRestClient.status(\n+                                new ReconQuery.Builder(anyType, resource.getKey()).fiql(bean.getFiql()).build());\n+                    } catch (Exception e) {\n+                        LOG.error(\"While requesting for reconciliation status of {} {} with FIQL '{}'\",\n+                                anyType, resource.getKey(), bean.getFiql(), e);\n+\n+                        status = new ReconStatus();\n+                    }\n \n                     return status.getOnSyncope() == null\n                             ? StatusUtils.getLabel(\"field\", \"notfound icon\", \"Not found\", Constants.NOT_FOUND_ICON)\n                             : new Label(\"field\", Model.of()).add(new PopoverBehavior(\n-                                    Model.<String>of(),\n+                                    Model.of(),\n                                     Model.of(status.getAnyKey()),\n                                     new PopoverConfig().\n                                             withTitle(status.getMatchType() == MatchType.LINKED_ACCOUNT\n@@ -214,19 +226,25 @@ public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObje\n \n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObject) {\n-                    String connObjectKeyValue = modelObject.getAttr(ConnIdSpecialName.UID).get().getValues().get(0);\n-                    ReconStatus status = ReconciliationRestClient.status(\n-                            new ReconQuery.Builder(anyType, resource.getKey()).\n-                                    connObjectKeyValue(connObjectKeyValue).build());\n-\n-                    pullConnObject(\n-                            connObjectKeyValue,\n-                            target,\n-                            resource.getKey(),\n-                            anyType,\n-                            status.getRealm(),\n-                            StringUtils.isNotBlank(status.getAnyKey()),\n-                            pageRef);\n+                    try {\n+                        ReconStatus status = ReconciliationRestClient.status(\n+                                new ReconQuery.Builder(anyType, resource.getKey()).fiql(modelObject.getFiql()).build());\n+\n+                        pullConnObject(\n+                                modelObject.getFiql(),\n+                                target,\n+                                resource.getKey(),\n+                                anyType,\n+                                status.getRealm(),\n+                                StringUtils.isNotBlank(status.getAnyKey()),\n+                                pageRef);\n+                    } catch (Exception e) {\n+                        LOG.error(\"While puling single object {} {} with FIQL '{}'\",\n+                                anyType, resource.getKey(), modelObject.getFiql(), e);\n+\n+                        SyncopeConsoleSession.get().onException(e);\n+                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                    }\n                 }\n             }, ActionLink.ActionType.RECONCILIATION_PULL, IdRepoEntitlement.TASK_EXECUTE);\n \n@@ -272,7 +290,7 @@ public void onEvent(final IEvent<?> event) {\n     protected abstract void viewConnObject(ConnObjectTO connObjectTO, AjaxRequestTarget target);\n \n     protected abstract void pullConnObject(\n-            String connObjectTO,\n+            String fiql,\n             AjaxRequestTarget target,\n             String resource,\n             String anyType,"},{"sha":"4af0ea9d15a26a626fef61ab7caf0a451d7cc787","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjects.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -128,13 +128,14 @@ protected void viewConnObject(final ConnObjectTO connObjectTO, final AjaxRequest\n \n         @Override\n         protected void pullConnObject(\n-                final String connObjectKeyValue,\n+                final String fiql,\n                 final AjaxRequestTarget target,\n                 final String resource,\n                 final String anyType,\n                 final String realm,\n                 final boolean isOnSyncope,\n                 final PageReference pageRef) {\n+\n             anyTypes.setEnabled(false);\n             target.add(anyTypes);\n \n@@ -146,13 +147,12 @@ protected void pullConnObject(\n                             pullTaskTO,\n                             anyType,\n                             null,\n-                            connObjectKeyValue,\n+                            fiql,\n                             isOnSyncope,\n                             connObjects,\n                             pageRef),\n                     target\n             );\n         }\n-\n     }\n }"},{"sha":"3e1b62b00540e54e3a7bc84b1bac96502f4972d6","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/LinkedAccountModalPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLinkedAccountModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLinkedAccountModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLinkedAccountModalPanel.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksTogglePanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.console.wizards.any.LinkedAccountWizardBuilder;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n@@ -272,7 +273,7 @@ public void onClick(final AjaxRequestTarget target, final LinkedAccountTO linked\n                                 new PushTaskTO(),\n                                 model.getObject().getType(),\n                                 null,\n-                                linkedAccountTO.getConnObjectKeyValue(),\n+                                ConnIdSpecialName.UID + \"==\" + linkedAccountTO.getConnObjectKeyValue(),\n                                 true,\n                                 mlp,\n                                 pageRef),\n@@ -298,7 +299,7 @@ public void onClick(final AjaxRequestTarget target, final LinkedAccountTO linked\n                                 new PullTaskTO(),\n                                 model.getObject().getType(),\n                                 null,\n-                                linkedAccountTO.getConnObjectKeyValue(),\n+                                ConnIdSpecialName.UID + \"==\" + linkedAccountTO.getConnObjectKeyValue(),\n                                 true,\n                                 mlp,\n                                 pageRef),"},{"sha":"81d7879c27d11fee84d2b54dbffabdfe82dd082e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconStatusUtils.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusUtils.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -26,6 +26,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.rest.ReconciliationRestClient;\n+import org.apache.syncope.client.ui.commons.ConnIdSpecialName;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.slf4j.Logger;\n@@ -42,8 +43,8 @@ public static Optional<ReconStatus> getReconStatus(\n \n         ReconStatus result = null;\n         try {\n-            result = ReconciliationRestClient.status(\n-                    new ReconQuery.Builder(anyTypeKey, resource).connObjectKeyValue(connObjectKeyValue).build());\n+            result = ReconciliationRestClient.status(new ReconQuery.Builder(anyTypeKey, resource).\n+                    fiql(ConnIdSpecialName.UID + \"==\" + connObjectKeyValue).build());\n         } catch (Exception e) {\n             LOG.warn(\"Unexpected error for {} {} on {}\", anyTypeKey, connObjectKeyValue, resource, e);\n         }"},{"sha":"f6bce2f56adcb3fdc41e3742c053e6c4c0539e9c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconTaskPanel.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -95,6 +95,7 @@ public ReconTaskPanel(\n             final boolean isOnSyncope,\n             final MultilevelPanel multiLevelPanelRef,\n             final PageReference pageRef) {\n+\n         this(resource, taskTO, anyType, anyKey, null, isOnSyncope, multiLevelPanelRef, pageRef);\n     }\n \n@@ -103,7 +104,7 @@ public ReconTaskPanel(\n             final ProvisioningTaskTO taskTO,\n             final String anyType,\n             final String anyKey,\n-            final String connObjectKeyValue,\n+            final String fiql,\n             final boolean isOnSyncope,\n             final MultilevelPanel multiLevelPanelRef,\n             final PageReference pageRef) {\n@@ -194,9 +195,7 @@ protected Iterator<String> getChoices(final String input) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target) {\n-                ReconQuery reconQuery = new ReconQuery.Builder(anyType, resource).\n-                        anyKey(anyKey).\n-                        connObjectKeyValue(connObjectKeyValue).build();\n+                ReconQuery reconQuery = new ReconQuery.Builder(anyType, resource).anyKey(anyKey).fiql(fiql).build();\n                 try {\n                     if (taskTO instanceof PushTaskTO) {\n                         ReconciliationRestClient.push(reconQuery, (PushTaskTO) form.getModelObject());"},{"sha":"7f1fa0253a62fe683f1470d9be0c0c29ef491802","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/MergeLinkedAccountsWizardBuilder.java","status":"modified","additions":43,"deletions":35,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsWizardBuilder.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.util.HashMap;\n import java.util.List;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n import javax.ws.rs.HttpMethod;\n@@ -43,6 +43,7 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n@@ -78,7 +79,7 @@ public MergeLinkedAccountsWizardBuilder(\n \n     @Override\n     protected WizardModel buildModelSteps(final UserTO modelObject, final WizardModel wizardModel) {\n-        this.model = new MergeLinkedAccountsWizardModel(modelObject);\n+        model = new MergeLinkedAccountsWizardModel(modelObject);\n         wizardModel.add(new MergeLinkedAccountsSearchPanel(model, getPageReference()));\n         wizardModel.add(new MergeLinkedAccountsResourcesPanel(model, getPageReference()));\n         wizardModel.add(new MergeLinkedAccountsReviewPanel(model, getPageReference()));\n@@ -91,69 +92,76 @@ public void onEvent(final IEvent<?> event) {\n             ((AjaxWizard.NewItemCancelEvent<?>) event.getPayload()).getTarget().ifPresent(modal::close);\n         }\n         if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n-            Optional<AjaxRequestTarget> targetResult =\n+            Optional<AjaxRequestTarget> target =\n                     ((AjaxWizard.NewItemFinishEvent<?>) event.getPayload()).getTarget();\n             try {\n                 mergeAccounts();\n-                this.parentPanel.info(this.parentPanel.getString(Constants.OPERATION_SUCCEEDED));\n-                targetResult.ifPresent(target -> {\n-                    ((BasePage) this.parentPanel.getPage()).getNotificationPanel().refresh(target);\n-                    parentPanel.updateResultTable(target);\n-                    modal.close(target);\n+\n+                parentPanel.info(parentPanel.getString(Constants.OPERATION_SUCCEEDED));\n+                target.ifPresent(t -> {\n+                    ((BasePage) parentPanel.getPage()).getNotificationPanel().refresh(t);\n+                    parentPanel.updateResultTable(t);\n+                    modal.close(t);\n                 });\n             } catch (Exception e) {\n-                this.parentPanel.error(this.parentPanel.getString(Constants.ERROR) + \": \" + e.getMessage());\n-                targetResult.ifPresent(target -> ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target));\n+                parentPanel.error(parentPanel.getString(Constants.ERROR) + \": \" + e.getMessage());\n+                target.ifPresent(t -> ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(t));\n             }\n         }\n     }\n \n     private void mergeAccounts() throws Exception {\n-        ResourceRestClient resourceRestClient = new ResourceRestClient();\n-\n-        UserTO mergingUserTO = this.model.getMergingUser();\n+        UserTO mergingUserTO = model.getMergingUser();\n \n         UserUR userUR = new UserUR();\n-        userUR.setKey(this.model.getBaseUser().getUsername());\n+        userUR.setKey(model.getBaseUser().getUsername());\n \n         // Move linked accounts into the target/base user as linked accounts\n         mergingUserTO.getLinkedAccounts().forEach(acct -> {\n             LinkedAccountTO linkedAccount =\n-                    new LinkedAccountTO.Builder(acct.getResource(), acct.getConnObjectKeyValue())\n-                            .password(acct.getPassword())\n-                            .suspended(acct.isSuspended())\n-                            .username(acct.getUsername())\n-                            .build();\n+                    new LinkedAccountTO.Builder(acct.getResource(), acct.getConnObjectKeyValue()).\n+                            password(acct.getPassword()).\n+                            suspended(acct.isSuspended()).\n+                            username(acct.getUsername()).\n+                            build();\n             linkedAccount.getPlainAttrs().addAll(acct.getPlainAttrs());\n             linkedAccount.getPrivileges().addAll(acct.getPrivileges());\n-            userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().linkedAccountTO(linkedAccount).build());\n+            LinkedAccountUR patch = new LinkedAccountUR.Builder().\n+                    linkedAccountTO(linkedAccount).\n+                    operation(PatchOperation.ADD_REPLACE).\n+                    build();\n+            userUR.getLinkedAccounts().add(patch);\n         });\n \n         // Move merging user's resources into the target/base user as a linked account\n         mergingUserTO.getResources().forEach(resource -> {\n-            String connObjectKeyValue = resourceRestClient.getConnObjectKeyValue(resource,\n+            String connObjectKeyValue = ResourceRestClient.getConnObjectKeyValue(resource,\n                     mergingUserTO.getType(), mergingUserTO.getKey());\n-            LinkedAccountTO linkedAccount =\n-                    new LinkedAccountTO.Builder(resource, connObjectKeyValue)\n-                            .build();\n+            LinkedAccountTO linkedAccount = new LinkedAccountTO.Builder(resource, connObjectKeyValue).build();\n             linkedAccount.getPlainAttrs().addAll(mergingUserTO.getPlainAttrs());\n             linkedAccount.getPrivileges().addAll(mergingUserTO.getPrivileges());\n-            userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().linkedAccountTO(linkedAccount).build());\n+            LinkedAccountUR patch = new LinkedAccountUR.Builder().\n+                    linkedAccountTO(linkedAccount).\n+                    operation(PatchOperation.ADD_REPLACE).\n+                    build();\n+            userUR.getLinkedAccounts().add(patch);\n         });\n \n         // Move merging user into target/base user as a linked account\n-        String connObjectKeyValue = resourceRestClient.getConnObjectKeyValue(\n-                this.model.getResource().getKey(),\n+        String connObjectKeyValue = ResourceRestClient.getConnObjectKeyValue(\n+                model.getResource().getKey(),\n                 mergingUserTO.getType(), mergingUserTO.getKey());\n-        LinkedAccountTO linkedAccount =\n-                new LinkedAccountTO.Builder(this.model.getResource().getKey(), connObjectKeyValue)\n-                        .password(mergingUserTO.getPassword())\n-                        .suspended(mergingUserTO.isSuspended())\n-                        .username(mergingUserTO.getUsername())\n-                        .build();\n+        LinkedAccountTO linkedAccount = new LinkedAccountTO.Builder(model.getResource().getKey(), connObjectKeyValue).\n+                password(mergingUserTO.getPassword()).\n+                suspended(mergingUserTO.isSuspended()).\n+                username(mergingUserTO.getUsername()).\n+                build();\n         linkedAccount.getPlainAttrs().addAll(mergingUserTO.getPlainAttrs());\n         linkedAccount.getPrivileges().addAll(mergingUserTO.getPrivileges());\n-        userUR.getLinkedAccounts().add(new LinkedAccountUR.Builder().linkedAccountTO(linkedAccount).build());\n+        LinkedAccountUR patch = new LinkedAccountUR.Builder().linkedAccountTO(linkedAccount).\n+                operation(PatchOperation.ADD_REPLACE).\n+                build();\n+        userUR.getLinkedAccounts().add(patch);\n \n         BatchRequest batchRequest = SyncopeConsoleSession.get().batch();\n \n@@ -168,7 +176,7 @@ private void mergeAccounts() throws Exception {\n         String updateUserPayload = MAPPER.writeValueAsString(userUR);\n         BatchRequestItem updateUser = new BatchRequestItem();\n         updateUser.setMethod(HttpMethod.PATCH);\n-        updateUser.setRequestURI(\"/users/\" + this.model.getBaseUser().getUsername());\n+        updateUser.setRequestURI(\"/users/\" + model.getBaseUser().getUsername());\n         updateUser.setHeaders(new HashMap<>());\n         updateUser.getHeaders().put(RESTHeaders.PREFER, List.of(Preference.RETURN_NO_CONTENT.toString()));\n         updateUser.getHeaders().put(HttpHeaders.ACCEPT, List.of(MediaType.APPLICATION_JSON));"},{"sha":"99d2c9a528f54fb9fadf690de7db42476c50ea6e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":53,"deletions":17,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -67,29 +67,52 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession implements Ba\n \n     private static final long serialVersionUID = 747562246415852166L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeConsoleSession.class);\n+    public enum Error {\n+        SESSION_EXPIRED(\"error.session.expired\", \"Session expired: please login again\"),\n+        AUTHORIZATION(\"error.authorization\", \"Insufficient access rights when performing the requested operation\"),\n+        REST(\"error.rest\", \"There was an error while contacting the Core server\");\n \n-    private final SyncopeClientFactoryBean clientFactory;\n+        private final String key;\n \n-    private final SyncopeClient anonymousClient;\n+        private final String fallback;\n \n-    private final PlatformInfo platformInfo;\n+        Error(final String key, final String fallback) {\n+            this.key = key;\n+            this.fallback = fallback;\n+        }\n+\n+        public String key() {\n+            return key;\n+        }\n+\n+        public String fallback() {\n+            return fallback;\n+        }\n+    }\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeConsoleSession.class);\n \n-    private final SystemInfo systemInfo;\n+    protected final SyncopeClientFactoryBean clientFactory;\n \n-    private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<>());\n+    protected final SyncopeClient anonymousClient;\n \n-    private final ThreadPoolTaskExecutor executor;\n+    protected final PlatformInfo platformInfo;\n \n-    private String domain;\n+    protected final SystemInfo systemInfo;\n \n-    private SyncopeClient client;\n+    protected final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<>());\n \n-    private UserTO selfTO;\n+    protected final ThreadPoolTaskExecutor executor;\n \n-    private Map<String, Set<String>> auth;\n+    protected String domain;\n \n-    private Roles roles;\n+    protected SyncopeClient client;\n+\n+    protected UserTO selfTO;\n+\n+    protected Map<String, Set<String>> auth;\n+\n+    protected Roles roles;\n \n     public static SyncopeConsoleSession get() {\n         return (SyncopeConsoleSession) Session.get();\n@@ -114,16 +137,29 @@ public SyncopeConsoleSession(final Request request) {\n         executor.initialize();\n     }\n \n+    protected String message(final SyncopeClientException sce) {\n+        return sce.getType().name() + \": \" + sce.getElements().stream().collect(Collectors.joining(\", \"));\n+    }\n+\n+    /**\n+     * Extract and localize (if translation available) the actual message from the given exception; then, report it\n+     * via {@link Session#error(java.io.Serializable)}.\n+     *\n+     * @see org.apache.syncope.client.lib.RestClientExceptionMapper\n+     *\n+     * @param e raised exception\n+     */\n     @Override\n     public void onException(final Exception e) {\n         Throwable root = ExceptionUtils.getRootCause(e);\n         String message = root.getMessage();\n \n         if (root instanceof SyncopeClientException) {\n             SyncopeClientException sce = (SyncopeClientException) root;\n-            if (!sce.isComposite()) {\n-                message = sce.getElements().stream().collect(Collectors.joining(\", \"));\n-            }\n+            message = sce.isComposite()\n+                    ? sce.asComposite().getExceptions().stream().\n+                            map(c -> message(c)).collect(Collectors.joining(\"; \"))\n+                    : message(sce);\n         } else if (root instanceof AccessControlException || root instanceof ForbiddenException) {\n             Error error = StringUtils.containsIgnoreCase(message, \"expired\")\n                     ? Error.SESSION_EXPIRED\n@@ -256,7 +292,7 @@ public List<String> getAuthRealms() {\n     public List<String> getSearchableRealms() {\n         Set<String> roots = auth.get(IdRepoEntitlement.REALM_LIST);\n         return roots.isEmpty()\n-                ? Collections.emptyList()\n+                ? List.of()\n                 : roots.stream().sorted().collect(Collectors.toList());\n     }\n \n@@ -328,7 +364,7 @@ public void refreshAuth(final String username) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T> T getCachedService(final Class<T> serviceClass) {\n+    protected <T> T getCachedService(final Class<T> serviceClass) {\n         T service;\n         if (services.containsKey(serviceClass)) {\n             service = (T) services.get(serviceClass);"},{"sha":"d4c4bdb7160dc517c21b8a438f826ed54a7ad2d0","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/SyncopeConsoleApplicationTest.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplicationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplicationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplicationTest.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -110,7 +110,7 @@ public void errors() {\n         message = session.getFeedbackMessages().first();\n         assertNotNull(message);\n         assertTrue(message.isError());\n-        assertEquals(\"Error 1\", message.getMessage());\n+        assertEquals(ClientExceptionType.InvalidUser.name() + \": Error 1\", message.getMessage());\n         session.getFeedbackMessages().clear();\n \n         sce = SyncopeClientException.build(ClientExceptionType.InvalidUser);\n@@ -120,7 +120,7 @@ public void errors() {\n         message = session.getFeedbackMessages().first();\n         assertNotNull(message);\n         assertTrue(message.isError());\n-        assertEquals(\"Error 1, Error 2\", message.getMessage());\n+        assertEquals(ClientExceptionType.InvalidUser.name() + \": Error 1, Error 2\", message.getMessage());\n         session.getFeedbackMessages().clear();\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n@@ -130,7 +130,9 @@ public void errors() {\n         message = session.getFeedbackMessages().first();\n         assertNotNull(message);\n         assertTrue(message.isError());\n-        assertEquals(scce.getMessage(), message.getMessage());\n+        assertTrue(StringUtils.contains((CharSequence) message.getMessage(),\n+                ClientExceptionType.InvalidExternalResource.name()));\n+        assertTrue(StringUtils.contains((CharSequence) message.getMessage(), ClientExceptionType.InvalidUser.name()));\n         session.getFeedbackMessages().clear();\n     }\n }"},{"sha":"4aaf620402c2722750f0f4893a06413e25265751","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ReconQuery.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -48,8 +48,8 @@ public Builder anyKey(final String anyKey) {\n             return this;\n         }\n \n-        public Builder connObjectKeyValue(final String connObjectKeyValue) {\n-            instance.setConnObjectKeyValue(connObjectKeyValue);\n+        public Builder fiql(final String fiql) {\n+            instance.setFiql(fiql);\n             return this;\n         }\n \n@@ -82,7 +82,7 @@ public ReconQuery build() {\n \n     private String resourceKey;\n \n-    private String connObjectKeyValue;\n+    private String fiql;\n \n     private Set<String> moreAttrsToGet;\n \n@@ -115,13 +115,13 @@ public void setResourceKey(final String resourceKey) {\n         this.resourceKey = resourceKey;\n     }\n \n-    public String getConnObjectKeyValue() {\n-        return connObjectKeyValue;\n+    public String getFiql() {\n+        return fiql;\n     }\n \n-    @QueryParam(\"connObjectKeyValue\")\n-    public void setConnObjectKeyValue(final String connObjectKeyValue) {\n-        this.connObjectKeyValue = connObjectKeyValue;\n+    @QueryParam(JAXRSService.PARAM_FIQL)\n+    public void setFiql(final String fiql) {\n+        this.fiql = fiql;\n     }\n \n     public Set<String> getMoreAttrsToGet() {"},{"sha":"6e1e48083f2e7afca9012c0ff00051f0ee2ab06a","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -69,28 +69,30 @@ public interface ReconciliationService extends JAXRSService {\n      *\n      * @param query query conditions\n      * @param pushTask push specification\n+     * @return push report\n      */\n     @ApiResponses(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"push\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void push(@BeanParam ReconQuery query, @NotNull PushTaskTO pushTask);\n+    List<ProvisioningReport> push(@BeanParam ReconQuery query, @NotNull PushTaskTO pushTask);\n \n     /**\n      * Pulls the matching user, group, any object or linked account from the External Resource into Syncope.\n      *\n      * @param query query conditions\n      * @param pullTask pull specification\n+     * @return pull report\n      */\n     @ApiResponses(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"pull\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void pull(@BeanParam ReconQuery query, @NotNull PullTaskTO pullTask);\n+    List<ProvisioningReport> pull(@BeanParam ReconQuery query, @NotNull PullTaskTO pullTask);\n \n     /**\n      * Export a list of any objects matching the given query as CSV according to the provided specification."},{"sha":"9b72672546bc44b5b19490d8d0295d86a84a604f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObjectTO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -33,8 +33,18 @@ public class ConnObjectTO implements BaseBean {\n \n     private static final long serialVersionUID = 5139554911265442497L;\n \n+    private String fiql;\n+\n     private final Set<Attr> attrs = new LinkedHashSet<>();\n \n+    public String getFiql() {\n+        return fiql;\n+    }\n+\n+    public void setFiql(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+\n     @JacksonXmlElementWrapper(localName = \"attrs\")\n     @JacksonXmlProperty(localName = \"attr\")\n     public Set<Attr> getAttrs() {\n@@ -49,6 +59,7 @@ public Optional<Attr> getAttr(final String schema) {\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n+                append(fiql).\n                 append(attrs).\n                 build();\n     }\n@@ -66,6 +77,7 @@ public boolean equals(final Object obj) {\n         }\n         final ConnObjectTO other = (ConnObjectTO) obj;\n         return new EqualsBuilder().\n+                append(fiql, other.fiql).\n                 append(attrs, other.attrs).\n                 build();\n     }"},{"sha":"5b4381c427c8c60d5d152d6e3efbd5ab79649ea7","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":226,"deletions":126,"changes":352,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.Attr;\n@@ -40,7 +41,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MatchType;\n import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n-import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -69,6 +69,10 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.provisioning.api.pushpull.ConstantReconFilterBuilder;\n+import org.apache.syncope.core.provisioning.api.pushpull.KeyValueReconFilterBuilder;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.java.pushpull.stream.CSVStreamConnector;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePushExecutor;\n@@ -82,12 +86,18 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.SearchResult;\n+import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n-import org.springframework.util.CollectionUtils;\n \n @Component\n public class ReconciliationLogic extends AbstractTransactionalLogic<EntityTO> {\n@@ -168,7 +178,7 @@ private ConnObjectTO getOnSyncope(\n             final String connObjectKeyValue,\n             final Set<Attribute> attrs) {\n \n-        ConnObjectTO connObjectTO = ConnObjectUtils.getConnObjectTO(attrs);\n+        ConnObjectTO connObjectTO = ConnObjectUtils.getConnObjectTO(null, attrs);\n         connObjectTO.getAttrs().add(new Attr.Builder(connObjectKeyItem.getExtAttrName()).\n                 value(connObjectKeyValue).build());\n         connObjectTO.getAttrs().add(new Attr.Builder(Uid.NAME).\n@@ -209,173 +219,217 @@ private Any<?> getAny(final Provision provision, final String anyKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n-    public ReconStatus status(final ReconQuery query) {\n-        Provision provision = getProvision(query.getAnyTypeKey(), query.getResourceKey());\n+    public ReconStatus status(final String anyTypeKey, final String resourceKey, final String anyKey) {\n+        Provision provision = getProvision(anyTypeKey, resourceKey);\n \n         MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n                 orElseThrow(() -> new NotFoundException(\n                 \"ConnObjectKey for \" + provision.getAnyType().getKey()\n                 + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n \n+        Any<?> any = getAny(provision, anyKey);\n+\n         ReconStatus status = new ReconStatus();\n+        status.setMatchType(MatchType.ANY);\n+        status.setAnyTypeKind(any.getType().getKind());\n+        status.setAnyKey(any.getKey());\n+        status.setRealm(any.getRealm().getFullPath());\n+        status.setOnSyncope(getOnSyncope(any, connObjectKeyItem, provision));\n+\n+        List<ConnectorObject> connObjs = outboundMatcher.match(\n+                connFactory.getConnector(provision.getResource()), any, provision, Optional.empty());\n+        if (!connObjs.isEmpty()) {\n+            status.setOnResource(ConnObjectUtils.getConnObjectTO(\n+                    outboundMatcher.getFIQL(connObjs.get(0), provision), connObjs.get(0).getAttributes()));\n+\n+            if (connObjs.size() > 1) {\n+                LOG.warn(\"Expected single match, found {}\", connObjs);\n+            } else {\n+                virAttrHandler.setValues(any, connObjs.get(0));\n+            }\n+        }\n \n-        if (query.getConnObjectKeyValue() != null) {\n-            inboundMatcher.matchByConnObjectKeyValue(connObjectKeyItem, query.getConnObjectKeyValue(), provision).\n-                    stream().findFirst().ifPresent(match -> {\n-                        if (match.getAny() != null) {\n-                            status.setMatchType(MatchType.ANY);\n-                            status.setAnyTypeKind(match.getAny().getType().getKind());\n-                            status.setAnyKey(match.getAny().getKey());\n-                            status.setRealm(match.getAny().getRealm().getFullPath());\n-                            status.setOnSyncope(getOnSyncope(match.getAny(), connObjectKeyItem, provision));\n-                        } else if (match.getLinkedAccount() != null) {\n-                            status.setMatchType(MatchType.LINKED_ACCOUNT);\n-                            status.setAnyTypeKind(AnyTypeKind.USER);\n-                            status.setAnyKey(match.getLinkedAccount().getOwner().getKey());\n-                            status.setRealm(match.getLinkedAccount().getOwner().getRealm().getFullPath());\n-                            status.setOnSyncope(getOnSyncope(match.getLinkedAccount(), connObjectKeyItem, provision));\n-                        }\n-                    });\n+        return status;\n+    }\n \n-            Optional<String[]> moreAttrsToGet = CollectionUtils.isEmpty(query.getMoreAttrsToGet())\n-                    ? Optional.empty()\n-                    : Optional.of(query.getMoreAttrsToGet().toArray(new String[0]));\n+    private SyncDeltaBuilder syncDeltaBuilder(\n+            final Provision provision,\n+            final Filter filter,\n+            final Set<String> moreAttrsToGet) {\n+\n+        Stream<MappingItem> mapItems = Stream.concat(\n+                provision.getMapping().getItems().stream(),\n+                virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+        OperationOptions options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0]));\n+\n+        SyncDeltaBuilder syncDeltaBuilder = new SyncDeltaBuilder().\n+                setToken(new SyncToken(\"\")).\n+                setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n+                setObjectClass(provision.getObjectClass());\n+        connFactory.getConnector(provision.getResource()).\n+                search(provision.getObjectClass(), filter, new SearchResultsHandler() {\n+\n+                    @Override\n+                    public boolean handle(final ConnectorObject connObj) {\n+                        syncDeltaBuilder.setObject(connObj);\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public void handleResult(final SearchResult sr) {\n+                        // do nothing\n+                    }\n+                }, 1, null, List.of(), options);\n+\n+        return syncDeltaBuilder;\n+    }\n \n-            outboundMatcher.matchByConnObjectKeyValue(\n-                    connFactory.getConnector(provision.getResource()),\n-                    connObjectKeyItem,\n-                    query.getConnObjectKeyValue(),\n-                    provision,\n-                    moreAttrsToGet,\n-                    Optional.empty()).\n-                    ifPresent(connObj -> {\n-                        status.setOnResource(ConnObjectUtils.getConnObjectTO(connObj.getAttributes()));\n+    @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n+    public ReconStatus status(\n+            final String anyTypeKey,\n+            final String resourceKey,\n+            final Filter filter,\n+            final Set<String> moreAttrsToGet) {\n \n-                        if (status.getMatchType() == MatchType.ANY && StringUtils.isNotBlank(status.getAnyKey())) {\n-                            virAttrHandler.setValues(getAny(provision, status.getAnyKey()), connObj);\n-                        }\n-                    });\n-        }\n-        if (query.getAnyKey() != null) {\n-            Any<?> any = getAny(provision, query.getAnyKey());\n-            status.setMatchType(MatchType.ANY);\n-            status.setAnyTypeKind(any.getType().getKind());\n-            status.setAnyKey(any.getKey());\n-            status.setRealm(any.getRealm().getFullPath());\n-            status.setOnSyncope(getOnSyncope(any, connObjectKeyItem, provision));\n-\n-            List<ConnectorObject> connObjs = outboundMatcher.match(\n-                    connFactory.getConnector(provision.getResource()), any, provision, Optional.empty());\n-            if (!connObjs.isEmpty()) {\n-                status.setOnResource(ConnObjectUtils.getConnObjectTO(connObjs.get(0).getAttributes()));\n-\n-                if (connObjs.size() > 1) {\n-                    LOG.warn(\"Expected single match, found {}\", connObjs);\n-                } else {\n-                    virAttrHandler.setValues(any, connObjs.get(0));\n+        Provision provision = getProvision(anyTypeKey, resourceKey);\n+\n+        SyncDeltaBuilder syncDeltaBuilder = syncDeltaBuilder(provision, filter, moreAttrsToGet);\n+\n+        ReconStatus status = new ReconStatus();\n+        if (syncDeltaBuilder.getObject() != null) {\n+            MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n+                    orElseThrow(() -> new NotFoundException(\n+                    \"ConnObjectKey for \" + provision.getAnyType().getKey()\n+                    + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+\n+            inboundMatcher.match(syncDeltaBuilder.build(), provision).stream().findFirst().ifPresent(match -> {\n+                if (match.getAny() != null) {\n+                    status.setMatchType(MatchType.ANY);\n+                    status.setAnyTypeKind(match.getAny().getType().getKind());\n+                    status.setAnyKey(match.getAny().getKey());\n+                    status.setRealm(match.getAny().getRealm().getFullPath());\n+                    status.setOnSyncope(getOnSyncope(match.getAny(), connObjectKeyItem, provision));\n+                } else if (match.getLinkedAccount() != null) {\n+                    status.setMatchType(MatchType.LINKED_ACCOUNT);\n+                    status.setAnyTypeKind(AnyTypeKind.USER);\n+                    status.setAnyKey(match.getLinkedAccount().getOwner().getKey());\n+                    status.setRealm(match.getLinkedAccount().getOwner().getRealm().getFullPath());\n+                    status.setOnSyncope(getOnSyncope(match.getLinkedAccount(), connObjectKeyItem, provision));\n                 }\n+            });\n+\n+            status.setOnResource(ConnObjectUtils.getConnObjectTO(\n+                    outboundMatcher.getFIQL(syncDeltaBuilder.getObject(), provision),\n+                    syncDeltaBuilder.getObject().getAttributes()));\n+\n+            if (status.getMatchType() == MatchType.ANY && StringUtils.isNotBlank(status.getAnyKey())) {\n+                virAttrHandler.setValues(getAny(provision, status.getAnyKey()), syncDeltaBuilder.getObject());\n             }\n         }\n \n         return status;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n-    public void push(final ReconQuery query, final PushTaskTO pushTask) {\n-        Provision provision = getProvision(query.getAnyTypeKey(), query.getResourceKey());\n+    public List<ProvisioningReport> push(\n+            final String anyTypeKey,\n+            final String resourceKey,\n+            final String anyKey,\n+            final PushTaskTO pushTask) {\n \n-        MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n-                orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey for \" + provision.getAnyType().getKey()\n-                + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+        Provision provision = getProvision(anyTypeKey, resourceKey);\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n         List<ProvisioningReport> results = new ArrayList<>();\n-\n-        if (query.getConnObjectKeyValue() != null) {\n-            inboundMatcher.matchByConnObjectKeyValue(connObjectKeyItem, query.getConnObjectKeyValue(), provision).\n-                    stream().findFirst().ifPresent(match -> {\n-                        try {\n-                            if (match.getMatchTarget() == MatchType.ANY) {\n-                                results.addAll(singlePushExecutor.push(\n-                                        provision,\n-                                        connFactory.getConnector(provision.getResource()),\n-                                        match.getAny(),\n-                                        pushTask));\n-                                if (!results.isEmpty()\n-                                        && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n-\n-                                    sce.getElements().add(results.get(0).getMessage());\n-                                }\n-                            } else {\n-                                ProvisioningReport result = singlePushExecutor.push(\n-                                        provision,\n-                                        connFactory.getConnector(provision.getResource()),\n-                                        match.getLinkedAccount(),\n-                                        pushTask);\n-                                if (result.getStatus() == ProvisioningReport.Status.FAILURE) {\n-                                    sce.getElements().add(result.getMessage());\n-                                } else {\n-                                    results.add(result);\n-                                }\n-                            }\n-                        } catch (JobExecutionException e) {\n-                            sce.getElements().add(e.getMessage());\n-                        }\n-                    });\n-        }\n-\n-        if (sce.isEmpty() && results.isEmpty() && query.getAnyKey() != null) {\n-            try {\n-                results.addAll(singlePushExecutor.push(\n-                        provision,\n-                        connFactory.getConnector(provision.getResource()),\n-                        getAny(provision, query.getAnyKey()),\n-                        pushTask));\n-                if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n-                    sce.getElements().add(results.get(0).getMessage());\n-                }\n-            } catch (JobExecutionException e) {\n-                sce.getElements().add(e.getMessage());\n+        try {\n+            results.addAll(singlePushExecutor.push(\n+                    provision,\n+                    connFactory.getConnector(provision.getResource()),\n+                    getAny(provision, anyKey),\n+                    pushTask));\n+            if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n+                sce.getElements().add(results.get(0).getMessage());\n             }\n+        } catch (JobExecutionException e) {\n+            sce.getElements().add(e.getMessage());\n         }\n \n         if (!sce.isEmpty()) {\n             throw sce;\n         }\n+\n+        return results;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n-    public void pull(final ReconQuery query, final PullTaskTO pullTask) {\n-        Provision provision = getProvision(query.getAnyTypeKey(), query.getResourceKey());\n+    public List<ProvisioningReport> push(\n+            final String anyTypeKey,\n+            final String resourceKey,\n+            final Filter filter,\n+            final Set<String> moreAttrsToGet,\n+            final PushTaskTO pushTask) {\n+\n+        Provision provision = getProvision(anyTypeKey, resourceKey);\n \n-        Optional<String> connObjectKeyValue = Optional.ofNullable(query.getConnObjectKeyValue());\n-        if (query.getAnyKey() != null) {\n-            Any<?> any = getAny(provision, query.getAnyKey());\n-            connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision);\n+        SyncDeltaBuilder syncDeltaBuilder = syncDeltaBuilder(provision, filter, moreAttrsToGet);\n+\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n+        List<ProvisioningReport> results = new ArrayList<>();\n+\n+        if (syncDeltaBuilder.getObject() != null) {\n+            inboundMatcher.match(syncDeltaBuilder.build(), provision).stream().findFirst().ifPresent(match -> {\n+                try {\n+                    if (match.getMatchTarget() == MatchType.ANY) {\n+                        results.addAll(singlePushExecutor.push(\n+                                provision,\n+                                connFactory.getConnector(provision.getResource()),\n+                                match.getAny(),\n+                                pushTask));\n+                        if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n+                            sce.getElements().add(results.get(0).getMessage());\n+                        }\n+                    } else {\n+                        ProvisioningReport result = singlePushExecutor.push(\n+                                provision,\n+                                connFactory.getConnector(provision.getResource()),\n+                                match.getLinkedAccount(),\n+                                pushTask);\n+                        if (result.getStatus() == ProvisioningReport.Status.FAILURE) {\n+                            sce.getElements().add(result.getMessage());\n+                        } else {\n+                            results.add(result);\n+                        }\n+                    }\n+                } catch (JobExecutionException e) {\n+                    sce.getElements().add(e.getMessage());\n+                }\n+            });\n         }\n-        if (connObjectKeyValue.isEmpty()) {\n-            throw new NotFoundException(\n-                    \"ConnObjectKey for \" + provision.getAnyType().getKey()\n-                    + \" on resource '\" + provision.getResource().getKey() + \"'\");\n+\n+        if (!sce.isEmpty()) {\n+            throw sce;\n         }\n \n+        return results;\n+    }\n+\n+    private List<ProvisioningReport> pull(\n+            final Provision provision,\n+            final ReconFilterBuilder reconFilterBuilder,\n+            final PullTaskTO pullTask) {\n+\n         if (pullTask.getDestinationRealm() == null || realmDAO.findByFullPath(pullTask.getDestinationRealm()) == null) {\n             throw new NotFoundException(\"Realm \" + pullTask.getDestinationRealm());\n         }\n-        if (provision.getMapping().getConnObjectKeyItem().isEmpty()) {\n-            throw new NotFoundException(\n-                    \"ConnObjectKey cannot be determined for mapping \" + provision.getMapping().getKey());\n-        }\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n+        List<ProvisioningReport> results = new ArrayList<>();\n         try {\n-            List<ProvisioningReport> results = singlePullExecutor.pull(\n+            results.addAll(singlePullExecutor.pull(\n                     provision,\n                     connFactory.getConnector(provision.getResource()),\n-                    provision.getMapping().getConnObjectKeyItem().get().getExtAttrName(),\n-                    connObjectKeyValue.get(),\n-                    pullTask);\n+                    reconFilterBuilder,\n+                    pullTask));\n             if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n                 sce.getElements().add(results.get(0).getMessage());\n             }\n@@ -386,6 +440,52 @@ public void pull(final ReconQuery query, final PullTaskTO pullTask) {\n         if (!sce.isEmpty()) {\n             throw sce;\n         }\n+\n+        return results;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n+    public List<ProvisioningReport> pull(\n+            final String anyTypeKey,\n+            final String resourceKey,\n+            final String anyKey,\n+            final PullTaskTO pullTask) {\n+\n+        Provision provision = getProvision(anyTypeKey, resourceKey);\n+\n+        Any<?> any = getAny(provision, anyKey);\n+\n+        if (!provision.getMapping().getConnObjectKeyItem().isPresent()) {\n+            throw new NotFoundException(\n+                    \"ConnObjectKey cannot be determined for mapping \" + provision.getMapping().getKey());\n+        }\n+\n+        String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision).\n+                orElseThrow(() -> new NotFoundException(\n+                \"ConnObjectKey for \" + provision.getAnyType().getKey()\n+                + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+\n+        return pull(\n+                provision,\n+                new KeyValueReconFilterBuilder(\n+                        provision.getMapping().getConnObjectKeyItem().get().getExtAttrName(), connObjectKeyValue),\n+                pullTask);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n+    public List<ProvisioningReport> pull(\n+            final String anyTypeKey,\n+            final String resourceKey,\n+            final Filter filter,\n+            final Set<String> moreAttrsToGet,\n+            final PullTaskTO pullTask) {\n+\n+        Provision provision = getProvision(anyTypeKey, resourceKey);\n+\n+        return pull(\n+                provision,\n+                new ConstantReconFilterBuilder(filter),\n+                pullTask);\n     }\n \n     private CsvSchema.Builder csvSchema(final AbstractCSVSpec spec) {"},{"sha":"9a0ca55c42d752b3b79740e7024f75c5eb7e2a89","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -336,7 +336,8 @@ public ConnObjectTO readConnObjectByAnyKey(\n             virAttrHandler.setValues(any, connObjs.get(0));\n         }\n \n-        return ConnObjectUtils.getConnObjectTO(connObjs.get(0).getAttributes());\n+        return ConnObjectUtils.getConnObjectTO(\n+                outboundMatcher.getFIQL(connObjs.get(0), provision), connObjs.get(0).getAttributes());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_GET_CONNOBJECT + \"')\")\n@@ -353,20 +354,18 @@ public ConnObjectTO readConnObjectByConnObjectKeyValue(\n                 \"ConnObjectKey mapping for \" + provision.getAnyType().getKey()\n                 + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n \n-        Optional<ConnectorObject> connObj = outboundMatcher.matchByConnObjectKeyValue(\n+        return outboundMatcher.matchByConnObjectKeyValue(\n                 connFactory.getConnector(provision.getResource()),\n                 connObjectKeyItem,\n                 connObjectKeyValue,\n                 provision,\n                 Optional.empty(),\n-                Optional.empty());\n-        if (connObj.isPresent()) {\n-            return ConnObjectUtils.getConnObjectTO(connObj.get().getAttributes());\n-        }\n-\n-        throw new NotFoundException(\n+                Optional.empty()).\n+                map(connectorObject -> ConnObjectUtils.getConnObjectTO(\n+                outboundMatcher.getFIQL(connectorObject, provision), connectorObject.getAttributes())).\n+                orElseThrow(() -> new NotFoundException(\n                 \"Object \" + connObjectKeyValue + \" with class \" + provision.getObjectClass()\n-                + \" not found on resource \" + provision.getResource().getKey());\n+                + \" not found on resource \" + provision.getResource().getKey()));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_LIST_CONNOBJECT + \"')\")\n@@ -381,6 +380,7 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n             final List<OrderByClause> orderBy) {\n \n         ExternalResource resource;\n+        Provision provision;\n         ObjectClass objectClass;\n         OperationOptions options;\n         if (SyncopeConstants.REALM_ANYTYPE.equals(anyTypeKey)) {\n@@ -392,11 +392,12 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n                 throw new NotFoundException(\"Realm provisioning for resource '\" + key + '\\'');\n             }\n \n+            provision = null;\n             objectClass = resource.getOrgUnit().getObjectClass();\n             options = MappingUtils.buildOperationOptions(\n                     resource.getOrgUnit().getItems().stream(), moreAttrsToGet.toArray(new String[0]));\n         } else {\n-            Provision provision = getProvision(key, anyTypeKey);\n+            provision = getProvision(key, anyTypeKey);\n             resource = provision.getResource();\n             objectClass = provision.getObjectClass();\n \n@@ -414,7 +415,9 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n \n                     @Override\n                     public boolean handle(final ConnectorObject connectorObject) {\n-                        connObjects.add(ConnObjectUtils.getConnObjectTO(connectorObject.getAttributes()));\n+                        connObjects.add(ConnObjectUtils.getConnObjectTO(\n+                                provision == null ? null : outboundMatcher.getFIQL(connectorObject, provision),\n+                                connectorObject.getAttributes()));\n                         // safety protection against uncontrolled result size\n                         count++;\n                         return count < size;"},{"sha":"881544bcadf26f4bde9362c43fddb7416c78f3f5","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReconciliationServiceImpl.java","status":"modified","additions":77,"deletions":20,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -19,17 +19,25 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.io.InputStream;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.validation.ValidationException;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n@@ -38,7 +46,9 @@\n import org.apache.syncope.common.rest.api.service.ReconciliationService;\n import org.apache.syncope.core.logic.ReconciliationLogic;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.search.FilterVisitor;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -49,44 +59,91 @@ public class ReconciliationServiceImpl extends AbstractServiceImpl implements Re\n     private ReconciliationLogic logic;\n \n     private void validate(final ReconQuery reconQuery) {\n-        if ((reconQuery.getAnyKey() == null && reconQuery.getConnObjectKeyValue() == null)\n-                || (reconQuery.getAnyKey() != null && reconQuery.getConnObjectKeyValue() != null)) {\n+        if ((reconQuery.getAnyKey() == null && reconQuery.getFiql() == null)\n+                || (reconQuery.getAnyKey() != null && reconQuery.getFiql() != null)) {\n \n-            throw new ValidationException(\"Either provide anyKey or connObjectKeyValue, not both\");\n+            throw new ValidationException(\"Either provide anyKey or fiql, not both\");\n         }\n     }\n \n+    private Pair<Filter, Set<String>> buildFromFIQL(final ReconQuery reconQuery) {\n+        Filter filter = null;\n+        Set<String> moreAttrsToGet = new HashSet<>();\n+        if (reconQuery.getMoreAttrsToGet() != null) {\n+            moreAttrsToGet.addAll(reconQuery.getMoreAttrsToGet());\n+        }\n+        if (StringUtils.isNotBlank(reconQuery.getFiql())) {\n+            try {\n+                FilterVisitor visitor = new FilterVisitor();\n+                SearchCondition<SearchBean> sc = searchContext.getCondition(reconQuery.getFiql(), SearchBean.class);\n+                sc.accept(visitor);\n+\n+                filter = visitor.getQuery();\n+                moreAttrsToGet.addAll(visitor.getAttrs());\n+            } catch (Exception e) {\n+                LOG.error(\"Invalid FIQL expression: {}\", reconQuery.getFiql(), e);\n+\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                sce.getElements().add(reconQuery.getFiql());\n+                sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n+                throw sce;\n+            }\n+        }\n+\n+        return Pair.of(filter, moreAttrsToGet);\n+    }\n+\n     @Override\n-    public ReconStatus status(final ReconQuery reconQuery) {\n-        validate(reconQuery);\n-        return logic.status(reconQuery);\n+    public ReconStatus status(final ReconQuery query) {\n+        validate(query);\n+\n+        if (query.getAnyKey() != null) {\n+            return logic.status(query.getAnyTypeKey(), query.getResourceKey(), query.getAnyKey());\n+        }\n+\n+        Pair<Filter, Set<String>> fromFIQL = buildFromFIQL(query);\n+        return logic.status(query.getAnyTypeKey(), query.getResourceKey(), fromFIQL.getLeft(), fromFIQL.getRight());\n     }\n \n     @Override\n-    public void push(final ReconQuery reconQuery, final PushTaskTO pushTask) {\n-        validate(reconQuery);\n-        logic.push(reconQuery, pushTask);\n+    public List<ProvisioningReport> push(final ReconQuery query, final PushTaskTO pushTask) {\n+        validate(query);\n+\n+        if (query.getAnyKey() != null) {\n+            return logic.push(query.getAnyTypeKey(), query.getResourceKey(), query.getAnyKey(), pushTask);\n+        }\n+\n+        Pair<Filter, Set<String>> fromFIQL = buildFromFIQL(query);\n+        return logic.push(\n+                query.getAnyTypeKey(), query.getResourceKey(), fromFIQL.getLeft(), fromFIQL.getRight(), pushTask);\n     }\n \n     @Override\n-    public void pull(final ReconQuery reconQuery, final PullTaskTO pullTask) {\n-        validate(reconQuery);\n-        logic.pull(reconQuery, pullTask);\n+    public List<ProvisioningReport> pull(final ReconQuery query, final PullTaskTO pullTask) {\n+        validate(query);\n+\n+        if (query.getAnyKey() != null) {\n+            return logic.pull(query.getAnyTypeKey(), query.getResourceKey(), query.getAnyKey(), pullTask);\n+        }\n+\n+        Pair<Filter, Set<String>> fromFIQL = buildFromFIQL(query);\n+        return logic.pull(\n+                query.getAnyTypeKey(), query.getResourceKey(), fromFIQL.getLeft(), fromFIQL.getRight(), pullTask);\n     }\n \n     @Override\n-    public Response push(final AnyQuery anyQuery, final CSVPushSpec spec) {\n-        String realm = StringUtils.prependIfMissing(anyQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n+    public Response push(final AnyQuery query, final CSVPushSpec spec) {\n+        String realm = StringUtils.prependIfMissing(query.getRealm(), SyncopeConstants.ROOT_REALM);\n \n-        SearchCond searchCond = StringUtils.isBlank(anyQuery.getFiql())\n+        SearchCond searchCond = StringUtils.isBlank(query.getFiql())\n                 ? null\n-                : getSearchCond(anyQuery.getFiql(), realm);\n+                : getSearchCond(query.getFiql(), realm);\n \n-        StreamingOutput sout = (os) -> logic.push(\n+        StreamingOutput sout = os -> logic.push(\n                 searchCond,\n-                anyQuery.getPage(),\n-                anyQuery.getSize(),\n-                getOrderByClauses(anyQuery.getOrderBy()),\n+                query.getPage(),\n+                query.getSize(),\n+                getOrderByClauses(query.getOrderBy()),\n                 realm,\n                 spec,\n                 os);"},{"sha":"256b799f9829fbfd26fe2211865f4bcf77072c38","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRule.java","status":"modified","additions":24,"deletions":2,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -18,9 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.function.BiFunction;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n \n /**\n@@ -29,15 +32,34 @@\n @FunctionalInterface\n public interface PushCorrelationRule {\n \n+    /**\n+     * Default FIQL builder using __UID__.\n+     */\n+    BiFunction<ConnectorObject, Provision, String> DEFAULT_FIQL_BUILDER =\n+            (connectorObject, provision) -> Uid.NAME + \"==\" + connectorObject.getUid().getUidValue();\n+\n     default void setConf(PushCorrelationRuleConf conf) {\n     }\n \n     /**\n-     * Return a search condition.\n+     * Returns a filter to match the given any with a connector object on the external resource identified by\n+     * the given provision.\n      *\n      * @param any user, group or any object\n      * @param provision resource provision\n-     * @return search condition.\n+     * @return filter.\n      */\n     Filter getFilter(Any<?> any, Provision provision);\n+\n+    /**\n+     * Returns a FIQL string to match the given connector object when searching into the external resource identified by\n+     * the given provision.\n+     *\n+     * @param connectorObject connector object\n+     * @param provision resource provision\n+     * @return fiql\n+     */\n+    default String getFiql(ConnectorObject connectorObject, Provision provision) {\n+        return DEFAULT_FIQL_BUILDER.apply(connectorObject, provision);\n+    }\n }"},{"sha":"19ac31c0da46878980095377a8f9135a5e42a9b9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java","status":"modified","additions":57,"deletions":4,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -19,10 +19,15 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n+import java.util.Base64;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.search.ConnObjectTOFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -32,18 +37,26 @@\n import org.apache.syncope.core.provisioning.api.AccountGetter;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.PlainAttrGetter;\n+import org.identityconnectors.common.security.GuardedByteArray;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.common.security.SecurityUtil;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.CollectionUtils;\n \n @PushCorrelationRuleConfClass(DefaultPushCorrelationRuleConf.class)\n public class DefaultPushCorrelationRule implements PushCorrelationRule {\n \n+    protected static final ConnObjectTOFiqlSearchConditionBuilder FIQL_BUILDER =\n+            new ConnObjectTOFiqlSearchConditionBuilder();\n+\n     @Autowired\n-    private MappingManager mappingManager;\n+    protected MappingManager mappingManager;\n \n-    private DefaultPushCorrelationRuleConf conf;\n+    protected DefaultPushCorrelationRuleConf conf;\n \n     @Override\n     public void setConf(final PushCorrelationRuleConf conf) {\n@@ -60,8 +73,7 @@ public Filter getFilter(final Any<?> any, final Provision provision) {\n         List<Filter> filters = new ArrayList<>();\n \n         provision.getMapping().getItems().stream().filter(\n-                item -> conf.getSchemas().contains(item.getIntAttrName())\n-                && (item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH)).\n+                item -> conf.getSchemas().contains(item.getIntAttrName()) && item.getPurpose() != MappingPurpose.NONE).\n                 forEach(item -> {\n                     Pair<String, Attribute> attr = mappingManager.prepareAttr(\n                             provision,\n@@ -90,4 +102,45 @@ public Filter getFilter(final Any<?> any, final Provision provision) {\n                 ? FilterBuilder.or(filters)\n                 : FilterBuilder.and(filters);\n     }\n+\n+    @Override\n+    public String getFiql(final ConnectorObject connectorObject, final Provision provision) {\n+        List<CompleteCondition> conditions = new ArrayList<>();\n+\n+        provision.getMapping().getItems().stream().filter(\n+                item -> conf.getSchemas().contains(item.getIntAttrName()) && item.getPurpose() != MappingPurpose.NONE).\n+                forEach(item -> Optional.ofNullable(connectorObject.getAttributeByName(item.getExtAttrName())).\n+                ifPresent(attr -> {\n+                    if (CollectionUtils.isEmpty(attr.getValue())) {\n+                        conditions.add(FIQL_BUILDER.isNull(attr.getName()));\n+                    } else {\n+                        List<CompleteCondition> valueConditions = new ArrayList<>();\n+\n+                        attr.getValue().stream().filter(Objects::nonNull).forEach(value -> {\n+                            if (value instanceof GuardedString) {\n+                                valueConditions.add(FIQL_BUILDER.is(attr.getName()).\n+                                        equalTo(SecurityUtil.decrypt((GuardedString) value)));\n+                            } else if (value instanceof GuardedByteArray) {\n+                                valueConditions.add(FIQL_BUILDER.is(attr.getName()).\n+                                        equalTo(new String(SecurityUtil.decrypt((GuardedByteArray) value))));\n+                            } else if (value instanceof byte[]) {\n+                                valueConditions.add(FIQL_BUILDER.is(attr.getName()).\n+                                        equalTo(Base64.getEncoder().encodeToString((byte[]) value)));\n+                            } else {\n+                                valueConditions.add(FIQL_BUILDER.is(attr.getName()).equalTo(value.toString()));\n+                            }\n+                        });\n+\n+                        if (!valueConditions.isEmpty()) {\n+                            conditions.add(valueConditions.size() == 1\n+                                    ? valueConditions.get(0)\n+                                    : FIQL_BUILDER.and(valueConditions));\n+                        }\n+                    }\n+                }));\n+\n+        return conf.isOrSchemas()\n+                ? FIQL_BUILDER.or(conditions).query()\n+                : FIQL_BUILDER.and(conditions).query();\n+    }\n }"},{"sha":"fd7ccbee3ae5a5238ee7a98a7cbe804de8eb31a5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -44,13 +44,15 @@ public interface PropagationReporter {\n      * @param taskInfo propagation task\n      * @param execStatus propagation execution status\n      * @param failureReason propagation execution failure message\n+     * @param fiql FIQL string to match the connector objects into the external resource\n      * @param beforeObj retrieved connector object before operation execution\n      * @param afterObj retrieved connector object after operation execution\n      */\n     void onSuccessOrNonPriorityResourceFailures(\n             PropagationTaskInfo taskInfo,\n             ExecStatus execStatus,\n             String failureReason,\n+            String fiql,\n             ConnectorObject beforeObj,\n             ConnectorObject afterObj);\n "},{"sha":"d980602208a5ea39ae280eca69c8fa76290b9297","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ConstantReconFilterBuilder.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FConstantReconFilterBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FConstantReconFilterBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FConstantReconFilterBuilder.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull;\n+\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+\n+public class ConstantReconFilterBuilder implements ReconFilterBuilder {\n+\n+    private final Filter filter;\n+\n+    public ConstantReconFilterBuilder(final Filter filter) {\n+        this.filter = filter;\n+    }\n+\n+    @Override\n+    public Filter build() {\n+        return filter;\n+    }\n+}"},{"sha":"1b5d349d332d3cbf251273a059aba8af36ddae0e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/KeyValueReconFilterBuilder.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FKeyValueReconFilterBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FKeyValueReconFilterBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FKeyValueReconFilterBuilder.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull;\n+\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+\n+public class KeyValueReconFilterBuilder implements ReconFilterBuilder {\n+\n+    private final String key;\n+\n+    private final String value;\n+\n+    public KeyValueReconFilterBuilder(final String key, final String value) {\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Filter build() {\n+        return FilterBuilder.equalTo(AttributeBuilder.build(key, value));\n+    }\n+}"},{"sha":"4ace3c851b9578a768d4e2b095e02529d2965a9a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePullExecutor.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -31,7 +31,6 @@ public interface SyncopeSinglePullExecutor {\n     List<ProvisioningReport> pull(\n             Provision provision,\n             Connector connector,\n-            String connObjectKey,\n-            String connObjectValue,\n+            ReconFilterBuilder reconFilterBuilder,\n             PullTaskTO pullTaskTO) throws JobExecutionException;\n }"},{"sha":"29a4f26aa77136ae7239b988bb4f1915549c521a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":30,"deletions":14,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -18,6 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.Attr;\n@@ -74,24 +83,18 @@\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n abstract class AbstractAnyDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractAnyDataBinder.class);\n@@ -144,6 +147,9 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected IntAttrNameParser intAttrNameParser;\n \n+    @Autowired\n+    protected OutboundMatcher outboundMatcher;\n+\n     protected void setRealm(final Any<?> any, final AnyUR anyUR) {\n         if (anyUR.getRealm() != null && StringUtils.isNotBlank(anyUR.getRealm().getValue())) {\n             Realm newRealm = realmDAO.findByFullPath(anyUR.getRealm().getValue());\n@@ -170,10 +176,20 @@ protected Map<String, ConnObjectTO> onResources(\n             Pair<String, Set<Attribute>> prepared = mappingManager.prepareAttrsFromAny(\n                     any, password, changePwd, true, provision);\n \n-            ConnObjectTO connObjectTO = ConnObjectUtils.getConnObjectTO(prepared.getRight());\n-            connObjectTO.getAttrs().add(\n-                    new Attr.Builder(connObjectKeyItem.getExtAttrName()).value(prepared.getLeft()).build());\n-            connObjectTO.getAttrs().add(new Attr.Builder(Uid.NAME).value(prepared.getLeft()).build());\n+            ConnObjectTO connObjectTO;\n+            if (StringUtils.isBlank(prepared.getLeft())) {\n+                connObjectTO = ConnObjectUtils.getConnObjectTO(null, prepared.getRight());\n+            } else {\n+                ConnectorObject connectorObject = new ConnectorObjectBuilder().\n+                        addAttributes(prepared.getRight()).\n+                        addAttribute(new Uid(prepared.getLeft())).\n+                        addAttribute(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), prepared.getLeft())).\n+                        build();\n+\n+                connObjectTO = ConnObjectUtils.getConnObjectTO(\n+                        outboundMatcher.getFIQL(connectorObject, provision),\n+                        connectorObject.getAttributes());\n+            }\n \n             onResources.put(provision.getResource().getKey(), connObjectTO);\n         }));"},{"sha":"3dc37d3f3ce6028a6a15156919ba25d725967bef","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -449,9 +449,17 @@ public TaskExec execute(\n                 taskDAO.save(task);\n             }\n \n+            String fiql = provision == null\n+                    ? null\n+                    : afterObj != null\n+                            ? outboundMatcher.getFIQL(afterObj, provision)\n+                            : beforeObj != null\n+                                    ? outboundMatcher.getFIQL(beforeObj, provision)\n+                                    : null;\n             reporter.onSuccessOrNonPriorityResourceFailures(taskInfo,\n                     ExecStatus.valueOf(execution.getStatus()),\n                     failureReason,\n+                    fiql,\n                     beforeObj,\n                     afterObj);\n         }\n@@ -532,6 +540,7 @@ protected TaskExec rejected(\n                 ExecStatus.valueOf(execution.getStatus()),\n                 rejectReason,\n                 null,\n+                null,\n                 null);\n \n         return execution;"},{"sha":"010daabe9d1e4f8f25a0efbc64e74a134f4b1820","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -50,6 +50,7 @@ public void onSuccessOrNonPriorityResourceFailures(\n             final PropagationTaskInfo taskInfo,\n             final ExecStatus executionStatus,\n             final String failureReason,\n+            final String fiql,\n             final ConnectorObject beforeObj,\n             final ConnectorObject afterObj) {\n \n@@ -59,11 +60,11 @@ public void onSuccessOrNonPriorityResourceFailures(\n         status.setFailureReason(failureReason);\n \n         if (beforeObj != null) {\n-            status.setBeforeObj(ConnObjectUtils.getConnObjectTO(beforeObj.getAttributes()));\n+            status.setBeforeObj(ConnObjectUtils.getConnObjectTO(fiql, beforeObj.getAttributes()));\n         }\n \n         if (afterObj != null) {\n-            status.setAfterObj(ConnObjectUtils.getConnObjectTO(afterObj.getAttributes()));\n+            status.setAfterObj(ConnObjectUtils.getConnObjectTO(fiql, afterObj.getAttributes()));\n         }\n \n         add(status);"},{"sha":"69e99026751b1f2268009a34c45bfba53da0eafa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -122,7 +122,7 @@ protected void doExecute(\n \n                     if (nullPriorityAsync) {\n                         reporter.onSuccessOrNonPriorityResourceFailures(\n-                                taskInfo, ExecStatus.CREATED, null, null, null);\n+                                taskInfo, ExecStatus.CREATED, null, null, null, null);\n                     }\n                 } catch (Exception e) {\n                     LOG.error(\"While submitting task for async execution: {}\", taskInfo, e);"},{"sha":"c776a0ed39308eb59824602a527d0ae5655c7777","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -93,6 +93,12 @@ private Optional<PushCorrelationRule> rule(final Provision provision) {\n         return rule;\n     }\n \n+    public String getFIQL(final ConnectorObject connectorObject, final Provision provision) {\n+        return rule(provision).\n+                map(rule -> rule.getFiql(connectorObject, provision)).\n+                orElseGet(() -> PushCorrelationRule.DEFAULT_FIQL_BUILDER.apply(connectorObject, provision));\n+    }\n+\n     public List<ConnectorObject> match(\n             final PropagationTask task,\n             final Connector connector,"},{"sha":"97c67eac3c76ddfbdb2ea346baed7d7833884b4e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":2,"deletions":23,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -50,9 +50,6 @@\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n-import org.identityconnectors.framework.common.objects.AttributeBuilder;\n-import org.identityconnectors.framework.common.objects.filter.Filter;\n-import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n@@ -70,8 +67,7 @@ public class SinglePullJobDelegate extends PullJobDelegate implements SyncopeSin\n     public List<ProvisioningReport> pull(\n             final Provision provision,\n             final Connector connector,\n-            final String connObjectKey,\n-            final String connObjectValue,\n+            final ReconFilterBuilder reconFilterBuilder,\n             final PullTaskTO pullTaskTO) throws JobExecutionException {\n \n         LOG.debug(\"Executing pull on {}\", provision.getResource());\n@@ -160,7 +156,7 @@ public List<ProvisioningReport> pull(\n \n             connector.filteredReconciliation(\n                     provision.getObjectClass(),\n-                    new SingleReconciliationFilterBuilder(connObjectKey, connObjectValue),\n+                    reconFilterBuilder,\n                     handler,\n                     MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0])));\n \n@@ -181,21 +177,4 @@ public List<ProvisioningReport> pull(\n                     : new JobExecutionException(\"While pulling from connector\", e);\n         }\n     }\n-\n-    static class SingleReconciliationFilterBuilder implements ReconFilterBuilder {\n-\n-        private final String key;\n-\n-        private final String value;\n-\n-        SingleReconciliationFilterBuilder(final String key, final String value) {\n-            this.key = key;\n-            this.value = value;\n-        }\n-\n-        @Override\n-        public Filter build() {\n-            return FilterBuilder.equalTo(AttributeBuilder.build(key, value));\n-        }\n-    }\n }"},{"sha":"4ccbf094e2c7215faf72c4d44c4f701ef0216953","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -64,6 +64,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.CollectionUtils;\n \n @Component\n public class ConnObjectUtils {\n@@ -100,7 +101,7 @@ public class ConnObjectUtils {\n      * @return password value\n      */\n     public static String getPassword(final Object pwd) {\n-        final StringBuilder result = new StringBuilder();\n+        StringBuilder result = new StringBuilder();\n \n         if (pwd instanceof GuardedString) {\n             result.append(SecurityUtil.decrypt((GuardedString) pwd));\n@@ -118,27 +119,31 @@ public static String getPassword(final Object pwd) {\n     /**\n      * Builds {@link ConnObjectTO} out of a collection of {@link Attribute} instances.\n      *\n+     * @param fiql FIQL expression to uniquely identify the given Connector Object\n      * @param attrs attributes\n      * @return transfer object\n      */\n-    public static ConnObjectTO getConnObjectTO(final Set<Attribute> attrs) {\n-        final ConnObjectTO connObjectTO = new ConnObjectTO();\n+    public static ConnObjectTO getConnObjectTO(final String fiql, final Set<Attribute> attrs) {\n+        ConnObjectTO connObjectTO = new ConnObjectTO();\n+        connObjectTO.setFiql(fiql);\n \n-        if (attrs != null) {\n+        if (!CollectionUtils.isEmpty(attrs)) {\n             connObjectTO.getAttrs().addAll(attrs.stream().map(attr -> {\n                 Attr attrTO = new Attr();\n                 attrTO.setSchema(attr.getName());\n-                if (attr.getValue() != null) {\n-                    attr.getValue().stream().filter(Objects::nonNull).forEachOrdered(value -> {\n+\n+                if (!CollectionUtils.isEmpty(attr.getValue())) {\n+                    attr.getValue().stream().filter(Objects::nonNull).forEach(value -> {\n                         if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n                             attrTO.getValues().add(getPassword(value));\n                         } else if (value instanceof byte[]) {\n                             attrTO.getValues().add(Base64.getEncoder().encodeToString((byte[]) value));\n-                        } else if (value != null) {\n+                        } else {\n                             attrTO.getValues().add(value.toString());\n                         }\n                     });\n                 }\n+\n                 return attrTO;\n             }).collect(Collectors.toList()));\n         }"},{"sha":"1637720977be802b46708efb6156e1df298cfa9d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -669,7 +669,7 @@ public void issueSYNCOPE1605() throws ParseException {\n \n             GroupCR groupCR = new GroupCR();\n             groupCR.setName(\"SYNCOPEGROUP1605-\" + getUUIDString());\n-            groupCR.setRealm(\"/\");\n+            groupCR.setRealm(SyncopeConstants.ROOT_REALM);\n             groupCR.getResources().add(ldap.getKey());\n             groupCR.getPlainAttrs().add(new Attr.Builder(\"originalName\").value(originalName).build());\n \n@@ -678,8 +678,7 @@ public void issueSYNCOPE1605() throws ParseException {\n \n             // 3. check attributes prepared for propagation\n             PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n-                    resource(groupTO.getResources().iterator().next()).\n-                    anyTypeKind(AnyTypeKind.GROUP).entityKey(groupTO.getKey()).build());\n+                    resource(ldap.getKey()).anyTypeKind(AnyTypeKind.GROUP).entityKey(groupTO.getKey()).build());\n             assertEquals(1, tasks.getSize());\n             assertEquals(ResourceOperation.CREATE, tasks.getResult().get(0).getOperation());\n             assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n@@ -694,8 +693,8 @@ public void issueSYNCOPE1605() throws ParseException {\n             groupTO = updateGroup(groupUR).getEntity();\n \n             tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n-                    resource(groupTO.getResources().iterator().next()).\n-                    anyTypeKind(AnyTypeKind.GROUP).entityKey(groupTO.getKey()).orderBy(\"start DESC\").build());\n+                    resource(ldap.getKey()).anyTypeKind(AnyTypeKind.GROUP).entityKey(groupTO.getKey()).\n+                    orderBy(\"start DESC\").build());\n             assertEquals(2, tasks.getSize());\n             assertEquals(ResourceOperation.UPDATE, tasks.getResult().get(0).getOperation());\n             assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());"},{"sha":"4642b6779dbd8d9a2f981f8a950750ced61a3d1c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReconciliationITCase.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dd1c82adc6cfd340f198c6123971bff27a826562/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dd1c82adc6cfd340f198c6123971bff27a826562/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java?ref=dd1c82adc6cfd340f198c6123971bff27a826562","patch":"@@ -117,6 +117,10 @@ public void push() {\n         if (enable != null) {\n             status.getOnSyncope().getAttrs().remove(enable);\n         }\n+        // FIQL is always null for Syncope\n+        assertNull(status.getOnSyncope().getFiql());\n+        assertNotNull(status.getOnResource().getFiql());\n+        status.getOnResource().setFiql(null);\n         assertEquals(status.getOnSyncope(), status.getOnResource());\n     }\n \n@@ -169,7 +173,7 @@ public void importSingle() {\n \n         // 2. verify reconciliation status\n         ReconStatus status = reconciliationService.status(\n-                new ReconQuery.Builder(PRINTER, RESOURCE_NAME_DBSCRIPTED).connObjectKeyValue(externalKey).build());\n+                new ReconQuery.Builder(PRINTER, RESOURCE_NAME_DBSCRIPTED).fiql(\"ID==\" + externalKey).build());\n         assertNotNull(status);\n         assertNull(status.getAnyTypeKind());\n         assertNull(status.getAnyKey());\n@@ -183,8 +187,8 @@ public void importSingle() {\n         PullTaskTO pullTask = new PullTaskTO();\n         pullTask.setDestinationRealm(SyncopeConstants.ROOT_REALM);\n         pullTask.setPerformCreate(true);\n-        reconciliationService.pull(new ReconQuery.Builder(PRINTER, RESOURCE_NAME_DBSCRIPTED).\n-                connObjectKeyValue(externalKey).build(), pullTask);\n+        reconciliationService.pull(\n+                new ReconQuery.Builder(PRINTER, RESOURCE_NAME_DBSCRIPTED).fiql(\"ID==\" + externalKey).build(), pullTask);\n \n         // 4. verify reconciliation result\n         AnyObjectTO printer = anyObjectService.read(externalName);"}]}