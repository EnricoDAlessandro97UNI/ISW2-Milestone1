{"sha":"a7bbf55751c24d11302ee5dafefe97581cef35fa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE3YmJmNTU3NTFjMjRkMTEzMDJlZTVkYWZlZmU5NzU4MWNlZjM1ZmE=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-01-07T14:33:44Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-01-07T14:33:44Z"},"message":"Introduces push task about SYNCOPE-392; currently missing correlation rules management and matching rules management\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1556227 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c87476d406b160c9b6967041923d67c2e97e90e5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c87476d406b160c9b6967041923d67c2e97e90e5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a7bbf55751c24d11302ee5dafefe97581cef35fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a7bbf55751c24d11302ee5dafefe97581cef35fa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a7bbf55751c24d11302ee5dafefe97581cef35fa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a7bbf55751c24d11302ee5dafefe97581cef35fa/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"1eed602d22e56f8e45fce22ce654be9d10b9195a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1eed602d22e56f8e45fce22ce654be9d10b9195a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1eed602d22e56f8e45fce22ce654be9d10b9195a"}],"stats":{"total":2532,"additions":1750,"deletions":782},"files":[{"sha":"9b59751af3d3bde88ffcc0d15e8abde94c2e4fc6","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.common.to.SchedTaskTO;\r\n import org.apache.syncope.common.types.TaskType;\r\n import org.apache.syncope.common.wrap.JobClass;\r\n+import org.apache.syncope.common.wrap.PushActionClass;\r\n import org.apache.syncope.common.wrap.SyncActionClass;\r\n \r\n /**\r\n@@ -74,6 +75,16 @@ public interface TaskService extends JAXRSService {\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n     List<SyncActionClass> getSyncActionsClasses();\r\n \r\n+    /**\r\n+     * Returns a list of classes to be used as push actions.\r\n+     *\r\n+     * @return list of classes to be used as push actions\r\n+     */\r\n+    @GET\r\n+    @Path(\"pushActionsClasses\")\r\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\r\n+    List<PushActionClass> getPushActionsClasses();\r\n+\r\n     /**\r\n      * Returns the task matching the given id.\r\n      *\r"},{"sha":"d8e1d5bd09378e0f5f5da5f06005e584667705b3","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSyncTaskTO.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,84 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+public class AbstractSyncTaskTO extends SchedTaskTO {\r\n+\r\n+    private static final long serialVersionUID = -2143537546915809016L;\r\n+\r\n+    private String resource;\r\n+\r\n+    private boolean performCreate;\r\n+\r\n+    private boolean performUpdate;\r\n+\r\n+    private boolean performDelete;\r\n+\r\n+    private boolean syncStatus;\r\n+\r\n+    private String actionsClassName;\r\n+\r\n+    public String getResource() {\r\n+        return resource;\r\n+    }\r\n+\r\n+    public void setResource(String resource) {\r\n+        this.resource = resource;\r\n+    }\r\n+\r\n+    public boolean isPerformCreate() {\r\n+        return performCreate;\r\n+    }\r\n+\r\n+    public void setPerformCreate(boolean performCreate) {\r\n+        this.performCreate = performCreate;\r\n+    }\r\n+\r\n+    public boolean isPerformUpdate() {\r\n+        return performUpdate;\r\n+    }\r\n+\r\n+    public void setPerformUpdate(boolean performUpdate) {\r\n+        this.performUpdate = performUpdate;\r\n+    }\r\n+\r\n+    public boolean isPerformDelete() {\r\n+        return performDelete;\r\n+    }\r\n+\r\n+    public void setPerformDelete(boolean performDelete) {\r\n+        this.performDelete = performDelete;\r\n+    }\r\n+\r\n+    public boolean isSyncStatus() {\r\n+        return syncStatus;\r\n+    }\r\n+\r\n+    public void setSyncStatus(boolean syncStatus) {\r\n+        this.syncStatus = syncStatus;\r\n+    }\r\n+\r\n+    public String getActionsClassName() {\r\n+        return actionsClassName;\r\n+    }\r\n+\r\n+    public void setActionsClassName(String actionsClassName) {\r\n+        this.actionsClassName = actionsClassName;\r\n+    }\r\n+}\r"},{"sha":"d54814af2f70c1fd35ae59201d25be7209acc87f","filename":"common/src/main/java/org/apache/syncope/common/to/PushTaskTO.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPushTaskTO.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"pushTask\")\r\n+@XmlType\r\n+public class PushTaskTO extends AbstractSyncTaskTO {\r\n+\r\n+    private static final long serialVersionUID = -2143537546915809018L;\r\n+\r\n+}\r"},{"sha":"6e221b2fe61f79ff829030511409d1c5d26b9bf3","filename":"common/src/main/java/org/apache/syncope/common/to/SyncTaskTO.java","status":"modified","additions":2,"deletions":62,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -23,28 +23,16 @@\n \r\n @XmlRootElement(name = \"syncTask\")\r\n @XmlType\r\n-public class SyncTaskTO extends SchedTaskTO {\r\n+public class SyncTaskTO extends AbstractSyncTaskTO {\r\n \r\n-    private static final long serialVersionUID = -2143537546915809016L;\r\n-\r\n-    private String resource;\r\n+    private static final long serialVersionUID = -2143537546915809017L;\r\n \r\n     private UserTO userTemplate;\r\n \r\n     private RoleTO roleTemplate;\r\n \r\n-    private boolean performCreate;\r\n-\r\n-    private boolean performUpdate;\r\n-\r\n-    private boolean performDelete;\r\n-\r\n-    private boolean syncStatus;\r\n-\r\n     private boolean fullReconciliation;\r\n \r\n-    private String actionsClassName;\r\n-\r\n     public UserTO getUserTemplate() {\r\n         return userTemplate;\r\n     }\r\n@@ -61,59 +49,11 @@ public void setRoleTemplate(RoleTO roleTemplate) {\n         this.roleTemplate = roleTemplate;\r\n     }\r\n \r\n-    public String getResource() {\r\n-        return resource;\r\n-    }\r\n-\r\n-    public void setResource(String resource) {\r\n-        this.resource = resource;\r\n-    }\r\n-\r\n-    public boolean isPerformCreate() {\r\n-        return performCreate;\r\n-    }\r\n-\r\n-    public void setPerformCreate(boolean performCreate) {\r\n-        this.performCreate = performCreate;\r\n-    }\r\n-\r\n-    public boolean isPerformUpdate() {\r\n-        return performUpdate;\r\n-    }\r\n-\r\n-    public void setPerformUpdate(boolean performUpdate) {\r\n-        this.performUpdate = performUpdate;\r\n-    }\r\n-\r\n-    public boolean isPerformDelete() {\r\n-        return performDelete;\r\n-    }\r\n-\r\n-    public void setPerformDelete(boolean performDelete) {\r\n-        this.performDelete = performDelete;\r\n-    }\r\n-\r\n-    public boolean isSyncStatus() {\r\n-        return syncStatus;\r\n-    }\r\n-\r\n-    public void setSyncStatus(boolean syncStatus) {\r\n-        this.syncStatus = syncStatus;\r\n-    }\r\n-\r\n     public boolean isFullReconciliation() {\r\n         return fullReconciliation;\r\n     }\r\n \r\n     public void setFullReconciliation(boolean fullReconciliation) {\r\n         this.fullReconciliation = fullReconciliation;\r\n     }\r\n-\r\n-    public String getActionsClassName() {\r\n-        return actionsClassName;\r\n-    }\r\n-\r\n-    public void setActionsClassName(String actionsClassName) {\r\n-        this.actionsClassName = actionsClassName;\r\n-    }\r\n }\r"},{"sha":"05bdb9ee99f76186e031cc5ee27160576444b2df","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -36,6 +36,7 @@ public enum EventCategoryType {\n         TASK(StringUtils.EMPTY),\r\n         PROPAGATION(\"PropagationTask\"),\r\n         SYNCHRONIZATION(\"SyncTask\"),\r\n+        PUSH(\"PushTask\"),\r\n         CUSTOM(StringUtils.EMPTY);\r\n \r\n         private final String value;\r"},{"sha":"b1a48289503da23695ee0165b8d51bcecf1cee93","filename":"common/src/main/java/org/apache/syncope/common/types/TaskType.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -26,7 +26,8 @@ public enum TaskType {\n     PROPAGATION(\"propagation\"),\r\n     NOTIFICATION(\"notification\"),\r\n     SCHEDULED(\"sched\"),\r\n-    SYNCHRONIZATION(\"sync\");\r\n+    SYNCHRONIZATION(\"sync\"),\r\n+    PUSH(\"push\");\r\n \r\n     private String name;\r\n \r\n@@ -47,6 +48,7 @@ public static TaskType fromString(final String name) {\n                 }\r\n             }\r\n         }\r\n-        return TaskType.valueOf(name.toUpperCase());\r\n+\r\n+        return null;\r\n     }\r\n }\r"},{"sha":"b416daecd287ce31e73aac93714f81388ba0986d","filename":"common/src/main/java/org/apache/syncope/common/util/LoggerEventUtils.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FLoggerEventUtils.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -47,6 +47,8 @@ public static Map.Entry<EventCategoryTO, Result> parseEventCategory(final String\n                     type = EventCategoryType.PROPAGATION;\n                 } else if (EventCategoryType.SYNCHRONIZATION.toString().equals(elements[0])) {\n                     type = EventCategoryType.SYNCHRONIZATION;\n+                } else if (EventCategoryType.PUSH.toString().equals(elements[0])) {\n+                    type = EventCategoryType.PUSH;\n                 } else {\n                     try {\n                         type = EventCategoryType.valueOf(elements[0]);"},{"sha":"f74ddfc276e51e7a0a4ca4ed0746dbf1b8a9ffb3","filename":"common/src/main/java/org/apache/syncope/common/wrap/PushActionClass.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPushActionClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPushActionClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fwrap%2FPushActionClass.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.wrap;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+@XmlRootElement(name = \"pushActionClass\")\r\n+@XmlType\r\n+public class PushActionClass extends AbstractWrappable<String> {\r\n+\r\n+    private static final long serialVersionUID = 1669581609310071906L;\r\n+\r\n+}\r"},{"sha":"abf3f69348b5640cd1db3f753de9cb3ad5144fca","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/EventSelectionPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FEventSelectionPanel.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -214,7 +214,8 @@ private List<String> getEvents(final EventCategoryTO eventCategoryTO) {\n \n         if (res.isEmpty()) {\n             if ((AuditElements.EventCategoryType.PROPAGATION == eventCategoryTO.getType()\n-                    || AuditElements.EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType())\n+                    || AuditElements.EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType()\n+                    || AuditElements.EventCategoryType.PUSH == eventCategoryTO.getType())\n                     && StringUtils.isEmpty(eventCategoryTO.getCategory())) {\n                 res.add(eventCategoryTO.getType().toString());\n             } else if (AuditElements.EventCategoryType.TASK == eventCategoryTO.getType()"},{"sha":"598c0429c9ad81cc58e6bac9b974780fd3f21e79","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.PushTaskTO;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n@@ -99,6 +100,8 @@ private TaskType getTaskType(final Class<?> reference) {\n             result = TaskType.SCHEDULED;\n         } else if (SyncTaskTO.class.equals(reference)) {\n             result = TaskType.SYNCHRONIZATION;\n+        } else if (PushTaskTO.class.equals(reference)) {\n+            result = TaskType.PUSH;\n         }\n         return result;\n     }"},{"sha":"7290a7ace356626e8fb8c20bd920d8fef9b4085e","filename":"core/src/main/java/org/apache/syncope/core/init/ImplementationClassNamesLoader.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -29,8 +29,10 @@\n import org.apache.syncope.core.propagation.PropagationActions;\n import org.apache.syncope.core.quartz.TaskJob;\n import org.apache.syncope.core.report.Reportlet;\n+import org.apache.syncope.core.sync.PushActions;\n import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.SyncCorrelationRule;\n+import org.apache.syncope.core.sync.impl.PushJob;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -53,7 +55,9 @@ public enum Type {\n         REPORTLET,\n         TASKJOB,\n         SYNC_ACTIONS,\n+        PUSH_ACTIONS,\n         SYNC_CORRELATION_RULES,\n+        PUSH_CORRELATION_RULES,\n         PROPAGATION_ACTIONS,\n         VALIDATOR\n \n@@ -90,7 +94,9 @@ public void load() {\n                     }\n \n                     if ((interfaces.contains(TaskJob.class))\n-                            && !metadata.isAbstract() && !SyncJob.class.getName().equals(metadata.getClassName())) {\n+                            && !metadata.isAbstract()\n+                            && !SyncJob.class.getName().equals(metadata.getClassName())\n+                            && !PushJob.class.getName().equals(metadata.getClassName())) {\n \n                         classNames.get(Type.TASKJOB).add(metadata.getClassName());\n                     }\n@@ -99,10 +105,16 @@ public void load() {\n                         classNames.get(Type.SYNC_ACTIONS).add(metadata.getClassName());\n                     }\n \n+                    if (interfaces.contains(PushActions.class) && !metadata.isAbstract()) {\n+                        classNames.get(Type.PUSH_ACTIONS).add(metadata.getClassName());\n+                    }\n+\n                     if (interfaces.contains(SyncCorrelationRule.class) && !metadata.isAbstract()) {\n                         classNames.get(Type.SYNC_CORRELATION_RULES).add(metadata.getClassName());\n                     }\n \n+                    // TODO: add push correlation rules management\n+\n                     if (interfaces.contains(PropagationActions.class) && !metadata.isAbstract()) {\n                         classNames.get(Type.PROPAGATION_ACTIONS).add(metadata.getClassName());\n                     }"},{"sha":"3b4fd0fbaa812f18fd56483f92e9fe325d9795e7","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -25,6 +25,7 @@\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.notification.NotificationJob;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n@@ -35,8 +36,11 @@\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.quartz.TaskJob;\n import org.apache.syncope.core.report.ReportJob;\n+import org.apache.syncope.core.sync.DefaultPushActions;\n import org.apache.syncope.core.sync.DefaultSyncActions;\n+import org.apache.syncope.core.sync.PushActions;\n import org.apache.syncope.core.sync.SyncActions;\n+import org.apache.syncope.core.sync.impl.PushJob;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.quartz.Job;\n@@ -179,6 +183,21 @@ public void registerJob(final Task task, final String jobClassName, final String\n                     createBean(syncActionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n \n             ((SyncJob) jobInstance).setActions(syncActions);\n+        } else if (jobInstance instanceof PushJob && task instanceof PushTask) {\n+            String jobActionsClassName = ((PushTask) task).getActionsClassName();\n+            Class<?> syncActionsClass = DefaultPushActions.class;\n+            if (StringUtils.isNotBlank(jobActionsClassName)) {\n+                try {\n+                    syncActionsClass = Class.forName(jobActionsClassName);\n+                } catch (Exception e) {\n+                    LOG.error(\"Class {} not found, reverting to {}\", jobActionsClassName,\n+                            syncActionsClass.getName(), e);\n+                }\n+            }\n+            PushActions pushActions = (PushActions) ApplicationContextProvider.getBeanFactory().\n+                    createBean(syncActionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+            ((PushJob) jobInstance).setActions(pushActions);\n         }\n \n         registerJob(getJobName(task), jobInstance, cronExpression);\n@@ -240,6 +259,7 @@ public void load() {\n         // 1. jobs for SchedTasks\n         Set<SchedTask> tasks = new HashSet<SchedTask>(taskDAO.findAll(SchedTask.class));\n         tasks.addAll(taskDAO.findAll(SyncTask.class));\n+        tasks.addAll(taskDAO.findAll(PushTask.class));\n         for (SchedTask task : tasks) {\n             try {\n                 registerJob(task, task.getJobClassName(), task.getCronExpression());"},{"sha":"498fb93632e1bcfdb7e47454136b6413d7a3a257","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractSyncTask.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSyncTask.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.syncope.core.persistence.validation.entity.SyncTaskCheck;\n+\n+@MappedSuperclass\n+@SyncTaskCheck\n+public abstract class AbstractSyncTask extends SchedTask {\n+\n+    private static final long serialVersionUID = -4141057723006682562L;\n+\n+    /**\n+     * ExternalResource to which the sync happens.\n+     */\n+    @ManyToOne\n+    private ExternalResource resource;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer performCreate;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer performUpdate;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer performDelete;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer syncStatus;\n+\n+    private String actionsClassName;\n+\n+    public AbstractSyncTask(final String jobClassName) {\n+        super();\n+        super.setJobClassName(jobClassName);\n+    }\n+\n+    @Override\n+    public void setJobClassName(final String jobClassName) {\n+        // fixed to SyncJob, cannot be changed\n+    }\n+\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(ExternalResource resource) {\n+        this.resource = resource;\n+    }\n+\n+    public boolean isPerformCreate() {\n+        return isBooleanAsInteger(performCreate);\n+    }\n+\n+    public void setPerformCreate(final boolean performCreate) {\n+        this.performCreate = getBooleanAsInteger(performCreate);\n+    }\n+\n+    public boolean isPerformUpdate() {\n+        return isBooleanAsInteger(performUpdate);\n+    }\n+\n+    public void setPerformUpdate(final boolean performUpdate) {\n+        this.performUpdate = getBooleanAsInteger(performUpdate);\n+    }\n+\n+    public boolean isPerformDelete() {\n+        return isBooleanAsInteger(performDelete);\n+    }\n+\n+    public void setPerformDelete(boolean performDelete) {\n+        this.performDelete = getBooleanAsInteger(performDelete);\n+    }\n+\n+    public boolean isSyncStatus() {\n+        return isBooleanAsInteger(syncStatus);\n+    }\n+\n+    public void setSyncStatus(final boolean syncStatus) {\n+        this.syncStatus = getBooleanAsInteger(syncStatus);\n+    }\n+\n+    public String getActionsClassName() {\n+        return actionsClassName;\n+    }\n+\n+    public void setActionsClassName(final String actionsClassName) {\n+        this.actionsClassName = actionsClassName;\n+    }\n+}"},{"sha":"2d0fdfb937376d6f483c5f49bd0018c22585b898","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PushTask.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class PushTask extends AbstractSyncTask {\n+\n+    private static final long serialVersionUID = -4141057723006682564L;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public PushTask() {\n+        super(\"org.apache.syncope.core.sync.impl.PushJob\");\n+    }\n+}"},{"sha":"5df0f670bb791861aee45044bd4677de8a9256d8","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":3,"deletions":89,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -21,79 +21,33 @@\n import javax.persistence.Basic;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n-import javax.persistence.ManyToOne;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.core.persistence.validation.entity.SyncTaskCheck;\n import org.apache.syncope.core.util.XMLSerializer;\n \n @Entity\n-@SyncTaskCheck\n-public class SyncTask extends SchedTask {\n+public class SyncTask extends AbstractSyncTask {\n \n-    private static final long serialVersionUID = -4141057723006682562L;\n-\n-    /**\n-     * ExternalResource to which the sync happens.\n-     */\n-    @ManyToOne\n-    private ExternalResource resource;\n+    private static final long serialVersionUID = -4141057723006682563L;\n \n     @Lob\n     private String userTemplate;\n \n     @Lob\n     private String roleTemplate;\n \n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer performCreate;\n-\n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer performUpdate;\n-\n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer performDelete;\n-\n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer syncStatus;\n-\n     @Basic\n     @Min(0)\n     @Max(1)\n     private Integer fullReconciliation;\n \n-    private String actionsClassName;\n-\n     /**\n      * Default constructor.\n      */\n     public SyncTask() {\n-        super();\n-\n-        super.setJobClassName(\"org.apache.syncope.core.sync.impl.SyncJob\");\n-    }\n-\n-    @Override\n-    public void setJobClassName(final String jobClassName) {\n-        // fixed to SyncJob, cannot be changed\n-    }\n-\n-    public ExternalResource getResource() {\n-        return resource;\n-    }\n-\n-    public void setResource(ExternalResource resource) {\n-        this.resource = resource;\n+        super(\"org.apache.syncope.core.sync.impl.SyncJob\");\n     }\n \n     public UserTO getUserTemplate() {\n@@ -116,51 +70,11 @@ public void setRoleTemplate(final RoleTO roleTemplate) {\n         this.roleTemplate = XMLSerializer.serialize(roleTemplate);\n     }\n \n-    public boolean isPerformCreate() {\n-        return isBooleanAsInteger(performCreate);\n-    }\n-\n-    public void setPerformCreate(final boolean performCreate) {\n-        this.performCreate = getBooleanAsInteger(performCreate);\n-    }\n-\n-    public boolean isPerformUpdate() {\n-        return isBooleanAsInteger(performUpdate);\n-    }\n-\n-    public void setPerformUpdate(final boolean performUpdate) {\n-        this.performUpdate = getBooleanAsInteger(performUpdate);\n-    }\n-\n-    public boolean isPerformDelete() {\n-        return isBooleanAsInteger(performDelete);\n-    }\n-\n-    public void setPerformDelete(boolean performDelete) {\n-        this.performDelete = getBooleanAsInteger(performDelete);\n-    }\n-\n-    public boolean isSyncStatus() {\n-        return isBooleanAsInteger(syncStatus);\n-    }\n-\n-    public void setSyncStatus(final boolean syncStatus) {\n-        this.syncStatus = getBooleanAsInteger(syncStatus);\n-    }\n-\n     public boolean isFullReconciliation() {\n         return isBooleanAsInteger(fullReconciliation);\n     }\n \n     public void setFullReconciliation(final boolean fullReconciliation) {\n         this.fullReconciliation = getBooleanAsInteger(fullReconciliation);\n     }\n-\n-    public String getActionsClassName() {\n-        return actionsClassName;\n-    }\n-\n-    public void setActionsClassName(String actionsClassName) {\n-        this.actionsClassName = actionsClassName;\n-    }\n }"},{"sha":"4c6b98596d6950c55cc82a5afdb9170eb5929621","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -25,6 +25,7 @@\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n@@ -47,7 +48,10 @@ private <T extends Task> StringBuilder buildfindAllQuery(final Class<T> referenc\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(reference.getSimpleName()).append(\" e \");\n         if (SchedTask.class.equals(reference)) {\n             queryString.append(\"WHERE e.id NOT IN (SELECT e.id FROM \").\n-                    append(SyncTask.class.getSimpleName()).append(\" e) \");\n+                    append(SyncTask.class.getSimpleName()).\n+                    append(\" e) AND e.id NOT IN (SELECT e.id FROM \").\n+                    append(PushTask.class.getSimpleName()).\n+                    append(\" e)\");\n         }\n \n         return queryString;"},{"sha":"d5641c582258e7ddcd54341c70c3654d0f8a779c","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SyncTaskValidator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -22,10 +22,10 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.sync.SyncActions;\n \n-public class SyncTaskValidator extends AbstractValidator<SyncTaskCheck, SyncTask> {\n+public class SyncTaskValidator extends AbstractValidator<SyncTaskCheck, AbstractSyncTask> {\n \n     private final SchedTaskValidator schedV;\n \n@@ -36,7 +36,7 @@ public SyncTaskValidator() {\n     }\n \n     @Override\n-    public boolean isValid(final SyncTask object, final ConstraintValidatorContext context) {\n+    public boolean isValid(final AbstractSyncTask object, final ConstraintValidatorContext context) {\n         boolean isValid = schedV.isValid(object, context);\n \n         if (isValid) {"},{"sha":"375b1725cbf2cd24ed31c576dbfa8bcdbfdcfa95","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":41,"deletions":20,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.propagation.impl;\n \n-import java.util.ArrayList;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -138,23 +137,31 @@ protected PropagationActions getPropagationActions(final ExternalResource resour\n         return result;\n     }\n \n-    protected void createOrUpdate(final PropagationTask task, final ConnectorObject beforeObj,\n-            final Connector connector, final Set<String> propagationAttempted) {\n+    public static void createOrUpdate(\n+            final ObjectClass oclass,\n+            final String accountId,\n+            final Set<Attribute> attrs,\n+            final String resource,\n+            final PropagationMode propagationMode,\n+            final ConnectorObject beforeObj,\n+            final Connector connector,\n+            final Set<String> propagationAttempted,\n+            final ConnObjectUtil connObjectUtil) {\n \n         // set of attributes to be propagated\n-        final Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n+        final Set<Attribute> attributes = new HashSet<Attribute>(attrs);\n \n         // check if there is any missing or null / empty mandatory attribute\n         List<Object> mandatoryAttrNames = new ArrayList<Object>();\n-        Attribute mandatoryMissing = AttributeUtil.find(MANDATORY_MISSING_ATTR_NAME, task.getAttributes());\n+        Attribute mandatoryMissing = AttributeUtil.find(MANDATORY_MISSING_ATTR_NAME, attrs);\n         if (mandatoryMissing != null) {\n             attributes.remove(mandatoryMissing);\n \n             if (beforeObj == null) {\n                 mandatoryAttrNames.addAll(mandatoryMissing.getValue());\n             }\n         }\n-        Attribute mandatoryNullOrEmpty = AttributeUtil.find(MANDATORY_NULL_OR_EMPTY_ATTR_NAME, task.getAttributes());\n+        Attribute mandatoryNullOrEmpty = AttributeUtil.find(MANDATORY_NULL_OR_EMPTY_ATTR_NAME, attrs);\n         if (mandatoryNullOrEmpty != null) {\n             attributes.remove(mandatoryNullOrEmpty);\n \n@@ -166,30 +173,26 @@ protected void createOrUpdate(final PropagationTask task, final ConnectorObject\n         }\n \n         if (beforeObj == null) {\n-            // 1. get accountId\n-            final String accountId = task.getAccountId();\n-\n-            // 2. get name\n+            // 1. get name\n             final Name name = (Name) AttributeUtil.find(Name.NAME, attributes);\n \n-            // 3. check if:\n+            // 2. check if:\n             //      * accountId is not blank;\n             //      * accountId is not equal to Name.\n             if (StringUtils.isNotBlank(accountId) && (name == null || !accountId.equals(name.getNameValue()))) {\n-                // 3.a retrieve uid\n+                // 2.a retrieve uid\n                 final Uid uid = (Uid) AttributeUtil.find(Uid.NAME, attributes);\n \n-                // 3.b add Uid if not provided\n+                // 2.b add Uid if not provided\n                 if (uid == null) {\n                     attributes.add(AttributeBuilder.build(Uid.NAME, Collections.singleton(accountId)));\n                 }\n             }\n \n-            // 4. provision entry\n-            LOG.debug(\"Create {} on {}\", attributes, task.getResource().getName());\n+            // 3. provision entry\n+            LOG.debug(\"Create {} on {}\", attributes, resource);\n \n-            connector.create(task.getPropagationMode(), new ObjectClass(task.getObjectClassName()),\n-                    attributes, null, propagationAttempted);\n+            connector.create(propagationMode, oclass, attributes, null, propagationAttempted);\n         } else {\n             // 1. check if rename is really required\n             final Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n@@ -230,14 +233,32 @@ protected void createOrUpdate(final PropagationTask task, final ConnectorObject\n                 }\n \n                 // 3. provision entry\n-                LOG.debug(\"Update {} on {}\", strictlyModified, task.getResource().getName());\n+                LOG.debug(\"Update {} on {}\", strictlyModified, resource);\n \n-                connector.update(task.getPropagationMode(), beforeObj.getObjectClass(),\n+                connector.update(propagationMode, beforeObj.getObjectClass(),\n                         beforeObj.getUid(), strictlyModified, null, propagationAttempted);\n             }\n         }\n     }\n \n+    protected void createOrUpdate(\n+            final PropagationTask task,\n+            final ConnectorObject beforeObj,\n+            final Connector connector,\n+            final Set<String> propagationAttempted) {\n+\n+        createOrUpdate(\n+                new ObjectClass(task.getObjectClassName()),\n+                task.getAccountId(),\n+                task.getAttributes(),\n+                task.getResource().getName(),\n+                task.getResource().getPropagationMode(),\n+                beforeObj,\n+                connector,\n+                propagationAttempted,\n+                connObjectUtil);\n+    }\n+\n     protected AbstractAttributable getSubject(final PropagationTask task) {\n         AbstractAttributable subject = null;\n \n@@ -510,7 +531,7 @@ protected ConnectorObject getRemoteObject(final PropagationTask task, final Conn\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(accountId),\n                     connector.getOperationOptions(AttributableUtil.getInstance(task.getSubjectType()).\n-                            getMappingItems(task.getResource(), MappingPurpose.PROPAGATION)));\n+                    getMappingItems(task.getResource(), MappingPurpose.PROPAGATION)));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"3b12c699322fbc4ceb5bc0f31a5813597285e058","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":2,"deletions":95,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.propagation.impl;\n \n-import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -31,11 +30,9 @@\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n-import org.apache.syncope.core.connid.PasswordGenerator;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n@@ -54,12 +51,10 @@\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.JexlUtil;\n import org.apache.syncope.core.util.MappingUtil;\n-import org.apache.syncope.core.util.VirAttrCache;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -100,15 +95,6 @@ public class PropagationManager {\n     @Autowired\n     private ConnObjectUtil connObjectUtil;\n \n-    @Autowired\n-    private PasswordGenerator passwordGenerator;\n-\n-    /**\n-     * Virtual attribute cache.\n-     */\n-    @Autowired\n-    private VirAttrCache virAttrCache;\n-\n     /**\n      * Create the user on every associated resource.\n      *\n@@ -496,7 +482,7 @@ public List<PropagationTask> getRoleDeleteTaskIds(final Long roleId, final Colle\n         SyncopeRole role = roleDataBinder.getRoleFromId(roleId);\n         return getDeleteTaskIds(role, role.getResourceNames(), noPropResourceNames);\n     }\n-    \n+\n     /**\n      * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n      * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n@@ -529,85 +515,6 @@ protected List<PropagationTask> getDeleteTaskIds(\n         return createTasks(attributable, null, false, null, null, false, true, propByRes);\n     }\n \n-    /**\n-     * Prepare attributes for sending to a connector instance.\n-     *\n-     * @param <T> user / role\n-     * @param attrUtil user / role\n-     * @param subject given user / role\n-     * @param password clear-text password\n-     * @param changePwd whether password should be included for propagation attributes or not\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @param enable whether user must be enabled or not\n-     * @param resource target resource\n-     * @return account link + prepared attributes\n-     */\n-    protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(\n-            final AttributableUtil attrUtil, final T subject, final String password, final boolean changePwd,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n-            final Boolean enable, final ExternalResource resource) {\n-\n-        LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n-                subject, resource, subject.getAttrs());\n-\n-        Set<Attribute> attributes = new HashSet<Attribute>();\n-        String accountId = null;\n-\n-        for (AbstractMappingItem mapping : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n-            LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n-\n-            try {\n-                if ((attrUtil.getType() == AttributableType.USER\n-                        && mapping.getIntMappingType() == IntMappingType.UserVirtualSchema)\n-                        || (attrUtil.getType() == AttributableType.ROLE\n-                        && mapping.getIntMappingType() == IntMappingType.RoleVirtualSchema)) {\n-\n-                    LOG.debug(\"Expire entry cache {}-{}\", subject.getId(), mapping.getIntAttrName());\n-                    virAttrCache.expire(attrUtil.getType(), subject.getId(), mapping.getIntAttrName());\n-                }\n-\n-                Map.Entry<String, Attribute> preparedAttribute = MappingUtil.prepareAttribute(\n-                        resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated);\n-\n-                if (preparedAttribute != null && preparedAttribute.getKey() != null) {\n-                    accountId = preparedAttribute.getKey();\n-                }\n-\n-                if (preparedAttribute != null && preparedAttribute.getValue() != null) {\n-                    Attribute alreadyAdded = AttributeUtil.find(preparedAttribute.getValue().getName(), attributes);\n-\n-                    if (alreadyAdded == null) {\n-                        attributes.add(preparedAttribute.getValue());\n-                    } else {\n-                        attributes.remove(alreadyAdded);\n-\n-                        Set<Object> values = new HashSet<Object>(alreadyAdded.getValue());\n-                        values.addAll(preparedAttribute.getValue().getValue());\n-\n-                        attributes.add(AttributeBuilder.build(preparedAttribute.getValue().getName(), values));\n-                    }\n-                }\n-            } catch (Exception e) {\n-                LOG.debug(\"Attribute '{}' processing failed\", mapping.getIntAttrName(), e);\n-            }\n-        }\n-\n-        attributes.add(MappingUtil.evaluateNAME(subject, resource, accountId));\n-\n-        if (enable != null) {\n-            attributes.add(AttributeBuilder.buildEnabled(enable));\n-        }\n-        if (!changePwd) {\n-            Attribute pwdAttr = AttributeUtil.find(OperationalAttributes.PASSWORD_NAME, attributes);\n-            if (pwdAttr != null) {\n-                attributes.remove(pwdAttr);\n-            }\n-        }\n-\n-        return new SimpleEntry<String, Set<Attribute>>(accountId, attributes);\n-    }\n-\n     /**\n      * Create propagation tasks.\n      *\n@@ -675,7 +582,7 @@ protected <T extends AbstractAttributable> List<PropagationTask> createTasks(fin\n                     task.setPropagationMode(resource.getPropagationMode());\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n-                    Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(attrUtil, subject,\n+                    Map.Entry<String, Set<Attribute>> preparedAttrs = MappingUtil.prepareAttributes(attrUtil, subject,\n                             password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, enable, resource);\n                     task.setAccountId(preparedAttrs.getKey());\n "},{"sha":"b98d86c6e24124701da3b18ec92db21aa2d132cb","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTaskJob.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -137,7 +137,6 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n         if (hasToBeRegistered(execution)) {\n             taskExecDAO.saveAndAdd(taskId, execution);\n         }\n-\n         task = taskDAO.save(task);\n \n         notificationManager.createTasks("},{"sha":"10447c82e32982cd79a7722cc5bd8392c9f54c0e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -242,25 +242,31 @@ public List<EventCategoryTO> listAuditEvents() {\n \n             events.add(new EventCategoryTO(EventCategoryType.PROPAGATION));\n             events.add(new EventCategoryTO(EventCategoryType.SYNCHRONIZATION));\n+            events.add(new EventCategoryTO(EventCategoryType.PUSH));\n \n             for (AttributableType attributableType : AttributableType.values()) {\n                 for (ExternalResource resource : resourceDAO.findAll()) {\n                     final EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n                     final EventCategoryTO syncEventCategoryTO = new EventCategoryTO(EventCategoryType.SYNCHRONIZATION);\n+                    final EventCategoryTO pushEventCategoryTO = new EventCategoryTO(EventCategoryType.PUSH);\n \n                     propEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n                     propEventCategoryTO.setSubcategory(resource.getName());\n \n                     syncEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n+                    pushEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n                     syncEventCategoryTO.setSubcategory(resource.getName());\n+                    pushEventCategoryTO.setSubcategory(resource.getName());\n \n                     for (ResourceOperation resourceOperation : ResourceOperation.values()) {\n                         propEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n                         syncEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n+                        pushEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n                     }\n \n                     events.add(propEventCategoryTO);\n                     events.add(syncEventCategoryTO);\n+                    events.add(pushEventCategoryTO);\n                 }\n             }\n "},{"sha":"5efe46bcedad4041a5d4db6fdb1e35a25302fadf","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -167,6 +167,11 @@ public Set<String> getSyncActionsClasses() {\n         return classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS);\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    public Set<String> getPushActionsClasses() {\n+        return classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.PUSH_ACTIONS);\n+    }\n+\n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     public <T extends AbstractTaskTO> T read(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n@@ -207,6 +212,7 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n \n             case SCHEDULED:\n             case SYNCHRONIZATION:\n+            case PUSH:\n                 try {\n                     jobInstanceLoader.registerJob(task,\n                             ((SchedTask) task).getJobClassName(),\n@@ -291,7 +297,9 @@ public <T extends AbstractTaskTO> T delete(final Long taskId) {\n \n         T taskToDelete = binder.getTaskTO(task, taskUtil);\n \n-        if (TaskType.SCHEDULED == taskUtil.getType() || TaskType.SYNCHRONIZATION == taskUtil.getType()) {\n+        if (TaskType.SCHEDULED == taskUtil.getType()\n+                || TaskType.SYNCHRONIZATION == taskUtil.getType()\n+                || TaskType.PUSH == taskUtil.getType()) {\n             jobInstanceLoader.unregisterJob(task);\n         }\n "},{"sha":"331a66ebfc41c80446c5031c0e83c6f6cffbaeec","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":64,"deletions":48,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -33,7 +33,9 @@\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.BeanUtils;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.AbstractSyncTaskTO;\n import org.apache.syncope.core.init.JobInstanceLoader;\n+import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -64,9 +66,9 @@ public class TaskDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = {\"executions\", \"resource\",};\n+    private static final String[] IGNORE_TASK_PROPERTIES = { \"executions\", \"resource\", };\n \n-    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n+    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"id\", \"task\" };\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -91,82 +93,105 @@ private void checkJexl(final AbstractAttributableTO attributableTO, final Syncop\n         }\n     }\n \n-    private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n+    private void fill(final AbstractSyncTask task, final AbstractSyncTaskTO taskTO) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n \n-        // 1. validate JEXL expressions in user and role templates\n-        if (taskTO.getUserTemplate() != null) {\n-            UserTO template = taskTO.getUserTemplate();\n+        if (task instanceof SyncTask && taskTO instanceof SyncTaskTO) {\n+            final SyncTask syncTask = (SyncTask) task;\n+            final SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n \n-            if (StringUtils.isNotBlank(template.getUsername()) && !JexlUtil.isExpressionValid(template.getUsername())) {\n-                sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n-            }\n-            if (StringUtils.isNotBlank(template.getPassword()) && !JexlUtil.isExpressionValid(template.getPassword())) {\n-                sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n-            }\n+            // 1. validate JEXL expressions in user and role templates\n+            if (syncTaskTO.getUserTemplate() != null) {\n+                UserTO template = syncTaskTO.getUserTemplate();\n \n-            checkJexl(template, sce);\n+                if (StringUtils.isNotBlank(template.getUsername()) && !JexlUtil.\n+                        isExpressionValid(template.getUsername())) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n+                }\n+                if (StringUtils.isNotBlank(template.getPassword()) && !JexlUtil.\n+                        isExpressionValid(template.getPassword())) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n+                }\n \n-            for (MembershipTO memb : template.getMemberships()) {\n-                checkJexl(memb, sce);\n+                checkJexl(template, sce);\n+\n+                for (MembershipTO memb : template.getMemberships()) {\n+                    checkJexl(memb, sce);\n+                }\n             }\n-        }\n-        if (taskTO.getRoleTemplate() != null) {\n-            RoleTO template = taskTO.getRoleTemplate();\n+            if (syncTaskTO.getRoleTemplate() != null) {\n+                RoleTO template = syncTaskTO.getRoleTemplate();\n \n-            if (StringUtils.isNotBlank(template.getName()) && !JexlUtil.isExpressionValid(template.getName())) {\n-                sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n+                if (StringUtils.isNotBlank(template.getName()) && !JexlUtil.isExpressionValid(template.getName())) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n+                }\n+\n+                checkJexl(template, sce);\n+            }\n+            if (!sce.isEmpty()) {\n+                throw sce;\n             }\n \n-            checkJexl(template, sce);\n-        }\n-        if (!sce.isEmpty()) {\n-            throw sce;\n-        }\n+            // 2. all JEXL expressions are valid: accept user and role templates\n+            syncTask.setUserTemplate(syncTaskTO.getUserTemplate());\n+            syncTask.setRoleTemplate(syncTaskTO.getRoleTemplate());\n \n-        // 2. all JEXL expressions are valid: accept user and role templates\n-        task.setUserTemplate(taskTO.getUserTemplate());\n-        task.setRoleTemplate(taskTO.getRoleTemplate());\n+            syncTask.setFullReconciliation(syncTaskTO.isFullReconciliation());\n+        }\n \n         // 3. fill the remaining fields\n         task.setPerformCreate(taskTO.isPerformCreate());\n         task.setPerformUpdate(taskTO.isPerformUpdate());\n         task.setPerformDelete(taskTO.isPerformDelete());\n         task.setSyncStatus(taskTO.isSyncStatus());\n-        task.setFullReconciliation(taskTO.isFullReconciliation());\n \n         task.setActionsClassName(taskTO.getActionsClassName());\n     }\n \n     public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUtil) {\n+        final Class<?> taskTOClass = taskUtil.taskTOClass();\n+\n+        if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n+            throw new ClassCastException(\n+                    String.format(\"taskUtil is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n+        }\n+\n         SchedTask task = taskUtil.newTask();\n         task.setCronExpression(taskTO.getCronExpression());\n         task.setName(taskTO.getName());\n         task.setDescription(taskTO.getDescription());\n \n         if (taskUtil.getType() == TaskType.SCHEDULED) {\n             task.setJobClassName(taskTO.getJobClassName());\n-        }\n-        if (taskUtil.getType() == TaskType.SYNCHRONIZATION) {\n-            if (!(taskTO instanceof SyncTaskTO)) {\n-                throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n-                        getClass().getName());\n-            }\n-            SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n+        } else if (taskTO instanceof AbstractSyncTaskTO) {\n+            final AbstractSyncTaskTO syncTaskTO = (AbstractSyncTaskTO) taskTO;\n \n             ExternalResource resource = resourceDAO.find(syncTaskTO.getResource());\n             if (resource == null) {\n                 throw new NotFoundException(\"Resource \" + syncTaskTO.getResource());\n             }\n             ((SyncTask) task).setResource(resource);\n \n-            fill((SyncTask) task, syncTaskTO);\n+            fill((AbstractSyncTask) task, syncTaskTO);\n         }\n \n         return task;\n     }\n \n     public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, final TaskUtil taskUtil) {\n+        Class<?> taskClass = taskUtil.taskClass();\n+        Class<?> taskTOClass = taskUtil.taskTOClass();\n+\n+        if (taskClass == null || !taskClass.equals(task.getClass())) {\n+            throw new ClassCastException(\n+                    String.format(\"taskUtil is type %s but task is not: %s\", taskClass, task.getClass()));\n+        }\n+\n+        if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n+            throw new ClassCastException(\n+                    String.format(\"taskUtil is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n+        }\n+\n         task.setCronExpression(taskTO.getCronExpression());\n         if (StringUtils.isNotBlank(taskTO.getName())) {\n             task.setName(taskTO.getName());\n@@ -175,17 +200,8 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n             task.setDescription(taskTO.getDescription());\n         }\n \n-        if (taskUtil.getType() == TaskType.SYNCHRONIZATION) {\n-            if (!(task instanceof SyncTask)) {\n-                throw new ClassCastException(\"taskUtil is type SyncTask but task is not SyncTask: \" + task.getClass().\n-                        getName());\n-            }\n-            if (!(taskTO instanceof SyncTaskTO)) {\n-                throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n-                        getClass().getName());\n-            }\n-\n-            fill((SyncTask) task, (SyncTaskTO) taskTO);\n+        if (task instanceof AbstractSyncTask) {\n+            fill((AbstractSyncTask) task, (AbstractSyncTaskTO) taskTO);\n         }\n     }\n "},{"sha":"cc962069503303268b10b6e011895b1557a0fa45","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n import org.apache.syncope.common.types.TaskType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.apache.syncope.common.wrap.PushActionClass;\r\n import org.apache.syncope.core.persistence.dao.search.OrderByClause;\r\n import org.apache.syncope.core.rest.controller.TaskController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n@@ -88,6 +89,11 @@ public List<SyncActionClass> getSyncActionsClasses() {\n         return CollectionWrapper.wrap(controller.getSyncActionsClasses(), SyncActionClass.class);\r\n     }\r\n \r\n+    @Override\r\n+    public List<PushActionClass> getPushActionsClasses() {\r\n+        return CollectionWrapper.wrap(controller.getPushActionsClasses(), PushActionClass.class);\r\n+    }\r\n+\r\n     @Override\r\n     public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType) {\r\n         return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\r"},{"sha":"f15ab5aee80dafb065e42ffca5dd39270cfdb9d9","filename":"core/src/main/java/org/apache/syncope/core/sync/AbstractSyncActions.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FAbstractSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FAbstractSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FAbstractSyncActions.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import java.util.List;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler;\n+import org.quartz.JobExecutionException;\n+\n+public interface AbstractSyncActions<T extends AbstractSyncopeResultHandler> {\n+\n+    /**\n+     * Action to be executed before to start the synchronization task execution.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @throws JobExecutionException in case of generic failure.\n+     */\n+    void beforeAll(final T handler) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed after the synchronization task completion.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param results synchronization result\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    void afterAll(final T handler, final List<SyncResult> results) throws JobExecutionException;\n+}"},{"sha":"5802841650785b3aefe096ac5db433354eed6573","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultPushActions.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.quartz.JobExecutionException;\n+\n+/**\n+ * Default (empty) implementation of PushActions.\n+ */\n+public class DefaultPushActions implements PushActions {\n+\n+    @Override\n+    public void beforeAll(final AbstractSyncopeResultHandler handler) throws JobExecutionException {\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeCreate(\n+            final AbstractSyncopeResultHandler handler,\n+            final T subject,\n+            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException {\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUpdate(\n+            final AbstractSyncopeResultHandler handler,\n+            final T subject,\n+            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException {\n+\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> void after(\n+            final AbstractSyncopeResultHandler handler,\n+            final T subject,\n+            final Map.Entry<String, Set<Attribute>> delta, SyncResult result) throws JobExecutionException {\n+    }\n+\n+    @Override\n+    public void afterAll(\n+            final AbstractSyncopeResultHandler handler,\n+            final List<SyncResult> results)\n+            throws JobExecutionException {\n+    }\n+}"},{"sha":"7f8715b90654d32ccdfe05241e829d0bab060b47","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultSyncActions.java","status":"modified","additions":21,"deletions":9,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -22,8 +22,8 @@\n \n import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n \n /**\n@@ -32,38 +32,50 @@\n public class DefaultSyncActions implements SyncActions {\n \n     @Override\n-    public void beforeAll(final SyncResultsHandler handler) throws JobExecutionException {\n+    public void beforeAll(final AbstractSyncopeSyncResultHandler handler) throws JobExecutionException {\n     }\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResultsHandler handler,\n-            final SyncDelta delta, final T subject) throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject,\n+            final K subjectMod)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n     public <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n-            final SyncResultsHandler handler, final SyncDelta delta, final T subject) throws JobExecutionException {\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AbstractAttributableTO> void after(final SyncResultsHandler handler,\n-            final SyncDelta delta, final T subject, final SyncResult result) throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> void after(\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject,\n+            final SyncResult result) throws JobExecutionException {\n     }\n \n     @Override\n-    public void afterAll(final SyncResultsHandler handler, final List<SyncResult> results)\n+    public void afterAll(\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final List<SyncResult> results)\n             throws JobExecutionException {\n     }\n }"},{"sha":"caec4d94c2d8788a67bd074b5f2b0ff3d5c43a84","filename":"core/src/main/java/org/apache/syncope/core/sync/PushActions.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.quartz.JobExecutionException;\n+\n+/**\n+ * Interface for actions to be performed during PushJob execution.\n+ */\n+public interface PushActions extends AbstractSyncActions<AbstractSyncopeResultHandler> {\n+\n+    /**\n+     * Action to be executed before to create a synchronized user locally.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param subject user / role to be created\n+     * @param delta info to be pushed out (accountId, attributes)\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeCreate(\n+            final AbstractSyncopeResultHandler handler,\n+            final T subject,\n+            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before to update a synchronized user locally.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param subject user / role to be created\n+     * @param delta info to be pushed out (accountId, attributes)\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUpdate(\n+            final AbstractSyncopeResultHandler handler,\n+            final T subject,\n+            final Map.Entry<String, Set<Attribute>> delta) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed after each local user synchronization.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param subject user / role to be created\n+     * @param delta info pushed out (accountId, attributes)\n+     * @param result operation result.\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> void after(\n+            final AbstractSyncopeResultHandler handler,\n+            final T subject,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final SyncResult result) throws JobExecutionException;\n+}"},{"sha":"34406826a3f9cea7f98151b40af69ac3ff57d8ab","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncActions.java","status":"modified","additions":17,"deletions":27,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -18,26 +18,16 @@\n  */\n package org.apache.syncope.core.sync;\n \n-import java.util.List;\n-\n import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n \n /**\n  * Interface for actions to be performed during SyncJob execution.\n  */\n-public interface SyncActions {\n-\n-    /**\n-     * Action to be executed before to start the synchronization task execution.\n-     *\n-     * @param handler synchronization handler being executed.\n-     * @throws JobExecutionException in case of generic failure.\n-     */\n-    void beforeAll(final SyncResultsHandler handler) throws JobExecutionException;\n+public interface SyncActions extends AbstractSyncActions<AbstractSyncopeSyncResultHandler> {\n \n     /**\n      * Action to be executed before to create a synchronized user locally.\n@@ -48,8 +38,10 @@ public interface SyncActions {\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResultsHandler handler,\n-            final SyncDelta delta, final T subject) throws JobExecutionException;\n+    <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to update a synchronized user locally.\n@@ -62,7 +54,10 @@ <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResultsHandl\n      * @throws JobExecutionException in case of generic failure.\n      */\n     <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject,\n+            final K subjectMod)\n             throws JobExecutionException;\n \n     /**\n@@ -74,8 +69,10 @@ <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncResultsHandler handler,\n-            final SyncDelta delta, final T subject) throws JobExecutionException;\n+    <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException;\n \n     /**\n      * Action to be executed after each local user synchronization.\n@@ -86,15 +83,8 @@ <T extends AbstractAttributableTO> SyncDelta beforeDelete(final SyncResultsHandl\n      * @param result global synchronization results at the current synchronization step\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributableTO> void after(final SyncResultsHandler handler, final SyncDelta delta,\n+    <T extends AbstractAttributableTO> void after(\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n             final T subject, final SyncResult result) throws JobExecutionException;\n-\n-    /**\n-     * Action to be executed after the synchronization task completion.\n-     *\n-     * @param handler synchronization handler being executed.\n-     * @param results synchronization result\n-     * @throws JobExecutionException in case of generic failure\n-     */\n-    void afterAll(final SyncResultsHandler handler, final List<SyncResult> results) throws JobExecutionException;\n }"},{"sha":"6d40f01d07a8221eaf12a1806a7b080c411af526","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncJob.java","status":"added","additions":313,"deletions":0,"changes":313,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,313 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.types.TraceLevel;\n+import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n+import org.apache.syncope.core.persistence.beans.Entitlement;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.beans.TaskExec;\n+import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.propagation.ConnectorFactory;\n+import org.apache.syncope.core.quartz.AbstractTaskJob;\n+import org.apache.syncope.core.sync.AbstractSyncActions;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+\n+/**\n+ * Job for executing synchronization tasks.\n+ *\n+ * @see AbstractTaskJob\n+ * @see SyncTask\n+ * @see PushTask\n+ */\n+public abstract class AbstractSyncJob<H extends AbstractSyncopeResultHandler, A extends AbstractSyncActions<?>>\n+        extends AbstractTaskJob {\n+\n+    /**\n+     * ConnInstance loader.\n+     */\n+    @Autowired\n+    protected ConnectorFactory connFactory;\n+\n+    /**\n+     * Resource DAO.\n+     */\n+    @Autowired\n+    protected ResourceDAO resourceDAO;\n+\n+    /**\n+     * Entitlement DAO.\n+     */\n+    @Autowired\n+    protected EntitlementDAO entitlementDAO;\n+\n+    /**\n+     * SyncJob actions.\n+     */\n+    protected A actions;\n+\n+    public void setActions(final A actions) {\n+        this.actions = actions;\n+    }\n+\n+    /**\n+     * Create a textual report of the synchronization, based on the trace level.\n+     *\n+     * @param syncResults Sync results\n+     * @param syncTraceLevel Sync trace level\n+     * @param dryRun dry run?\n+     * @return report as string\n+     */\n+    protected String createReport(final List<SyncResult> syncResults, final TraceLevel syncTraceLevel,\n+            final boolean dryRun) {\n+\n+        if (syncTraceLevel == TraceLevel.NONE) {\n+            return null;\n+        }\n+\n+        StringBuilder report = new StringBuilder();\n+\n+        if (dryRun) {\n+            report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n+        }\n+\n+        List<SyncResult> uSuccCreate = new ArrayList<SyncResult>();\n+        List<SyncResult> uFailCreate = new ArrayList<SyncResult>();\n+        List<SyncResult> uSuccUpdate = new ArrayList<SyncResult>();\n+        List<SyncResult> uFailUpdate = new ArrayList<SyncResult>();\n+        List<SyncResult> uSuccDelete = new ArrayList<SyncResult>();\n+        List<SyncResult> uFailDelete = new ArrayList<SyncResult>();\n+        List<SyncResult> rSuccCreate = new ArrayList<SyncResult>();\n+        List<SyncResult> rFailCreate = new ArrayList<SyncResult>();\n+        List<SyncResult> rSuccUpdate = new ArrayList<SyncResult>();\n+        List<SyncResult> rFailUpdate = new ArrayList<SyncResult>();\n+        List<SyncResult> rSuccDelete = new ArrayList<SyncResult>();\n+        List<SyncResult> rFailDelete = new ArrayList<SyncResult>();\n+\n+        for (SyncResult syncResult : syncResults) {\n+            switch (syncResult.getStatus()) {\n+                case SUCCESS:\n+                    switch (syncResult.getOperation()) {\n+                        case CREATE:\n+                            switch (syncResult.getSubjectType()) {\n+                                case USER:\n+                                    uSuccCreate.add(syncResult);\n+                                    break;\n+\n+                                case ROLE:\n+                                    rSuccCreate.add(syncResult);\n+                                    break;\n+\n+                                default:\n+                            }\n+                            break;\n+\n+                        case UPDATE:\n+                            switch (syncResult.getSubjectType()) {\n+                                case USER:\n+                                    uSuccUpdate.add(syncResult);\n+                                    break;\n+\n+                                case ROLE:\n+                                    rSuccUpdate.add(syncResult);\n+                                    break;\n+\n+                                default:\n+                            }\n+                            break;\n+\n+                        case DELETE:\n+                            switch (syncResult.getSubjectType()) {\n+                                case USER:\n+                                    uSuccDelete.add(syncResult);\n+                                    break;\n+\n+                                case ROLE:\n+                                    rSuccDelete.add(syncResult);\n+                                    break;\n+\n+                                default:\n+                            }\n+                            break;\n+\n+                        default:\n+                    }\n+                    break;\n+\n+                case FAILURE:\n+                    switch (syncResult.getOperation()) {\n+                        case CREATE:\n+                            switch (syncResult.getSubjectType()) {\n+                                case USER:\n+                                    uFailCreate.add(syncResult);\n+                                    break;\n+\n+                                case ROLE:\n+                                    rFailCreate.add(syncResult);\n+                                    break;\n+\n+                                default:\n+                            }\n+                            break;\n+\n+                        case UPDATE:\n+                            switch (syncResult.getSubjectType()) {\n+                                case USER:\n+                                    uFailUpdate.add(syncResult);\n+                                    break;\n+\n+                                case ROLE:\n+                                    rFailUpdate.add(syncResult);\n+                                    break;\n+\n+                                default:\n+                            }\n+                            break;\n+\n+                        case DELETE:\n+                            switch (syncResult.getSubjectType()) {\n+                                case USER:\n+                                    uFailDelete.add(syncResult);\n+                                    break;\n+\n+                                case ROLE:\n+                                    rFailDelete.add(syncResult);\n+                                    break;\n+\n+                                default:\n+                            }\n+                            break;\n+\n+                        default:\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        // Summary, also to be included for FAILURE and ALL, so create it anyway.\n+        report.append(\"Users \").\n+                append(\"[created/failures]: \").append(uSuccCreate.size()).append('/').append(uFailCreate.size()).\n+                append(' ').\n+                append(\"[updated/failures]: \").append(uSuccUpdate.size()).append('/').append(uFailUpdate.size()).\n+                append(' ').\n+                append(\"[deleted/failures]: \").append(uSuccDelete.size()).append('/').append(uFailDelete.size()).\n+                append('\\n');\n+        report.append(\"Roles \").\n+                append(\"[created/failures]: \").append(rSuccCreate.size()).append('/').append(rFailCreate.size()).\n+                append(' ').\n+                append(\"[updated/failures]: \").append(rSuccUpdate.size()).append('/').append(rFailUpdate.size()).\n+                append(' ').\n+                append(\"[deleted/failures]: \").append(rSuccDelete.size()).append('/').append(rFailDelete.size());\n+\n+        // Failures\n+        if (syncTraceLevel == TraceLevel.FAILURES || syncTraceLevel == TraceLevel.ALL) {\n+            if (!uFailCreate.isEmpty()) {\n+                report.append(\"\\n\\nUsers failed to create: \");\n+                report.append(SyncResult.produceReport(uFailCreate, syncTraceLevel));\n+            }\n+            if (!uFailUpdate.isEmpty()) {\n+                report.append(\"\\nUsers failed to update: \");\n+                report.append(SyncResult.produceReport(uFailUpdate, syncTraceLevel));\n+            }\n+            if (!uFailDelete.isEmpty()) {\n+                report.append(\"\\nUsers failed to delete: \");\n+                report.append(SyncResult.produceReport(uFailDelete, syncTraceLevel));\n+            }\n+\n+            if (!rFailCreate.isEmpty()) {\n+                report.append(\"\\n\\nRoles failed to create: \");\n+                report.append(SyncResult.produceReport(rFailCreate, syncTraceLevel));\n+            }\n+            if (!rFailUpdate.isEmpty()) {\n+                report.append(\"\\nRoles failed to update: \");\n+                report.append(SyncResult.produceReport(rFailUpdate, syncTraceLevel));\n+            }\n+            if (!rFailDelete.isEmpty()) {\n+                report.append(\"\\nRoles failed to delete: \");\n+                report.append(SyncResult.produceReport(rFailDelete, syncTraceLevel));\n+            }\n+        }\n+\n+        // Succeeded, only if on 'ALL' level\n+        if (syncTraceLevel == TraceLevel.ALL) {\n+            report.append(\"\\n\\nUsers created:\\n\")\n+                    .append(SyncResult.produceReport(uSuccCreate, syncTraceLevel))\n+                    .append(\"\\nUsers updated:\\n\")\n+                    .append(SyncResult.produceReport(uSuccUpdate, syncTraceLevel))\n+                    .append(\"\\nUsers deleted:\\n\")\n+                    .append(SyncResult.produceReport(uSuccDelete, syncTraceLevel));\n+            report.append(\"\\n\\nRoles created:\\n\")\n+                    .append(SyncResult.produceReport(rSuccCreate, syncTraceLevel))\n+                    .append(\"\\nRoles updated:\\n\")\n+                    .append(SyncResult.produceReport(rSuccUpdate, syncTraceLevel))\n+                    .append(\"\\nRoles deleted:\\n\")\n+                    .append(SyncResult.produceReport(rSuccDelete, syncTraceLevel));\n+        }\n+\n+        return report.toString();\n+    }\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        // PRE: grant all authorities (i.e. setup the SecurityContextHolder)\n+        final List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n+\n+        for (Entitlement entitlement : entitlementDAO.findAll()) {\n+            authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n+        }\n+\n+        final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n+\n+        SecurityContextHolder.getContext().setAuthentication(\n+                new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));\n+\n+        try {\n+            return executeWithSecurityContext(dryRun);\n+        } finally {\n+            // POST: clean up the SecurityContextHolder\n+            SecurityContextHolder.clearContext();\n+        }\n+    }\n+\n+    protected abstract String executeWithSecurityContext(final boolean dryRun) throws JobExecutionException;\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        final AbstractSyncTask syncTask = (AbstractSyncTask) task;\n+\n+        // True if either failed and failures have to be registered, or if ALL has to be registered.\n+        return (Status.valueOf(execution.getStatus()) == Status.FAILURE\n+                && syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n+                || syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.SUMMARY.ordinal();\n+    }\n+}"},{"sha":"fdd8644f442b5394c3b0dee750bff5cc74dbc4b3","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeResultHandler.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync.impl;\n+\n+import java.util.Collection;\n+import org.apache.syncope.common.types.ConflictResolutionAction;\n+import org.apache.syncope.core.propagation.Connector;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSyncopeResultHandler {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSyncopeResultHandler.class);\n+\n+    /**\n+     * Syncing connector.\n+     */\n+    protected Connector connector;\n+\n+    protected Collection<SyncResult> results;\n+\n+    protected boolean dryRun;\n+\n+    protected ConflictResolutionAction resAct;\n+\n+    public Connector getConnector() {\n+        return connector;\n+    }\n+\n+    public void setConnector(final Connector connector) {\n+        this.connector = connector;\n+    }\n+\n+    public Collection<SyncResult> getResults() {\n+        return results;\n+    }\n+\n+    public void setResults(final Collection<SyncResult> results) {\n+        this.results = results;\n+    }\n+\n+    public boolean isDryRun() {\n+        return dryRun;\n+    }\n+\n+    public void setDryRun(final boolean dryRun) {\n+        this.dryRun = dryRun;\n+    }\n+\n+    public ConflictResolutionAction getResAct() {\n+        return resAct;\n+    }\n+\n+    public void setResAct(final ConflictResolutionAction resAct) {\n+        this.resAct = resAct;\n+    }\n+}"},{"sha":"f71e8d984a534c6a87e58dca63d3016244a480f4","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeSyncResultHandler.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeSyncResultHandler.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync.impl;\n+\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.sync.SyncActions;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n+\n+/**\n+ * Abstract class introduced to facilitate sync handler extension/override.\n+ */\n+public abstract class AbstractSyncopeSyncResultHandler extends AbstractSyncopeResultHandler\n+        implements SyncResultsHandler {\n+\n+    /**\n+     * SyncJob actions.\n+     */\n+    protected SyncActions actions;\n+\n+    protected SyncTask syncTask;\n+\n+    public SyncActions getActions() {\n+        return actions;\n+    }\n+\n+    public void setActions(final SyncActions actions) {\n+        this.actions = actions;\n+    }\n+\n+    public SyncTask getSyncTask() {\n+        return syncTask;\n+    }\n+\n+    public void setSyncTask(final SyncTask syncTask) {\n+        this.syncTask = syncTask;\n+    }\n+}"},{"sha":"b5f2188cd7db6815e7edc6b4700367d9f6ab90aa","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPMembershipSyncActions.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -53,7 +53,6 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -122,7 +121,7 @@ protected String getGroupMembershipAttrName(final Connector connector) {\n     @Transactional(readOnly = true)\n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final AbstractSyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n             throws JobExecutionException {\n \n         if (subject instanceof RoleTO) {\n@@ -283,8 +282,11 @@ protected void synchronizeMemberships(final SyncopeSyncResultHandler handler, fi\n      * {@inheritDoc}\n      */\n     @Override\n-    public <T extends AbstractAttributableTO> void after(final SyncResultsHandler handler, final SyncDelta delta,\n-            final T subject, final SyncResult result) throws JobExecutionException {\n+    public <T extends AbstractAttributableTO> void after(\n+            final AbstractSyncopeSyncResultHandler handler,\n+            final SyncDelta delta,\n+            final T subject,\n+            final SyncResult result) throws JobExecutionException {\n \n         if (!(handler instanceof SyncopeSyncResultHandler)) {\n             return;"},{"sha":"d8d5dca05a70ffc0ac10fc40e3b6b5d9e0304036","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/PushJob.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FPushJob.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n+import org.apache.syncope.core.persistence.beans.role.RMapping;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.beans.user.UMapping;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.propagation.Connector;\n+import org.apache.syncope.core.sync.PushActions;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.EntitlementUtil;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+\n+/**\n+ * Job for executing synchronization (towards external resource) tasks.\n+ *\n+ * @see AbstractSyncJob\n+ * @see PushTask\n+ */\n+public class PushJob extends AbstractSyncJob<AbstractSyncopeResultHandler, PushActions> {\n+\n+    /**\n+     * User DAO.\n+     */\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    /**\n+     * Role DAO.\n+     */\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    private final int PAGE_SIZE = 1000;\n+\n+    @Override\n+    protected String executeWithSecurityContext(final boolean dryRun) throws JobExecutionException {\n+        if (!(task instanceof PushTask)) {\n+            throw new JobExecutionException(\"Task \" + taskId + \" isn't a PushTask\");\n+        }\n+\n+        final PushTask pushTask = (PushTask) this.task;\n+\n+        Connector connector;\n+        try {\n+            connector = connFactory.getConnector(pushTask.getResource());\n+        } catch (Exception e) {\n+            final String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n+                    pushTask.getResource(), pushTask.getResource().getConnector());\n+\n+            throw new JobExecutionException(msg, e);\n+        }\n+\n+        UMapping uMapping = pushTask.getResource().getUmapping();\n+        if (uMapping != null && uMapping.getAccountIdItem() == null) {\n+            throw new JobExecutionException(\"Invalid user account id mapping for resource \" + pushTask.getResource());\n+        }\n+        RMapping rMapping = pushTask.getResource().getRmapping();\n+        if (rMapping != null && rMapping.getAccountIdItem() == null) {\n+            throw new JobExecutionException(\"Invalid role account id mapping for resource \" + pushTask.getResource());\n+        }\n+        if (uMapping == null && rMapping == null) {\n+            return \"No mapping configured for both users and roles: aborting...\";\n+        }\n+\n+        LOG.debug(\"Execute synchronization (push) with resource {}\", pushTask.getResource());\n+\n+        final List<SyncResult> results = new ArrayList<SyncResult>();\n+\n+        final Set<Long> authorizations = EntitlementUtil.getRoleIds(entitlementDAO.findAll());\n+\n+        // Prepare handler for SyncDelta objects\n+        final SyncopePushResultHandler handler =\n+                (SyncopePushResultHandler) ((DefaultListableBeanFactory) ApplicationContextProvider.\n+                getApplicationContext().getBeanFactory()).createBean(\n+                SyncopePushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+        handler.setConnector(connector);\n+        handler.setDryRun(dryRun);\n+        handler.setResults(results);\n+        handler.setSyncTask(pushTask);\n+        handler.setActions(actions);\n+\n+        actions.beforeAll(handler);\n+\n+        if (uMapping != null) {\n+            final int count = userDAO.count(authorizations);\n+            for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n+                final List<SyncopeUser> localUsers = userDAO.findAll(authorizations, page, PAGE_SIZE);\n+\n+                for (SyncopeUser localUser : localUsers) {\n+                    try {\n+                        // user propagation\n+                        handler.handle(localUser);\n+                    } catch (Exception e) {\n+                        LOG.warn(\"Failure pushing user '{}' on '{}'\", localUser, pushTask.getResource());\n+                        if (!continueOnError()) {\n+                            throw new JobExecutionException(\"While pushing users on connector\", e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (rMapping != null) {\n+            final List<SyncopeRole> localRoles = roleDAO.findAll();\n+\n+            for (SyncopeRole localRole : localRoles) {\n+                try {\n+                    // role propagation\n+                    handler.handle(localRole);\n+                } catch (Exception e) {\n+                    LOG.warn(\"Failure pushing role '{}' on '{}'\", localRole, pushTask.getResource());\n+                    if (!continueOnError()) {\n+                        throw new JobExecutionException(\"While pushing roles on connector\", e);\n+                    }\n+                }\n+            }\n+        }\n+\n+        actions.afterAll(handler, results);\n+\n+        final String result = createReport(results, pushTask.getResource().getSyncTraceLevel(), dryRun);\n+\n+        LOG.debug(\"Sync result: {}\", result);\n+\n+        return result;\n+    }\n+\n+    protected boolean continueOnError() {\n+        return true;\n+    }\n+}"},{"sha":"bdedc6fff19450d9e7665249df6eed95120022a2","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncJob.java","status":"modified","additions":4,"deletions":274,"changes":278,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -26,20 +26,13 @@\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.common.types.SyncPolicySpec;\n-import org.apache.syncope.common.types.TraceLevel;\n-import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n-import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.beans.role.RMapping;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n-import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.apache.syncope.core.propagation.Connector;\n-import org.apache.syncope.core.quartz.AbstractTaskJob;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n@@ -51,253 +44,21 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.User;\n-import org.springframework.security.core.userdetails.UserDetails;\n \n /**\n- * Job for executing synchronization tasks.\n+ * Job for executing synchronization (from external resource) tasks.\n  *\n- * @see AbstractTaskJob\n+ * @see AbstractSyncJob\n  * @see SyncTask\n  */\n-public class SyncJob extends AbstractTaskJob {\n-\n-    /**\n-     * ConnInstance loader.\n-     */\n-    @Autowired\n-    private ConnectorFactory connFactory;\n-\n-    /**\n-     * Resource DAO.\n-     */\n-    @Autowired\n-    private ResourceDAO resourceDAO;\n-\n-    /**\n-     * Entitlement DAO.\n-     */\n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n+public class SyncJob extends AbstractSyncJob<AbstractSyncopeSyncResultHandler, SyncActions> {\n \n     /**\n      * Role workflow adapter.\n      */\n     @Autowired\n     private RoleWorkflowAdapter rwfAdapter;\n \n-    /**\n-     * SyncJob actions.\n-     */\n-    private SyncActions actions;\n-\n-    public void setActions(final SyncActions actions) {\n-        this.actions = actions;\n-    }\n-\n-    /**\n-     * Create a textual report of the synchronization, based on the trace level.\n-     *\n-     * @param syncResults Sync results\n-     * @param syncTraceLevel Sync trace level\n-     * @param dryRun dry run?\n-     * @return report as string\n-     */\n-    protected String createReport(final List<SyncResult> syncResults, final TraceLevel syncTraceLevel,\n-            final boolean dryRun) {\n-\n-        if (syncTraceLevel == TraceLevel.NONE) {\n-            return null;\n-        }\n-\n-        StringBuilder report = new StringBuilder();\n-\n-        if (dryRun) {\n-            report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n-        }\n-\n-        List<SyncResult> uSuccCreate = new ArrayList<SyncResult>();\n-        List<SyncResult> uFailCreate = new ArrayList<SyncResult>();\n-        List<SyncResult> uSuccUpdate = new ArrayList<SyncResult>();\n-        List<SyncResult> uFailUpdate = new ArrayList<SyncResult>();\n-        List<SyncResult> uSuccDelete = new ArrayList<SyncResult>();\n-        List<SyncResult> uFailDelete = new ArrayList<SyncResult>();\n-        List<SyncResult> rSuccCreate = new ArrayList<SyncResult>();\n-        List<SyncResult> rFailCreate = new ArrayList<SyncResult>();\n-        List<SyncResult> rSuccUpdate = new ArrayList<SyncResult>();\n-        List<SyncResult> rFailUpdate = new ArrayList<SyncResult>();\n-        List<SyncResult> rSuccDelete = new ArrayList<SyncResult>();\n-        List<SyncResult> rFailDelete = new ArrayList<SyncResult>();\n-\n-        for (SyncResult syncResult : syncResults) {\n-            switch (syncResult.getStatus()) {\n-                case SUCCESS:\n-                    switch (syncResult.getOperation()) {\n-                        case CREATE:\n-                            switch (syncResult.getSubjectType()) {\n-                                case USER:\n-                                    uSuccCreate.add(syncResult);\n-                                    break;\n-\n-                                case ROLE:\n-                                    rSuccCreate.add(syncResult);\n-                                    break;\n-\n-                                default:\n-                            }\n-                            break;\n-\n-                        case UPDATE:\n-                            switch (syncResult.getSubjectType()) {\n-                                case USER:\n-                                    uSuccUpdate.add(syncResult);\n-                                    break;\n-\n-                                case ROLE:\n-                                    rSuccUpdate.add(syncResult);\n-                                    break;\n-\n-                                default:\n-                            }\n-                            break;\n-\n-                        case DELETE:\n-                            switch (syncResult.getSubjectType()) {\n-                                case USER:\n-                                    uSuccDelete.add(syncResult);\n-                                    break;\n-\n-                                case ROLE:\n-                                    rSuccDelete.add(syncResult);\n-                                    break;\n-\n-                                default:\n-                            }\n-                            break;\n-\n-                        default:\n-                    }\n-                    break;\n-\n-                case FAILURE:\n-                    switch (syncResult.getOperation()) {\n-                        case CREATE:\n-                            switch (syncResult.getSubjectType()) {\n-                                case USER:\n-                                    uFailCreate.add(syncResult);\n-                                    break;\n-\n-                                case ROLE:\n-                                    rFailCreate.add(syncResult);\n-                                    break;\n-\n-                                default:\n-                            }\n-                            break;\n-\n-                        case UPDATE:\n-                            switch (syncResult.getSubjectType()) {\n-                                case USER:\n-                                    uFailUpdate.add(syncResult);\n-                                    break;\n-\n-                                case ROLE:\n-                                    rFailUpdate.add(syncResult);\n-                                    break;\n-\n-                                default:\n-                            }\n-                            break;\n-\n-                        case DELETE:\n-                            switch (syncResult.getSubjectType()) {\n-                                case USER:\n-                                    uFailDelete.add(syncResult);\n-                                    break;\n-\n-                                case ROLE:\n-                                    rFailDelete.add(syncResult);\n-                                    break;\n-\n-                                default:\n-                            }\n-                            break;\n-\n-                        default:\n-                    }\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        // Summary, also to be included for FAILURE and ALL, so create it anyway.\n-        report.append(\"Users \").\n-                append(\"[created/failures]: \").append(uSuccCreate.size()).append('/').append(uFailCreate.size()).\n-                append(' ').\n-                append(\"[updated/failures]: \").append(uSuccUpdate.size()).append('/').append(uFailUpdate.size()).\n-                append(' ').\n-                append(\"[deleted/failures]: \").append(uSuccDelete.size()).append('/').append(uFailDelete.size()).\n-                append('\\n');\n-        report.append(\"Roles \").\n-                append(\"[created/failures]: \").append(rSuccCreate.size()).append('/').append(rFailCreate.size()).\n-                append(' ').\n-                append(\"[updated/failures]: \").append(rSuccUpdate.size()).append('/').append(rFailUpdate.size()).\n-                append(' ').\n-                append(\"[deleted/failures]: \").append(rSuccDelete.size()).append('/').append(rFailDelete.size());\n-\n-        // Failures\n-        if (syncTraceLevel == TraceLevel.FAILURES || syncTraceLevel == TraceLevel.ALL) {\n-            if (!uFailCreate.isEmpty()) {\n-                report.append(\"\\n\\nUsers failed to create: \");\n-                report.append(SyncResult.produceReport(uFailCreate, syncTraceLevel));\n-            }\n-            if (!uFailUpdate.isEmpty()) {\n-                report.append(\"\\nUsers failed to update: \");\n-                report.append(SyncResult.produceReport(uFailUpdate, syncTraceLevel));\n-            }\n-            if (!uFailDelete.isEmpty()) {\n-                report.append(\"\\nUsers failed to delete: \");\n-                report.append(SyncResult.produceReport(uFailDelete, syncTraceLevel));\n-            }\n-\n-            if (!rFailCreate.isEmpty()) {\n-                report.append(\"\\n\\nRoles failed to create: \");\n-                report.append(SyncResult.produceReport(rFailCreate, syncTraceLevel));\n-            }\n-            if (!rFailUpdate.isEmpty()) {\n-                report.append(\"\\nRoles failed to update: \");\n-                report.append(SyncResult.produceReport(rFailUpdate, syncTraceLevel));\n-            }\n-            if (!rFailDelete.isEmpty()) {\n-                report.append(\"\\nRoles failed to delete: \");\n-                report.append(SyncResult.produceReport(rFailDelete, syncTraceLevel));\n-            }\n-        }\n-\n-        // Succeeded, only if on 'ALL' level\n-        if (syncTraceLevel == TraceLevel.ALL) {\n-            report.append(\"\\n\\nUsers created:\\n\")\n-                    .append(SyncResult.produceReport(uSuccCreate, syncTraceLevel))\n-                    .append(\"\\nUsers updated:\\n\")\n-                    .append(SyncResult.produceReport(uSuccUpdate, syncTraceLevel))\n-                    .append(\"\\nUsers deleted:\\n\")\n-                    .append(SyncResult.produceReport(uSuccDelete, syncTraceLevel));\n-            report.append(\"\\n\\nRoles created:\\n\")\n-                    .append(SyncResult.produceReport(rSuccCreate, syncTraceLevel))\n-                    .append(\"\\nRoles updated:\\n\")\n-                    .append(SyncResult.produceReport(rSuccUpdate, syncTraceLevel))\n-                    .append(\"\\nRoles deleted:\\n\")\n-                    .append(SyncResult.produceReport(rSuccDelete, syncTraceLevel));\n-        }\n-\n-        return report.toString();\n-    }\n-\n     protected void setRoleOwners(final SyncopeSyncResultHandler handler)\n             throws UnauthorizedRoleException, NotFoundException {\n \n@@ -325,27 +86,6 @@ protected void setRoleOwners(final SyncopeSyncResultHandler handler)\n     }\n \n     @Override\n-    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n-        // PRE: grant all authorities (i.e. setup the SecurityContextHolder)\n-        final List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n-\n-        for (Entitlement entitlement : entitlementDAO.findAll()) {\n-            authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n-        }\n-\n-        final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n-\n-        SecurityContextHolder.getContext().setAuthentication(\n-                new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));\n-\n-        try {\n-            return executeWithSecurityContext(dryRun);\n-        } finally {\n-            // POST: clean up the SecurityContextHolder\n-            SecurityContextHolder.clearContext();\n-        }\n-    }\n-\n     protected String executeWithSecurityContext(final boolean dryRun) throws JobExecutionException {\n         if (!(task instanceof SyncTask)) {\n             throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n@@ -387,7 +127,7 @@ protected String executeWithSecurityContext(final boolean dryRun) throws JobExec\n         final SyncopeSyncResultHandler handler =\n                 (SyncopeSyncResultHandler) ((DefaultListableBeanFactory) ApplicationContextProvider.\n                 getApplicationContext().getBeanFactory()).createBean(\n-                        SyncopeSyncResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                SyncopeSyncResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n         handler.setConnector(connector);\n         handler.setActions(actions);\n         handler.setDryRun(dryRun);\n@@ -458,14 +198,4 @@ protected String executeWithSecurityContext(final boolean dryRun) throws JobExec\n \n         return result;\n     }\n-\n-    @Override\n-    protected boolean hasToBeRegistered(final TaskExec execution) {\n-        SyncTask syncTask = (SyncTask) task;\n-\n-        // True if either failed and failures have to be registered, or if ALL has to be registered.\n-        return (Status.valueOf(execution.getStatus()) == Status.FAILURE\n-                && syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n-                || syncTask.getResource().getSyncTraceLevel().ordinal() >= TraceLevel.SUMMARY.ordinal();\n-    }\n }"},{"sha":"d0f947f0abb6def7469392cd57c57a5f9856928e","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopePushResultHandler.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync.impl;\n+\n+import static org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler.LOG;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.types.ResourceOperation;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.connid.ConnObjectUtil;\n+import org.apache.syncope.core.notification.NotificationManager;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n+import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.propagation.TimeoutException;\n+import org.apache.syncope.core.propagation.impl.AbstractPropagationTaskExecutor;\n+import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.sync.PushActions;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.MappingUtil;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class SyncopePushResultHandler extends AbstractSyncopeResultHandler {\n+\n+    /**\n+     * User data binder.\n+     */\n+    @Autowired\n+    protected UserDataBinder userDataBinder;\n+\n+    /**\n+     * Role data binder.\n+     */\n+    @Autowired\n+    protected RoleDataBinder roleDataBinder;\n+\n+    /**\n+     * ConnectorObject util.\n+     */\n+    @Autowired\n+    protected ConnObjectUtil connObjectUtil;\n+\n+    /**\n+     * Notification Manager.\n+     */\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n+    protected Map<Long, String> roleOwnerMap = new HashMap<Long, String>();\n+\n+    /**\n+     * SyncJob actions.\n+     */\n+    protected PushActions actions;\n+\n+    protected PushTask syncTask;\n+\n+    public PushActions getActions() {\n+        return actions;\n+    }\n+\n+    public void setActions(final PushActions actions) {\n+        this.actions = actions;\n+    }\n+\n+    public PushTask getSyncTask() {\n+        return syncTask;\n+    }\n+\n+    public void setSyncTask(final PushTask syncTask) {\n+        this.syncTask = syncTask;\n+    }\n+\n+    public Map<Long, String> getRoleOwnerMap() {\n+        return roleOwnerMap;\n+    }\n+\n+    @Transactional\n+    public boolean handle(final AbstractAttributable attributable) {\n+        try {\n+            doHandle(attributable);\n+            return true;\n+        } catch (JobExecutionException e) {\n+            LOG.error(\"Synchronization failed\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Look into SyncDelta and take necessary actions (create / update / delete) on user(s).\n+     *\n+     * @param delta returned by the underlying connector\n+     * @throws JobExecutionException in case of synchronization failure.\n+     */\n+    protected final void doHandle(final AbstractAttributable attributable)\n+            throws JobExecutionException {\n+\n+        if (results == null) {\n+            results = new ArrayList<SyncResult>();\n+        }\n+\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(attributable);\n+\n+        final SyncResult result = new SyncResult();\n+        results.add(result);\n+\n+        result.setId(attributable.getId());\n+        result.setSubjectType(attrUtil.getType());\n+\n+        final AbstractAttributable toBeHandled;\n+        final Boolean enabled;\n+\n+        if (attrUtil.getType() == AttributableType.USER) {\n+            toBeHandled = userDataBinder.getUserFromId(attributable.getId());\n+            result.setName(((SyncopeUser) toBeHandled).getUsername());\n+            enabled = getSyncTask().isSyncStatus()\n+                    ? ((SyncopeUser) toBeHandled).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n+                    : null;\n+        } else {\n+            toBeHandled = roleDataBinder.getRoleFromId(attributable.getId());\n+            result.setName(((SyncopeRole) toBeHandled).getName());\n+            enabled = null;\n+        }\n+\n+        LOG.debug(\"Propagating {} with ID {} towards {}\",\n+                attrUtil.getType(), toBeHandled.getId(), getSyncTask().getResource());\n+\n+        Object output = null;\n+        Result resultStatus = null;\n+        ConnectorObject beforeObj = null;\n+        Map.Entry<String, Set<Attribute>> values = null;\n+\n+        try {\n+            values = MappingUtil.prepareAttributes(\n+                    attrUtil, // attributable util\n+                    toBeHandled, // attributable (user or role)\n+                    null, // current password if decode is possible; generate otherwise\n+                    true, // propagate password (if required)\n+                    null, // no vir attrs to be removed\n+                    null, // propagate current vir attr values\n+                    enabled, // propagate status (suspended or not) if required\n+                    getSyncTask().getResource()); // target external resource\n+\n+            final ObjectClass oclass =\n+                    attrUtil.getType() == AttributableType.USER ? ObjectClass.ACCOUNT : ObjectClass.GROUP;\n+\n+            // Try to read remote object (user / group) BEFORE any actual operation\n+            beforeObj = getRemoteObject(oclass, values.getKey(), getSyncTask().getResource().getName());\n+\n+            if (beforeObj == null) {\n+                result.setOperation(ResourceOperation.CREATE);\n+                actions.beforeCreate(this, toBeHandled, values);\n+            } else {\n+                result.setOperation(ResourceOperation.UPDATE);\n+                actions.beforeUpdate(this, toBeHandled, values);\n+            }\n+\n+            AbstractPropagationTaskExecutor.createOrUpdate(\n+                    oclass,\n+                    values.getKey(),\n+                    values.getValue(),\n+                    getSyncTask().getResource().getName(),\n+                    getSyncTask().getResource().getPropagationMode(),\n+                    beforeObj,\n+                    connector,\n+                    new HashSet<String>(),\n+                    connObjectUtil);\n+\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+            resultStatus = AuditElements.Result.SUCCESS;\n+        } catch (Exception e) {\n+            result.setStatus(SyncResult.Status.FAILURE);\n+            result.setMessage(e.getMessage());\n+            resultStatus = AuditElements.Result.FAILURE;\n+            output = e;\n+\n+            LOG.warn(\"Error pushing {} towards {}\", toBeHandled, getSyncTask().getResource(), e);\n+            throw new JobExecutionException(e);\n+        } finally {\n+\n+            actions.after(this, toBeHandled, values, result);\n+\n+            notificationManager.createTasks(\n+                    AuditElements.EventCategoryType.PUSH,\n+                    AttributableType.USER.name().toLowerCase(),\n+                    syncTask.getResource().getName(),\n+                    result.getOperation() == null ? null : result.getOperation().name().toLowerCase(),\n+                    resultStatus,\n+                    beforeObj,\n+                    output,\n+                    toBeHandled);\n+\n+            auditManager.audit(\n+                    AuditElements.EventCategoryType.PUSH,\n+                    AttributableType.USER.name().toLowerCase(),\n+                    syncTask.getResource().getName(),\n+                    result.getOperation() == null ? null : result.getOperation().name().toLowerCase(),\n+                    resultStatus,\n+                    beforeObj,\n+                    output,\n+                    toBeHandled);\n+        }\n+    }\n+\n+    private ConnectorObject getRemoteObject(\n+            final ObjectClass oclass, final String accountId, final String resource) {\n+        ConnectorObject obj = null;\n+\n+        try {\n+\n+            final Uid uid = new Uid(accountId);\n+\n+            connector.getObject(\n+                    oclass, uid, connector.getOperationOptions(Collections.<AbstractMappingItem>emptySet()));\n+\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", accountId, ignore);\n+        }\n+        return obj;\n+    }\n+}"},{"sha":"c9a11c2bb1fabbd26275758b4a6439d55d08657c","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":2,"deletions":81,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -20,7 +20,6 @@\n \n import java.util.AbstractMap;\n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -40,7 +39,6 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncPolicySpec;\n@@ -53,7 +51,6 @@\n import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n-import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n@@ -68,13 +65,11 @@\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n-import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -90,19 +85,11 @@\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n-import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.quartz.JobExecutionException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class SyncopeSyncResultHandler implements SyncResultsHandler {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeSyncResultHandler.class);\n+public class SyncopeSyncResultHandler extends AbstractSyncopeSyncResultHandler {\n \n     /**\n      * Policy DAO.\n@@ -197,74 +184,8 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n     @Autowired\n     protected AttributableTransformer attrTransformer;\n \n-    /**\n-     * Syncing connector.\n-     */\n-    protected Connector connector;\n-\n-    /**\n-     * SyncJob actions.\n-     */\n-    protected SyncActions actions;\n-\n-    protected Collection<SyncResult> results;\n-\n-    protected SyncTask syncTask;\n-\n-    protected ConflictResolutionAction resAct;\n-\n-    protected boolean dryRun;\n-\n     protected Map<Long, String> roleOwnerMap = new HashMap<Long, String>();\n \n-    public Connector getConnector() {\n-        return connector;\n-    }\n-\n-    public void setConnector(final Connector connector) {\n-        this.connector = connector;\n-    }\n-\n-    public SyncActions getActions() {\n-        return actions;\n-    }\n-\n-    public void setActions(final SyncActions actions) {\n-        this.actions = actions;\n-    }\n-\n-    public Collection<SyncResult> getResults() {\n-        return results;\n-    }\n-\n-    public void setResults(final Collection<SyncResult> results) {\n-        this.results = results;\n-    }\n-\n-    public SyncTask getSyncTask() {\n-        return syncTask;\n-    }\n-\n-    public void setSyncTask(final SyncTask syncTask) {\n-        this.syncTask = syncTask;\n-    }\n-\n-    public ConflictResolutionAction getResAct() {\n-        return resAct;\n-    }\n-\n-    public void setResAct(final ConflictResolutionAction resAct) {\n-        this.resAct = resAct;\n-    }\n-\n-    public boolean isDryRun() {\n-        return dryRun;\n-    }\n-\n-    public void setDryRun(final boolean dryRun) {\n-        this.dryRun = dryRun;\n-    }\n-\n     public Map<Long, String> getRoleOwnerMap() {\n         return roleOwnerMap;\n     }\n@@ -472,7 +393,7 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n \n         final List<ConnectorObject> found = connector.search(objectClass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                        attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n+                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", objectClass, syncTask.getResource(), name);"},{"sha":"ce8edaead56bdf68ebc7d5476acaa4ce957e7cab","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":102,"deletions":12,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -30,8 +30,10 @@\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.connid.PasswordGenerator;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n@@ -61,7 +63,9 @@\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -115,6 +119,89 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n         return result;\n     }\n \n+    /**\n+     * Prepare attributes for sending to a connector instance.\n+     *\n+     * @param <T> user / role\n+     * @param attrUtil user / role\n+     * @param subject given user / role\n+     * @param password clear-text password\n+     * @param changePwd whether password should be included for propagation attributes or not\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param enable whether user must be enabled or not\n+     * @param resource target resource\n+     * @return account link + prepared attributes\n+     */\n+    public static <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(\n+            final AttributableUtil attrUtil, final T subject, final String password, final boolean changePwd,\n+            final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated,\n+            final Boolean enable, final ExternalResource resource) {\n+\n+        LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n+                subject, resource, subject.getAttrs());\n+\n+        final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        final VirAttrCache virAttrCache = context.getBean(VirAttrCache.class);\n+        final PasswordGenerator passwordGenerator = context.getBean(PasswordGenerator.class);\n+\n+        Set<Attribute> attributes = new HashSet<Attribute>();\n+        String accountId = null;\n+\n+        for (AbstractMappingItem mapping : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+            LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n+\n+            try {\n+                if ((attrUtil.getType() == AttributableType.USER\n+                        && mapping.getIntMappingType() == IntMappingType.UserVirtualSchema)\n+                        || (attrUtil.getType() == AttributableType.ROLE\n+                        && mapping.getIntMappingType() == IntMappingType.RoleVirtualSchema)) {\n+\n+                    LOG.debug(\"Expire entry cache {}-{}\", subject.getId(), mapping.getIntAttrName());\n+                    virAttrCache.expire(attrUtil.getType(), subject.getId(), mapping.getIntAttrName());\n+                }\n+\n+                Map.Entry<String, Attribute> preparedAttribute = prepareAttribute(\n+                        resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated);\n+\n+                if (preparedAttribute != null && preparedAttribute.getKey() != null) {\n+                    accountId = preparedAttribute.getKey();\n+                }\n+\n+                if (preparedAttribute != null && preparedAttribute.getValue() != null) {\n+                    Attribute alreadyAdded = AttributeUtil.find(preparedAttribute.getValue().getName(), attributes);\n+\n+                    if (alreadyAdded == null) {\n+                        attributes.add(preparedAttribute.getValue());\n+                    } else {\n+                        attributes.remove(alreadyAdded);\n+\n+                        Set<Object> values = new HashSet<Object>(alreadyAdded.getValue());\n+                        values.addAll(preparedAttribute.getValue().getValue());\n+\n+                        attributes.add(AttributeBuilder.build(preparedAttribute.getValue().getName(), values));\n+                    }\n+                }\n+            } catch (Exception e) {\n+                LOG.debug(\"Attribute '{}' processing failed\", mapping.getIntAttrName(), e);\n+            }\n+        }\n+\n+        attributes.add(MappingUtil.evaluateNAME(subject, resource, accountId));\n+\n+        if (enable != null) {\n+            attributes.add(AttributeBuilder.buildEnabled(enable));\n+        }\n+        if (!changePwd) {\n+            Attribute pwdAttr = AttributeUtil.find(OperationalAttributes.PASSWORD_NAME, attributes);\n+            if (pwdAttr != null) {\n+                attributes.remove(pwdAttr);\n+            }\n+        }\n+\n+        return new AbstractMap.SimpleEntry<String, Set<Attribute>>(accountId, attributes);\n+    }\n+\n     /**\n      * Prepare an attribute to be sent to a connector instance.\n      *\n@@ -129,7 +216,7 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n      * @return account link + prepared attribute\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n+    private static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n             final ExternalResource resource, final AbstractMappingItem mapItem,\n             final T subject, final String password, final PasswordGenerator passwordGenerator,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated) {\n@@ -250,16 +337,19 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                 if (passwordAttrValue == null) {\n                     result = null;\n                 } else {\n-                    result = new AbstractMap.SimpleEntry<String, Attribute>(null,\n+                    result = new AbstractMap.SimpleEntry<String, Attribute>(\n+                            null,\n                             AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n             } else {\n                 if ((schema != null && schema.isMultivalue()) || AttributableUtil.getInstance(subject).getType()\n                         != mapItem.getIntMappingType().getAttributableType()) {\n-                    result = new AbstractMap.SimpleEntry<String, Attribute>(null, AttributeBuilder.build(extAttrName,\n-                            objValues));\n+                    result = new AbstractMap.SimpleEntry<String, Attribute>(\n+                            null,\n+                            AttributeBuilder.build(extAttrName, objValues));\n                 } else {\n-                    result = new AbstractMap.SimpleEntry<String, Attribute>(null, objValues.isEmpty()\n+                    result = new AbstractMap.SimpleEntry<String, Attribute>(\n+                            null, objValues.isEmpty()\n                             ? AttributeBuilder.build(extAttrName)\n                             : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n                 }\n@@ -378,13 +468,6 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n                 for (AbstractAttributable attributable : attributables) {\n                     AbstractVirAttr virAttr = attributable.getVirAttr(mappingItem.getIntAttrName());\n                     if (virAttr != null) {\n-                        if (virAttr.getValues() != null) {\n-                            for (String value : virAttr.getValues()) {\n-                                attrValue = new UAttrValue();\n-                                attrValue.setStringValue(value);\n-                                values.add(attrValue);\n-                            }\n-                        }\n                         if (vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n                             if (vAttrsToBeUpdated.containsKey(mappingItem.getIntAttrName())) {\n                                 virAttr.setValues(\n@@ -396,6 +479,13 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n                                         + mappingItem.getIntAttrName() + \"'\");\n                             }\n                         }\n+                        if (virAttr.getValues() != null) {\n+                            for (String value : virAttr.getValues()) {\n+                                attrValue = new UAttrValue();\n+                                attrValue.setStringValue(value);\n+                                values.add(attrValue);\n+                            }\n+                        }\n                     }\n \n                     LOG.debug(\"Retrieved virtual attribute {}\""},{"sha":"ce03daba817b7582c1610a7c9f2a20458280ac27","filename":"core/src/main/java/org/apache/syncope/core/util/TaskUtil.java","status":"modified","additions":25,"deletions":44,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -23,9 +23,11 @@\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n+import org.apache.syncope.common.to.PushTaskTO;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n@@ -43,6 +45,8 @@ public static TaskUtil getInstance(final Task task) {\n         TaskType type;\n         if (task instanceof SyncTask) {\n             type = TaskType.SYNCHRONIZATION;\n+        } else if (task instanceof PushTask) {\n+            type = TaskType.PUSH;\n         } else if (task instanceof SchedTask) {\n             type = TaskType.SCHEDULED;\n         } else if (task instanceof PropagationTask) {\n@@ -66,6 +70,8 @@ public static TaskUtil getInstance(Class<? extends AbstractTaskTO> taskClass) {\n             type = TaskType.SCHEDULED;\n         } else if (taskClass == SyncTaskTO.class) {\n             type = TaskType.SYNCHRONIZATION;\n+        } else if (taskClass == PushTaskTO.class) {\n+            type = TaskType.PUSH;\n         } else {\n             throw new IllegalArgumentException(\"Invalid TaskTO class: \" + taskClass.getName());\n         }\n@@ -101,6 +107,10 @@ public <T extends Task> Class<T> taskClass() {\n                 result = (Class<T>) SyncTask.class;\n                 break;\n \n+            case PUSH:\n+                result = (Class<T>) PushTask.class;\n+                break;\n+\n             case NOTIFICATION:\n                 result = (Class<T>) NotificationTask.class;\n                 break;\n@@ -112,29 +122,12 @@ public <T extends Task> Class<T> taskClass() {\n     }\n \n     public <T extends Task> T newTask() {\n-        T result = null;\n-\n-        switch (type) {\n-            case PROPAGATION:\n-                result = (T) new PropagationTask();\n-                break;\n-\n-            case SCHEDULED:\n-                result = (T) new SchedTask();\n-                break;\n-\n-            case SYNCHRONIZATION:\n-                result = (T) new SyncTask();\n-                break;\n-\n-            case NOTIFICATION:\n-                result = (T) new NotificationTask();\n-                break;\n-\n-            default:\n+        final Class<T> taskClass = taskClass();\n+        try {\n+            return taskClass == null ? null : taskClass.newInstance();\n+        } catch (Exception e) {\n+            return null;\n         }\n-\n-        return result;\n     }\n \n     public <T extends AbstractTaskTO> Class<T> taskTOClass() {\n@@ -153,6 +146,10 @@ public <T extends AbstractTaskTO> Class<T> taskTOClass() {\n                 result = (Class<T>) SyncTaskTO.class;\n                 break;\n \n+            case PUSH:\n+                result = (Class<T>) PushTaskTO.class;\n+                break;\n+\n             case NOTIFICATION:\n                 result = (Class<T>) NotificationTaskTO.class;\n                 break;\n@@ -163,29 +160,13 @@ public <T extends AbstractTaskTO> Class<T> taskTOClass() {\n         return result;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractTaskTO> T newTaskTO() {\n-        T result = null;\n-\n-        switch (type) {\n-            case PROPAGATION:\n-                result = (T) new PropagationTaskTO();\n-                break;\n-\n-            case SCHEDULED:\n-                result = (T) new SchedTaskTO();\n-                break;\n-\n-            case SYNCHRONIZATION:\n-                result = (T) new SyncTaskTO();\n-                break;\n-\n-            case NOTIFICATION:\n-                result = (T) new NotificationTaskTO();\n-                break;\n-\n-            default:\n+        final Class<T> taskClass = taskTOClass();\n+        try {\n+            return taskClass == null ? null : taskClass.newInstance();\n+        } catch (Exception e) {\n+            return null;\n         }\n-\n-        return result;\n     }\n }"},{"sha":"27c3526db5415d3585320e4b89f4f722921912b2","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.apache.syncope.core.rest.AbstractTest.taskService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -54,6 +55,7 @@\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.to.PushTaskTO;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n@@ -692,8 +694,7 @@ public void issueSYNCOPE230() {\n         assertEquals(\"updatedSYNCOPE230@syncope.apache.org\", email);\n     }\n \n-    private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds,\n-            final boolean dryRun) {\n+    private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds, final boolean dryRun) {\n \n         AbstractTaskTO taskTO = taskService.read(taskId);\n         assertNotNull(taskTO);\n@@ -910,4 +911,20 @@ public void bulkAction() {\n \n         assertFalse(taskService.list(TaskType.PROPAGATION).getResult().containsAll(after));\n     }\n+\n+    @Test\n+    public void pushUsers() {\n+        // Read sync task\n+        PushTaskTO task = taskService.<PushTaskTO>read(13L);\n+        assertNotNull(task);\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        assertEquals(\"vivaldi\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"vivaldi\"));\n+        assertEquals(\"bellini\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"bellini\"));\n+        assertEquals(\"rossini\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"rossini\"));\n+        assertEquals(\"puccini\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"puccini\"));\n+    }\n }"},{"sha":"2c40bd21db437ffa4a6d60bed523c2522281062b","filename":"core/src/test/java/org/apache/syncope/core/sync/TestSyncActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FTestSyncActions.java?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -22,16 +22,16 @@\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.core.sync.impl.AbstractSyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n-import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.quartz.JobExecutionException;\n \n public class TestSyncActions extends DefaultSyncActions {\n \n     private int counter = 0;\n \n     @Override\n-    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResultsHandler handler,\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final AbstractSyncopeSyncResultHandler handler,\n             final SyncDelta delta, final T subject) throws JobExecutionException {\n \n         AttributeTO attrTO = null;\n@@ -53,7 +53,7 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(final SyncResul\n \n     @Override\n     public <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta beforeUpdate(\n-            final SyncResultsHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n+            final AbstractSyncopeSyncResultHandler handler, final SyncDelta delta, final T subject, final K subjectMod)\n             throws JobExecutionException {\n \n         subjectMod.getAttrsToRemove().add(\"fullname\");"},{"sha":"8a086e5a0f890a00aa0810ed81189a36065353f3","filename":"core/src/test/resources/content.xml","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a7bbf55751c24d11302ee5dafefe97581cef35fa/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=a7bbf55751c24d11302ee5dafefe97581cef35fa","patch":"@@ -512,7 +512,7 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-testdb2\" connector_id=\"106\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n+                    randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n@@ -839,7 +839,10 @@ under the License.\n         jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\"/>\n   <Task DTYPE=\"SyncTask\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\"/>        \n+        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\"/>\n+  <Task DTYPE=\"PushTask\" id=\"13\" name=\"Export on resource-testdb\" resource_name=\"resource-testdb2\"\n+        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n+        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\"/>\n       \n   <Notification id=\"1\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template=\"test\" selfAsRecipient=\"0\" traceLevel=\"ALL\"\n                 about=\"fullname==*o*;fullname==*i*\""}]}