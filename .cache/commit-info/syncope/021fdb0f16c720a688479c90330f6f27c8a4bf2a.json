{"sha":"021fdb0f16c720a688479c90330f6f27c8a4bf2a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAyMWZkYjBmMTZjNzIwYTY4ODQ3OWM5MDMzMGY2ZjI3YzhhNGJmMmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-11-17T15:04:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-11-17T15:13:33Z"},"message":"[SYNCOPE-1601] Looking up HistoricVariableInstances in case the process ends with form submit","tree":{"sha":"baa23668a5b0c836bd3a8d3cad4c2996d65485d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/baa23668a5b0c836bd3a8d3cad4c2996d65485d8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/021fdb0f16c720a688479c90330f6f27c8a4bf2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/021fdb0f16c720a688479c90330f6f27c8a4bf2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/021fdb0f16c720a688479c90330f6f27c8a4bf2a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/021fdb0f16c720a688479c90330f6f27c8a4bf2a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cc2d2e25d08608fef5856aaa386a5bc695c13531","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc2d2e25d08608fef5856aaa386a5bc695c13531","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cc2d2e25d08608fef5856aaa386a5bc695c13531"}],"stats":{"total":67,"additions":48,"deletions":19},"files":[{"sha":"728ea42d18384bfa3448d68e88865b4f22cea896","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":48,"deletions":19,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/021fdb0f16c720a688479c90330f6f27c8a4bf2a/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/021fdb0f16c720a688479c90330f6f27c8a4bf2a/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=021fdb0f16c720a688479c90330f6f27c8a4bf2a","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n@@ -68,6 +69,7 @@\n import org.flowable.task.api.Task;\n import org.flowable.task.api.TaskQuery;\n import org.flowable.task.api.history.HistoricTaskInstance;\n+import org.flowable.variable.api.history.HistoricVariableInstance;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -290,7 +292,7 @@ protected static UserRequestFormPropertyType fromFlowableFormType(final FormType\n                 case \"dropdown\":\n                     result = UserRequestFormPropertyType.Dropdown;\n                     break;\n-                    \n+\n                 case \"password\":\n                     result = UserRequestFormPropertyType.Password;\n                     break;\n@@ -621,14 +623,21 @@ public UserRequestForm unclaimForm(final String taskId) {\n         return FlowableUserRequestHandler.this.getForm(task, parsed.getRight());\n     }\n \n-    private static Map<String, String> getPropertiesForSubmit(final UserRequestForm form) {\n+    protected Map<String, String> getPropertiesForSubmit(final UserRequestForm form) {\n         Map<String, String> props = new HashMap<>();\n         form.getProperties().stream().\n                 filter(UserRequestFormProperty::isWritable).\n                 forEach(prop -> props.put(prop.getId(), prop.getValue()));\n         return Collections.unmodifiableMap(props);\n     }\n \n+    protected <T> T getHistoricVariable(\n+            final List<HistoricVariableInstance> historicVariables, final String name, final Class<T> valueRef) {\n+\n+        return historicVariables.stream().filter(v -> name.equals(v.getVariableName())).\n+                findFirst().map(v -> valueRef.cast(v.getValue())).orElse(null);\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public UserWorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n@@ -666,37 +675,54 @@ public UserWorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n \n         user = userDAO.save(user);\n \n-        UserUR userUR = null;\n+        PropagationByResource<String> propByRes;\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount;\n         String clearPassword = null;\n-        PropagationByResource<String> propByRes = null;\n-        PropagationByResource<Pair<String, String>> propByLinkedAccount = null;\n+        UserUR userUR;\n+        if (engine.getRuntimeService().\n+                createProcessInstanceQuery().processInstanceId(procInstID).singleResult() == null) {\n+\n+            List<HistoricVariableInstance> historicVariables = engine.getHistoryService().\n+                    createHistoricVariableInstanceQuery().processInstanceId(procInstID).list();\n+\n+            // see if there is any propagation to be done\n+            propByRes = getHistoricVariable(\n+                    historicVariables, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n+            propByLinkedAccount = getHistoricVariable(\n+                    historicVariables, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, PropagationByResource.class);\n \n-        ProcessInstance afterSubmitPI = engine.getRuntimeService().\n-                createProcessInstanceQuery().processInstanceId(procInstID).singleResult();\n-        if (afterSubmitPI != null) {\n+            // fetch - if available - the encrypted password\n+            String encryptedPwd = getHistoricVariable(\n+                    historicVariables, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n+            if (StringUtils.isNotBlank(encryptedPwd)) {\n+                clearPassword = FlowableRuntimeUtils.decrypt(encryptedPwd);\n+            }\n+\n+            userUR = getHistoricVariable(historicVariables, FlowableRuntimeUtils.USER_UR, UserUR.class);\n+        } else {\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.TASK);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.FORM_SUBMITTER);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_TO);\n \n             // see if there is any propagation to be done\n-            propByRes = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n+            propByRes = engine.getRuntimeService().getVariable(\n+                    procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n             propByLinkedAccount = engine.getRuntimeService().getVariable(\n                     procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, PropagationByResource.class);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT);\n \n             // fetch - if available - the encrypted password\n-            String encryptedPwd = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n+            String encryptedPwd = engine.getRuntimeService().getVariable(\n+                    procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD);\n             if (StringUtils.isNotBlank(encryptedPwd)) {\n                 clearPassword = FlowableRuntimeUtils.decrypt(encryptedPwd);\n             }\n \n-            Boolean enabled = engine.getRuntimeService().\n-                    getVariable(procInstID, FlowableRuntimeUtils.ENABLED, Boolean.class);\n+            Boolean enabled = engine.getRuntimeService().getVariable(\n+                    procInstID, FlowableRuntimeUtils.ENABLED, Boolean.class);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENABLED);\n \n             // supports approval chains\n@@ -709,22 +735,25 @@ public UserWorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n                     propByRes,\n                     propByLinkedAccount);\n \n-            userUR = engine.getRuntimeService().getVariable(procInstID, FlowableRuntimeUtils.USER_UR, UserUR.class);\n+            userUR = engine.getRuntimeService().getVariable(\n+                    procInstID, FlowableRuntimeUtils.USER_UR, UserUR.class);\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_UR);\n         }\n+\n         if (userUR == null) {\n             userUR = new UserUR();\n             userUR.setKey(user.getKey());\n             userUR.setPassword(new PasswordPatch.Builder().onSyncope(true).value(clearPassword).build());\n \n+            Set<String> pwdResources = new HashSet<>();\n             if (propByRes != null) {\n-                userUR.getPassword().getResources().addAll(propByRes.get(ResourceOperation.CREATE));\n+                pwdResources.addAll(propByRes.get(ResourceOperation.CREATE));\n             }\n             if (propByLinkedAccount != null) {\n-                for (Pair<String, String> account : propByLinkedAccount.get(ResourceOperation.CREATE)) {\n-                    userUR.getPassword().getResources().add(account.getLeft());\n-                }\n+                pwdResources.addAll(propByLinkedAccount.get(ResourceOperation.CREATE).stream().\n+                        map(Pair::getLeft).collect(Collectors.toList()));\n             }\n+            userUR.getPassword().getResources().addAll(pwdResources);\n         }\n \n         return new UserWorkflowResult<>(userUR, propByRes, propByLinkedAccount, postTasks);"}]}