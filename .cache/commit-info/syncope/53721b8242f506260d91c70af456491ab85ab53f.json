{"sha":"53721b8242f506260d91c70af456491ab85ab53f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUzNzIxYjgyNDJmNTA2MjYwZDkxYzcwYWY0NTY0OTFhYjg1YWI1M2Y=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-03-17T16:52:15Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-03-17T16:52:15Z"},"message":"[SYNCOPE-648]Merge from 1_2_X","tree":{"sha":"2d9e24f7ac026523cd051991489892ebbfd346d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2d9e24f7ac026523cd051991489892ebbfd346d8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/53721b8242f506260d91c70af456491ab85ab53f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/53721b8242f506260d91c70af456491ab85ab53f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/53721b8242f506260d91c70af456491ab85ab53f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/53721b8242f506260d91c70af456491ab85ab53f/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"28aef6c78c81304c5c5e64f9ca8210898ec8b653","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/28aef6c78c81304c5c5e64f9ca8210898ec8b653","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/28aef6c78c81304c5c5e64f9ca8210898ec8b653"},{"sha":"89d5ad43cf26454092dbd04446a0d9a6f5192f4a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89d5ad43cf26454092dbd04446a0d9a6f5192f4a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/89d5ad43cf26454092dbd04446a0d9a6f5192f4a"}],"stats":{"total":218,"additions":185,"deletions":33},"files":[{"sha":"4b3ad53b88f78bcd329d54f52e2b63b28c45025c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/MatchingRule.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FMatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FMatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FMatchingRule.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -49,6 +49,10 @@ public enum MatchingRule {\n     /**\n      * Just link resource without performing any (de-)provisioning operation.\n      */\n-    LINK\n+    LINK;\n \n+    public static String toEventName(final MatchingRule rule) {\n+        return new StringBuilder(MatchingRule.class.getSimpleName()).\n+                append(\"_\").append(rule.name()).toString().toLowerCase();\n+    }\n }"},{"sha":"ef3b7324414cbc3e624489f2e414b811e8d52bad","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/UnmatchingRule.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -42,6 +42,10 @@ public enum UnmatchingRule {\n      * Just unlink resource without performing any (de-)provisioning operation.\n      * In case of sync task UNLINK and IGNORE will coincide.\n      */\n-    UNLINK\n+    UNLINK;\n \n+    public static String toEventName(final UnmatchingRule rule) {\n+        return new StringBuilder(UnmatchingRule.class.getSimpleName()).\n+                append(\"_\").append(rule.name()).toString().toLowerCase();\n+    }\n }"},{"sha":"7a0f10e013a6c6f193a7bc9ab19125aba383f8ed","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -38,8 +38,10 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -274,6 +276,18 @@ public List<EventCategoryTO> listAuditEvents() {\n                         pushEventCategoryTO.getEvents().add(resourceOperation.name().toLowerCase());\n                     }\n \n+                    for (UnmatchingRule unmatching : UnmatchingRule.values()) {\n+                        String event = UnmatchingRule.toEventName(unmatching);\n+                        syncEventCategoryTO.getEvents().add(event);\n+                        pushEventCategoryTO.getEvents().add(event);\n+                    }\n+\n+                    for (MatchingRule matching : MatchingRule.values()) {\n+                        String event = MatchingRule.toEventName(matching);\n+                        syncEventCategoryTO.getEvents().add(event);\n+                        pushEventCategoryTO.getEvents().add(event);\n+                    }\n+\n                     events.add(propEventCategoryTO);\n                     events.add(syncEventCategoryTO);\n                     events.add(pushEventCategoryTO);"},{"sha":"59c665dccd514bc5f6ba834bd960f695ff360acf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":27,"deletions":4,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -117,12 +117,14 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n         List<ProvisioningResult> uFailUpdate = new ArrayList<>();\n         List<ProvisioningResult> uSuccDelete = new ArrayList<>();\n         List<ProvisioningResult> uFailDelete = new ArrayList<>();\n+        List<ProvisioningResult> uSuccNone = new ArrayList<>();\n         List<ProvisioningResult> rSuccCreate = new ArrayList<>();\n         List<ProvisioningResult> rFailCreate = new ArrayList<>();\n         List<ProvisioningResult> rSuccUpdate = new ArrayList<>();\n         List<ProvisioningResult> rFailUpdate = new ArrayList<>();\n         List<ProvisioningResult> rSuccDelete = new ArrayList<>();\n         List<ProvisioningResult> rFailDelete = new ArrayList<>();\n+        List<ProvisioningResult> rSuccNone = new ArrayList<>();\n \n         for (ProvisioningResult provResult : provResults) {\n             switch (provResult.getStatus()) {\n@@ -170,6 +172,20 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n                             }\n                             break;\n \n+                        case NONE:\n+                            switch (provResult.getSubjectType()) {\n+                                case USER:\n+                                    uSuccNone.add(provResult);\n+                                    break;\n+\n+                                case ROLE:\n+                                    rSuccNone.add(provResult);\n+                                    break;\n+\n+                                default:\n+                            }\n+                            break;\n+\n                         default:\n                     }\n                     break;\n@@ -233,13 +249,16 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n                 append(\"[updated/failures]: \").append(uSuccUpdate.size()).append('/').append(uFailUpdate.size()).\n                 append(' ').\n                 append(\"[deleted/failures]: \").append(uSuccDelete.size()).append('/').append(uFailDelete.size()).\n-                append('\\n');\n+                append(' ').\n+                append(\"[ignored]: \").append(uSuccNone.size()).append('\\n');\n         report.append(\"Roles \").\n                 append(\"[created/failures]: \").append(rSuccCreate.size()).append('/').append(rFailCreate.size()).\n                 append(' ').\n                 append(\"[updated/failures]: \").append(rSuccUpdate.size()).append('/').append(rFailUpdate.size()).\n                 append(' ').\n-                append(\"[deleted/failures]: \").append(rSuccDelete.size()).append('/').append(rFailDelete.size());\n+                append(\"[deleted/failures]: \").append(rSuccDelete.size()).append('/').append(rFailDelete.size()).\n+                append(' ').\n+                append(\"[ignored]: \").append(rSuccNone.size());\n \n         // Failures\n         if (syncTraceLevel == TraceLevel.FAILURES || syncTraceLevel == TraceLevel.ALL) {\n@@ -277,13 +296,17 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n                     .append(\"\\nUsers updated:\\n\")\n                     .append(ProvisioningResult.produceReport(uSuccUpdate, syncTraceLevel))\n                     .append(\"\\nUsers deleted:\\n\")\n-                    .append(ProvisioningResult.produceReport(uSuccDelete, syncTraceLevel));\n+                    .append(ProvisioningResult.produceReport(uSuccDelete, syncTraceLevel))\n+                    .append(\"\\nUsers ignored:\\n\")\n+                    .append(ProvisioningResult.produceReport(uSuccNone, syncTraceLevel));\n             report.append(\"\\n\\nRoles created:\\n\")\n                     .append(ProvisioningResult.produceReport(rSuccCreate, syncTraceLevel))\n                     .append(\"\\nRoles updated:\\n\")\n                     .append(ProvisioningResult.produceReport(rSuccUpdate, syncTraceLevel))\n                     .append(\"\\nRoles deleted:\\n\")\n-                    .append(ProvisioningResult.produceReport(rSuccDelete, syncTraceLevel));\n+                    .append(ProvisioningResult.produceReport(rSuccDelete, syncTraceLevel))\n+                    .append(\"\\nRoles ignored:\\n\")\n+                    .append(ProvisioningResult.produceReport(rSuccNone, syncTraceLevel));\n         }\n \n         return report.toString();"},{"sha":"42dfeddb16ac32bd228766fff952f027bbe5e70a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n-import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -53,6 +52,8 @@\n public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions>\n         implements SyncopePushResultHandler {\n \n+    protected abstract AttributableUtil getAttributableUtil();\n+\n     protected abstract String getName(final Subject<?, ?, ?> subject);\n \n     protected abstract Mapping<?> getMapping();\n@@ -129,7 +130,7 @@ protected final void doHandle(final long subjectId)\n         } else {\n             try {\n                 if (beforeObj == null) {\n-                    operation = profile.getTask().getUnmatchingRule().name().toLowerCase();\n+                    operation = UnmatchingRule.toEventName(profile.getTask().getUnmatchingRule());\n                     result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n \n                     switch (profile.getTask().getUnmatchingRule()) {\n@@ -168,13 +169,16 @@ protected final void doHandle(final long subjectId)\n                                 link(subject, true);\n                             }\n \n+                            break;\n+                        case IGNORE:\n+                            LOG.debug(\"Ignored subjectId: {}\", subjectId);\n                             break;\n                         default:\n                         // do nothing\n                     }\n \n                 } else {\n-                    operation = profile.getTask().getMatchingRule().name().toLowerCase();\n+                    operation = MatchingRule.toEventName(profile.getTask().getMatchingRule());\n                     result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n \n                     switch (profile.getTask().getMatchingRule()) {\n@@ -236,6 +240,9 @@ protected final void doHandle(final long subjectId)\n                                 link(subject, true);\n                             }\n \n+                            break;\n+                        case IGNORE:\n+                            LOG.debug(\"Ignored subjectId: {}\", subjectId);\n                             break;\n                         default:\n                         // do nothing\n@@ -260,7 +267,7 @@ protected final void doHandle(final long subjectId)\n             } finally {\n                 notificationManager.createTasks(\n                         AuditElements.EventCategoryType.PUSH,\n-                        AttributableType.USER.name().toLowerCase(),\n+                        getAttributableUtil().getType().name().toLowerCase(),\n                         profile.getTask().getResource().getKey(),\n                         operation,\n                         resultStatus,\n@@ -269,7 +276,7 @@ protected final void doHandle(final long subjectId)\n                         subject);\n                 auditManager.audit(\n                         AuditElements.EventCategoryType.PUSH,\n-                        AttributableType.USER.name().toLowerCase(),\n+                        getAttributableUtil().getType().name().toLowerCase(),\n                         profile.getTask().getResource().getKey(),\n                         operation,\n                         resultStatus,"},{"sha":"02b9a1a0b3e3717ee2825ccbb6c051d28152bc9f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":42,"deletions":7,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -26,15 +26,17 @@\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.provisioning.api.AttributableTransformer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n-import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.misc.security.UnauthorizedRoleException;\n+import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n@@ -111,7 +113,7 @@ protected List<ProvisioningResult> assign(final SyncDelta delta, final Attributa\n                 _delta = action.beforeAssign(this.getProfile(), _delta, transformed);\n             }\n \n-            create(transformed, _delta, attrUtil, \"assign\", result);\n+            create(transformed, _delta, attrUtil, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n         }\n \n         return Collections.singletonList(result);\n@@ -147,7 +149,7 @@ protected List<ProvisioningResult> create(final SyncDelta delta, final Attributa\n                 _delta = action.beforeProvision(this.getProfile(), _delta, transformed);\n             }\n \n-            create(transformed, _delta, attrUtil, \"provision\", result);\n+            create(transformed, _delta, attrUtil, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n         }\n \n         return Collections.<ProvisioningResult>singletonList(result);\n@@ -262,7 +264,7 @@ protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subj\n                         resultStatus = Result.FAILURE;\n                     }\n                 }\n-                audit(\"update\", resultStatus, before, output, delta);\n+                audit(MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, delta);\n             }\n             results.add(result);\n         }\n@@ -345,7 +347,9 @@ protected List<ProvisioningResult> deprovision(\n                         resultStatus = Result.FAILURE;\n                     }\n                 }\n-                audit(unlink ? \"unassign\" : \"deprovision\", resultStatus, before, output, delta);\n+                audit(unlink\n+                        ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n+                        : MatchingRule.toEventName(MatchingRule.DEPROVISION), resultStatus, before, output, delta);\n             }\n             updResults.add(result);\n         }\n@@ -428,7 +432,8 @@ protected List<ProvisioningResult> link(\n                         resultStatus = Result.FAILURE;\n                     }\n                 }\n-                audit(unlink ? \"unlink\" : \"link\", resultStatus, before, output, delta);\n+                audit(unlink ? MatchingRule.toEventName(MatchingRule.UNLINK)\n+                        : MatchingRule.toEventName(MatchingRule.LINK), resultStatus, before, output, delta);\n             }\n             updResults.add(result);\n         }\n@@ -485,7 +490,7 @@ protected List<ProvisioningResult> delete(\n                         action.after(this.getProfile(), delta, before, result);\n                     }\n \n-                    audit(\"delete\", resultStatus, before, output, delta);\n+                    audit(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, delta);\n                 }\n \n                 delResults.add(result);\n@@ -502,6 +507,30 @@ protected List<ProvisioningResult> delete(\n         return delResults;\n     }\n \n+    private List<ProvisioningResult> ignore(SyncDelta delta, final AttributableUtil attrUtil, final boolean matching)\n+            throws JobExecutionException {\n+\n+        LOG.debug(\"Subject to ignore {}\", delta.getObject().getUid().getUidValue());\n+\n+        final List<ProvisioningResult> ignoreResults = new ArrayList<ProvisioningResult>();\n+        final ProvisioningResult result = new ProvisioningResult();\n+\n+        result.setId(null);\n+        result.setName(delta.getObject().getUid().getUidValue());\n+        result.setOperation(ResourceOperation.NONE);\n+        result.setSubjectType(attrUtil.getType());\n+        result.setStatus(ProvisioningResult.Status.SUCCESS);\n+        ignoreResults.add(result);\n+\n+        if (!profile.isDryRun()) {\n+            audit(matching\n+                    ? MatchingRule.toEventName(MatchingRule.IGNORE)\n+                    : UnmatchingRule.toEventName(UnmatchingRule.IGNORE), Result.SUCCESS, null, null, delta);\n+        }\n+\n+        return ignoreResults;\n+    }\n+\n     /**\n      * Look into SyncDelta and take necessary profile.getActions() (create / update / delete) on user(s)/role(s).\n      *\n@@ -551,6 +580,9 @@ protected final void doHandle(final SyncDelta delta)\n                         case PROVISION:\n                             profile.getResults().addAll(create(delta, attrUtil));\n                             break;\n+                        case IGNORE:\n+                            profile.getResults().addAll(ignore(delta, attrUtil, false));\n+                            break;\n                         default:\n                         // do nothing\n                     }\n@@ -571,6 +603,9 @@ protected final void doHandle(final SyncDelta delta)\n                         case UNLINK:\n                             profile.getResults().addAll(link(delta, subjectKeys, attrUtil, true));\n                             break;\n+                        case IGNORE:\n+                            profile.getResults().addAll(ignore(delta, attrUtil, true));\n+                            break;\n                         default:\n                         // do nothing\n                     }"},{"sha":"c1605563304a8d947bed1f39a9ae91f7985159bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/RolePushResultHandlerImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FRolePushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FRolePushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FRolePushResultHandlerImpl.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -24,8 +24,10 @@\n import org.apache.syncope.common.lib.mod.RoleMod;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.core.persistence.api.entity.Mapping;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -38,6 +40,11 @@\n \n public class RolePushResultHandlerImpl extends AbstractPushResultHandler implements RolePushResultHandler {\n \n+    @Override\n+    protected AttributableUtil getAttributableUtil() {\n+        return attrUtilFactory.getInstance(AttributableType.ROLE);\n+    }\n+\n     @Override\n     protected Subject<?, ?, ?> deprovision(final Subject<?, ?, ?> sbj) {\n         final RoleTO before = roleTransfer.getRoleTO(Role.class.cast(sbj));"},{"sha":"61637a481d1e01fff7a3ee4c266b7165c0315c86","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -24,8 +24,10 @@\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.core.persistence.api.entity.Mapping;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -38,6 +40,11 @@\n \n public class UserPushResultHandlerImpl extends AbstractPushResultHandler implements UserPushResultHandler {\n \n+    @Override\n+    protected AttributableUtil getAttributableUtil() {\n+        return attrUtilFactory.getInstance(AttributableType.USER);\n+    }\n+\n     @Override\n     protected Subject<?, ?, ?> deprovision(final Subject<?, ?, ?> sbj) {\n         final UserTO before = userTransfer.getUserTO(sbj.getKey());"},{"sha":"669d08852eec98c3747dfd90827cd07cb9adc522","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import static org.apache.syncope.fit.core.reference.AbstractITCase.taskService;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n@@ -33,8 +35,11 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n \n public abstract class AbstractTaskITCase extends AbstractITCase {\n \n@@ -134,4 +139,17 @@ protected Map<Long, TaskExecTO> execSyncTasks(\n         return res;\n     }\n \n+    protected NotificationTaskTO findNotificationTaskBySender(final String sender) {\n+        PagedResult<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n+        assertNotNull(tasks);\n+        assertFalse(tasks.getResult().isEmpty());\n+        NotificationTaskTO taskTO = null;\n+        for (NotificationTaskTO task : tasks.getResult()) {\n+            if (sender.equals(task.getSender())) {\n+                taskTO = task;\n+            }\n+        }\n+        return taskTO;\n+    }\n+\n }"},{"sha":"ee75de9936a55246c7d4db30e9fa882d14aa6e77","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationTaskITCase.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -28,11 +28,9 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.junit.FixMethodOrder;\n@@ -105,19 +103,6 @@ public void issueSYNCOPE86() {\n         }\n     }\n \n-    private NotificationTaskTO findNotificationTaskBySender(final String sender) {\n-        PagedResult<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n-        assertNotNull(tasks);\n-        assertFalse(tasks.getResult().isEmpty());\n-        NotificationTaskTO taskTO = null;\n-        for (NotificationTaskTO task : tasks.getResult()) {\n-            if (sender.equals(task.getSender())) {\n-                taskTO = task;\n-            }\n-        }\n-        return taskTO;\n-    }\n-\n     private void createNotificationTask(final String sender) {\n         // 1. Create notification\n         NotificationTO notification = new NotificationTO();"},{"sha":"3427a1d82635a848e862bcb1199ff17cc6a2c7c1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53721b8242f506260d91c70af456491ab85ab53f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53721b8242f506260d91c70af456491ab85ab53f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=53721b8242f506260d91c70af456491ab85ab53f","patch":"@@ -33,6 +33,8 @@\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -48,7 +50,9 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.junit.FixMethodOrder;\n@@ -350,4 +354,48 @@ public void issueSYNCOPE598() {\n             }\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE648() {\n+        //1. Create Push Task\n+        final PushTaskTO task = new PushTaskTO();\n+        task.setName(\"Test create Push\");\n+        task.setResource(RESOURCE_NAME_LDAP);\n+        task.setUserFilter(\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"_NO_ONE_\").query());\n+        task.setRoleFilter(\n+                SyncopeClient.getRoleSearchConditionBuilder().is(\"name\").equalTo(\"citizen\").query());\n+        task.setMatchingRule(MatchingRule.IGNORE);\n+        task.setUnmatchingRule(UnmatchingRule.IGNORE);\n+\n+        final Response response = taskService.create(task);\n+        final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n+        assertNotNull(actual);\n+\n+        // 2. Create notification\n+        NotificationTO notification = new NotificationTO();\n+        notification.setTraceLevel(TraceLevel.FAILURES);\n+        notification.getEvents().add(\"[PushTask]:[role]:[resource-ldap]:[matchingrule_ignore]:[SUCCESS]\");\n+        notification.getEvents().add(\"[PushTask]:[role]:[resource-ldap]:[unmatchingrule_ignore]:[SUCCESS]\");\n+\n+        notification.getStaticRecipients().add(\"issueyncope648@syncope.apache.org\");\n+        notification.setSelfAsRecipient(false);\n+        notification.setRecipientAttrName(\"email\");\n+        notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n+\n+        notification.setSender(\"syncope648@syncope.apache.org\");\n+        String subject = \"Test notification\";\n+        notification.setSubject(subject);\n+        notification.setTemplate(\"optin\");\n+        notification.setActive(true);\n+\n+        Response responseNotification = notificationService.create(notification);\n+        notification = getObject(responseNotification.getLocation(), NotificationService.class, NotificationTO.class);\n+        assertNotNull(notification);\n+\n+        execSyncTask(actual.getKey(), 50, false);\n+\n+        NotificationTaskTO taskTO = findNotificationTaskBySender(\"syncope648@syncope.apache.org\");\n+        assertNotNull(taskTO);\n+    }\n }"}]}