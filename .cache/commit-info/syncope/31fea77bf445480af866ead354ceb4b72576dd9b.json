{"sha":"31fea77bf445480af866ead354ceb4b72576dd9b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMxZmVhNzdiZjQ0NTQ4MGFmODY2ZWFkMzU0Y2ViNGI3MjU3NmRkOWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-28T08:08:24Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-28T08:08:24Z"},"message":"Internal JPA refactoring: removing Policy#getType","tree":{"sha":"4915a44974c188a7642962ca89d0b0e1cde493ae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4915a44974c188a7642962ca89d0b0e1cde493ae"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/31fea77bf445480af866ead354ceb4b72576dd9b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31fea77bf445480af866ead354ceb4b72576dd9b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/31fea77bf445480af866ead354ceb4b72576dd9b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31fea77bf445480af866ead354ceb4b72576dd9b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2e07eb707c36366876910fb97ca43c0d94b601e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b2e07eb707c36366876910fb97ca43c0d94b601e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b2e07eb707c36366876910fb97ca43c0d94b601e"}],"stats":{"total":542,"additions":207,"deletions":335},"files":[{"sha":"e9331283968135110bb23bad6f54852a6e9c6253","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java","status":"modified","additions":10,"deletions":23,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -32,27 +32,14 @@ public class PolicyResultManager extends CommonsResultManager {\n     public void printPolicies(final LinkedList<AbstractPolicyTO> policyTOs) {\n         System.out.println(\"\");\n         for (AbstractPolicyTO policyTO : policyTOs) {\n-            if (!policyTOs.isEmpty()) {\n-                final PolicyType policyType = policyTO.getType();\n-                switch (policyType) {\n-                    case ACCOUNT:\n-                        printAccountPolicy((AccountPolicyTO) policyTO);\n-                        break;\n-                    case PASSWORD:\n-                        printPasswordPolicy((PasswordPolicyTO) policyTO);\n-                        break;\n-                    case PUSH:\n-                        System.out.println(policyTO);\n-                        break;\n-                    case PULL:\n-                        printPullPolicy((PullPolicyTO) policyTO);\n-                        break;\n-                    default:\n-                        break;\n-                }\n+            if (policyTO instanceof AccountPolicyTO) {\n+                printAccountPolicy((AccountPolicyTO) policyTO);\n+            } else if (policyTO instanceof PasswordPolicyTO) {\n+                printPasswordPolicy((PasswordPolicyTO) policyTO);\n+            } else if (policyTO instanceof PullPolicyTO) {\n+                printPullPolicy((PullPolicyTO) policyTO);\n             }\n         }\n-\n     }\n \n     public void printPoliciesByType(final String policyTypeString, final LinkedList<AbstractPolicyTO> policyTOs) {\n@@ -86,7 +73,7 @@ public void printPoliciesByType(final String policyTypeString, final LinkedList<\n \n     public void printAccountPolicy(final AccountPolicyTO policyTO) {\n         System.out.println(\" > KEY: \" + policyTO.getKey());\n-        System.out.println(\"    type: \" + policyTO.getType().name());\n+        System.out.println(\"    type: \" + policyTO.getClass().getSimpleName());\n         System.out.println(\"    description: \" + policyTO.getDescription());\n         System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n         System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());\n@@ -99,20 +86,20 @@ public void printAccountPolicy(final AccountPolicyTO policyTO) {\n \n     public void printPasswordPolicy(final PasswordPolicyTO policyTO) {\n         System.out.println(\" > KEY: \" + policyTO.getKey());\n-        System.out.println(\"    type: \" + policyTO.getType().name());\n+        System.out.println(\"    type: \" + policyTO.getClass().getSimpleName());\n         System.out.println(\"    description: \" + policyTO.getDescription());\n         System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n         System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());\n         System.out.println(\"    history lenght : \" + policyTO.getHistoryLength());\n         System.out.println(\"    allow null password : \" + policyTO.isAllowNullPassword());\n         System.out.println(\"    RULES : \");\n-        System.out.println(\"       > class : \" + ((PasswordPolicyTO) policyTO).getRuleConfs());\n+        System.out.println(\"       > class : \" + policyTO.getRuleConfs());\n         System.out.println(\"\");\n     }\n \n     public void printPullPolicy(final PullPolicyTO policyTO) {\n         System.out.println(\" > KEY: \" + policyTO.getKey());\n-        System.out.println(\"    type: \" + policyTO.getType().name());\n+        System.out.println(\"    type: \" + policyTO.getClass().getSimpleName());\n         System.out.println(\"    description: \" + policyTO.getDescription());\n         System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n         System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());"},{"sha":"69564ac9a779b394bc43e6102df55b5ae43c5fe3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPolicyTO.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -29,7 +29,6 @@\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.PolicyType;\n \n @XmlRootElement(name = \"abstractPolicy\")\n @XmlType\n@@ -43,22 +42,10 @@ public abstract class AbstractPolicyTO extends AbstractBaseBean {\n \n     private String description;\n \n-    private final PolicyType type;\n-\n     private final List<String> usedByResources = new ArrayList<>();\n \n     private final List<String> usedByRealms = new ArrayList<>();\n \n-    private AbstractPolicyTO() {\n-        super();\n-        throw new UnsupportedOperationException(\"No-arg constructor is just to keep JAXB from complaining\");\n-    }\n-\n-    protected AbstractPolicyTO(final PolicyType type) {\n-        super();\n-        this.type = type;\n-    }\n-\n     public long getKey() {\n         return key;\n     }\n@@ -76,10 +63,6 @@ public void setDescription(final String description) {\n         this.description = description;\n     }\n \n-    public PolicyType getType() {\n-        return type;\n-    }\n-\n     @XmlElementWrapper(name = \"usedByResources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"usedByResources\")"},{"sha":"63b78a9ebe7371311f17b9055af993591d5a6a74","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -25,7 +25,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.PolicyType;\n \n @XmlRootElement(name = \"accountPolicy\")\n @XmlType\n@@ -41,10 +40,6 @@ public class AccountPolicyTO extends AbstractPolicyTO {\n \n     private final List<String> resources = new ArrayList<>();\n \n-    public AccountPolicyTO() {\n-        super(PolicyType.ACCOUNT);\n-    }\n-\n     public boolean isPropagateSuspension() {\n         return propagateSuspension;\n     }"},{"sha":"20f238a31973023f6321fb04e341384611a72c87","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -25,7 +25,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.PolicyType;\n \n @XmlRootElement(name = \"passwordPolicy\")\n @XmlType\n@@ -39,10 +38,6 @@ public class PasswordPolicyTO extends AbstractPolicyTO {\n \n     private final List<AbstractPasswordRuleConf> ruleConfs = new ArrayList<>();\n \n-    public PasswordPolicyTO() {\n-        super(PolicyType.PASSWORD);\n-    }\n-\n     public boolean isAllowNullPassword() {\n         return allowNullPassword;\n     }"},{"sha":"2618e430259d77dc8f632b6a0e95da94215c2eda","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -20,7 +20,6 @@\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.PolicyType;\n \n @XmlRootElement(name = \"pullPolicy\")\n @XmlType\n@@ -30,10 +29,6 @@ public class PullPolicyTO extends AbstractPolicyTO {\n \n     private PullPolicySpec specification;\n \n-    public PullPolicyTO() {\n-        super(PolicyType.PULL);\n-    }\n-\n     public PullPolicySpec getSpecification() {\n         return specification;\n     }"},{"sha":"ea429c2990fcab799eb348a38be67649968725c9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PolicyType.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyType.java"},{"sha":"745213883974c798ab32668ba1df1f18fe1bd9a7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":18,"deletions":33,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -25,21 +25,19 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n-import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n \n @Component\n public class PolicyLogic extends AbstractTransactionalLogic<AbstractPolicyTO> {\n@@ -52,48 +50,35 @@ public class PolicyLogic extends AbstractTransactionalLogic<AbstractPolicyTO> {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_CREATE + \"')\")\n     public <T extends AbstractPolicyTO> T create(final T policyTO) {\n-        return binder.getPolicyTO(policyDAO.save(binder.getPolicy(null, policyTO)));\n-    }\n-\n-    private <T extends AbstractPolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n-        binder.getPolicy(policy, policyTO);\n-        K savedPolicy = policyDAO.save(policy);\n-        return binder.getPolicyTO(savedPolicy);\n+        return binder.getPolicyTO(policyDAO.save(binder.create(policyTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n-    public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n+    public AbstractPolicyTO update(final AbstractPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n-        if (!(policy instanceof PasswordPolicy)) {\n-            throw new NotFoundException(\"PasswordPolicy with key \" + policyTO.getKey());\n-        }\n-\n-        return update(policyTO, policy);\n+        return binder.getPolicyTO(policyDAO.save(binder.update(policy, policyTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n-    public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n-        Policy policy = policyDAO.find(policyTO.getKey());\n-        if (!(policy instanceof AccountPolicy)) {\n-            throw new NotFoundException(\"AccountPolicy with key \" + policyTO.getKey());\n-        }\n+    private Class<? extends Policy> getPolicyClass(final PolicyType policyType) {\n+        switch (policyType) {\n+            case ACCOUNT:\n+                return AccountPolicy.class;\n \n-        return update(policyTO, policy);\n-    }\n+            case PASSWORD:\n+                return PasswordPolicy.class;\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n-    public PullPolicyTO update(final PullPolicyTO policyTO) {\n-        Policy policy = policyDAO.find(policyTO.getKey());\n-        if (!(policy instanceof PullPolicy)) {\n-            throw new NotFoundException(PullPolicy.class.getSimpleName() + \" with key \" + policyTO.getKey());\n-        }\n+            case PULL:\n+                return PullPolicy.class;\n \n-        return update(policyTO, policy);\n+            case PUSH:\n+            default:\n+                return PushPolicy.class;\n+        }\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_LIST + \"')\")\n     public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n-        return CollectionUtils.collect(policyDAO.find(type), new Transformer<Policy, T>() {\n+        return CollectionUtils.collect(policyDAO.find(getPolicyClass(type)), new Transformer<Policy, T>() {\n \n             @Override\n             public T transform(final Policy input) {"},{"sha":"dbec17ee08badaac2df95432f2c302e45ce40a86","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n@@ -50,6 +49,8 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n@@ -279,9 +280,9 @@ public NumbersInfo numbers() {\n         numbersInfo.getConfCompleteness().put(\n                 NumbersInfo.ConfItem.RESOURCE, numbersInfo.getTotalResources() > 0);\n         numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.ACCOUNT_POLICY, !policyDAO.find(PolicyType.ACCOUNT).isEmpty());\n+                NumbersInfo.ConfItem.ACCOUNT_POLICY, !policyDAO.find(AccountPolicy.class).isEmpty());\n         numbersInfo.getConfCompleteness().put(\n-                NumbersInfo.ConfItem.PASSWORD_POLICY, !policyDAO.find(PolicyType.PASSWORD).isEmpty());\n+                NumbersInfo.ConfItem.PASSWORD_POLICY, !policyDAO.find(PasswordPolicy.class).isEmpty());\n         numbersInfo.getConfCompleteness().put(\n                 NumbersInfo.ConfItem.NOTIFICATION, !notificationDAO.findAll().isEmpty());\n         numbersInfo.getConfCompleteness().put("},{"sha":"6c443e8bee39039221bf9568cfe87baa1971f0c2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -35,7 +34,7 @@ public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n \n     List<ExternalResource> findByPolicy(Policy policy);\n \n-    List<ExternalResource> findWithoutPolicy(PolicyType type);\n+    List<ExternalResource> findWithoutPolicy(Class<? extends Policy> policyClass);\n \n     List<ExternalResource> findAll();\n "},{"sha":"aa41223961e7d8d72980f6cbffe7ca63cb19fea0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n@@ -28,7 +27,7 @@ public interface PolicyDAO extends DAO<Policy, Long> {\n \n     <T extends Policy> T find(Long key);\n \n-    <T extends Policy> List<T> find(PolicyType type);\n+    <T extends Policy> List<T> find(Class<T> reference);\n \n     List<AccountPolicy> findByResource(ExternalResource resource);\n "},{"sha":"39d91cedc04a7f6f7588fb20308476142228010a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Policy.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPolicy.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -18,13 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.common.lib.types.PolicyType;\n-\n public interface Policy extends Entity<Long> {\n \n     String getDescription();\n \n-    PolicyType getType();\n-\n     void setDescription(String description);\n }"},{"sha":"be02327d26881701bee3b6b18f59e7056c417d0a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -24,7 +24,6 @@\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -41,6 +40,8 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n@@ -93,41 +94,34 @@ public Provision findProvision(final Long key) {\n         return entityManager().find(JPAProvision.class, key);\n     }\n \n-    private StringBuilder getByPolicyQuery(final PolicyType type) {\n+    private StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n         StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAExternalResource.class.getSimpleName()).\n                 append(\" e WHERE e.\");\n-        switch (type) {\n-            case ACCOUNT:\n-                query.append(\"accountPolicy\");\n-                break;\n \n-            case PASSWORD:\n-                query.append(\"passwordPolicy\");\n-                break;\n-\n-            case PULL:\n-                query.append(\"pullPolicy\");\n-                break;\n-\n-            default:\n-                break;\n+        if (AccountPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"accountPolicy\");\n+        } else if (PasswordPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"passwordPolicy\");\n+        } else if (PullPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"pullPolicy\");\n         }\n+\n         return query;\n     }\n \n     @Override\n     public List<ExternalResource> findByPolicy(final Policy policy) {\n         TypedQuery<ExternalResource> query = entityManager().createQuery(\n-                getByPolicyQuery(policy.getType()).append(\" = :policy\").toString(), ExternalResource.class);\n+                getByPolicyQuery(policy.getClass()).append(\" = :policy\").toString(), ExternalResource.class);\n         query.setParameter(\"policy\", policy);\n         return query.getResultList();\n     }\n \n     @Override\n-    public List<ExternalResource> findWithoutPolicy(final PolicyType type) {\n+    public List<ExternalResource> findWithoutPolicy(final Class<? extends Policy> policyClass) {\n         TypedQuery<ExternalResource> query = entityManager().createQuery(\n-                getByPolicyQuery(type).append(\" IS NULL\").toString(), ExternalResource.class);\n+                getByPolicyQuery(policyClass).append(\" IS NULL\").toString(), ExternalResource.class);\n         return query.getResultList();\n     }\n "},{"sha":"0d17176839af70b885d053910082451ad04264a3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -35,7 +35,7 @@\n @Repository\n public class JPAPlainAttrDAO extends AbstractDAO<PlainAttr<?>, Long> implements PlainAttrDAO {\n \n-    public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getJPAEntityReference(\n+    public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getEntityReference(\n             final Class<T> reference) {\n \n         return CPlainAttr.class.isAssignableFrom(reference)\n@@ -51,7 +51,7 @@ public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getJPAEnti\n \n     @Override\n     public <T extends PlainAttr<?>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n+        return reference.cast(entityManager().find(getEntityReference(reference), key));\n     }\n \n     @Override"},{"sha":"62a25de4c4e1ff97a9c0720c9632e60f04a3fb11","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -46,7 +46,7 @@\n public class JPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue, Long> implements PlainAttrValueDAO {\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getJPAEntityReference(\n+    private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getEntityReference(\n             final Class<T> reference) {\n \n         return AbstractPlainAttrValue.class.isAssignableFrom(reference)\n@@ -72,13 +72,13 @@ private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getJP\n \n     @Override\n     public <T extends PlainAttrValue> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n+        return reference.cast(entityManager().find(getEntityReference(reference), key));\n     }\n \n     @Override\n     public <T extends PlainAttrValue> List<T> findAll(final Class<T> reference) {\n         TypedQuery<T> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+                \"SELECT e FROM \" + getEntityReference(reference).getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n "},{"sha":"8e9edcc890e0f10f2f0efe399f2399b849214f3c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -74,7 +74,7 @@ public List<PlainSchema> findAll() {\n     @Override\n     public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n         TypedQuery<T> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + ((JPAPlainAttrDAO) plainAttrDAO).getJPAEntityReference(reference).getSimpleName()\n+                \"SELECT e FROM \" + ((JPAPlainAttrDAO) plainAttrDAO).getEntityReference(reference).getSimpleName()\n                 + \" e WHERE e.schema=:schema\", reference);\n         query.setParameter(\"schema\", schema);\n "},{"sha":"db216be98ff28d41564924f0f2b8b07ca4b46930","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -19,18 +19,21 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n-import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -40,27 +43,30 @@ public class JPAPolicyDAO extends AbstractDAO<Policy, Long> implements PolicyDAO\n     @Autowired\n     private RealmDAO realmDAO;\n \n-    @Override\n+    private <T extends Policy> Class<? extends AbstractPolicy> getEntityReference(final Class<T> reference) {\n+        return AccountPolicy.class.isAssignableFrom(reference)\n+                ? JPAAccountPolicy.class\n+                : PasswordPolicy.class.isAssignableFrom(reference)\n+                ? JPAPasswordPolicy.class\n+                : PullPolicy.class.isAssignableFrom(reference)\n+                ? JPAPullPolicy.class\n+                : PushPolicy.class.isAssignableFrom(reference)\n+                ? JPAPushPolicy.class\n+                : null;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n+    @Override\n     public <T extends Policy> T find(final Long key) {\n-        final Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e WHERE e.id=:id\");\n-        query.setParameter(\"id\", key);\n-\n-        List<T> result = query.getResultList();\n-        return result.isEmpty()\n-                ? null\n-                : result.iterator().next();\n+        return (T) entityManager().find(AbstractPolicy.class, key);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Policy> List<T> find(final PolicyType type) {\n-        final Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e WHERE e.type=:type\");\n-        query.setParameter(\"type\", type);\n+    public <T extends Policy> List<T> find(final Class<T> reference) {\n+        TypedQuery<T> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + getEntityReference(reference).getSimpleName() + \" e\", reference);\n \n-        return (List<T>) query.getResultList();\n+        return query.getResultList();\n     }\n \n     @Override"},{"sha":"d0a47829489f9bce138652869d40d8fe692c8431","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -27,14 +27,15 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -102,9 +103,9 @@ private <T extends Policy> List<Realm> findSamePolicyChildren(final Realm realm,\n         List<Realm> result = new ArrayList<>();\n \n         for (Realm child : findChildren(realm)) {\n-            if ((policy.getType() == PolicyType.ACCOUNT\n+            if ((policy instanceof AccountPolicy\n                     && child.getAccountPolicy() == null || policy.equals(child.getAccountPolicy()))\n-                    || (policy.getType() == PolicyType.PASSWORD\n+                    || (policy instanceof PasswordPolicy\n                     && child.getPasswordPolicy() == null || policy.equals(child.getPasswordPolicy()))) {\n \n                 result.add(child);\n@@ -117,7 +118,7 @@ private <T extends Policy> List<Realm> findSamePolicyChildren(final Realm realm,\n \n     @Override\n     public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n-        if (policy.getType() == PolicyType.PULL) {\n+        if (PullPolicy.class.isAssignableFrom(policy.getClass())) {\n             return Collections.<Realm>emptyList();\n         }\n "},{"sha":"5b72758c5c133fb4f408abe38bb987149980dcf1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -19,13 +19,10 @@\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n \n@@ -41,10 +38,6 @@ public abstract class AbstractPolicy extends AbstractEntity<Long> implements Pol\n     @NotNull\n     private String description;\n \n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    protected PolicyType type;\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -59,9 +52,4 @@ public String getDescription() {\n     public void setDescription(final String description) {\n         this.description = description;\n     }\n-\n-    @Override\n-    public PolicyType getType() {\n-        return type;\n-    }\n }"},{"sha":"f65adb41c80c4a4393dcb470bf932d5f6a474303","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -36,7 +36,6 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -70,11 +69,6 @@ public class JPAAccountPolicy extends AbstractPolicy implements AccountPolicy {\n             @JoinColumn(name = \"resource_name\"))\n     private Set<JPAExternalResource> resources = new HashSet<>();\n \n-    public JPAAccountPolicy() {\n-        super();\n-        this.type = PolicyType.ACCOUNT;\n-    }\n-\n     @Override\n     public boolean isPropagateSuspension() {\n         return isBooleanAsInteger(propagateSuspension);"},{"sha":"ba705623b90c14e439e4a62356678b67bfa6f6c6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -31,7 +31,6 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n \n @Entity\n@@ -52,11 +51,6 @@ public class JPAPasswordPolicy extends AbstractPolicy implements PasswordPolicy\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"passwordPolicy\")\n     private List<JPAPasswordRuleConfInstance> ruleConfs = new ArrayList<>();\n \n-    public JPAPasswordPolicy() {\n-        super();\n-        this.type = PolicyType.PASSWORD;\n-    }\n-\n     @Override\n     public boolean isAllowNullPassword() {\n         return isBooleanAsInteger(allowNullPassword);"},{"sha":"e5fb20f6df04741aa90dcb98f1387590783f172a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPullPolicy.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPullPolicy.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -22,7 +22,6 @@\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n \n@@ -37,11 +36,6 @@ public class JPAPullPolicy extends AbstractPolicy implements PullPolicy {\n     @Lob\n     private String specification;\n \n-    public JPAPullPolicy() {\n-        super();\n-        this.type = PolicyType.PULL;\n-    }\n-\n     @Override\n     public PullPolicySpec getSpecification() {\n         return POJOHelper.deserialize(specification, PullPolicySpec.class);"},{"sha":"dcdfc1d9453a979f2d9a877f9525a4fb25413ed1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPushPolicy.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.policy.PushPolicySpec;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n@@ -37,11 +36,6 @@ public class JPAPushPolicy extends AbstractPolicy implements PushPolicy {\n     @Lob\n     private String specification;\n \n-    public JPAPushPolicy() {\n-        super();\n-        this.type = PolicyType.PUSH;\n-    }\n-\n     @Override\n     public PushPolicySpec getSpecification() {\n         return POJOHelper.deserialize(specification, PushPolicySpec.class);"},{"sha":"a3be9bbe21edd7f61bdb9caf210847a416ca0566","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -28,7 +28,6 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n-import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -76,7 +75,7 @@ public void findByKey() {\n \n     @Test\n     public void findByType() {\n-        List<? extends Policy> policies = policyDAO.find(PolicyType.PULL);\n+        List<PullPolicy> policies = policyDAO.find(PullPolicy.class);\n         assertNotNull(\"findById did not work\", policies);\n         assertFalse(policies.isEmpty());\n     }\n@@ -99,7 +98,6 @@ public void create() {\n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n-        assertEquals(PolicyType.PULL, policy.getType());\n         assertEquals(pullURuleName,\n                 policy.getSpecification().getCorrelationRules().get(anyTypeDAO.findUser().getKey()));\n         assertEquals(pullGRuleName,\n@@ -120,7 +118,6 @@ public void update() {\n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n-        assertEquals(PolicyType.PASSWORD, policy.getType());\n         assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMaxLength(), 8);\n         assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMinLength(), 6);\n     }"},{"sha":"24e3894f10c4d559f951da4820a7e673aefc46f4","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":9,"deletions":15,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -105,34 +105,28 @@ under the License.\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   \n   <!-- sample policies -->\n-  <PullPolicy id=\"1\" description=\"a pull policy\" type=\"PULL\" \n-              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n-  <PasswordPolicy id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n-                  historyLength=\"1\" allowNullPassword=\"1\"/> \n+  <PullPolicy id=\"1\" description=\"a pull policy\" specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n+  <PasswordPolicy id=\"2\" description=\"a password policy\" historyLength=\"1\" allowNullPassword=\"1\"/> \n   <PasswordRuleConfInstance id=\"2\" passwordPolicy_id=\"2\"\n                             serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n-  <PullPolicy id=\"3\" description=\"pull policy 2\" type=\"PULL\" \n+  <PullPolicy id=\"3\" description=\"pull policy 2\"\n               specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n-  <PasswordPolicy id=\"4\" description=\"sample password policy\" type=\"PASSWORD\"\n-                  historyLength=\"0\"  allowNullPassword=\"1\"/> \n+  <PasswordPolicy id=\"4\" description=\"sample password policy\" historyLength=\"0\"  allowNullPassword=\"1\"/> \n   <PasswordRuleConfInstance id=\"4\" passwordPolicy_id=\"4\"\n                             serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n-  <AccountPolicy id=\"5\" description=\"an account policy\" type=\"ACCOUNT\"\n+  <AccountPolicy id=\"5\" description=\"an account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n   <AccountRuleConfInstance id=\"5\" accountPolicy_id=\"5\"\n                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n-  <AccountPolicy id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\"\n+  <AccountPolicy id=\"6\" description=\"sample account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"3\"/>\n   <AccountRuleConfInstance id=\"6\" accountPolicy_id=\"6\"\n                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n-  <PullPolicy id=\"7\" description=\"pull policy 1\" type=\"PULL\" \n-              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n-  <PasswordPolicy id=\"8\" description=\"sample password policy\" type=\"PASSWORD\"\n-                  historyLength=\"0\" allowNullPassword=\"0\"/> \n+  <PullPolicy id=\"7\" description=\"pull policy 1\" specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n+  <PasswordPolicy id=\"8\" description=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n   <PasswordRuleConfInstance id=\"8\" passwordPolicy_id=\"8\"\n                             serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n-  <PullPolicy id=\"9\" description=\"pull policy for java rule\" type=\"PULL\" \n-              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n+  <PullPolicy id=\"9\" description=\"pull policy for java rule\" specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n \n   <RelationshipType name=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType name=\"neighborhood\"/>"},{"sha":"cea03dfa31db8cd4522091ef2e56b493fbb72d78","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/PolicyDataBinder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -23,7 +23,9 @@\n \n public interface PolicyDataBinder {\n \n-    <T extends Policy> T getPolicy(T policy, AbstractPolicyTO policyTO);\n+    <T extends Policy> T create(AbstractPolicyTO policyTO);\n+\n+    <T extends Policy> T update(T policy, AbstractPolicyTO policyTO);\n \n     <T extends AbstractPolicyTO> T getPolicyTO(Policy policy);\n "},{"sha":"625f88d4cab51c2d5cb8d47659c56b6b31af781b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":112,"deletions":113,"changes":225,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -57,135 +57,134 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n-        T policyTO;\n-        switch (policy.getType()) {\n-            case PASSWORD:\n-                PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(policy);\n-                PasswordPolicyTO passwordPolicyTO = new PasswordPolicyTO();\n-                policyTO = (T) passwordPolicyTO;\n-\n-                passwordPolicyTO.setAllowNullPassword(passwordPolicy.isAllowNullPassword());\n-                passwordPolicyTO.setHistoryLength(passwordPolicy.getHistoryLength());\n-\n-                passwordPolicyTO.getRuleConfs().clear();\n-                for (PasswordRuleConf ruleConf : passwordPolicy.getRuleConfs()) {\n-                    passwordPolicyTO.getRuleConfs().add((AbstractPasswordRuleConf) ruleConf);\n-                }\n-                break;\n-\n-            case ACCOUNT:\n-                AccountPolicy accountPolicy = AccountPolicy.class.cast(policy);\n-                AccountPolicyTO accountPolicyTO = new AccountPolicyTO();\n-                policyTO = (T) accountPolicyTO;\n+    private void throwInvalidPolicy(final Policy policy, final AbstractPolicyTO policyTO) {\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+        sce.getElements().add(String.format(\"Cannot update %s from %s\",\n+                policy.getClass().getSimpleName(), policyTO.getClass().getSimpleName()));\n+        throw sce;\n+    }\n \n-                accountPolicyTO.setMaxAuthenticationAttempts(accountPolicy.getMaxAuthenticationAttempts());\n-                accountPolicyTO.setPropagateSuspension(accountPolicy.isPropagateSuspension());\n+    @SuppressWarnings(\"unchecked\")\n+    private <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO policyTO) {\n+        T result = policy;\n \n-                accountPolicyTO.getRuleConfs().clear();\n-                for (AccountRuleConf ruleConf : accountPolicy.getRuleConfs()) {\n-                    accountPolicyTO.getRuleConfs().add((AbstractAccountRuleConf) ruleConf);\n+        if (policyTO instanceof PasswordPolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(PasswordPolicy.class);\n+            } else if (!(policyTO instanceof PasswordPolicyTO)) {\n+                throwInvalidPolicy(policy, policyTO);\n+            }\n+\n+            PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(result);\n+            PasswordPolicyTO passwordPolicyTO = PasswordPolicyTO.class.cast(policyTO);\n+\n+            passwordPolicy.setAllowNullPassword(passwordPolicyTO.isAllowNullPassword());\n+            passwordPolicy.setHistoryLength(passwordPolicyTO.getHistoryLength());\n+\n+            passwordPolicy.removeAllRuleConfs();\n+            for (PasswordRuleConf conf : passwordPolicyTO.getRuleConfs()) {\n+                passwordPolicy.add(conf);\n+            }\n+        } else if (policyTO instanceof AccountPolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(AccountPolicy.class);\n+            } else if (!(policyTO instanceof AccountPolicyTO)) {\n+                throwInvalidPolicy(policy, policyTO);\n+            }\n+\n+            AccountPolicy accountPolicy = AccountPolicy.class.cast(result);\n+            AccountPolicyTO accountPolicyTO = AccountPolicyTO.class.cast(policyTO);\n+\n+            accountPolicy.setMaxAuthenticationAttempts(accountPolicyTO.getMaxAuthenticationAttempts());\n+            accountPolicy.setPropagateSuspension(accountPolicyTO.isPropagateSuspension());\n+\n+            accountPolicy.removeAllRuleConfs();\n+            for (AccountRuleConf conf : accountPolicyTO.getRuleConfs()) {\n+                accountPolicy.add(conf);\n+            }\n+\n+            accountPolicy.getResources().clear();\n+            for (String resourceName : accountPolicyTO.getResources()) {\n+                ExternalResource resource = resourceDAO.find(resourceName);\n+                if (resource == null) {\n+                    LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n+                } else {\n+                    accountPolicy.add(resource);\n                 }\n+            }\n+        } else if (policyTO instanceof PullPolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(PullPolicy.class);\n+            } else if (!(policyTO instanceof PullPolicyTO)) {\n+                throwInvalidPolicy(policy, policyTO);\n+            }\n+\n+            ((PullPolicy) result).setSpecification(((PullPolicyTO) policyTO).getSpecification());\n+        }\n \n-                accountPolicyTO.getResources().addAll(accountPolicy.getResourceNames());\n-                break;\n-\n-            case PULL:\n-            default:\n-                policyTO = (T) new PullPolicyTO();\n-                ((PullPolicyTO) policyTO).setSpecification(((PullPolicy) policy).getSpecification());\n+        if (result != null) {\n+            result.setDescription(policyTO.getDescription());\n         }\n \n-        policyTO.setKey(policy.getKey());\n-        policyTO.setDescription(policy.getDescription());\n+        return result;\n+    }\n \n-        for (ExternalResource resource : resourceDAO.findByPolicy(policy)) {\n-            policyTO.getUsedByResources().add(resource.getKey());\n-        }\n-        for (Realm realm : realmDAO.findByPolicy(policy)) {\n-            policyTO.getUsedByRealms().add(realm.getFullPath());\n-        }\n+    @Override\n+    public <T extends Policy> T create(final AbstractPolicyTO policyTO) {\n+        return getPolicy(null, policyTO);\n+    }\n \n-        return policyTO;\n+    @Override\n+    public <T extends Policy> T update(final T policy, final AbstractPolicyTO policyTO) {\n+        return getPolicy(policy, policyTO);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO policyTO) {\n-        if (policy != null && policy.getType() != policyTO.getType()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n-            sce.getElements().add(String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.getType()));\n-            throw sce;\n+    public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n+        T policyTO = null;\n+\n+        if (policy instanceof PasswordPolicy) {\n+            PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(policy);\n+            PasswordPolicyTO passwordPolicyTO = new PasswordPolicyTO();\n+            policyTO = (T) passwordPolicyTO;\n+\n+            passwordPolicyTO.setAllowNullPassword(passwordPolicy.isAllowNullPassword());\n+            passwordPolicyTO.setHistoryLength(passwordPolicy.getHistoryLength());\n+\n+            for (PasswordRuleConf ruleConf : passwordPolicy.getRuleConfs()) {\n+                passwordPolicyTO.getRuleConfs().add((AbstractPasswordRuleConf) ruleConf);\n+            }\n+        } else if (policy instanceof AccountPolicy) {\n+            AccountPolicy accountPolicy = AccountPolicy.class.cast(policy);\n+            AccountPolicyTO accountPolicyTO = new AccountPolicyTO();\n+            policyTO = (T) accountPolicyTO;\n+\n+            accountPolicyTO.setMaxAuthenticationAttempts(accountPolicy.getMaxAuthenticationAttempts());\n+            accountPolicyTO.setPropagateSuspension(accountPolicy.isPropagateSuspension());\n+\n+            for (AccountRuleConf ruleConf : accountPolicy.getRuleConfs()) {\n+                accountPolicyTO.getRuleConfs().add((AbstractAccountRuleConf) ruleConf);\n+            }\n+\n+            accountPolicyTO.getResources().addAll(accountPolicy.getResourceNames());\n+        } else if (policy instanceof PullPolicy) {\n+            policyTO = (T) new PullPolicyTO();\n+            ((PullPolicyTO) policyTO).setSpecification(((PullPolicy) policy).getSpecification());\n         }\n \n-        T result = policy;\n-        switch (policyTO.getType()) {\n-            case PASSWORD:\n-                if (!(policyTO instanceof PasswordPolicyTO)) {\n-                    throw new ClassCastException(\"Expected \" + PasswordPolicyTO.class.getName()\n-                            + \", found \" + policyTO.getClass().getName());\n-                }\n-                if (result == null) {\n-                    result = (T) entityFactory.newEntity(PasswordPolicy.class);\n-                }\n-                PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(result);\n-                PasswordPolicyTO passwordPolicyTO = PasswordPolicyTO.class.cast(policyTO);\n-\n-                passwordPolicy.setAllowNullPassword(passwordPolicyTO.isAllowNullPassword());\n-                passwordPolicy.setHistoryLength(passwordPolicyTO.getHistoryLength());\n-\n-                passwordPolicy.removeAllRuleConfs();\n-                for (PasswordRuleConf conf : passwordPolicyTO.getRuleConfs()) {\n-                    passwordPolicy.add(conf);\n-                }\n-                break;\n-\n-            case ACCOUNT:\n-                if (!(policyTO instanceof AccountPolicyTO)) {\n-                    throw new ClassCastException(\"Expected \" + AccountPolicyTO.class.getName()\n-                            + \", found \" + policyTO.getClass().getName());\n-                }\n-                if (result == null) {\n-                    result = (T) entityFactory.newEntity(AccountPolicy.class);\n-                }\n-                AccountPolicy accountPolicy = AccountPolicy.class.cast(result);\n-                AccountPolicyTO accountPolicyTO = AccountPolicyTO.class.cast(policyTO);\n-\n-                accountPolicy.setMaxAuthenticationAttempts(accountPolicyTO.getMaxAuthenticationAttempts());\n-                accountPolicy.setPropagateSuspension(accountPolicyTO.isPropagateSuspension());\n+        if (policyTO != null) {\n+            policyTO.setKey(policy.getKey());\n+            policyTO.setDescription(policy.getDescription());\n \n-                accountPolicy.removeAllRuleConfs();\n-                for (AccountRuleConf conf : accountPolicyTO.getRuleConfs()) {\n-                    accountPolicy.add(conf);\n-                }\n-\n-                accountPolicy.getResources().clear();\n-                for (String resourceName : accountPolicyTO.getResources()) {\n-                    ExternalResource resource = resourceDAO.find(resourceName);\n-                    if (resource == null) {\n-                        LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n-                    } else {\n-                        accountPolicy.add(resource);\n-                    }\n-                }\n-                break;\n-\n-            case PULL:\n-            default:\n-                if (!(policyTO instanceof PullPolicyTO)) {\n-                    throw new ClassCastException(\"Expected \" + PullPolicyTO.class.getName()\n-                            + \", found \" + policyTO.getClass().getName());\n-                }\n-                if (result == null) {\n-                    result = (T) entityFactory.newEntity(PullPolicy.class);\n-                }\n-                ((PullPolicy) result).setSpecification(((PullPolicyTO) policyTO).getSpecification());\n+            for (ExternalResource resource : resourceDAO.findByPolicy(policy)) {\n+                policyTO.getUsedByResources().add(resource.getKey());\n+            }\n+            for (Realm realm : realmDAO.findByPolicy(policy)) {\n+                policyTO.getUsedByRealms().add(realm.getFullPath());\n+            }\n         }\n \n-        result.setDescription(policyTO.getDescription());\n-\n-        return result;\n+        return policyTO;\n     }\n }"},{"sha":"95fe2559456811fa0cb06114a93ca17e31a1c38d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":1,"deletions":19,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -22,9 +22,6 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n-import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n@@ -64,21 +61,6 @@ public <T extends AbstractPolicyTO> T read(final Long key) {\n \n     @Override\n     public void update(final AbstractPolicyTO policyTO) {\n-        switch (policyTO.getType()) {\n-            case ACCOUNT:\n-                logic.update((AccountPolicyTO) policyTO);\n-                break;\n-\n-            case PASSWORD:\n-                logic.update((PasswordPolicyTO) policyTO);\n-                break;\n-\n-            case PULL:\n-                logic.update((PullPolicyTO) policyTO);\n-                break;\n-\n-            default:\n-                break;\n-        }\n+        logic.update(policyTO);\n     }\n }"},{"sha":"6df49352f3dfa14780f479e36729da1aab2f4661","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31fea77bf445480af866ead354ceb4b72576dd9b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31fea77bf445480af866ead354ceb4b72576dd9b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=31fea77bf445480af866ead354ceb4b72576dd9b","patch":"@@ -113,7 +113,6 @@ public void create() {\n         PullPolicyTO policyTO = createPolicy(policy);\n \n         assertNotNull(policyTO);\n-        assertEquals(PolicyType.PULL, policyTO.getType());\n         assertEquals(TestPullRule.class.getName(),\n                 policyTO.getSpecification().getCorrelationRules().get(AnyTypeKind.USER.name()));\n     }\n@@ -137,7 +136,6 @@ public void update() {\n         policy = policyService.read(policy.getKey());\n \n         assertNotNull(policy);\n-        assertEquals(PolicyType.PASSWORD, policy.getType());\n         assertEquals(22, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMaxLength());\n         assertEquals(8, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMinLength());\n     }"}]}