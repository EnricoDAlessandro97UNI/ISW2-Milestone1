{"sha":"7b740e6a11342839c54ed59ad9c50b87b8082d11","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdiNzQwZTZhMTEzNDI4MzljNTRlZDU5YWQ5YzUwYjg3YjgwODJkMTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-28T12:48:40Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-28T12:48:40Z"},"message":"[SYNCOPE-50] A separated ImplementationClassNamesLoader class, invoked on webapp init, has been provided: this will make things easier in WAR overlays\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1306294 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"566540f3f9468195e13e08980c5880e56abdfa4b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/566540f3f9468195e13e08980c5880e56abdfa4b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7b740e6a11342839c54ed59ad9c50b87b8082d11","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7b740e6a11342839c54ed59ad9c50b87b8082d11","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7b740e6a11342839c54ed59ad9c50b87b8082d11","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7b740e6a11342839c54ed59ad9c50b87b8082d11/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2c3521cfeaa86214ebdeceaa88f26bf694b43ab3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2c3521cfeaa86214ebdeceaa88f26bf694b43ab3"}],"stats":{"total":279,"additions":155,"deletions":124},"files":[{"sha":"bce0798f88057974345a4085f513314e6619ae36","filename":"core/src/main/java/org/syncope/core/init/ImplementationClassNamesLoader.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=7b740e6a11342839c54ed59ad9c50b87b8082d11","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.syncope.core.init;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.EnumMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.quartz.Job;\n+import org.quartz.StatefulJob;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.ClassMetadata;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.ClassUtils;\n+import org.syncope.core.persistence.validation.attrvalue.Validator;\n+import org.syncope.core.report.Reportlet;\n+import org.syncope.core.scheduling.NotificationJob;\n+import org.syncope.core.scheduling.ReportJob;\n+import org.syncope.core.scheduling.SyncJob;\n+import org.syncope.core.scheduling.SyncJobActions;\n+\n+/**\n+ * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n+ */\n+@Component\n+public class ImplementationClassNamesLoader {\n+\n+    public enum Type {\n+\n+        REPORTLET,\n+        JOB,\n+        JOB_ACTIONS,\n+        VALIDATOR\n+\n+    }\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationClassNamesLoader.class);\n+\n+    @Autowired\n+    private ResourcePatternResolver resResolver;\n+\n+    private Map<Type, Set<String>> classNames;\n+\n+    public void load() {\n+        CachingMetadataReaderFactory factory = new CachingMetadataReaderFactory();\n+\n+        classNames = new EnumMap<Type, Set<String>>(Type.class);\n+        for (Type type : Type.values()) {\n+            classNames.put(type, new HashSet<String>());\n+        }\n+\n+        try {\n+            for (Resource resource : resResolver.getResources(\"classpath*:**/*.class\")) {\n+                ClassMetadata metadata = factory.getMetadataReader(resource).getClassMetadata();\n+\n+                try {\n+                    Class clazz = ClassUtils.forName(metadata.getClassName(), ClassUtils.getDefaultClassLoader());\n+                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(clazz);\n+\n+                    if (interfaces.contains(Reportlet.class) && !metadata.isAbstract()) {\n+                        classNames.get(Type.REPORTLET).add(clazz.getName());\n+                    }\n+\n+                    if ((interfaces.contains(Job.class) || interfaces.contains(StatefulJob.class))\n+                            && !metadata.isAbstract() && !SyncJob.class.getName().equals(metadata.getClassName())\n+                            && !ReportJob.class.getName().equals(metadata.getClassName())\n+                            && !NotificationJob.class.getName().equals(metadata.getClassName())) {\n+\n+                        classNames.get(Type.JOB).add(metadata.getClassName());\n+                    }\n+\n+                    if (interfaces.contains(SyncJobActions.class) && !metadata.isAbstract()) {\n+                        classNames.get(Type.JOB_ACTIONS).add(metadata.getClassName());\n+                    }\n+\n+                    if (interfaces.contains(Validator.class) && !metadata.isAbstract()) {\n+                        classNames.get(Type.VALIDATOR).add(metadata.getClassName());\n+                    }\n+                } catch (ClassNotFoundException e) {\n+                    LOG.warn(\"Could not load class {}\", metadata.getClassName());\n+                } catch (LinkageError e) {\n+                    LOG.warn(\"Could not link class {}\", metadata.getClassName());\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"While searching for class implementing {}\", Reportlet.class.getName(), e);\n+        }\n+\n+        classNames = Collections.unmodifiableMap(classNames);\n+\n+        LOG.debug(\"Implementation classes found: {}\", classNames);\n+    }\n+\n+    public Set<String> getClassNames(final Type type) {\n+        return classNames.get(type);\n+    }\n+}"},{"sha":"721403b61717f9f0c796642f04e0188ac6d89ec2","filename":"core/src/main/java/org/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=7b740e6a11342839c54ed59ad9c50b87b8082d11","patch":"@@ -48,6 +48,9 @@ public class SpringContextInitializer implements ServletContextAware, BeanFactor\n     @Autowired\n     private LoggerLoader loggerLoader;\n \n+    @Autowired\n+    private ImplementationClassNamesLoader classNamesLoader;\n+\n     @Override\n     public void setServletContext(final ServletContext servletContext) {\n     }\n@@ -64,5 +67,6 @@ public void afterPropertiesSet() throws Exception {\n         jobInstanceLoader.load();\n         activitiWorkflowLoader.load();\n         loggerLoader.load();\n+        classNamesLoader.load();\n     }\n }"},{"sha":"0d9da30d530cef352ea749658f4aa55f36b5eec7","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":11,"deletions":32,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=7b740e6a11342839c54ed59ad9c50b87b8082d11","patch":"@@ -28,20 +28,18 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.ResourcePatternResolver;\n-import org.springframework.core.type.ClassMetadata;\n-import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.http.MediaType;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.ClassUtils;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.core.audit.AuditManager;\n+import org.syncope.core.init.ImplementationClassNamesLoader;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n@@ -68,13 +66,16 @@ public class ConfigurationController extends AbstractController {\n     @Autowired\n     private ImportExport importExport;\n \n+    @Autowired\n+    private ImplementationClassNamesLoader classNamesLoader;\n+\n     @Autowired\n     private ResourcePatternResolver resResolver;\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ConfigurationTO create(final HttpServletResponse response, @RequestBody final ConfigurationTO configurationTO) {\n-\n+    public ConfigurationTO create(final HttpServletResponse response,\n+            @RequestBody final ConfigurationTO configurationTO) {\n         LOG.debug(\"Configuration create called with parameters {}\", configurationTO);\n \n         SyncopeConf conf = configurationDataBinder.createSyncopeConfiguration(configurationTO);\n@@ -157,29 +158,7 @@ public ConfigurationTO update(final HttpServletResponse response, @RequestBody f\n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/validators\")\n     public ModelAndView getValidators() {\n-        CachingMetadataReaderFactory cachingMetadataReaderFactory = new CachingMetadataReaderFactory();\n-\n-        Set<String> validators = new HashSet<String>();\n-        try {\n-            for (Resource resource : resResolver\n-                    .getResources(\"classpath:org/syncope/core/persistence/validation/attrvalue/*.class\")) {\n-\n-                ClassMetadata metadata = cachingMetadataReaderFactory.getMetadataReader(resource).getClassMetadata();\n-\n-                try {\n-                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.forName(metadata\n-                            .getClassName(), ClassUtils.getDefaultClassLoader()));\n-\n-                    if (interfaces.contains(Validator.class) && !metadata.isAbstract()) {\n-                        validators.add(metadata.getClassName());\n-                    }\n-                } catch (ClassNotFoundException e) {\n-                    LOG.error(\"Could not load class {}\", metadata.getClassName(), e);\n-                }\n-            }\n-        } catch (IOException e) {\n-            LOG.error(\"While searching for class implementing {}\", Validator.class.getName(), e);\n-        }\n+        Set<String> validators = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.VALIDATOR);\n \n         auditManager.audit(Category.configuration, ConfigurationSubCategory.getValidators, Result.success,\n                 \"Successfully listed all validators: \" + validators.size());\n@@ -198,11 +177,11 @@ public ModelAndView getMailTemplates() {\n \n                 String template = resource.getURL().toExternalForm();\n                 if (template.endsWith(\".html.vm\")) {\n-                    htmlTemplates.add(template.substring(template.indexOf(\"mailTemplates/\") + 14, template\n-                            .indexOf(\".html.vm\")));\n+                    htmlTemplates.add(\n+                            template.substring(template.indexOf(\"mailTemplates/\") + 14, template.indexOf(\".html.vm\")));\n                 } else if (template.endsWith(\".txt.vm\")) {\n-                    textTemplates.add(template.substring(template.indexOf(\"mailTemplates/\") + 14, template\n-                            .indexOf(\".txt.vm\")));\n+                    textTemplates.add(\n+                            template.substring(template.indexOf(\"mailTemplates/\") + 14, template.indexOf(\".txt.vm\")));\n                 } else {\n                     LOG.warn(\"Unexpected template found: {}, ignoring...\", template);\n                 }"},{"sha":"11c7a5a34919bb9d5ae1bef43b362c1465a79100","filename":"core/src/main/java/org/syncope/core/rest/controller/ReportController.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=7b740e6a11342839c54ed59ad9c50b87b8082d11","patch":"@@ -41,7 +41,6 @@\n import org.quartz.JobDataMap;\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n@@ -96,9 +95,6 @@ public class ReportController extends AbstractController {\n     @Autowired\n     private ReportDataBinder binder;\n \n-    @Autowired\n-    private ResourcePatternResolver resResolver;\n-\n     @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ReportTO create(final HttpServletResponse response, @RequestBody final ReportTO reportTO) {"},{"sha":"0aceab5ed057b936a6db295290d8b40fa6646be9","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":4,"deletions":61,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=7b740e6a11342839c54ed59ad9c50b87b8082d11","patch":"@@ -18,28 +18,19 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n-import org.quartz.Job;\n import org.quartz.JobDataMap;\n import org.quartz.Scheduler;\n-import org.quartz.StatefulJob;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.support.ResourcePatternResolver;\n-import org.springframework.core.type.ClassMetadata;\n-import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n-import org.springframework.util.ClassUtils;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -53,6 +44,7 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.audit.AuditManager;\n+import org.syncope.core.init.ImplementationClassNamesLoader;\n import org.syncope.core.init.JobInstanceLoader;\n import org.syncope.core.notification.NotificationManager;\n import org.syncope.core.persistence.beans.NotificationTask;\n@@ -65,10 +57,6 @@\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.rest.data.TaskDataBinder;\n import org.syncope.core.scheduling.AbstractTaskJob;\n-import org.syncope.core.scheduling.NotificationJob;\n-import org.syncope.core.scheduling.ReportJob;\n-import org.syncope.core.scheduling.SyncJob;\n-import org.syncope.core.scheduling.SyncJobActions;\n import org.syncope.core.util.TaskUtil;\n import org.syncope.types.AuditElements.Category;\n import org.syncope.types.AuditElements.Result;\n@@ -106,7 +94,7 @@ public class TaskController extends AbstractController {\n     private SchedulerFactoryBean scheduler;\n \n     @Autowired\n-    private ResourcePatternResolver resResolver;\n+    private ImplementationClassNamesLoader classNamesLoader;\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create/sync\")\n@@ -252,32 +240,7 @@ public List<TaskExecTO> listExecutions(@PathVariable(\"kind\") final String kind)\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/jobClasses\")\n     public ModelAndView getJobClasses() {\n-        CachingMetadataReaderFactory cachingMetadataReaderFactory = new CachingMetadataReaderFactory();\n-\n-        Set<String> jobClasses = new HashSet<String>();\n-        try {\n-            for (Resource resource : resResolver.getResources(\"classpath*:**/*.class\")) {\n-\n-                ClassMetadata metadata = cachingMetadataReaderFactory.getMetadataReader(resource).getClassMetadata();\n-\n-                try {\n-                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.forName(metadata.\n-                            getClassName(), ClassUtils.getDefaultClassLoader()));\n-\n-                    if ((interfaces.contains(Job.class) || interfaces.contains(StatefulJob.class))\n-                            && !metadata.isAbstract() && !SyncJob.class.getName().equals(metadata.getClassName())\n-                            && !ReportJob.class.getName().equals(metadata.getClassName())\n-                            && !NotificationJob.class.getName().equals(metadata.getClassName())) {\n-\n-                        jobClasses.add(metadata.getClassName());\n-                    }\n-                } catch (ClassNotFoundException e) {\n-                    LOG.error(\"Could not load class {}\", metadata.getClassName(), e);\n-                }\n-            }\n-        } catch (IOException e) {\n-            LOG.error(\"While searching for class implementing {}\", Job.class.getName(), e);\n-        }\n+        Set<String> jobClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.JOB);\n \n         auditManager.audit(Category.task, TaskSubCategory.getJobClasses, Result.success,\n                 \"Successfully listed all Job classes: \" + jobClasses.size());\n@@ -288,27 +251,7 @@ public ModelAndView getJobClasses() {\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/jobActionsClasses\")\n     public ModelAndView getJobActionClasses() {\n-        CachingMetadataReaderFactory cachingMetadataReaderFactory = new CachingMetadataReaderFactory();\n-\n-        Set<String> jobActionsClasses = new HashSet<String>();\n-        try {\n-            for (Resource resource : resResolver.getResources(\"classpath*:**/*.class\")) {\n-                ClassMetadata metadata = cachingMetadataReaderFactory.getMetadataReader(resource).getClassMetadata();\n-\n-                try {\n-                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.forName(metadata.\n-                            getClassName(), ClassUtils.getDefaultClassLoader()));\n-\n-                    if (interfaces.contains(SyncJobActions.class) && !metadata.isAbstract()) {\n-                        jobActionsClasses.add(metadata.getClassName());\n-                    }\n-                } catch (ClassNotFoundException e) {\n-                    LOG.error(\"Could not load class {}\", metadata.getClassName(), e);\n-                }\n-            }\n-        } catch (IOException e) {\n-            LOG.error(\"While searching for class implementing {}\", SyncJobActions.class.getName(), e);\n-        }\n+        Set<String> jobActionsClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.JOB_ACTIONS);\n \n         auditManager.audit(Category.task, TaskSubCategory.getJobActionClasses, Result.success,\n                 \"Successfully listed all SyncJobActions classes: \" + jobActionsClasses.size());"},{"sha":"a8e40d450dae3a0b761787777556e0f3071cbf1f","filename":"core/src/main/java/org/syncope/core/rest/data/ReportDataBinder.java","status":"modified","additions":13,"deletions":27,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7b740e6a11342839c54ed59ad9c50b87b8082d11/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java?ref=7b740e6a11342839c54ed59ad9c50b87b8082d11","patch":"@@ -18,7 +18,6 @@\n  */\n package org.syncope.core.rest.data;\n \n-import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n import org.quartz.Scheduler;\n@@ -28,16 +27,13 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.io.Resource;\n-import org.springframework.core.io.support.ResourcePatternResolver;\n-import org.springframework.core.type.ClassMetadata;\n-import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.stereotype.Component;\n import org.springframework.util.ClassUtils;\n import org.syncope.client.report.ReportletConf;\n import org.syncope.client.to.ReportExecTO;\n import org.syncope.client.to.ReportTO;\n+import org.syncope.core.init.ImplementationClassNamesLoader;\n import org.syncope.core.init.JobInstanceLoader;\n import org.syncope.core.persistence.beans.Report;\n import org.syncope.core.persistence.beans.ReportExec;\n@@ -53,9 +49,9 @@ public class ReportDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n \n-    private static final String[] IGNORE_REPORT_PROPERTIES = { \"id\", \"reportlets\", \"executions\", \"latestExecStatus\" };\n+    private static final String[] IGNORE_REPORT_PROPERTIES = {\"id\", \"reportlets\", \"executions\", \"latestExecStatus\"};\n \n-    private static final String[] IGNORE_REPORT_EXECUTION_PROPERTIES = { \"id\", \"report\", \"execResult\" };\n+    private static final String[] IGNORE_REPORT_EXECUTION_PROPERTIES = {\"id\", \"report\", \"execResult\"};\n \n     @Autowired\n     private ReportExecDAO reportExecDAO;\n@@ -64,31 +60,21 @@ public class ReportDataBinder {\n     private SchedulerFactoryBean scheduler;\n \n     @Autowired\n-    private ResourcePatternResolver resResolver;\n+    private ImplementationClassNamesLoader classNamesLoader;\n \n     public Set<Class<Reportlet>> getAllReportletClasses() {\n-        CachingMetadataReaderFactory cachingMetadataReaderFactory = new CachingMetadataReaderFactory();\n-\n         Set<Class<Reportlet>> reportletClasses = new HashSet<Class<Reportlet>>();\n-        try {\n-            for (Resource resource : resResolver.getResources(\"classpath*:**/*.class\")) {\n-                ClassMetadata metadata = cachingMetadataReaderFactory.getMetadataReader(resource).getClassMetadata();\n-\n-                try {\n-                    Class reportletClass = ClassUtils.forName(metadata.getClassName(), ClassUtils\n-                            .getDefaultClassLoader());\n-                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(reportletClass);\n-                    if (interfaces.contains(Reportlet.class) && !metadata.isAbstract()) {\n-                        reportletClasses.add(reportletClass);\n-                    }\n-                } catch (ClassNotFoundException e) {\n-                    LOG.error(\"Could not load class {}\", metadata.getClassName(), e);\n-                }\n+\n+        for (String className : classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET)) {\n+            try {\n+                Class reportletClass = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader());\n+                reportletClasses.add(reportletClass);\n+            } catch (ClassNotFoundException e) {\n+                LOG.warn(\"Could not load class {}\", className);\n+            } catch (LinkageError e) {\n+                LOG.warn(\"Could not link class {}\", className);\n             }\n-        } catch (IOException e) {\n-            LOG.error(\"While searching for class implementing {}\", Reportlet.class.getName(), e);\n         }\n-\n         return reportletClasses;\n     }\n "}]}