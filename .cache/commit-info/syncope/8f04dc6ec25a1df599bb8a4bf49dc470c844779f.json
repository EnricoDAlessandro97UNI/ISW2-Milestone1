{"sha":"8f04dc6ec25a1df599bb8a4bf49dc470c844779f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhmMDRkYzZlYzI1YTFkZjU5OWJiOGE0YmY0OWRjNDcwYzg0NDc3OWY=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-02T11:45:36Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-02T11:45:36Z"},"message":"[SYNCOPE-259]\nApplied patch from Christian and added User Search Methods & Tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1427749 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ed6c8595e65c476ba9545c5d32025cb6cf07da9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9ed6c8595e65c476ba9545c5d32025cb6cf07da9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8f04dc6ec25a1df599bb8a4bf49dc470c844779f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8f04dc6ec25a1df599bb8a4bf49dc470c844779f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8f04dc6ec25a1df599bb8a4bf49dc470c844779f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/comments","author":null,"committer":null,"parents":[{"sha":"cd4f7617245d54def63fdc9e3240d1ced27250fd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cd4f7617245d54def63fdc9e3240d1ced27250fd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cd4f7617245d54def63fdc9e3240d1ced27250fd"}],"stats":{"total":728,"additions":542,"deletions":186},"files":[{"sha":"7a81dc4eaa4f0f573be1015f09922f6184d762cc","filename":"client/pom.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=8f04dc6ec25a1df599bb8a4bf49dc470c844779f","patch":"@@ -43,7 +43,10 @@ under the License.\n   </distributionManagement>\n   \n   <dependencies>\n-\n+  \t<dependency>\n+\t\t<groupId>javax.ws.rs</groupId>\n+    \t<artifactId>javax.ws.rs-api</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>commons-lang</groupId>\n       <artifactId>commons-lang</artifactId>\n@@ -101,7 +104,8 @@ under the License.\n               org.codehaus.jackson.annotate;version=\"[1.9,2)\",\n               org.springframework*;version=\"[3,4)\",\n               ch.qos.logback.classic;resolution:=optional,\n-              org.slf4j;resolution:=optional\n+              org.slf4j;resolution:=optional,\n+              *\n             </Import-Package>\n           </instructions>\n         </configuration>"},{"sha":"f5e0c7fac39b71919abbd3ff0a771685658350be","filename":"client/src/main/java/org/apache/syncope/services/UserService.java","status":"added","additions":188,"deletions":0,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java?ref=8f04dc6ec25a1df599bb8a4bf49dc470c844779f","patch":"@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.services;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+import org.apache.syncope.client.mod.StatusMod;\n+import org.apache.syncope.client.mod.UserMod;\n+import org.apache.syncope.client.search.NodeCond;\n+import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.client.to.WorkflowFormTO;\n+\n+@Path(\"/user\")\n+public interface UserService {\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n+\t */\n+\t@Deprecated\n+\tUserTO activate(long userId, String token);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus()}\n+\t */\n+\t@Deprecated\n+\tUserTO activateByUsername(String username, String token);\n+\n+\t/**\n+\t * @deprecated This method needs to be moved to a new workflow service.\n+\t */\n+\t@Deprecated\n+\t@POST\n+\t@Path(\"/workflow/task/{taskId}/claim\")\n+\tWorkflowFormTO claimForm(@PathParam(\"taskId\") final String taskId);\n+\n+\t@GET\n+\t@Path(\"/count\")\n+\tint count();\n+\n+\t@POST\n+\t@Path(\"/\")\n+\tUserTO create(final UserTO userTO);\n+\n+\t@DELETE\n+\t@Path(\"/{userId}\")\n+\tUserTO delete(@PathParam(\"userId\") final Long userId);\n+\n+\t/**\n+\t * @deprecated This method needs to be moved to a new workflow service.\n+\t */\n+\t@Deprecated\n+\t@POST\n+\tUserTO executeWorkflow(@PathParam(\"taskId\") final String taskId,\n+\t\t\tfinal UserTO userTO);\n+\n+\t/**\n+\t * @deprecated This method needs to be moved to a new workflow service.\n+\t */\n+\t@Deprecated\n+\t@GET\n+\t@Path(\"/{userId}/workflow/form\")\n+\tWorkflowFormTO getFormForUser(@PathParam(\"userId\") final Long userId);\n+\n+\t/**\n+\t * @deprecated This method needs to be moved to a new workflow service.\n+\t */\n+\t@Deprecated\n+\t@GET\n+\t@Path(\"/workflow/form\")\n+\tList<WorkflowFormTO> getForms();\n+\n+\t@GET\n+\tList<UserTO> list();\n+\n+\t@GET\n+\tList<UserTO> list(@QueryParam(\"page\") final int page,\n+\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n+\t */\n+\t@Deprecated\n+\tUserTO reactivate(long userId);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n+\t */\n+\t@Deprecated\n+\tUserTO reactivate(long userId, String query);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n+\t */\n+\t@Deprecated\n+\tUserTO reactivateByUsername(String username);\n+\n+\t@GET\n+\t@Path(\"/{userId}\")\n+\tUserTO read(@PathParam(\"userId\") final Long userId);\n+\n+\t@GET\n+\tUserTO read(@MatrixParam(\"uname\") final String username);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, use {@link #read(Long)} or\n+\t *             {@link #read(String)} instead.\n+\t */\n+\t@Deprecated\n+\tUserTO readSelf();\n+\n+\t@POST\n+\t@Path(\"search\")\n+\tList<UserTO> search(final NodeCond searchCondition);\n+\n+\t@POST\n+\t@Path(\"search\")\n+\tList<UserTO> search(final NodeCond searchCondition,\n+\t\t\t@QueryParam(\"page\") final int page,\n+\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n+\n+\t@POST\n+\t@Path(\"/count\")\n+\tint searchCount(final NodeCond searchCondition);\n+\n+//\t@POST\n+//\t@Path(\"/user/{userId}/status\")\n+//\tpublic abstract UserTO setStatus(@PathParam(\"userId\") final Long userId,\n+//\t\t\tfinal StatusMod statusUpdate);\n+\n+\t/**\n+\t * @deprecated This method needs to be moved to a new workflow service.\n+\t */\n+\t@Deprecated\n+\t@POST\n+\t@Path(\"/workflow/form\")\n+\tUserTO submitForm(final WorkflowFormTO form);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n+\t */\n+\t@Deprecated\n+\tUserTO suspend(long userId);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n+\t */\n+\t@Deprecated\n+\tUserTO suspend(long userId, String query);\n+\n+\t/**\n+\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n+\t */\n+\t@Deprecated\n+\tUserTO suspendByUsername(String username);\n+\n+\t@POST\n+\t@Path(\"/{userId}\")\n+\tUserTO update(@PathParam(\"userId\") final Long userId, final UserMod userMod);\n+\n+\t@GET\n+\tBoolean verifyPassword(@MatrixParam(\"uname\") String username,\n+\t\t\t@MatrixParam(\"pwd\") final String password);\n+}\n\\ No newline at end of file"},{"sha":"5d9d314644e22301d4e6e7841d2a68a4ee487d75","filename":"client/src/main/java/org/apache/syncope/services/UserServiceProxy.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java?ref=8f04dc6ec25a1df599bb8a4bf49dc470c844779f","patch":"@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.services;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+import org.apache.syncope.client.mod.UserMod;\n+import org.apache.syncope.client.search.NodeCond;\n+import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.client.to.WorkflowFormTO;\n+import org.springframework.web.client.RestTemplate;\n+\n+public class UserServiceProxy implements UserService {\n+\tRestTemplate restTemplate;\n+\tprivate String baseUrl;\n+\n+\tpublic UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n+\t\tthis.baseUrl = baseUrl;\n+\t\tthis.restTemplate = restTemplate;\n+\t}\n+\n+\t@Override\n+\tpublic Boolean verifyPassword(@MatrixParam(\"uname\") String username,\n+\t\t\t@MatrixParam(\"pwd\") String password) {\n+\t\treturn restTemplate.\n+                getForObject(baseUrl + \"user/verifyPassword/{username}.json?password={password}\",\n+                Boolean.class, username, password);\n+\t}\n+\n+\t@Override\n+\tpublic int count() {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/count.json\", Integer.class);\n+\t}\n+\n+\t@Override\n+\tpublic List<UserTO> list() {\n+\t\treturn  Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list.json\", UserTO[].class));\n+\t}\n+\n+\t@Override\n+\tpublic List<UserTO> list(@QueryParam(\"page\") int page,\n+\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") int size) {\n+\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n+                UserTO[].class, page, size));\n+\t}\n+\n+\t@Override\n+\tpublic UserTO read(@PathParam(\"userId\") Long userId) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO read(@MatrixParam(\"uname\") String username) {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\t@POST\n+\t@Path(\"/\")\n+\tpublic UserTO create(UserTO userTO) {\n+\t\treturn restTemplate.postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO update(@PathParam(\"userId\") Long userId, UserMod userMod) {\n+\t\treturn restTemplate.postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO delete(@PathParam(\"userId\") Long userId) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO executeWorkflow(@PathParam(\"taskId\") String taskId, UserTO userTO) {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\t@GET\n+\t@Path(\"/workflow/form\")\n+\tpublic List<WorkflowFormTO> getForms() {\n+\t\treturn  Arrays.asList(restTemplate.getForObject(baseUrl + \"user/workflow/form/list\", WorkflowFormTO[].class));\n+\t}\n+\n+\t@Override\n+\tpublic WorkflowFormTO getFormForUser(@PathParam(\"userId\") Long userId) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class, userId);\n+\t}\n+\n+\t@Override\n+\tpublic WorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, taskId);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO submitForm(WorkflowFormTO form) {\n+\t\treturn restTemplate.postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO activate(long userId, String token) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class, userId);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO activateByUsername(String username, String token) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n+                UserTO.class, username);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO suspend(long userId) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO reactivate(long userId) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n+\t}\n+\t\n+\t@Override\n+\tpublic UserTO reactivate(long userId, String query) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/reactivate/\" + userId + query, UserTO.class);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO suspendByUsername(String username) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/suspendByUsername/{username}.json\", UserTO.class, username);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO reactivateByUsername(String username) {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\", UserTO.class, username);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO suspend(long userId, String query) {\n+\t\treturn  restTemplate.getForObject(baseUrl + \"user/suspend/\" + userId + query, UserTO.class);\n+\t}\n+\n+\t@Override\n+\tpublic UserTO readSelf() {\n+\t\treturn restTemplate.getForObject(baseUrl + \"user/read/self\", UserTO.class);\n+\t}\n+\n+\t@Override\n+\tpublic List<UserTO> search(NodeCond searchCondition) {\n+\t\treturn Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search\", searchCondition,\n+                UserTO[].class));\n+\t}\n+\n+\t@Override\n+\tpublic List<UserTO> search(NodeCond searchCondition, int page, int size) {\n+\t\treturn Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search/{page}/{size}\",\n+                searchCondition, UserTO[].class, page, size));\n+\t}\n+\n+\t@Override\n+\tpublic int searchCount(NodeCond searchCondition) {\n+\t\treturn restTemplate.postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n+\t}\n+\n+}"},{"sha":"a082e199382b304f531d74ef379a60678caf9472","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=8f04dc6ec25a1df599bb8a4bf49dc470c844779f","patch":"@@ -24,6 +24,8 @@\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n+import org.apache.syncope.services.UserService;\n+import org.apache.syncope.services.UserServiceProxy;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n@@ -65,6 +67,8 @@ protected static AttributeMod attributeMod(final String schema, final String val\n     @Autowired\n     protected RestTemplate restTemplate;\n \n+\tprotected UserService userService;\n+    \n     @Autowired\n     protected DataSource testDataSource;\n \n@@ -83,5 +87,6 @@ public void setupRestTemplate(final String uid, final String pwd) {\n     @Before\n     public void resetRestTemplate() {\n         setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n+        userService = new UserServiceProxy(BASE_URL, restTemplate);\n     }\n }"},{"sha":"46acbc7e2747792adaa143bdfca75a89281afcae","filename":"core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=8f04dc6ec25a1df599bb8a4bf49dc470c844779f","patch":"@@ -54,8 +54,8 @@ public void searchUser() {\n \n         assertTrue(searchCondition.isValid());\n \n-        List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n-                UserTO[].class));\n+        List<UserTO> matchedUsers = userService.search(searchCondition);\n+        \n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n         for (UserTO user : matchedUsers) {\n@@ -67,8 +67,7 @@ public void searchUser() {\n         isNullCond.setSchema(\"loginDate\");\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n-        matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n-                UserTO[].class));\n+        matchedUsers = userService.search(searchCondition);\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n \n@@ -95,8 +94,7 @@ public void searchByUsernameAndId() {\n \n         assertTrue(searchCondition.isValid());\n \n-        final List<UserTO> matchingUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\",\n-                searchCondition, UserTO[].class));\n+        final List<UserTO> matchingUsers = userService.search(searchCondition);\n \n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.size());\n@@ -140,8 +138,7 @@ public void searchUserByResourceName() {\n \n         assertTrue(searchCondition.isValid());\n \n-        List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n-                UserTO[].class));\n+        List<UserTO> matchedUsers = userService.search(searchCondition);\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n \n@@ -170,8 +167,7 @@ public void paginatedSearch() {\n \n         assertTrue(searchCondition.isValid());\n \n-        List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search/{page}/{size}\",\n-                searchCondition, UserTO[].class, 1, 2));\n+        List<UserTO> matchedUsers = userService.search(searchCondition, 1, 2);\n         assertNotNull(matchedUsers);\n \n         assertFalse(matchedUsers.isEmpty());\n@@ -184,8 +180,7 @@ public void paginatedSearch() {\n         isNullCond.setSchema(\"loginDate\");\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n-        matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search/{page}/{size}\",\n-                searchCondition, UserTO[].class, 1, 2));\n+        matchedUsers = userService.search(searchCondition, 1, 2);\n \n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n@@ -202,7 +197,7 @@ public void searchCount() {\n         isNullCond.setSchema(\"loginDate\");\n         NodeCond searchCond = NodeCond.getLeafCond(isNullCond);\n \n-        Integer count = restTemplate.postForObject(BASE_URL + \"user/search/count.json\", searchCond, Integer.class);\n+        Integer count = userService.searchCount(searchCond);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }"},{"sha":"45e63591888c9d4222a5226ecef9927c70f703bd","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":141,"deletions":171,"changes":312,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=8f04dc6ec25a1df599bb8a4bf49dc470c844779f","patch":"@@ -18,7 +18,12 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n@@ -27,6 +32,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n@@ -67,7 +73,7 @@\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UserTestITCase extends AbstractTest {\n-\n+\t\n     public static UserTO getSampleTO(final String email) {\n         UserTO userTO = new UserTO();\n         userTO.setPassword(\"password123\");\n@@ -94,13 +100,13 @@ public void selfRead() {\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n \n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n+        \tuserService.read(1l);\n             fail();\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n         }\n \n-        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read/self\", UserTO.class);\n+        UserTO userTO = userService.readSelf();\n         assertEquals(\"user1\", userTO.getUsername());\n     }\n \n@@ -133,7 +139,7 @@ public void createUserWithNoPropagation() {\n         userTO.setPassword(\"password123\");\n         userTO.addResource(\"ws-target-resource-nopropagation\");\n \n-        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userService.create(userTO);\n \n         // get the new task list\n         tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n@@ -181,7 +187,7 @@ public void issue172() {\n         userTO.addAttribute(attributeTO(\"userId\", \"issue172@syncope.apache.org\"));\n         userTO.addAttribute(attributeTO(\"fullname\", \"issue172\"));\n \n-        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userService.create(userTO);\n \n         policyTO = restTemplate.postForObject(BASE_URL + \"policy/password/create\", policyTO, PasswordPolicyTO.class);\n \n@@ -199,7 +205,7 @@ public void issue186() {\n         userTO.addAttribute(attributeTO(\"fullname\", \"issue186\"));\n         userTO.addAttribute(attributeTO(\"surname\", \"issue186\"));\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -212,7 +218,7 @@ public void issue186() {\n \n         SyncopeClientException sce = null;\n         try {\n-            userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        \tuserTO = userService.update(userMod.getId(), userMod);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n@@ -227,7 +233,7 @@ public void issue186() {\n \n         sce = null;\n         try {\n-            userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+            userTO = userService.update(userMod.getId(), userMod);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.Propagation);\n         }\n@@ -242,7 +248,7 @@ public void issue186() {\n \n         sce = null;\n         try {\n-            userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        \tuserTO = userService.update(userMod.getId(), userMod);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.Propagation);\n         }\n@@ -266,15 +272,14 @@ public void testEnforceMandatoryCondition() {\n \n         SyncopeClientException sce = null;\n         try {\n-            userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+            userTO = userService.create(userTO);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n         assertNotNull(sce);\n \n         userTO.addAttribute(type);\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n     }\n \n@@ -294,15 +299,15 @@ public void testEnforceMandatoryConditionOnDerived() {\n \n         SyncopeClientException sce = null;\n         try {\n-            userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        \tuserTO = userService.create(userTO);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n         assertNotNull(sce);\n \n         userTO.addDerivedAttribute(attributeTO(\"csvuserid\", null));\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertEquals(Collections.singleton(\"resource-csv-enforcing\"), userTO.getResources());\n     }\n@@ -312,7 +317,7 @@ public void issue147() {\n         // 1. create an user without role nor resources\n         UserTO userTO = getSampleTO(\"issue147@tirasa.net\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -323,15 +328,15 @@ public void issue147() {\n \n         SyncopeClientException sce = null;\n         try {\n-            userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+            userTO = userService.update(userMod.getId(), userMod);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n         assertNotNull(sce);\n \n         // 3. provide password: now update must work\n         userMod.setPassword(\"newPassword\");\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getResources().size());\n     }\n@@ -346,7 +351,7 @@ public void createUserWithDbPropagation() {\n         userTO.addAttribute(attributeTO(\"userId\", \"yyy@yyy.yyy\"));\n         userTO.addAttribute(attributeTO(\"fullname\", \"yyy\"));\n         userTO.addResource(\"resource-testdb\");\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getPropagationTOs().size());\n         assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n@@ -356,8 +361,7 @@ public void createUserWithDbPropagation() {\n     public void createWithInvalidPassword() {\n         UserTO userTO = getSampleTO(\"invalidpasswd@syncope.apache.org\");\n         userTO.setPassword(\"pass\");\n-\n-        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userService.create(userTO);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -369,8 +373,8 @@ public void createWithInvalidUsername() {\n         membershipTO.setRoleId(7L);\n \n         userTO.addMembership(membershipTO);\n-\n-        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        \n+        userService.create(userTO);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -382,7 +386,7 @@ public void createWithInvalidPasswordByRes() {\n \n         userTO.setResources(Collections.singleton(\"ws-target-resource-nopropagation\"));\n \n-        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userService.create(userTO);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -397,14 +401,14 @@ public void createWithInvalidPasswordByRole() {\n \n         userTO.addMembership(membership);\n \n-        restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userService.create(userTO);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n     public void createWithException() {\n         UserTO newUserTO = new UserTO();\n         newUserTO.addAttribute(attributeTO(\"userId\", \"userId@nowhere.org\"));\n-        restTemplate.postForObject(BASE_URL + \"user/create\", newUserTO, UserTO.class);\n+        userService.create(newUserTO);\n     }\n \n     @Test\n@@ -447,7 +451,7 @@ public void create() {\n         userTO.addAttribute(attributeTO(\"activationDate\", null));\n \n         // 1. create user\n-        UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO newUserTO = userService.create(userTO);\n \n         assertNotNull(newUserTO);\n         assertFalse(newUserTO.getAttributes().contains(attrWithInvalidSchemaTO));\n@@ -456,7 +460,7 @@ public void create() {\n         assertNotNull(newUserTO.getCreationDate());\n \n         // 2. check for virtual attribute value\n-        newUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, newUserTO.getId());\n+        newUserTO = userService.read(newUserTO.getId()); \n         assertNotNull(newUserTO);\n \n         assertNotNull(newUserTO.getVirtualAttributeMap());\n@@ -490,13 +494,10 @@ public void create() {\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n-        Boolean verify = restTemplate.\n-                getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=password123\",\n-                Boolean.class, newUserTO.getUsername());\n+        Boolean verify =userService.verifyPassword(newUserTO.getUsername(), \"password123\");\n         assertTrue(verify);\n \n-        verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=passwordXX\",\n-                Boolean.class, newUserTO.getUsername());\n+        verify = userService.verifyPassword(newUserTO.getUsername(), \"passwordXX\");\n         assertFalse(verify);\n \n         // 4. try (and fail) to create another user with same (unique) values\n@@ -510,7 +511,7 @@ public void create() {\n \n         SyncopeClientException sce = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+            userService.create(userTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n             sce = e.getException(SyncopeClientExceptionType.DataIntegrityViolation);\n         }\n@@ -538,7 +539,7 @@ public void createWithRequiredValueMissing() {\n         SyncopeClientCompositeErrorException ex = null;\n         try {\n             // 1. create user without type (mandatory by UserSchema)\n-            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+            userService.create(userTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n             ex = e;\n         }\n@@ -558,7 +559,7 @@ public void createWithRequiredValueMissing() {\n         // 2. create user without surname (mandatory when type == 'F')\n         ex = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+            userService.create(userTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n             ex = e;\n         }\n@@ -578,15 +579,15 @@ public void createWithReject() {\n         userTO.addMembership(membershipTO);\n \n         // 1. create user with role 9\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n         // 2. request if there is any pending task for user just created\n-        WorkflowFormTO form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n-                userTO.getId());\n+        WorkflowFormTO form = userService.getFormForUser(userTO.getId());\n+        \n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n@@ -599,8 +600,7 @@ public void createWithReject() {\n \n         SyncopeClientException sce = null;\n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.\n-                    getTaskId());\n+        \tuserService.claimForm(form.getTaskId());\n         } catch (SyncopeClientCompositeErrorException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.Workflow);\n         }\n@@ -610,8 +610,7 @@ public void createWithReject() {\n         ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user4\", \"password\"));\n \n-        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class,\n-                form.getTaskId());\n+        form = userService.claimForm(form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n@@ -621,7 +620,7 @@ public void createWithReject() {\n         props.get(\"approve\").setValue(Boolean.FALSE.toString());\n         props.get(\"rejectReason\").setValue(\"I don't like him.\");\n         form.setProperties(props.values());\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n+        userTO = userService.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(\"rejected\", userTO.getStatus());\n \n@@ -644,7 +643,7 @@ public void createWithApproval() {\n         userTO.addMembership(membershipTO);\n \n         // 1. create user with role 9 (and verify that no propagation occurred)\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertEquals(9, userTO.getMemberships().get(0).getRoleId());\n@@ -662,20 +661,17 @@ public void createWithApproval() {\n         assertNotNull(exception);\n \n         // 2. request if there is any pending form for user just created\n-        List<WorkflowFormTO> forms = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"user/workflow/form/list\", WorkflowFormTO[].class));\n+        List<WorkflowFormTO> forms = userService.getForms();\n         assertNotNull(forms);\n         assertEquals(1, forms.size());\n \n-        WorkflowFormTO form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n-                userTO.getId());\n+        WorkflowFormTO form = userService.getFormForUser(userTO.getId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n         // 4. claim task (from admin)\n-        form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, form.\n-                getTaskId());\n+        form = userService.claimForm(form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n@@ -684,7 +680,7 @@ public void createWithApproval() {\n         Map<String, WorkflowFormPropertyTO> props = form.getPropertyMap();\n         props.get(\"approve\").setValue(Boolean.TRUE.toString());\n         form.setProperties(props.values());\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n+        userTO = userService.submitForm(form);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n         assertEquals(Collections.singleton(\"resource-testdb\"), userTO.getResources());\n@@ -704,14 +700,14 @@ public void createWithApproval() {\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"anotherPassword123\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n     }\n \n     @Test\n     public void delete() {\n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, 0);\n+        \tuserService.delete(0l);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -721,11 +717,11 @@ public void delete() {\n         // specify a propagation\n         userTO.addResource(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         long id = userTO.getId();\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, id);\n+        userTO = userService.delete(id);\n \n         assertNotNull(userTO);\n         assertEquals(id, userTO.getId());\n@@ -736,7 +732,7 @@ public void delete() {\n         assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n \n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+            userService.delete(userTO.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -749,12 +745,11 @@ public void deleteByUsername() {\n         // specify a propagation\n         userTO.addResource(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         long id = userTO.getId();\n-        userTO =\n-                restTemplate.getForObject(BASE_URL + \"user/deleteByUsername/{username}.json\", UserTO.class, userTO.\n-                getUsername());\n+        userTO = userService.read(id);\n+        userTO = userService.delete(userTO.getId());\n \n         assertNotNull(userTO);\n         assertEquals(id, userTO.getId());\n@@ -765,22 +760,22 @@ public void deleteByUsername() {\n         assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n \n         try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+        \tuserService.read(userTO.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n     @Test\n     public void count() {\n-        Integer count = restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n+        Integer count = userService.count();\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n     public void list() {\n-        List<UserTO> users = Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list.json\", UserTO[].class));\n+        List<UserTO> users = userService.list();\n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n         for (UserTO user : users) {\n@@ -790,8 +785,7 @@ public void list() {\n \n     @Test\n     public void paginatedList() {\n-        List<UserTO> users = Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\",\n-                UserTO[].class, 1, 2));\n+        List<UserTO> users = userService.list(1, 2);\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n@@ -801,23 +795,21 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = Arrays.\n-                asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n+        users = userService.list(2, 2);\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n         assertEquals(2, users.size());\n \n-        users = Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 100,\n-                2));\n+        users = userService.list(100, 2);\n \n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n \n     @Test\n     public void read() {\n-        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n+        UserTO userTO = userService.read(1l);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getAttributes());\n@@ -828,15 +820,15 @@ public void read() {\n     public void updateWithouPassword() {\n         UserTO userTO = getSampleTO(\"updatewithout@password.com\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.addDerivedAttributeToBeRemoved(\"cn\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerivedAttributeMap());\n@@ -847,28 +839,28 @@ public void updateWithouPassword() {\n     public void updateInvalidPassword() {\n         UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"pass\");\n \n-        restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n     public void updateSamePassword() {\n         UserTO userTO = getSampleTO(\"updatesame@password.com\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"password123\");\n \n-        restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n     }\n \n     @Test\n@@ -880,7 +872,7 @@ public void update() {\n         membershipTO.addAttribute(attributeTO(\"subscriptionDate\", \"2009-08-18T16:33:12.203+0200\"));\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         assertFalse(userTO.getDerivedAttributes().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -903,7 +895,7 @@ public void update() {\n         userMod.addMembershipToBeAdded(membershipMod);\n         userMod.addMembershipToBeRemoved(userTO.getMemberships().iterator().next().getId());\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n@@ -944,13 +936,13 @@ public void updatePasswordOnly() {\n         membershipTO.addAttribute(attributeTO(\"subscriptionDate\", \"2009-08-18T16:33:12.203+0200\"));\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword123\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n \n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n@@ -996,7 +988,7 @@ public void verifyTaskRegistration() {\n         userTO.addMembership(membershipTO);\n \n         // 1. create user\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         // get the new task list\n@@ -1026,7 +1018,7 @@ public void verifyTaskRegistration() {\n \n         userMod.addAttributeToBeUpdated(attributeMod(\"surname\", \"surname\"));\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n \n         assertNotNull(userTO);\n \n@@ -1055,7 +1047,7 @@ public void verifyTaskRegistration() {\n         // --------------------------------------\n         // Delete operation\n         // --------------------------------------\n-        restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userTO.getId());\n+        userService.delete(userTO.getId());\n \n         // get the new task list\n         tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n@@ -1084,16 +1076,15 @@ public void createActivate() {\n         membershipTO.setRoleId(11L);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getToken());\n         assertNotNull(userTO.getTokenExpireTime());\n \n         assertEquals(\"created\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/activate/{userId}?token=\" + userTO.getToken(), UserTO.class, userTO.getId());\n+\t\tuserTO = userService.activate(userTO.getId(), userTO.getToken());\n \n         assertNotNull(userTO);\n         assertNull(userTO.getToken());\n@@ -1112,17 +1103,16 @@ public void createActivateByUsername() {\n         membershipTO.setRoleId(11L);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getToken());\n         assertNotNull(userTO.getTokenExpireTime());\n \n         assertEquals(\"created\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/activateByUsername/{username}.json?token=\" + userTO.getToken(),\n-                UserTO.class, userTO.getUsername());\n+        userTO = userService.activateByUsername(userTO.getUsername(), userTO.getToken());\n+        \n \n         assertNotNull(userTO);\n         assertNull(userTO.getToken());\n@@ -1139,17 +1129,17 @@ public void suspendReactivate() {\n         membershipTO.setRoleId(7L);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n         assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userTO.getId(), UserTO.class);\n+        userTO = userService.suspend(userTO.getId());\n \n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n+        userTO = userService.reactivate(userTO.getId());\n \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -1163,19 +1153,17 @@ public void suspendReactivateByUsername() {\n         membershipTO.setRoleId(7L);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n         assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/suspendByUsername/{username}.json\", UserTO.class, userTO.getUsername());\n+        userTO = userService.suspendByUsername(userTO.getUsername());\n \n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/reactivateByUsername/{username}.json\", UserTO.class, userTO.getUsername());\n+        userTO = userService.reactivateByUsername(userTO.getUsername());\n \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -1200,56 +1188,51 @@ public void suspendReactivateOnResource() {\n         assertNotNull(ldap);\n         userTO.addResource(ldap.getName());\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n \n         assertNotNull(userTO);\n         assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n         String query = \"?resourceNames=\" + dbTable.getName() + \"&resourceNames=\" + ldap.getName()\n                 + \"&performLocally=true\"; // check also performLocally\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userTO.getId() + query, UserTO.class);\n+        userTO = userService.suspend(userTO.getId(), query);\n \n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         String dbTableUID = userTO.getUsername();\n         assertNotNull(dbTableUID);\n \n-        ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class,\n-                dbTable.getName(), dbTableUID);\n+        ConnObjectTO connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n         assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n                 getValues().\n                 get(0)));\n \n         String ldapUID = userTO.getUsername();\n         assertNotNull(ldapUID);\n \n-        connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/USER/{objectId}.json\",\n-                ConnObjectTO.class, ldap.getName(), ldapUID);\n+        connObjectTO = readUserConnObj(ldap.getName(), ldapUID);\n         assertNotNull(connObjectTO);\n \n         query = \"?resourceNames=\" + ldap.getName() + \"&performLocally=false\"; // check also performLocally\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId() + query, UserTO.class);\n+        userTO = userService.reactivate(userTO.getId(), query);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/USER/{objectId}.json\",\n-                ConnObjectTO.class, dbTable.getName(), dbTableUID);\n+        connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n         assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n                 getValues().\n                 get(0)));\n \n         query = \"?resourceNames=\" + dbTable.getName() + \"&performLocally=true\"; // check also performLocally\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId() + query, UserTO.class);\n+        userTO = userService.reactivate(userTO.getId(), query);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/USER/{objectId}.json\",\n-                ConnObjectTO.class, dbTable.getName(), dbTableUID);\n+        connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n         assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n                 getValues().\n                 get(0)));\n@@ -1261,7 +1244,7 @@ public void updateMultivalueAttribute() {\n         userTO.getDerivedAttributes().clear();\n         userTO.getVirtualAttributes().clear();\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         AttributeTO loginDate = userTO.getAttributeMap().get(\"loginDate\");\n@@ -1276,7 +1259,7 @@ public void updateMultivalueAttribute() {\n         userMod.setId(userTO.getId());\n         userMod.addAttributeToBeUpdated(loginDateMod);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n \n         loginDate = userTO.getAttributeMap().get(\"loginDate\");\n@@ -1289,7 +1272,7 @@ public void issue213() {\n         UserTO userTO = getSampleTO(\"issue213@syncope.apache.org\");\n         userTO.addResource(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getResources().size());\n \n@@ -1305,7 +1288,7 @@ public void issue213() {\n         userMod.setId(userTO.getId());\n         userMod.addResourceToBeRemoved(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n \n         assertTrue(userTO.getResources().isEmpty());\n \n@@ -1317,15 +1300,15 @@ public void issue234() {\n         UserTO userTO = getSampleTO(\"issue234@syncope.apache.org\");\n         userTO.addResource(\"resource-ldap\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n \n         userMod.setId(userTO.getId());\n         userMod.setUsername(\"1\" + userTO.getUsername());\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n \n         assertNotNull(userTO);\n \n@@ -1339,14 +1322,13 @@ public void issue270() {\n         // be sure to remove all virtual attributes\n         original.setVirtualAttributes(Collections.<AttributeTO>emptyList());\n \n-        original = restTemplate.postForObject(BASE_URL + \"user/create\", original, UserTO.class);\n+        original = userService.create(original);\n \n         assertNotNull(original);\n \n         assertTrue(original.getVirtualAttributes().isEmpty());\n \n-        UserTO toBeUpdated = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, original.\n-                getId());\n+        UserTO toBeUpdated = userService.read(original.getId());\n \n         AttributeTO virtual = attributeTO(\"virtualdata\", \"virtualvalue\");\n         toBeUpdated.addVirtualAttribute(virtual);\n@@ -1356,7 +1338,7 @@ public void issue270() {\n \n         assertNotNull(userMod);\n \n-        toBeUpdated = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        toBeUpdated = userService.update(userMod.getId(), userMod);\n \n         assertNotNull(toBeUpdated);\n \n@@ -1373,15 +1355,15 @@ public final void issue280() {\n         userTO.getMemberships().clear();\n         userTO.getDerivedAttributes().clear();\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"123password\");\n         userMod.addResourceToBeAdded(\"resource-testdb\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n \n         final List<PropagationTO> propagations = userTO.getPropagationTOs();\n@@ -1405,7 +1387,7 @@ public void issue281() {\n         userTO.getDerivedAttributes().clear();\n         userTO.addResource(\"resource-csv\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         final List<PropagationTO> propagations = userTO.getPropagationTOs();\n@@ -1427,7 +1409,7 @@ public void issue288() {\n         userTO.addAttribute(attributeTO(\"aLong\", \"STRING\"));\n \n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+            userService.create(userTO);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidValues));\n@@ -1451,14 +1433,13 @@ public void roleAttrPropagation() {\n \n         userTO.addResource(\"resource-csv\");\n \n-        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO actual = userService.create(userTO);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getDerivedAttributeMap().get(\"csvuserid\"));\n \n-        ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n-                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+        String userId = actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0);\n+\t\tConnObjectTO connObjectTO = readUserConnObj(\"resource-csv\", userId);\n         assertNotNull(connObjectTO);\n         assertEquals(\"sx-dx\", connObjectTO.getAttributeMap().get(\"ROLE\").getValues().get(0));\n     }\n@@ -1481,14 +1462,13 @@ public void membershipAttrPropagation() {\n \n         userTO.addResource(\"resource-csv\");\n \n-        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO actual = userService.create(userTO);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getDerivedAttributeMap().get(\"csvuserid\"));\n \n-        ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n-                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+        String userId = actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0);\n+\t\tConnObjectTO connObjectTO = readUserConnObj(\"resource-csv\", userId);\n         assertNotNull(connObjectTO);\n         assertEquals(\"sx-dx\", connObjectTO.getAttributeMap().get(\"MEMBERSHIP\").getValues().get(0));\n     }\n@@ -1502,11 +1482,11 @@ public void issueSYNCOPE16() {\n         userTO.addMembership(membershipTO);\n \n         // 1. create user\n-        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO actual = userService.create(userTO);\n         assertNotNull(actual);\n \n         // 2. check for virtual attribute value\n-        actual = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, actual.getId());\n+        actual = userService.read(actual.getId());\n         assertNotNull(actual);\n         assertEquals(\"virtualvalue\", actual.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n \n@@ -1516,11 +1496,11 @@ public void issueSYNCOPE16() {\n         userMod.addVirtualAttributeToBeUpdated(attributeMod(\"virtualdata\", \"virtualupdated\"));\n \n         // 3. update virtual attribute\n-        actual = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        actual = userService.update(userMod.getId(), userMod);\n         assertNotNull(actual);\n \n         // 4. check for virtual attribute value\n-        actual = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, actual.getId());\n+        actual = userService.read(actual.getId());\n         assertNotNull(actual);\n         assertEquals(\"virtualupdated\", actual.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n     }\n@@ -1546,15 +1526,14 @@ public void issueSYNCOPE108() {\n \n         userTO.addResource(\"resource-csv\");\n \n-        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO actual = userService.create(userTO);\n \n         assertNotNull(actual);\n         assertEquals(2, actual.getMemberships().size());\n         assertEquals(1, actual.getResources().size());\n \n-        ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n-                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+        String userId = actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0);\n+\t\tConnObjectTO connObjectTO = readUserConnObj(\"resource-csv\", userId);\n         assertNotNull(connObjectTO);\n \n         // -----------------------------------\n@@ -1565,13 +1544,11 @@ public void issueSYNCOPE108() {\n \n         userMod.addMembershipToBeRemoved(actual.getMemberships().get(0).getId());\n \n-        actual = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        actual = userService.update(userMod.getId(), userMod);\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n \n-        connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n-                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+        connObjectTO = readUserConnObj(\"resource-csv\", userId);\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n@@ -1583,14 +1560,12 @@ public void issueSYNCOPE108() {\n \n         userMod.addResourceToBeRemoved(actual.getResources().iterator().next());\n \n-        actual = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        actual = userService.update(userMod.getId(), userMod);\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n         assertFalse(actual.getResources().isEmpty());\n \n-        connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n-                actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+        connObjectTO = readUserConnObj(\"resource-csv\", userId);\n         assertNotNull(connObjectTO);\n         // -----------------------------------\n \n@@ -1602,17 +1577,15 @@ public void issueSYNCOPE108() {\n \n         userMod.addMembershipToBeRemoved(actual.getMemberships().get(0).getId());\n \n-        actual = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        actual = userService.update(userMod.getId(), userMod);\n         assertNotNull(actual);\n         assertTrue(actual.getMemberships().isEmpty());\n         assertTrue(actual.getResources().isEmpty());\n \n         Throwable t = null;\n \n         try {\n-            restTemplate.getForObject(BASE_URL\n-                    + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class, \"resource-csv\",\n-                    actual.getDerivedAttributeMap().get(\"csvuserid\").getValues().get(0));\n+        \treadUserConnObj(\"resource-csv\", userId);\n         } catch (SyncopeClientCompositeErrorException e) {\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n             t = e;\n@@ -1642,15 +1615,11 @@ public void issueSYNCOPE111() {\n \n         userTO.addResource(\"resource-ldap\");\n \n-        UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        UserTO actual = userService.create(userTO);\n         assertNotNull(actual);\n         assertEquals(2, actual.getMemberships().size());\n \n-        ConnObjectTO connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/USER/{objectId}.json\",\n-                ConnObjectTO.class,\n-                \"resource-ldap\",\n-                userTO.getUsername());\n+        ConnObjectTO connObjectTO = readUserConnObj(\"resource-ldap\", userTO.getUsername());\n         assertNotNull(connObjectTO);\n \n         AttributeTO postalAddress = connObjectTO.getAttributeMap().get(\"postalAddress\");\n@@ -1674,15 +1643,11 @@ public void issueSYNCOPE111() {\n \n         userMod.addMembershipToBeRemoved(membershipTO.getId());\n \n-        actual = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        actual = userService.update(userMod.getId(), userMod);\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n \n-        connObjectTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/{resourceName}/read/USER/{objectId}.json\",\n-                ConnObjectTO.class,\n-                \"resource-ldap\",\n-                userTO.getUsername());\n+        connObjectTO = readUserConnObj(\"resource-ldap\", userTO.getUsername());\n         assertNotNull(connObjectTO);\n \n         postalAddress = connObjectTO.getAttributeMap().get(\"postalAddress\");\n@@ -1703,20 +1668,19 @@ public void issueSYNCOPE185() {\n         userTO.getVirtualAttributes().clear();\n         userTO.addResource(\"resource-ldap\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationTOs().isEmpty());\n         assertEquals(\"resource-ldap\", userTO.getPropagationTOs().get(0).getResourceName());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationTOs().get(0).getStatus());\n \n         // 2. delete this user\n-        restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userTO.getId());\n+        userService.delete(userTO.getId());\n \n         // 3. try (and fail) to find this user on the external LDAP resource\n         SyncopeClientException sce = null;\n         try {\n-            restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/USER/{objectId}.json\",\n-                    ConnObjectTO.class, \"resource-ldap\", userTO.getUsername());\n+            readUserConnObj(\"resource-ldap\", userTO.getUsername());\n             fail(\"This entry should not be present on this resource\");\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             sce = sccee.getException(SyncopeClientExceptionType.NotFound);\n@@ -1742,7 +1706,7 @@ public void issueSYNCOPE51() {\n         userTO.setPassword(\"password\");\n \n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+            userService.create(userTO);\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n             assertTrue(\n@@ -1754,4 +1718,10 @@ public void issueSYNCOPE51() {\n \n         assertEquals(defaultConfigurationTO, oldConfTO);\n     }\n+\n+\tprivate ConnObjectTO readUserConnObj(String resourceName, String userId) {\n+\t\treturn restTemplate.getForObject(BASE_URL\n+                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class,\n+                resourceName, userId);\n+\t}\n }"},{"sha":"471739b70dc6e2b9de221257df2817f7ab2822a3","filename":"pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f04dc6ec25a1df599bb8a4bf49dc470c844779f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=8f04dc6ec25a1df599bb8a4bf49dc470c844779f","patch":"@@ -363,6 +363,11 @@ under the License.\n         <version>${commons-jexl.version}</version>\n       </dependency>\n \n+\t  <dependency>\n+\t\t<groupId>javax.ws.rs</groupId>\n+    \t<artifactId>javax.ws.rs-api</artifactId>\n+    \t<version>2.0-m10</version>\n+    </dependency>\n       <dependency>\n         <groupId>commons-lang</groupId>\n         <artifactId>commons-lang</artifactId>"}]}