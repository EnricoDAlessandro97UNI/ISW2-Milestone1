{"sha":"8e484b3ac224dcdbe5fac9217fa7889ed9581707","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhlNDg0YjNhYzIyNGRjZGJlNWZhYzkyMTdmYTc4ODllZDk1ODE3MDc=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2020-03-17T16:52:34Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2020-03-17T17:10:44Z"},"message":"Additional fixes to SYNCOPE-1542 (#167)","tree":{"sha":"c8cd1638974ee350c9e1c59326ba758d2911aad0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c8cd1638974ee350c9e1c59326ba758d2911aad0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8e484b3ac224dcdbe5fac9217fa7889ed9581707","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8e484b3ac224dcdbe5fac9217fa7889ed9581707","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8e484b3ac224dcdbe5fac9217fa7889ed9581707","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8e484b3ac224dcdbe5fac9217fa7889ed9581707/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"736557a0a1137f3678473e866d6171bd8f722c0a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/736557a0a1137f3678473e866d6171bd8f722c0a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/736557a0a1137f3678473e866d6171bd8f722c0a"}],"stats":{"total":141,"additions":140,"deletions":1},"files":[{"sha":"8f1bc6b788e30c97ac792876e816cfc433d83d58","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=8e484b3ac224dcdbe5fac9217fa7889ed9581707","patch":"@@ -418,7 +418,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         }\n \n         AjaxTextFieldPanel property = new AjaxTextFieldPanel(\n-                \"property\", \"property\", new PropertyModel<>(searchClause, \"property\"), false);\n+                \"property\", \"property\", new PropertyModel<>(searchClause, \"property\"), true) ;\n         property.hideLabel().setOutputMarkupId(true).setEnabled(true);\n         property.setChoices(properties.getObject());\n         field.add(property);"},{"sha":"882f77a93fc8257a7b9644ebfc000d7651cbe130","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/AbstractAdminTest.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractAdminTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractAdminTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractAdminTest.java?ref=8e484b3ac224dcdbe5fac9217fa7889ed9581707","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console;\n+\n+import java.util.Locale;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+public abstract class AbstractAdminTest extends AbstractTest {\n+\n+    @BeforeAll\n+    public static void authenticate() {\n+        SyncopeConsoleSession.get().signIn(\"\", \"\");\n+        SyncopeConsoleSession.get().setLocale(Locale.ENGLISH);\n+    }\n+}"},{"sha":"09e42e75459d8c07d0255ba85cfd00cb06e5b5f7","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/AbstractTest.java","status":"modified","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java?ref=8e484b3ac224dcdbe5fac9217fa7889ed9581707","patch":"@@ -67,6 +67,13 @@\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n+import org.apache.syncope.common.rest.api.service.AnyTypeService;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.util.tester.WicketTester;\n import org.junit.jupiter.api.BeforeAll;\n@@ -178,6 +185,12 @@ public static class TestSyncopeWebApplication extends SyncopeWebApplication {\n         public interface SyncopeServiceClient extends SyncopeService, Client {\n         }\n \n+        public interface AnyTypeServiceClient extends AnyTypeService, Client {\n+        }\n+\n+        public interface SchemaServiceClient extends SchemaService, Client {\n+        }\n+\n         private SyncopeService getSyncopeService() {\n             SyncopeServiceClient service = mock(SyncopeServiceClient.class);\n             when(service.type(anyString())).thenReturn(service);\n@@ -194,6 +207,35 @@ private SyncopeService getSyncopeService() {\n             return service;\n         }\n \n+        private SchemaService getSchemaService() {\n+            SchemaServiceClient service = mock(SchemaServiceClient.class);\n+\n+            when(service.type(anyString())).thenReturn(service);\n+            when(service.accept(anyString())).thenReturn(service);\n+\n+            PlainSchemaTO firstname = new PlainSchemaTO();\n+            firstname.setKey(\"firstname\");\n+            firstname.setType(AttrSchemaType.String);\n+            firstname.setAnyTypeClass(\"minimal user\");\n+            firstname.setMandatoryCondition(\"false\");\n+            when(service.search(any(SchemaQuery.class))).thenReturn(List.of(firstname));\n+            return service;\n+        }\n+\n+        private AnyTypeService getAnyTypeService() {\n+            AnyTypeServiceClient service = mock(AnyTypeServiceClient.class);\n+\n+            when(service.type(anyString())).thenReturn(service);\n+            when(service.accept(anyString())).thenReturn(service);\n+\n+            AnyTypeTO anyTypeTO = new AnyTypeTO();\n+            anyTypeTO.setKey(\"123456\");\n+            anyTypeTO.setKind(AnyTypeKind.USER);\n+\n+            when(service.read(anyString())).thenReturn(anyTypeTO);\n+            return service;\n+        }\n+\n         private UserTO getUserTO() {\n             UserTO userTO = new UserTO();\n             userTO.setUsername(\"username\");\n@@ -210,6 +252,12 @@ public SyncopeClientFactoryBean newClientFactory() {\n             SyncopeService syncopeService = getSyncopeService();\n             when(client.getService(SyncopeService.class)).thenReturn(syncopeService);\n \n+            SchemaService schemaService = getSchemaService();\n+            when(client.getService(SchemaService.class)).thenReturn(schemaService);\n+\n+            AnyTypeService anyTypeService = getAnyTypeService();\n+            when(client.getService(AnyTypeService.class)).thenReturn(anyTypeService);\n+\n             SyncopeClientFactoryBean clientFactory = mock(SyncopeClientFactoryBean.class);\n             when(clientFactory.setDomain(any())).thenReturn(clientFactory);\n             when(clientFactory.create(any(AuthenticationHandler.class))).thenReturn(client);"},{"sha":"fc72af04ab05de97b8a11d959847fdd5b99071c5","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/panels/search/UserSearchPanelTest.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanelTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e484b3ac224dcdbe5fac9217fa7889ed9581707/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanelTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanelTest.java?ref=8e484b3ac224dcdbe5fac9217fa7889ed9581707","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.AbstractAdminTest;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.jupiter.api.Test;\n+\n+public class UserSearchPanelTest extends AbstractAdminTest {\n+\n+    @Test\n+    public void test() {\n+        SearchClause clause = new SearchClause();\n+        clause.setComparator(SearchClause.Comparator.EQUALS);\n+        clause.setType(SearchClause.Type.ATTRIBUTE);\n+        clause.setProperty(\"username\");\n+\n+        TESTER.startComponentInPage(new UserSearchPanel.Builder(\n+                new ListModel<>(List.of(clause))).required(true).enableSearch().build(\"content\"));\n+\n+        FormTester formTester = TESTER.newFormTester(\n+                \"content:searchFormContainer:search:multiValueContainer:innerForm\");\n+\n+        assertNotNull(formTester.getForm().get(\"content:view:0:panel:container:property:textField\"));\n+\n+        formTester.setValue(\"content:view:0:panel:container:property:textField\", \"firstname\");\n+        formTester.setValue(\"content:view:0:panel:container:value:textField\", \"vincenzo\");\n+        assertEquals(\"username\", formTester.getForm().\n+                get(\"content:view:0:panel:container:property:textField\").getDefaultModelObjectAsString());\n+        assertNull(formTester.getForm().\n+                get(\"content:view:0:panel:container:value:textField\").getDefaultModelObject());\n+        formTester.submit(formTester.getForm().get(\"content:view:0:panel:container:operatorContainer:operator:search\"));\n+        assertEquals(\"firstname\", formTester.getForm().get(\n+                \"content:view:0:panel:container:property:textField\").getDefaultModelObjectAsString());\n+        assertEquals(\"vincenzo\", formTester.getForm().\n+                get(\"content:view:0:panel:container:value:textField\").getDefaultModelObjectAsString());\n+    }\n+}"}]}