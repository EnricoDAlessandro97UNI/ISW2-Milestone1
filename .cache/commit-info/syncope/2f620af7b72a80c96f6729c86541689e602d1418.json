{"sha":"2f620af7b72a80c96f6729c86541689e602d1418","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJmNjIwYWY3YjcyYTgwYzk2ZjY3MjljODY1NDE2ODllNjAyZDE0MTg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-30T14:11:31Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-30T14:11:31Z"},"message":"Wrapper TOs for lists + exception management + user creation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246278 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8738ef603d0679e0752c121a9e2134dd752c0f80","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8738ef603d0679e0752c121a9e2134dd752c0f80"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2f620af7b72a80c96f6729c86541689e602d1418","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2f620af7b72a80c96f6729c86541689e602d1418","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2f620af7b72a80c96f6729c86541689e602d1418","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2f620af7b72a80c96f6729c86541689e602d1418/comments","author":null,"committer":null,"parents":[{"sha":"6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d04ce401afd1c556f8b3406ea4bc2add0bd80ab"}],"stats":{"total":1050,"additions":850,"deletions":200},"files":[{"sha":"e6857e89fcae14af02abb11579c275ea5e212d84","filename":"client/pom.xml","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -31,9 +31,25 @@\n     <packaging>jar</packaging>\n \n     <dependencies>\n+\n         <dependency>\n             <groupId>commons-lang</groupId>\n             <artifactId>commons-lang</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-webmvc</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>log4j</groupId>\n+            <artifactId>log4j</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+        </dependency>\n+        \n     </dependencies>\n </project>"},{"sha":"c2e395fbd9b5d9a95aa89b44aac23c753b88512d","filename":"client/src/main/java/org/syncope/client/to/DerivedSchemaTOs.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,42 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class DerivedSchemaTOs extends AbstractBaseTO\n+        implements Iterable<DerivedSchemaTO> {\n+\n+    private List<DerivedSchemaTO> derivedSchemas;\n+\n+    public DerivedSchemaTOs() {\n+        derivedSchemas = new ArrayList<DerivedSchemaTO>();\n+    }\n+\n+    public List<DerivedSchemaTO> getDerivedSchemas() {\n+        return derivedSchemas;\n+    }\n+\n+    public void setDerivedSchemas(List<DerivedSchemaTO> derivedSchemas) {\n+        this.derivedSchemas = derivedSchemas;\n+    }\n+\n+    @Override\n+    public Iterator<DerivedSchemaTO> iterator() {\n+        return derivedSchemas.iterator();\n+    }\n+}"},{"sha":"207035f0cb2b747262b5b4d650ddc4dc907b6f4e","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -16,12 +16,12 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-import org.syncope.types.AttributeType;\n+import org.syncope.types.SchemaType;\n \n public class SchemaTO extends AbstractBaseTO {\n \n     private String name;\n-    private AttributeType type;\n+    private SchemaType type;\n     private boolean virtual;\n     private boolean mandatory;\n     private boolean multivalue;\n@@ -74,11 +74,11 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n-    public AttributeType getType() {\n+    public SchemaType getType() {\n         return type;\n     }\n \n-    public void setType(AttributeType type) {\n+    public void setType(SchemaType type) {\n         this.type = type;\n     }\n "},{"sha":"189b55dc21ed5b1eec2fc531ec5db46834b368ee","filename":"client/src/main/java/org/syncope/client/to/SchemaTOs.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTOs.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,41 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class SchemaTOs extends AbstractBaseTO implements Iterable<SchemaTO> {\n+\n+    private List<SchemaTO> schemas;\n+\n+    public SchemaTOs() {\n+        schemas = new ArrayList<SchemaTO>();\n+    }\n+\n+    public List<SchemaTO> getSchemas() {\n+        return schemas;\n+    }\n+\n+    public void setSchemas(List<SchemaTO> schemas) {\n+        this.schemas = schemas;\n+    }\n+\n+    @Override\n+    public Iterator<SchemaTO> iterator() {\n+        return schemas.iterator();\n+    }\n+}"},{"sha":"0a6708306643e81c1ebb69fe6f96f3c6ea9eb60d","filename":"client/src/main/java/org/syncope/client/to/UserTOs.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,41 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class UserTOs extends AbstractBaseTO implements Iterable<UserTO> {\n+\n+    private List<UserTO> users;\n+\n+    public UserTOs() {\n+        users = new ArrayList<UserTO>();\n+    }\n+\n+    public List<UserTO> getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(List<UserTO> users) {\n+        this.users = users;\n+    }\n+\n+    @Override\n+    public Iterator<UserTO> iterator() {\n+        return users.iterator();\n+    }\n+}"},{"sha":"14e9ef6d33a8ff306228be1c48853d557d9bd666","filename":"client/src/main/java/org/syncope/client/validation/SyncopeClientCompositeErrorException.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientCompositeErrorException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientCompositeErrorException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientCompositeErrorException.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,72 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.validation;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+public class SyncopeClientCompositeErrorException\n+        extends HttpClientErrorException {\n+\n+    private Set<SyncopeClientException> exceptions;\n+\n+    public SyncopeClientCompositeErrorException(HttpStatus statusCode) {\n+        super(statusCode);\n+        exceptions = new HashSet<SyncopeClientException>();\n+    }\n+\n+    public boolean hasExceptions() {\n+        return !exceptions.isEmpty();\n+    }\n+\n+    public boolean hasException(SyncopeClientExceptionType exceptionType) {\n+        return getException(exceptionType) != null;\n+    }\n+\n+    public SyncopeClientException getException(\n+            SyncopeClientExceptionType exceptionType) {\n+\n+        boolean found = false;\n+        SyncopeClientException syncopeClientException = null;\n+        for (Iterator<SyncopeClientException> itor = exceptions.iterator();\n+                itor.hasNext() && !found;) {\n+\n+            syncopeClientException = itor.next();\n+            if (syncopeClientException.getType().equals(exceptionType)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found ? syncopeClientException : null;\n+    }\n+\n+    public Set<SyncopeClientException> getExceptions() {\n+        return exceptions;\n+    }\n+\n+    public boolean addException(SyncopeClientException exception) {\n+        if (exception.getType() == null) {\n+            throw new IllegalArgumentException(exception\n+                    + \" does not have the right \"\n+                    + SyncopeClientExceptionType.class.getName() + \" set\");\n+        }\n+\n+        return exceptions.add(exception);\n+    }\n+}"},{"sha":"e1d307cadb6696fdeedc75d98bc75467d8cf243f","filename":"client/src/main/java/org/syncope/client/validation/SyncopeClientErrorHandler.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,88 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.validation;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.web.client.DefaultResponseErrorHandler;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\n+\n+    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\n+    private static final Logger log = LoggerFactory.getLogger(\n+            SyncopeClientErrorHandler.class);\n+    public static final HttpStatus[] managedStatuses = new HttpStatus[]{\n+        HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND};\n+\n+    @Override\n+    public void handleError(ClientHttpResponse response) throws IOException {\n+        if (!ArrayUtils.contains(managedStatuses, response.getStatusCode())) {\n+            super.handleError(response);\n+        }\n+\n+        SyncopeClientCompositeErrorException compositeException =\n+                new SyncopeClientCompositeErrorException(\n+                response.getStatusCode());\n+\n+        List<String> exceptionTypesInHeaders = response.getHeaders().get(\n+                EXCEPTION_TYPE_HEADER);\n+        SyncopeClientExceptionType exceptionType = null;\n+        SyncopeClientException clientException = null;\n+        Set<String> handledExceptions = new HashSet<String>();\n+        for (String exceptionTypeAsString : exceptionTypesInHeaders) {\n+            try {\n+                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(\n+                        exceptionTypeAsString);\n+            } catch (IllegalArgumentException e) {\n+                log.error(\"Unexpected value of \"\n+                        + EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString,\n+                        e);\n+            }\n+            if (exceptionType != null) {\n+                handledExceptions.add(exceptionTypeAsString);\n+\n+                clientException = new SyncopeClientException();\n+                clientException.setType(exceptionType);\n+                if (response.getHeaders().get(\n+                        exceptionType.getAttributeNameHeaderName()) != null\n+                        && !response.getHeaders().get(\n+                        exceptionType.getAttributeNameHeaderName()).isEmpty()) {\n+\n+                    clientException.setAttributeNames(response.getHeaders().get(\n+                            exceptionType.getAttributeNameHeaderName()));\n+                }\n+\n+                compositeException.addException(clientException);\n+            }\n+        }\n+\n+        exceptionTypesInHeaders.removeAll(handledExceptions);\n+        if (!exceptionTypesInHeaders.isEmpty()) {\n+            log.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\n+        }\n+\n+        if (compositeException.hasExceptions()) {\n+            throw compositeException;\n+        }\n+    }\n+}"},{"sha":"f22a360f5f2695194f4633947b13cc226a90cceb","filename":"client/src/main/java/org/syncope/client/validation/SyncopeClientException.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fvalidation%2FSyncopeClientException.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,59 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.validation;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+public class SyncopeClientException extends Exception {\n+\n+    private SyncopeClientExceptionType type;\n+    private Set<String> attributeNames;\n+\n+    public SyncopeClientException() {\n+        super();\n+        attributeNames = new HashSet<String>();\n+    }\n+\n+    public SyncopeClientExceptionType getType() {\n+        return type;\n+    }\n+\n+    public void setType(SyncopeClientExceptionType type) {\n+        this.type = type;\n+    }\n+\n+    public boolean addAttributeName(String attributeName) {\n+        return attributeNames.add(attributeName);\n+    }\n+\n+    public boolean removeAttributeName(String attributeName) {\n+        return attributeNames.remove(attributeName);\n+    }\n+\n+    public Set<String> getAttributeNames() {\n+        return attributeNames;\n+    }\n+\n+    public void setAttributeNames(Set<String> attributeNames) {\n+        this.attributeNames = attributeNames;\n+    }\n+\n+    public void setAttributeNames(List<String> attributeNames) {\n+        this.attributeNames.addAll(attributeNames);\n+    }\n+}"},{"sha":"6f474b8fec904f3a827bf40e9be96a001dcde6ab","filename":"client/src/main/java/org/syncope/types/SchemaType.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -18,7 +18,7 @@\n import java.text.Format;\n import java.text.SimpleDateFormat;\n \n-public enum AttributeType {\n+public enum SchemaType {\n \n     String(\"java.lang.String\"),\n     Long(\"java.lang.Long\"),\n@@ -28,7 +28,7 @@ public enum AttributeType {\n     final private String className;\n     private Format formatter;\n \n-    AttributeType(String className) {\n+    SchemaType(String className) {\n         this.className = className;\n         this.formatter = null;\n     }\n@@ -54,9 +54,9 @@ public Format getBasicFormatter() {\n     }\n \n     public boolean isConversionPatternNeeded() {\n-        return this == AttributeType.Date\n-                || this == AttributeType.Double\n-                || this == AttributeType.Long;\n+        return this == SchemaType.Date\n+                || this == SchemaType.Double\n+                || this == SchemaType.Long;\n     }\n \n }","previous_filename":"client/src/main/java/org/syncope/types/AttributeType.java"},{"sha":"36aad94293a92f7ced78c90e720a3a6e057600af","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,67 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum SyncopeClientExceptionType {\n+\n+    NotFound(\n+    \"Syncope.NotFound\",\n+    \"\"),\n+    InvalidSchemas(\n+    \"Syncope.User.InvalidSchema\",\n+    \"Syncope.User.InvalidSchema.attributeName\"),\n+    UserRequiredValuesMissing(\n+    \"Syncope.User.RequiredValuesMissing\",\n+    \"Syncope.User.RequiredValuesMissing.attributeName\"),\n+    UserInvalidValues(\n+    \"Syncope.User.InvalidValues\",\n+    \"Syncope.User.InvalidValues.attributeName\");\n+    private String exceptionTypeHeaderValue;\n+    private String attributeNameHeaderName;\n+\n+    private SyncopeClientExceptionType(String exceptionTypeHeaderValue,\n+            String attributeNameHeaderName) {\n+\n+        this.exceptionTypeHeaderValue = exceptionTypeHeaderValue;\n+        this.attributeNameHeaderName = attributeNameHeaderName;\n+    }\n+\n+    public static SyncopeClientExceptionType getFromHeaderValue(\n+            String exceptionTypeHeaderValue) {\n+\n+        SyncopeClientExceptionType result = null;\n+        for (SyncopeClientExceptionType syncopeClientExceptionType : values()) {\n+            if (exceptionTypeHeaderValue.equals(\n+                    syncopeClientExceptionType.getExceptionTypeHeaderValue())) {\n+                result = syncopeClientExceptionType;\n+            }\n+        }\n+\n+        if (result == null) {\n+            throw new IllegalArgumentException(\"Unexpected header value: \"\n+                    + exceptionTypeHeaderValue);\n+        }\n+\n+        return result;\n+    }\n+\n+    public String getAttributeNameHeaderName() {\n+        return attributeNameHeaderName;\n+    }\n+\n+    public String getExceptionTypeHeaderValue() {\n+        return exceptionTypeHeaderValue;\n+    }\n+}"},{"sha":"a51ca54729364df8356210cff420a8d19bed60a2","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -37,14 +37,21 @@ public class DefaultContentLoader implements ServletContextListener {\n     private static final Logger log = LoggerFactory.getLogger(\n             DefaultContentLoader.class);\n \n+    /**\n+     * <em>WARNING</em>: this method connects to the database by mean of the \n+     * underlying Spring's datasource, not using the provided one, to be fetched\n+     * via JNDI. This in order to avoid potential conflicts and problems with\n+     * DbUnit.\n+     * @param sce\n+     */\n     @Override\n     public void contextInitialized(ServletContextEvent sce) {\n         WebApplicationContext springContext =\n                 WebApplicationContextUtils.getWebApplicationContext(\n                 sce.getServletContext());\n \n         DataSource dataSource =\n-                (DataSource) springContext.getBean(\"dataSource\");\n+                (DataSource) springContext.getBean(\"localDataSource\");\n         DefaultDataTypeFactory dbUnitDataTypeFactory =\n                 (DefaultDataTypeFactory) springContext.getBean(\n                 \"dbUnitDataTypeFactory\");\n@@ -74,8 +81,7 @@ public void contextInitialized(ServletContextEvent sce) {\n                 FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n                 dataSetBuilder.setColumnSensing(true);\n                 IDataSet dataSet = dataSetBuilder.build(\n-                        getClass().getResourceAsStream(\n-                        \"/org/syncope/core/persistence/content.xml\"));\n+                        getClass().getResourceAsStream(\"content.xml\"));\n \n                 DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n             }"},{"sha":"89b86ed2972152959c0b5300f0f090f48f4bf1fa","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":25,"deletions":26,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -31,28 +31,30 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-\n     /**\n      * Provisioning target resources.\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n     private Set<Resource> resources;\n \n+    public AbstractAttributable() {\n+        resources = new HashSet<Resource>();\n+    }\n+\n     public Long getId() {\n         return id;\n     }\n \n-    public <T extends AbstractAttribute> T getAttribute(String schemaName)\n-            throws NoSuchElementException {\n-\n+    public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n         T result = null;\n         T attribute = null;\n         for (Iterator<? extends AbstractAttribute> itor =\n                 getAttributes().iterator();\n                 result == null && itor.hasNext();) {\n \n             attribute = (T) itor.next();\n-            if (attribute.getSchema() != null && schemaName.equals(attribute.getSchema().getName())) {\n+            if (attribute.getSchema() != null\n+                    && schemaName.equals(attribute.getSchema().getName())) {\n \n                 result = attribute;\n             }\n@@ -71,7 +73,8 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n                 result == null && itor.hasNext();) {\n \n             derivedAttribute = (T) itor.next();\n-            if (derivedAttribute.getDerivedSchema() != null && derivedSchemaName.equals(\n+            if (derivedAttribute.getDerivedSchema() != null\n+                    && derivedSchemaName.equals(\n                     derivedAttribute.getDerivedSchema().getName())) {\n \n                 result = derivedAttribute;\n@@ -81,6 +84,22 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n         return result;\n     }\n \n+    public boolean addResource(Resource resource) {\n+        return resources.add(resource);\n+    }\n+\n+    public boolean removeResource(Resource resource) {\n+        return resources.remove(resource);\n+    }\n+\n+    public Set<Resource> getResources() {\n+        return resources;\n+    }\n+\n+    public void setResources(Set<Resource> resources) {\n+        this.resources = resources;\n+    }\n+\n     public abstract <T extends AbstractAttribute> boolean addAttribute(T attribute);\n \n     public abstract <T extends AbstractAttribute> boolean removeAttribute(T attribute);\n@@ -98,24 +117,4 @@ public abstract void setAttributes(\n \n     public abstract void setDerivedAttributes(\n             Set<? extends AbstractDerivedAttribute> derivedAttributes);\n-\n-    public Set<Resource> getResources() {\n-        return resources;\n-    }\n-\n-    public void setResources(Set<Resource> resources) {\n-        this.resources = resources;\n-    }\n-\n-    public boolean addResource(Resource resource) {\n-        if (this.resources == null) {\n-            this.resources = new HashSet<Resource>();\n-        }\n-        return this.resources.add(resource);\n-    }\n-\n-    public boolean removeResource(Resource resource) {\n-        if (this.resources == null) return true;\n-        return this.resources.remove(resource);\n-    }\n }"},{"sha":"c02cdef9770e34c058eb12d74aa0393a39ebdaf9","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":9,"deletions":16,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -29,38 +29,31 @@\n import org.syncope.core.persistence.validation.AttributeBasicValidator;\n import org.syncope.core.persistence.validation.AttributeValidator;\n import org.syncope.core.persistence.validation.ValidatorInstantiationException;\n-import org.syncope.types.AttributeType;\n+import org.syncope.types.SchemaType;\n \n @MappedSuperclass\n public abstract class AbstractSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n-\n     @Column(nullable = false)\n     @Enumerated(STRING)\n-    private AttributeType type;\n-\n+    private SchemaType type;\n     /**\n      * Specify if the attribute should be stored on the local repository.\n      */\n     private boolean virtual;\n-\n     private boolean mandatory;\n-\n     private boolean multivalue;\n-\n     @Column(nullable = true)\n     private String conversionPattern;\n-\n     @Column(nullable = true)\n     private String validatorClass;\n-\n     @Transient\n     private AttributeValidator validator;\n \n     public AbstractSchema() {\n-        type = AttributeType.String;\n+        type = SchemaType.String;\n         virtual = false;\n         mandatory = false;\n         multivalue = false;\n@@ -74,11 +67,11 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n-    public AttributeType getType() {\n+    public SchemaType getType() {\n         return type;\n     }\n \n-    public void setType(AttributeType type) {\n+    public void setType(SchemaType type) {\n         this.type = type;\n     }\n \n@@ -208,11 +201,11 @@ public abstract void setAttributes(\n \n     public abstract void setDerivedSchemas(Set<? extends AbstractDerivedSchema> derivedSchemas);\n \n-    public abstract Set<SchemaMapping> getMappings();\n-\n-    public abstract void setMappings(Set<SchemaMapping> mappings);\n-\n     public abstract boolean addMapping(SchemaMapping mapping);\n \n     public abstract boolean removeMapping(SchemaMapping mapping);\n+\n+    public abstract Set<SchemaMapping> getMappings();\n+\n+    public abstract void setMappings(Set<SchemaMapping> mappings);\n }"},{"sha":"8d6f28dca41b4656a675f2228e20f1f021658303","filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeValidator.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -17,7 +17,6 @@\n import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n-import org.springframework.beans.TypeMismatchException;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n@@ -36,11 +35,6 @@ public AttributeValidator(AbstractSchema schema)\n     public <T extends AbstractAttributeValue> T getValue(Object value,\n             T attributeValue) throws ValidationException {\n \n-        if (!attributeClass.isInstance(value)) {\n-            throw new ParseException(\n-                    new TypeMismatchException(value, attributeClass));\n-        }\n-\n         attributeValue = value instanceof String\n                 ? parseValue((String) value, attributeValue)\n                 : parseValue(value, attributeValue);"},{"sha":"965cf661c0aa1d61ce6f528b92597def62e5b058","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":47,"deletions":4,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -1,10 +1,11 @@\n+\n /*\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,15 +15,21 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.io.IOException;\n+import javax.servlet.http.HttpServletResponse;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.TypeMismatchException;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientErrorHandler;\n+import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.Attributable;\n+import org.syncope.types.SyncopeClientExceptionType;\n \n public abstract class AbstractController {\n \n-    protected static final Logger log = LoggerFactory.getLogger(\n-            AbstractController.class);\n+    protected static final Logger log =\n+            LoggerFactory.getLogger(AbstractController.class);\n \n     protected Attributable getAttributable(String kind) {\n         Attributable result = null;\n@@ -31,9 +38,45 @@ protected Attributable getAttributable(String kind) {\n             result = Attributable.valueOf(kind.toUpperCase());\n         } catch (Exception e) {\n             log.error(\"Attributable not supported: \" + kind);\n+\n             throw new TypeMismatchException(kind, Attributable.class, e);\n         }\n \n         return result;\n     }\n+\n+    protected <T> T throwCompositeException(\n+            SyncopeClientCompositeErrorException compositeErrorException,\n+            HttpServletResponse response) throws IOException {\n+\n+        for (SyncopeClientException exception :\n+                compositeErrorException.getExceptions()) {\n+\n+            response.setHeader(\n+                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                    exception.getType().getExceptionTypeHeaderValue());\n+\n+            for (String attributeName : exception.getAttributeNames()) {\n+                response.addHeader(\n+                        exception.getType().getAttributeNameHeaderName(),\n+                        attributeName);\n+            }\n+\n+            response.sendError(compositeErrorException.getStatusCode().value());\n+        }\n+\n+        return null;\n+    }\n+\n+    protected <T> T throwNotFoundException(\n+            HttpServletResponse response) throws IOException {\n+\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.NotFound.getExceptionTypeHeaderValue());\n+\n+        response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+\n+        return null;\n+    }\n }"},{"sha":"df0d14cc0ec33c4079d21761f8813887d4de408d","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":20,"deletions":19,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -20,11 +20,13 @@\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.DerivedSchemaTO;\n+import org.syncope.client.to.DerivedSchemaTOs;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.rest.data.DerivedSchemaDataBinder;\n@@ -38,26 +40,24 @@ public class DerivedSchemaController extends AbstractController {\n     @Autowired\n     private DerivedSchemaDataBinder derivedSchemaDataBinder;\n \n+    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public DerivedSchemaTO create(HttpServletResponse response,\n             @RequestBody DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            throws InstantiationException, IllegalAccessException {\n \n         Class reference = getAttributable(kind).getDerivedSchemaClass();\n-        AbstractDerivedSchema derivedSchema = null;\n-        try {\n-            derivedSchema = derivedSchemaDataBinder.createDerivedSchema(\n-                    derivedSchemaTO, reference,\n-                    getAttributable(kind).getSchemaClass());\n-        } catch (Exception e) {\n-            log.error(\"Could not create for \" + derivedSchemaTO, e);\n-            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n-        }\n+        AbstractDerivedSchema derivedSchema =\n+                derivedSchemaDataBinder.createDerivedSchema(\n+                derivedSchemaTO, reference,\n+                getAttributable(kind).getSchemaClass());\n \n+        response.setStatus(HttpServletResponse.SC_CREATED);\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n+    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(HttpServletResponse response,\n@@ -71,28 +71,30 @@ public void delete(HttpServletResponse response,\n         if (derivedSchema == null) {\n             log.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n-\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            throwNotFoundException(response);\n         } else {\n             derivedSchemaDAO.delete(derivedSchemaName, reference);\n+            derivedSchemaDAO.getEntityManager().flush();\n         }\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<DerivedSchemaTO> list(@PathVariable(\"kind\") String kind) {\n+    public DerivedSchemaTOs list(@PathVariable(\"kind\") String kind) {\n \n         Class reference = getAttributable(kind).getDerivedSchemaClass();\n         List<AbstractDerivedSchema> derivedAttributeSchemas =\n                 derivedSchemaDAO.findAll(reference);\n \n-        List<DerivedSchemaTO> result =\n+        List<DerivedSchemaTO> derivedSchemaTOs =\n                 new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());\n         for (AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {\n \n-            result.add(derivedSchemaDataBinder.getDerivedSchemaTO(\n+            derivedSchemaTOs.add(derivedSchemaDataBinder.getDerivedSchemaTO(\n                     derivedSchema));\n         }\n \n+        DerivedSchemaTOs result = new DerivedSchemaTOs();\n+        result.setDerivedSchemas(derivedSchemaTOs);\n         return result;\n     }\n \n@@ -109,20 +111,19 @@ public DerivedSchemaTO read(HttpServletResponse response,\n         if (derivedSchema == null) {\n             log.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n-\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-            return new DerivedSchemaTO();\n+            return throwNotFoundException(response);\n         }\n \n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n     // TODO: implement and verify if current attributes are affected by this update\n+    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public DerivedSchemaTO update(HttpServletResponse response,\n             @RequestBody DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            throws InstantiationException, IllegalAccessException {\n \n         return create(response, derivedSchemaTO, kind);\n     }"},{"sha":"79e62dcc4dfe37b3be996af970f055a5ac743efa","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":19,"deletions":26,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -20,11 +20,13 @@\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.SchemaTO;\n+import org.syncope.client.to.SchemaTOs;\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -38,25 +40,21 @@ public class SchemaController extends AbstractController {\n     @Autowired\n     private SchemaDataBinder schemaDataBinder;\n \n+    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public SchemaTO create(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            throws InstantiationException, IllegalAccessException {\n \n         Class reference = getAttributable(kind).getSchemaClass();\n-        AbstractSchema schema = null;\n-        try {\n-            schema = schemaDataBinder.createSchema(schemaTO, reference,\n-                    getAttributable(kind).getDerivedSchemaClass());\n-        } catch (Exception e) {\n-            log.error(\"Could not create for \" + schemaTO, e);\n-            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n-            return new SchemaTO();\n-        }\n+        AbstractSchema schema = schemaDataBinder.createSchema(schemaTO,\n+                reference, getAttributable(kind).getDerivedSchemaClass());\n \n+        response.setStatus(HttpServletResponse.SC_CREATED);\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n+    @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(HttpServletResponse response,\n@@ -67,30 +65,26 @@ public void delete(HttpServletResponse response,\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             log.error(\"Could not find schema '\" + schemaName + \"'\");\n-\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            throwNotFoundException(response);\n         } else {\n-            try {\n-                schemaDAO.delete(schemaName, reference);\n-            } catch (Throwable t) {\n-                log.error(\"While deleting \" + schemaName, t);\n-                response.sendError(\n-                        HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n-            }\n+            schemaDAO.delete(schemaName, reference);\n+            schemaDAO.getEntityManager().flush();\n         }\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<SchemaTO> list(@PathVariable(\"kind\") String kind) {\n+    public SchemaTOs list(@PathVariable(\"kind\") String kind) {\n \n         Class reference = getAttributable(kind).getSchemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n \n-        List<SchemaTO> result = new ArrayList<SchemaTO>(schemas.size());\n+        List<SchemaTO> schemaTOs = new ArrayList<SchemaTO>(schemas.size());\n         for (AbstractSchema schema : schemas) {\n-            result.add(schemaDataBinder.getSchemaTO(schema));\n+            schemaTOs.add(schemaDataBinder.getSchemaTO(schema));\n         }\n \n+        SchemaTOs result = new SchemaTOs();\n+        result.setSchemas(schemaTOs);\n         return result;\n     }\n \n@@ -104,19 +98,18 @@ public SchemaTO read(HttpServletResponse response,\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             log.error(\"Could not find schema '\" + schemaName + \"'\");\n-\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-            return new SchemaTO();\n+            return throwNotFoundException(response);\n         }\n \n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n     // TODO: implement and verify if current attributes are affected by this update\n+    @Transactional\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public SchemaTO update(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            throws InstantiationException, IllegalAccessException {\n \n         return create(response, schemaTO, kind);\n     }"},{"sha":"9c55be24bc9981bd7394e7cd7fd73c4cfd9dcbcf","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":78,"deletions":50,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -1,3 +1,4 @@\n+\n /*\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n@@ -14,11 +15,6 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -29,9 +25,17 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.SearchParameters;\n import org.syncope.client.to.UserTO;\n+import org.syncope.client.to.UserTOs;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.rest.data.UserDataBinder;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n @Controller\n @RequestMapping(\"/user\")\n@@ -42,114 +46,138 @@ public class UserController extends AbstractController {\n     @Autowired\n     private UserDataBinder userDataBinder;\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n     public UserTO create(HttpServletResponse response,\n             @RequestBody UserTO userTO) throws IOException {\n \n-        log.info(\"create called with parameter \" + userTO);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"create called with parameter \" + userTO);\n+        }\n \n-        return userTO;\n+        SyncopeUser user = null;\n+        try {\n+            user = userDataBinder.createSyncopeUser(userTO);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            log.error(\"Could not create for \" + userTO, e);\n+            return throwCompositeException(e, response);\n+        }\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return userDataBinder.getUserTO(user);\n     }\n \n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{userId}\")\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{userId}\")\n     public void delete(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId) throws IOException {\n-        \n+            @PathVariable(\"userId\") Long userId)\n+            throws IOException {\n+\n         SyncopeUser user = syncopeUserDAO.find(userId);\n+\n         if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            throwNotFoundException(response);\n         } else {\n-            try {\n-                syncopeUserDAO.delete(userId);\n-            } catch (Throwable t) {\n-                log.error(\"While deleting \" + userId, t);\n-                response.sendError(\n-                        HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n-            }\n+            syncopeUserDAO.delete(userId);\n+            syncopeUserDAO.getEntityManager().flush();\n         }\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/isActive/{userId}\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/isActive/{userId}\")\n     public ModelAndView isActive(@PathVariable(\"userId\") Long userId)\n             throws IOException {\n \n         // TODO: check workflow\n         ModelAndView mav = new ModelAndView();\n+\n         mav.addObject(syncopeUserDAO.find(userId) != null);\n+\n         return mav;\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    public List<UserTO> list(HttpServletRequest request) throws IOException {\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public UserTOs list(HttpServletRequest request) throws IOException {\n         List<SyncopeUser> users = syncopeUserDAO.findAll();\n+        List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n \n-        List<UserTO> result = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n-            result.add(userDataBinder.getUserTO(user));\n+            userTOs.add(userDataBinder.getUserTO(user));\n         }\n \n+        UserTOs result = new UserTOs();\n+        result.setUsers(userTOs);\n         return result;\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{userId}\")\n     public UserTO read(HttpServletResponse response,\n-            @PathVariable(\"userId\") Long userId) throws IOException {\n-\n+            @PathVariable(\"userId\") Long userId)\n+            throws IOException {\n         SyncopeUser user = syncopeUserDAO.find(userId);\n+\n         if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-\n-            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n-            return new UserTO();\n+            return throwNotFoundException(response);\n         }\n \n         return userDataBinder.getUserTO(user);\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/passwordReset/{userId}\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/passwordReset/{userId}\")\n     public ModelAndView getPasswordResetToken(\n             @PathVariable(\"userId\") Long userId,\n             @RequestParam(\"passwordResetFormURL\") String passwordResetFormURL,\n             @RequestParam(\"gotoURL\") String gotoURL)\n             throws IOException {\n-\n-        log.info(\"passwordReset (GET) called with parameters \"\n-                + userId + \", \" + passwordResetFormURL + \", \" + gotoURL);\n+        log.info(\"passwordReset (GET) called with parameters \" + userId + \", \"\n+                + passwordResetFormURL + \", \" + gotoURL);\n \n         String passwordResetToken = \"token\";\n-\n         ModelAndView mav = new ModelAndView();\n+\n         mav.addObject(passwordResetToken);\n+\n         return mav;\n     }\n \n-    @RequestMapping(method = RequestMethod.PUT, value = \"/passwordReset/{userId}\")\n-    public void passwordReset(\n-            @PathVariable(\"userId\") Long userId,\n+    @RequestMapping(method = RequestMethod.PUT,\n+    value = \"/passwordReset/{userId}\")\n+    public void passwordReset(@PathVariable(\"userId\") Long userId,\n             @RequestParam(\"tokenId\") String tokenId,\n             @RequestParam(\"newPassword\") String newPassword)\n             throws IOException {\n-\n-        log.info(\"passwordReset (POST) called with parameters \"\n-                + userId + \", \" + tokenId + \", \" + newPassword);\n+        log.info(\"passwordReset (POST) called with parameters \" + userId + \", \"\n+                + tokenId + \", \" + newPassword);\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n-    public List<UserTO> search(HttpServletResponse response,\n-            @RequestBody SearchParameters searchParameters) throws IOException {\n-\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/search\")\n+    public UserTOs search(HttpServletResponse response,\n+            @RequestBody SearchParameters searchParameters)\n+            throws IOException {\n         log.info(\"search called with parameter \" + searchParameters);\n \n-        List<UserTO> searchResult = new ArrayList<UserTO>();\n+        List<UserTO> userTOs = new ArrayList<UserTO>();\n+        UserTOs result = new UserTOs();\n \n-        return searchResult;\n+        result.setUsers(userTOs);\n+\n+        return result;\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n     public UserTO update(HttpServletResponse response,\n-            @RequestBody UserTO userTO) throws IOException {\n+            @RequestBody UserTO userTO)\n+            throws IOException {\n \n         log.info(\"update called with parameter \" + userTO);\n "},{"sha":"2b0a93942762c496aadf6a838e33400549b0cb07","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -63,7 +63,10 @@ public <T extends AbstractDerivedSchema, K extends AbstractSchema> T createDeriv\n             }\n         }\n \n-        return derivedSchemaDAO.save(derivedSchema);\n+        // Everything went out fine, we can flush to the database\n+        derivedSchema = derivedSchemaDAO.save(derivedSchema);\n+        derivedSchemaDAO.getEntityManager().flush();\n+        return derivedSchema;\n     }\n \n     public <T extends AbstractDerivedSchema> DerivedSchemaTO getDerivedSchemaTO("},{"sha":"48bd30f59e4d9f61426cde2a89e6c38027edb763","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -62,7 +62,10 @@ public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchem\n             }\n         }\n \n-        return schemaDAO.save(schema);\n+        // Everything went out fine, we can flush to the database\n+        schema = schemaDAO.save(schema);\n+        schemaDAO.getEntityManager().flush();\n+        return schema;\n     }\n \n     public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema) {"},{"sha":"9c064b5d6cc573843d0b33b02c7e2929560f166d","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":109,"deletions":6,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -15,45 +15,148 @@\n package org.syncope.core.rest.data;\n \n import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang.ArrayUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.UserTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UserAttribute;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.validation.ValidationException;\n+import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n public class UserDataBinder {\n \n     private static final Logger log = LoggerFactory.getLogger(\n             UserDataBinder.class);\n-    private static final String[] ignoreSchemaProperties = {\"attributes\",\n+    private static final String[] ignoreProperties = {\"attributes\",\n         \"derivedAttributes\", \"roles\"};\n     private SyncopeUserDAO syncopeUserDAO;\n+    private SchemaDAO schemaDAO;\n \n     @Autowired\n-    public UserDataBinder(SyncopeUserDAO syncopeUserDAO) {\n+    public UserDataBinder(SyncopeUserDAO syncopeUserDAO,\n+            SchemaDAO schemaDAO) {\n \n         this.syncopeUserDAO = syncopeUserDAO;\n+        this.schemaDAO = schemaDAO;\n     }\n \n-    public SyncopeUser createSyncopeUser(UserTO userTO) {\n+    public SyncopeUser createSyncopeUser(UserTO userTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException compositeErrorException =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+        SyncopeClientException invalidSchemas = new SyncopeClientException();\n+        invalidSchemas.setType(SyncopeClientExceptionType.InvalidSchemas);\n+        SyncopeClientException requiredValuesMissing =\n+                new SyncopeClientException();\n+        requiredValuesMissing.setType(\n+                SyncopeClientExceptionType.UserRequiredValuesMissing);\n+        SyncopeClientException invalidValues = new SyncopeClientException();\n+        invalidValues.setType(SyncopeClientExceptionType.UserInvalidValues);\n \n         SyncopeUser user = new SyncopeUser();\n-        //BeanUtils.copyProperties(userTO, user, ignoreSchemaProperties);\n+        BeanUtils.copyProperties(userTO, user,\n+                (String[]) ArrayUtils.add(ignoreProperties, \"id\"));\n+\n+        UserSchema schema = null;\n+        UserAttribute attribute = null;\n+        Set<String> valuesProvided = null;\n+        UserAttributeValue attributeValue = null;\n+        for (AttributeTO attributeTO : userTO.getAttributes()) {\n+            schema = schemaDAO.find(attributeTO.getSchema(), UserSchema.class);\n+\n+            if (schema == null) {\n+                invalidSchemas.addAttributeName(attributeTO.getSchema());\n+            } else {\n+                attribute = new UserAttribute();\n+                attribute.setSchema(schema);\n+                attribute.setOwner(user);\n+\n+                // if the schema is multivale, all values are considered for\n+                // addition, otherwise only the fist one - if provided - is\n+                // considered\n+                valuesProvided = schema.isMultivalue()\n+                        ? attributeTO.getValues()\n+                        : (attributeTO.getValues().isEmpty()\n+                        ? Collections.EMPTY_SET\n+                        : Collections.singleton(\n+                        attributeTO.getValues().iterator().next()));\n+                for (String value : valuesProvided) {\n+                    attributeValue = new UserAttributeValue();\n+\n+                    try {\n+                        attribute.addValue(value, attributeValue);\n+                    } catch (ValidationException e) {\n+                        log.error(\"Invalid value for attribute \"\n+                                + schema.getName() + \": \" + value, e);\n+\n+                        invalidValues.addAttributeName(schema.getName());\n+                    }\n+                }\n+\n+                if (!attribute.getAttributeValues().isEmpty()) {\n+                    user.addAttribute(attribute);\n+                }\n+            }\n+        }\n+\n+        // Check if there is some mandatory schema defined for which no value\n+        // has been provided\n+        List<UserSchema> allUserSchemas = schemaDAO.findAll(UserSchema.class);\n+        for (UserSchema userSchema : allUserSchemas) {\n+            if (user.getAttribute(userSchema.getName()) == null\n+                    && userSchema.isMandatory()) {\n+\n+                log.error(\"Mandatory schema \" + userSchema.getName()\n+                        + \" not provided with values\");\n+\n+                requiredValuesMissing.addAttributeName(userSchema.getName());\n+            }\n+        }\n+\n+        // Throw composite exception if there is at least one attribute name set\n+        // in the composing exceptions\n+        if (!invalidSchemas.getAttributeNames().isEmpty()) {\n+            compositeErrorException.addException(invalidSchemas);\n+        }\n+        if (!requiredValuesMissing.getAttributeNames().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+        if (!invalidValues.getAttributeNames().isEmpty()) {\n+            compositeErrorException.addException(invalidValues);\n+        }\n+        if (compositeErrorException.hasExceptions()) {\n+            throw compositeErrorException;\n+        }\n \n-        return syncopeUserDAO.save(user);\n+        // Everything went out fine, we can flush to the database\n+        user = syncopeUserDAO.save(user);\n+        syncopeUserDAO.getEntityManager().flush();\n+        return user;\n     }\n \n     public UserTO getUserTO(SyncopeUser user) {\n         UserTO userTO = new UserTO();\n-        BeanUtils.copyProperties(user, userTO, ignoreSchemaProperties);\n+        BeanUtils.copyProperties(user, userTO, ignoreProperties);\n \n         AttributeTO attributeTO = null;\n         for (AbstractAttribute attribute : user.getAttributes()) {"},{"sha":"d8b95c426dc2810c77bb61b5268a036d19f589cc","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -22,7 +22,7 @@\n                 mandatory=\"false\" multivalue=\"false\"/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"false\"\n                 mandatory=\"false\" multivalue=\"true\"\n-                validatorClass=\"org.syncope.core.validation.EmailAddressValidator\"/>\n+                validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n \n     <UserDerivedSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n "},{"sha":"436a112f938d9198cd5a5322b2a8188426b9b099","filename":"core/src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -50,13 +50,14 @@\n     <bean id=\"jsonMediaType\" class=\"org.springframework.http.MediaType\">\n         <constructor-arg value=\"application\"/>\n         <constructor-arg value=\"json\"/>\n+        <constructor-arg value=\"UTF-8\"/>\n     </bean>\n \n     <bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n         <property name=\"mediaTypes\">\n             <map>\n-                <entry key=\"json\" value=\"application/json\"/>\n-                <entry key=\"xml\" value=\"application/xml\"/>\n+                <entry key=\"json\" value=\"application/json;charset=UTF-8\"/>\n+                <entry key=\"xml\" value=\"application/xml;charset=UTF-8\"/>\n             </map>\n         </property>\n         <property name=\"defaultViews\">\n@@ -79,6 +80,10 @@\n \n     <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n         <property name=\"messageConverters\" ref=\"mappingJacksonHttpMessageConverter\"/>\n+        <property name=\"errorHandler\">\n+            <bean id=\"syncopeClientErrorHandler\"\n+            class=\"org.syncope.client.validation.SyncopeClientErrorHandler\"/>\n+        </property>\n     </bean>\n \n </beans>\n\\ No newline at end of file"},{"sha":"4f510fbe342f0abcad984996289db6949f8f40f4","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -51,7 +51,7 @@\n \n     <servlet-mapping>\n         <servlet-name>syncope-core-rest</servlet-name>\n-        <url-pattern>/*</url-pattern>\n+        <url-pattern>/rest/*</url-pattern>\n     </servlet-mapping>\n \n     <filter>\n@@ -72,10 +72,18 @@\n         <url-pattern>/*</url-pattern>\n     </filter-mapping>\n \n-    <resource-ref>\n+    <error-page>\n+        <error-code>400</error-code>\n+        <location>/syncopeClientError.jsp</location>\n+    </error-page>\n+    <error-page>\n+        <error-code>404</error-code>\n+        <location>/syncopeClientError.jsp</location>\n+    </error-page>\n+<!--    <resource-ref>\n         <res-ref-name>jdbc/syncopeDataSource</res-ref-name>\n         <res-type>javax.sql.XADataSource</res-type>\n         <res-auth>Container</res-auth>\n-    </resource-ref>\n+    </resource-ref>-->\n \n </web-app>"},{"sha":"b8a9808373535ec50e5e4c530c9adf1c458b6cdb","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"added","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -0,0 +1,2 @@\n+<%@page contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n+null\n\\ No newline at end of file"},{"sha":"e6fa4477037e13b4a5f10cff29e1454331c064dd","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -23,7 +23,7 @@\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.types.AttributeType;\n+import org.syncope.types.SchemaType;\n \n @Transactional\n public class SchemaDAOTest extends AbstractTest {\n@@ -52,7 +52,7 @@ public final void findByName() {\n     public final void save() {\n         UserSchema attributeSchema = new UserSchema();\n         attributeSchema.setName(\"secondaryEmail\");\n-        attributeSchema.setType(AttributeType.String);\n+        attributeSchema.setType(SchemaType.String);\n         attributeSchema.setValidatorClass(\n                 \"org.syncope.core.validation.EmailAddressValidator\");\n         attributeSchema.setMandatory(false);"},{"sha":"59477424f9073b50cd17c878026aa84a4d739ec8","filename":"core/src/test/java/org/syncope/core/test/rest/AbstractTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -29,7 +29,8 @@ public abstract class AbstractTestITCase {\n \n     protected static final Logger log = LoggerFactory.getLogger(\n             AbstractTestITCase.class);\n-    protected static final String BASE_URL = \"http://localhost:8080/syncope/\";\n+    protected static final String BASE_URL =\n+            \"http://localhost:8080/syncope/rest/\";\n     @Autowired\n     protected RestTemplate restTemplate;\n }"},{"sha":"f349c054b065965544c47a4b25760a74be743906","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaTestITCase.java","status":"modified","additions":23,"deletions":14,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -14,14 +14,17 @@\n  */\n package org.syncope.core.test.rest;\n \n+import org.springframework.web.client.HttpClientErrorException;\n+import org.syncope.client.to.DerivedSchemaTOs;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.client.to.DerivedSchemaTO;\n-import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.syncope.client.to.SchemaTO;\n+import org.syncope.client.to.SchemaTOs;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.types.AttributeType;\n+import org.syncope.types.SchemaType;\n import static org.junit.Assert.*;\n \n public class SchemaTestITCase extends AbstractTestITCase {\n@@ -36,7 +39,7 @@ public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"testAttribute\");\n         schemaTO.setMandatory(true);\n-        schemaTO.setType(AttributeType.String);\n+        schemaTO.setType(SchemaType.String);\n \n         SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n                 + \"schema/user/create\", schemaTO, SchemaTO.class);\n@@ -46,28 +49,34 @@ public void create() {\n     @Test\n     public void delete() {\n         restTemplate.delete(BASE_URL + \"schema/user/delete/username.js\");\n-        System.out.println(restTemplate.getForObject(BASE_URL\n-                + \"schema/user/read/surname.json\", SchemaTO.class));\n+        SchemaTO username = null;\n+        try {\n+            username = restTemplate.getForObject(BASE_URL\n+                    + \"schema/user/read/username.json\", SchemaTO.class);\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+        assertNull(username);\n     }\n \n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas =\n+        SchemaTOs userSchemas =\n                 restTemplate.getForObject(BASE_URL\n-                + \"schema/user/list.json\", List.class);\n-        assertFalse(userSchemas.isEmpty());\n+                + \"schema/user/list.json\", SchemaTOs.class);\n+        assertFalse(userSchemas.getSchemas().isEmpty());\n \n-        List<SchemaTO> roleSchemas = restTemplate.getForObject(BASE_URL\n-                + \"schema/role/list.json\", List.class);\n-        assertFalse(roleSchemas.isEmpty());\n+        SchemaTOs roleSchemas = restTemplate.getForObject(BASE_URL\n+                + \"schema/role/list.json\", SchemaTOs.class);\n+        assertFalse(roleSchemas.getSchemas().isEmpty());\n     }\n \n     @Test\n     public void derivedList() {\n-        List<DerivedSchemaTO> derivedSchemas =\n+        DerivedSchemaTOs derivedSchemas =\n                 restTemplate.getForObject(BASE_URL\n-                + \"derivedSchema/user/list.json\", List.class);\n-        assertFalse(derivedSchemas.isEmpty());\n+                + \"derivedSchema/user/list.json\", DerivedSchemaTOs.class);\n+        assertFalse(derivedSchemas.getDerivedSchemas().isEmpty());\n     }\n \n     @Test"},{"sha":"42372b7dd3611fd15816eedb209934535bd3cd6c","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":43,"deletions":10,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f620af7b72a80c96f6729c86541689e602d1418/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=2f620af7b72a80c96f6729c86541689e602d1418","patch":"@@ -17,30 +17,62 @@\n import static org.junit.Assert.*;\n \n import java.util.Collections;\n-import java.util.List;\n-import java.util.Set;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n+import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.SearchParameters;\n import org.syncope.client.to.UserTO;\n+import org.syncope.client.to.UserTOs;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n public class UserTestITCase extends AbstractTestITCase {\n \n     @Test\n-    public void create() {\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public void createWithException() {\n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"attr1\");\n         attributeTO.setValues(Collections.singleton(\"value1\"));\n \n         UserTO newUserTO = new UserTO();\n         newUserTO.addAttribute(attributeTO);\n \n-        UserTO userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+        restTemplate.postForObject(BASE_URL + \"user/create\",\n                 newUserTO, UserTO.class);\n+    }\n \n-        assertEquals(newUserTO, userTO);\n+    @Test\n+    public void create() {\n+        UserTO userTO = new UserTO();\n+\n+        AttributeTO attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"username\");\n+        attributeTO.addValue(\"fchicchiricco\");\n+        userTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"surname\");\n+        attributeTO.addValue(\"Chicchiriccò\");\n+        userTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"email\");\n+        attributeTO.addValue(\"chicchiricco@gmail.com\");\n+        attributeTO.addValue(\"syncope@googlecode.com\");\n+        userTO.addAttribute(attributeTO);\n+\n+        attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"loginDate\");\n+        attributeTO.addValue(\"2010-06-30\");\n+        attributeTO.addValue(\"2010-07-01\");\n+        userTO.addAttribute(attributeTO);\n+\n+        UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        userTO.setId(newUserTO.getId());\n+        assertEquals(userTO, userTO);\n     }\n \n     @Test\n@@ -62,11 +94,11 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        Set<UserTO> users = restTemplate.getForObject(BASE_URL\n-                + \"user/list.json\", Set.class);\n+        UserTOs users = restTemplate.getForObject(BASE_URL\n+                + \"user/list.json\", UserTOs.class);\n \n         assertNotNull(users);\n-        assertEquals(4, users.size());\n+        assertEquals(4, users.getUsers().size());\n     }\n \n     @Test\n@@ -100,11 +132,12 @@ public void passwordReset() {\n     public void search() {\n         SearchParameters searchParameters = new SearchParameters();\n \n-        List<UserTO> matchedUsers = restTemplate.postForObject(\n+        UserTOs matchedUsers = restTemplate.postForObject(\n                 BASE_URL + \"user/search\",\n-                searchParameters, List.class);\n+                searchParameters, UserTOs.class);\n \n         assertNotNull(matchedUsers);\n+        assertTrue(matchedUsers.getUsers().isEmpty());\n     }\n \n     @Test"}]}