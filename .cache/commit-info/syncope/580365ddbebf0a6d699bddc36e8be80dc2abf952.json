{"sha":"580365ddbebf0a6d699bddc36e8be80dc2abf952","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU4MDM2NWRkYmViZjBhNmQ2OTliZGRjMzZlOGJlODBkYzJhYmY5NTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-23T15:50:24Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-23T15:50:24Z"},"message":"[SYNCOPE-130] The set of attributes to be sent over connector for update is now checked against the values returned from the same connector\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1401327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ec629eb3778ba14d1265a65dce6359e1fb49087","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3ec629eb3778ba14d1265a65dce6359e1fb49087"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/580365ddbebf0a6d699bddc36e8be80dc2abf952","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/580365ddbebf0a6d699bddc36e8be80dc2abf952","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/580365ddbebf0a6d699bddc36e8be80dc2abf952","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/580365ddbebf0a6d699bddc36e8be80dc2abf952/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b0c333993e5e198ec7fb7cef889e11681c6042dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b0c333993e5e198ec7fb7cef889e11681c6042dd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b0c333993e5e198ec7fb7cef889e11681c6042dd"}],"stats":{"total":64,"additions":58,"deletions":6},"files":[{"sha":"80c4f8136951bd171f341b95c88c370af861a992","filename":"core/src/main/java/org/apache/syncope/core/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":36,"deletions":5,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/580365ddbebf0a6d699bddc36e8be80dc2abf952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/580365ddbebf0a6d699bddc36e8be80dc2abf952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=580365ddbebf0a6d699bddc36e8be80dc2abf952","patch":"@@ -24,6 +24,7 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n@@ -34,6 +35,7 @@\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n+import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.types.PropagationMode;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n@@ -66,6 +68,9 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected ConnInstanceLoader connLoader;\n \n+    @Autowired\n+    protected ConnObjectUtil connObjectUtil;\n+\n     /**\n      * User DAO.\n      */\n@@ -162,7 +167,6 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                         connector.create(task.getPropagationMode(), ObjectClass.ACCOUNT, attributes, null,\n                                 propagationAttempted);\n                     } else {\n-\n                         // 1. check if rename is really required\n                         final Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n \n@@ -175,11 +179,38 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                             attributes.remove(newName);\n                         }\n \n-                        LOG.debug(\"Attributes to be replaced {}\", attributes);\n+                        // 2. check wether anything is actually needing to be propagated, i.e. if there is attribute\n+                        // difference between beforeObj - just read above from the connector - and the values to\n+                        // be propagated\n+                        Map<String, Attribute> originalAttrMap = connObjectUtil.toMap(beforeObj.getAttributes());\n+                        Map<String, Attribute> updateAttrMap = connObjectUtil.toMap(attributes);\n+\n+                        // Only compare attribute from beforeObj that are also being updated\n+                        Set<String> skipAttrNames = originalAttrMap.keySet();\n+                        skipAttrNames.removeAll(updateAttrMap.keySet());\n+                        for (String attrName : new HashSet<String>(skipAttrNames)) {\n+                            originalAttrMap.remove(attrName);\n+                        }\n+\n+                        Set<Attribute> originalAttrs = new HashSet<Attribute>(originalAttrMap.values());\n \n-                        // 2. update with a new \"normalized\" attribute set\n-                        connector.update(task.getPropagationMode(), ObjectClass.ACCOUNT, beforeObj.getUid(),\n-                                attributes, null, propagationAttempted);\n+                        if (originalAttrs.equals(attributes)) {\n+                            LOG.debug(\"Don't need to propagate anything: {} is equal to {}\", originalAttrs, attributes);\n+                        } else {\n+                            LOG.debug(\"Attributes that would be updated {}\", attributes);\n+\n+                            Set<Attribute> strictlyModified = new HashSet<Attribute>();\n+                            for (Attribute attr : attributes) {\n+                                if (!originalAttrs.contains(attr)) {\n+                                    strictlyModified.add(attr);\n+                                }\n+                            }\n+\n+                            LOG.debug(\"Attributes that will be actually propagated for update {}\", strictlyModified);\n+\n+                            connector.update(task.getPropagationMode(), ObjectClass.ACCOUNT, beforeObj.getUid(),\n+                                    strictlyModified, null, propagationAttempted);\n+                        }\n                     }\n                     break;\n "},{"sha":"0e2cf4b569ee11604690a8ecf4f17262b05738b4","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/580365ddbebf0a6d699bddc36e8be80dc2abf952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/580365ddbebf0a6d699bddc36e8be80dc2abf952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=580365ddbebf0a6d699bddc36e8be80dc2abf952","patch":"@@ -511,7 +511,7 @@ protected List<PropagationTask> createTasks(final SyncopeUser user, final String\n \n                     tasks.add(task);\n \n-                    LOG.debug(\"Execution started for {}\", task);\n+                    LOG.debug(\"PropagationTasl created: {}\", task);\n                 }\n             }\n         }"},{"sha":"bc7147efa853273d3aeb9bd6dc37357313e9ce5d","filename":"core/src/main/java/org/apache/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/580365ddbebf0a6d699bddc36e8be80dc2abf952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/580365ddbebf0a6d699bddc36e8be80dc2abf952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=580365ddbebf0a6d699bddc36e8be80dc2abf952","patch":"@@ -398,4 +398,25 @@ private AttributeTO evaluateAttrTemplate(final AbstractAttributableTO attributab\n \n         return result;\n     }\n+\n+    /**\n+     * Transform a\n+     * <code>Collection</code> of {@link Attribute} instances into a {@link Map}. The key to each element in the map is\n+     * the <i>name</i> of an\n+     * <code>Attribute</code>. The value of each element in the map is the\n+     * <code>Attribute</code> instance with that name. <br/> Different from the original because: <ul> <li>map keys are\n+     * transformed toUpperCase()</li> <li>returned map is mutable</li> </ul>\n+     *\n+     * @param attributes set of attribute to transform to a map.\n+     * @return a map of string and attribute.\n+     *\n+     * @see org.identityconnectors.framework.common.objects.AttributeUtil#toMap(java.util.Collection)\n+     */\n+    public Map<String, Attribute> toMap(final Collection<? extends Attribute> attributes) {\n+        final Map<String, Attribute> map = new HashMap<String, Attribute>();\n+        for (Attribute attr : attributes) {\n+            map.put(attr.getName().toUpperCase(), attr);\n+        }\n+        return map;\n+    }\n }"}]}