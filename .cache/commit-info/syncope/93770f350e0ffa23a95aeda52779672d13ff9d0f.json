{"sha":"93770f350e0ffa23a95aeda52779672d13ff9d0f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkzNzcwZjM1MGUwZmZhMjNhOTVhZWRhNTI3Nzk2NzJkMTNmZjlkMGY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-29T15:19:34Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-07-29T15:19:34Z"},"message":"Merge from 0_7_EA\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247065 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7cbe1155fcb8211fcc48a55dbe18cc96260a53a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7cbe1155fcb8211fcc48a55dbe18cc96260a53a6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/93770f350e0ffa23a95aeda52779672d13ff9d0f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/93770f350e0ffa23a95aeda52779672d13ff9d0f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/93770f350e0ffa23a95aeda52779672d13ff9d0f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/93770f350e0ffa23a95aeda52779672d13ff9d0f/comments","author":null,"committer":null,"parents":[{"sha":"90c293009f6db2bbd7b14c1ddb85f1d16addacfe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90c293009f6db2bbd7b14c1ddb85f1d16addacfe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90c293009f6db2bbd7b14c1ddb85f1d16addacfe"}],"stats":{"total":1159,"additions":877,"deletions":282},"files":[{"sha":"8c96d174a9f17f1a43c62433f8891654af3179b6","filename":"archetype/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -19,14 +19,14 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.7-SNAPSHOT</version>\n+        <version>0.7-EA</version>\n     </parent>\n \n     <name>Syncope archetype</name>\n     <description>Syncope archetype</description>\n     <groupId>org.syncope</groupId>\n     <artifactId>syncope-archetype</artifactId>\n-    <version>0.7-SNAPSHOT</version>\n+    <version>0.7-EA</version>\n     <packaging>maven-archetype</packaging>\n \n     <scm>"},{"sha":"652acae4e5084d174f7e360686667b32a98713d3","filename":"archetype/src/main/resources/archetype-resources/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -13,7 +13,7 @@\n     <packaging>pom</packaging>\r\n \r\n     <properties>\r\n-        <syncope.version>0.7-SNAPSHOT</syncope.version>\r\n+        <syncope.version>0.7-EA</syncope.version>\r\n         <hsqldb.version>2.2.4</hsqldb.version>\r\n         <connid.soap.version>1.0</connid.soap.version>\r\n         <connid.db.table.version>1.1</connid.db.table.version>\r"},{"sha":"981102e6f2af9713ffbfb1728c105aebb4796d94","filename":"client/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.7-SNAPSHOT</version>\n+        <version>0.7-EA</version>\n     </parent>\n \n     <name>Syncope client</name>"},{"sha":"38c4dd62be10294f82c79f38ca3c73850ebfd726","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -25,6 +25,8 @@\n \n public abstract class AbstractAttributableTO extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = 4083884098736820255L;\n+\n     private long id;\n \n     private List<AttributeTO> attributes;\n@@ -36,6 +38,8 @@ public abstract class AbstractAttributableTO extends AbstractBaseBean {\n     private Set<String> resources;\n \n     protected AbstractAttributableTO() {\n+        super();\n+\n         attributes = new ArrayList<AttributeTO>();\n         derivedAttributes = new ArrayList<AttributeTO>();\n         virtualAttributes = new ArrayList<AttributeTO>();"},{"sha":"d31299cfe6f2d860b1aeefa846bf24e0fe0b327f","filename":"client/src/main/java/org/syncope/client/to/ConnInstanceTO.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -23,6 +23,8 @@\n \n public class ConnInstanceTO extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = 2707778645445168671L;\n+\n     private Long id;\n \n     private String bundleName;\n@@ -33,11 +35,15 @@ public class ConnInstanceTO extends AbstractBaseBean {\n \n     private Set<ConnConfProperty> configuration;\n \n+    private String syncToken;\n+\n     private Set<ConnectorCapability> capabilities;\n \n     private String displayName;\n \n     public ConnInstanceTO() {\n+        super();\n+\n         configuration = new HashSet<ConnConfProperty>();\n         capabilities = EnumSet.noneOf(ConnectorCapability.class);\n     }\n@@ -86,6 +92,14 @@ public void setConfiguration(Set<ConnConfProperty> configuration) {\n         }\n     }\n \n+    public String getSyncToken() {\n+        return syncToken;\n+    }\n+\n+    public void setSyncToken(String syncToken) {\n+        this.syncToken = syncToken;\n+    }\n+\n     public String getConnectorName() {\n         return connectorName;\n     }"},{"sha":"da83bb6a8b0bc61c6edaf4bbad09fc41c572e935","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -23,6 +23,8 @@\n \n public class UserTO extends AbstractAttributableTO {\n \n+    private static final long serialVersionUID = 7791304495192615740L;\n+\n     private String password;\n \n     private List<MembershipTO> memberships;\n@@ -80,21 +82,25 @@ public void setToken(String token) {\n     }\n \n     public Date getTokenExpireTime() {\n-        return tokenExpireTime;\n+        return tokenExpireTime == null\n+                ? null : new Date(tokenExpireTime.getTime());\n     }\n \n     public void setTokenExpireTime(Date tokenExpireTime) {\n-        this.tokenExpireTime = tokenExpireTime;\n+        if (tokenExpireTime != null) {\n+            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\n+        }\n     }\n \n     @Override\n     public String toString() {\n-        return (new ReflectionToStringBuilder(this,\n+        return new ReflectionToStringBuilder(this,\n                 ToStringStyle.MULTI_LINE_STYLE) {\n \n+            @Override\n             protected boolean accept(Field f) {\n                 return super.accept(f) && !f.getName().equals(\"password\");\n             }\n-        }).toString();\n+        }.toString();\n     }\n }"},{"sha":"173ff97d2ccd45a07a5a017973a21543048f3eeb","filename":"client/src/main/java/org/syncope/types/ConnectorCapability.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConnectorCapability.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConnectorCapability.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConnectorCapability.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -27,7 +27,6 @@ public enum ConnectorCapability {\n     ASYNC_DELETE,\n     SEARCH,\n     RESOLVE,\n-    RECONCILIATION,\n-    ACTIVE_SYNC\n+    SYNC\n \n }"},{"sha":"2aab5d03fab20af5aac6afd5fa6f89b3977fac5c","filename":"console/pom.xml","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.7-SNAPSHOT</version>\n+        <version>0.7-EA</version>\n     </parent>\n \n     <name>Syncope console</name>\n@@ -35,8 +35,6 @@\n         <cargo.servlet.port>9080</cargo.servlet.port>\n         <cargo.log>/var/tmp/syncope-console-cargo.log</cargo.log>\n         <cargo.output>/var/tmp/syncope-console-cargo-output.log</cargo.output>\n-\n-        <bundles.directory>/var/tmp/bundles</bundles.directory>\n     </properties>\n \n     <dependencies>\n@@ -173,6 +171,7 @@\n         <profile>\n             <id>dev</id>\n             <build>\n+                <defaultGoal>clean package cargo:run</defaultGoal>\n                 <plugins>\n                     <plugin>\n                         <groupId>org.onebusaway.plugins</groupId>"},{"sha":"ad5e291aed6b4c50ec24735c5001fafec58c6680","filename":"console/src/main/java/org/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -25,11 +25,11 @@\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.behavior.SimpleAttributeModifier;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.markup.html.form.CheckBoxMultipleChoice;\n import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n@@ -271,6 +271,22 @@ protected List<ConnectorCapability> load() {\n                 new PropertyModel(this, \"selectedCapabilities\"), capabilities);\n         connectorForm.add(capabilitiesPalette);\n \n+\n+        final CheckBox resetToken =\n+                new CheckBox(\"resetToken\", new Model(getString(\"resetToken\")));\n+\n+        resetToken.add(\n+                new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+                    @Override\n+                    protected void onUpdate(AjaxRequestTarget art) {\n+                        if (resetToken.getModelObject()) {\n+                            connectorTO.setSyncToken(null);\n+                        }\n+                    }\n+                });\n+        connectorForm.add(resetToken);\n+\n         connectorForm.add(submit);\n \n         add(connectorForm);"},{"sha":"2884783914bc6f4cd4ecd98d9c05a730b113ea08","filename":"console/src/main/java/org/syncope/console/pages/GenericTasks.java","status":"modified","additions":5,"deletions":40,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGenericTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGenericTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGenericTasks.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -15,8 +15,6 @@\n package org.syncope.console.pages;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n import java.util.List;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -30,14 +28,12 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.markup.repeater.Item;\n-import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n@@ -49,9 +45,9 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n-import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.commons.XMLRolesReader;\n import org.syncope.console.pages.Tasks.DatePropertyColumn;\n+import org.syncope.console.pages.Tasks.TasksProvider;\n import org.syncope.console.rest.TaskRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n@@ -235,7 +231,9 @@ public void onClick(final AjaxRequestTarget target) {\n \n         final AjaxFallbackDefaultDataTable<SchedTaskTO> table =\n                 new AjaxFallbackDefaultDataTable<SchedTaskTO>(\n-                \"datatable\", columns, new TasksProvider(), paginatorRows);\n+                \"datatable\", columns, new TasksProvider(\n+                restClient, paginatorRows, getId(), SchedTaskTO.class),\n+                paginatorRows);\n \n         container = new WebMarkupContainer(\"container\");\n         container.add(table);\n@@ -295,9 +293,7 @@ public void onClick(final AjaxRequestTarget target) {\n \n                     @Override\n                     public Page createPage() {\n-                        return new GTaskModalPage(\n-                                (BasePage) getPage(),\n-                                window,\n+                        return new GTaskModalPage((BasePage) getPage(), window,\n                                 new SchedTaskTO());\n                     }\n                 });\n@@ -311,35 +307,4 @@ public Page createPage() {\n \n         add(createLink);\n     }\n-\n-    private class TasksProvider extends SortableDataProvider<SchedTaskTO> {\n-\n-        private SortableDataProviderComparator<SchedTaskTO> comparator;\n-\n-        public TasksProvider() {\n-            super();\n-            //Default sorting\n-            setSort(\"id\", true);\n-            comparator = new SortableDataProviderComparator<SchedTaskTO>(this);\n-        }\n-\n-        @Override\n-        public Iterator<SchedTaskTO> iterator(int first, int count) {\n-            final List<SchedTaskTO> tasks = restClient.listSchedTasks(\n-                    (first / paginatorRows) + 1, count);\n-\n-            Collections.sort(tasks, comparator);\n-            return tasks.iterator();\n-        }\n-\n-        @Override\n-        public int size() {\n-            return restClient.count(getId());\n-        }\n-\n-        @Override\n-        public IModel<SchedTaskTO> model(final SchedTaskTO object) {\n-            return new CompoundPropertyModel<SchedTaskTO>(object);\n-        }\n-    }\n }"},{"sha":"096f0f51aeecc5e2545817a99d53cfc68ede4edf","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":81,"deletions":26,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -215,8 +215,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                     @Override\n                     protected IAjaxCallDecorator getAjaxCallDecorator() {\n-                        return new AjaxPreprocessingCallDecorator(super.\n-                                getAjaxCallDecorator()) {\n+                        return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()) {\n \n                             @Override\n                             public CharSequence preDecorateScript(\n@@ -231,11 +230,21 @@ public CharSequence preDecorateScript(\n                     }\n                 });\n \n-                DropDownChoice<String> schemaAttrChoice =\n+                final DropDownChoice<String> schemaAttrChoice =\n                         new DropDownChoice<String>(\n                         \"sourceAttrNames\", new PropertyModel<String>(\n                         mappingTO, \"sourceAttrName\"), (IModel) null);\n \n+                schemaAttrChoice.add(\n+                        new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n+\n+                            @Override\n+                            protected void onUpdate(AjaxRequestTarget art) {\n+                                mappingTO.setSourceAttrName(\n+                                        schemaAttrChoice.getModelObject());\n+                            }\n+                        });\n+\n                 schemaAttrChoice.setOutputMarkupId(true);\n \n                 if (mappingTO.getSourceMappingType() == null) {\n@@ -282,35 +291,81 @@ public CharSequence preDecorateScript(\n                         schemaAttrChoice).setRequired(true).\n                         setOutputMarkupId(true));\n \n-                item.add(new TextField(\"destAttrName\",\n-                        new PropertyModel(mappingTO, \"destAttrName\")).\n-                        setRequired(true).\n-                        setLabel(new Model(getString(\"fieldName\"))).\n-                        setOutputMarkupId(true));\n+                final TextField<String> destAttrName = new TextField<String>(\n+                        \"destAttrName\", new PropertyModel(\n+                        mappingTO, \"destAttrName\"));\n+                destAttrName.setRequired(true);\n+                destAttrName.setLabel(new Model(getString(\"fieldName\")));\n+                destAttrName.setOutputMarkupId(true);\n+\n+                destAttrName.add(\n+                        new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n \n-                item.add(new AutoCompleteTextField(\"mandatoryCondition\",\n+                            @Override\n+                            protected void onUpdate(AjaxRequestTarget art) {\n+                                mappingTO.setDestAttrName(\n+                                        destAttrName.getModelObject());\n+                            }\n+                        });\n+                item.add(destAttrName);\n+\n+                final AutoCompleteTextField<String> mandatoryCondirion =\n+                        new AutoCompleteTextField<String>(\"mandatoryCondition\",\n                         new PropertyModel(mappingTO, \"mandatoryCondition\")) {\n \n-                    @Override\n-                    protected Iterator getChoices(final String input) {\n-                        List<String> choices;\n-                        if (\"true\".startsWith(input.toLowerCase())) {\n-                            choices = Collections.singletonList(\"true\");\n-                        } else if (\"false\".startsWith(input.toLowerCase())) {\n-                            choices = Collections.singletonList(\"true\");\n-                        } else {\n-                            choices = Collections.EMPTY_LIST;\n-                        }\n+                            @Override\n+                            protected Iterator getChoices(final String input) {\n+                                List<String> choices;\n+                                if (\"true\".startsWith(input.toLowerCase())) {\n+                                    choices = Collections.singletonList(\"true\");\n+                                } else if (\"false\".startsWith(input.toLowerCase())) {\n+                                    choices = Collections.singletonList(\"true\");\n+                                } else {\n+                                    choices = Collections.EMPTY_LIST;\n+                                }\n \n-                        return choices.iterator();\n-                    }\n-                });\n+                                return choices.iterator();\n+                            }\n+                        };\n+\n+                mandatoryCondirion.add(\n+                        new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n+\n+                            @Override\n+                            protected void onUpdate(AjaxRequestTarget art) {\n+                                mappingTO.setMandatoryCondition(\n+                                        mandatoryCondirion.getModelObject());\n+                            }\n+                        });\n+                item.add(mandatoryCondirion);\n+\n+                final CheckBox accountId = new CheckBox(\"accountId\",\n+                        new PropertyModel(mappingTO, \"accountid\"));\n \n-                item.add(new CheckBox(\"accountId\",\n-                        new PropertyModel(mappingTO, \"accountid\")));\n+                accountId.add(\n+                        new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-                item.add(new CheckBox(\"password\",\n-                        new PropertyModel(mappingTO, \"password\")));\n+                            @Override\n+                            protected void onUpdate(AjaxRequestTarget art) {\n+                                mappingTO.setAccountid(\n+                                        accountId.getModelObject());\n+                            }\n+                        });\n+\n+                item.add(accountId);\n+\n+                final CheckBox password = new CheckBox(\"password\",\n+                        new PropertyModel(mappingTO, \"password\"));\n+                password.add(\n+                        new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+                            @Override\n+                            protected void onUpdate(AjaxRequestTarget art) {\n+                                mappingTO.setPassword(\n+                                        password.getModelObject());\n+                            }\n+                        });\n+                item.add(password);\n             }\n         };\n         mappings.setReuseItems(true);"},{"sha":"8a33d8a59ba6182a0ba4905921b6e2db21fe0bdd","filename":"console/src/main/java/org/syncope/console/pages/STaskModalPage.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -27,7 +27,6 @@\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n@@ -109,7 +108,7 @@ protected Map<Long, String> load() {\n         profile.add(resource);\n \n         final CheckBox updates = new CheckBox(\"updateIdentities\",\n-                Model.of(taskTO.isUpdateIdentities()));\n+                new PropertyModel<Boolean>(taskTO, \"updateIdentities\"));\n         profile.add(updates);\n \n         final Palette<String> defaultResources = new Palette("},{"sha":"929d0ced5d95908f5e4d2e7efb1a7bd41ac686f4","filename":"console/src/main/java/org/syncope/console/pages/SchedTaskModalPage.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -23,11 +23,13 @@\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n+import org.springframework.util.StringUtils;\n import org.syncope.client.to.SchedTaskTO;\n import org.syncope.client.to.SyncTaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -143,16 +145,16 @@ protected void onSubmit(\n                     final Form form) {\n \n                 SchedTaskTO taskTO = (SchedTaskTO) form.getModelObject();\n-                if (taskTO.getCronExpression() != null\n-                        && taskTO.getCronExpression().isEmpty()) {\n+                if (!StringUtils.hasText(taskTO.getCronExpression())\n+                        || \"UNSCHEDULE\".equals(taskTO.getCronExpression())) {\n                     taskTO.setCronExpression(null);\n-                }\n-\n-                try {\n+                } else {\n                     taskTO.setCronExpression(getCron(\n                             seconds, minutes, hours,\n                             daysOfMonth, months, daysOfWeek));\n+                }\n \n+                try {\n                     if (taskTO.getId() > 0) {\n                         // update task\n                         if (taskTO instanceof SyncTaskTO) {"},{"sha":"028c92ed4c05f4092a7b2e07359c8b880b2a755c","filename":"console/src/main/java/org/syncope/console/pages/Schema.java","status":"modified","additions":23,"deletions":29,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchema.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -34,6 +34,7 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.repeater.Item;\n@@ -48,6 +49,7 @@\n import org.syncope.client.to.VirtualSchemaTO;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n+import org.syncope.console.commons.SelectChoiceRenderer;\n import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.rest.SchemaRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n@@ -306,8 +308,7 @@ public Schema(PageParameters parameters) {\n                 tableRoles,\n                 \"RolesPaginatorForm\",\n                 \"rolePageRows\",\n-                Constants.PREF_ROLE_SCHEMA_PAGINATOR_ROWS,\n-                rolePageRows));\n+                Constants.PREF_ROLE_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> columnsRolesDer = getColumnsForSchema(\n                 roleDerivedSchemasContainer,\n@@ -328,8 +329,7 @@ public Schema(PageParameters parameters) {\n                 tableRolesDer,\n                 \"RolesDerPaginatorForm\",\n                 \"roleDerPageRows\",\n-                Constants.PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS,\n-                roleDerPageRows));\n+                Constants.PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> columnsRolesVir = getColumnsForSchema(\n                 roleVirtualSchemasContainer,\n@@ -350,8 +350,7 @@ public Schema(PageParameters parameters) {\n                 tableRolesVir,\n                 \"RolesVirPaginatorForm\",\n                 \"roleVirPageRows\",\n-                Constants.PREF_ROLE_VIR_SCHEMA_PAGINATOR_ROWS,\n-                roleVirPageRows));\n+                Constants.PREF_ROLE_VIR_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> userColumns = getColumnsForSchema(\n                 userSchemasContainer,\n@@ -373,8 +372,7 @@ public Schema(PageParameters parameters) {\n                 tableUsers,\n                 \"UsersPaginatorForm\",\n                 \"userSchemaPageRows\",\n-                Constants.PREF_USER_SCHEMA_PAGINATOR_ROWS,\n-                userSchemaPageRows));\n+                Constants.PREF_USER_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> columnsUsersDer = getColumnsForSchema(\n                 userDerivedSchemasContainer,\n@@ -395,8 +393,7 @@ public Schema(PageParameters parameters) {\n                 tableUsersDer,\n                 \"UsersDerPaginatorForm\",\n                 \"userDerSchemaPageRows\",\n-                Constants.PREF_USER_DER_SCHEMA_PAGINATOR_ROWS,\n-                userDerSchemaPageRows));\n+                Constants.PREF_USER_DER_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> columnsUsersVir = getColumnsForSchema(\n                 userVirtualSchemasContainer,\n@@ -417,8 +414,7 @@ public Schema(PageParameters parameters) {\n                 tableUsersVir,\n                 \"UsersVirPaginatorForm\",\n                 \"userVirSchemaPageRows\",\n-                Constants.PREF_USER_VIR_SCHEMA_PAGINATOR_ROWS,\n-                userVirSchemaPageRows));\n+                Constants.PREF_USER_VIR_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> membershipsColumns = getColumnsForSchema(\n                 membershipSchemaContainer,\n@@ -440,8 +436,7 @@ public Schema(PageParameters parameters) {\n                 tableMemberships,\n                 \"MembershipPaginatorForm\",\n                 \"membershipPageRows\",\n-                Constants.PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS,\n-                membershipPageRows));\n+                Constants.PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> columnsMembershipsDer = getColumnsForSchema(\n                 membershipDerivedSchemaContainer,\n@@ -464,8 +459,7 @@ public Schema(PageParameters parameters) {\n                 tableMembershipsDer,\n                 \"MembershipDerPaginatorForm\",\n                 \"membershipDerPageRows\",\n-                Constants.PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS,\n-                membershipDerPageRows));\n+                Constants.PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS));\n \n         List<IColumn> columnsMembershipsVir = getColumnsForSchema(\n                 membershipVirtualSchemaContainer,\n@@ -488,8 +482,7 @@ public Schema(PageParameters parameters) {\n                 tableMembershipsVir,\n                 \"MembershipVirPaginatorForm\",\n                 \"membershipVirPageRows\",\n-                Constants.PREF_MEMBERSHIP_VIR_SCHEMA_PAGINATOR_ROWS,\n-                membershipVirPageRows));\n+                Constants.PREF_MEMBERSHIP_VIR_SCHEMA_PAGINATOR_ROWS));\n \n         roleSchemasContainer.add(tableRoles);\n         roleSchemasContainer.setOutputMarkupId(true);\n@@ -637,12 +630,12 @@ public Schema(PageParameters parameters) {\n         editMembershipVirtualSchemaWin.setCookieName(\"modal-18\");\n \n         setWindowClosedCallback(createUserSchemaWin, userSchemasContainer);\n-        \n+\n         setWindowClosedCallback(editUserSchemaWin, userSchemasContainer);\n \n         setWindowClosedCallback(createUserDerivedSchemaWin,\n                 userDerivedSchemasContainer);\n-        \n+\n         setWindowClosedCallback(createUserVirtualSchemaWin,\n                 userVirtualSchemasContainer);\n \n@@ -676,7 +669,7 @@ public Schema(PageParameters parameters) {\n \n         setWindowClosedCallback(createMembershipDerivedSchemaWin,\n                 membershipDerivedSchemaContainer);\n-        \n+\n         setWindowClosedCallback(createMembershipVirtualSchemaWin,\n                 membershipVirtualSchemaContainer);\n \n@@ -1076,32 +1069,33 @@ private Form getPaginatorForm(\n             final AjaxFallbackDefaultDataTable dataTable,\n             final String formname,\n             final String rowname,\n-            final String rowsPerPagePrefName,\n-            final int rowsPerPagePrefValue) {\n+            final String rowsPerPagePrefName) {\n \n         Form usersPaginatorForm = new Form(formname);\n \n-        final DropDownChoice usersRowsChooser = new DropDownChoice(\n+        final DropDownChoice rowChooser = new DropDownChoice(\n                 \"rowsChooser\",\n                 new PropertyModel(this, rowname),\n-                prefMan.getPaginatorChoices());\n+                prefMan.getPaginatorChoices(),\n+                new SelectChoiceRenderer());\n \n-        usersRowsChooser.add(\n+        rowChooser.add(\n                 new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n                         prefMan.set(getWebRequestCycle().getWebRequest(),\n                                 getWebRequestCycle().getWebResponse(),\n                                 rowsPerPagePrefName,\n-                                String.valueOf(rowsPerPagePrefValue));\n-                        dataTable.setRowsPerPage(rowsPerPagePrefValue);\n+                                String.valueOf(rowChooser.getInput()));\n+                        dataTable.setRowsPerPage(\n+                                Integer.parseInt(rowChooser.getInput()));\n \n                         target.addComponent(webContainer);\n                     }\n                 });\n \n-        usersPaginatorForm.add(usersRowsChooser);\n+        usersPaginatorForm.add(rowChooser);\n \n         return usersPaginatorForm;\n     }"},{"sha":"b53d2844914e96efea733175247318a008cb0009","filename":"console/src/main/java/org/syncope/console/pages/SyncTasks.java","status":"modified","additions":6,"deletions":42,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTasks.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -15,8 +15,6 @@\n package org.syncope.console.pages;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n import java.util.List;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -30,14 +28,12 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.markup.repeater.Item;\n-import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n@@ -49,9 +45,9 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n-import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.commons.XMLRolesReader;\n import org.syncope.console.pages.Tasks.DatePropertyColumn;\n+import org.syncope.console.pages.Tasks.TasksProvider;\n import org.syncope.console.rest.TaskRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n@@ -179,8 +175,8 @@ public void onClick(final AjaxRequestTarget target) {\n                             error(scce.getMessage());\n                         }\n \n-                        target.addComponent(getPage().get(\"feedback\"));\n                         target.addComponent(container);\n+                        target.addComponent(getPage().get(\"feedback\"));\n                     }\n                 };\n \n@@ -235,7 +231,9 @@ public void onClick(final AjaxRequestTarget target) {\n \n         final AjaxFallbackDefaultDataTable<SyncTaskTO> table =\n                 new AjaxFallbackDefaultDataTable<SyncTaskTO>(\n-                \"datatable\", columns, new TasksProvider(), paginatorRows);\n+                \"datatable\", columns, new TasksProvider(\n+                restClient, paginatorRows, id, SyncTaskTO.class),\n+                paginatorRows);\n \n         container = new WebMarkupContainer(\"container\");\n         container.add(table);\n@@ -295,9 +293,7 @@ public void onClick(final AjaxRequestTarget target) {\n \n                     @Override\n                     public Page createPage() {\n-                        return new STaskModalPage(\n-                                (BasePage) getPage(),\n-                                window,\n+                        return new STaskModalPage((BasePage) getPage(), window,\n                                 new SyncTaskTO());\n                     }\n                 });\n@@ -311,36 +307,4 @@ public Page createPage() {\n \n         add(createLink);\n     }\n-\n-    private class TasksProvider extends SortableDataProvider<SyncTaskTO> {\n-\n-        private SortableDataProviderComparator<SyncTaskTO> comparator;\n-\n-        public TasksProvider() {\n-            super();\n-            //Default sorting\n-            setSort(\"id\", true);\n-            comparator =\n-                    new SortableDataProviderComparator<SyncTaskTO>(this);\n-        }\n-\n-        @Override\n-        public Iterator<SyncTaskTO> iterator(int first, int count) {\n-            final List<SyncTaskTO> tasks = restClient.listSyncTasks(\n-                    (first / paginatorRows) + 1, count);\n-\n-            Collections.sort(tasks, comparator);\n-            return tasks.iterator();\n-        }\n-\n-        @Override\n-        public int size() {\n-            return restClient.count(getId());\n-        }\n-\n-        @Override\n-        public IModel<SyncTaskTO> model(final SyncTaskTO object) {\n-            return new CompoundPropertyModel<SyncTaskTO>(object);\n-        }\n-    }\n }"},{"sha":"b23b1bb26b1d850a09fd03178895860958543205","filename":"console/src/main/java/org/syncope/console/pages/Tasks.java","status":"modified","additions":79,"deletions":3,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -15,7 +15,9 @@\n package org.syncope.console.pages;\n \n import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.List;\n@@ -26,15 +28,17 @@\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.util.convert.converters.DateConverter;\n+import org.syncope.client.to.SchedTaskTO;\n import org.syncope.client.to.TaskExecTO;\n import org.syncope.client.to.TaskTO;\n-import org.syncope.console.SyncopeApplication;\n import org.syncope.console.SyncopeSession;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.commons.SelectOption;\n+import org.syncope.console.rest.TaskRestClient;\n \n public class Tasks extends BasePage {\n \n@@ -68,8 +72,7 @@ public TaskExecutionsProvider(TaskTO taskTO) {\n             //Default sorting\n             this.taskTO = taskTO;\n             setSort(\"startDate\", true);\n-            comparator =\n-                    new SortableDataProviderComparator<TaskExecTO>(this);\n+            comparator = new SortableDataProviderComparator<TaskExecTO>(this);\n         }\n \n         @Override\n@@ -146,4 +149,77 @@ public void populateItem(\n             }\n         }\n     }\n+\n+    public static class TasksProvider<T extends SchedTaskTO>\n+            extends SortableDataProvider<T> {\n+\n+        private SortableDataProviderComparator<T> comparator;\n+\n+        private TaskRestClient restClient;\n+\n+        private int paginatorRows;\n+\n+        private String id;\n+\n+        private Class<T> reference;\n+\n+        public TasksProvider(\n+                final TaskRestClient restClient,\n+                final int paginatorRows,\n+                final String id,\n+                final Class<T> reference) {\n+            super();\n+            //Default sorting\n+            setSort(\"id\", true);\n+            comparator = new SortableDataProviderComparator<T>(this);\n+            this.paginatorRows = paginatorRows;\n+            this.restClient = restClient;\n+            this.id = id;\n+            this.reference = reference;\n+        }\n+\n+        @Override\n+        public Iterator<T> iterator(int first, int count) {\n+\n+            final List<T> tasks = new ArrayList<T>();\n+\n+            for (T task : (List<T>) restClient.listSchedTasks(\n+                    reference, (first / paginatorRows) + 1, count)) {\n+                if (task.getLastExec() == null\n+                        && task.getExecutions() != null\n+                        && !task.getExecutions().isEmpty()) {\n+\n+                    Collections.sort(task.getExecutions(),\n+                            new Comparator<TaskExecTO>() {\n+\n+                                @Override\n+                                public int compare(\n+                                        final TaskExecTO left,\n+                                        final TaskExecTO right) {\n+                                    return left.getStartDate().\n+                                            compareTo(right.getStartDate());\n+                                }\n+                            });\n+\n+                    task.setLastExec(\n+                            task.getExecutions().get(\n+                            task.getExecutions().size() - 1).getStartDate());\n+                }\n+                tasks.add(task);\n+            }\n+\n+            Collections.sort(tasks, comparator);\n+            return tasks.iterator();\n+        }\n+\n+        @Override\n+        public int size() {\n+            return restClient.count(id);\n+        }\n+\n+        @Override\n+        public IModel<SchedTaskTO> model(final SchedTaskTO object) {\n+            return new CompoundPropertyModel<SchedTaskTO>(object);\n+        }\n+    }\n }"},{"sha":"1f293a30035fff5252dc5eeb6a00eb58b7ded5cb","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -67,6 +67,7 @@\n import org.syncope.console.commons.SearchConditionWrapper;\n import org.syncope.console.commons.SearchConditionWrapper.FilterType;\n import org.syncope.console.commons.SearchConditionWrapper.OperationType;\n+import org.syncope.console.commons.SelectChoiceRenderer;\n import org.syncope.console.commons.SortableUserProviderComparator;\n import org.syncope.console.rest.ResourceRestClient;\n import org.syncope.console.rest.RoleRestClient;\n@@ -326,17 +327,19 @@ public Page createPage() {\n         final DropDownChoice<Integer> rowsChooser =\n                 new DropDownChoice<Integer>(\"rowsChooser\",\n                 new PropertyModel(this, \"paginatorRows\"),\n-                prefMan.getPaginatorChoices());\n+                prefMan.getPaginatorChoices(),\n+                new SelectChoiceRenderer());\n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n                 prefMan.set(getWebRequestCycle().getWebRequest(),\n                         getWebRequestCycle().getWebResponse(),\n                         Constants.PREF_USERS_PAGINATOR_ROWS,\n-                        String.valueOf(paginatorRows));\n+                        String.valueOf(rowsChooser.getInput()));\n \n-                listTable.setRowsPerPage(paginatorRows);\n+                listTable.setRowsPerPage(\n+                        Integer.parseInt(rowsChooser.getInput()));\n \n                 target.addComponent(listContainer);\n             }"},{"sha":"c04c1e7214d47c5cb4326d7e1bb75e771ca58bc5","filename":"console/src/main/java/org/syncope/console/rest/TaskRestClient.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -66,24 +66,18 @@ public Integer count(final String kind) {\n      * @param size per page.\n      * @return paginated list.\n      */\n-    public List<SchedTaskTO> listSchedTasks(\n-            final int page, final int size) {\n-        return Arrays.asList(restTemplate.getForObject(\n-                baseURL + \"task/sched/list/{page}/{size}.json\",\n-                SchedTaskTO[].class, page, size));\n-    }\n-\n-    /**\n-     * Return a paginated list of sync tasks.\n-     * @param page number.\n-     * @param size per page.\n-     * @return paginated list.\n-     */\n-    public List<SyncTaskTO> listSyncTasks(\n-            final int page, final int size) {\n-        return Arrays.asList(restTemplate.getForObject(\n-                baseURL + \"task/sync/list/{page}/{size}.json\",\n-                SyncTaskTO[].class, page, size));\n+    public <T extends SchedTaskTO> List<T> listSchedTasks(\n+            final Class<T> reference, final int page, final int size) {\n+\n+        if (SyncTaskTO.class.getName().equals(reference.getName())) {\n+            return (List<T>) Arrays.asList(restTemplate.getForObject(\n+                    baseURL + \"task/sync/list/{page}/{size}.json\",\n+                    SyncTaskTO[].class, page, size));\n+        } else {\n+            return (List<T>) Arrays.asList(restTemplate.getForObject(\n+                    baseURL + \"task/sched/list/{page}/{size}.json\",\n+                    SchedTaskTO[].class, page, size));\n+        }\n     }\n \n     /**\n@@ -163,6 +157,7 @@ public SyncTaskTO updateSyncTask(final SyncTaskTO taskTO) {\n         taskMod.setCronExpression(taskTO.getCronExpression());\n         taskMod.setDefaultResources(taskTO.getDefaultResources());\n         taskMod.setDefaultRoles(taskTO.getDefaultRoles());\n+        taskMod.setUpdateIdentities(taskTO.isUpdateIdentities());\n \n         return restTemplate.postForObject(baseURL\n                 + \"task/update/sync\", taskMod, SyncTaskTO.class);"},{"sha":"f55cb41d8573ec19922f76cbd40b60dbfebd7510","filename":"console/src/main/resources/org/syncope/console/pages/ConnectorModalPage.html","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.html?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -51,6 +51,11 @@\n                     <td><wicket:message key=\"version\"/></td>\n                 <td><input type=\"text\" id=\"version\" class=\"text ui-widget-content ui-corner-all\" wicket:id=\"version\" /></td>\n                 </tr>\n+                <tr>\n+                    <td><wicket:message key=\"resetToken\"/></td>\n+                <td><input type=\"checkbox\" class=\"text ui-widget-content ui-corner-all\"  wicket:id=\"resetToken\"/></td>\n+                </tr>\n+\n                 <tbody wicket:id=\"propertiesContainer\">\n                     <tr wicket:id=\"connectorProperties\">\n                         <td wicket:id=\"connPropAttrSchema\"/>"},{"sha":"4f536862fe62cebb903e1ddebd1ebcbf64ec7bbe","filename":"console/src/main/resources/org/syncope/console/pages/ConnectorModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.properties?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -10,3 +10,4 @@ edit_attribute=Edit attribute\n serviceName=Service name\n endpoint=Endpoint\n title=Connectors\n+resetToken=Reset Token"},{"sha":"5604f88842f9ca63e435d109f304188edb91b45d","filename":"console/src/main/resources/org/syncope/console/pages/ConnectorModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage_it.properties?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -10,3 +10,4 @@ title=Connettori\n tab1=Generale\n tab2=Capabilities\n displayName=Nome visualizzato\n+resetToken=Reset Token"},{"sha":"9d9d57ce4053bcb105f639a5424c91b427e0b99c","filename":"console/src/main/resources/org/syncope/console/pages/GTaskModalPage.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage.properties?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -8,7 +8,7 @@ lastExec=Last Execution\n nextExec=Next Execution\n cron=Schedule (seconds, minutes, hours, days of month, months, days of week)\n templates=Remove task from scheduler / Use a template to schedule\n-apply=Apply changes\n+apply=Save\n startDate=Start date\n endDate=End date\n status=Status"},{"sha":"b825926532526f60bcf59e51cbf4af71f8b30bfb","filename":"console/src/main/resources/org/syncope/console/pages/GTaskModalPage_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage_it.properties?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -8,7 +8,7 @@ lastExec=Ultima Esecuzuone\n nextExec=Prossima Esecuzione\n cron=Schedule (secondi, minuti, ore, giorni del mese, mesi, giorni della settimana)\n templates=Rimuovi task dallo scheduler / Ustilizza un template per schedulare\n-apply=Applica le modifiche\n+apply=Salva\n startDate=Data di avvio\n endDate=Data di conclusione\n status=Stato"},{"sha":"243b8d8423c6b4932b721fbcb9d1e88f2049f899","filename":"console/src/main/resources/org/syncope/console/pages/STaskModalPage.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage.properties?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -11,7 +11,7 @@ nextExec=Next Execution\n updates=Update Matched Identities\n cron=Schedule (seconds, minutes, hours, days of month, months, days of week)\n templates=Remove task from scheduler / Use a template to schedule\n-apply=Apply changes\n+apply=Save\n startDate=Start date\n endDate=End date\n status=Status"},{"sha":"43f13edb9ffff7f21e40ae46e6ab67d6ee9d7505","filename":"console/src/main/resources/org/syncope/console/pages/STaskModalPage_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSTaskModalPage_it.properties?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -11,7 +11,7 @@ nextExec=Prossima Esecuzione\n updates=Aggiorna Identit\\u00e0 Esistenti\n cron=Schedule (secondi, minuti, ore, giorni del mese, mesi, giorni della settimana)\n templates=Rimuovi task dallo scheduler / Ustilizza un template per schedulare\n-apply=Applica le modifiche\n+apply=Salva\n startDate=Data di avvio\n endDate=Data di conclusione\n status=Stato"},{"sha":"5f711dedffef76bf10cb093e68e5248d0cc0b57a","filename":"core/pom.xml","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.7-SNAPSHOT</version>\n+        <version>0.7-EA</version>\n     </parent>\n \n     <name>Syncope core</name>\n@@ -40,8 +40,6 @@\n         <logfile.connid>/var/tmp/syncope-core-connid.log</logfile.connid>\n         <logfile.test>/var/tmp/syncope-core-test.log</logfile.test>\n         <logfile.monitor>/var/tmp/syncope-core-monitor.log</logfile.monitor>\n-\n-        <bundles.directory>/var/tmp/bundles</bundles.directory>\n     </properties>\n \n     <dependencies>"},{"sha":"71a69aadad122130a92eec636514119053df78ce","filename":"core/src/main/java/org/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -46,6 +46,10 @@ public class ConnInstanceLoader extends AbstractLoader {\n     @Autowired\n     private ConfDAO confDAO;\n \n+    public static String getBeanName(final Long connInstanceId) {\n+        return \"connInstance\" + connInstanceId;\n+    }\n+\n     public ConnectorInfoManager getConnectorManager()\n             throws NotFoundException, MissingConfKeyException {\n \n@@ -99,20 +103,18 @@ public ConnectorFacadeProxy getConnector(final String id)\n     public void registerConnector(final ConnInstance instance)\n             throws NotFoundException {\n \n-        if (getBeanFactory().containsSingleton(\n-                \"connInstance\" + instance.getId())) {\n-\n-            unregisterConnector(\"connInstance\" + instance.getId());\n+        if (getBeanFactory().containsSingleton(getBeanName(instance.getId()))) {\n+            unregisterConnector(getBeanName(instance.getId()));\n         }\n \n         ConnectorFacadeProxy connector =\n                 new ConnectorFacadeProxy(instance, this);\n         LOG.debug(\"Connector to be registered: {}\", connector);\n \n-        getBeanFactory().registerSingleton(\"connInstance\" + instance.getId(),\n+        getBeanFactory().registerSingleton(getBeanName(instance.getId()),\n                 connector);\n         LOG.debug(\"Successfully registered bean {}\",\n-                \"connInstance\" + instance.getId());\n+                getBeanName(instance.getId()));\n     }\n \n     public void unregisterConnector(final String id) {"},{"sha":"892736df10ce466bec18edaf69c0a734fb62da6f","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -95,12 +95,14 @@ public void registerJob(final SchedTask task)\n         getBeanFactory().registerSingleton(getJobDetailName(task.getId()),\n                 jobDetailFactory);\n \n-        if (task.getCronExpression() != null) {\n-            JobDetail jobDetail = (JobDetail) ctx.getBean(\n-                    getJobDetailName(task.getId()));\n-            jobDetail.setName(getJobDetailName(task.getId()));\n-            jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n-\n+        JobDetail jobDetail = (JobDetail) ctx.getBean(\n+                getJobDetailName(task.getId()));\n+        jobDetail.setName(getJobDetailName(task.getId()));\n+        jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n+\n+        if (task.getCronExpression() == null) {\n+            scheduler.getScheduler().addJob(jobDetail, true);\n+        } else {\n             CronTriggerBean cronTrigger = new CronTriggerBean();\n             cronTrigger.setName(getTriggerName(task.getId()));\n             cronTrigger.setCronExpression(task.getCronExpression());"},{"sha":"e93a538e0385f65d84d20cf9139f4f5f1453d870","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -34,6 +34,8 @@ public abstract class AbstractBaseBean implements Serializable {\n     protected static final Logger LOG = LoggerFactory.getLogger(\n             AbstractBaseBean.class);\n \n+    private static final long serialVersionUID = -9017214159540857901L;\n+\n     /**\n      * @param property the integer representing a boolean value\n      * @return the boolean value corresponding to the property param"},{"sha":"bf6173ea205f11f023e01c51a88804bcc21667d8","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -76,7 +76,7 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n         JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n \n         Set<String> attributeNames;\n-        ConnInstance connectorInstance;\n+        ConnInstance connInstance;\n         ConnectorFacadeProxy connector;\n         Set<Attribute> attributes;\n         String accountLink;\n@@ -126,10 +126,10 @@ protected <T extends AbstractAttributable> List<Object> retrieveValues(\n             if (attributeNames != null && accountId != null) {\n                 LOG.debug(\"Get object attribute for entry {}\", accountId);\n \n-                connectorInstance = resource.getConnector();\n+                connInstance = resource.getConnector();\n \n                 connector = connInstanceLoader.getConnector(\n-                        \"connInstance\" + connectorInstance.getId());\n+                        ConnInstanceLoader.getBeanName(connInstance.getId()));\n \n                 try {\n                     attributes = connector.getObjectAttributes("},{"sha":"c3cb3fd8ba5a4518bcdc8e3ac7891f71b688188b","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnInstance.java","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import com.thoughtworks.xstream.XStream;\n import java.beans.XMLDecoder;\n import java.beans.XMLEncoder;\n import java.io.ByteArrayInputStream;\n@@ -33,13 +34,19 @@\n import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.ConnectorCapability;\n \n @Entity\n public class ConnInstance extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -2294708794497208872L;\n+\n     @Id\n     private Long id;\n \n@@ -84,6 +91,9 @@ public class ConnInstance extends AbstractBaseBean {\n \n     private String displayName;\n \n+    @Lob\n+    private String serializedSyncToken;\n+\n     /**\n      * Provisioning target resources associated to the connector.\n      * The connector can be considered the resource's type.\n@@ -93,6 +103,8 @@ public class ConnInstance extends AbstractBaseBean {\n     private List<TargetResource> resources;\n \n     public ConnInstance() {\n+        super();\n+\n         capabilities = EnumSet.noneOf(ConnectorCapability.class);\n     }\n \n@@ -209,4 +221,42 @@ public void setCapabilities(final Set<ConnectorCapability> capabilities) {\n             this.capabilities.addAll(capabilities);\n         }\n     }\n+\n+    public String getSerializedSyncToken() {\n+        return serializedSyncToken;\n+    }\n+\n+    public void setSerializedSyncToken(final String serializedSyncToken) {\n+        this.serializedSyncToken = serializedSyncToken;\n+    }\n+\n+    public SyncToken getSyncToken() {\n+        SyncToken result = null;\n+\n+        if (serializedSyncToken != null) {\n+            ConfigurableApplicationContext context =\n+                    ApplicationContextManager.getApplicationContext();\n+            XStream xStream = context.getBean(XStream.class);\n+            try {\n+                result = (SyncToken) xStream.fromXML(\n+                        URLDecoder.decode(serializedSyncToken, \"UTF-8\"));\n+            } catch (Throwable t) {\n+                LOG.error(\"During attribute deserialization\", t);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public void setSyncToken(final SyncToken syncToken) {\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+        XStream xStream = context.getBean(XStream.class);\n+        try {\n+            serializedSyncToken = URLEncoder.encode(\n+                    xStream.toXML(syncToken), \"UTF-8\");\n+        } catch (Throwable t) {\n+            LOG.error(\"During attribute serialization\", t);\n+        }\n+    }\n }"},{"sha":"9de564ad74c28542b1337b6ae30c219a964e6f38","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -159,6 +159,18 @@ public List<SchemaMapping> getMappings(final String sourceAttrName,\n         return result;\n     }\n \n+    public SchemaMapping getAccountIdMapping() {\n+        SchemaMapping result = null;\n+\n+        for (SchemaMapping mapping : mappings) {\n+            if (mapping.isAccountid()) {\n+                result = mapping;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public boolean removeMapping(SchemaMapping mapping) {\n         return mappings == null || mappings.remove(mapping);\n     }"},{"sha":"3e413639180068974f1da6f38e109fb43158c4fd","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskExecDAOImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -17,9 +17,11 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.TaskExecDAO;\n+import org.syncope.core.scheduling.AbstractJob;\n \n @Repository\n public class TaskExecDAOImpl extends AbstractDAOImpl\n@@ -66,7 +68,17 @@ public <T extends Task> List<TaskExec> findAll(Class<T> reference) {\n         return query.getResultList();\n     }\n \n+    /**\n+     * This method has an explicit @Transactional annotation because it is called\n+     * by AbstractJob.\n+     * \n+     * @see AbstractJob\n+     * \n+     * @param execution entity to be merged\n+     * @return the same entity, updated\n+     */\n     @Override\n+    @Transactional(rollbackFor = {Throwable.class})\n     public TaskExec save(final TaskExec execution) {\n         return entityManager.merge(execution);\n     }"},{"sha":"3f75dbbe0cf697809974e34f87e9c37c58a92b82","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -116,16 +116,13 @@ public List<SyncopeUser> findByDerAttrValue(\n         final StringBuilder querystring = new StringBuilder();\n \n         for (String clause : getWhereClause(schema.getExpression(), value)) {\n-\n             if (querystring.length() > 0) {\n                 querystring.append(\" INTERSECT \");\n             }\n \n             querystring.append(\"SELECT a.owner_id \").\n                     append(\"FROM uattr a, uattrvalue v, uschema s \").\n                     append(\"WHERE \").append(clause);\n-\n-\n         }\n \n         LOG.debug(\"Execute query {}\", querystring);\n@@ -136,7 +133,6 @@ public List<SyncopeUser> findByDerAttrValue(\n         final List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n \n         SyncopeUser user;\n-\n         for (Object userId : query.getResultList()) {\n             user = find(Long.parseLong(userId.toString()));\n             if (!result.contains(user)) {"},{"sha":"215d4ba60568571382df7c0ac1a18c87103bffe0","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -16,8 +16,10 @@\n \n import java.io.File;\n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javassist.NotFoundException;\n import org.identityconnectors.common.security.GuardedByteArray;\n@@ -32,6 +34,9 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -292,6 +297,33 @@ public void delete(final PropagationMode propagationMode,\n         }\n     }\n \n+    public List<SyncDelta> sync(final SyncToken token) {\n+        final List<SyncDelta> result = new ArrayList<SyncDelta>();\n+\n+        if (capabitilies.contains(ConnectorCapability.SYNC)) {\n+            connector.sync(ObjectClass.ACCOUNT, token,\n+                    new SyncResultsHandler() {\n+\n+                        @Override\n+                        public boolean handle(SyncDelta delta) {\n+                            return result.add(delta);\n+                        }\n+                    }, null);\n+        }\n+\n+        return result;\n+    }\n+\n+    public SyncToken getLatestSyncToken() {\n+        SyncToken result = null;\n+\n+        if (capabitilies.contains(ConnectorCapability.SYNC)) {\n+            result = connector.getLatestSyncToken(ObjectClass.ACCOUNT);\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Get remote object.\n      */"},{"sha":"5bb969dc3a75ef1118cc048dfce9f0be64ee5af9","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -590,16 +590,15 @@ public TaskExec propagate(final PropagationTask task,\n         Set<String> propagationAttempted = new HashSet<String>();\n \n         try {\n-            ConnInstance connectorInstance =\n+            ConnInstance connInstance =\n                     task.getResource().getConnector();\n \n-            ConnectorFacadeProxy connector =\n-                    connInstanceLoader.getConnector(\n-                    \"connInstance\" + connectorInstance.getId());\n+            ConnectorFacadeProxy connector = connInstanceLoader.getConnector(\n+                    ConnInstanceLoader.getBeanName(connInstance.getId()));\n \n             if (connector == null) {\n                 LOG.error(\"Connector instance bean \"\n-                        + connectorInstance.getId().toString()\n+                        + ConnInstanceLoader.getBeanName(connInstance.getId())\n                         + \" not found\");\n \n                 throw new NoSuchBeanDefinitionException("},{"sha":"443e8d055d7b01265cced26b9acf1cb75118a341","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -339,13 +339,13 @@ public TaskExecTO execute(\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n \n-        TaskExec execution = null;\n+        TaskExecTO result = null;\n         LOG.debug(\"Execution started for {}\", task);\n         switch (getTaskUtil(task)) {\n             case PROPAGATION:\n-                execution = propagationManager.propagate(\n+                final TaskExec execution = propagationManager.propagate(\n                         (PropagationTask) task, new Date());\n-                execution = taskExecDAO.find(execution.getId());\n+                result = binder.getTaskExecutionTO(execution);\n                 break;\n \n             case SCHED:\n@@ -373,14 +373,16 @@ public TaskExecTO execute(\n                     throw scce;\n                 }\n \n-                // Re-read to get the latest execution started\n-                task = taskDAO.find(taskId);\n-                execution = taskExecDAO.findLatestStarted(task);\n+                result = new TaskExecTO();\n+                result.setTask(taskId);\n+                result.setStartDate(new Date());\n+                result.setStatus(\"JOB_FIRED\");\n+                result.setMessage(\"Job fired; waiting for results...\");\n                 break;\n         }\n-        LOG.debug(\"Execution finished for {}, {}\", task, execution);\n+        LOG.debug(\"Execution finished for {}, {}\", task, result);\n \n-        return binder.getTaskExecutionTO(execution);\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")"},{"sha":"67ff4322111864ecd34ab45fdf4cac5d1ae21380","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -233,6 +233,7 @@ public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/count\")\n+    @Transactional(readOnly = true)\n     public ModelAndView count() {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n                 EntitlementUtil.getOwnedEntitlementNames());\n@@ -343,7 +344,8 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         }\n \n         List<SyncopeUser> matchingUsers = userSearchDAO.search(\n-                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition);\n+                EntitlementUtil.getRoleIds(EntitlementUtil.\n+                getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, workflow));"},{"sha":"b27141875794cbc955cf0dde6ef7faf39b62397d","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -353,6 +353,7 @@ protected ResourceOperations fill(\n \n         // 2. attributes to be updated\n         Set<Long> valuesToBeRemoved;\n+        List<String> valuesToBeAdded;\n         for (AttributeMod attributeMod :\n                 attributableMod.getAttributesToBeUpdated()) {\n \n@@ -410,8 +411,17 @@ protected ResourceOperations fill(\n                 }\n \n                 // 1.2 add values\n-                fillAttribute(attributeMod.getValuesToBeAdded(),\n-                        attributableUtil, schema, attribute, invalidValues);\n+                valuesToBeAdded = attributeMod.getValuesToBeAdded();\n+                if (valuesToBeAdded != null && !valuesToBeAdded.isEmpty()\n+                        && (!schema.isUniqueConstraint()\n+                        || attribute.getUniqueValue() == null\n+                        || !valuesToBeAdded.iterator().next().equals(\n+                        attribute.getUniqueValue().getValueAsString()))) {\n+\n+                    fillAttribute(attributeMod.getValuesToBeAdded(),\n+                            attributableUtil, schema, attribute,\n+                            invalidValues);\n+                }\n \n                 // if no values are in, the attribute can be safely removed\n                 if (attribute.getValuesAsStrings().isEmpty()) {"},{"sha":"6b2272adec2636b9c16c923714978a9197a8f0ba","filename":"core/src/main/java/org/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":32,"deletions":29,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -29,7 +29,7 @@\n public class ConnInstanceDataBinder {\n \n     private static final String[] ignoreProperties = {\n-        \"id\", \"resources\"};\n+        \"id\", \"resources\", \"syncToken\"};\n \n     @Autowired\n     private ConnInstanceDAO connectorInstanceDAO;\n@@ -84,7 +84,7 @@ public ConnInstance getConnInstance(\n \n     public ConnInstance updateConnInstance(\n             Long connectorInstanceId,\n-            ConnInstanceTO connectorInstanceTO)\n+            ConnInstanceTO connInstanceTO)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException compositeErrorException =\n@@ -99,37 +99,41 @@ public ConnInstance updateConnInstance(\n             requiredValuesMissing.addElement(\"connector id\");\n         }\n \n-        ConnInstance connectorInstance =\n+        ConnInstance connInstance =\n                 connectorInstanceDAO.find(connectorInstanceId);\n \n-        if (connectorInstanceTO.getBundleName() != null) {\n-            connectorInstance.setBundleName(\n-                    connectorInstanceTO.getBundleName());\n+        if (connInstanceTO.getBundleName() != null) {\n+            connInstance.setBundleName(\n+                    connInstanceTO.getBundleName());\n         }\n \n-        if (connectorInstanceTO.getVersion() != null) {\n-            connectorInstance.setVersion(connectorInstanceTO.getVersion());\n+        if (connInstanceTO.getVersion() != null) {\n+            connInstance.setVersion(connInstanceTO.getVersion());\n         }\n \n-        if (connectorInstanceTO.getConnectorName() != null) {\n-            connectorInstance.setConnectorName(\n-                    connectorInstanceTO.getConnectorName());\n+        if (connInstanceTO.getConnectorName() != null) {\n+            connInstance.setConnectorName(\n+                    connInstanceTO.getConnectorName());\n         }\n \n-        if (connectorInstanceTO.getConfiguration() != null\n-                || connectorInstanceTO.getConfiguration().isEmpty()) {\n+        if (connInstanceTO.getConfiguration() != null\n+                || connInstanceTO.getConfiguration().isEmpty()) {\n \n-            connectorInstance.setConfiguration(\n-                    connectorInstanceTO.getConfiguration());\n+            connInstance.setConfiguration(\n+                    connInstanceTO.getConfiguration());\n         }\n \n-        if (connectorInstanceTO.getDisplayName() != null) {\n-            connectorInstance.setDisplayName(\n-                    connectorInstanceTO.getDisplayName());\n+        if (connInstanceTO.getDisplayName() != null) {\n+            connInstance.setDisplayName(\n+                    connInstanceTO.getDisplayName());\n         }\n \n-        connectorInstance.setCapabilities(\n-                connectorInstanceTO.getCapabilities());\n+        connInstance.setCapabilities(\n+                connInstanceTO.getCapabilities());\n+\n+        if (connInstanceTO.getSyncToken() == null) {\n+            connInstance.setSerializedSyncToken(null);\n+        }\n \n         if (!requiredValuesMissing.getElements().isEmpty()) {\n             compositeErrorException.addException(requiredValuesMissing);\n@@ -141,20 +145,19 @@ public ConnInstance updateConnInstance(\n             throw compositeErrorException;\n         }\n \n-        return connectorInstance;\n+        return connInstance;\n     }\n \n-    public ConnInstanceTO getConnInstanceTO(\n-            ConnInstance connectorInstance) {\n-\n-        ConnInstanceTO connectorInstanceTO =\n-                new ConnInstanceTO();\n+    public ConnInstanceTO getConnInstanceTO(ConnInstance connInstance) {\n+        ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n+        connInstanceTO.setId(connInstance.getId());\n \n         BeanUtils.copyProperties(\n-                connectorInstance, connectorInstanceTO, ignoreProperties);\n+                connInstance, connInstanceTO, ignoreProperties);\n \n-        connectorInstanceTO.setId(connectorInstance.getId());\n+        connInstanceTO.setSyncToken(\n+                connInstance.getSerializedSyncToken());\n \n-        return connectorInstanceTO;\n+        return connInstanceTO;\n     }\n }"},{"sha":"784d7fbd7042c611b4d6b27579edd7ce47beaad0","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -142,8 +142,6 @@ public void updateSchedTask(final SchedTask task, final SchedTaskMod taskMod,\n                 fill((SyncTask) task, syncTaskMod.getDefaultResources(),\n                         syncTaskMod.getDefaultRoles(),\n                         syncTaskMod.isUpdateIdentities());\n-                ((SyncTask) task).setUpdateIdentities(\n-                        ((SyncTaskMod) taskMod).isUpdateIdentities());\n                 break;\n         }\n     }"},{"sha":"c3049190417adc613266ea230f8cd49f829fbb74","filename":"core/src/main/java/org/syncope/core/scheduling/AbstractJob.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -20,7 +20,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.TaskDAO;\n@@ -39,23 +38,24 @@ public abstract class AbstractJob implements Job {\n     protected static final String FAILURE = \"FAILURE\";\n \n     @Autowired\n-    private TaskDAO taskDAO;\n+    protected TaskDAO taskDAO;\n \n     @Autowired\n     private TaskExecDAO taskExecDAO;\n \n-    private Long taskId;\n+    protected Long taskId;\n+\n+    protected Task task;\n \n     public void setTaskId(Long taskId) {\n         this.taskId = taskId;\n     }\n \n     @Override\n-    @Transactional(rollbackFor = Throwable.class)\n     public final void execute()\n             throws JobExecutionException {\n \n-        final Task task = taskDAO.find(taskId);\n+        task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new JobExecutionException(\"Task \" + taskId + \" not found\");\n         }\n@@ -64,9 +64,8 @@ public final void execute()\n         execution.setStartDate(new Date());\n         execution.setTask(task);\n \n-        String message;\n         try {\n-            message = doExecute();\n+            execution.setMessage(doExecute());\n \n             execution.setStatus(SUCCESS);\n         } catch (JobExecutionException e) {\n@@ -75,11 +74,10 @@ public final void execute()\n             StringWriter exceptionWriter = new StringWriter();\n             exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n             e.printStackTrace(new PrintWriter(exceptionWriter));\n-            message = exceptionWriter.toString();\n+            execution.setMessage(exceptionWriter.toString());\n \n             execution.setStatus(FAILURE);\n         }\n-        execution.setMessage(message);\n         execution.setEndDate(new Date());\n \n         taskExecDAO.save(execution);"},{"sha":"c833f0a853e53cb8eeb2166ab95a840274773d96","filename":"core/src/main/java/org/syncope/core/scheduling/SampleJob.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -14,13 +14,20 @@\n package org.syncope.core.scheduling;\n \n import org.quartz.JobExecutionException;\n+import org.syncope.core.persistence.beans.SchedTask;\n \n public class SampleJob extends AbstractJob {\n \n     @Override\n     protected String doExecute()\n             throws JobExecutionException {\n \n+        if (!(task instanceof SchedTask)) {\n+            throw new JobExecutionException(\"Task \" + taskId\n+                    + \" isn't a SchedTask\");\n+        }\n+        final SchedTask schedTask = (SchedTask) this.task;\n+\n         LOG.info(\"SampleJob running\");\n \n         return \"RUNNING\";"},{"sha":"d2be1640438100fa13a5f32eb9c72a740863d1b3","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":364,"deletions":2,"changes":366,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -13,16 +13,378 @@\n  */\n package org.syncope.core.scheduling;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.identityconnectors.common.security.GuardedByteArray;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.client.mod.AttributeMod;\n+import org.syncope.client.mod.MembershipMod;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.MembershipTO;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.persistence.beans.ConnInstance;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n+import org.syncope.core.persistence.dao.ConnInstanceDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n+import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n+import org.syncope.core.rest.controller.InvalidSearchConditionException;\n+import org.syncope.core.rest.controller.UserController;\n \n public class SyncJob extends AbstractJob {\n \n+    @Autowired\n+    private ConnInstanceLoader connInstanceLoader;\n+\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private UserController userController;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    private String getPassword(List<Object> values) {\n+        final StringBuilder result = new StringBuilder();\n+\n+        Object pwd;\n+        if (values == null || values.isEmpty()) {\n+            pwd = \"password\";\n+        } else {\n+            pwd = values.iterator().next();\n+        }\n+\n+        if (pwd instanceof GuardedString) {\n+            ((GuardedString) pwd).access(new GuardedString.Accessor() {\n+\n+                @Override\n+                public void access(char[] clearChars) {\n+                    result.append(clearChars);\n+                }\n+            });\n+        } else if (pwd instanceof GuardedByteArray) {\n+            ((GuardedByteArray) pwd).access(new GuardedByteArray.Accessor() {\n+\n+                @Override\n+                public void access(byte[] clearBytes) {\n+                    result.append(new String(clearBytes));\n+                }\n+            });\n+        } else if (pwd instanceof String) {\n+            result.append((String) pwd);\n+        } else {\n+            result.append(pwd.toString());\n+        }\n+\n+        return result.toString();\n+    }\n+\n+    private UserTO getUserTO(final ConnectorObject obj,\n+            final List<SchemaMapping> mappings,\n+            final Set<Long> roles, final Set<String> resources) {\n+\n+        final UserTO userTO = new UserTO();\n+        userTO.setResources(resources);\n+        MembershipTO membershipTO;\n+        for (Long roleId : roles) {\n+            membershipTO = new MembershipTO();\n+            membershipTO.setRoleId(roleId);\n+            userTO.addMembership(membershipTO);\n+        }\n+\n+        Attribute attribute;\n+        List<Object> values;\n+        AttributeTO attributeTO;\n+        for (SchemaMapping mapping : mappings) {\n+            attribute = obj.getAttributeByName(mapping.getDestAttrName());\n+            values = attribute == null\n+                    ? Collections.EMPTY_LIST : attribute.getValue();\n+            switch (mapping.getSourceMappingType()) {\n+                case SyncopeUserId:\n+                    break;\n+\n+                case Password:\n+                    attribute = obj.getAttributeByName(\"__PASSWORD__\");\n+                    userTO.setPassword(getPassword(attribute == null\n+                            ? Collections.EMPTY_LIST : attribute.getValue()));\n+                    break;\n+\n+                case UserSchema:\n+                    attributeTO = new AttributeTO();\n+                    attributeTO.setSchema(mapping.getSourceAttrName());\n+                    for (Object value : values) {\n+                        attributeTO.addValue(value.toString());\n+                    }\n+                    userTO.addAttribute(attributeTO);\n+                    break;\n+\n+                case UserDerivedSchema:\n+                    attributeTO = new AttributeTO();\n+                    attributeTO.setSchema(mapping.getSourceAttrName());\n+                    userTO.addDerivedAttribute(attributeTO);\n+                    break;\n+\n+                case UserVirtualSchema:\n+                    attributeTO = new AttributeTO();\n+                    attributeTO.setSchema(mapping.getSourceAttrName());\n+                    userTO.addVirtualAttribute(attributeTO);\n+                    break;\n+            }\n+        }\n+\n+        return userTO;\n+    }\n+\n+    private UserMod getUserMod(final Long userId, final ConnectorObject obj,\n+            final List<SchemaMapping> mappings,\n+            final Set<Long> roles, final Set<String> resources) {\n+\n+        final UserMod userMod = new UserMod();\n+        userMod.setId(userId);\n+        userMod.setResourcesToBeAdded(resources);\n+        MembershipMod membershipMod;\n+        for (Long roleId : roles) {\n+            membershipMod = new MembershipMod();\n+            membershipMod.setRole(roleId);\n+            userMod.addMembershipToBeAdded(membershipMod);\n+        }\n+\n+        Attribute attribute;\n+        List<Object> values;\n+        AttributeMod attributeMod;\n+        for (SchemaMapping mapping : mappings) {\n+            attribute = obj.getAttributeByName(mapping.getDestAttrName());\n+            values = attribute == null\n+                    ? Collections.EMPTY_LIST : attribute.getValue();\n+            switch (mapping.getSourceMappingType()) {\n+                case SyncopeUserId:\n+                    break;\n+\n+                case Password:\n+                    attribute = obj.getAttributeByName(\"__PASSWORD__\");\n+                    userMod.setPassword(getPassword(attribute == null\n+                            ? Collections.EMPTY_LIST : attribute.getValue()));\n+                    break;\n+\n+                case UserSchema:\n+                    attributeMod = new AttributeMod();\n+                    attributeMod.setSchema(mapping.getSourceAttrName());\n+                    for (Object value : values) {\n+                        attributeMod.addValueToBeAdded(value.toString());\n+                    }\n+                    userMod.addAttributeToBeUpdated(attributeMod);\n+                    break;\n+\n+                case UserDerivedSchema:\n+                    userMod.addDerivedAttributeToBeAdded(\n+                            mapping.getSourceAttrName());\n+                    break;\n+\n+                case UserVirtualSchema:\n+                    userMod.addVirtualAttributeToBeAdded(\n+                            mapping.getSourceAttrName());\n+                    break;\n+            }\n+        }\n+\n+        return userMod;\n+    }\n+\n+    private List<SyncopeUser> findExistingUsers(\n+            final String schemaName, final String uidValue,\n+            final String previousUidValue) {\n+\n+        final List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n+\n+        USchema schema = schemaDAO.find(schemaName, USchema.class);\n+        if (schema != null) {\n+            UAttrValue value = new UAttrValue();\n+            value.setStringValue(previousUidValue == null\n+                    ? uidValue : previousUidValue);\n+            result.addAll(userDAO.findByAttrValue(schemaName, value));\n+        } else {\n+            UDerSchema derSchema =\n+                    derSchemaDAO.find(schemaName, UDerSchema.class);\n+            if (derSchema != null) {\n+                try {\n+                    result.addAll(userDAO.findByDerAttrValue(schemaName,\n+                            previousUidValue == null\n+                            ? uidValue : previousUidValue));\n+                } catch (InvalidSearchConditionException e) {\n+                    LOG.error(\"Could not search for matching users\", e);\n+                }\n+            } else {\n+                LOG.warn(\"Invalid account Id source schema name: \" + schemaName);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     protected String doExecute()\n             throws JobExecutionException {\n \n-        LOG.info(\"SyncJob running\");\n+        if (!(task instanceof SyncTask)) {\n+            throw new JobExecutionException(\"Task \" + taskId\n+                    + \" isn't a SyncTask\");\n+        }\n+        final SyncTask syncTask = (SyncTask) this.task;\n+\n+        ConnInstance connInstance =\n+                syncTask.getResource().getConnector();\n+\n+        ConnectorFacadeProxy connector;\n+        try {\n+            connector = connInstanceLoader.getConnector(\n+                    ConnInstanceLoader.getBeanName(connInstance.getId()));\n+        } catch (BeansException e) {\n+            throw new JobExecutionException(\"Connector instance bean \"\n+                    + ConnInstanceLoader.getBeanName(connInstance.getId())\n+                    + \" not found\", e);\n+        }\n+\n+        List<SyncDelta> deltas;\n+        try {\n+            deltas = connector.sync(connInstance.getSyncToken());\n+        } catch (Throwable t) {\n+            throw new JobExecutionException(\"While syncing on connector\", t);\n+        }\n+\n+        SchemaMapping accountIdMap =\n+                syncTask.getResource().getAccountIdMapping();\n+        if (accountIdMap == null) {\n+            throw new JobExecutionException(\n+                    \"Invalid account id mapping for resource \"\n+                    + syncTask.getResource());\n+        }\n+\n+        Set<String> defaultResources = new HashSet<String>(\n+                syncTask.getDefaultResources().size());\n+        for (TargetResource resource : syncTask.getDefaultResources()) {\n+            defaultResources.add(resource.getName());\n+        }\n+        Set<Long> defaultRoles = new HashSet<Long>(\n+                syncTask.getDefaultRoles().size());\n+        for (SyncopeRole role : syncTask.getDefaultRoles()) {\n+            defaultRoles.add(role.getId());\n+        }\n+\n+        // counters\n+        int created = 0;\n+        int updated = 0;\n+        int deleted = 0;\n+        int failCreated = 0;\n+        int failUpdated = 0;\n+        int failDeleted = 0;\n+\n+        List<SyncopeUser> users;\n+        List<Long> userIds;\n+        SyncopeUser userToUpdate;\n+        for (SyncDelta delta : deltas) {\n+            users = findExistingUsers(accountIdMap.getSourceAttrName(),\n+                    delta.getUid().getUidValue(),\n+                    delta.getPreviousUid() == null\n+                    ? null : delta.getPreviousUid().getUidValue());\n+\n+            switch (delta.getDeltaType()) {\n+                case CREATE_OR_UPDATE:\n+                    if (users.isEmpty()) {\n+                        try {\n+                            userController.create(getUserTO(delta.getObject(),\n+                                    syncTask.getResource().getMappings(),\n+                                    defaultRoles, defaultResources), null, null);\n+                            created++;\n+                        } catch (Throwable t) {\n+                            failCreated++;\n+                            LOG.error(\"Could not create user \"\n+                                    + delta.getUid().getUidValue(), t);\n+                        }\n+                    } else if (users.size() == 1) {\n+                        if (syncTask.isUpdateIdentities()) {\n+                            userToUpdate = users.iterator().next();\n+                            try {\n+                                userController.update(userToUpdate,\n+                                        getUserMod(userToUpdate.getId(),\n+                                        delta.getObject(),\n+                                        syncTask.getResource().getMappings(),\n+                                        defaultRoles, defaultResources),\n+                                        null, null);\n+                                updated++;\n+                            } catch (Throwable t) {\n+                                failUpdated++;\n+                                LOG.error(\"Could not update user \"\n+                                        + delta.getUid().getUidValue(), t);\n+                            }\n+                        }\n+                    } else {\n+                        LOG.error(\"More than one user matching {}\", users);\n+                    }\n+                    break;\n+\n+                case DELETE:\n+                    LOG.debug(\"About to delete {}\", users);\n+\n+                    userIds = new ArrayList<Long>(users.size());\n+                    for (SyncopeUser user : users) {\n+                        userIds.add(user.getId());\n+                    }\n+                    for (Long userId : userIds) {\n+                        try {\n+                            userController.delete(userDAO.find(userId),\n+                                    null, null);\n+                            deleted++;\n+                        } catch (Throwable t) {\n+                            failDeleted++;\n+                            LOG.error(\"Could not delete user \" + userId, t);\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+\n+        StringBuilder result = new StringBuilder();\n+        result.append(\"Users [created/failures]: \").append(created).append('/').\n+                append(failCreated).append(' ').\n+                append(\"[updated/failures]: \").append(updated).append('/').\n+                append(failUpdated).append(' ').\n+                append(\"[deleted/ failures]: \").append(deleted).append('/').\n+                append(failDeleted);\n+        LOG.debug(\"Sync result: {}\", result);\n+\n+        try {\n+            connInstance.setSyncToken(connector.getLatestSyncToken());\n+            connInstanceDAO.save(connInstance);\n+        } catch (Throwable t) {\n+            throw new JobExecutionException(\"While updating SyncToken\", t);\n+        }\n \n-        return \"MO SCI\";\n+        return result.toString();\n     }\n }"},{"sha":"59ce82f1ac8f028d701e2d11a6b99a8b4e50f230","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -32,6 +32,7 @@\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.types.ConnConfPropSchema;\n import org.syncope.types.ConnectorCapability;\n \n@@ -261,7 +262,7 @@ public void read() {\n     public void check() {\n         Boolean verify = restTemplate.getForObject(\n                 BASE_URL + \"connector/check/{connectorId}.json\",\n-                Boolean.class, \"connInstance100\");\n+                Boolean.class, ConnInstanceLoader.getBeanName(100L));\n \n         assertTrue(verify);\n     }"},{"sha":"33ee46d78be5710c3920f26f2e1b9792d2345b2a","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -170,7 +170,8 @@ public final void createUserWithNoPropagation() {\n \n         // get last task\n         PropagationTaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, newMaxId);\n+                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class,\n+                newMaxId);\n \n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -322,7 +323,8 @@ public final void create() {\n \n         // get last task\n         PropagationTaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, newMaxId);\n+                BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class,\n+                newMaxId);\n \n         assertNotNull(taskTO);\n         assertFalse(taskTO.getExecutions().isEmpty());\n@@ -686,15 +688,21 @@ public final void update() {\n         membershipMod.setRole(8L);\n         membershipMod.addAttributeToBeUpdated(attributeMod);\n \n-        attributeMod = new AttributeMod();\n-        attributeMod.setSchema(\"userId\");\n-        attributeMod.addValueToBeAdded(\"t.w@spre.net\");\n-\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword\");\n+\n         userMod.addAttributeToBeRemoved(\"userId\");\n+        attributeMod = new AttributeMod();\n+        attributeMod.setSchema(\"userId\");\n+        attributeMod.addValueToBeAdded(\"t.w@spre.net\");\n+        userMod.addAttributeToBeUpdated(attributeMod);\n+\n+        attributeMod = new AttributeMod();\n+        attributeMod.setSchema(\"username\");\n+        attributeMod.addValueToBeAdded(\"g.h@t.com\");\n         userMod.addAttributeToBeUpdated(attributeMod);\n+\n         userMod.addDerivedAttributeToBeAdded(\"cn\");\n         userMod.addMembershipToBeAdded(membershipMod);\n         userMod.addMembershipToBeRemoved("},{"sha":"4c339ad638a796d7e427bed02738de393b43a63e","filename":"pom.xml","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/93770f350e0ffa23a95aeda52779672d13ff9d0f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/93770f350e0ffa23a95aeda52779672d13ff9d0f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=93770f350e0ffa23a95aeda52779672d13ff9d0f","patch":"@@ -20,7 +20,7 @@\n     <description>Syncope</description>\n     <groupId>org.syncope</groupId>\n     <artifactId>syncope</artifactId>\n-    <version>0.7-SNAPSHOT</version>\n+    <version>0.7-EA</version>\n     <packaging>pom</packaging>\n \n     <!-- maven repository on sonatype -->\n@@ -72,9 +72,9 @@\n         <jsp-api.version>2.1</jsp-api.version>\n         <jstl.version>1.2</jstl.version>\n         \n-        <connid.version>1.4-SNAPSHOT</connid.version>\n+        <connid.version>1.3</connid.version>\n         <connid.soap.version>1.1-SNAPSHOT</connid.soap.version>\n-        <connid.db.table.version>1.2-SNAPSHOT</connid.db.table.version>\n+        <connid.db.table.version>1.1</connid.db.table.version>\n \n         <commons-jexl.version>2.0.1</commons-jexl.version>\n         <commons-lang.version>2.6</commons-lang.version>\n@@ -96,7 +96,7 @@\n         <velocity.version>1.7</velocity.version>\n         <quartz.version>1.8.5</quartz.version>\n \n-        <hibernate.version>3.6.5.Final</hibernate.version>\n+        <hibernate.version>3.6.6.Final</hibernate.version>\n         <hibernate-validator.version>4.2.0.Final</hibernate-validator.version>\n         <ehcache.version>2.4.2</ehcache.version>\n \n@@ -117,6 +117,7 @@\n \n         <cargo.version>1.1.1</cargo.version>\n \n+        <bundles.directory>/var/tmp/bundles</bundles.directory>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     </properties>\n \n@@ -176,12 +177,12 @@\n             <dependency>\n                 <groupId>org.connid</groupId>\n                 <artifactId>framework</artifactId>\n-                <version>1.4-SNAPSHOT</version>\n+                <version>${connid.version}</version>\n             </dependency>\n             <dependency>\n                 <groupId>org.connid</groupId>\n                 <artifactId>framework-internal</artifactId>\n-                <version>1.4-SNAPSHOT</version>\n+                <version>${connid.version}</version>\n             </dependency>\n \n             <dependency>\n@@ -424,20 +425,20 @@\n             <dependency>\n                 <groupId>org.connid.bundles.soap</groupId>\n                 <artifactId>org.connid.bundles.soap</artifactId>\n-                <version>1.1-SNAPSHOT</version>\n+                <version>${connid.soap.version}</version>\n                 <scope>test</scope>\n             </dependency>\n             <dependency>\n                 <groupId>org.connid.bundles.soap</groupId>\n                 <artifactId>wssample</artifactId>\n-                <version>1.1-SNAPSHOT</version>\n+                <version>${connid.soap.version}</version>\n                 <type>war</type>\n                 <scope>test</scope>\n             </dependency>\n             <dependency>\n                 <groupId>org.connid.bundles.db</groupId>\n                 <artifactId>org.connid.bundles.db.table</artifactId>\n-                <version>1.2-SNAPSHOT</version>\n+                <version>${connid.db.table.version}</version>\n                 <scope>test</scope>\n             </dependency>\n             <!-- /TEST -->"}]}