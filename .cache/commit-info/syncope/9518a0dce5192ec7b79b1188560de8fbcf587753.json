{"sha":"9518a0dce5192ec7b79b1188560de8fbcf587753","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk1MThhMGRjZTUxOTJlYzdiNzliMTE4ODU2MGRlOGZiY2Y1ODc3NTM=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-09-18T07:10:08Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2014-09-18T07:10:08Z"},"message":"Merge from branch 1_2_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1625901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d24b1e9764de999bec473e49879d5b3ed3dc2f8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7d24b1e9764de999bec473e49879d5b3ed3dc2f8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9518a0dce5192ec7b79b1188560de8fbcf587753","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9518a0dce5192ec7b79b1188560de8fbcf587753","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9518a0dce5192ec7b79b1188560de8fbcf587753","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9518a0dce5192ec7b79b1188560de8fbcf587753/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"e17946e1192b8d09f2aeae6fd60d3496cc12488f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e17946e1192b8d09f2aeae6fd60d3496cc12488f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e17946e1192b8d09f2aeae6fd60d3496cc12488f"},{"sha":"6255882e7cd4f601967aecce06e2a73174d68b1b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6255882e7cd4f601967aecce06e2a73174d68b1b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6255882e7cd4f601967aecce06e2a73174d68b1b"}],"stats":{"total":22,"additions":15,"deletions":7},"files":[{"sha":"21540f0dbae46ac69e7b20b5e730fea7f3704569","filename":"core-upgrader/src/main/java/org/apache/syncope/upgrader/ContentUpgrader.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9518a0dce5192ec7b79b1188560de8fbcf587753/core-upgrader%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fupgrader%2FContentUpgrader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9518a0dce5192ec7b79b1188560de8fbcf587753/core-upgrader%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fupgrader%2FContentUpgrader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core-upgrader%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fupgrader%2FContentUpgrader.java?ref=9518a0dce5192ec7b79b1188560de8fbcf587753","patch":"@@ -41,6 +41,8 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.MatchingRule;\n+import org.apache.syncope.common.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrTemplate;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -220,7 +222,7 @@ public void doUpgradePhaseOne() throws Exception {\n         upgradeSyncopeConf();\n         upgradeExternalResource();\n         upgradeConnInstance();\n-        updgradePropagationTask();\n+        upgradePropagationTask();\n         upgradeSyncTask();\n         upgradePolicy();\n         upgradeReportletConf();\n@@ -323,12 +325,18 @@ private void upgradeSyncTask() throws Exception {\n                 final String oldUserTemplate = (String) userTemplate.get(task);\n                 final String oldRoleTemplate = (String) roleTemplate.get(task);\n                 if (oldUserTemplate != null) {\n-                    task.setUserTemplate(XMLDeserializer.<UserTO>deserialize(oldUserTemplate));\n+                    task.setUserTemplate(XMLDeserializer.<UserTO>deserialize(oldUserTemplate.replaceAll(\n+                            \"attributes\", \"attrs\").replaceAll(\"derivedAttributes\", \"derAttrs\").replaceAll(\n+                                    \"virtualAttributes\", \"virAttrs\")));\n                 }\n                 if (oldRoleTemplate != null) {\n                     LOG.info(\"Upgrading syncTask {} roleTemplate\", task.getName());\n-                    task.setRoleTemplate(XMLDeserializer.<RoleTO>deserialize(oldRoleTemplate));\n+                    task.setRoleTemplate(XMLDeserializer.<RoleTO>deserialize(oldRoleTemplate.replaceAll(\n+                            \"attributes\", \"attrs\").replaceAll(\"derivedAttributes\", \"derAttrs\").replaceAll(\n+                                    \"virtualAttributes\", \"virAttrs\")));\n                 }\n+                task.setUnmatchingRule(UnmatchingRule.IGNORE);\n+                task.setMatchingRule(MatchingRule.IGNORE);\n             } catch (Exception e) {\n                 LOG.error(\"While upgrading syncTask {}\", task, e);\n                 continueUpgrade = false;\n@@ -337,7 +345,7 @@ private void upgradeSyncTask() throws Exception {\n         }\n     }\n \n-    private void updgradePropagationTask() throws Exception {\n+    private void upgradePropagationTask() throws Exception {\n         LOG.info(\"Upgrading Task table (propagation tasks)...\");\n         final Field xmlAttributes = ReflectionUtils.findField(PropagationTask.class, \"xmlAttributes\");\n         xmlAttributes.setAccessible(true);\n@@ -670,7 +678,7 @@ private void addTemplatesToMAttrs() {\n                 // add template to normal attributes\n                 for (Long attrId : jdbcTemplate.queryForList(\"SELECT id FROM MAttr WHERE OWNER_ID = ?\", Long.class,\n                         membership.getId())) {\n-                    \n+\n                     final MAttr mAttr = attrDAO.find(attrId, MAttr.class);\n \n                     LOG.info(\"Adding template to membership normal attribute {}\", mAttr);\n@@ -685,7 +693,7 @@ private void addTemplatesToMAttrs() {\n                 // add template to derived attributes\n                 for (Long attrId : jdbcTemplate.queryForList(\"SELECT id FROM MDerAttr WHERE OWNER_ID = ?\", Long.class,\n                         membership.getId())) {\n-                    \n+\n                     final MDerAttr mDerAttr = derAttrDAO.find(attrId, MDerAttr.class);\n \n                     LOG.info(\"Adding template to membership derived attribute {}\", mDerAttr);\n@@ -700,7 +708,7 @@ private void addTemplatesToMAttrs() {\n                 // add template to virtual attributes\n                 for (Long attrId : jdbcTemplate.queryForList(\"SELECT id FROM MVirAttr WHERE OWNER_ID = ?\", Long.class,\n                         membership.getId())) {\n-                    \n+\n                     final MVirAttr mVirAttr = virAttrDAO.find(attrId, MVirAttr.class);\n \n                     LOG.info(\"Adding template to membership virtual attribute {}\", mVirAttr);"}]}