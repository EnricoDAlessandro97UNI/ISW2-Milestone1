{"sha":"d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ5NDM3ZDM3YTM4ZDBmMTg1Mjg5YjFjNjFkMmQ3OWM1Y2U4ZWRhYWE=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-08-27T11:11:57Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2015-08-27T11:11:57Z"},"message":"Merge branch 'master' into SYNCOPE-156","tree":{"sha":"ec29cf9495b6b8d81b1c9761a0174bd417222726","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ec29cf9495b6b8d81b1c9761a0174bd417222726"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"bbb94a99fbc19e219dda417097e940950706c204","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbb94a99fbc19e219dda417097e940950706c204","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bbb94a99fbc19e219dda417097e940950706c204"},{"sha":"e54592850c95cde8d26f2182f41fe5ce21398512","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e54592850c95cde8d26f2182f41fe5ce21398512","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e54592850c95cde8d26f2182f41fe5ce21398512"}],"stats":{"total":4802,"additions":3060,"deletions":1742},"files":[{"sha":"54456357b33e1581828e3b68cfbf42dc6384686f","filename":"README.md","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/README.md","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/README.md","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/README.md?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,24 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+**Apache Syncope** is an Open Source system for managing digital identities in enterprise environments, \n+implemented in JEE technology and released under Apache 2.0 license.\n+\n+More information at http://syncope.apache.org\n+\n+<a href=\"https://travis-ci.org/apache/syncope\"><img src=\"https://api.travis-ci.org/apache/syncope.png\"/></a>\n\\ No newline at end of file"},{"sha":"a921a3c717c3f8584548e9878a27266d7f5dcaa0","filename":"archetype/pom.xml","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -142,11 +142,8 @@ under the License.\n         <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/main/resources</targetPath>\n       </resource>\n       <resource>\n-        <directory>../core/persistence-jpa/src/test/resources</directory>\n-        <includes>\n-          <include>persistence.properties</include>\n-        </includes>\n-        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/test/resources</targetPath>\n+        <directory>../core/persistence-jpa/src/test/resources/domains</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/test/resources/domains</targetPath>\n       </resource>\n       <resource>\n         <directory>../core/logic/src/main/resources</directory>\n@@ -177,6 +174,17 @@ under the License.\n           <include>workflow.properties</include>\n         </includes>\n       </resource>\n+      <resource>\n+        <directory>../fit/core-reference/src/test/resources/scriptedsql</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/test/resources/scriptedsql</targetPath>\n+      </resource>\n+      <resource>\n+        <directory>../fit/core-reference/src/main/resources</directory>\n+        <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/test/resources</targetPath>\n+        <includes>\n+          <include>connid.properties</include>\n+        </includes>\n+      </resource>\n       <resource>\n         <directory>../fit/core-reference/src/main/webapp</directory>\n         <targetPath>${project.build.outputDirectory}/archetype-resources/core/src/test/resources</targetPath>"},{"sha":"99d107bf7ab7d0fe3f1e7481001d7b235e3217a6","filename":"archetype/src/main/resources/META-INF/maven/archetype-metadata.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fmaven%2Farchetype-metadata.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -26,6 +26,16 @@ under the License.\n   </requiredProperties>\n   \n   <modules>\n+    <module id=\"common\" dir=\"common\" name=\"common\">\n+      <fileSets>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/main/resources</directory>\n+        </fileSet>\n+        <fileSet filtered=\"false\" encoding=\"UTF-8\">\n+          <directory>src/test/resources</directory>\n+        </fileSet>\n+      </fileSets>\n+    </module>\n     <module id=\"core\" dir=\"core\" name=\"core\">\n       <fileSets>\n         <fileSet filtered=\"false\" encoding=\"UTF-8\">"},{"sha":"78862b9a93e50fd9eeba593d65e3c1d1adc60c28","filename":"archetype/src/main/resources/archetype-resources/common/pom.xml","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcommon%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcommon%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcommon%2Fpom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>${groupId}</groupId>\n+    <artifactId>${rootArtifactId}</artifactId>\n+    <version>${version}</version>\n+  </parent>\n+\n+  <name>Apache Syncope sample project - Common</name>\n+  <groupId>${groupId}</groupId>\n+  <artifactId>${artifactId}</artifactId>\n+  <packaging>jar</packaging>\n+\n+  <dependencies>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-lib</artifactId>\n+    </dependency>\n+\n+  </dependencies>\n+  \n+  <build>    \n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+\n+    <testResources>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n+  </build>\n+\n+</project>"},{"sha":"53bd5568cff0075d8cc5fa0535efed4cd031e6f0","filename":"archetype/src/main/resources/archetype-resources/console/pom.xml","status":"modified","additions":41,"deletions":2,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fconsole%2Fpom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -46,7 +46,13 @@ under the License.\n       <groupId>javax.servlet</groupId>\n       <artifactId>jstl</artifactId>\n     </dependency>\n-  \n+\n+    <dependency>\n+      <groupId>${groupId}</groupId>\n+      <artifactId>common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>  \n+    \n     <dependency>\n       <groupId>org.apache.syncope.client</groupId>\n       <artifactId>syncope-client-console</artifactId>\n@@ -191,6 +197,19 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n       </properties>\n       \n       <dependencies>\n+        <dependency>\n+          <groupId>org.apache.syncope.fit</groupId>\n+          <artifactId>syncope-fit-build-tools</artifactId>\n+          <version>${syncope.version}</version>\n+          <type>war</type>\n+          <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+          <groupId>net.tirasa.connid.bundles.soap</groupId>\n+          <artifactId>wssample</artifactId>\n+          <type>war</type>\n+          <scope>test</scope>\n+        </dependency>\n         <dependency>\n           <groupId>com.h2database</groupId>\n           <artifactId>h2</artifactId>\n@@ -212,7 +231,11 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n                 <phase>package</phase>\n                 <configuration>\n                   <target>\n-                    <copy file=\"../core/target/test-classes/persistence.properties\" \n+                    <delete dir=\"../core/target/syncope/WEB-INF/classes/domains\"/>\n+                    <copy todir=\"../core/target/syncope/WEB-INF/classes/domains\">\n+                      <fileset dir=\"../core/target/test-classes/domains\"/>\n+                    </copy>\n+                    <copy file=\"../core/target/test-classes/connid.properties\" \n                           todir=\"../core/target/syncope/WEB-INF/classes\" \n                           overwrite=\"true\"/>\n                     <copy file=\"../core/target/test-classes/db.jsp\" \n@@ -255,6 +278,22 @@ ORYX.Editor.createByUrl = function(modelUrl){\"/>\n                 </properties>\n               </configuration>\n               <deployables>\n+                <deployable>\n+                  <groupId>net.tirasa.connid.bundles.soap</groupId>\n+                  <artifactId>wssample</artifactId>\n+                  <type>war</type>\n+                  <properties>\n+                    <context>wssample</context>\n+                  </properties>\n+                </deployable>\n+                <deployable>\n+                  <groupId>org.apache.syncope.fit</groupId>\n+                  <artifactId>syncope-fit-build-tools</artifactId>\n+                  <type>war</type>\n+                  <properties>\n+                    <context>syncope-fit-build-tools</context>\n+                  </properties>\n+                </deployable>\n                 <deployable>\n                   <location>../core/target/syncope</location>\n                   <properties>"},{"sha":"d45c223e4153c44ce0b3a398bafe6953c3e913c6","filename":"archetype/src/main/resources/archetype-resources/core/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fcore%2Fpom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -46,6 +46,12 @@ under the License.\n       <artifactId>jstl</artifactId>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>${groupId}</groupId>\n+      <artifactId>common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-rest-cxf</artifactId>"},{"sha":"0559bf0b3dc92489ac0901a3caea960c447ffcf8","filename":"archetype/src/main/resources/archetype-resources/pom.xml","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -39,6 +39,12 @@ under the License.\n \n   <dependencyManagement>\n     <dependencies>\n+      <dependency>  \n+        <groupId>org.apache.syncope.common</groupId>\n+        <artifactId>syncope-common-lib</artifactId>\n+        <version>${syncope.version}</version>\n+      </dependency>\n+      \n       <dependency>\n         <groupId>org.apache.syncope.core</groupId>\n         <artifactId>syncope-core-rest-cxf</artifactId>\n@@ -71,7 +77,7 @@ under the License.\n     \n   <build>\n     \n-    <!-- Disable legal check for generated projects: see SYNCOPE-84 -->\n+    <!-- Disable checks for generated projects -->\n     <plugins>\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n@@ -99,10 +105,28 @@ under the License.\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <configLocation>sun_checks.xml</configLocation>\n+          <targetJdk>${targetJdk}</targetJdk>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <phase>none</phase>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n     \n   <modules>\n+    <module>common</module>\n     <module>core</module>\n     <module>console</module>\n   </modules>"},{"sha":"4145d2a9e41984ea812c061bf1be1247cf21ef7b","filename":"archetype/src/main/resources/meta-pom.xml","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -43,6 +43,12 @@ under the License.\n \n   <dependencyManagement>\n     <dependencies>\n+      <dependency>  \n+        <groupId>org.apache.syncope.common</groupId>\n+        <artifactId>syncope-common-lib</artifactId>\n+        <version>${syncope.version}</version>\n+      </dependency>\n+      \n       <dependency>\n         <groupId>org.apache.syncope.core</groupId>\n         <artifactId>syncope-core-rest-cxf</artifactId>\n@@ -75,7 +81,7 @@ under the License.\n     \n   <build>\n     \n-    <!-- Disable legal check for generated projects: see SYNCOPE-84 -->\n+    <!-- Disable checks for generated projects -->\n     <plugins>\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n@@ -103,10 +109,28 @@ under the License.\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <configLocation>sun_checks.xml</configLocation>\n+          <targetJdk>${targetJdk}</targetJdk>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+            <phase>none</phase>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n     \n   <modules>\n+    <module>common</module>\n     <module>core</module>\n     <module>console</module>\n   </modules>"},{"sha":"ae34f53371aeafb29251b155c630b2bec76fdf74","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.slf4j.Logger;"},{"sha":"2ea9423967bf36c1930054d6b381b06c7c7f0752","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -84,9 +83,6 @@ public class ReportCommand extends AbstractCommand {\n     @Parameter(names = { \"-eer\", \"--export-execution-result\" })\n     private Long exportId = -1L;\n \n-    @Parameter(names = { \"-rc\", \"--reportlet-class\" })\n-    private boolean reportletClass = false;\n-\n     @Override\n     public void execute() {\n         final ReportService reportService = SyncopeServices.get(ReportService.class);\n@@ -176,16 +172,6 @@ public void execute() {\n                 LOG.error(\"Error calling configuration service\", ex);\n                 System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n             }\n-        } else if (reportletClass) {\n-            try {\n-                LOG.debug(\"- reportlet configuration class list command\");\n-                System.out.println(\"Reportlet conf classes\");\n-                for (final ReportletConfClass reportletConfClass : reportService.getReportletConfClasses()) {\n-                    System.out.println(\"  *** \" + reportletConfClass.getElement());\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n         } else {\n             System.out.println(helpMessage);\n         }"},{"sha":"4165c7dc3200264bcf1cc404c90dfe9693c30c3c","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -154,7 +154,7 @@ public static StatusMod buildStatusMod(final Collection<StatusBean> statuses, fi\n                 if (\"syncope\".equalsIgnoreCase(status.getResourceName())) {\n                     statusMod.setOnSyncope(true);\n                 } else {\n-                    statusMod.getResourceNames().add(status.getResourceName());\n+                    statusMod.getResources().add(status.getResourceName());\n                 }\n \n             }"},{"sha":"a0a1ddcbb230067caaf85a81f8762c015c16f5e4","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceSecurityPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -23,7 +23,7 @@\n import java.util.Map;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.markup.html.WebMarkupContainer;"},{"sha":"652e4433940119c947a89cf99b2828735b9b46c7","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -66,14 +66,15 @@ public void create(final ConnInstanceTO connectorTO) {\n     /**\n      * Load an already existent connector by its name.\n      *\n-     * @param connectorInstanceId the id\n+     * @param key the id\n      * @return ConnInstanceTO\n      */\n-    public ConnInstanceTO read(final Long connectorInstanceId) {\n+    public ConnInstanceTO read(final Long key) {\n         ConnInstanceTO connectorTO = null;\n \n         try {\n-            connectorTO = getService(ConnectorService.class).read(connectorInstanceId);\n+            connectorTO = getService(ConnectorService.class).\n+                    read(key, SyncopeConsoleSession.get().getLocale().toString());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While reading a connector\", e);\n         }\n@@ -88,10 +89,11 @@ public void update(final ConnInstanceTO connectorTO) {\n         getService(ConnectorService.class).update(connectorTO);\n     }\n \n-    public ConnInstanceTO delete(final Long id) {\n-        ConnInstanceTO instanceTO = getService(ConnectorService.class).read(id);\n-        getService(ConnectorService.class).delete(id);\n-        return instanceTO;\n+    public ConnInstanceTO delete(final Long key) {\n+        ConnInstanceTO connectorTO = getService(ConnectorService.class).\n+                read(key, SyncopeConsoleSession.get().getLocale().toString());\n+        getService(ConnectorService.class).delete(key);\n+        return connectorTO;\n     }\n \n     public List<ConnBundleTO> getAllBundles() {"},{"sha":"f699a904f096543fbf22aaa02781ed88021c78f7","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -126,8 +126,7 @@ public void unlink(final String etag, final long groupKey, final List<StatusBean\n         synchronized (this) {\n             GroupService service = getService(etag, GroupService.class);\n             service.deassociate(groupKey, ResourceDeassociationActionType.UNLINK,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n-                            ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n             resetClient(GroupService.class);\n         }\n     }\n@@ -138,7 +137,7 @@ public void link(final String etag, final long groupKey, final List<StatusBean>\n \n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n             service.associate(groupKey, ResourceAssociationAction.LINK, associationMod);\n \n             resetClient(GroupService.class);\n@@ -150,8 +149,7 @@ public BulkActionResult deprovision(final String etag, final long groupKey, fina\n         synchronized (this) {\n             GroupService service = getService(etag, GroupService.class);\n             result = service.deassociate(groupKey, ResourceDeassociationActionType.DEPROVISION,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n-                            ResourceKey.class)).\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n             resetClient(GroupService.class);\n         }\n@@ -165,7 +163,7 @@ public BulkActionResult provision(final String etag, final long groupKey, final\n \n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n \n             result = service.associate(groupKey, ResourceAssociationAction.PROVISION, associationMod).\n                     readEntity(BulkActionResult.class);\n@@ -179,8 +177,7 @@ public BulkActionResult unassign(final String etag, final long groupKey, final L\n         synchronized (this) {\n             GroupService service = getService(etag, GroupService.class);\n             result = service.deassociate(groupKey, ResourceDeassociationActionType.UNASSIGN,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n-                            ResourceKey.class)).\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n             resetClient(GroupService.class);\n         }\n@@ -194,7 +191,7 @@ public BulkActionResult assign(final String etag, final long groupKey, final Lis\n \n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n \n             result = service.associate(groupKey, ResourceAssociationAction.ASSIGN, associationMod).\n                     readEntity(BulkActionResult.class);"},{"sha":"7f5964bd54af6877c197c0d2f00c8d4221184164","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.springframework.stereotype.Component;"},{"sha":"89617df8859c158b70f45e6ba4647bc5fa764471","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,14 +18,11 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n@@ -35,21 +32,6 @@ public class ReportRestClient extends BaseRestClient implements ExecutionRestCli\n \n     private static final long serialVersionUID = 1644689667998953604L;\n \n-    public List<String> getReportletConfClasses() {\n-        List<String> result = new ArrayList<>();\n-\n-        try {\n-            List<ReportletConfClass> reportletConfClasses = getService(ReportService.class).getReportletConfClasses();\n-            for (ReportletConfClass clazz : reportletConfClasses) {\n-                result.add(clazz.getElement());\n-            }\n-        } catch (SyncopeClientException e) {\n-            LOG.error(\"While getting available reportlet classes\", e);\n-        }\n-\n-        return result;\n-    }\n-\n     public ReportTO read(final Long reportId) {\n         return getService(ReportService.class).read(reportId);\n     }"},{"sha":"4b198468b4f50aed4f24c96f9edd0a37753e9bbc","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -155,8 +155,7 @@ public void unlink(final String etag, final long userKey, final List<StatusBean>\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n             service.deassociate(userKey, ResourceDeassociationActionType.UNLINK,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n-                            ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n             resetClient(UserService.class);\n         }\n     }\n@@ -167,7 +166,7 @@ public void link(final String etag, final long userKey, final List<StatusBean> s\n \n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n             service.associate(userKey, ResourceAssociationAction.LINK, associationMod);\n \n             resetClient(UserService.class);\n@@ -179,8 +178,7 @@ public BulkActionResult deprovision(final String etag, final long userKey, final\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n             result = service.deassociate(userKey, ResourceDeassociationActionType.DEPROVISION,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n-                            ResourceKey.class)).\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n             resetClient(UserService.class);\n         }\n@@ -196,7 +194,7 @@ public BulkActionResult provision(final String etag, final long userKey,\n \n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n             associationMod.setChangePwd(changepwd);\n             associationMod.setPassword(password);\n \n@@ -212,8 +210,7 @@ public BulkActionResult unassign(final String etag, final long userKey, final Li\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n             result = service.deassociate(userKey, ResourceDeassociationActionType.UNASSIGN,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(),\n-                            ResourceKey.class)).\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n                     readEntity(BulkActionResult.class);\n             resetClient(UserService.class);\n         }\n@@ -229,7 +226,7 @@ public BulkActionResult assign(final String etag, final long userKey,\n \n             ResourceAssociationMod associationMod = new ResourceAssociationMod();\n             associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResourceNames(), ResourceKey.class));\n+                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n             associationMod.setChangePwd(changepwd);\n             associationMod.setPassword(password);\n "},{"sha":"968260f51e24668da0c800565a0af0964cd401c9","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -31,7 +31,7 @@\n import org.apache.cxf.feature.LoggingFeature;\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n import org.apache.cxf.staxutils.DocumentDepthProperties;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**"},{"sha":"7f087b75d8637e4574932f90f5f3c45d895fc797","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/StatusMod.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -103,7 +103,7 @@ public void setOnSyncope(final boolean onSyncope) {\n     @XmlElementWrapper(name = \"resources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"resources\")\n-    public List<String> getResourceNames() {\n+    public List<String> getResources() {\n         return resourceNames;\n     }\n "},{"sha":"8820779b2799ca2440efd6c9d930d3518756df72","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAccountRuleConf.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccountRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlType\n+@XmlSeeAlso({ DefaultAccountRuleConf.class })\n+public abstract class AbstractAccountRuleConf extends AbstractBaseBean implements AccountRuleConf {\n+\n+    private static final long serialVersionUID = -4080475005967851092L;\n+\n+    private String name;\n+\n+    public AbstractAccountRuleConf() {\n+        this(StringUtils.EMPTY);\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractAccountRuleConf(final String name) {\n+        super();\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"6d35abdf51462cad9367bbf1da896742807b31af","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPasswordRuleConf.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPasswordRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlType\n+@XmlSeeAlso({ DefaultPasswordRuleConf.class })\n+public abstract class AbstractPasswordRuleConf extends AbstractBaseBean implements PasswordRuleConf {\n+\n+    private static final long serialVersionUID = -5814018872387142339L;\n+\n+    private String name;\n+\n+    public AbstractPasswordRuleConf() {\n+        this(StringUtils.EMPTY);\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractPasswordRuleConf(final String name) {\n+        super();\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"9157ba2b0b0273b1c2211976a0bb91ca953bc1a8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPolicyTO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractPolicyTO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractPolicyTO.java"},{"sha":"b1e1049e128f7e34d98ce14fa459643742b1e524","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"renamed","additions":25,"deletions":7,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n@@ -25,7 +25,6 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n \n @XmlRootElement(name = \"accountPolicy\")\n@@ -34,20 +33,39 @@ public class AccountPolicyTO extends AbstractPolicyTO {\n \n     private static final long serialVersionUID = -1557150042828800134L;\n \n-    private AccountPolicySpec specification;\n+    private boolean propagateSuspension;\n+\n+    private int maxAuthenticationAttempts;\n+\n+    private final List<AbstractAccountRuleConf> ruleConfs = new ArrayList<>();\n \n     private final List<String> resources = new ArrayList<>();\n \n     public AccountPolicyTO() {\n         super(PolicyType.ACCOUNT);\n     }\n \n-    public AccountPolicySpec getSpecification() {\n-        return specification;\n+    public boolean isPropagateSuspension() {\n+        return propagateSuspension;\n+    }\n+\n+    public void setPropagateSuspension(final boolean propagateSuspension) {\n+        this.propagateSuspension = propagateSuspension;\n+    }\n+\n+    public int getMaxAuthenticationAttempts() {\n+        return maxAuthenticationAttempts;\n+    }\n+\n+    public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n+        this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n     }\n \n-    public void setSpecification(final AccountPolicySpec specification) {\n-        this.specification = specification;\n+    @XmlElementWrapper(name = \"ruleConfs\")\n+    @XmlElement(name = \"ruleConf\")\n+    @JsonProperty(\"ruleConfs\")\n+    public List<AbstractAccountRuleConf> getRuleConfs() {\n+        return ruleConfs;\n     }\n \n     @XmlElementWrapper(name = \"resources\")","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AccountPolicyTO.java"},{"sha":"aa107fcf773accce8ac24bad0e85066cec0267e5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,8 +16,8 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.common.lib.policy;\n+\n+public interface AccountRuleConf extends RuleConf {\n \n-public interface PasswordPolicy extends Policy {\n-    \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PasswordPolicy.java"},{"sha":"804fcc5b4a215dca809dce6a95eb1a196bd82cb4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccountRuleConf.java","status":"renamed","additions":44,"deletions":18,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccountRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,12 +16,19 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n-\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n+@XmlRootElement(name = \"defaultAccountRuleConf\")\n @XmlType\n-public class AccountPolicySpec extends AbstractPolicySpec {\n+public class DefaultAccountRuleConf extends AbstractAccountRuleConf implements AccountRuleConf {\n \n     private static final long serialVersionUID = 3259256974414758406L;\n \n@@ -51,17 +58,24 @@ public class AccountPolicySpec extends AbstractPolicySpec {\n     private boolean allLowerCase;\n \n     /**\n-     * Specify if, when reached the maximum allowed number of subsequent login failures, user shall be suspended.\n+     * Substrings not permitted.\n+     */\n+    private final List<String> wordsNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * User attribute values not permitted.\n+     */\n+    private final List<String> schemasNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * Substrings not permitted as prefix.\n      */\n-    private boolean propagateSuspension;\n+    private final List<String> prefixesNotPermitted = new ArrayList<>();\n \n     /**\n-     * Maximum number of (failing) authentication attempts.\n-     * 0 disabled; &gt;0 enabled.\n-     * If the number of subsequent failed logins will be greater then this value\n-     * the account will be suspended (lock-out).\n+     * Substrings not permitted as suffix.\n      */\n-    private int maxAuthenticationAttempts;\n+    private final List<String> suffixesNotPermitted = new ArrayList<>();\n \n     public boolean isAllLowerCase() {\n         return allLowerCase;\n@@ -103,19 +117,31 @@ public void setPattern(final String pattern) {\n         this.pattern = pattern;\n     }\n \n-    public boolean isPropagateSuspension() {\n-        return propagateSuspension;\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\n+    @XmlElement(name = \"word\")\n+    @JsonProperty(\"wordsNotPermitted\")\n+    public List<String> getWordsNotPermitted() {\n+        return wordsNotPermitted;\n     }\n \n-    public void setPropagateSuspension(final boolean propagateSuspension) {\n-        this.propagateSuspension = propagateSuspension;\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n+    @XmlElement(name = \"prefix\")\n+    @JsonProperty(\"prefixesNotPermitted\")\n+    public List<String> getPrefixesNotPermitted() {\n+        return prefixesNotPermitted;\n     }\n \n-    public int getMaxAuthenticationAttempts() {\n-        return maxAuthenticationAttempts;\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"schemasNotPermitted\")\n+    public List<String> getSchemasNotPermitted() {\n+        return schemasNotPermitted;\n     }\n \n-    public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n-        this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n+    @XmlElement(name = \"suffix\")\n+    @JsonProperty(\"suffixesNotPermitted\")\n+    public List<String> getSuffixesNotPermitted() {\n+        return suffixesNotPermitted;\n     }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AccountPolicySpec.java"},{"sha":"87928979f14ba5ade865733588bad61f28335455","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java","status":"renamed","additions":60,"deletions":18,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,20 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n-\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n+@XmlRootElement(name = \"defaultPasswordRuleConf\")\n @XmlType\n-public class PasswordPolicySpec extends AbstractPolicySpec {\n+public class DefaultPasswordRuleConf extends AbstractPasswordRuleConf {\n \n     private static final long serialVersionUID = -7988778083915548547L;\n \n-    /**\n-     * History length.\n-     */\n-    private int historyLength;\n-\n     /**\n      * Minimum length.\n      */\n@@ -126,9 +128,29 @@ public class PasswordPolicySpec extends AbstractPolicySpec {\n     private boolean mustntEndWithAlpha;\n \n     /**\n-     * Specify if password shall not be stored internally.\n+     * Specify if using username as password is allowed.\n+     */\n+    private boolean usernameAllowed;\n+\n+    /**\n+     * Substrings not permitted.\n+     */\n+    private final List<String> wordsNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * User attribute values not permitted.\n      */\n-    private boolean allowNullPassword;\n+    private final List<String> schemasNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * Substrings not permitted as prefix.\n+     */\n+    private final List<String> prefixesNotPermitted = new ArrayList<>();\n+\n+    /**\n+     * Substrings not permitted as suffix.\n+     */\n+    private final List<String> suffixesNotPermitted = new ArrayList<>();\n \n     public boolean isDigitRequired() {\n         return digitRequired;\n@@ -282,19 +304,39 @@ public void setMustntStartWithAlpha(final boolean mustntStartWithAlpha) {\n         this.mustntStartWithAlpha = mustntStartWithAlpha;\n     }\n \n-    public int getHistoryLength() {\n-        return historyLength;\n+    public boolean isUsernameAllowed() {\n+        return usernameAllowed;\n+    }\n+\n+    public void setUsernameAllowed(final boolean usernameAllowed) {\n+        this.usernameAllowed = usernameAllowed;\n+    }\n+\n+    @XmlElementWrapper(name = \"wordsNotPermitted\")\n+    @XmlElement(name = \"word\")\n+    @JsonProperty(\"wordsNotPermitted\")\n+    public List<String> getWordsNotPermitted() {\n+        return wordsNotPermitted;\n     }\n \n-    public void setHistoryLength(final int historyLength) {\n-        this.historyLength = historyLength;\n+    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n+    @XmlElement(name = \"prefix\")\n+    @JsonProperty(\"prefixesNotPermitted\")\n+    public List<String> getPrefixesNotPermitted() {\n+        return prefixesNotPermitted;\n     }\n \n-    public boolean isAllowNullPassword() {\n-        return allowNullPassword;\n+    @XmlElementWrapper(name = \"schemasNotPermitted\")\n+    @XmlElement(name = \"schema\")\n+    @JsonProperty(\"schemasNotPermitted\")\n+    public List<String> getSchemasNotPermitted() {\n+        return schemasNotPermitted;\n     }\n \n-    public void setAllowNullPassword(final boolean allowNullPassword) {\n-        this.allowNullPassword = allowNullPassword;\n+    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n+    @XmlElement(name = \"suffix\")\n+    @JsonProperty(\"suffixesNotPermitted\")\n+    public List<String> getSuffixesNotPermitted() {\n+        return suffixesNotPermitted;\n     }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PasswordPolicySpec.java"},{"sha":"49c73a3aa68bd34d0a18c5aff8af2cd0cd211b7a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"renamed","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,11 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.policy;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n \n @XmlRootElement(name = \"passwordPolicy\")\n@@ -29,18 +33,36 @@ public class PasswordPolicyTO extends AbstractPolicyTO {\n \n     private static final long serialVersionUID = -5606086441294799690L;\n \n-    private PasswordPolicySpec specification;\n+    private boolean allowNullPassword;\n+\n+    private int historyLength;\n+\n+    private final List<AbstractPasswordRuleConf> ruleConfs = new ArrayList<>();\n \n     public PasswordPolicyTO() {\n         super(PolicyType.PASSWORD);\n     }\n \n-    public PasswordPolicySpec getSpecification() {\n-        return specification;\n+    public boolean isAllowNullPassword() {\n+        return allowNullPassword;\n+    }\n+\n+    public void setAllowNullPassword(final boolean allowNullPassword) {\n+        this.allowNullPassword = allowNullPassword;\n     }\n \n-    public void setSpecification(final PasswordPolicySpec specification) {\n-        this.specification = specification;\n+    public int getHistoryLength() {\n+        return historyLength;\n     }\n \n+    public void setHistoryLength(final int historyLength) {\n+        this.historyLength = historyLength;\n+    }\n+\n+    @XmlElementWrapper(name = \"ruleConfs\")\n+    @XmlElement(name = \"ruleConf\")\n+    @JsonProperty(\"ruleConfs\")\n+    public List<AbstractPasswordRuleConf> getRuleConfs() {\n+        return ruleConfs;\n+    }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PasswordPolicyTO.java"},{"sha":"cf715002033205a550e4724fd488a7ae672e35a7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordRuleConf.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,10 +16,8 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.common.lib.policy;\n \n-import java.io.Serializable;\n-\n-public interface PolicySpec extends Serializable {\n+public interface PasswordRuleConf extends RuleConf {\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PolicySpec.java"},{"sha":"7f1c11ee0c1a38e956b0a2d1f7c97b1fd2a41e56","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyType.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyType.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PolicyType.java"},{"sha":"4b613740c7e9e1b9b7a61752f710360a8a51cf21","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PushPolicySpec.java","status":"renamed","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,15 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.wrap;\n+package org.apache.syncope.common.lib.policy;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlRootElement(name = \"reportletConfClass\")\n @XmlType\n-public class ReportletConfClass extends AbstractWrappable<String> {\n+public class PushPolicySpec {\n \n-    private static final long serialVersionUID = 1343357929074360450L;\n+    private static final long serialVersionUID = 3641030189482617497L;\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/ReportletConfClass.java"},{"sha":"5a99cd19ebf9ac9e6f8e15a7f5dc65431a9a43be","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/RuleConf.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface RuleConf {\n+\n+    /**\n+     * Give name of related rule instance.\n+     *\n+     * @return name of this rule instance\n+     */\n+    String getName();\n+}"},{"sha":"1eb578e5d286ec3b94f863423a60a70e70526563","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/SyncPolicySpec.java","status":"renamed","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -25,9 +25,10 @@\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n \n @XmlType\n-public class SyncPolicySpec implements PolicySpec {\n+public class SyncPolicySpec {\n \n     private static final long serialVersionUID = -3144027171719498127L;\n ","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SyncPolicySpec.java"},{"sha":"911c4457707628859a0bd553a29b5ee2feaeec28","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/SyncPolicyTO.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicyTO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,12 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.policy;\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n \n @XmlRootElement(name = \"syncPolicy\")\n @XmlType","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncPolicyTO.java"},{"sha":"29f6363487079bdc04a87d928f8777fb5be397d2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/AbstractAnyReportletConf.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractAnyReportletConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -24,24 +24,18 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.annotation.FormAttributeField;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n \n @XmlType\n public abstract class AbstractAnyReportletConf extends AbstractReportletConf {\n \n     private static final long serialVersionUID = -5388597116592877789L;\n \n-    @FormAttributeField(userSearch = true)\n     protected String matchingCond;\n \n-    @FormAttributeField(schema = IntMappingType.UserPlainSchema)\n     protected final List<String> plainAttrs = new ArrayList<>();\n \n-    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\n     protected final List<String> derAttrs = new ArrayList<>();\n \n-    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n     protected final List<String> virAttrs = new ArrayList<>();\n \n     public AbstractAnyReportletConf() {"},{"sha":"2514c16926656a071177b06b8fd0161f33e582b1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/StaticReportletConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -44,7 +44,7 @@ public class StaticReportletConf extends AbstractReportletConf {\n \n     private TraceLevel traceLevel;\n \n-    private final List<String> listField = new ArrayList<String>();\n+    private final List<String> listField = new ArrayList<>();\n \n     public StaticReportletConf() {\n         super();"},{"sha":"fe57d52a5396d8cf2904566558ba7d0aca366086","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -59,8 +59,14 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private String virAttrCache;\n \n+    private String passwordGenerator;\n+\n     private final List<String> reportlets = new ArrayList<>();\n \n+    private final List<String> accountRules = new ArrayList<>();\n+\n+    private final List<String> passwordRules = new ArrayList<>();\n+\n     private final List<String> taskJobs = new ArrayList<>();\n \n     private final List<String> propagationActions = new ArrayList<>();\n@@ -132,13 +138,35 @@ public String getVirAttrCache() {\n         return virAttrCache;\n     }\n \n+    public String getPasswordGenerator() {\n+        return passwordGenerator;\n+    }\n+\n+    public void setPasswordGenerator(final String passwordGenerator) {\n+        this.passwordGenerator = passwordGenerator;\n+    }\n+\n     @XmlElementWrapper(name = \"reportlets\")\n     @XmlElement(name = \"reportlet\")\n     @JsonProperty(\"reportlets\")\n     public List<String> getReportlets() {\n         return reportlets;\n     }\n \n+    @XmlElementWrapper(name = \"accountRules\")\n+    @XmlElement(name = \"accountRule\")\n+    @JsonProperty(\"accountRules\")\n+    public List<String> getAccountRules() {\n+        return accountRules;\n+    }\n+\n+    @XmlElementWrapper(name = \"passwordRules\")\n+    @XmlElement(name = \"passwordRule\")\n+    @JsonProperty(\"passwordRules\")\n+    public List<String> getPasswordRules() {\n+        return passwordRules;\n+    }\n+\n     @XmlElementWrapper(name = \"taskJobs\")\n     @XmlElement(name = \"taskJob\")\n     @JsonProperty(\"taskJobs\")"},{"sha":"33a0c62c68be1fa868c8cbdc30fb63352f791f9d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AbstractPolicySpec.java","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb94a99fbc19e219dda417097e940950706c204/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb94a99fbc19e219dda417097e940950706c204/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java?ref=bbb94a99fbc19e219dda417097e940950706c204","patch":"@@ -1,100 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n-\n-@XmlType\n-public abstract class AbstractPolicySpec implements PolicySpec {\n-\n-    private static final long serialVersionUID = -6210646284287392063L;\n-\n-    /**\n-     * Substrings not permitted.\n-     */\n-    private final List<String> wordsNotPermitted = new ArrayList<>();\n-\n-    /**\n-     * User attribute values not permitted.\n-     */\n-    protected final List<String> schemasNotPermitted = new ArrayList<>();\n-\n-    /**\n-     * Substrings not permitted as prefix.\n-     */\n-    protected final List<String> prefixesNotPermitted = new ArrayList<>();\n-\n-    /**\n-     * Substrings not permitted as suffix.\n-     */\n-    protected final List<String> suffixesNotPermitted = new ArrayList<>();\n-\n-    @XmlElementWrapper(name = \"wordsNotPermitted\")\n-    @XmlElement(name = \"word\")\n-    @JsonProperty(\"wordsNotPermitted\")\n-    public List<String> getWordsNotPermitted() {\n-        return wordsNotPermitted;\n-    }\n-\n-    @XmlElementWrapper(name = \"prefixesNotPermitted\")\n-    @XmlElement(name = \"prefix\")\n-    @JsonProperty(\"prefixesNotPermitted\")\n-    public List<String> getPrefixesNotPermitted() {\n-        return prefixesNotPermitted;\n-    }\n-\n-    @XmlElementWrapper(name = \"schemasNotPermitted\")\n-    @XmlElement(name = \"schema\")\n-    @JsonProperty(\"schemasNotPermitted\")\n-    public List<String> getSchemasNotPermitted() {\n-        return schemasNotPermitted;\n-    }\n-\n-    @XmlElementWrapper(name = \"suffixesNotPermitted\")\n-    @XmlElement(name = \"suffix\")\n-    @JsonProperty(\"suffixesNotPermitted\")\n-    public List<String> getSuffixesNotPermitted() {\n-        return suffixesNotPermitted;\n-    }\n-\n-    @Override\n-    public boolean equals(final Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n-    }\n-\n-}"},{"sha":"a97f5106415e72838b509eae2187257673ad9cb5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -24,15 +24,13 @@\n public enum EntityViolationType {\n \n     Standard(\"\"),\n-    InvalidAccountPolicy(\"org.apache.syncope.core.persistence.validation.accountpolicy\"),\n     InvalidAnyType(\"org.apache.syncope.core.persistence.validation.anytype\"),\n     InvalidConnInstanceLocation(\"org.apache.syncope.core.persistence.validation.conninstance.location\"),\n     InvalidConnPoolConf(\"org.apache.syncope.core.persistence.validation.conninstance.poolConf\"),\n     InvalidMapping(\"org.apache.syncope.core.persistence.validation.mapping\"),\n     InvalidName(\"org.apache.syncope.core.persistence.validation.name\"),\n     InvalidNotification(\"org.apache.syncope.core.persistence.validation.notification\"),\n     InvalidPassword(\"org.apache.syncope.core.persistence.validation.user.password\"),\n-    InvalidPasswordPolicy(\"org.apache.syncope.core.persistence.validation.passwordpolicy\"),\n     InvalidPolicy(\"org.apache.syncope.core.persistence.validation.policy\"),\n     InvalidPropagationTask(\"org.apache.syncope.core.persistence.validation.propagationtask\"),\n     InvalidRealm(\"org.apache.syncope.core.persistence.validation.realm\"),\n@@ -44,7 +42,6 @@ public enum EntityViolationType {\n     InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.persistence.validation.schema.multivalueUnique\"),\n     InvalidSchedTask(\"org.apache.syncope.core.persistence.validation.schedtask\"),\n     InvalidSyncTask(\"org.apache.syncope.core.persistence.validation.synctask\"),\n-    InvalidSyncPolicy(\"org.apache.syncope.core.persistence.validation.syncpolicy\"),\n     InvalidPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.plainSchema\"),\n     InvalidDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.derSchema\"),\n     InvalidVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.virSchema\"),"},{"sha":"bf8fcfb356548e97380e41469c621ea70f3a4b2f","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JAXBTest.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.StringWriter;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.Marshaller;\n+import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.junit.Test;\n+\n+public class JAXBTest {\n+\n+    @Test\n+    public void marshal() {\n+        try {\n+            JAXBContext context = JAXBContext.newInstance(UserReportletConf.class);\n+            Marshaller marshaller = context.createMarshaller();\n+            marshaller.marshal(new UserTO(), new StringWriter());\n+        } catch (Exception e) {\n+            fail();\n+        }\n+    }\n+}"},{"sha":"66da67c71f5900a8bca8c1b29409575f6cfe662e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -108,23 +108,28 @@ List<ConnIdObjectClass> getSupportedObjectClasses(\n      * Returns connector instance with matching key.\n      *\n      * @param key connector instance key to be read\n+     * @param lang language to select property keys, null for default (English).\n+     * An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.\n      * @return connector instance with matching key\n      */\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ConnInstanceTO read(@NotNull @PathParam(\"key\") Long key);\n+    ConnInstanceTO read(@NotNull @PathParam(\"key\") Long key, @QueryParam(\"lang\") String lang);\n \n     /**\n      * Returns connector instance for matching resource.\n      *\n      * @param resourceName resource name to be used for connector lookup\n+     * @param lang language to select property keys, null for default (English).\n+     * An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length.\n      * @return connector instance for matching resource\n      */\n     @GET\n     @Path(\"byResource/{resourceName}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ConnInstanceTO readByResource(@NotNull @PathParam(\"resourceName\") String resourceName);\n+    ConnInstanceTO readByResource(\n+            @NotNull @PathParam(\"resourceName\") String resourceName, @QueryParam(\"lang\") String lang);\n \n     /**\n      * Returns a list of all connector instances with property keys in the matching language."},{"sha":"55b874752f730f9cc3b6da77c12c68c149c122a0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -34,7 +34,7 @@\n import org.apache.cxf.jaxrs.model.wadl.Description;\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n \n /**"},{"sha":"44863ba7bd3abe2114503197ead56f84eee06039","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n \n /**\n@@ -51,16 +50,6 @@\n @Path(\"reports\")\n public interface ReportService extends JAXRSService {\n \n-    /**\n-     * Returns a list of available classes for reportlet configuration.\n-     *\n-     * @return list of available classes for reportlet configuration\n-     */\n-    @GET\n-    @Path(\"reportletConfClasses\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ReportletConfClass> getReportletConfClasses();\n-\n     /**\n      * Returns report with matching key.\n      *"},{"sha":"33195796999ef39f9ea0a066164fbdb51a01efec","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":33,"deletions":31,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -26,7 +26,6 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -108,10 +107,10 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_DELETE + \"')\")\n-    public ConnInstanceTO delete(final Long connInstanceId) {\n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n+    public ConnInstanceTO delete(final Long connInstanceKey) {\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceKey);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceKey + \"'\");\n         }\n \n         if (!connInstance.getResources().isEmpty()) {\n@@ -125,43 +124,44 @@ public ConnInstanceTO delete(final Long connInstanceId) {\n \n         ConnInstanceTO connToDelete = binder.getConnInstanceTO(connInstance);\n \n-        connInstanceDAO.delete(connInstanceId);\n+        connInstanceDAO.delete(connInstanceKey);\n \n         return connToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<ConnInstanceTO> list(final String lang) {\n-        if (StringUtils.isBlank(lang)) {\n-            CurrentLocale.set(Locale.ENGLISH);\n-        } else {\n-            CurrentLocale.set(new Locale(lang));\n-        }\n+        CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n \n-        return CollectionUtils.collect(IteratorUtils.filteredIterator(connInstanceDAO.findAll().iterator(),\n-                PredicateUtils.notNullPredicate()), new Transformer<ConnInstance, ConnInstanceTO>() {\n+        List<ConnInstanceTO> result = CollectionUtils.collect(connInstanceDAO.findAll().iterator(),\n+                new Transformer<ConnInstance, ConnInstanceTO>() {\n \n                     @Override\n-                    public ConnInstanceTO transform(final ConnInstance input) {\n+                    public ConnInstanceTO transform(final ConnInstance connInstance) {\n                         ConnInstanceTO result = null;\n                         try {\n-                            result = binder.getConnInstanceTO(input);\n+                            result = binder.getConnInstanceTO(connInstance);\n                         } catch (NotFoundException e) {\n-                            LOG.error(\"Connector '{}#{}' not found\", input.getBundleName(), input.getVersion());\n+                            LOG.error(\"Connector '{}#{}' not found\",\n+                                    connInstance.getBundleName(), connInstance.getVersion());\n                         }\n \n                         return result;\n                     }\n                 }, new ArrayList<ConnInstanceTO>());\n+        CollectionUtils.filter(result, PredicateUtils.notNullPredicate());\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO read(final Long connInstanceId) {\n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n+    public ConnInstanceTO read(final Long connInstanceKey, final String lang) {\n+        CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n+\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceKey);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceKey + \"'\");\n         }\n \n         return binder.getConnInstanceTO(connInstance);\n@@ -229,8 +229,8 @@ public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceT\n         }\n \n         // consider the possibility to receive overridden properties only\n-        final Set<ConnConfProperty> conf = binder.mergeConnConfProperties(connInstanceTO.getConfiguration(),\n-                connInstance.getConfiguration());\n+        Set<ConnConfProperty> conf =\n+                binder.mergeConnConfProperties(connInstanceTO.getConfiguration(), connInstance.getConfiguration());\n \n         // We cannot use Spring bean because this method could be used during resource definition or modification:\n         // bean couldn't exist or couldn't be updated.\n@@ -247,14 +247,14 @@ public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceT\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceKey) {\n \n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceKey);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceKey + \"'\");\n         }\n \n-        return new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n+        return new ArrayList<>(connInstance.getConfiguration());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n@@ -277,7 +277,9 @@ public boolean check(final ConnInstanceTO connInstanceTO) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO readByResource(final String resourceName) {\n+    public ConnInstanceTO readByResource(final String resourceName, final String lang) {\n+        CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n+\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n@@ -296,21 +298,21 @@ public void reload() {\n     protected ConnInstanceTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n-        Long id = null;\n+        Long key = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; id == null && i < args.length; i++) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof Long) {\n-                    id = (Long) args[i];\n+                    key = (Long) args[i];\n                 } else if (args[i] instanceof ConnInstanceTO) {\n-                    id = ((ConnInstanceTO) args[i]).getKey();\n+                    key = ((ConnInstanceTO) args[i]).getKey();\n                 }\n             }\n         }\n \n-        if ((id != null) && !id.equals(0L)) {\n+        if ((key != null) && !key.equals(0L)) {\n             try {\n-                return binder.getConnInstanceTO(connInstanceDAO.find(id));\n+                return binder.getConnInstanceTO(connInstanceDAO.find(key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"e37dc28a2d41e2d7937592eaa9dedc0e0a5f8a64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -24,18 +24,18 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;"},{"sha":"3780d301badab4b0ab5d227563b9341217374341","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -24,10 +24,8 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import java.util.zip.ZipInputStream;\n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n@@ -37,13 +35,10 @@\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -58,10 +53,7 @@\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n-import org.apache.syncope.core.logic.init.ImplementationClassNamesLoader;\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n-import org.apache.syncope.core.logic.report.Reportlet;\n-import org.apache.syncope.core.logic.report.ReportletConfClass;\n import org.apache.syncope.core.logic.report.TextSerializer;\n import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -74,7 +66,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.ClassUtils;\n \n @Component\n public class ReportLogic extends AbstractJobLogic<ReportTO> {\n@@ -94,9 +85,6 @@ public class ReportLogic extends AbstractJobLogic<ReportTO> {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private ImplementationClassNamesLoader classNamesLoader;\n-\n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_CREATE + \"')\")\n     public ReportTO create(final ReportTO reportTO) {\n         Report report = entityFactory.newEntity(Report.class);\n@@ -156,69 +144,6 @@ public ReportTO transform(final Report input) {\n                 }, new ArrayList<ReportTO>());\n     }\n \n-    private Class<? extends ReportletConf> getReportletConfClass(final Class<Reportlet> reportletClass) {\n-        Class<? extends ReportletConf> result = null;\n-\n-        ReportletConfClass annotation = reportletClass.getAnnotation(ReportletConfClass.class);\n-        if (annotation != null) {\n-            result = annotation.value();\n-        }\n-\n-        return result;\n-    }\n-\n-    @SuppressWarnings({ \"rawtypes\" })\n-    private Set<Class<Reportlet>> getAllReportletClasses() {\n-        return CollectionUtils.collect(IteratorUtils.filteredIterator(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET).iterator(),\n-                PredicateUtils.notNullPredicate()),\n-                new Transformer<String, Class<Reportlet>>() {\n-\n-                    @SuppressWarnings(\"unchecked\")\n-                    @Override\n-                    public Class<Reportlet> transform(final String className) {\n-                        Class<Reportlet> result = null;\n-                        try {\n-                            Class reportletClass = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader());\n-                            result = reportletClass;\n-                        } catch (ClassNotFoundException e) {\n-                            LOG.warn(\"Could not load class {}\", className);\n-                        } catch (LinkageError e) {\n-                            LOG.warn(\"Could not link class {}\", className);\n-                        }\n-\n-                        return result;\n-                    }\n-                }, new HashSet<Class<Reportlet>>());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n-    @SuppressWarnings({ \"rawtypes\" })\n-    public Set<String> getReportletConfClasses() {\n-        return CollectionUtils.collect(IteratorUtils.filteredIterator(getAllReportletClasses().iterator(),\n-                PredicateUtils.notNullPredicate()),\n-                new Transformer<Class<Reportlet>, String>() {\n-\n-                    @Override\n-                    public String transform(final Class<Reportlet> reportletClass) {\n-                        Class<? extends ReportletConf> reportletConfClass = getReportletConfClass(reportletClass);\n-                        return reportletConfClass == null ? null : reportletConfClass.getName();\n-                    }\n-                }, new HashSet<String>());\n-    }\n-\n-    public Class<Reportlet> findReportletClassHavingConfClass(final Class<? extends ReportletConf> reportletConfClass) {\n-        Class<Reportlet> result = null;\n-        for (Class<Reportlet> reportletClass : getAllReportletClasses()) {\n-            Class<? extends ReportletConf> found = getReportletConfClass(reportletClass);\n-            if (found != null && found.equals(reportletConfClass)) {\n-                result = reportletClass;\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_READ + \"')\")\n     public ReportTO read(final Long reportKey) {\n         Report report = reportDAO.find(reportKey);"},{"sha":"1354f67077e90b9d3bb4e0aff4d18a384d5a7a64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,17 +18,17 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import static org.apache.syncope.core.logic.init.ImplementationClassNamesLoader.Type;\n-\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;\n import java.util.HashSet;\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.syncope.common.lib.to.SyncopeTO;\n-import org.apache.syncope.core.logic.init.ImplementationClassNamesLoader;\n+import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.AnyTransformer;\n@@ -83,7 +83,10 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     private VirAttrCache virAttrCache;\n \n     @Autowired\n-    private ImplementationClassNamesLoader classNamesLoader;\n+    private PasswordGenerator passwordGenerator;\n+\n+    @Autowired\n+    private ImplementationLookup implementationLookup;\n \n     @Resource(name = \"velocityResourceLoader\")\n     private ResourceWithFallbackLoader resourceLoader;\n@@ -129,15 +132,18 @@ public SyncopeTO info() {\n         syncopeTO.setUserProvisioningManager(uProvisioningManager.getClass().getName());\n         syncopeTO.setGroupProvisioningManager(gProvisioningManager.getClass().getName());\n         syncopeTO.setVirAttrCache(virAttrCache.getClass().getName());\n-\n-        syncopeTO.getReportlets().addAll(classNamesLoader.getClassNames(Type.REPORTLET));\n-        syncopeTO.getTaskJobs().addAll(classNamesLoader.getClassNames(Type.TASKJOBDELEGATE));\n-        syncopeTO.getPropagationActions().addAll(classNamesLoader.getClassNames(Type.PROPAGATION_ACTIONS));\n-        syncopeTO.getSyncActions().addAll(classNamesLoader.getClassNames(Type.SYNC_ACTIONS));\n-        syncopeTO.getPushActions().addAll(classNamesLoader.getClassNames(Type.PUSH_ACTIONS));\n-        syncopeTO.getSyncCorrelationRules().addAll(classNamesLoader.getClassNames(Type.SYNC_CORRELATION_RULE));\n-        syncopeTO.getPushCorrelationRules().addAll(classNamesLoader.getClassNames(Type.PUSH_CORRELATION_RULE));\n-        syncopeTO.getValidators().addAll(classNamesLoader.getClassNames(Type.VALIDATOR));\n+        syncopeTO.setPasswordGenerator(passwordGenerator.getClass().getName());\n+\n+        syncopeTO.getReportlets().addAll(implementationLookup.getClassNames(Type.REPORTLET));\n+        syncopeTO.getAccountRules().addAll(implementationLookup.getClassNames(Type.ACCOUNT_RULE));\n+        syncopeTO.getPasswordRules().addAll(implementationLookup.getClassNames(Type.PASSWORD_RULE));\n+        syncopeTO.getTaskJobs().addAll(implementationLookup.getClassNames(Type.TASKJOBDELEGATE));\n+        syncopeTO.getPropagationActions().addAll(implementationLookup.getClassNames(Type.PROPAGATION_ACTIONS));\n+        syncopeTO.getSyncActions().addAll(implementationLookup.getClassNames(Type.SYNC_ACTIONS));\n+        syncopeTO.getPushActions().addAll(implementationLookup.getClassNames(Type.PUSH_ACTIONS));\n+        syncopeTO.getSyncCorrelationRules().addAll(implementationLookup.getClassNames(Type.SYNC_CORRELATION_RULE));\n+        syncopeTO.getPushCorrelationRules().addAll(implementationLookup.getClassNames(Type.PUSH_CORRELATION_RULE));\n+        syncopeTO.getValidators().addAll(implementationLookup.getClassNames(Type.VALIDATOR));\n \n         Set<String> htmlTemplates = new HashSet<>();\n         Set<String> textTemplates = new HashSet<>();"},{"sha":"c8a986d2ae9fc3cc31445a54225689c59c5ed17f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -449,7 +449,7 @@ public UserTO assign(\n         if (changepwd) {\n             StatusMod statusMod = new StatusMod();\n             statusMod.setOnSyncope(false);\n-            statusMod.getResourceNames().addAll(resources);\n+            statusMod.getResources().addAll(resources);\n             userMod.setPwdPropRequest(statusMod);\n             userMod.setPassword(password);\n         }"},{"sha":"2305e707f232353aa7336d9126064f4ffd56b5eb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"renamed","additions":73,"deletions":17,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -21,18 +21,27 @@\n import java.lang.reflect.Modifier;\n import java.util.Collections;\n import java.util.EnumMap;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.provisioning.api.sync.SyncCorrelationRule;\n-import org.apache.syncope.core.logic.report.Reportlet;\n-import org.apache.syncope.core.persistence.api.SyncopeLoader;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n-import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.slf4j.Logger;\n@@ -47,39 +56,39 @@\n  * Cache class names for all implementations of Syncope interfaces found in classpath, for later usage.\n  */\n @Component\n-public class ImplementationClassNamesLoader implements SyncopeLoader {\n+public class ClassPathScanImplementationLookup implements ImplementationLookup {\n \n-    public enum Type {\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n \n-        REPORTLET,\n-        TASKJOBDELEGATE,\n-        PROPAGATION_ACTIONS,\n-        SYNC_ACTIONS,\n-        PUSH_ACTIONS,\n-        SYNC_CORRELATION_RULE,\n-        PUSH_CORRELATION_RULE,\n-        VALIDATOR\n+    private Map<Type, Set<String>> classNames;\n \n-    }\n+    private Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> reportletClasses;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ImplementationClassNamesLoader.class);\n+    private Map<Class<? extends AccountRuleConf>, Class<? extends AccountRule>> accountRuleClasses;\n \n-    private Map<Type, Set<String>> classNames;\n+    private Map<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>> passwordRuleClasses;\n \n     @Override\n     public Integer getPriority() {\n         return 400;\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public void load() {\n         classNames = new EnumMap<>(Type.class);\n         for (Type type : Type.values()) {\n             classNames.put(type, new HashSet<String>());\n         }\n \n+        reportletClasses = new HashMap<>();\n+        accountRuleClasses = new HashMap<>();\n+        passwordRuleClasses = new HashMap<>();\n+\n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n         scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n@@ -97,6 +106,27 @@ public void load() {\n \n                 if (Reportlet.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.REPORTLET).add(clazz.getName());\n+\n+                    ReportletConfClass annotation = clazz.getAnnotation(ReportletConfClass.class);\n+                    if (annotation != null) {\n+                        reportletClasses.put(annotation.value(), (Class<? extends Reportlet>) clazz);\n+                    }\n+                }\n+\n+                if (AccountRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.ACCOUNT_RULE).add(clazz.getName());\n+\n+                    AccountRuleConfClass annotation = clazz.getAnnotation(AccountRuleConfClass.class);\n+                    if (annotation != null) {\n+                        accountRuleClasses.put(annotation.value(), (Class<? extends AccountRule>) clazz);\n+                    }\n+                }\n+                if (PasswordRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.PASSWORD_RULE).add(clazz.getName());\n+                    PasswordRuleConfClass annotation = clazz.getAnnotation(PasswordRuleConfClass.class);\n+                    if (annotation != null) {\n+                        passwordRuleClasses.put(annotation.value(), (Class<? extends PasswordRule>) clazz);\n+                    }\n                 }\n \n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbsractClazz\n@@ -134,11 +164,37 @@ public void load() {\n             }\n         }\n         classNames = Collections.unmodifiableMap(classNames);\n+        reportletClasses = Collections.unmodifiableMap(reportletClasses);\n+        accountRuleClasses = Collections.unmodifiableMap(accountRuleClasses);\n+        passwordRuleClasses = Collections.unmodifiableMap(passwordRuleClasses);\n \n         LOG.debug(\"Implementation classes found: {}\", classNames);\n     }\n \n+    @Override\n     public Set<String> getClassNames(final Type type) {\n         return classNames.get(type);\n     }\n+\n+    @Override\n+    public Class<? extends Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return reportletClasses.get(reportletConfClass);\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return accountRuleClasses.get(accountRuleConfClass);\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return passwordRuleClasses.get(passwordRuleConfClass);\n+    }\n+\n }","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ImplementationClassNamesLoader.java"},{"sha":"69e6b4f069a0b11ea523339cc604a9629b6faa69","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/AbstractReportlet.java","status":"modified","additions":6,"deletions":16,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAbstractReportlet.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,34 +18,24 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n-import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n \n-public abstract class AbstractReportlet<T extends AbstractReportletConf> implements Reportlet<T> {\n+public abstract class AbstractReportlet implements Reportlet {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractReportlet.class);\n \n-    protected T conf;\n-\n-    public T getConf() {\n-        return conf;\n-    }\n-\n-    @Override\n-    public void setConf(final T conf) {\n-        this.conf = conf;\n-    }\n-\n-    protected abstract void doExtract(ContentHandler handler) throws SAXException;\n+    protected abstract void doExtract(ReportletConf conf, ContentHandler handler) throws SAXException;\n \n     @Override\n     @Transactional(readOnly = true)\n-    public void extract(final ContentHandler handler) throws SAXException {\n+    public void extract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n         if (conf == null) {\n             throw new ReportException(new IllegalArgumentException(\"No configuration provided\"));\n         }\n@@ -55,7 +45,7 @@ public void extract(final ContentHandler handler) throws SAXException {\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_CLASS, ReportXMLConst.XSD_STRING, getClass().getName());\n         handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET, atts);\n \n-        doExtract(handler);\n+        doExtract(conf, handler);\n \n         handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET);\n     }"},{"sha":"ec9a745c21277f3e33fae99c5545ce764f06e8ed","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/GroupReportlet.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n@@ -26,6 +27,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.GroupReportletConf;\n import org.apache.syncope.common.lib.report.GroupReportletConf.Feature;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -43,7 +45,7 @@\n import org.xml.sax.helpers.AttributesImpl;\n \n @ReportletConfClass(GroupReportletConf.class)\n-public class GroupReportlet extends AbstractReportlet<GroupReportletConf> {\n+public class GroupReportlet extends AbstractReportlet {\n \n     private static final int PAGE_SIZE = 10;\n \n@@ -56,6 +58,8 @@ public class GroupReportlet extends AbstractReportlet<GroupReportletConf> {\n     @Autowired\n     private GroupDataBinder groupDataBinder;\n \n+    private GroupReportletConf conf;\n+\n     private List<Group> getPagedGroups(final int page) {\n         List<Group> result;\n \n@@ -296,7 +300,13 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     }\n \n     @Override\n-    protected void doExtract(final ContentHandler handler) throws SAXException {\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof GroupReportletConf) {\n+            this.conf = GroupReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n         doExtractConf(handler);\n         for (int i = 1; i <= (count() / PAGE_SIZE) + 1; i++) {\n             doExtract(handler, getPagedGroups(i));"},{"sha":"2b63d1bbe3e81c8e18d1de7dff4e68226d2c026a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJobDelegate.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -33,11 +33,12 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n-import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -71,7 +72,7 @@ public class ReportJobDelegate {\n     private EntityFactory entityFactory;\n \n     @Autowired\n-    private ReportLogic dataBinder;\n+    private ImplementationLookup implementationLookup;\n \n     @Transactional\n     public void execute(final Long reportKey) throws JobExecutionException {\n@@ -87,7 +88,7 @@ public void execute(final Long reportKey) throws JobExecutionException {\n         execution.setReport(report);\n         execution = reportExecDAO.save(execution);\n \n-        report.addExec(execution);\n+        report.add(execution);\n         report = reportDAO.save(report);\n \n         // 2. define a SAX handler for generating result as XML\n@@ -126,18 +127,26 @@ public void execute(final Long reportKey) throws JobExecutionException {\n \n             // iterate over reportlet instances defined for this report\n             for (ReportletConf reportletConf : report.getReportletConfs()) {\n-                Class<Reportlet> reportletClass =\n-                        dataBinder.findReportletClassHavingConfClass(reportletConf.getClass());\n-                if (reportletClass != null) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    Reportlet<ReportletConf> autowired =\n-                            (Reportlet<ReportletConf>) ApplicationContextProvider.getBeanFactory().\n-                            createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                    autowired.setConf(reportletConf);\n+                Class<? extends Reportlet> reportletClass =\n+                        implementationLookup.getReportletClass(reportletConf.getClass());\n+                if (reportletClass == null) {\n+                    LOG.warn(\"Could not find matching reportlet for {}\", reportletConf.getClass());\n+                } else {\n+                    // fetch (or create) reportlet\n+                    Reportlet reportlet;\n+                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(reportletClass.getName())) {\n+                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n+                                getSingleton(reportletClass.getName());\n+                    } else {\n+                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n+                                createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                        ApplicationContextProvider.getBeanFactory().\n+                                registerSingleton(reportletClass.getName(), reportlet);\n+                    }\n \n                     // invoke reportlet\n                     try {\n-                        autowired.extract(handler);\n+                        reportlet.extract(reportletConf, handler);\n                     } catch (Exception e) {\n                         execution.setStatus(ReportExecStatus.FAILURE);\n "},{"sha":"b7db39fc6698ba22da476d5acbe0e9de8e3aeadb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/StaticReportlet.java","status":"modified","additions":24,"deletions":15,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.core.misc.DataFormat;\n import org.springframework.util.StringUtils;\n@@ -26,10 +28,11 @@\n import org.xml.sax.helpers.AttributesImpl;\n \n @ReportletConfClass(StaticReportletConf.class)\n-public class StaticReportlet extends AbstractReportlet<StaticReportletConf> {\n+public class StaticReportlet extends AbstractReportlet {\n \n-    private void doExtractConf(final ContentHandler handler) throws SAXException {\n+    private StaticReportletConf conf;\n \n+    private void doExtractConf(final ContentHandler handler) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         handler.startElement(\"\", \"\", \"configurations\", null);\n         handler.startElement(\"\", \"\", \"staticAttributes\", atts);\n@@ -67,46 +70,52 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     }\n \n     @Override\n-    public void doExtract(final ContentHandler handler) throws SAXException {\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof StaticReportletConf) {\n+            this.conf = StaticReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n         doExtractConf(handler);\n \n-        if (StringUtils.hasText(conf.getStringField())) {\n+        if (StringUtils.hasText(this.conf.getStringField())) {\n             handler.startElement(\"\", \"\", \"string\", null);\n-            handler.characters(conf.getStringField().toCharArray(), 0, conf.getStringField().length());\n+            handler.characters(this.conf.getStringField().toCharArray(), 0, this.conf.getStringField().length());\n             handler.endElement(\"\", \"\", \"string\");\n         }\n \n-        if (conf.getLongField() != null) {\n+        if (this.conf.getLongField() != null) {\n             handler.startElement(\"\", \"\", \"long\", null);\n-            String printed = String.valueOf(conf.getLongField());\n+            String printed = String.valueOf(this.conf.getLongField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"long\");\n         }\n \n-        if (conf.getDoubleField() != null) {\n+        if (this.conf.getDoubleField() != null) {\n             handler.startElement(\"\", \"\", \"double\", null);\n-            String printed = String.valueOf(conf.getDoubleField());\n+            String printed = String.valueOf(this.conf.getDoubleField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"double\");\n         }\n \n-        if (conf.getDateField() != null) {\n+        if (this.conf.getDateField() != null) {\n             handler.startElement(\"\", \"\", \"date\", null);\n-            String printed = DataFormat.format(conf.getDateField());\n+            String printed = DataFormat.format(this.conf.getDateField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"date\");\n         }\n \n-        if (conf.getTraceLevel() != null) {\n+        if (this.conf.getTraceLevel() != null) {\n             handler.startElement(\"\", \"\", \"enum\", null);\n-            String printed = conf.getTraceLevel().name();\n+            String printed = this.conf.getTraceLevel().name();\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"enum\");\n         }\n \n-        if (conf.getListField() != null && !conf.getListField().isEmpty()) {\n+        if (this.conf.getListField() != null && !this.conf.getListField().isEmpty()) {\n             handler.startElement(\"\", \"\", \"list\", null);\n-            for (String item : conf.getListField()) {\n+            for (String item : this.conf.getListField()) {\n                 if (StringUtils.hasText(item)) {\n                     handler.startElement(\"\", \"\", \"string\", null);\n                     handler.characters(item.toCharArray(), 0, item.length());"},{"sha":"91715a7a54759ee818c5dd5484eb84fdf04fe4f1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf.Feature;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -49,7 +51,7 @@\n import org.xml.sax.helpers.AttributesImpl;\n \n @ReportletConfClass(UserReportletConf.class)\n-public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n+public class UserReportlet extends AbstractReportlet {\n \n     private static final int PAGE_SIZE = 10;\n \n@@ -68,6 +70,8 @@ public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n     @Autowired\n     private AnyObjectDataBinder anyObjectDataBinder;\n \n+    private UserReportletConf conf;\n+\n     private List<User> getPagedUsers(final int page) {\n         List<User> result;\n \n@@ -370,7 +374,13 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     }\n \n     @Override\n-    protected void doExtract(final ContentHandler handler) throws SAXException {\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof UserReportletConf) {\n+            this.conf = UserReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n         doExtractConf(handler);\n         for (int i = 1; i <= (count() / PAGE_SIZE) + 1; i++) {\n             doExtract(handler, getPagedUsers(i));"},{"sha":"5ab5f44df4a8e9d688c37744af1b9efd3ba69d1f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.core.misc;\n \n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n-import org.apache.syncope.core.misc.security.PasswordGenerator;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.misc.security.SecureRandomUtils;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -30,6 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -41,7 +41,6 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -57,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -117,32 +117,28 @@ public <T extends AnyTO> T getAnyTO(\n         if (anyTO instanceof UserTO && StringUtils.isBlank(((UserTO) anyTO).getPassword())) {\n             final UserTO userTO = (UserTO) anyTO;\n \n-            List<PasswordPolicySpec> ppSpecs = new ArrayList<>();\n+            List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n \n             Realm realm = realmDAO.find(userTO.getRealm());\n             if (realm != null) {\n                 for (Realm ancestor : realmDAO.findAncestors(realm)) {\n-                    if (ancestor.getPasswordPolicy() != null\n-                            && ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n-\n-                        ppSpecs.add(ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n+                    if (ancestor.getPasswordPolicy() != null) {\n+                        ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n                     }\n                 }\n             }\n \n             for (String resName : userTO.getResources()) {\n                 ExternalResource resource = resourceDAO.find(resName);\n-                if (resource != null && resource.getPasswordPolicy() != null\n-                        && resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n-\n-                    ppSpecs.add(resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n+                if (resource != null && resource.getPasswordPolicy() != null) {\n+                    ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n                 }\n             }\n \n             String password;\n             try {\n-                password = pwdGen.generate(ppSpecs);\n-            } catch (InvalidPasswordPolicySpecException e) {\n+                password = pwdGen.generate(ruleConfs);\n+            } catch (InvalidPasswordRuleConf e) {\n                 LOG.error(\"Could not generate policy-compliant random password for {}\", userTO, e);\n \n                 password = SecureRandomUtils.generateRandomPassword(16);"},{"sha":"5cb419daf6c08bc3bbaabaccff0b8c8e5f5934c3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.core.misc;\n \n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n-import org.apache.syncope.core.misc.security.PasswordGenerator;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -58,6 +57,7 @@\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -329,7 +329,7 @@ private static Pair<String, Attribute> prepareAttr(\n                     } else if (provision.getResource().isRandomPwdIfNotProvided()) {\n                         try {\n                             passwordAttrValue = passwordGenerator.generate(user);\n-                        } catch (InvalidPasswordPolicySpecException e) {\n+                        } catch (InvalidPasswordRuleConf e) {\n                             LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n                         }\n                     }"},{"sha":"23740d631f9e55435e508a954736f1d663f523d4","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/AccountPolicyEnforcer.java","status":"removed","additions":0,"deletions":90,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb94a99fbc19e219dda417097e940950706c204/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb94a99fbc19e219dda417097e940950706c204/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java?ref=bbb94a99fbc19e219dda417097e940950706c204","patch":"@@ -1,90 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-import java.util.regex.Pattern;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class AccountPolicyEnforcer {\n-\n-    private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n-\n-    public boolean enforce(final AccountPolicySpec policy, final PolicyType type, final User user) {\n-        if (user.getUsername() == null) {\n-            throw new PolicyEnforceException(\"Invalid account\");\n-        }\n-\n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n-        }\n-\n-        // check min length\n-        if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too short\");\n-        }\n-\n-        // check max length\n-        if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {\n-            throw new AccountPolicyException(\"Username too long\");\n-        }\n-\n-        // check words not permitted\n-        for (String word : policy.getWordsNotPermitted()) {\n-            if (user.getUsername().contains(word)) {\n-                throw new AccountPolicyException(\"Used word(s) not permitted\");\n-            }\n-        }\n-\n-        // check case\n-        if (policy.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n-            throw new AccountPolicyException(\"No lowercase characters permitted\");\n-        }\n-        if (policy.isAllLowerCase() && !user.getUsername().equals(user.getUsername().toLowerCase())) {\n-            throw new AccountPolicyException(\"No uppercase characters permitted\");\n-        }\n-\n-        // check pattern\n-        Pattern pattern = (policy.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(policy.getPattern());\n-        if (!pattern.matcher(user.getUsername()).matches()) {\n-            throw new AccountPolicyException(\"Username does not match pattern\");\n-        }\n-\n-        // check prefix\n-        for (String prefix : policy.getPrefixesNotPermitted()) {\n-            if (user.getUsername().startsWith(prefix)) {\n-                throw new AccountPolicyException(\"Prefix not permitted\");\n-            }\n-        }\n-\n-        // check suffix\n-        for (String suffix : policy.getSuffixesNotPermitted()) {\n-            if (user.getUsername().endsWith(suffix)) {\n-                throw new AccountPolicyException(\"Suffix not permitted\");\n-            }\n-        }\n-\n-        // check for subsequent failed logins\n-        return (user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n-                && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended());\n-    }\n-}"},{"sha":"4b1380783d36ec9c584bee45ca4675ba7060b1d1","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/InvalidPasswordRuleConf.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FInvalidPasswordRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -19,19 +19,19 @@\n package org.apache.syncope.core.misc.policy;\n \n /**\n- * Raise when the merge of two or more PasswordPolicySpec leds to incompatible condition.\n+ * Raise when the merge of two or more PasswordRuleconf instances led to an inconsistent condition.\n  *\n- * @see org.apache.syncope.common.lib.types.PasswordPolicySpec\n+ * @see org.apache.syncope.common.lib.policy.PasswordRuleConf\n  */\n-public class InvalidPasswordPolicySpecException extends Exception {\n+public class InvalidPasswordRuleConf extends Exception {\n \n     private static final long serialVersionUID = 4810651743226663580L;\n \n-    public InvalidPasswordPolicySpecException(final String msg) {\n+    public InvalidPasswordRuleConf(final String msg) {\n         super(msg);\n     }\n \n-    public InvalidPasswordPolicySpecException(final String msg, final Exception e) {\n+    public InvalidPasswordRuleConf(final String msg, final Exception e) {\n         super(msg, e);\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/InvalidPasswordPolicySpecException.java"},{"sha":"fd6abd269a66a2f3d65a731d73f46c09ade94846","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEvaluator.java","status":"removed","additions":0,"deletions":103,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb94a99fbc19e219dda417097e940950706c204/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb94a99fbc19e219dda417097e940950706c204/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java?ref=bbb94a99fbc19e219dda417097e940950706c204","patch":"@@ -1,103 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.policy;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class PolicyEvaluator {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(PolicyEvaluator.class);\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends PolicySpec> T evaluate(final Policy policy, final Any<?, ?, ?> any) {\n-        if (policy == null) {\n-            return null;\n-        }\n-\n-        T result = null;\n-        switch (policy.getType()) {\n-            case PASSWORD:\n-                PasswordPolicySpec ppSpec = policy.getSpecification(PasswordPolicySpec.class);\n-                PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n-\n-                BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[] { \"schemasNotPermitted\" });\n-\n-                for (String schema : ppSpec.getSchemasNotPermitted()) {\n-                    PlainAttr<?> attr = any.getPlainAttr(schema);\n-                    if (attr != null) {\n-                        List<String> values = attr.getValuesAsStrings();\n-                        if (values != null && !values.isEmpty()) {\n-                            evaluatedPPSpec.getWordsNotPermitted().add(values.get(0));\n-                        }\n-                    }\n-                }\n-\n-                // Password history verification and update\n-                if (!(any instanceof User)) {\n-                    LOG.error(\"Cannot check previous passwords. instance is not user object: {}\",\n-                            any.getClass().getName());\n-                    result = (T) evaluatedPPSpec;\n-                    break;\n-                }\n-                User user = (User) any;\n-                if (user.verifyPasswordHistory(user.getClearPassword(), ppSpec.getHistoryLength())) {\n-                    evaluatedPPSpec.getWordsNotPermitted().add(user.getClearPassword());\n-                }\n-                result = (T) evaluatedPPSpec;\n-                break;\n-\n-            case ACCOUNT:\n-                final AccountPolicySpec spec = policy.getSpecification(AccountPolicySpec.class);\n-                final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n-\n-                BeanUtils.copyProperties(spec, accountPolicy, new String[] { \"schemasNotPermitted\" });\n-\n-                for (String schema : spec.getSchemasNotPermitted()) {\n-                    PlainAttr attr = any.getPlainAttr(schema);\n-                    if (attr != null) {\n-                        List<String> values = attr.getValuesAsStrings();\n-                        if (values != null && !values.isEmpty()) {\n-                            accountPolicy.getWordsNotPermitted().add(values.get(0));\n-                        }\n-                    }\n-                }\n-\n-                result = (T) accountPolicy;\n-                break;\n-\n-            case SYNC:\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-}"},{"sha":"9652f73c44bfab5b68122b48d1c4e194392d42d8","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/DefaultPasswordGenerator.java","status":"added","additions":334,"deletions":0,"changes":334,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDefaultPasswordGenerator.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,334 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.PolicyPattern;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Generate random passwords according to given policies.\n+ * When no minimum and / or maximum length are specified, default values are set.\n+ *\n+ * <strong>WARNING</strong>: This class only takes {@link DefaultPasswordRuleConf} into account.\n+ */\n+public class DefaultPasswordGenerator implements PasswordGenerator {\n+\n+    private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n+\n+    private static final int VERY_MIN_LENGTH = 0;\n+\n+    private static final int VERY_MAX_LENGTH = 64;\n+\n+    private static final int MIN_LENGTH_IF_ZERO = 6;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Override\n+    public String generate(final User user) throws InvalidPasswordRuleConf {\n+        List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+\n+        for (Realm ancestor : realmDAO.findAncestors(user.getRealm())) {\n+            if (ancestor.getPasswordPolicy() != null) {\n+                ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n+            }\n+        }\n+\n+        for (ExternalResource resource : userDAO.findAllResources(user)) {\n+            if (resource.getPasswordPolicy() != null) {\n+                ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n+            }\n+        }\n+\n+        return generate(ruleConfs);\n+    }\n+\n+    @Override\n+    public String generate(final List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf {\n+        List<DefaultPasswordRuleConf> defaultRuleConfs = new ArrayList<>();\n+        for (PasswordRuleConf ruleConf : ruleConfs) {\n+            if (ruleConf instanceof DefaultPasswordRuleConf) {\n+                defaultRuleConfs.add((DefaultPasswordRuleConf) ruleConf);\n+            }\n+        }\n+\n+        DefaultPasswordRuleConf ruleConf = merge(defaultRuleConfs);\n+        check(ruleConf);\n+        return generate(ruleConf);\n+    }\n+\n+    private DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleConf> defaultRuleConfs) {\n+        DefaultPasswordRuleConf result = new DefaultPasswordRuleConf();\n+        result.setMinLength(VERY_MIN_LENGTH);\n+        result.setMaxLength(VERY_MAX_LENGTH);\n+\n+        for (DefaultPasswordRuleConf ruleConf : defaultRuleConfs) {\n+            if (ruleConf.getMinLength() > result.getMinLength()) {\n+                result.setMinLength(ruleConf.getMinLength());\n+            }\n+\n+            if ((ruleConf.getMaxLength() != 0) && ((ruleConf.getMaxLength() < result.getMaxLength()))) {\n+                result.setMaxLength(ruleConf.getMaxLength());\n+            }\n+            result.getPrefixesNotPermitted().addAll(ruleConf.getPrefixesNotPermitted());\n+            result.getSuffixesNotPermitted().addAll(ruleConf.getSuffixesNotPermitted());\n+\n+            if (!result.isNonAlphanumericRequired()) {\n+                result.setNonAlphanumericRequired(ruleConf.isNonAlphanumericRequired());\n+            }\n+\n+            if (!result.isAlphanumericRequired()) {\n+                result.setAlphanumericRequired(ruleConf.isAlphanumericRequired());\n+            }\n+            if (!result.isDigitRequired()) {\n+                result.setDigitRequired(ruleConf.isDigitRequired());\n+            }\n+\n+            if (!result.isLowercaseRequired()) {\n+                result.setLowercaseRequired(ruleConf.isLowercaseRequired());\n+            }\n+            if (!result.isUppercaseRequired()) {\n+                result.setUppercaseRequired(ruleConf.isUppercaseRequired());\n+            }\n+            if (!result.isMustStartWithDigit()) {\n+                result.setMustStartWithDigit(ruleConf.isMustStartWithDigit());\n+            }\n+            if (!result.isMustntStartWithDigit()) {\n+                result.setMustntStartWithDigit(ruleConf.isMustntStartWithDigit());\n+            }\n+            if (!result.isMustEndWithDigit()) {\n+                result.setMustEndWithDigit(ruleConf.isMustEndWithDigit());\n+            }\n+            if (result.isMustntEndWithDigit()) {\n+                result.setMustntEndWithDigit(ruleConf.isMustntEndWithDigit());\n+            }\n+            if (!result.isMustStartWithAlpha()) {\n+                result.setMustStartWithAlpha(ruleConf.isMustStartWithAlpha());\n+            }\n+            if (!result.isMustntStartWithAlpha()) {\n+                result.setMustntStartWithAlpha(ruleConf.isMustntStartWithAlpha());\n+            }\n+            if (!result.isMustStartWithNonAlpha()) {\n+                result.setMustStartWithNonAlpha(ruleConf.isMustStartWithNonAlpha());\n+            }\n+            if (!result.isMustntStartWithNonAlpha()) {\n+                result.setMustntStartWithNonAlpha(ruleConf.isMustntStartWithNonAlpha());\n+            }\n+            if (!result.isMustEndWithNonAlpha()) {\n+                result.setMustEndWithNonAlpha(ruleConf.isMustEndWithNonAlpha());\n+            }\n+            if (!result.isMustntEndWithNonAlpha()) {\n+                result.setMustntEndWithNonAlpha(ruleConf.isMustntEndWithNonAlpha());\n+            }\n+            if (!result.isMustEndWithAlpha()) {\n+                result.setMustEndWithAlpha(ruleConf.isMustEndWithAlpha());\n+            }\n+            if (!result.isMustntEndWithAlpha()) {\n+                result.setMustntEndWithAlpha(ruleConf.isMustntEndWithAlpha());\n+            }\n+            if (!result.isUsernameAllowed()) {\n+                result.setUsernameAllowed(ruleConf.isUsernameAllowed());\n+            }\n+        }\n+\n+        if (result.getMinLength() == 0) {\n+            result.setMinLength(\n+                    result.getMaxLength() < MIN_LENGTH_IF_ZERO ? result.getMaxLength() : MIN_LENGTH_IF_ZERO);\n+        }\n+\n+        return result;\n+    }\n+\n+    private void check(final DefaultPasswordRuleConf defaultPasswordRuleConf)\n+            throws InvalidPasswordRuleConf {\n+\n+        if (defaultPasswordRuleConf.isMustEndWithAlpha() && defaultPasswordRuleConf.isMustntEndWithAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithAlpha and mustntEndWithAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustEndWithAlpha() && defaultPasswordRuleConf.isMustEndWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithAlpha and mustEndWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustEndWithDigit() && defaultPasswordRuleConf.isMustntEndWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithDigit and mustntEndWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustEndWithNonAlpha() && defaultPasswordRuleConf.isMustntEndWithNonAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustEndWithNonAlpha and mustntEndWithNonAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithAlpha() && defaultPasswordRuleConf.isMustntStartWithAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithAlpha and mustntStartWithAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithAlpha() && defaultPasswordRuleConf.isMustStartWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithAlpha and mustStartWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithDigit() && defaultPasswordRuleConf.isMustntStartWithDigit()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithDigit and mustntStartWithDigit are both true\");\n+        }\n+        if (defaultPasswordRuleConf.isMustStartWithNonAlpha() && defaultPasswordRuleConf.isMustntStartWithNonAlpha()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"mustStartWithNonAlpha and mustntStartWithNonAlpha are both true\");\n+        }\n+        if (defaultPasswordRuleConf.getMinLength() > defaultPasswordRuleConf.getMaxLength()) {\n+            throw new InvalidPasswordRuleConf(\n+                    \"Minimun length (\" + defaultPasswordRuleConf.getMinLength() + \")\"\n+                    + \"is greater than maximum length (\" + defaultPasswordRuleConf.getMaxLength() + \")\");\n+        }\n+    }\n+\n+    private String generate(final DefaultPasswordRuleConf ruleConf) {\n+        String[] generatedPassword = new String[ruleConf.getMinLength()];\n+\n+        for (int i = 0; i < generatedPassword.length; i++) {\n+            generatedPassword[i] = StringUtils.EMPTY;\n+        }\n+\n+        checkStartChar(generatedPassword, ruleConf);\n+\n+        checkEndChar(generatedPassword, ruleConf);\n+\n+        checkRequired(generatedPassword, ruleConf);\n+\n+        for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n+                firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n+\n+            generatedPassword[firstEmptyChar] = SecureRandomUtils.generateRandomLetter();\n+        }\n+\n+        checkPrefixAndSuffix(generatedPassword, ruleConf);\n+\n+        return StringUtils.join(generatedPassword);\n+    }\n+\n+    private void checkStartChar(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        if (ruleConf.isMustStartWithAlpha()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustStartWithNonAlpha() || ruleConf.isMustStartWithDigit()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n+        }\n+        if (ruleConf.isMustntStartWithAlpha()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n+        }\n+        if (ruleConf.isMustntStartWithDigit()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustntStartWithNonAlpha()) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+\n+        if (StringUtils.EMPTY.equals(generatedPassword[0])) {\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n+        }\n+    }\n+\n+    private void checkEndChar(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        if (ruleConf.isMustEndWithAlpha()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustEndWithNonAlpha() || ruleConf.isMustEndWithDigit()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n+        }\n+\n+        if (ruleConf.isMustntEndWithAlpha()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n+        }\n+        if (ruleConf.isMustntEndWithDigit()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+        if (ruleConf.isMustntEndWithNonAlpha()) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+\n+        if (StringUtils.EMPTY.equals(generatedPassword[ruleConf.getMinLength() - 1])) {\n+            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n+        }\n+    }\n+\n+    private int firstEmptyChar(final String[] generatedPStrings) {\n+        int index = 0;\n+        while (!generatedPStrings[index].isEmpty()) {\n+            index++;\n+        }\n+        return index;\n+    }\n+\n+    private void checkRequired(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        if (ruleConf.isDigitRequired()\n+                && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtils.generateRandomNumber();\n+        }\n+\n+        if (ruleConf.isUppercaseRequired()\n+                && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SecureRandomUtils.generateRandomLetter().toUpperCase();\n+        }\n+\n+        if (ruleConf.isLowercaseRequired()\n+                && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SecureRandomUtils.generateRandomLetter().toLowerCase();\n+        }\n+\n+        if (ruleConf.isNonAlphanumericRequired()\n+                && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n+\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SecureRandomUtils.generateRandomSpecialCharacter(SPECIAL_CHARS);\n+        }\n+    }\n+\n+    private void checkPrefixAndSuffix(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n+        for (String prefix : ruleConf.getPrefixesNotPermitted()) {\n+            if (StringUtils.join(generatedPassword).startsWith(prefix)) {\n+                checkStartChar(generatedPassword, ruleConf);\n+            }\n+        }\n+\n+        for (String suffix : ruleConf.getSuffixesNotPermitted()) {\n+            if (StringUtils.join(generatedPassword).endsWith(suffix)) {\n+                checkEndChar(generatedPassword, ruleConf);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"936dae56eb0f42d549bab77b203aec6ca0f9b12f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":5,"deletions":305,"changes":310,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,315 +18,15 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.ArrayList;\n import java.util.List;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n-import org.apache.syncope.core.misc.policy.PolicyPattern;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * Generate random passwords according to given policies.\n- * When no minimum and / or maximum length are specified, default values are set.\n- *\n- * @see org.apache.syncope.core.persistence.api.entity.PasswordPolicy\n- */\n-@Component\n-public class PasswordGenerator {\n-\n-    private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n-\n-    private static final int VERY_MIN_LENGTH = 0;\n-\n-    private static final int VERY_MAX_LENGTH = 64;\n-\n-    private static final int MIN_LENGTH_IF_ZERO = 6;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    public String generate(final List<PasswordPolicySpec> ppSpecs) throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec policySpec = merge(ppSpecs);\n-\n-        check(policySpec);\n-\n-        return generate(policySpec);\n-    }\n-\n-    public String generate(final User user)\n-            throws InvalidPasswordPolicySpecException {\n-\n-        List<PasswordPolicySpec> ppSpecs = new ArrayList<>();\n-\n-        for (Realm ancestor : realmDAO.findAncestors(user.getRealm())) {\n-            if (ancestor.getPasswordPolicy() != null\n-                    && ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n-\n-                ppSpecs.add(ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n-            }\n-        }\n-\n-        for (ExternalResource resource : userDAO.findAllResources(user)) {\n-            if (resource.getPasswordPolicy() != null\n-                    && resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n-\n-                ppSpecs.add(resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n-            }\n-        }\n-\n-        PasswordPolicySpec policySpec = merge(ppSpecs);\n-        check(policySpec);\n-        return generate(policySpec);\n-    }\n-\n-    private PasswordPolicySpec merge(final List<PasswordPolicySpec> ppSpecs) {\n-        PasswordPolicySpec fpps = new PasswordPolicySpec();\n-        fpps.setMinLength(VERY_MIN_LENGTH);\n-        fpps.setMaxLength(VERY_MAX_LENGTH);\n-\n-        for (PasswordPolicySpec policySpec : ppSpecs) {\n-            if (policySpec.getMinLength() > fpps.getMinLength()) {\n-                fpps.setMinLength(policySpec.getMinLength());\n-            }\n-\n-            if ((policySpec.getMaxLength() != 0) && ((policySpec.getMaxLength() < fpps.getMaxLength()))) {\n-                fpps.setMaxLength(policySpec.getMaxLength());\n-            }\n-            fpps.getPrefixesNotPermitted().addAll(policySpec.getPrefixesNotPermitted());\n-            fpps.getSuffixesNotPermitted().addAll(policySpec.getSuffixesNotPermitted());\n-\n-            if (!fpps.isNonAlphanumericRequired()) {\n-                fpps.setNonAlphanumericRequired(policySpec.isNonAlphanumericRequired());\n-            }\n-\n-            if (!fpps.isAlphanumericRequired()) {\n-                fpps.setAlphanumericRequired(policySpec.isAlphanumericRequired());\n-            }\n-            if (!fpps.isDigitRequired()) {\n-                fpps.setDigitRequired(policySpec.isDigitRequired());\n-            }\n-\n-            if (!fpps.isLowercaseRequired()) {\n-                fpps.setLowercaseRequired(policySpec.isLowercaseRequired());\n-            }\n-            if (!fpps.isUppercaseRequired()) {\n-                fpps.setUppercaseRequired(policySpec.isUppercaseRequired());\n-            }\n-            if (!fpps.isMustStartWithDigit()) {\n-                fpps.setMustStartWithDigit(policySpec.isMustStartWithDigit());\n-            }\n-            if (!fpps.isMustntStartWithDigit()) {\n-                fpps.setMustntStartWithDigit(policySpec.isMustntStartWithDigit());\n-            }\n-            if (!fpps.isMustEndWithDigit()) {\n-                fpps.setMustEndWithDigit(policySpec.isMustEndWithDigit());\n-            }\n-            if (fpps.isMustntEndWithDigit()) {\n-                fpps.setMustntEndWithDigit(policySpec.isMustntEndWithDigit());\n-            }\n-            if (!fpps.isMustStartWithAlpha()) {\n-                fpps.setMustStartWithAlpha(policySpec.isMustStartWithAlpha());\n-            }\n-            if (!fpps.isMustntStartWithAlpha()) {\n-                fpps.setMustntStartWithAlpha(policySpec.isMustntStartWithAlpha());\n-            }\n-            if (!fpps.isMustStartWithNonAlpha()) {\n-                fpps.setMustStartWithNonAlpha(policySpec.isMustStartWithNonAlpha());\n-            }\n-            if (!fpps.isMustntStartWithNonAlpha()) {\n-                fpps.setMustntStartWithNonAlpha(policySpec.isMustntStartWithNonAlpha());\n-            }\n-            if (!fpps.isMustEndWithNonAlpha()) {\n-                fpps.setMustEndWithNonAlpha(policySpec.isMustEndWithNonAlpha());\n-            }\n-            if (!fpps.isMustntEndWithNonAlpha()) {\n-                fpps.setMustntEndWithNonAlpha(policySpec.isMustntEndWithNonAlpha());\n-            }\n-            if (!fpps.isMustEndWithAlpha()) {\n-                fpps.setMustEndWithAlpha(policySpec.isMustEndWithAlpha());\n-            }\n-            if (!fpps.isMustntEndWithAlpha()) {\n-                fpps.setMustntEndWithAlpha(policySpec.isMustntEndWithAlpha());\n-            }\n-        }\n-\n-        if (fpps.getMinLength() == 0) {\n-            fpps.setMinLength(fpps.getMaxLength() < MIN_LENGTH_IF_ZERO ? fpps.getMaxLength() : MIN_LENGTH_IF_ZERO);\n-        }\n-\n-        return fpps;\n-    }\n-\n-    private void check(final PasswordPolicySpec policySpec)\n-            throws InvalidPasswordPolicySpecException {\n-\n-        if (policySpec.isMustEndWithAlpha() && policySpec.isMustntEndWithAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithAlpha and mustntEndWithAlpha are both true\");\n-        }\n-        if (policySpec.isMustEndWithAlpha() && policySpec.isMustEndWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithAlpha and mustEndWithDigit are both true\");\n-        }\n-        if (policySpec.isMustEndWithDigit() && policySpec.isMustntEndWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithDigit and mustntEndWithDigit are both true\");\n-        }\n-        if (policySpec.isMustEndWithNonAlpha() && policySpec.isMustntEndWithNonAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustEndWithNonAlpha and mustntEndWithNonAlpha are both true\");\n-        }\n-        if (policySpec.isMustStartWithAlpha() && policySpec.isMustntStartWithAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithAlpha and mustntStartWithAlpha are both true\");\n-        }\n-        if (policySpec.isMustStartWithAlpha() && policySpec.isMustStartWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithAlpha and mustStartWithDigit are both true\");\n-        }\n-        if (policySpec.isMustStartWithDigit() && policySpec.isMustntStartWithDigit()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithDigit and mustntStartWithDigit are both true\");\n-        }\n-        if (policySpec.isMustStartWithNonAlpha() && policySpec.isMustntStartWithNonAlpha()) {\n-            throw new InvalidPasswordPolicySpecException(\n-                    \"mustStartWithNonAlpha and mustntStartWithNonAlpha are both true\");\n-        }\n-        if (policySpec.getMinLength() > policySpec.getMaxLength()) {\n-            throw new InvalidPasswordPolicySpecException(\"Minimun length (\" + policySpec.getMinLength() + \")\"\n-                    + \"is greater than maximum length (\" + policySpec.getMaxLength() + \")\");\n-        }\n-    }\n-\n-    private String generate(final PasswordPolicySpec policySpec) {\n-        String[] generatedPassword = new String[policySpec.getMinLength()];\n-\n-        for (int i = 0; i < generatedPassword.length; i++) {\n-            generatedPassword[i] = StringUtils.EMPTY;\n-        }\n-\n-        checkStartChar(generatedPassword, policySpec);\n-\n-        checkEndChar(generatedPassword, policySpec);\n-\n-        checkRequired(generatedPassword, policySpec);\n-\n-        for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n-                firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n-\n-            generatedPassword[firstEmptyChar] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        checkPrefixAndSuffix(generatedPassword, policySpec);\n-\n-        return StringUtils.join(generatedPassword);\n-    }\n-\n-    private void checkStartChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        if (policySpec.isMustStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustStartWithNonAlpha() || policySpec.isMustStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (policySpec.isMustntStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (policySpec.isMustntStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustntStartWithNonAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        if (StringUtils.EMPTY.equals(generatedPassword[0])) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-    }\n-\n-    private void checkEndChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        if (policySpec.isMustEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustEndWithNonAlpha() || policySpec.isMustEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n-        }\n-\n-        if (policySpec.isMustntEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (policySpec.isMustntEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (policySpec.isMustntEndWithNonAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        if (StringUtils.EMPTY.equals(generatedPassword[policySpec.getMinLength() - 1])) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-    }\n-\n-    private int firstEmptyChar(final String[] generatedPStrings) {\n-        int index = 0;\n-        while (!generatedPStrings[index].isEmpty()) {\n-            index++;\n-        }\n-        return index;\n-    }\n-\n-    private void checkRequired(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        if (policySpec.isDigitRequired()\n-                && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtils.generateRandomNumber();\n-        }\n-\n-        if (policySpec.isUppercaseRequired()\n-                && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomLetter().toUpperCase();\n-        }\n-\n-        if (policySpec.isLowercaseRequired()\n-                && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomLetter().toLowerCase();\n-        }\n-\n-        if (policySpec.isNonAlphanumericRequired()\n-                && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomSpecialCharacter(SPECIAL_CHARS);\n-        }\n-    }\n+public interface PasswordGenerator {\n \n-    private void checkPrefixAndSuffix(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n-        for (String prefix : policySpec.getPrefixesNotPermitted()) {\n-            if (StringUtils.join(generatedPassword).startsWith(prefix)) {\n-                checkStartChar(generatedPassword, policySpec);\n-            }\n-        }\n+    String generate(User user) throws InvalidPasswordRuleConf;\n \n-        for (String suffix : policySpec.getSuffixesNotPermitted()) {\n-            if (StringUtils.join(generatedPassword).endsWith(suffix)) {\n-                checkEndChar(generatedPassword, policySpec);\n-            }\n-        }\n-    }\n+    String generate(List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf;\n \n }"},{"sha":"73db51019e604e2c397c123bceda1f4b061161f8","filename":"core/misc/src/main/resources/security.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -29,3 +29,4 @@ digester.invertPositionOfPlainSaltInEncryptionResults=true\n digester.invertPositionOfSaltInMessageBeforeDigesting=true\n digester.useLenientSaltSizeCheck=true\n \n+passwordGenerator=org.apache.syncope.core.misc.security.DefaultPasswordGenerator"},{"sha":"711e2f3e47108965c791f33e3c83dd9be92f4daa","filename":"core/misc/src/main/resources/securityContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -32,6 +32,7 @@ under the License.\n     <constructor-arg value=\"${anonymousUser}\"/>\n   </bean>\n   \n+  <bean class=\"${passwordGenerator}\"/>\n   <bean class=\"org.apache.syncope.core.misc.spring.DefaultRolesPrefixPostProcessor\"/>\n   \n   <security:global-method-security pre-post-annotations=\"enabled\"/>"},{"sha":"536fa60065967978fc638fffacc670e8a46ac7bd","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/security/PasswordGeneratorTest.java","status":"modified","additions":75,"deletions":71,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -25,114 +25,118 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.misc.policy.PolicyPattern;\n import org.junit.Test;\n \n public class PasswordGeneratorTest {\n \n-    private final PasswordGenerator passwordGenerator = new PasswordGenerator();\n-\n-    private PasswordPolicySpec createBasePasswordPolicySpec() {\n-        PasswordPolicySpec basePasswordPolicySpec = new PasswordPolicySpec();\n-        basePasswordPolicySpec.setAlphanumericRequired(false);\n-        basePasswordPolicySpec.setDigitRequired(false);\n-        basePasswordPolicySpec.setLowercaseRequired(false);\n-        basePasswordPolicySpec.setMaxLength(1000);\n-        basePasswordPolicySpec.setMinLength(8);\n-        basePasswordPolicySpec.setMustEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustEndWithDigit(false);\n-        basePasswordPolicySpec.setMustEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithDigit(false);\n-        basePasswordPolicySpec.setMustStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithDigit(false);\n-        basePasswordPolicySpec.setMustntEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithDigit(false);\n-        basePasswordPolicySpec.setMustntStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setNonAlphanumericRequired(false);\n-        basePasswordPolicySpec.setUppercaseRequired(false);\n-        return basePasswordPolicySpec;\n+    private final DefaultPasswordGenerator passwordGenerator = new DefaultPasswordGenerator();\n+\n+    private DefaultPasswordRuleConf createBaseDefaultPasswordRuleConf() {\n+        DefaultPasswordRuleConf baseDefaultPasswordRuleConf = new DefaultPasswordRuleConf();\n+        baseDefaultPasswordRuleConf.setAlphanumericRequired(false);\n+        baseDefaultPasswordRuleConf.setDigitRequired(false);\n+        baseDefaultPasswordRuleConf.setLowercaseRequired(false);\n+        baseDefaultPasswordRuleConf.setMaxLength(1000);\n+        baseDefaultPasswordRuleConf.setMinLength(8);\n+        baseDefaultPasswordRuleConf.setMustEndWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustEndWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustEndWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustStartWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustntEndWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithAlpha(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithDigit(false);\n+        baseDefaultPasswordRuleConf.setMustntStartWithNonAlpha(false);\n+        baseDefaultPasswordRuleConf.setNonAlphanumericRequired(false);\n+        baseDefaultPasswordRuleConf.setUppercaseRequired(false);\n+        return baseDefaultPasswordRuleConf;\n     }\n \n     @Test\n-    public void startEndWithDigit() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustStartWithDigit(true);\n-\n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustEndWithDigit(true);\n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n+    public void startEndWithDigit() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMustStartWithDigit(true);\n+\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf2.setMustEndWithDigit(true);\n+\n+        List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n+        ruleConfs.add(pwdRuleConf);\n+        ruleConfs.add(pwdRuleConf2);\n+        String generatedPassword = passwordGenerator.generate(ruleConfs);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isDigit(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test\n-    public void startWithDigitAndWithAlpha() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustStartWithDigit(true);\n-\n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustEndWithAlpha(true);\n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n+    public void startWithDigitAndWithAlpha() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMustStartWithDigit(true);\n+\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf2.setMustEndWithAlpha(true);\n+\n+        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n+        pwdRuleConfs.add(pwdRuleConf);\n+        pwdRuleConfs.add(pwdRuleConf2);\n+        String generatedPassword = passwordGenerator.generate(pwdRuleConfs);\n         assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n     @Test\n-    public void passwordWithNonAlpha() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setNonAlphanumericRequired(true);\n-\n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMustEndWithAlpha(true);\n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        String generatedPassword = passwordGenerator.generate(passwordPolicySpecs);\n+    public void passwordWithNonAlpha() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setNonAlphanumericRequired(true);\n+\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf2.setMustEndWithAlpha(true);\n+\n+        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n+        pwdRuleConfs.add(pwdRuleConf);\n+        pwdRuleConfs.add(pwdRuleConf2);\n+        String generatedPassword = passwordGenerator.generate(pwdRuleConfs);\n         assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword).matches());\n         assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n     }\n \n-    @Test(expected = InvalidPasswordPolicySpecException.class)\n-    public void incopatiblePolicies() throws InvalidPasswordPolicySpecException {\n-        PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMinLength(12);\n+    @Test(expected = InvalidPasswordRuleConf.class)\n+    public void incopatiblePolicies() throws InvalidPasswordRuleConf {\n+        DefaultPasswordRuleConf pwdRuleConf = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMinLength(12);\n \n-        PasswordPolicySpec passwordPolicySpec2 = createBasePasswordPolicySpec();\n-        passwordPolicySpec.setMaxLength(10);\n+        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setMaxLength(10);\n \n-        List<PasswordPolicySpec> passwordPolicySpecs = new ArrayList<>();\n-        passwordPolicySpecs.add(passwordPolicySpec);\n-        passwordPolicySpecs.add(passwordPolicySpec2);\n-        passwordGenerator.generate(passwordPolicySpecs);\n+        List<PasswordRuleConf> pwdRuleConfs = new ArrayList<>();\n+        pwdRuleConfs.add(pwdRuleConf);\n+        pwdRuleConfs.add(pwdRuleConf2);\n+        passwordGenerator.generate(pwdRuleConfs);\n     }\n \n     @Test\n     public void issueSYNCOPE678() {\n         String password = null;\n         try {\n-            password = passwordGenerator.generate(Collections.<PasswordPolicySpec>emptyList());\n-        } catch (InvalidPasswordPolicySpecException e) {\n+            password = passwordGenerator.generate(Collections.<PasswordRuleConf>emptyList());\n+        } catch (InvalidPasswordRuleConf e) {\n             fail(e.getMessage());\n         }\n         assertNotNull(password);\n \n-        PasswordPolicySpec ppSpec = createBasePasswordPolicySpec();\n+        DefaultPasswordRuleConf ppSpec = createBaseDefaultPasswordRuleConf();\n         ppSpec.setMinLength(0);\n         password = null;\n         try {\n-            password = passwordGenerator.generate(Collections.singletonList(ppSpec));\n-        } catch (InvalidPasswordPolicySpecException e) {\n+            password = passwordGenerator.generate(Collections.<PasswordRuleConf>singletonList(ppSpec));\n+        } catch (InvalidPasswordRuleConf e) {\n             fail(e.getMessage());\n         }\n         assertNotNull(password);"},{"sha":"b00d3d4f01939aeeed2616ce1038b3b23cdcf462","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api;\n+\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+\n+public interface ImplementationLookup extends SyncopeLoader {\n+\n+    public enum Type {\n+\n+        REPORTLET,\n+        ACCOUNT_RULE,\n+        PASSWORD_RULE,\n+        TASKJOBDELEGATE,\n+        PROPAGATION_ACTIONS,\n+        SYNC_ACTIONS,\n+        PUSH_ACTIONS,\n+        SYNC_CORRELATION_RULE,\n+        PUSH_CORRELATION_RULE,\n+        VALIDATOR\n+\n+    }\n+\n+    Set<String> getClassNames(Type type);\n+\n+    Class<? extends Reportlet> getReportletClass(Class<? extends ReportletConf> reportletConfClass);\n+\n+    Class<? extends AccountRule> getAccountRuleClass(Class<? extends AccountRuleConf> accountRuleConfClass);\n+\n+    Class<? extends PasswordRule> getPasswordRuleClass(Class<? extends PasswordRuleConf> passwordRuleConfClass);\n+}"},{"sha":"25145de44cc1ba1a2d1c646ed93fc65b3e213ed2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java","status":"renamed","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,18 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.dao;\n \n-import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface ReportletConfInstance extends Entity<Long> {\n-\n-    ReportletConf getInstance();\n-\n-    Report getReport();\n-\n-    void setInstance(ReportletConf instance);\n-\n-    void setReport(Report report);\n+/**\n+ * Interface for enforcing a given account rule to user.\n+ */\n+public interface AccountRule {\n \n+    void enforce(AccountRuleConf conf, User user);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ReportletConfInstance.java"},{"sha":"5b6bace97e0cd474809659f54e2da272c59f40b1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java","status":"renamed","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRuleConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRuleConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRuleConfClass.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,21 +16,17 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.annotation;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n \n-@Target({ ElementType.FIELD })\n+@Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n-public @interface FormAttributeField {\n+public @interface AccountRuleConfClass {\n \n-    boolean userSearch() default false;\n-\n-    boolean groupSearch() default false;\n-\n-    IntMappingType schema() default IntMappingType.UserPlainSchema;\n+    Class<? extends AccountRuleConf> value();\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/annotation/FormAttributeField.java"},{"sha":"4cb1ba9e7acf3e5cb8f922a163c98e8cd556776b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java","status":"renamed","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,17 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.misc.policy;\n+package org.apache.syncope.core.persistence.api.dao;\n \n-public class PolicyEnforceException extends PolicyException {\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-    private static final long serialVersionUID = 3247084727383061069L;\n-\n-    public PolicyEnforceException() {\n-        super();\n-    }\n+/**\n+ * Interface for enforcing a given password rule to user.\n+ */\n+public interface PasswordRule {\n \n-    public PolicyEnforceException(final String message) {\n-        super(message);\n-    }\n+    void enforce(PasswordRuleConf conf, User user);\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEnforceException.java"},{"sha":"745e3366b1ad36e247cf1412b459bfacac3a23b5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRuleConfClass.java","status":"renamed","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRuleConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRuleConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRuleConfClass.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,26 +16,17 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.validation.entity;\n+package org.apache.syncope.core.persistence.api.dao;\n \n-import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-\n-import javax.validation.Constraint;\n-import javax.validation.Payload;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = PolicyValidator.class)\n-@Documented\n-public @interface PolicyCheck {\n-\n-    String message() default \"{org.apache.syncope.core.persistence.validation.policy}\";\n-\n-    Class<?>[] groups() default {};\n+public @interface PasswordRuleConfClass {\n \n-    Class<? extends Payload>[] payload() default {};\n+    Class<? extends PasswordRuleConf> value();\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyCheck.java"},{"sha":"a27f1c000734360d1327fd0ced542cfb769d706c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n "},{"sha":"81808314c24a8a1f1180d440eb68235b6c7e2993","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/Reportlet.java","status":"renamed","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic.report;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.xml.sax.ContentHandler;\n@@ -25,22 +25,16 @@\n /**\n  * Interface for all elements that can be embedded in a report.\n  *\n- * @see org.apache.syncope.core.persistence.beans.Report\n+ * @see org.apache.syncope.core.persistence.api.entity.Report\n  */\n-public interface Reportlet<T extends ReportletConf> {\n-\n-    /**\n-     * Set this reportlet configuration.\n-     *\n-     * @param conf configuration\n-     */\n-    void setConf(T conf);\n+public interface Reportlet {\n \n     /**\n      * Actual data extraction for reporting.\n      *\n+     * @param conf configuration\n      * @param handler SAX content handler for streaming result\n      * @throws SAXException if there is any problem in SAX handling\n      */\n-    void extract(ContentHandler handler) throws SAXException;\n+    void extract(ReportletConf conf, ContentHandler handler) throws SAXException;\n }","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/Reportlet.java"},{"sha":"c1b3040cf517a13ad77adb1cbbf434443a429c8a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportletConfClass.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportletConfClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportletConfClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportletConfClass.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic.report;\n+package org.apache.syncope.core.persistence.api.dao;\n \n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportletConfClass.java"},{"sha":"d02de0aa649b2514f4585f5b81e74ea4628d5a56","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Policy.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,18 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.common.lib.types.PolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n \n public interface Policy extends Entity<Long> {\n \n     String getDescription();\n \n-    <T extends PolicySpec> T getSpecification(Class<T> reference);\n-\n     PolicyType getType();\n \n     void setDescription(String description);\n-\n-    void setSpecification(PolicySpec policy);\n }"},{"sha":"ae3290f92172adce87ee45e110feb627b5ea5ec1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+\n public interface Realm extends Entity<Long> {\n \n     String getName();"},{"sha":"30245d018289d2bcd92c3f297842148bcfaa3d8d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Report.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -25,21 +25,22 @@ public interface Report extends Entity<Long> {\n \n     String getName();\n \n-    boolean addExec(ReportExec exec);\n+    void setName(String name);\n \n-    boolean addReportletConf(ReportletConf reportletConf);\n+    boolean add(ReportExec exec);\n \n-    String getCronExpression();\n+    boolean remove(ReportExec exec);\n \n     List<? extends ReportExec> getExecs();\n \n-    List<? extends ReportletConf> getReportletConfs();\n+    boolean add(ReportletConf reportletConf);\n \n-    boolean removeExec(ReportExec exec);\n+    void removeAllReportletConfs();\n \n-    boolean removeReportletConf(ReportletConf reportletConf);\n+    List<? extends ReportletConf> getReportletConfs();\n+\n+    String getCronExpression();\n \n     void setCronExpression(String cronExpression);\n \n-    void setName(String name);\n }"},{"sha":"066efdfad4bfa4070ef843e6e4c62f149655ce8c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"renamed","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,13 +16,30 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.policy;\n \n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AccountPolicy extends Policy {\n \n+    boolean isPropagateSuspension();\n+\n+    void setPropagateSuspension(boolean propagateSuspension);\n+\n+    int getMaxAuthenticationAttempts();\n+\n+    void setMaxAuthenticationAttempts(int maxAuthenticationAttempts);\n+\n+    boolean add(AccountRuleConf accountRuleConf);\n+\n+    void removeAllRuleConfs();\n+\n+    List<AccountRuleConf> getRuleConfs();\n+\n     boolean add(ExternalResource resource);\n \n     boolean remove(ExternalResource resource);","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AccountPolicy.java"},{"sha":"a3e565fd521e0762d3502c5f2366959d85916128","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PasswordPolicy.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPasswordPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n+\n+public interface PasswordPolicy extends Policy {\n+\n+    boolean isAllowNullPassword();\n+\n+    void setAllowNullPassword(final boolean allowNullPassword);\n+\n+    int getHistoryLength();\n+\n+    void setHistoryLength(int historyLength);\n+\n+    boolean add(PasswordRuleConf passwordRuleConf);\n+\n+    void removeAllRuleConfs();\n+\n+    List<PasswordRuleConf> getRuleConfs();\n+}"},{"sha":"4365e7238c417bc2a34eb7a6afba3e153071bbc6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PushPolicy.java","status":"renamed","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPushPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,8 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.policy.PushPolicySpec;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PushPolicy extends Policy {\n-    \n+\n+    PushPolicySpec getSpecification();\n+\n+    void setSpecification(PushPolicySpec spec);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PushPolicy.java"},{"sha":"78a9882425cd5baa200731ba88cd25eb58e825a3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/SyncPolicy.java","status":"renamed","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FSyncPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,8 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface SyncPolicy extends Policy {\n-    \n+\n+    SyncPolicySpec getSpecification();\n+\n+    void setSpecification(SyncPolicySpec spec);\n+\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SyncPolicy.java"},{"sha":"a8f32c0be4d947c60f5bebb1af7a601b5efe045b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -23,12 +23,12 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public interface ExternalResource extends AnnotatedEntity<String> {"},{"sha":"d4eaf639160990e26e5f73ec1132fc1725d343c8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n+import org.apache.syncope.core.misc.policy.AccountPolicyException;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@AccountRuleConfClass(DefaultAccountRuleConf.class)\n+public class DefaultAccountRule implements AccountRule {\n+\n+    private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n+\n+    private DefaultAccountRuleConf conf;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final AccountRuleConf conf, final User user) {\n+        if (conf instanceof DefaultAccountRuleConf) {\n+            this.conf = DefaultAccountRuleConf.class.cast(conf);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+\n+        for (String schema : this.conf.getSchemasNotPermitted()) {\n+            PlainAttr<?> attr = user.getPlainAttr(schema);\n+            if (attr != null) {\n+                List<String> values = attr.getValuesAsStrings();\n+                if (values != null && !values.isEmpty()) {\n+                    this.conf.getWordsNotPermitted().add(values.get(0));\n+                }\n+            }\n+        }\n+\n+        if (user.getUsername() == null) {\n+            throw new AccountPolicyException(\"Invalid account\");\n+        }\n+\n+        // check min length\n+        if (this.conf.getMinLength() > 0 && this.conf.getMinLength() > user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too short\");\n+        }\n+\n+        // check max length\n+        if (this.conf.getMaxLength() > 0 && this.conf.getMaxLength() < user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : this.conf.getWordsNotPermitted()) {\n+            if (user.getUsername().contains(word)) {\n+                throw new AccountPolicyException(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check case\n+        if (this.conf.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n+            throw new AccountPolicyException(\"No lowercase characters permitted\");\n+        }\n+        if (this.conf.isAllLowerCase() && !user.getUsername().equals(user.getUsername().toLowerCase())) {\n+            throw new AccountPolicyException(\"No uppercase characters permitted\");\n+        }\n+\n+        // check pattern\n+        Pattern pattern = (this.conf.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(this.conf.getPattern());\n+        if (!pattern.matcher(user.getUsername()).matches()) {\n+            throw new AccountPolicyException(\"Username does not match pattern\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : this.conf.getPrefixesNotPermitted()) {\n+            if (user.getUsername().startsWith(prefix)) {\n+                throw new AccountPolicyException(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : this.conf.getSuffixesNotPermitted()) {\n+            if (user.getUsername().endsWith(suffix)) {\n+                throw new AccountPolicyException(\"Suffix not permitted\");\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"d3ab5920472fde63795670826bbf3db90aa6ec28","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPasswordRule.java","status":"renamed","additions":75,"deletions":50,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,181 +16,206 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.misc.policy;\n-\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.common.lib.types.PolicyType;\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n+import org.apache.syncope.core.misc.policy.PolicyPattern;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@PasswordRuleConfClass(DefaultPasswordRuleConf.class)\n+public class DefaultPasswordRule implements PasswordRule {\n \n-@Component\n-public class PasswordPolicyEnforcer {\n+    private DefaultPasswordRuleConf conf;\n \n-    public boolean enforce(final PasswordPolicySpec policy, final PolicyType type, final User user) {\n-        final String clearPassword = user.getClearPassword();\n-        final String password = user.getPassword();\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final PasswordRuleConf conf, final User user) {\n+        if (conf instanceof DefaultPasswordRuleConf) {\n+            this.conf = (DefaultPasswordRuleConf) conf;\n+        } else {\n+            throw new IllegalArgumentException(\n+                    PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n \n-        if (policy == null) {\n-            throw new PolicyEnforceException(\"Invalid policy\");\n+        for (String schema : this.conf.getSchemasNotPermitted()) {\n+            PlainAttr<?> attr = user.getPlainAttr(schema);\n+            if (attr != null) {\n+                List<String> values = attr.getValuesAsStrings();\n+                if (values != null && !values.isEmpty()) {\n+                    this.conf.getWordsNotPermitted().add(values.get(0));\n+                }\n+            }\n         }\n \n-        if (password == null && !policy.isAllowNullPassword()) {\n-            throw new PolicyEnforceException(\"Password mandatory\");\n-        } else if (password != null && clearPassword != null) {\n+        String clearPassword = user.getClearPassword();\n+        String password = user.getPassword();\n+\n+        if (password != null && clearPassword != null) {\n             // check length\n-            if (policy.getMinLength() > 0 && policy.getMinLength() > clearPassword.length()) {\n+            if (this.conf.getMinLength() > 0 && this.conf.getMinLength() > clearPassword.length()) {\n                 throw new PasswordPolicyException(\"Password too short\");\n             }\n \n-            if (policy.getMaxLength() > 0 && policy.getMaxLength() < clearPassword.length()) {\n+            if (this.conf.getMaxLength() > 0 && this.conf.getMaxLength() < clearPassword.length()) {\n                 throw new PasswordPolicyException(\"Password too long\");\n             }\n \n             // check words not permitted\n-            for (String word : policy.getWordsNotPermitted()) {\n+            for (String word : this.conf.getWordsNotPermitted()) {\n                 if (clearPassword.contains(word)) {\n                     throw new PasswordPolicyException(\"Used word(s) not permitted\");\n                 }\n             }\n \n             // check digits occurrence\n-            if (policy.isDigitRequired() && !checkForDigit(clearPassword)) {\n+            if (this.conf.isDigitRequired() && !checkDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain digit(s)\");\n             }\n \n             // check lowercase alphabetic characters occurrence\n-            if (policy.isLowercaseRequired() && !checkForLowercase(clearPassword)) {\n+            if (this.conf.isLowercaseRequired() && !checkLowercase(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n             }\n \n             // check uppercase alphabetic characters occurrence\n-            if (policy.isUppercaseRequired() && !checkForUppercase(clearPassword)) {\n+            if (this.conf.isUppercaseRequired() && !checkUppercase(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n             }\n \n             // check prefix\n-            for (String prefix : policy.getPrefixesNotPermitted()) {\n+            for (String prefix : this.conf.getPrefixesNotPermitted()) {\n                 if (clearPassword.startsWith(prefix)) {\n                     throw new PasswordPolicyException(\"Prefix not permitted\");\n                 }\n             }\n \n             // check suffix\n-            for (String suffix : policy.getSuffixesNotPermitted()) {\n+            for (String suffix : this.conf.getSuffixesNotPermitted()) {\n                 if (clearPassword.endsWith(suffix)) {\n                     throw new PasswordPolicyException(\"Suffix not permitted\");\n                 }\n             }\n \n             // check digit first occurrence\n-            if (policy.isMustStartWithDigit() && !checkForFirstDigit(clearPassword)) {\n+            if (this.conf.isMustStartWithDigit() && !checkFirstDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must start with a digit\");\n             }\n \n-            if (policy.isMustntStartWithDigit() && checkForFirstDigit(clearPassword)) {\n+            if (this.conf.isMustntStartWithDigit() && checkFirstDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n             }\n \n             // check digit last occurrence\n-            if (policy.isMustEndWithDigit() && !checkForLastDigit(clearPassword)) {\n+            if (this.conf.isMustEndWithDigit() && !checkLastDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must end with a digit\");\n             }\n \n-            if (policy.isMustntEndWithDigit() && checkForLastDigit(clearPassword)) {\n+            if (this.conf.isMustntEndWithDigit() && checkLastDigit(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n             }\n \n             // check alphanumeric characters occurence\n-            if (policy.isAlphanumericRequired() && !checkForAlphanumeric(clearPassword)) {\n+            if (this.conf.isAlphanumericRequired() && !checkAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n             }\n \n             // check non alphanumeric characters occurence\n-            if (policy.isNonAlphanumericRequired() && !checkForNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isNonAlphanumericRequired() && !checkNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n             }\n \n             // check alphanumeric character first occurrence\n-            if (policy.isMustStartWithAlpha() && !checkForFirstAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustStartWithAlpha() && !checkFirstAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n             }\n \n-            if (policy.isMustntStartWithAlpha() && checkForFirstAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntStartWithAlpha() && checkFirstAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n             }\n \n             // check alphanumeric character last occurrence\n-            if (policy.isMustEndWithAlpha() && !checkForLastAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustEndWithAlpha() && !checkLastAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n             }\n \n-            if (policy.isMustntEndWithAlpha() && checkForLastAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntEndWithAlpha() && checkLastAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n             }\n \n             // check non alphanumeric character first occurrence\n-            if (policy.isMustStartWithNonAlpha() && !checkForFirstNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustStartWithNonAlpha() && !checkFirstNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n             }\n \n-            if (policy.isMustntStartWithNonAlpha() && checkForFirstNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntStartWithNonAlpha() && checkFirstNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n             }\n \n             // check non alphanumeric character last occurrence\n-            if (policy.isMustEndWithNonAlpha() && !checkForLastNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustEndWithNonAlpha() && !checkLastNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n             }\n \n-            if (policy.isMustntEndWithNonAlpha() && checkForLastNonAlphanumeric(clearPassword)) {\n+            if (this.conf.isMustntEndWithNonAlpha() && checkLastNonAlphanumeric(clearPassword)) {\n                 throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n             }\n-        }\n \n-        return false;\n+            if (!this.conf.isUsernameAllowed()\n+                    && user.getUsername() != null && user.getUsername().equals(clearPassword)) {\n+\n+                throw new PasswordPolicyException(\"Password mustn't be equal to username\");\n+            }\n+        }\n     }\n \n-    private boolean checkForDigit(final String str) {\n+    private boolean checkDigit(final String str) {\n         return PolicyPattern.DIGIT.matcher(str).matches();\n     }\n \n-    private boolean checkForLowercase(final String str) {\n+    private boolean checkLowercase(final String str) {\n         return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n     }\n \n-    private boolean checkForUppercase(final String str) {\n+    private boolean checkUppercase(final String str) {\n         return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n     }\n \n-    private boolean checkForFirstDigit(final String str) {\n+    private boolean checkFirstDigit(final String str) {\n         return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n     }\n \n-    private boolean checkForLastDigit(final String str) {\n+    private boolean checkLastDigit(final String str) {\n         return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n     }\n \n-    private boolean checkForAlphanumeric(final String str) {\n+    private boolean checkAlphanumeric(final String str) {\n         return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForFirstAlphanumeric(final String str) {\n+    private boolean checkFirstAlphanumeric(final String str) {\n         return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForLastAlphanumeric(final String str) {\n+    private boolean checkLastAlphanumeric(final String str) {\n         return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForNonAlphanumeric(final String str) {\n+    private boolean checkNonAlphanumeric(final String str) {\n         return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForFirstNonAlphanumeric(final String str) {\n+    private boolean checkFirstNonAlphanumeric(final String str) {\n         return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n     }\n \n-    private boolean checkForLastNonAlphanumeric(final String str) {\n+    private boolean checkLastNonAlphanumeric(final String str) {\n         return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PasswordPolicyEnforcer.java"},{"sha":"3905d92254d0f880dfe139c3183d640a7badf2e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;"},{"sha":"4b89f8c1a321751b5d1219ebbc208dfbe5b6f089","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -24,13 +24,13 @@\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -44,7 +44,7 @@ public class JPAPolicyDAO extends AbstractDAO<Policy, Long> implements PolicyDAO\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> T find(final Long key) {\n         final Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.id=:id\");\n+                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e WHERE e.id=:id\");\n         query.setParameter(\"id\", key);\n \n         List<T> result = query.getResultList();\n@@ -57,7 +57,7 @@ public <T extends Policy> T find(final Long key) {\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> List<T> find(final PolicyType type) {\n         final Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.type=:type\");\n+                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e WHERE e.type=:type\");\n         query.setParameter(\"type\", type);\n \n         return (List<T>) query.getResultList();\n@@ -76,7 +76,7 @@ public List<AccountPolicy> findByResource(final ExternalResource resource) {\n     @Override\n     public List<Policy> findAll() {\n         TypedQuery<Policy> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e\", Policy.class);\n+                \"SELECT e FROM \" + AbstractPolicy.class.getSimpleName() + \" e\", Policy.class);\n         return query.getResultList();\n     }\n "},{"sha":"eee37f1ed9f9b270be171b1ad3e1f29406d47d0a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;"},{"sha":"35b7556d976e028697885c310c4867cb31637934","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -91,7 +91,7 @@ public void delete(final Long key) {\n     @Override\n     public void delete(final ReportExec execution) {\n         if (execution.getReport() != null) {\n-            execution.getReport().removeExec(execution);\n+            execution.getReport().remove(execution);\n         }\n \n         entityManager().remove(execution);"},{"sha":"b4b534291701de0f8dcb12ea5b25948ab84a7538","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASyncTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPATask;\n+import org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -75,7 +75,7 @@ public Class<? extends Task> getEntityReference(final TaskType type) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Task> T find(final Long key) {\n-        return (T) entityManager().find(JPATask.class, key);\n+        return (T) entityManager().find(AbstractTask.class, key);\n     }\n \n     private <T extends Task> StringBuilder buildfindAllQuery(final TaskType type) {"},{"sha":"bdc552e6cfdd31814ceb83c2b8fab833e1f7a595","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":80,"deletions":39,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -31,39 +31,41 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.misc.policy.AccountPolicyEnforcer;\n import org.apache.syncope.core.misc.policy.AccountPolicyException;\n-import org.apache.syncope.core.misc.policy.PasswordPolicyEnforcer;\n-import org.apache.syncope.core.misc.policy.PolicyEvaluator;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -80,21 +82,15 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private ImplementationLookup implementationLookup;\n+\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n-    @Autowired\n-    private PolicyEvaluator evaluator;\n-\n-    @Autowired\n-    private PasswordPolicyEnforcer ppEnforcer;\n-\n-    @Autowired\n-    private AccountPolicyEnforcer apEnforcer;\n-\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n@@ -235,14 +231,40 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n \n         try {\n             int maxPPSpecHistory = 0;\n-            for (Policy policy : getPasswordPolicies(user)) {\n-                // evaluate policy\n-                PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n-                // enforce policy\n-                ppEnforcer.enforce(ppSpec, policy.getType(), user);\n-\n-                if (ppSpec.getHistoryLength() > maxPPSpecHistory) {\n-                    maxPPSpecHistory = ppSpec.getHistoryLength();\n+            for (PasswordPolicy policy : getPasswordPolicies(user)) {\n+                if (user.getPassword() == null && !policy.isAllowNullPassword()) {\n+                    throw new PasswordPolicyException(\"Password mandatory\");\n+                }\n+\n+                for (PasswordRuleConf ruleConf : policy.getRuleConfs()) {\n+                    Class<? extends PasswordRule> ruleClass =\n+                            implementationLookup.getPasswordRuleClass(ruleConf.getClass());\n+                    if (ruleClass == null) {\n+                        LOG.warn(\"Could not find matching password rule for {}\", ruleConf.getClass());\n+                    } else {\n+                        // fetch (or create) rule\n+                        PasswordRule rule;\n+                        if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n+                            rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n+                                    getSingleton(ruleClass.getName());\n+                        } else {\n+                            rule = (PasswordRule) ApplicationContextProvider.getBeanFactory().\n+                                    createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                            ApplicationContextProvider.getBeanFactory().\n+                                    registerSingleton(ruleClass.getName(), rule);\n+                        }\n+\n+                        // enforce rule\n+                        rule.enforce(ruleConf, user);\n+                    }\n+                }\n+\n+                if (user.verifyPasswordHistory(user.getClearPassword(), policy.getHistoryLength())) {\n+                    throw new PasswordPolicyException(\"Password value was used in the past: not allowed\");\n+                }\n+\n+                if (policy.getHistoryLength() > maxPPSpecHistory) {\n+                    maxPPSpecHistory = policy.getHistoryLength();\n                 }\n             }\n \n@@ -276,14 +298,33 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 throw new AccountPolicyException(\"Not allowed: \" + user.getUsername());\n             }\n \n-            // invalid username\n-            for (Policy policy : getAccountPolicies(user)) {\n-                // evaluate policy\n-                AccountPolicySpec apSpec = evaluator.evaluate(policy, user);\n+            for (AccountPolicy policy : getAccountPolicies(user)) {\n+                for (AccountRuleConf ruleConf : policy.getRuleConfs()) {\n+                    Class<? extends AccountRule> ruleClass =\n+                            implementationLookup.getAccountRuleClass(ruleConf.getClass());\n+                    if (ruleClass == null) {\n+                        LOG.warn(\"Could not find matching password rule for {}\", ruleConf.getClass());\n+                    } else {\n+                        // fetch (or create) rule\n+                        AccountRule rule;\n+                        if (ApplicationContextProvider.getBeanFactory().containsSingleton(ruleClass.getName())) {\n+                            rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n+                                    getSingleton(ruleClass.getName());\n+                        } else {\n+                            rule = (AccountRule) ApplicationContextProvider.getBeanFactory().\n+                                    createBean(ruleClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                            ApplicationContextProvider.getBeanFactory().\n+                                    registerSingleton(ruleClass.getName(), rule);\n+                        }\n+\n+                        // enforce rule\n+                        rule.enforce(ruleConf, user);\n+                    }\n+                }\n \n-                // enforce policy\n-                suspend |= apEnforcer.enforce(apSpec, policy.getType(), user);\n-                propagateSuspension |= apSpec.isPropagateSuspension();\n+                suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n+                        && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n+                propagateSuspension |= policy.isPropagateSuspension();\n             }\n         } catch (Exception e) {\n             LOG.error(\"Invalid username for {}\", user, e);"},{"sha":"586f6cdcb482255700c0e314182526642a833d20","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,9 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPASyncPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -34,16 +38,15 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.PushPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n-import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n@@ -222,8 +225,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAReport();\n         } else if (reference.equals(ReportExec.class)) {\n             result = (T) new JPAReportExec();\n-        } else if (reference.equals(ReportletConfInstance.class)) {\n-            result = (T) new JPAReportletConfInstance();\n         } else if (reference.equals(NotificationTask.class)) {\n             result = (T) new JPANotificationTask();\n         } else if (reference.equals(PropagationTask.class)) {"},{"sha":"51f55a5d6369ad483802326874e9ca3023be6b34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPasswordPolicy.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb94a99fbc19e219dda417097e940950706c204/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb94a99fbc19e219dda417097e940950706c204/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java?ref=bbb94a99fbc19e219dda417097e940950706c204","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-\n-@Entity\n-@DiscriminatorValue(\"PasswordPolicy\")\n-public class JPAPasswordPolicy extends JPAPolicy implements PasswordPolicy {\n-\n-    private static final long serialVersionUID = 9138550910385232849L;\n-\n-    public JPAPasswordPolicy() {\n-        super();\n-        this.type = PolicyType.PASSWORD;\n-    }\n-}"},{"sha":"d45817836c50ff907d474c7e9ab36a2242a2117d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -28,8 +30,8 @@\n import javax.validation.constraints.Size;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.validation.entity.RealmCheck;\n "},{"sha":"eeaf86d1a077f2b6acb33fcc71dcfc177e5d63f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":9,"deletions":24,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -28,12 +28,10 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n-import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ReportCheck;\n \n @Entity\n@@ -52,19 +50,12 @@ public class JPAReport extends AbstractEntity<Long> implements Report {\n     private String name;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n-    private List<JPAReportletConfInstance> reportletConfs;\n+    private List<JPAReportletConfInstance> reportletConfs = new ArrayList<>();\n \n     private String cronExpression;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n-    private List<JPAReportExec> executions;\n-\n-    public JPAReport() {\n-        super();\n-\n-        reportletConfs = new ArrayList<>();\n-        executions = new ArrayList<>();\n-    }\n+    private List<JPAReportExec> executions = new ArrayList<>();\n \n     @Override\n     public Long getKey() {\n@@ -82,13 +73,13 @@ public void setName(final String name) {\n     }\n \n     @Override\n-    public boolean addExec(final ReportExec exec) {\n+    public boolean add(final ReportExec exec) {\n         checkType(exec, JPAReportExec.class);\n         return exec != null && !executions.contains((JPAReportExec) exec) && executions.add((JPAReportExec) exec);\n     }\n \n     @Override\n-    public boolean removeExec(final ReportExec exec) {\n+    public boolean remove(final ReportExec exec) {\n         checkType(exec, JPAReportExec.class);\n         return exec != null && executions.remove((JPAReportExec) exec);\n     }\n@@ -99,7 +90,7 @@ public List<? extends ReportExec> getExecs() {\n     }\n \n     @Override\n-    public boolean addReportletConf(final ReportletConf reportletConf) {\n+    public boolean add(final ReportletConf reportletConf) {\n         if (reportletConf == null) {\n             return false;\n         }\n@@ -112,22 +103,16 @@ public boolean addReportletConf(final ReportletConf reportletConf) {\n     }\n \n     @Override\n-    public boolean removeReportletConf(final ReportletConf reportletConf) {\n-        return CollectionUtils.filter(reportletConfs, new Predicate<JPAReportletConfInstance>() {\n-\n-            @Override\n-            public boolean evaluate(final JPAReportletConfInstance object) {\n-                return reportletConf.equals(object.getInstance());\n-            }\n-        });\n+    public void removeAllReportletConfs() {\n+        reportletConfs.clear();\n     }\n \n     @Override\n     public List<ReportletConf> getReportletConfs() {\n-        return CollectionUtils.collect(reportletConfs, new Transformer<ReportletConfInstance, ReportletConf>() {\n+        return CollectionUtils.collect(reportletConfs, new Transformer<JPAReportletConfInstance, ReportletConf>() {\n \n             @Override\n-            public ReportletConf transform(final ReportletConfInstance input) {\n+            public ReportletConf transform(final JPAReportletConfInstance input) {\n                 return input.getInstance();\n             }\n         }, new ArrayList<ReportletConf>());"},{"sha":"df08af8de1c2a24edff5ab0d48f004fb4b63a56f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReportletConfInstance.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n@@ -30,7 +29,7 @@\n \n @Entity\n @Table(name = JPAReportletConfInstance.TABLE)\n-public class JPAReportletConfInstance extends AbstractEntity<Long> implements ReportletConfInstance {\n+public class JPAReportletConfInstance extends AbstractEntity<Long> {\n \n     private static final long serialVersionUID = -2436055132955674610L;\n \n@@ -50,25 +49,21 @@ public Long getKey() {\n         return id;\n     }\n \n-    @Override\n     public Report getReport() {\n         return report;\n     }\n \n-    @Override\n     public void setReport(final Report report) {\n         checkType(report, JPAReport.class);\n         this.report = (JPAReport) report;\n     }\n \n-    @Override\n     public ReportletConf getInstance() {\n         return serializedInstance == null\n                 ? null\n                 : POJOHelper.deserialize(serializedInstance, ReportletConf.class);\n     }\n \n-    @Override\n     public void setInstance(final ReportletConf instance) {\n         this.serializedInstance = instance == null\n                 ? null"},{"sha":"843bbcd49ff59e92f9b4fbd75ae6a5649e542bb6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/AbstractPolicy.java","status":"renamed","additions":4,"deletions":27,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FAbstractPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,35 +16,25 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity;\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n-import javax.persistence.DiscriminatorColumn;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n-import javax.persistence.Lob;\n-import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.PolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.PolicyCheck;\n-import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n \n @Entity\n-@Table(name = JPAPolicy.TABLE)\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n-@DiscriminatorColumn(name = \"DTYPE\")\n-@PolicyCheck\n-public abstract class JPAPolicy extends AbstractEntity<Long> implements Policy {\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public abstract class AbstractPolicy extends AbstractEntity<Long> implements Policy {\n \n     private static final long serialVersionUID = -5844833125843247458L;\n \n-    public static final String TABLE = \"Policy\";\n-\n     @Id\n     private Long id;\n \n@@ -55,9 +45,6 @@ public abstract class JPAPolicy extends AbstractEntity<Long> implements Policy {\n     @Enumerated(EnumType.STRING)\n     protected PolicyType type;\n \n-    @Lob\n-    private String specification;\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -77,14 +64,4 @@ public void setDescription(final String description) {\n     public PolicyType getType() {\n         return type;\n     }\n-\n-    @Override\n-    public <T extends PolicySpec> T getSpecification(final Class<T> reference) {\n-        return POJOHelper.deserialize(specification, reference);\n-    }\n-\n-    @Override\n-    public void setSpecification(final PolicySpec policy) {\n-        this.specification = POJOHelper.serialize(policy);\n-    }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPolicy.java"},{"sha":"e9b38c3ac7ee8f66400c6d584b52dedebe84147f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"renamed","additions":74,"deletions":5,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,29 +16,49 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity;\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n-import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n \n @Entity\n-@DiscriminatorValue(\"AccountPolicy\")\n-public class JPAAccountPolicy extends JPAPolicy implements AccountPolicy {\n+@Table(name = JPAAccountPolicy.TABLE)\n+public class JPAAccountPolicy extends AbstractPolicy implements AccountPolicy {\n \n     private static final long serialVersionUID = -2767606675667839060L;\n \n+    public static final String TABLE = \"AccountPolicy\";\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer propagateSuspension;\n+\n+    private int maxAuthenticationAttempts;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"accountPolicy\")\n+    private List<JPAAccountRuleConfInstance> ruleConfs = new ArrayList<>();\n+\n     /**\n      * Resources for alternative user authentication: if empty, only internal storage will be used.\n      */\n@@ -54,6 +74,55 @@ public JPAAccountPolicy() {\n         this.type = PolicyType.ACCOUNT;\n     }\n \n+    @Override\n+    public boolean isPropagateSuspension() {\n+        return isBooleanAsInteger(propagateSuspension);\n+    }\n+\n+    @Override\n+    public void setPropagateSuspension(final boolean propagateSuspension) {\n+        this.propagateSuspension = getBooleanAsInteger(propagateSuspension);\n+    }\n+\n+    @Override\n+    public int getMaxAuthenticationAttempts() {\n+        return maxAuthenticationAttempts;\n+    }\n+\n+    @Override\n+    public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n+        this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n+    }\n+\n+    @Override\n+    public boolean add(final AccountRuleConf accountRuleConf) {\n+        if (accountRuleConf == null) {\n+            return false;\n+        }\n+\n+        JPAAccountRuleConfInstance instance = new JPAAccountRuleConfInstance();\n+        instance.setAccountPolicy(this);\n+        instance.setInstance(accountRuleConf);\n+\n+        return ruleConfs.add(instance);\n+    }\n+\n+    @Override\n+    public void removeAllRuleConfs() {\n+        ruleConfs.clear();\n+    }\n+\n+    @Override\n+    public List<AccountRuleConf> getRuleConfs() {\n+        return CollectionUtils.collect(ruleConfs, new Transformer<JPAAccountRuleConfInstance, AccountRuleConf>() {\n+\n+            @Override\n+            public AccountRuleConf transform(final JPAAccountRuleConfInstance input) {\n+                return input.getInstance();\n+            }\n+        }, new ArrayList<AccountRuleConf>());\n+    }\n+\n     @Override\n     public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccountPolicy.java"},{"sha":"782e6b448d2532883a206f33ffa0bc9aba92d55c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountRuleConfInstance.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountRuleConfInstance.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Table(name = JPAAccountRuleConfInstance.TABLE)\n+public class JPAAccountRuleConfInstance extends AbstractEntity<Long> {\n+\n+    private static final long serialVersionUID = -2436055132955674610L;\n+\n+    public static final String TABLE = \"AccountRuleConfInstance\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Lob\n+    private String serializedInstance;\n+\n+    @ManyToOne\n+    private JPAAccountPolicy accountPolicy;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    public AccountPolicy getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(final AccountPolicy report) {\n+        checkType(report, JPAAccountPolicy.class);\n+        this.accountPolicy = (JPAAccountPolicy) report;\n+    }\n+\n+    public AccountRuleConf getInstance() {\n+        return serializedInstance == null\n+                ? null\n+                : POJOHelper.deserialize(serializedInstance, AccountRuleConf.class);\n+    }\n+\n+    public void setInstance(final AccountRuleConf instance) {\n+        this.serializedInstance = instance == null\n+                ? null\n+                : POJOHelper.serialize(instance);\n+    }\n+}"},{"sha":"b6013fd46a558743bb79a378ae1e266c1643cea5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordPolicy.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+\n+@Entity\n+@Table(name = JPAPasswordPolicy.TABLE)\n+public class JPAPasswordPolicy extends AbstractPolicy implements PasswordPolicy {\n+\n+    private static final long serialVersionUID = 9138550910385232849L;\n+\n+    public static final String TABLE = \"PasswordPolicy\";\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer allowNullPassword;\n+\n+    private int historyLength;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"passwordPolicy\")\n+    private List<JPAPasswordRuleConfInstance> ruleConfs = new ArrayList<>();\n+\n+    public JPAPasswordPolicy() {\n+        super();\n+        this.type = PolicyType.PASSWORD;\n+    }\n+\n+    @Override\n+    public boolean isAllowNullPassword() {\n+        return isBooleanAsInteger(allowNullPassword);\n+    }\n+\n+    @Override\n+    public void setAllowNullPassword(final boolean allowNullPassword) {\n+        this.allowNullPassword = getBooleanAsInteger(allowNullPassword);\n+    }\n+\n+    @Override\n+    public int getHistoryLength() {\n+        return historyLength;\n+    }\n+\n+    @Override\n+    public void setHistoryLength(final int historyLength) {\n+        this.historyLength = historyLength;\n+    }\n+\n+    @Override\n+    public boolean add(final PasswordRuleConf passwordRuleConf) {\n+        if (passwordRuleConf == null) {\n+            return false;\n+        }\n+\n+        JPAPasswordRuleConfInstance instance = new JPAPasswordRuleConfInstance();\n+        instance.setPasswordPolicy(this);\n+        instance.setInstance(passwordRuleConf);\n+\n+        return ruleConfs.add(instance);\n+    }\n+\n+    @Override\n+    public void removeAllRuleConfs() {\n+        ruleConfs.clear();\n+    }\n+\n+    @Override\n+    public List<PasswordRuleConf> getRuleConfs() {\n+        return CollectionUtils.collect(ruleConfs, new Transformer<JPAPasswordRuleConfInstance, PasswordRuleConf>() {\n+\n+            @Override\n+            public PasswordRuleConf transform(final JPAPasswordRuleConfInstance input) {\n+                return input.getInstance();\n+            }\n+        }, new ArrayList<PasswordRuleConf>());\n+    }\n+}"},{"sha":"4b39dc8747e7882b87ff7df111027344b94cbe0e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPasswordRuleConfInstance.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPasswordRuleConfInstance.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Table(name = JPAPasswordRuleConfInstance.TABLE)\n+public class JPAPasswordRuleConfInstance extends AbstractEntity<Long> {\n+\n+    private static final long serialVersionUID = -2436055132955674610L;\n+\n+    public static final String TABLE = \"PasswordRuleConfInstance\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Lob\n+    private String serializedInstance;\n+\n+    @ManyToOne\n+    private JPAPasswordPolicy passwordPolicy;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    public PasswordPolicy getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(final PasswordPolicy report) {\n+        checkType(report, JPAPasswordPolicy.class);\n+        this.passwordPolicy = (JPAPasswordPolicy) report;\n+    }\n+\n+    public PasswordRuleConf getInstance() {\n+        return serializedInstance == null\n+                ? null\n+                : POJOHelper.deserialize(serializedInstance, PasswordRuleConf.class);\n+    }\n+\n+    public void setInstance(final PasswordRuleConf instance) {\n+        this.serializedInstance = instance == null\n+                ? null\n+                : POJOHelper.serialize(instance);\n+    }\n+}"},{"sha":"3bc0009bea965e329a2a85a67a82ac79d3675324","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPushPolicy.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPushPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.policy.PushPolicySpec;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n+\n+@Entity\n+@Table(name = JPAPushPolicy.TABLE)\n+public class JPAPushPolicy extends AbstractPolicy implements PushPolicy {\n+\n+    private static final long serialVersionUID = -5875589156893921113L;\n+\n+    public static final String TABLE = \"PushPolicy\";\n+\n+    @Lob\n+    private String specification;\n+\n+    public JPAPushPolicy() {\n+        super();\n+        this.type = PolicyType.PUSH;\n+    }\n+\n+    @Override\n+    public PushPolicySpec getSpecification() {\n+        return POJOHelper.deserialize(specification, PushPolicySpec.class);\n+    }\n+\n+    @Override\n+    public void setSpecification(final PushPolicySpec policy) {\n+        this.specification = POJOHelper.serialize(policy);\n+    }\n+\n+}"},{"sha":"913ee54469602a1aecfcd5d78dc4a906b000923a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPASyncPolicy.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPASyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPASyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPASyncPolicy.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n+\n+@Entity\n+@Table(name = JPASyncPolicy.TABLE)\n+public class JPASyncPolicy extends AbstractPolicy implements SyncPolicy {\n+\n+    private static final long serialVersionUID = -6090413855809521279L;\n+\n+    public static final String TABLE = \"SyncPolicy\";\n+\n+    @Lob\n+    private String specification;\n+\n+    public JPASyncPolicy() {\n+        super();\n+        this.type = PolicyType.SYNC;\n+    }\n+\n+    @Override\n+    public SyncPolicySpec getSpecification() {\n+        return POJOHelper.deserialize(specification, SyncPolicySpec.class);\n+    }\n+\n+    @Override\n+    public void setSpecification(final SyncPolicySpec policy) {\n+        this.specification = POJOHelper.serialize(policy);\n+    }\n+}"},{"sha":"650ef6a756fa0a8f2b8e637248b15fdd22ffd603","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -46,20 +46,20 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ExternalResourceCheck;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAnnotatedEntity;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAccountPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPasswordPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPASyncPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPASyncPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n /**"},{"sha":"938502db7913c3d003cbae8ef1d3ee9043bb99a8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/AbstractTask.java","status":"renamed","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -38,18 +38,15 @@\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n \n @Entity\n-@Table(name = JPATask.TABLE)\n+@Table(name = AbstractTask.TABLE)\n @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n @DiscriminatorColumn(name = \"DTYPE\")\n-public abstract class JPATask extends AbstractEntity<Long> implements Task {\n+public abstract class AbstractTask extends AbstractEntity<Long> implements Task {\n \n     private static final long serialVersionUID = 5837401178128177511L;\n \n     public static final String TABLE = \"Task\";\n \n-    /**\n-     * Id.\n-     */\n     @Id\n     private Long id;\n \n@@ -58,13 +55,7 @@ public abstract class JPATask extends AbstractEntity<Long> implements Task {\n     protected TaskType type;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n-    private List<JPATaskExec> executions;\n-\n-    public JPATask() {\n-        super();\n-\n-        executions = new ArrayList<>();\n-    }\n+    private List<JPATaskExec> executions = new ArrayList<>();\n \n     @Override\n     public Long getKey() {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATask.java"},{"sha":"f483a198e9c7cd11c1cc4923983277ba5f46704b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPANotificationTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -41,7 +41,7 @@\n \n @Entity\n @DiscriminatorValue(\"NotificationTask\")\n-public class JPANotificationTask extends JPATask implements NotificationTask {\n+public class JPANotificationTask extends AbstractTask implements NotificationTask {\n \n     private static final long serialVersionUID = 95731573485279180L;\n "},{"sha":"e4d969d2ef5882eb8724e38026988ae1c5493018","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -45,7 +45,7 @@\n @Entity\n @DiscriminatorValue(\"PropagationTask\")\n @PropagationTaskCheck\n-public class JPAPropagationTask extends JPATask implements PropagationTask {\n+public class JPAPropagationTask extends AbstractTask implements PropagationTask {\n \n     private static final long serialVersionUID = 7086054884614511210L;\n "},{"sha":"d3c0c115387495d4ecb7fabeb4feb092fff6c321","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -28,7 +28,7 @@\n @Entity\n @DiscriminatorValue(\"SchedTask\")\n @SchedTaskCheck\n-public class JPASchedTask extends JPATask implements SchedTask {\n+public class JPASchedTask extends AbstractTask implements SchedTask {\n \n     private static final long serialVersionUID = 7596236684832602180L;\n "},{"sha":"6ea4fb59ef1de4f57d24fe715c0858f3d49bda2c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskExec.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -29,7 +29,7 @@\n /**\n  * An execution (with result) of a Task.\n  *\n- * @see JPATask\n+ * @see AbstractTask\n  */\n @Entity\n @Table(name = JPATaskExec.TABLE)\n@@ -39,17 +39,14 @@ public class JPATaskExec extends AbstractExec implements TaskExec {\n \n     public static final String TABLE = \"TaskExec\";\n \n-    /**\n-     * Id.\n-     */\n     @Id\n     private Long id;\n \n     /**\n      * The referred task.\n      */\n     @ManyToOne(optional = false)\n-    private JPATask task;\n+    private AbstractTask task;\n \n     @Override\n     public Long getKey() {\n@@ -63,8 +60,8 @@ public Task getTask() {\n \n     @Override\n     public void setTask(final Task task) {\n-        checkType(task, JPATask.class);\n-        this.task = (JPATask) task;\n+        checkType(task, AbstractTask.class);\n+        this.task = (AbstractTask) task;\n     }\n \n     @Override"},{"sha":"fd95c4cdac57b90842a4089fa34d7ad5af2551d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PolicyValidator.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb94a99fbc19e219dda417097e940950706c204/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb94a99fbc19e219dda417097e940950706c204/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=bbb94a99fbc19e219dda417097e940950706c204","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.validation.entity;\n-\n-import javax.validation.ConstraintValidatorContext;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n-import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n-\n-public class PolicyValidator extends AbstractValidator<PolicyCheck, Policy> {\n-\n-    @Override\n-    public boolean isValid(final Policy object, final ConstraintValidatorContext context) {\n-        context.disableDefaultConstraintViolation();\n-\n-        EntityViolationType violationType =\n-                object instanceof PasswordPolicy\n-                && !(object.getSpecification(PasswordPolicySpec.class) instanceof PasswordPolicySpec)\n-                        ? EntityViolationType.InvalidPasswordPolicy\n-                        : object instanceof AccountPolicy\n-                        && !(object.getSpecification(AccountPolicySpec.class) instanceof AccountPolicySpec)\n-                                ? EntityViolationType.InvalidAccountPolicy\n-                                : object instanceof SyncPolicy\n-                                && !(object.getSpecification(SyncPolicySpec.class) instanceof SyncPolicySpec)\n-                                        ? EntityViolationType.InvalidSyncPolicy\n-                                        : null;\n-\n-        if (violationType != null) {\n-            context.buildConstraintViolationWithTemplate(getTemplate(violationType,\n-                    \"Invalid policy specification\")).addPropertyNode(\"specification\").\n-                    addConstraintViolation();\n-\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-}"},{"sha":"7e08ced808ec710219d2e6da53f0f6498bd88f25","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -380,7 +380,7 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPATask\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n@@ -397,15 +397,31 @@ under the License.\n     </attributes>\n   </entity>\n     \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAPolicy\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n         <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>\n-\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AccountRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AccountRuleConfInstance\" pk-column-value=\"SEQ_AccountRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_PasswordRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_PasswordRuleConfInstance\" pk-column-value=\"SEQ_PasswordRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAReport\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"7e08ced808ec710219d2e6da53f0f6498bd88f25","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -380,7 +380,7 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPATask\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n@@ -397,15 +397,31 @@ under the License.\n     </attributes>\n   </entity>\n     \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAPolicy\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n         <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>\n-\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AccountRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AccountRuleConfInstance\" pk-column-value=\"SEQ_AccountRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_PasswordRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_PasswordRuleConfInstance\" pk-column-value=\"SEQ_PasswordRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAReport\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"7be0d4879c27329b222362d582cf36ea57089538","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -428,7 +428,7 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPATask\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Task\" strategy=\"TABLE\"/>\n@@ -445,15 +445,31 @@ under the License.\n     </attributes>\n   </entity>\n     \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAPolicy\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.AbstractPolicy\">\n     <attributes>\n       <id name=\"id\">\n         <generated-value generator=\"SEQ_Policy\" strategy=\"TABLE\"/>\n         <table-generator name=\"SEQ_Policy\" pk-column-value=\"SEQ_Policy\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>\n-\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AccountRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AccountRuleConfInstance\" pk-column-value=\"SEQ_AccountRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordRuleConfInstance\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_PasswordRuleConfInstance\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_PasswordRuleConfInstance\" pk-column-value=\"SEQ_PasswordRuleConfInstance\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+    \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAReport\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"dd761b40f1223fea81326797f445c86444b56c26","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public Integer getPriority() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void load() {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final Type type) {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Class<Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return DefaultAccountRule.class;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return DefaultPasswordRule.class;\n+    }\n+\n+}"},{"sha":"fc8305b9595c024eaedf3062cdef315d8912d6c0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":17,"deletions":29,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -27,15 +27,15 @@\n import java.util.List;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -62,7 +62,7 @@ public void findByKey() {\n         SyncPolicy policy = policyDAO.find(3L);\n         assertNotNull(\"findById did not work\", policy);\n \n-        SyncPolicySpec spec = policy.getSpecification(SyncPolicySpec.class);\n+        SyncPolicySpec spec = policy.getSpecification();\n         assertNotNull(spec);\n \n         String rule = spec.getCorrelationRules().get(AnyTypeKind.USER.name());\n@@ -81,19 +81,6 @@ public void findByType() {\n         assertFalse(policies.isEmpty());\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n-    public void saveInvalidPolicy() {\n-        PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n-        passwordPolicy.setMaxLength(8);\n-        passwordPolicy.setMinLength(6);\n-\n-        SyncPolicy policy = entityFactory.newEntity(SyncPolicy.class);\n-        policy.setSpecification(passwordPolicy);\n-        policy.setDescription(\"sync policy\");\n-\n-        policyDAO.save(policy);\n-    }\n-\n     @Test\n     public void create() {\n         SyncPolicy policy = entityFactory.newEntity(SyncPolicy.class);\n@@ -113,28 +100,29 @@ public void create() {\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.SYNC, policy.getType());\n-        assertEquals(syncURuleName, (policy.getSpecification(SyncPolicySpec.class)).\n-                getCorrelationRules().get(anyTypeDAO.findUser().getKey()));\n-        assertEquals(syncGRuleName, (policy.getSpecification(SyncPolicySpec.class)).\n-                getCorrelationRules().get(anyTypeDAO.findGroup().getKey()));\n+        assertEquals(syncURuleName,\n+                policy.getSpecification().getCorrelationRules().get(anyTypeDAO.findUser().getKey()));\n+        assertEquals(syncGRuleName,\n+                policy.getSpecification().getCorrelationRules().get(anyTypeDAO.findGroup().getKey()));\n     }\n \n     @Test\n     public void update() {\n-        PasswordPolicySpec specification = new PasswordPolicySpec();\n-        specification.setMaxLength(8);\n-        specification.setMinLength(6);\n+        DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n+        ruleConf.setMaxLength(8);\n+        ruleConf.setMinLength(6);\n \n-        Policy policy = policyDAO.find(2L);\n+        PasswordPolicy policy = policyDAO.find(2L);\n         assertNotNull(policy);\n-        policy.setSpecification(specification);\n+        assertEquals(1, policy.getRuleConfs().size());\n+        policy.add(ruleConf);\n \n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n-        assertEquals((policy.getSpecification(PasswordPolicySpec.class)).getMaxLength(), 8);\n-        assertEquals((policy.getSpecification(PasswordPolicySpec.class)).getMinLength(), 6);\n+        assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMaxLength(), 8);\n+        assertEquals(((DefaultPasswordRuleConf) policy.getRuleConfs().get(1)).getMinLength(), 6);\n     }\n \n     @Test"},{"sha":"0fa7c351d6aea865c0d5cc9c3e38989629878772","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -33,8 +33,8 @@\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;"},{"sha":"536d74f05262f622bc0abcef4c9c597f2bcadc76","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -59,8 +59,8 @@ public void save() {\n \n         Report report = entityFactory.newEntity(Report.class);\n         report.setName(\"new report\");\n-        report.addReportletConf(new UserReportletConf(\"first\"));\n-        report.addReportletConf(new UserReportletConf(\"second\"));\n+        report.add(new UserReportletConf(\"first\"));\n+        report.add(new UserReportletConf(\"second\"));\n \n         report = reportDAO.save(report);\n         assertNotNull(report);"},{"sha":"e1d12b1f6300b8bb74f75f5f4c4f9d65f6621e70","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n+import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.junit.Test;\n@@ -214,7 +214,7 @@ public void issueSYNCOPE226() {\n         String password = \"\";\n         try {\n             password = passwordGenerator.generate(user);\n-        } catch (InvalidPasswordPolicySpecException ex) {\n+        } catch (InvalidPasswordRuleConf ex) {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);\n@@ -233,7 +233,7 @@ public void testPasswordGenerator() {\n         try {\n             password = passwordGenerator.generate(user);\n \n-        } catch (InvalidPasswordPolicySpecException ex) {\n+        } catch (InvalidPasswordRuleConf ex) {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);"},{"sha":"36f275cdd175d3ae84df65f5918f3ab189220447","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -80,7 +80,7 @@ public void save() {\n         reportExec.setEndDate(new Date());\n         reportExec.setStatus(ReportExecStatus.SUCCESS);\n \n-        report.addExec(reportExec);\n+        report.add(reportExec);\n \n         reportExec = reportExecDAO.save(reportExec);\n         assertNotNull(reportExec);"},{"sha":"1cd5e479ed96c776eeaba456c82ada2bdb654f4d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;"},{"sha":"3401bb7db1d65c8249087ef80ff3852adb2379d4","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":32,"deletions":22,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -36,7 +36,7 @@ under the License.\n   <PlainSchema name=\"notificationjob.cronExpression\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"2\" owner_id=\"1\" schema_name=\"notificationjob.cronExpression\"/>\n-  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"0/5 * * * * ?\"/>\n+  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"0/20 * * * * ?\"/>\n   \n   <PlainSchema name=\"notification.maxRetries\" type=\"Long\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -100,24 +100,34 @@ under the License.\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   \n   <!-- sample policies -->\n-  <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"a sync policy\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\"'/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":1,\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":true}'/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[], \"allowNullPassword\":true}'/>\n-  <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"an account policy\" type=\"ACCOUNT\" \n-          specification='{\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":0,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n-  <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" \n-          specification='{\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":3,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":false}'/>\n-  <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n+  <SyncPolicy id=\"1\" description=\"a sync policy\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"IGNORE\"'/>\n+  <PasswordPolicy id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n+                  historyLength=\"1\" allowNullPassword=\"1\"/> \n+  <PasswordRuleConfInstance id=\"2\" passwordPolicy_id=\"2\"\n+                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <SyncPolicy id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n+  <PasswordPolicy id=\"4\" description=\"sample password policy\" type=\"PASSWORD\"\n+                  historyLength=\"0\"  allowNullPassword=\"1\"/> \n+  <PasswordRuleConfInstance id=\"4\" passwordPolicy_id=\"4\"\n+                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <AccountPolicy id=\"5\" description=\"an account policy\" type=\"ACCOUNT\"\n+                 propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n+  <AccountRuleConfInstance id=\"5\" accountPolicy_id=\"5\"\n+                           serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n+  <AccountPolicy id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\"\n+                 propagateSuspension=\"0\" maxAuthenticationAttempts=\"3\"/>\n+  <AccountRuleConfInstance id=\"6\" accountPolicy_id=\"6\"\n+                           serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultAccountRuleConf\",\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <SyncPolicy id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n+  <PasswordPolicy id=\"8\" description=\"sample password policy\" type=\"PASSWORD\"\n+                  historyLength=\"0\" allowNullPassword=\"0\"/> \n+  <PasswordRuleConfInstance id=\"8\" passwordPolicy_id=\"8\"\n+                            serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+  <SyncPolicy id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n+              specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n \n   <RelationshipType name=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType name=\"neighborhood\"/>\n@@ -548,7 +558,7 @@ under the License.\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n-                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"blockSize\",\"displayName\":\"Block Size\",\"helpMessage\":\"The maximum number of accounts that can be in a block when retrieving accounts in blocks.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"useBlocks\",\"displayName\":\"Use Blocks\",\"helpMessage\":\"When performing operations on large numbers of accounts, the accounts are processed in blocks to reduce the amount of memory used by the operation. Select this option to process accounts in blocks.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"usePagedResultControl\",\"displayName\":\"Use Paged Result Control\",\"helpMessage\":\"When enabled, the LDAP Paged Results control is preferred over the VLV control when retrieving accounts.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"truemaintainLdapGroupMembership\"]}]'/>\n+                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"blockSize\",\"displayName\":\"Block Size\",\"helpMessage\":\"The maximum number of accounts that can be in a block when retrieving accounts in blocks.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"useBlocks\",\"displayName\":\"Use Blocks\",\"helpMessage\":\"When performing operations on large numbers of accounts, the accounts are processed in blocks to reduce the amount of memory used by the operation. Select this option to process accounts in blocks.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[false]},{\"schema\":{\"name\":\"usePagedResultControl\",\"displayName\":\"Use Paged Result Control\",\"helpMessage\":\"When enabled, the LDAP Paged Results control is preferred over the VLV control when retrieving accounts.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]}]'/>\n   <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_CREATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_UPDATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"105\" capability=\"ONE_PHASE_DELETE\"/>\n@@ -582,7 +592,7 @@ under the License.\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 connectorName=\"net.tirasa.connid.bundles.db.scriptedsql.ScriptedSQLConnector\"\n                 displayName=\"Scripted SQL\" version=\"${connid.database.version}\"\n-                jsonConf='[{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScriptFileName&quot;,&quot;displayName&quot;:&quot;updateScriptFileName&quot;,&quot;helpMessage&quot;:&quot;updateScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${basedir}/src/main/resources/scriptedsql/UpdateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScript&quot;,&quot;displayName&quot;:&quot;testScript&quot;,&quot;helpMessage&quot;:&quot;testScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;host&quot;,&quot;displayName&quot;:&quot;Host&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Host&lt;/b&gt;&lt;br/&gt;Enter the name of the host where the database is running.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:2,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;localhost&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;port&quot;,&quot;displayName&quot;:&quot;Port&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;TCP Port&lt;/b&gt;&lt;br/&gt;Enter the port number the database server is listening on.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:3,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;3306&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;database&quot;,&quot;displayName&quot;:&quot;Database&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Database&lt;/b&gt;&lt;br/&gt;Enter the name of the database on the database server that contains the table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:6,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScript&quot;,&quot;displayName&quot;:&quot;createScript&quot;,&quot;helpMessage&quot;:&quot;createScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcUrlTemplate&quot;,&quot;displayName&quot;:&quot;JDBC Connection URL&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Connection URL&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver Connection URL.&lt;br/&gt; Oracle template is jdbc:oracle:thin:@[host]:[port(1521)]:[DB].&lt;br/&gt;  MySQL template is jdbc:mysql://[host]:[port(3306)]/[db], for more info, read the JDBC driver documentation.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:11,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;jdbc:mysql://%h:%p/%d&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.url}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jndiProperties&quot;,&quot;displayName&quot;:&quot;Initial JNDI Properties&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Initial JNDI Properties&lt;/b&gt;&lt;br/&gt;Could be empty or enter the JDBC JNDI Initial context factory, context provider in a format: key = value.&quot;,&quot;type&quot;:&quot;[Ljava.lang.String;&quot;,&quot;required&quot;:false,&quot;order&quot;:21,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;enableEmptyString&quot;,&quot;displayName&quot;:&quot;Enable writing empty string&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Enable writing empty string&lt;/b&gt;&lt;br/&gt;Select to enable support for writing an empty strings, instead of a NULL value, in character based columns defined as not-null in the table schema. This option does not influence the way strings are written for Oracle based tables. By default empty strings are written as a NULL value.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:12,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;allNative&quot;,&quot;displayName&quot;:&quot;All native&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;All native&lt;/b&gt;&lt;br/&gt;Select to retrieve all data type of the columns in a native format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:16,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;password&quot;,&quot;displayName&quot;:&quot;User Password&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User Password&lt;/b&gt;&lt;br/&gt;Enter a user account that has permission to access accounts table.&quot;,&quot;type&quot;:&quot;org.identityconnectors.common.security.GuardedString&quot;,&quot;required&quot;:false,&quot;order&quot;:5,&quot;confidential&quot;:true,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.password}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;validConnectionQuery&quot;,&quot;displayName&quot;:&quot;Validate Connection Query&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Validate Connection Query&lt;/b&gt;&lt;br/&gt;There can be specified the check connection alive query. If empty, default implementation will test it using the switch on/off the autocommit. Some select 1 from dummy table could be more efficient.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:17,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;reloadScriptOnExecution&quot;,&quot;displayName&quot;:&quot;reloadScriptOnExecution&quot;,&quot;helpMessage&quot;:&quot;reloadScriptOnExecution&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;true&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;schemaScriptFileName&quot;,&quot;displayName&quot;:&quot;schemaScriptFileName&quot;,&quot;helpMessage&quot;:&quot;schemaScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${basedir}/src/main/resources/scriptedsql/SchemaScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcDriver&quot;,&quot;displayName&quot;:&quot;JDBC Driver&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Driver&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver class name. Oracle is oracle.jdbc.driver.OracleDriver. MySQL is org.gjt.mm.mysql.Driver.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:10,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;com.mysql.jdbc.Driver&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.driver}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScriptFileName&quot;,&quot;displayName&quot;:&quot;testScriptFileName&quot;,&quot;helpMessage&quot;:&quot;testScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${basedir}/src/main/resources/scriptedsql/TestScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;quoting&quot;,&quot;displayName&quot;:&quot;Name Quoting&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Name Quoting&lt;/b&gt;&lt;br/&gt;Select whether database column names for this resource should be quoted, and the quoting characters. By default, database column names are not quoted (None). For other selections (Single, Double, Back, or Brackets), column names will appear between single quotes, double quotes, back quotes, or brackets in the SQL generated to access the database.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:-1,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScriptFileName&quot;,&quot;displayName&quot;:&quot;createScriptFileName&quot;,&quot;helpMessage&quot;:&quot;createScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${basedir}/src/main/resources/scriptedsql/CreateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;clearTextPasswordToScript&quot;,&quot;displayName&quot;:&quot;clearTextPasswordToScript&quot;,&quot;helpMessage&quot;:&quot;clearTextPasswordToScript&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;nativeTimestamps&quot;,&quot;displayName&quot;:&quot;Native Timestamps&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Native Timestamps&lt;/b&gt;&lt;br/&gt;Select to retrieve Timestamp data type of the columns in java.sql.Timestamp format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:15,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScript&quot;,&quot;displayName&quot;:&quot;syncScript&quot;,&quot;helpMessage&quot;:&quot;syncScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;autoCommit&quot;,&quot;displayName&quot;:&quot;autoCommit&quot;,&quot;helpMessage&quot;:&quot;autoCommit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;scriptingLanguage&quot;,&quot;displayName&quot;:&quot;scriptingLanguage&quot;,&quot;helpMessage&quot;:&quot;scriptingLanguage&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;GROOVY&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;GROOVY&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;datasource&quot;,&quot;displayName&quot;:&quot;Datasource Path&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Data Source Name/Path&lt;/b&gt;&lt;br/&gt;Enter the JDBC Data Source Name/Path to connect to the Oracle server. If specified, connector will only try to connect using Datasource and ignore other resource parameters specified.&lt;br/&gt;the example value is: &lt;CODE&gt;jdbc/SampleDataSourceName&lt;/CODE&gt;&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:20,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScript&quot;,&quot;displayName&quot;:&quot;deleteScript&quot;,&quot;helpMessage&quot;:&quot;deleteScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;rethrowAllSQLExceptions&quot;,&quot;displayName&quot;:&quot;Rethrow all SQLExceptions&quot;,&quot;helpMessage&quot;:&quot;If this is not checked, SQL statements which throw SQLExceptions with a 0 ErrorCode will be have the exception caught and suppressed. Check it to have exceptions with 0 ErrorCodes rethrown.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:14,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScriptFileName&quot;,&quot;displayName&quot;:&quot;syncScriptFileName&quot;,&quot;helpMessage&quot;:&quot;syncScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${basedir}/src/main/resources/scriptedsql/SyncScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScript&quot;,&quot;displayName&quot;:&quot;updateScript&quot;,&quot;helpMessage&quot;:&quot;updateScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;user&quot;,&quot;displayName&quot;:&quot;User&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User&lt;/b&gt;&lt;br/&gt;Enter the name of the mandatory Database user with permission to account table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:4,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.username}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScriptFileName&quot;,&quot;displayName&quot;:&quot;deleteScriptFileName&quot;,&quot;helpMessage&quot;:&quot;deleteScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${basedir}/src/main/resources/scriptedsql/DeleteScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScriptFileName&quot;,&quot;displayName&quot;:&quot;searchScriptFileName&quot;,&quot;helpMessage&quot;:&quot;searchScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${basedir}/src/main/resources/scriptedsql/SearchScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScript&quot;,&quot;displayName&quot;:&quot;searchScript&quot;,&quot;helpMessage&quot;:&quot;searchScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]}]'/>\n+                jsonConf='[{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScriptFileName&quot;,&quot;displayName&quot;:&quot;updateScriptFileName&quot;,&quot;helpMessage&quot;:&quot;updateScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/UpdateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScript&quot;,&quot;displayName&quot;:&quot;testScript&quot;,&quot;helpMessage&quot;:&quot;testScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;host&quot;,&quot;displayName&quot;:&quot;Host&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Host&lt;/b&gt;&lt;br/&gt;Enter the name of the host where the database is running.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:2,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;localhost&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;port&quot;,&quot;displayName&quot;:&quot;Port&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;TCP Port&lt;/b&gt;&lt;br/&gt;Enter the port number the database server is listening on.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:3,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;3306&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;database&quot;,&quot;displayName&quot;:&quot;Database&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Database&lt;/b&gt;&lt;br/&gt;Enter the name of the database on the database server that contains the table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:6,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScript&quot;,&quot;displayName&quot;:&quot;createScript&quot;,&quot;helpMessage&quot;:&quot;createScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcUrlTemplate&quot;,&quot;displayName&quot;:&quot;JDBC Connection URL&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Connection URL&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver Connection URL.&lt;br/&gt; Oracle template is jdbc:oracle:thin:@[host]:[port(1521)]:[DB].&lt;br/&gt;  MySQL template is jdbc:mysql://[host]:[port(3306)]/[db], for more info, read the JDBC driver documentation.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:11,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;jdbc:mysql://%h:%p/%d&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.url}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jndiProperties&quot;,&quot;displayName&quot;:&quot;Initial JNDI Properties&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Initial JNDI Properties&lt;/b&gt;&lt;br/&gt;Could be empty or enter the JDBC JNDI Initial context factory, context provider in a format: key = value.&quot;,&quot;type&quot;:&quot;[Ljava.lang.String;&quot;,&quot;required&quot;:false,&quot;order&quot;:21,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;enableEmptyString&quot;,&quot;displayName&quot;:&quot;Enable writing empty string&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Enable writing empty string&lt;/b&gt;&lt;br/&gt;Select to enable support for writing an empty strings, instead of a NULL value, in character based columns defined as not-null in the table schema. This option does not influence the way strings are written for Oracle based tables. By default empty strings are written as a NULL value.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:12,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;allNative&quot;,&quot;displayName&quot;:&quot;All native&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;All native&lt;/b&gt;&lt;br/&gt;Select to retrieve all data type of the columns in a native format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:16,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;password&quot;,&quot;displayName&quot;:&quot;User Password&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User Password&lt;/b&gt;&lt;br/&gt;Enter a user account that has permission to access accounts table.&quot;,&quot;type&quot;:&quot;org.identityconnectors.common.security.GuardedString&quot;,&quot;required&quot;:false,&quot;order&quot;:5,&quot;confidential&quot;:true,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.password}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;validConnectionQuery&quot;,&quot;displayName&quot;:&quot;Validate Connection Query&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Validate Connection Query&lt;/b&gt;&lt;br/&gt;There can be specified the check connection alive query. If empty, default implementation will test it using the switch on/off the autocommit. Some select 1 from dummy table could be more efficient.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:17,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;reloadScriptOnExecution&quot;,&quot;displayName&quot;:&quot;reloadScriptOnExecution&quot;,&quot;helpMessage&quot;:&quot;reloadScriptOnExecution&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;true&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;schemaScriptFileName&quot;,&quot;displayName&quot;:&quot;schemaScriptFileName&quot;,&quot;helpMessage&quot;:&quot;schemaScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SchemaScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcDriver&quot;,&quot;displayName&quot;:&quot;JDBC Driver&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Driver&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver class name. Oracle is oracle.jdbc.driver.OracleDriver. MySQL is org.gjt.mm.mysql.Driver.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:10,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;com.mysql.jdbc.Driver&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.driver}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScriptFileName&quot;,&quot;displayName&quot;:&quot;testScriptFileName&quot;,&quot;helpMessage&quot;:&quot;testScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/TestScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;quoting&quot;,&quot;displayName&quot;:&quot;Name Quoting&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Name Quoting&lt;/b&gt;&lt;br/&gt;Select whether database column names for this resource should be quoted, and the quoting characters. By default, database column names are not quoted (None). For other selections (Single, Double, Back, or Brackets), column names will appear between single quotes, double quotes, back quotes, or brackets in the SQL generated to access the database.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:-1,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScriptFileName&quot;,&quot;displayName&quot;:&quot;createScriptFileName&quot;,&quot;helpMessage&quot;:&quot;createScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/CreateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;clearTextPasswordToScript&quot;,&quot;displayName&quot;:&quot;clearTextPasswordToScript&quot;,&quot;helpMessage&quot;:&quot;clearTextPasswordToScript&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;nativeTimestamps&quot;,&quot;displayName&quot;:&quot;Native Timestamps&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Native Timestamps&lt;/b&gt;&lt;br/&gt;Select to retrieve Timestamp data type of the columns in java.sql.Timestamp format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:15,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScript&quot;,&quot;displayName&quot;:&quot;syncScript&quot;,&quot;helpMessage&quot;:&quot;syncScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;autoCommit&quot;,&quot;displayName&quot;:&quot;autoCommit&quot;,&quot;helpMessage&quot;:&quot;autoCommit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;scriptingLanguage&quot;,&quot;displayName&quot;:&quot;scriptingLanguage&quot;,&quot;helpMessage&quot;:&quot;scriptingLanguage&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;GROOVY&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;GROOVY&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;datasource&quot;,&quot;displayName&quot;:&quot;Datasource Path&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Data Source Name/Path&lt;/b&gt;&lt;br/&gt;Enter the JDBC Data Source Name/Path to connect to the Oracle server. If specified, connector will only try to connect using Datasource and ignore other resource parameters specified.&lt;br/&gt;the example value is: &lt;CODE&gt;jdbc/SampleDataSourceName&lt;/CODE&gt;&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:20,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScript&quot;,&quot;displayName&quot;:&quot;deleteScript&quot;,&quot;helpMessage&quot;:&quot;deleteScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;rethrowAllSQLExceptions&quot;,&quot;displayName&quot;:&quot;Rethrow all SQLExceptions&quot;,&quot;helpMessage&quot;:&quot;If this is not checked, SQL statements which throw SQLExceptions with a 0 ErrorCode will be have the exception caught and suppressed. Check it to have exceptions with 0 ErrorCodes rethrown.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:14,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScriptFileName&quot;,&quot;displayName&quot;:&quot;syncScriptFileName&quot;,&quot;helpMessage&quot;:&quot;syncScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SyncScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScript&quot;,&quot;displayName&quot;:&quot;updateScript&quot;,&quot;helpMessage&quot;:&quot;updateScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;user&quot;,&quot;displayName&quot;:&quot;User&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User&lt;/b&gt;&lt;br/&gt;Enter the name of the mandatory Database user with permission to account table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:4,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.username}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScriptFileName&quot;,&quot;displayName&quot;:&quot;deleteScriptFileName&quot;,&quot;helpMessage&quot;:&quot;deleteScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/DeleteScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScriptFileName&quot;,&quot;displayName&quot;:&quot;searchScriptFileName&quot;,&quot;helpMessage&quot;:&quot;searchScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SearchScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScript&quot;,&quot;displayName&quot;:&quot;searchScript&quot;,&quot;helpMessage&quot;:&quot;searchScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]}]'/>\n   <ConnInstance_capabilities ConnInstance_id=\"108\" capability=\"ONE_PHASE_CREATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"108\" capability=\"ONE_PHASE_UPDATE\"/>\n   <ConnInstance_capabilities ConnInstance_id=\"108\" capability=\"ONE_PHASE_DELETE\"/>\n@@ -698,7 +708,7 @@ under the License.\n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n   <!-- Use resource-testdb for passthrough authentication (SYNCOPE-164) -->\n-  <Policy_ExternalResource accountPolicy_id=\"5\" resource_name=\"resource-testdb\"/>\n+  <AccountPolicy_ExternalResource accountPolicy_id=\"5\" resource_name=\"resource-testdb\"/>\n     \n   <SyncopeUser_ExternalResource user_id=\"1\" resource_name=\"resource-testdb2\"/>\n   <SyncopeUser_ExternalResource user_id=\"3\" resource_name=\"ws-target-resource-delete\"/>"},{"sha":"479b223bcc6cb103e87c55e1047f968e3a96bd16","filename":"core/persistence-jpa/src/test/resources/domains/Two.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwo.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwo.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwo.properties?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -15,7 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n Two.driverClassName=org.h2.Driver\n-Two.url=jdbc:h2:file:${project.build.directory}/test-classes/syncopetwo.db;DB_CLOSE_DELAY=-1\n+Two.url=jdbc:h2:file:${conf.directory}/syncopetwo.db\n Two.schema=\n Two.username=sa\n Two.password="},{"sha":"2874cac141893df604559bf16133bebbac6b37f9","filename":"core/persistence-jpa/src/test/resources/persistenceTest.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2FpersistenceTest.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -49,6 +49,8 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.misc.policy\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.misc.security\"/>\n \n+  <bean class=\"org.apache.syncope.core.misc.security.DefaultPasswordGenerator\"/>\n+\n   <import resource=\"persistenceContext.xml\"/>\n \n </beans>"},{"sha":"aa144f021da29f927fd464c8a55725bad7daece9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/PolicyDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PolicyDataBinder {"},{"sha":"866f41fc9870b0e79ad45abfe9d6625ba299556b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnIdBundleManagerImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -128,13 +128,13 @@ private void initLocal(final URI location) {\n \n     private void initRemote(final URI location) {\n         // 1. Extract conf params for remote connection from given URI\n-        final String host = location.getHost();\n-        final int port = location.getPort();\n-        final GuardedString key = new GuardedString(location.getUserInfo().toCharArray());\n-        final boolean useSSL = location.getScheme().equals(\"connids\");\n+        String host = location.getHost();\n+        int port = location.getPort();\n+        GuardedString key = new GuardedString(location.getUserInfo().toCharArray());\n+        boolean useSSL = location.getScheme().equals(\"connids\");\n \n-        final List<TrustManager> trustManagers = new ArrayList<>();\n-        final String[] params = StringUtils.isBlank(location.getQuery()) ? null : location.getQuery().split(\"&\");\n+        List<TrustManager> trustManagers = new ArrayList<>();\n+        String[] params = StringUtils.isBlank(location.getQuery()) ? null : location.getQuery().split(\"&\");\n         if (params != null && params.length > 0) {\n             final String[] trustAllCerts = params[0].split(\"=\");\n             if (trustAllCerts != null && trustAllCerts.length > 1"},{"sha":"5fd3ec12b58ca167bf6cb46276c1d6726410e255","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -270,7 +270,7 @@ public Pair<Long, List<PropagationStatus>> suspend(final StatusMod statusMod) {\n \n     protected List<PropagationStatus> propagateStatus(final StatusMod statusMod) {\n         Collection<String> noPropResourceNames = CollectionUtils.removeAll(\n-                userDAO.findAllResourceNames(userDAO.find(statusMod.getKey())), statusMod.getResourceNames());\n+                userDAO.findAllResourceNames(userDAO.find(statusMod.getKey())), statusMod.getResources());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 statusMod.getKey(), statusMod.getType() != StatusMod.ModType.SUSPEND, noPropResourceNames);\n@@ -315,7 +315,7 @@ public List<PropagationStatus> provision(\n         if (changePwd) {\n             StatusMod statusMod = new StatusMod();\n             statusMod.setOnSyncope(false);\n-            statusMod.getResourceNames().addAll(resources);\n+            statusMod.getResources().addAll(resources);\n             userMod.setPwdPropRequest(statusMod);\n             userMod.setPassword(password);\n         }"},{"sha":"f2074f81f0f74c8667ded31e392024db66e0f834","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":63,"deletions":37,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -20,23 +20,24 @@\n \n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.policy.AbstractAccountRuleConf;\n+import org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -59,24 +60,42 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n-        final T policyTO;\n-\n+        T policyTO;\n         switch (policy.getType()) {\n             case PASSWORD:\n-                policyTO = (T) new PasswordPolicyTO();\n-                ((PasswordPolicyTO) policyTO).setSpecification(policy.getSpecification(PasswordPolicySpec.class));\n+                PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(policy);\n+                PasswordPolicyTO passwordPolicyTO = new PasswordPolicyTO();\n+                policyTO = (T) passwordPolicyTO;\n+\n+                passwordPolicyTO.setAllowNullPassword(passwordPolicy.isAllowNullPassword());\n+                passwordPolicyTO.setHistoryLength(passwordPolicy.getHistoryLength());\n+\n+                passwordPolicyTO.getRuleConfs().clear();\n+                for (PasswordRuleConf ruleConf : passwordPolicy.getRuleConfs()) {\n+                    passwordPolicyTO.getRuleConfs().add((AbstractPasswordRuleConf) ruleConf);\n+                }\n                 break;\n \n             case ACCOUNT:\n-                policyTO = (T) new AccountPolicyTO();\n-                ((AccountPolicyTO) policyTO).setSpecification(policy.getSpecification(AccountPolicySpec.class));\n-                ((AccountPolicyTO) policyTO).getResources().addAll(((AccountPolicy) policy).getResourceNames());\n+                AccountPolicy accountPolicy = AccountPolicy.class.cast(policy);\n+                AccountPolicyTO accountPolicyTO = new AccountPolicyTO();\n+                policyTO = (T) accountPolicyTO;\n+\n+                accountPolicyTO.setMaxAuthenticationAttempts(accountPolicy.getMaxAuthenticationAttempts());\n+                accountPolicyTO.setPropagateSuspension(accountPolicy.isPropagateSuspension());\n+\n+                accountPolicyTO.getRuleConfs().clear();\n+                for (AccountRuleConf ruleConf : accountPolicy.getRuleConfs()) {\n+                    accountPolicyTO.getRuleConfs().add((AbstractAccountRuleConf) ruleConf);\n+                }\n+\n+                accountPolicyTO.getResources().addAll(accountPolicy.getResourceNames());\n                 break;\n \n             case SYNC:\n             default:\n                 policyTO = (T) new SyncPolicyTO();\n-                ((SyncPolicyTO) policyTO).setSpecification(policy.getSpecification(SyncPolicySpec.class));\n+                ((SyncPolicyTO) policyTO).setSpecification(((SyncPolicy) policy).getSpecification());\n         }\n \n         policyTO.setKey(policy.getKey());\n@@ -92,15 +111,6 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n         return policyTO;\n     }\n \n-    private ExternalResource getResource(final String resourceName) {\n-        ExternalResource resource = resourceDAO.find(resourceName);\n-        if (resource == null) {\n-            LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n-        }\n-\n-        return resource;\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO policyTO) {\n@@ -120,7 +130,16 @@ public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO pol\n                 if (result == null) {\n                     result = (T) entityFactory.newEntity(PasswordPolicy.class);\n                 }\n-                result.setSpecification(((PasswordPolicyTO) policyTO).getSpecification());\n+                PasswordPolicy passwordPolicy = PasswordPolicy.class.cast(result);\n+                PasswordPolicyTO passwordPolicyTO = PasswordPolicyTO.class.cast(policyTO);\n+\n+                passwordPolicy.setAllowNullPassword(passwordPolicyTO.isAllowNullPassword());\n+                passwordPolicy.setHistoryLength(passwordPolicyTO.getHistoryLength());\n+\n+                passwordPolicy.removeAllRuleConfs();\n+                for (PasswordRuleConf conf : passwordPolicyTO.getRuleConfs()) {\n+                    passwordPolicy.add(conf);\n+                }\n                 break;\n \n             case ACCOUNT:\n@@ -131,17 +150,24 @@ public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO pol\n                 if (result == null) {\n                     result = (T) entityFactory.newEntity(AccountPolicy.class);\n                 }\n-                result.setSpecification(((AccountPolicyTO) policyTO).getSpecification());\n+                AccountPolicy accountPolicy = AccountPolicy.class.cast(result);\n+                AccountPolicyTO accountPolicyTO = AccountPolicyTO.class.cast(policyTO);\n+\n+                accountPolicy.setMaxAuthenticationAttempts(accountPolicyTO.getMaxAuthenticationAttempts());\n+                accountPolicy.setPropagateSuspension(accountPolicyTO.isPropagateSuspension());\n \n-                if (((AccountPolicy) result).getResources() != null\n-                        && !((AccountPolicy) result).getResources().isEmpty()) {\n-                    ((AccountPolicy) result).getResources().clear();\n+                accountPolicy.removeAllRuleConfs();\n+                for (AccountRuleConf conf : accountPolicyTO.getRuleConfs()) {\n+                    accountPolicy.add(conf);\n                 }\n-                for (String resourceName : ((AccountPolicyTO) policyTO).getResources()) {\n-                    ExternalResource resource = getResource(resourceName);\n \n-                    if (resource != null) {\n-                        ((AccountPolicy) result).add(resource);\n+                accountPolicy.getResources().clear();\n+                for (String resourceName : accountPolicyTO.getResources()) {\n+                    ExternalResource resource = resourceDAO.find(resourceName);\n+                    if (resource == null) {\n+                        LOG.debug(\"Ignoring invalid resource {} \", resourceName);\n+                    } else {\n+                        accountPolicy.add(resource);\n                     }\n                 }\n                 break;\n@@ -155,7 +181,7 @@ public <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO pol\n                 if (result == null) {\n                     result = (T) entityFactory.newEntity(SyncPolicy.class);\n                 }\n-                result.setSpecification(((SyncPolicyTO) policyTO).getSpecification());\n+                ((SyncPolicy) result).setSpecification(((SyncPolicyTO) policyTO).getSpecification());\n         }\n \n         result.setDescription(policyTO.getDescription());"},{"sha":"d9a2838e72042666803daa5afddbfdfe51857d3b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -21,9 +21,9 @@\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"252b71997d0c0396cfe6c760dc5159508e78c604","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":9,"deletions":26,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -18,10 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -43,9 +42,6 @@\n @Component\n public class ReportDataBinderImpl implements ReportDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n \n     private static final String[] IGNORE_REPORT_PROPERTIES = { \"key\", \"reportlets\", \"executions\" };\n@@ -62,18 +58,9 @@ public class ReportDataBinderImpl implements ReportDataBinder {\n     public void getReport(final Report report, final ReportTO reportTO) {\n         BeanUtils.copyProperties(reportTO, report, IGNORE_REPORT_PROPERTIES);\n \n-        // 1. remove all reportlet confs\n-        Set<ReportletConf> toRemove = new HashSet<>();\n-        for (ReportletConf conf : report.getReportletConfs()) {\n-            toRemove.add(conf);\n-        }\n-        for (ReportletConf conf : toRemove) {\n-            report.removeReportletConf(conf);\n-        }\n-\n-        // 2. take all reportlet confs from reportTO\n+        report.removeAllReportletConfs();\n         for (ReportletConf conf : reportTO.getReportletConfs()) {\n-            report.addReportletConf(conf);\n+            report.add(conf);\n         }\n     }\n \n@@ -83,11 +70,14 @@ public ReportTO getReportTO(final Report report) {\n         reportTO.setKey(report.getKey());\n         BeanUtils.copyProperties(report, reportTO, IGNORE_REPORT_PROPERTIES);\n \n-        copyReportletConfs(report, reportTO);\n+        reportTO.getReportletConfs().clear();\n+        for (ReportletConf reportletConf : report.getReportletConfs()) {\n+            reportTO.getReportletConfs().add((AbstractReportletConf) reportletConf);\n+        }\n \n         ReportExec latestExec = reportExecDAO.findLatestStarted(report);\n         reportTO.setLatestExecStatus(latestExec == null\n-                ? \"\"\n+                ? StringUtils.EMPTY\n                 : latestExec.getStatus());\n \n         reportTO.setStartDate(latestExec == null\n@@ -120,13 +110,6 @@ public ReportTO getReportTO(final Report report) {\n         return reportTO;\n     }\n \n-    private void copyReportletConfs(final Report report, final ReportTO reportTO) {\n-        reportTO.getReportletConfs().clear();\n-        for (ReportletConf reportletConf : report.getReportletConfs()) {\n-            reportTO.getReportletConfs().add((AbstractReportletConf) reportletConf);\n-        }\n-    }\n-\n     @Override\n     public ReportExecTO getReportExecTO(final ReportExec execution) {\n         ReportExecTO executionTO = new ReportExecTO();"},{"sha":"582110625139694c8319042932ee983f61c4f7c3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -36,14 +36,14 @@\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.slf4j.Logger;"},{"sha":"2e1224b264265e0ddd54c175e180b1549cc7d443","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -26,10 +26,12 @@\n import javax.annotation.Resource;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n@@ -48,9 +50,13 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -75,6 +81,9 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     @Autowired\n     private SecurityQuestionDAO securityQuestionDAO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n@@ -216,6 +225,23 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         user.setSecurityAnswer(userTO.getSecurityAnswer());\n     }\n \n+    private boolean isPasswordMapped(final ExternalResource resource) {\n+        boolean result = false;\n+\n+        Provision provision = resource.getProvision(anyTypeDAO.findUser());\n+        if (provision != null && provision.getMapping() != null) {\n+            result = CollectionUtils.exists(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n+\n+                @Override\n+                public boolean evaluate(final MappingItem item) {\n+                    return item.isPassword();\n+                }\n+            });\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public PropagationByResource update(final User toBeUpdated, final UserMod userMod) {\n         // Re-merge any pending change from workflow tasks\n@@ -367,6 +393,20 @@ public void execute(final Long roleKey) {\n                     user.add(membership);\n \n                     toBeProvisioned.addAll(group.getResourceNames());\n+\n+                    // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n+                    // ensure that they are counted for password propagation\n+                    if (toBeUpdated.canDecodePassword()) {\n+                        for (ExternalResource resource : group.getResources()) {\n+                            if (isPasswordMapped(resource)) {\n+                                if (userMod.getPwdPropRequest() == null) {\n+                                    userMod.setPwdPropRequest(new StatusMod());\n+                                }\n+\n+                                userMod.getPwdPropRequest().getResources().add(resource.getKey());\n+                            }\n+                        }\n+                    }\n                 }\n             }\n         }"},{"sha":"8129928f9df2659ec11c904547228fbc5866a4ad","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SchedulerShutdown.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSchedulerShutdown.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSchedulerShutdown.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSchedulerShutdown.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.DisposableBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+\n+/**\n+ * Clean shutdown for Quartz scheduler.\n+ */\n+public class SchedulerShutdown implements ApplicationContextAware, DisposableBean {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SchedulerShutdown.class);\n+\n+    private ApplicationContext ctx;\n+\n+    @Override\n+    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n+        this.ctx = ctx;\n+    }\n+\n+    @Override\n+    public void destroy() throws Exception {\n+        SchedulerFactoryBean scheduler = ctx.getBean(SchedulerFactoryBean.class);\n+        scheduler.getScheduler().shutdown();\n+    }\n+\n+}"},{"sha":"631cbe3695387dd0d697af7f9c6fe182227fe8f4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -239,7 +239,7 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMo\n             PropagationByResource origPropByRes = new PropagationByResource();\n             origPropByRes.merge(wfResult.getPropByRes());\n \n-            Set<String> pwdResourceNames = new HashSet<>(userMod.getPwdPropRequest().getResourceNames());\n+            Set<String> pwdResourceNames = new HashSet<>(userMod.getPwdPropRequest().getResources());\n             Collection<String> currentResourceNames = userDAO.findAllResourceNames(userDAO.authFind(userMod.getKey()));\n             pwdResourceNames.retainAll(currentResourceNames);\n             PropagationByResource pwdPropByRes = new PropagationByResource();"},{"sha":"3b9dc703844b8f8e91abe410196ed82481beb3a8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -210,7 +210,7 @@ private SyncPolicySpec getSyncPolicySpec(final ProvisioningTask task) {\n         if (task instanceof SyncTask) {\n             syncPolicySpec = task.getResource().getSyncPolicy() == null\n                     ? null\n-                    : task.getResource().getSyncPolicy().getSpecification(SyncPolicySpec.class);\n+                    : task.getResource().getSyncPolicy().getSpecification();\n         } else {\n             syncPolicySpec = null;\n         }"},{"sha":"642181f34c30b6510b698c3980dc6a8e9a47c0c5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n@@ -279,7 +279,7 @@ public List<Long> findExisting(\n \n         SyncPolicySpec syncPolicySpec = null;\n         if (provision.getResource().getSyncPolicy() != null) {\n-            syncPolicySpec = provision.getResource().getSyncPolicy().getSpecification(SyncPolicySpec.class);\n+            syncPolicySpec = provision.getResource().getSyncPolicy().getSpecification();\n         }\n \n         SyncCorrelationRule syncRule = null;"},{"sha":"4d635d217129e00386b03a511832a168e9e0a31e","filename":"core/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -81,6 +81,7 @@ under the License.\n       </props>\n     </property>\n   </bean>\n+  <bean class=\"org.apache.syncope.core.provisioning.java.job.SchedulerShutdown\"/>\n   \n   <bean id=\"mailSender\" class=\"org.springframework.mail.javamail.JavaMailSenderImpl\">\n     <property name=\"defaultEncoding\" value=\"${smtpEncoding}\"/>"},{"sha":"06715d846ed784ece32cef50e602318bf45f1771","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n+import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public Integer getPriority() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public void load() {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final Type type) {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public Class<Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return DefaultAccountRule.class;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return DefaultPasswordRule.class;\n+    }\n+\n+}"},{"sha":"8f7b5032e777f60e95d9424b5c250fabf0151bbc","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -102,13 +102,13 @@ public List<ConnInstanceTO> list(final String lang) {\n     }\n \n     @Override\n-    public ConnInstanceTO read(final Long key) {\n-        return logic.read(key);\n+    public ConnInstanceTO read(final Long key, final String lang) {\n+        return logic.read(key, lang);\n     }\n \n     @Override\n-    public ConnInstanceTO readByResource(final String resourceName) {\n-        return logic.readByResource(resourceName);\n+    public ConnInstanceTO readByResource(final String resourceName, final String lang) {\n+        return logic.readByResource(resourceName, lang);\n     }\n \n     @Override"},{"sha":"a6c4c5d706898181596b8f83570b20788609aaa3","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -21,10 +21,10 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.PolicyService;"},{"sha":"e04053aff0aaeb4975848f932e87dc0e24de7e7b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -31,8 +31,6 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n@@ -73,11 +71,6 @@ public PagedResult<ReportTO> list(final ListQuery listQuery) {\n                 logic.count());\n     }\n \n-    @Override\n-    public List<ReportletConfClass> getReportletConfClasses() {\n-        return CollectionWrapper.wrap(logic.getReportletConfClasses(), ReportletConfClass.class);\n-    }\n-\n     @Override\n     public ReportTO read(final Long key) {\n         return logic.read(key);"},{"sha":"db95d8db35d8523f841f0d53a836e45b2a4df4a8","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -843,11 +843,11 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n             userMod.setPassword(clearPassword);\n \n             if (propByRes != null) {\n-                final StatusMod st = new StatusMod();\n+                StatusMod st = new StatusMod();\n                 userMod.setPwdPropRequest(st);\n                 st.setOnSyncope(true);\n                 for (String res : propByRes.get(ResourceOperation.CREATE)) {\n-                    st.getResourceNames().add(res);\n+                    st.getResources().add(res);\n                 }\n             }\n         }"},{"sha":"b77b61f025d58f8cfbec18ec7001974c78f88823","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserProvisionProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -69,7 +69,7 @@ public void process(final Exchange exchange) {\n         if (changePwd) {\n             StatusMod statusMod = new StatusMod();\n             statusMod.setOnSyncope(false);\n-            statusMod.getResourceNames().addAll(resources);\n+            statusMod.getResources().addAll(resources);\n             userMod.setPwdPropRequest(statusMod);\n             userMod.setPassword(password);\n         }"},{"sha":"41af6ebdf8fd6b4c8f351d32df200013a9e7ffe3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -61,7 +61,7 @@ public void process(final Exchange exchange) {\n         StatusMod statusMod = exchange.getProperty(\"statusMod\", StatusMod.class);\n \n         Collection<String> resourcesToBeExcluded = CollectionUtils.removeAll(\n-                userDAO.findAllResourceNames(userDAO.find(key)), statusMod.getResourceNames());\n+                userDAO.findAllResourceNames(userDAO.find(key)), statusMod.getResources());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 key, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);"},{"sha":"3352720d9708a16e752557888ab3eba94e3ae157","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/H2StartStopListener.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FH2StartStopListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FH2StartStopListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FH2StartStopListener.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -36,9 +36,6 @@\n  */\n public class H2StartStopListener implements ServletContextListener {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(H2StartStopListener.class);\n \n     private static final String H2_TESTDB = \"h2TestDb\";"},{"sha":"2b67f37ddd4ef3aab1fda75a8ad9c6fe00d7ae92","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.misc.policy.AccountPolicyException;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@AccountRuleConfClass(TestAccountRuleConf.class)\n+public class TestAccountRule implements AccountRule {\n+\n+    private TestAccountRuleConf conf;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final AccountRuleConf conf, final User user) {\n+        if (conf instanceof TestAccountRuleConf) {\n+            this.conf = TestAccountRuleConf.class.cast(conf);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    AccountRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+\n+        if (!user.getUsername().contains(this.conf.getMustContainSubstring())) {\n+            throw new AccountPolicyException(\"Username not containing \" + this.conf.getMustContainSubstring());\n+        }\n+    }\n+\n+}"},{"sha":"47c468d4475f6ed7a1a5c6841b75f0c1650d30f3","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRuleConf.java","status":"renamed","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,21 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity;\n+package org.apache.syncope.fit.core.reference;\n \n-import javax.persistence.DiscriminatorValue;\n-import javax.persistence.Entity;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.policy.AbstractAccountRuleConf;\n \n-@Entity\n-@DiscriminatorValue(\"SyncPolicy\")\n-public class JPASyncPolicy extends JPAPolicy implements SyncPolicy {\n+@XmlRootElement(name = \"testAccountRuleConf\")\n+@XmlType\n+public class TestAccountRuleConf extends AbstractAccountRuleConf {\n \n-    private static final long serialVersionUID = -6090413855809521279L;\n+    private static final long serialVersionUID = -1803947511928491978L;\n \n-    public JPASyncPolicy() {\n-        super();\n-        this.type = PolicyType.SYNC;\n+    private String mustContainSubstring = \"YYY\";\n+\n+    public String getMustContainSubstring() {\n+        return mustContainSubstring;\n     }\n+\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASyncPolicy.java"},{"sha":"ea412743ee28fac2bb1132ffb140796d49f5efaf","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@PasswordRuleConfClass(TestPasswordRuleConf.class)\n+public class TestPasswordRule implements PasswordRule {\n+\n+    private TestPasswordRuleConf conf;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final PasswordRuleConf conf, final User user) {\n+        if (conf instanceof TestPasswordRuleConf) {\n+            this.conf = TestPasswordRuleConf.class.cast(conf);\n+        } else {\n+            throw new IllegalArgumentException(\n+                    PasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+\n+        if (!user.getClearPassword().endsWith(this.conf.getMustEndWith())) {\n+            throw new PasswordPolicyException(\"Password not ending with \" + this.conf.getMustEndWith());\n+        }\n+    }\n+\n+}"},{"sha":"c6c64460edd09f0acfd65aea9117cb73aad35d64","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRuleConf.java","status":"renamed","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -16,24 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity;\n+package org.apache.syncope.fit.core.reference;\n \n-import javax.persistence.Entity;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.PushPolicy;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf;\n \n-@Entity\n-public class JPAPushPolicy extends JPAPolicy implements PushPolicy {\n+@XmlRootElement(name = \"testPasswordRuleConf\")\n+@XmlType\n+public class TestPasswordRuleConf extends AbstractPasswordRuleConf {\n \n-    private static final long serialVersionUID = -5875589156893921113L;\n+    private static final long serialVersionUID = -1803947511928491978L;\n \n-    public JPAPushPolicy() {\n-        this(false);\n-    }\n+    private String mustEndWith = \"XXX\";\n \n-    public JPAPushPolicy(final boolean global) {\n-        super();\n-        this.type = PolicyType.PUSH;\n+    public String getMustEndWith() {\n+        return mustEndWith;\n     }\n \n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPushPolicy.java"},{"sha":"7ef09975e46820412a90eaeb6df3c75c0f6cb376","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -103,7 +103,7 @@ under the License.\n       <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     \n-    <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"ERROR\">\n+    <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">"},{"sha":"4e5d5e960c14a4548b6792a15770717fa8da180e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -22,6 +22,7 @@\n \n import java.io.InputStream;\n import java.net.URI;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Properties;\n import java.util.UUID;\n@@ -39,7 +40,7 @@\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n-import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -403,7 +404,7 @@ protected InitialDirContext getLdapResourceDirContext(final String bindDn, final\n             throws NamingException {\n         ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n         final Map<String, ConnConfProperty> ldapConnConf =\n-                connectorService.read(ldapRes.getConnector()).getConfigurationMap();\n+                connectorService.read(ldapRes.getConnector(), Locale.ENGLISH.getLanguage()).getConfigurationMap();\n \n         Properties env = new Properties();\n         env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");"},{"sha":"52ee2ac8c492f7cb35b58ed1bfddadcb242a52e5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":27,"deletions":24,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -32,6 +32,7 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n@@ -115,7 +116,7 @@ public void createWithException() {\n     @Test\n     public void create() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n-        connectorTO.setLocation(connectorService.read(100L).getLocation());\n+        connectorTO.setLocation(connectorService.read(100L, Locale.ENGLISH.getLanguage()).getLocation());\n         connectorTO.setVersion(connidSoapVersion);\n         connectorTO.setConnectorName(\"net.tirasa.connid.bundles.soap.WebServiceConnector\");\n         connectorTO.setBundleName(\"net.tirasa.connid.bundles.soap\");\n@@ -183,7 +184,7 @@ public void create() {\n \n         try {\n             connectorService.update(actual);\n-            actual = connectorService.read(actual.getKey());\n+            actual = connectorService.read(actual.getKey(), Locale.ENGLISH.getLanguage());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"update failed\", e);\n             t = e;\n@@ -207,7 +208,7 @@ public void create() {\n \n         // check the non existence\n         try {\n-            connectorService.read(actual.getKey());\n+            connectorService.read(actual.getKey(), Locale.ENGLISH.getLanguage());\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.NOT_FOUND, e.getType().getResponseStatus());\n         }\n@@ -256,11 +257,11 @@ public void update() {\n         connectorTO.getConfiguration().addAll(conf);\n \n         connectorService.update(connectorTO);\n-        ConnInstanceTO actual = connectorService.read(connectorTO.getKey());\n+        ConnInstanceTO actual = connectorService.read(connectorTO.getKey(), Locale.ENGLISH.getLanguage());\n \n         assertNotNull(actual);\n \n-        actual = connectorService.read(actual.getKey());\n+        actual = connectorService.read(actual.getKey(), Locale.ENGLISH.getLanguage());\n \n         assertNotNull(actual);\n         assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n@@ -287,7 +288,7 @@ public void issueSYNCOPE10() {\n         // Copy resource and connector in order to create new objects.\n         // ----------------------------------\n         // Retrieve a connector instance template.\n-        ConnInstanceTO connInstanceTO = connectorService.read(103L);\n+        ConnInstanceTO connInstanceTO = connectorService.read(103L, Locale.ENGLISH.getLanguage());\n         assertNotNull(connInstanceTO);\n \n         // check for resource\n@@ -338,7 +339,8 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         // Check for spring bean.\n         // ----------------------------------\n-        ConnInstanceTO connInstanceBean = connectorService.readByResource(resourceTO.getKey());\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(\n+                resourceTO.getKey(), Locale.ENGLISH.getLanguage());\n         assertNotNull(connInstanceBean);\n         assertFalse(connInstanceBean.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n         // ----------------------------------\n@@ -349,12 +351,12 @@ public void issueSYNCOPE10() {\n         connInstanceTO.getCapabilities().add(ConnectorCapability.AUTHENTICATE);\n \n         connectorService.update(connInstanceTO);\n-        ConnInstanceTO actual = connectorService.read(connInstanceTO.getKey());\n+        ConnInstanceTO actual = connectorService.read(connInstanceTO.getKey(), Locale.ENGLISH.getLanguage());\n         assertNotNull(actual);\n         assertTrue(connInstanceTO.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n \n         // check for spring bean update\n-        connInstanceBean = connectorService.readByResource(resourceTO.getKey());\n+        connInstanceBean = connectorService.readByResource(resourceTO.getKey(), Locale.ENGLISH.getLanguage());\n         assertTrue(connInstanceBean.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n         // ----------------------------------\n     }\n@@ -380,13 +382,13 @@ public void list() {\n \n     @Test\n     public void read() {\n-        ConnInstanceTO connectorInstanceTO = connectorService.read(100L);\n+        ConnInstanceTO connectorInstanceTO = connectorService.read(100L, Locale.ENGLISH.getLanguage());\n         assertNotNull(connectorInstanceTO);\n     }\n \n     @Test\n     public void getBundles() {\n-        List<ConnBundleTO> bundles = connectorService.getBundles(null);\n+        List<ConnBundleTO> bundles = connectorService.getBundles(Locale.ENGLISH.getLanguage());\n         assertNotNull(bundles);\n         assertFalse(bundles.isEmpty());\n         for (ConnBundleTO bundle : bundles) {\n@@ -403,7 +405,7 @@ public void getConnectorConfiguration() {\n \n     @Test\n     public void checkHiddenProperty() {\n-        ConnInstanceTO connInstanceTO = connectorService.read(100L);\n+        ConnInstanceTO connInstanceTO = connectorService.read(100L, Locale.ENGLISH.getLanguage());\n \n         boolean check = false;\n \n@@ -529,7 +531,7 @@ public void validate() {\n \n     @Test\n     public void getSchemaNames() {\n-        ConnInstanceTO conn = connectorService.read(101L);\n+        ConnInstanceTO conn = connectorService.read(101L, Locale.ENGLISH.getLanguage());\n \n         List<PlainSchemaTO> schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, true);\n         assertNotNull(schemaNames);\n@@ -542,7 +544,7 @@ public void getSchemaNames() {\n         assertNotNull(schemaNames);\n         assertEquals(1, schemaNames.size());\n \n-        conn = connectorService.read(104L);\n+        conn = connectorService.read(104L, Locale.ENGLISH.getLanguage());\n \n         // to be used with overridden properties\n         conn.getConfiguration().clear();\n@@ -554,7 +556,7 @@ public void getSchemaNames() {\n \n     @Test\n     public void getSupportedObjectClasses() {\n-        ConnInstanceTO ldap = connectorService.read(105L);\n+        ConnInstanceTO ldap = connectorService.read(105L, Locale.ENGLISH.getLanguage());\n         assertNotNull(ldap);\n \n         List<ConnIdObjectClass> objectClasses = connectorService.getSupportedObjectClasses(ldap.getKey(), ldap);\n@@ -565,7 +567,7 @@ public void getSupportedObjectClasses() {\n         assertTrue(objectClasses.contains(\n                 ConnIdObjectClass.getInstance(ConnIdObjectClass.class, ObjectClass.GROUP_NAME)));\n \n-        ConnInstanceTO csv = connectorService.read(104L);\n+        ConnInstanceTO csv = connectorService.read(104L, Locale.ENGLISH.getLanguage());\n         assertNotNull(csv);\n \n         objectClasses = connectorService.getSupportedObjectClasses(csv.getKey(), csv);\n@@ -582,7 +584,7 @@ public void issueSYNCOPE112() {\n         // ----------------------------------------\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n-        connectorTO.setLocation(connectorService.read(100L).getLocation());\n+        connectorTO.setLocation(connectorService.read(100L, Locale.ENGLISH.getLanguage()).getLocation());\n \n         // set connector version\n         connectorTO.setVersion(connidSoapVersion);\n@@ -688,7 +690,7 @@ public void bulkAction() {\n         BulkAction bulkAction = new BulkAction();\n         bulkAction.setType(BulkAction.Type.DELETE);\n \n-        ConnInstanceTO conn = connectorService.read(101L);\n+        ConnInstanceTO conn = connectorService.read(101L, Locale.ENGLISH.getLanguage());\n \n         conn.setKey(0);\n         conn.setDisplayName(\"forBulk1\");\n@@ -703,22 +705,22 @@ public void bulkAction() {\n \n         Iterator<String> iter = bulkAction.getTargets().iterator();\n \n-        assertNotNull(connectorService.read(Long.valueOf(iter.next())));\n-        assertNotNull(connectorService.read(Long.valueOf(iter.next())));\n+        assertNotNull(connectorService.read(Long.valueOf(iter.next()), Locale.ENGLISH.getLanguage()));\n+        assertNotNull(connectorService.read(Long.valueOf(iter.next()), Locale.ENGLISH.getLanguage()));\n \n         connectorService.bulk(bulkAction);\n \n         iter = bulkAction.getTargets().iterator();\n \n         try {\n-            connectorService.read(Long.valueOf(iter.next()));\n+            connectorService.read(Long.valueOf(iter.next()), Locale.ENGLISH.getLanguage());\n             fail();\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n         }\n \n         try {\n-            connectorService.read(Long.valueOf(iter.next()));\n+            connectorService.read(Long.valueOf(iter.next()), Locale.ENGLISH.getLanguage());\n             fail();\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n@@ -727,13 +729,14 @@ public void bulkAction() {\n \n     @Test\n     public void issueSYNCOPE605() {\n-        ConnInstanceTO connectorInstanceTO = connectorService.read(103L);\n+        ConnInstanceTO connectorInstanceTO = connectorService.read(103L, Locale.ENGLISH.getLanguage());\n         assertTrue(connectorInstanceTO.getCapabilities().isEmpty());\n \n         connectorInstanceTO.getCapabilities().add(ConnectorCapability.SEARCH);\n         connectorService.update(connectorInstanceTO);\n \n-        ConnInstanceTO updatedCapabilities = connectorService.read(connectorInstanceTO.getKey());\n+        ConnInstanceTO updatedCapabilities = connectorService.read(\n+                connectorInstanceTO.getKey(), Locale.ENGLISH.getLanguage());\n         assertNotNull(updatedCapabilities.getCapabilities());\n         assertTrue(updatedCapabilities.getCapabilities().size() == 1);\n     }"},{"sha":"c78f47be69ea97b3d9347e90801b8bc94422d3af","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/MultitenancyITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FMultitenancyITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -26,6 +26,7 @@\n \n import java.security.AccessControlException;\n import java.util.List;\n+import java.util.Locale;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -127,7 +128,7 @@ public void createUser() {\n     @Test\n     public void createResourceAndSync() {\n         // read connector\n-        ConnInstanceTO conn = adminClient.getService(ConnectorService.class).read(100L);\n+        ConnInstanceTO conn = adminClient.getService(ConnectorService.class).read(100L, Locale.ENGLISH.getLanguage());\n         assertNotNull(conn);\n         assertEquals(\"LDAP\", conn.getDisplayName());\n "},{"sha":"a08b8815bb53fca1b0a61ebdf74a480abf771d3c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PolicyITCase.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -20,22 +20,24 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.util.Arrays;\n import java.util.List;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n-import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -116,33 +118,26 @@ public void create() {\n \n     @Test\n     public void update() {\n-        // get global password\n         PasswordPolicyTO globalPolicy = policyService.read(2L);\n \n-        PasswordPolicyTO policy = new PasswordPolicyTO();\n+        PasswordPolicyTO policy = SerializationUtils.clone(globalPolicy);\n         policy.setDescription(\"A simple password policy\");\n-        policy.setSpecification(globalPolicy.getSpecification());\n \n-        // create a new password policy using global password as a template\n+        // create a new password policy using the former as a template\n         policy = createPolicy(policy);\n+        assertNotNull(policy);\n+        assertNotEquals(2L, policy.getKey());\n \n-        // read new password policy\n-        policy = policyService.read(policy.getKey());\n-\n-        assertNotNull(\"find to update did not work\", policy);\n-\n-        PasswordPolicySpec policySpec = policy.getSpecification();\n-        policySpec.setMaxLength(22);\n-        policy.setSpecification(policySpec);\n+        ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).setMaxLength(22);\n \n         // update new password policy\n         policyService.update(policy);\n         policy = policyService.read(policy.getKey());\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n-        assertEquals(22, policy.getSpecification().getMaxLength());\n-        assertEquals(8, policy.getSpecification().getMinLength());\n+        assertEquals(22, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMaxLength());\n+        assertEquals(8, ((DefaultPasswordRuleConf) policy.getRuleConfs().get(0)).getMinLength());\n     }\n \n     @Test\n@@ -172,10 +167,10 @@ public void issueSYNCOPE553() {\n         AccountPolicyTO policy = new AccountPolicyTO();\n         policy.setDescription(\"SYNCOPE553\");\n \n-        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n-        accountPolicySpec.setMinLength(3);\n-        accountPolicySpec.setMaxLength(8);\n-        policy.setSpecification(accountPolicySpec);\n+        DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n+        ruleConf.setMinLength(3);\n+        ruleConf.setMaxLength(8);\n+        policy.getRuleConfs().add(ruleConf);\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);\n@@ -187,10 +182,10 @@ public void issueSYNCOPE682() {\n         policy.setDescription(\"SYNCOPE682\");\n         policy.getResources().add(RESOURCE_NAME_LDAP);\n \n-        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n-        accountPolicySpec.setMinLength(3);\n-        accountPolicySpec.setMaxLength(8);\n-        policy.setSpecification(accountPolicySpec);\n+        DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n+        ruleConf.setMinLength(3);\n+        ruleConf.setMaxLength(8);\n+        policy.getRuleConfs().add(ruleConf);\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);"},{"sha":"c203272bc285ce879ce3b248a56a60b5e6c4dfe6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RealmITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -31,9 +31,9 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.junit.FixMethodOrder;\n@@ -136,10 +136,10 @@ public void deletingAccountPolicy() {\n         AccountPolicyTO policy = new AccountPolicyTO();\n         policy.setDescription(\"deletingAccountPolicy\");\n \n-        final AccountPolicySpec accountPolicySpec = new AccountPolicySpec();\n-        accountPolicySpec.setMinLength(3);\n-        accountPolicySpec.setMaxLength(8);\n-        policy.setSpecification(accountPolicySpec);\n+        DefaultAccountRuleConf ruleConf = new DefaultAccountRuleConf();\n+        ruleConf.setMinLength(3);\n+        ruleConf.setMaxLength(8);\n+        policy.getRuleConfs().add(ruleConf);\n \n         policy = createPolicy(policy);\n         assertNotNull(policy);"},{"sha":"e092a1d9473905c09c7333c4b67f79bdedb9fff9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n-import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -56,9 +55,9 @@ private ReportTO createReport(final ReportTO report) {\n \n     @Test\n     public void getReportletClasses() {\n-        List<ReportletConfClass> reportletClasses = reportService.getReportletConfClasses();\n-        assertNotNull(reportletClasses);\n-        assertFalse(reportletClasses.isEmpty());\n+        List<String> reportlets = syncopeService.info().getReportlets();\n+        assertNotNull(reportlets);\n+        assertFalse(reportlets.isEmpty());\n     }\n \n     @Test"},{"sha":"f048c3f15ab92b293a149ce723198de0be6e29f1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -27,6 +27,7 @@\n \n import java.util.HashSet;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -46,7 +47,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n-import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -704,7 +705,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         userMod.setPassword(\"new-security123\");\n         StatusMod pwdPropRequest = new StatusMod();\n         pwdPropRequest.setOnSyncope(true);\n-        pwdPropRequest.getResourceNames().clear();\n+        pwdPropRequest.getResources().clear();\n         userMod.setPwdPropRequest(pwdPropRequest);\n         updateUser(userMod);\n \n@@ -723,7 +724,8 @@ public void issueSYNCOPE313LDAP() throws Exception {\n \n         // 5. Update the LDAP Connector to retrieve passwords\n         ResourceTO ldapResource = resourceService.read(RESOURCE_NAME_LDAP);\n-        ConnInstanceTO resourceConnector = connectorService.read(ldapResource.getConnector());\n+        ConnInstanceTO resourceConnector = connectorService.read(\n+                ldapResource.getConnector(), Locale.ENGLISH.getLanguage());\n         ConnConfProperty property = resourceConnector.getConfigurationMap().get(\"retrievePasswordsWithSearch\");\n         property.getValues().clear();\n         property.getValues().add(Boolean.TRUE);"},{"sha":"375f0d7233c3dbd9fd5030ae6d932e0064a4b68a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":194,"deletions":39,"changes":233,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -38,6 +38,7 @@\n import java.util.Set;\n import javax.naming.NamingException;\n import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -50,6 +51,9 @@\n import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -63,6 +67,7 @@\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -884,8 +889,8 @@ public void suspendReactivateOnResource() {\n         statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.SUSPEND);\n         statusMod.setOnSyncope(true);\n-        statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n-        statusMod.getResourceNames().add(RESOURCE_NAME_LDAP);\n+        statusMod.getResources().add(RESOURCE_NAME_TESTDB);\n+        statusMod.getResources().add(RESOURCE_NAME_LDAP);\n         userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n@@ -902,7 +907,7 @@ public void suspendReactivateOnResource() {\n         statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.SUSPEND);\n         statusMod.setOnSyncope(false);\n-        statusMod.getResourceNames().add(RESOURCE_NAME_LDAP);\n+        statusMod.getResources().add(RESOURCE_NAME_LDAP);\n         userService.status(statusMod);\n         statusMod.setType(StatusMod.ModType.REACTIVATE);\n         userTO = userService.status(statusMod).readEntity(UserTO.class);\n@@ -917,7 +922,7 @@ public void suspendReactivateOnResource() {\n         statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.REACTIVATE);\n         statusMod.setOnSyncope(true);\n-        statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        statusMod.getResources().add(RESOURCE_NAME_TESTDB);\n \n         userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertNotNull(userTO);\n@@ -1047,7 +1052,7 @@ public final void issue280() {\n \n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n-        st.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        st.getResources().add(RESOURCE_NAME_TESTDB);\n         userMod.setPwdPropRequest(st);\n \n         userTO = updateUser(userMod);\n@@ -1161,6 +1166,66 @@ public void noContent() throws IOException {\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n     }\n \n+    @Test\n+    public void customPolicyRules() {\n+        // Using custom policy rules with application/xml requires to overwrite\n+        // org.apache.syncope.common.lib.policy.AbstractAccountRuleConf's and / or\n+        // org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf's\n+        // @XmlSeeAlso - the power of JAXB :-/\n+        Assume.assumeTrue(MediaType.APPLICATION_JSON_TYPE.equals(clientFactory.getContentType().getMediaType()));\n+\n+        AccountPolicyTO accountPolicy = new AccountPolicyTO();\n+        accountPolicy.setDescription(\"Account Policy with custom rules\");\n+        accountPolicy.getRuleConfs().add(new TestAccountRuleConf());\n+        accountPolicy = createPolicy(accountPolicy);\n+        assertNotNull(accountPolicy);\n+\n+        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n+        passwordPolicy.setDescription(\"Password Policy with custom rules\");\n+        passwordPolicy.getRuleConfs().add(new TestPasswordRuleConf());\n+        passwordPolicy = createPolicy(passwordPolicy);\n+        assertNotNull(passwordPolicy);\n+\n+        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        Long oldAccountPolicy = realm.getAccountPolicy();\n+        realm.setAccountPolicy(accountPolicy.getKey());\n+        Long oldPasswordPolicy = realm.getPasswordPolicy();\n+        realm.setPasswordPolicy(passwordPolicy.getKey());\n+        realmService.update(realm);\n+\n+        try {\n+            UserTO user = getUniqueSampleTO(\"custompolicyrules@syncope.apache.org\");\n+            user.setRealm(realm.getFullPath());\n+            try {\n+                createUser(user);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n+            }\n+\n+            user.setPassword(user.getPassword() + \"XXX\");\n+            try {\n+                createUser(user);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidUsername\"));\n+            }\n+\n+            user.setUsername(\"YYY\" + user.getUsername());\n+            user = createUser(user);\n+            assertNotNull(user);\n+        } finally {\n+            realm.setAccountPolicy(oldAccountPolicy);\n+            realm.setPasswordPolicy(oldPasswordPolicy);\n+            realmService.update(realm);\n+\n+            policyService.delete(passwordPolicy.getKey());\n+            policyService.delete(accountPolicy.getKey());\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE108() {\n         UserTO userTO = getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n@@ -1394,7 +1459,7 @@ public void issueSYNCOPE122() {\n         userMod.setPassword(getUUIDString());\n         StatusMod pwdPropRequest = new StatusMod();\n         pwdPropRequest.setOnSyncope(false);\n-        pwdPropRequest.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        pwdPropRequest.getResources().add(RESOURCE_NAME_TESTDB);\n         userMod.setPwdPropRequest(pwdPropRequest);\n \n         userTO = updateUser(userMod);\n@@ -1434,38 +1499,40 @@ public void isseSYNCOPE136AES() {\n         pwdCipherAlgo.getValues().set(0, \"AES\");\n         configurationService.set(pwdCipherAlgo);\n \n-        // 3. create user with no resources\n-        UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n-        userTO.getResources().clear();\n-\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-\n-        // 4. update user, assign a propagation primary resource but don't provide any password\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+        try {\n+            // 3. create user with no resources\n+            UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n+            userTO.getResources().clear();\n \n-        final StatusMod st = new StatusMod();\n-        st.setOnSyncope(false);\n-        st.getResourceNames().add(RESOURCE_NAME_WS1);\n-        userMod.setPwdPropRequest(st);\n+            userTO = createUser(userTO);\n+            assertNotNull(userTO);\n \n-        userTO = updateUser(userMod);\n-        assertNotNull(userTO);\n+            // 4. update user, assign a propagation primary resource but don't provide any password\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(userTO.getKey());\n+            userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n \n-        // 5. verify that propagation was successful\n-        List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n-        assertNotNull(props);\n-        assertEquals(1, props.size());\n-        PropagationStatus prop = props.iterator().next();\n-        assertNotNull(prop);\n-        assertEquals(RESOURCE_NAME_WS1, prop.getResource());\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED, prop.getStatus());\n+            StatusMod st = new StatusMod();\n+            st.setOnSyncope(false);\n+            st.getResources().add(RESOURCE_NAME_WS1);\n+            userMod.setPwdPropRequest(st);\n \n-        // 6. restore initial cipher algorithm\n-        pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n-        configurationService.set(pwdCipherAlgo);\n+            userTO = updateUser(userMod);\n+            assertNotNull(userTO);\n+\n+            // 5. verify that propagation was successful\n+            List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+            assertNotNull(props);\n+            assertEquals(1, props.size());\n+            PropagationStatus prop = props.iterator().next();\n+            assertNotNull(prop);\n+            assertEquals(RESOURCE_NAME_WS1, prop.getResource());\n+            assertEquals(PropagationTaskExecStatus.SUBMITTED, prop.getStatus());\n+        } finally {\n+            // restore initial cipher algorithm\n+            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n+            configurationService.set(pwdCipherAlgo);\n+        }\n     }\n \n     @Test\n@@ -1481,9 +1548,9 @@ public void isseSYNCOPE136Random() {\n         userMod.setKey(userTO.getKey());\n         userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n \n-        final StatusMod st = new StatusMod();\n+        StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n-        st.getResourceNames().add(RESOURCE_NAME_LDAP);\n+        st.getResources().add(RESOURCE_NAME_LDAP);\n         userMod.setPwdPropRequest(st);\n \n         userTO = updateUser(userMod);\n@@ -1698,7 +1765,7 @@ public void issueSYNCOPE383() {\n         userMod.setKey(userTO.getKey());\n         userMod.setPassword(getUUIDString() + \"abbcbcbddd123\");\n         StatusMod pwdPropRequest = new StatusMod();\n-        pwdPropRequest.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        pwdPropRequest.getResources().add(RESOURCE_NAME_TESTDB);\n         userMod.setPwdPropRequest(pwdPropRequest);\n \n         userTO = updateUser(userMod);\n@@ -2208,7 +2275,7 @@ public void issueSYNCOPE505DB() throws Exception {\n \n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n-        st.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        st.getResources().add(RESOURCE_NAME_TESTDB);\n         userMod.setPwdPropRequest(st);\n \n         user = updateUser(userMod);\n@@ -2251,7 +2318,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n \n         final StatusMod st = new StatusMod();\n         st.setOnSyncope(false);\n-        st.getResourceNames().add(RESOURCE_NAME_LDAP);\n+        st.getResources().add(RESOURCE_NAME_LDAP);\n         userMod.setPwdPropRequest(st);\n \n         user = updateUser(userMod);\n@@ -2418,4 +2485,92 @@ public void issueSYNCOPE647() {\n         assertNotNull(connObjectTO);\n         assertEquals(\"newPostalAddress\", connObjectTO.getPlainAttrMap().get(\"postalAddress\").getValues().get(0));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE626() {\n+        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n+        passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n+\n+        DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n+        ruleConf.setUsernameAllowed(false);\n+        passwordPolicy.getRuleConfs().add(ruleConf);\n+\n+        passwordPolicy = createPolicy(passwordPolicy);\n+        assertNotNull(passwordPolicy);\n+\n+        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        Long oldPasswordPolicy = realm.getPasswordPolicy();\n+        realm.setPasswordPolicy(passwordPolicy.getKey());\n+        realmService.update(realm);\n+\n+        try {\n+            UserTO user = getUniqueSampleTO(\"syncope626@syncope.apache.org\");\n+            user.setRealm(realm.getFullPath());\n+            user.setPassword(user.getUsername());\n+            try {\n+                createUser(user);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n+            }\n+\n+            user.setPassword(\"password123\");\n+            user = createUser(user);\n+            assertNotNull(user);\n+        } finally {\n+            realm.setPasswordPolicy(oldPasswordPolicy);\n+            realmService.update(realm);\n+\n+            policyService.delete(passwordPolicy.getKey());\n+        }\n+\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE686() {\n+        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n+        AttrTO pwdCipherAlgo = configurationService.get(\"password.cipher.algorithm\");\n+        String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n+\n+        // 2. set AES password cipher algorithm\n+        pwdCipherAlgo.getValues().set(0, \"AES\");\n+        configurationService.set(pwdCipherAlgo);\n+\n+        try {\n+            // 3. create group with LDAP resource assigned\n+            GroupTO group = GroupITCase.getBasicSampleTO(\"syncope686\");\n+            group.getResources().add(RESOURCE_NAME_LDAP);\n+            group = createGroup(group);\n+            assertNotNull(group);\n+\n+            // 4. create user with no resources\n+            UserTO userTO = getUniqueSampleTO(\"syncope686@apache.org\");\n+            userTO.getResources().clear();\n+\n+            userTO = createUser(userTO);\n+            assertNotNull(userTO);\n+\n+            // 5. update user with the new group, and don't provide any password\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(userTO.getKey());\n+            userMod.getMembershipsToAdd().add(group.getKey());\n+\n+            userTO = updateUser(userMod);\n+            assertNotNull(userTO);\n+\n+            // 5. verify that propagation was successful\n+            List<PropagationStatus> props = userTO.getPropagationStatusTOs();\n+            assertNotNull(props);\n+            assertEquals(1, props.size());\n+            PropagationStatus prop = props.iterator().next();\n+            assertNotNull(prop);\n+            assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+        } finally {\n+            // restore initial cipher algorithm\n+            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n+            configurationService.set(pwdCipherAlgo);\n+        }\n+    }\n }"},{"sha":"78eb504c329b0503c0af2809f41da7141cfb2e8b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -178,7 +178,7 @@ public void updateWithApproval() {\n         userMod.setPassword(\"newPassword123\");\n         StatusMod statusMod = new StatusMod();\n         statusMod.setOnSyncope(false);\n-        statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n+        statusMod.getResources().add(RESOURCE_NAME_TESTDB);\n         userMod.setPwdPropRequest(statusMod);\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");"},{"sha":"cb166a9fbabea3d1da3874badd23218099c2a5c1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -24,6 +24,7 @@\n import static org.junit.Assert.assertTrue;\n \n import java.util.Collections;\n+import java.util.Locale;\n import java.util.Map;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.mod.AttrMod;\n@@ -328,7 +329,7 @@ public void issueSYNCOPE397() {\n             // check Syncope change password\n             StatusMod pwdPropRequest = new StatusMod();\n             pwdPropRequest.setOnSyncope(true);\n-            pwdPropRequest.getResourceNames().add(RESOURCE_NAME_WS2);\n+            pwdPropRequest.getResources().add(RESOURCE_NAME_WS2);\n             userMod.setPwdPropRequest(pwdPropRequest);\n \n             toBeUpdated = updateUser(userMod);\n@@ -369,16 +370,17 @@ public void issueSYNCOPE442() {\n         // 3. force cache expiring without any modification\n         // ----------------------------------------\n         String jdbcURL = null;\n-        ConnInstanceTO connInstanceBean = connectorService.readByResource(RESOURCE_NAME_DBVIRATTR);\n-        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+        ConnInstanceTO connInstanceTO = connectorService.readByResource(\n+                RESOURCE_NAME_DBVIRATTR, Locale.ENGLISH.getLanguage());\n+        for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n             if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n                 jdbcURL = prop.getValues().iterator().next().toString();\n                 prop.getValues().clear();\n                 prop.getValues().add(\"jdbc:h2:tcp://localhost:9092/xxx\");\n             }\n         }\n \n-        connectorService.update(connInstanceBean);\n+        connectorService.update(connInstanceTO);\n \n         UserMod userMod = new UserMod();\n         userMod.setKey(actual.getKey());\n@@ -416,14 +418,14 @@ public void issueSYNCOPE442() {\n         // ----------------------------------------\n         // 5. restore connector\n         // ----------------------------------------\n-        for (ConnConfProperty prop : connInstanceBean.getConfiguration()) {\n+        for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n             if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n                 prop.getValues().clear();\n                 prop.getValues().add(jdbcURL);\n             }\n         }\n \n-        connectorService.update(connInstanceBean);\n+        connectorService.update(connInstanceTO);\n         // ----------------------------------------\n \n         actual = userService.read(actual.getKey());\n@@ -592,7 +594,7 @@ public void issueSYNCOPE501() {\n         userMod.setKey(userTO.getKey());\n \n         final StatusMod statusMod = new StatusMod();\n-        statusMod.getResourceNames().addAll(Collections.<String>emptySet());\n+        statusMod.getResources().addAll(Collections.<String>emptySet());\n         statusMod.setOnSyncope(false);\n \n         userMod.setPwdPropRequest(statusMod);"},{"sha":"52c10f92aaa76e405db3e95a70d55ea4cd61ef7a","filename":"fit/core-reference/src/test/resources/scriptedsql/CreateScript.groovy","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FCreateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FCreateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FCreateScript.groovy?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"fit/core-reference/src/main/resources/scriptedsql/CreateScript.groovy"},{"sha":"cdd7f5b28ac16dbeeddb43679199bc425ac2c7d4","filename":"fit/core-reference/src/test/resources/scriptedsql/DeleteScript.groovy","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FDeleteScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FDeleteScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FDeleteScript.groovy?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"fit/core-reference/src/main/resources/scriptedsql/DeleteScript.groovy"},{"sha":"50f8a8a1a55e8f7824f5f5cf8b1d457c4c44c1fa","filename":"fit/core-reference/src/test/resources/scriptedsql/SchemaScript.groovy","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSchemaScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSchemaScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSchemaScript.groovy?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"fit/core-reference/src/main/resources/scriptedsql/SchemaScript.groovy"},{"sha":"cc0dd658d184a189fbe1ccb31ef319fe4d611a94","filename":"fit/core-reference/src/test/resources/scriptedsql/SearchScript.groovy","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSearchScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSearchScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSearchScript.groovy?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"fit/core-reference/src/main/resources/scriptedsql/SearchScript.groovy"},{"sha":"6060870b3eb7dea83b1a297606f757df32c9ccae","filename":"fit/core-reference/src/test/resources/scriptedsql/SyncScript.groovy","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSyncScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSyncScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FSyncScript.groovy?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"fit/core-reference/src/main/resources/scriptedsql/SyncScript.groovy"},{"sha":"5b8f4b5ff0532d6171cef905ba447667ecffc619","filename":"fit/core-reference/src/test/resources/scriptedsql/TestScript.groovy","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FTestScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FTestScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FTestScript.groovy?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"fit/core-reference/src/main/resources/scriptedsql/TestScript.groovy"},{"sha":"f3155cb245217e0e16f3a6d2bbf7575d51e585bc","filename":"fit/core-reference/src/test/resources/scriptedsql/UpdateScript.groovy","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","previous_filename":"fit/core-reference/src/main/resources/scriptedsql/UpdateScript.groovy"},{"sha":"adc785d37ee8daa54e0c106d7d1572725707f474","filename":"pom.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -321,14 +321,14 @@ under the License.\n \n     <connid.version>1.4.1.0</connid.version>\n     <connid.soap.version>1.3.0</connid.soap.version>\n-    <connid.database.version>2.2.2</connid.database.version>\n+    <connid.database.version>2.2.3-SNAPSHOT</connid.database.version>\n     <connid.csvdir.version>0.8.2</connid.csvdir.version>\n     <connid.ldap.version>1.4.0</connid.ldap.version>\n     <connid.ad.version>1.2.3</connid.ad.version>\n \n     <cxf.version>3.1.2</cxf.version>\n \n-    <camel.version>2.15.2</camel.version>\t\n+    <camel.version>2.15.3</camel.version>\t\n \n     <jackson.version>2.6.1</jackson.version>\n \n@@ -378,8 +378,8 @@ under the License.\n     <bootstrap-select.version>1.6.3</bootstrap-select.version>\n     <font-awesome.version>4.4.0</font-awesome.version>\n     <ionicons.version>2.0.1</ionicons.version>\n-    <highlightjs.version>8.4-4</highlightjs.version>\n-    <codemirror.version>5.5</codemirror.version>\n+    <highlightjs.version>8.7</highlightjs.version>\n+    <codemirror.version>5.6</codemirror.version>\n     <jsplumb.version>1.7.5</jsplumb.version>\n     \n     <wicket.version>7.0.0</wicket.version>\n@@ -408,7 +408,7 @@ under the License.\n     <cargo.log>${log.directory}/cargo.log</cargo.log>\n     <cargo.output>${log.directory}/cargo-output.log</cargo.output>\n \n-    <tomcat.version>8.0.24</tomcat.version>\n+    <tomcat.version>8.0.26</tomcat.version>\n \n     <anonymousUser>anonymous</anonymousUser>\n     <!-- static keys, only used for build: generated overlays will override during archetype:generate -->"},{"sha":"a23b81058e9b01769bc8a26777bc4d464773149e","filename":"standalone/pom.xml","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/standalone%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/standalone%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/standalone%2Fpom.xml?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -36,6 +36,7 @@ under the License.\n   <properties>\n     <rootpom.basedir>${basedir}/..</rootpom.basedir>\n \n+    <conf.directory>${CATALINA_HOME}/webapps/syncope/WEB-INF/classes</conf.directory>\n     <connid.location>connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}</connid.location>\n     <log.directory>./logs</log.directory>\n     <test.csvdir.path>./test-csvdir</test.csvdir.path>\n@@ -94,7 +95,7 @@ under the License.\n             <transformationSet>\n               <dir>${project.build.directory}/classes/core</dir>\n               <includes>\n-                <include>content.xml</include>\n+                <include>domains/MasterContent.xml</include>\n               </includes>\n               <outputDir>${project.build.directory}/classes/core</outputDir>\n               <stylesheet>${basedir}/../fit/core-reference/src/test/resources/addActivitiToContent.xsl</stylesheet>\n@@ -214,14 +215,18 @@ under the License.\n \n     <resources>\n       <resource>\n-        <directory>../core/persistence-jpa/src/test/resources</directory>\n+        <directory>../core/persistence-jpa/src/main/resources</directory>\n         <includes>\n-          <include>content.xml</include>\n           <include>persistence.properties</include>\n         </includes>\n         <targetPath>core</targetPath>\n         <filtering>true</filtering>\n       </resource>\n+      <resource>\n+        <directory>../core/persistence-jpa/src/test/resources/domains</directory>\n+        <targetPath>core/domains</targetPath>\n+        <filtering>true</filtering>\n+      </resource>\n       <resource>\n         <directory>../fit/core-reference/src/main/resources</directory>\n         <includes>\n@@ -240,6 +245,11 @@ under the License.\n         <targetPath>core</targetPath>\n         <filtering>true</filtering>\n       </resource>\n+      <resource>\n+        <directory>../fit/core-reference/src/test/resources/scriptedsql</directory>\n+        <targetPath>core/scriptedsql</targetPath>\n+        <filtering>true</filtering>\n+      </resource>\n \n       <resource>\n         <directory>../fit/console-reference/src/main/resources</directory>"},{"sha":"9dc2c6719ef279dc84a13177df833d4b5d18a86b","filename":"standalone/src/main/resources/setenv.bat","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/standalone%2Fsrc%2Fmain%2Fresources%2Fsetenv.bat","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/standalone%2Fsrc%2Fmain%2Fresources%2Fsetenv.bat","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/standalone%2Fsrc%2Fmain%2Fresources%2Fsetenv.bat?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -13,4 +13,4 @@\n # See the License for the specific language governing permissions and\r\n # limitations under the License.\r\n \r\n-set JAVA_OPTS=-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms2048m -Xmx2048m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\r\n+set JAVA_OPTS=-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms2048m -Xmx2048m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC -DCATALINA_HOME=%CATALINA_HOME%\r"},{"sha":"fbc725b2ad9f4dd0d279baa9ef7bfc7fe004e851","filename":"standalone/src/main/resources/setenv.sh","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/standalone%2Fsrc%2Fmain%2Fresources%2Fsetenv.sh","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9437d37a38d0f185289b1c61d2d79c5ce8edaaa/standalone%2Fsrc%2Fmain%2Fresources%2Fsetenv.sh","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/standalone%2Fsrc%2Fmain%2Fresources%2Fsetenv.sh?ref=d9437d37a38d0f185289b1c61d2d79c5ce8edaaa","patch":"@@ -13,4 +13,4 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n-JAVA_OPTS=\"-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms2048m -Xmx2048m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"\n+JAVA_OPTS=\"-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms2048m -Xmx2048m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC -DCATALINA_HOME=$CATALINA_HOME\""}]}