{"sha":"12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEyZWY2ZjUwNDFlMzNkNTA1ZTEwYzdmNWQ3YjU2YjhjNWZmM2I2N2Y=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-08-08T09:06:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-08-08T09:06:44Z"},"message":"White noise: turning off yellow warnings in Netbeans","tree":{"sha":"78a3b234b067316216f334d2798970ce3aa4a1dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/78a3b234b067316216f334d2798970ce3aa4a1dd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7e886de794776e72a465830c85e73d465585fdda","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7e886de794776e72a465830c85e73d465585fdda","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7e886de794776e72a465830c85e73d465585fdda"}],"stats":{"total":698,"additions":384,"deletions":314},"files":[{"sha":"7c82c947622ba3d1a0fec3b090d21a40b4b4cac4","filename":"ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,23 +1,23 @@\n-package org.apache.syncope.common.lib.to;\n-\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n+ * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n+ * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n+ * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+package org.apache.syncope.common.lib.to;\n+\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;"},{"sha":"b8a118a0ba2e75c692ad7a896b16d0200bc3b5ff","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateComponent.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateComponent.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.component;\n \n@@ -30,13 +32,13 @@\n import org.springframework.beans.factory.annotation.Autowired;\n \n public class PropagateComponent extends UriEndpointComponent {\n-    \n+\n     @Autowired\n     protected PropagationManager propagationManager;\n \n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n-    \n+\n     @Autowired\n     protected UserDAO userDAO;\n \n@@ -57,7 +59,7 @@ public PropagateComponent() {\n     }\n \n     protected Endpoint createEndpoint(final String uri, final String remaining,\n-                                      final Map<String, Object> parameters) throws Exception {\n+            final Map<String, Object> parameters) throws Exception {\n         PropagateType type = PropagateType.valueOf(remaining);\n         PropagateEndpoint endpoint = new PropagateEndpoint(uri, this);\n         endpoint.setPropagateType(type);"},{"sha":"5936430dbc0f12ea93aa5231e3e31b9a6a92d361","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateEndpoint.java","status":"modified","additions":49,"deletions":33,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateEndpoint.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.component;\n \n@@ -46,12 +48,13 @@\n @UriEndpoint(scheme = \"propagate\", title = \"propagate\", syntax = \"propagate:propagateType\", producerOnly = true)\n public class PropagateEndpoint extends DefaultEndpoint {\n \n-    @UriPath @Metadata(required = \"true\")\n+    @UriPath\n+    @Metadata(required = \"true\")\n     private PropagateType propagateType;\n \n     @UriParam\n     private AnyTypeKind anyTypeKind;\n-    \n+\n     @UriParam\n     private boolean pull;\n \n@@ -66,8 +69,8 @@ public class PropagateEndpoint extends DefaultEndpoint {\n     private AnyObjectDAO anyObjectDAO;\n \n     private GroupDataBinder groupDataBinder;\n-    \n-    private  UserWorkflowAdapter uwfAdapter;\n+\n+    private UserWorkflowAdapter uwfAdapter;\n \n     public PropagateEndpoint(final String endpointUri, final Component component) {\n         super(endpointUri, component);\n@@ -76,22 +79,35 @@ public PropagateEndpoint(final String endpointUri, final Component component) {\n     @Override\n     public Producer createProducer() throws Exception {\n         AbstractProducer producer = null;\n-        if (PropagateType.create == propagateType) {\n-            producer = new CreateProducer(this, anyTypeKind);\n-        } else if (PropagateType.update == propagateType) {\n-            producer = new UpdateProducer(this, anyTypeKind);\n-        } else if (PropagateType.delete == propagateType) {\n-            producer = new DeleteProducer(this, anyTypeKind, userDAO, groupDataBinder);\n-        } else if (PropagateType.provision == propagateType) {\n-            producer = new ProvisionProducer(this, anyTypeKind);\n-        } else if (PropagateType.deprovision == propagateType) {\n-            producer = new DeprovisionProducer(this, anyTypeKind, userDAO, groupDAO, anyObjectDAO);\n-        } else if (PropagateType.status == propagateType) {\n-            producer = new StatusProducer(this, anyTypeKind, userDAO, uwfAdapter);\n-        } else if (PropagateType.suspend == propagateType) {\n-            producer = new SuspendProducer(this, anyTypeKind);\n-        } else if (PropagateType.confirmPasswordReset == propagateType) {\n-            producer = new ConfirmPasswordResetProducer(this, anyTypeKind);\n+        if (null != propagateType) {\n+            switch (propagateType) {\n+                case create:\n+                    producer = new CreateProducer(this, anyTypeKind);\n+                    break;\n+                case update:\n+                    producer = new UpdateProducer(this, anyTypeKind);\n+                    break;\n+                case delete:\n+                    producer = new DeleteProducer(this, anyTypeKind, userDAO, groupDataBinder);\n+                    break;\n+                case provision:\n+                    producer = new ProvisionProducer(this, anyTypeKind);\n+                    break;\n+                case deprovision:\n+                    producer = new DeprovisionProducer(this, anyTypeKind, userDAO, groupDAO, anyObjectDAO);\n+                    break;\n+                case status:\n+                    producer = new StatusProducer(this, anyTypeKind, userDAO, uwfAdapter);\n+                    break;\n+                case suspend:\n+                    producer = new SuspendProducer(this, anyTypeKind);\n+                    break;\n+                case confirmPasswordReset:\n+                    producer = new ConfirmPasswordResetProducer(this, anyTypeKind);\n+                    break;\n+                default:\n+                    break;\n+            }\n         }\n \n         if (producer != null) {"},{"sha":"5e2e8ef9a562566ad9956a8ee359bfe3158c9967","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/component/PropagateType.java","status":"modified","additions":23,"deletions":14,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fcomponent%2FPropagateType.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,23 +1,32 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.component;\n \n public enum PropagateType {\n \n-    create, update, delete, provision, deprovision, status, suspend, confirmPasswordReset\n+    create,\n+    update,\n+    delete,\n+    provision,\n+    deprovision,\n+    status,\n+    suspend,\n+    confirmPasswordReset\n \n }"},{"sha":"a8b13e464beafacfc63337fa4898ad89339e9cc9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/AbstractProducer.java","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FAbstractProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -24,12 +26,12 @@\n \n public abstract class AbstractProducer extends DefaultProducer {\n \n+    private final AnyTypeKind anyTypeKind;\n+\n     private PropagationManager propagationManager;\n \n     private PropagationTaskExecutor taskExecutor;\n \n-    private AnyTypeKind anyTypeKind;\n-    \n     private boolean pull;\n \n     public AbstractProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {"},{"sha":"b84d9db529e07507d639956f66b0e34001a9e56d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"modified","additions":16,"deletions":14,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -37,7 +39,7 @@ public ConfirmPasswordResetProducer(final Endpoint endpoint, final AnyTypeKind a\n     public void process(final Exchange exchange) throws Exception {\n         if (getAnyTypeKind() == AnyTypeKind.USER) {\n             WorkflowResult<Pair<UserPatch, Boolean>> updated =\n-                (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n+                    (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n             List<PropagationTask> tasks = getPropagationManager().getUserUpdateTasks(updated);\n "},{"sha":"54ff11b953b8b8025e336b4a50f89f0a8ff788eb","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":20,"deletions":18,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -60,8 +62,8 @@ public void process(final Exchange exchange) throws Exception {\n                         created.getPropByRes(),\n                         ((UserTO) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter propagationReporter = \n-                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                PropagationReporter propagationReporter =\n+                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(\n                         new ImmutablePair<>(created.getResult().getKey(), propagationReporter.getStatuses()));\n@@ -72,7 +74,7 @@ public void process(final Exchange exchange) throws Exception {\n                 if (actual instanceof AnyObjectTO) {\n                     anyTypeKind = AnyTypeKind.ANY_OBJECT;\n                 }\n-                \n+\n                 if (actual instanceof GroupTO && isPull()) {\n                     Map<String, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n                     AttrTO groupOwner = ((GroupTO) actual).getPlainAttrMap().get(StringUtils.EMPTY);\n@@ -97,10 +99,10 @@ public void process(final Exchange exchange) throws Exception {\n                             ((AnyTO) actual).getVirAttrs(),\n                             excludedResources);\n                     PropagationReporter propagationReporter =\n-                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                            getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                     exchange.getOut().setBody(new ImmutablePair<>(created.getResult(),\n-                        propagationReporter.getStatuses()));\n+                            propagationReporter.getStatuses()));\n                 }\n             }\n         }"},{"sha":"7ced13de74168aa8704e854e46735e4a2698e3e3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":88,"deletions":77,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -33,11 +35,16 @@\n \n public class DeleteProducer extends AbstractProducer {\n \n-    private UserDAO userDAO;\n-    private GroupDataBinder groupDataBinder;\n+    private final UserDAO userDAO;\n+\n+    private final GroupDataBinder groupDataBinder;\n+\n+    public DeleteProducer(\n+            final Endpoint endpoint,\n+            final AnyTypeKind anyTypeKind,\n+            final UserDAO userDao,\n+            final GroupDataBinder groupDataBinder) {\n \n-    public DeleteProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind, final UserDAO userDao,\n-                          final GroupDataBinder groupDataBinder) {\n         super(endpoint, anyTypeKind);\n         this.userDAO = userDao;\n         this.groupDataBinder = groupDataBinder;\n@@ -50,67 +57,71 @@ public void process(final Exchange exchange) throws Exception {\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n         Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n-        if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            PropagationByResource propByRes = new PropagationByResource();\n-            propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(key));\n-\n-            // Note here that we can only notify about \"delete\", not any other\n-            // task defined in workflow process definition: this because this\n-            // information could only be available after uwfAdapter.delete(), which\n-            // will also effectively remove user from db, thus making virtually\n-            // impossible by NotificationManager to fetch required user information\n-            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n-                    AnyTypeKind.USER,\n-                    key,\n-                    propByRes,\n-                    excludedResources);\n-\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n-\n-            exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n-        } else if (getAnyTypeKind() == AnyTypeKind.GROUP) {\n-            List<PropagationTask> tasks = new ArrayList<>();\n-\n-            // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n-            // because of the reason being deleted (see SYNCOPE-357)\n-            for (Map.Entry<String, PropagationByResource> entry\n-                    : groupDataBinder.findUsersWithTransitiveResources(key).entrySet()) {\n-\n-                tasks.addAll(getPropagationManager().getDeleteTasks(\n-                        AnyTypeKind.USER,\n-                        entry.getKey(),\n-                        entry.getValue(),\n-                        excludedResources));\n+        if (null != getAnyTypeKind()) {\n+            List<PropagationTask> tasks;\n+            PropagationReporter propagationReporter;\n+            switch (getAnyTypeKind()) {\n+                case USER:\n+                    PropagationByResource propByRes = new PropagationByResource();\n+                    propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(key));\n+                    // Note here that we can only notify about \"delete\", not any other\n+                    // task defined in workflow process definition: this because this\n+                    // information could only be available after uwfAdapter.delete(), which\n+                    // will also effectively remove user from db, thus making virtually\n+                    // impossible by NotificationManager to fetch required user information\n+                    tasks = getPropagationManager().getDeleteTasks(\n+                            AnyTypeKind.USER,\n+                            key,\n+                            propByRes,\n+                            excludedResources);\n+                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+                    break;\n+\n+                case GROUP:\n+                    tasks = new ArrayList<>();\n+                    // Generate propagation tasks for deleting users from group resources, if they are on those\n+                    // resources only because of the reason being deleted (see SYNCOPE-357)\n+                    for (Map.Entry<String, PropagationByResource> entry\n+                            : groupDataBinder.findUsersWithTransitiveResources(key).entrySet()) {\n+\n+                        tasks.addAll(getPropagationManager().getDeleteTasks(\n+                                AnyTypeKind.USER,\n+                                entry.getKey(),\n+                                entry.getValue(),\n+                                excludedResources));\n+                    }\n+                    for (Map.Entry<String, PropagationByResource> entry\n+                            : groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n+\n+                        tasks.addAll(getPropagationManager().getDeleteTasks(\n+                                AnyTypeKind.ANY_OBJECT,\n+                                entry.getKey(),\n+                                entry.getValue(),\n+                                excludedResources));\n+                    }       // Generate propagation tasks for deleting this group from resources\n+                    tasks.addAll(getPropagationManager().getDeleteTasks(\n+                            AnyTypeKind.GROUP,\n+                            key,\n+                            null,\n+                            null));\n+                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+                    break;\n+\n+                case ANY_OBJECT:\n+                    tasks = getPropagationManager().getDeleteTasks(\n+                            AnyTypeKind.ANY_OBJECT,\n+                            key,\n+                            null,\n+                            excludedResources);\n+                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+                    break;\n+\n+                default:\n+                    break;\n             }\n-            for (Map.Entry<String, PropagationByResource> entry\n-                    : groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n-\n-                tasks.addAll(getPropagationManager().getDeleteTasks(\n-                        AnyTypeKind.ANY_OBJECT,\n-                        entry.getKey(),\n-                        entry.getValue(),\n-                        excludedResources));\n-            }\n-\n-            // Generate propagation tasks for deleting this group from resources\n-            tasks.addAll(getPropagationManager().getDeleteTasks(\n-                    AnyTypeKind.GROUP,\n-                    key,\n-                    null,\n-                    null));\n-\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n-\n-            exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n-        } else if (getAnyTypeKind() == AnyTypeKind.ANY_OBJECT) {\n-            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n-                    AnyTypeKind.ANY_OBJECT,\n-                    key,\n-                    null,\n-                    excludedResources);\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n-\n-            exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n         }\n     }\n "},{"sha":"b5d5d047de7c81f8f5be260fb18ad5c377a902f7","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":65,"deletions":51,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -31,13 +33,20 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n \n public class DeprovisionProducer extends AbstractProducer {\n-    \n-    private UserDAO userDAO;\n-    private GroupDAO groupDAO;\n-    private AnyObjectDAO anyObjectDAO;\n \n-    public DeprovisionProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind, final UserDAO userDAO,\n-                               final GroupDAO groupDAO, final AnyObjectDAO anyObjectDAO) {\n+    private final UserDAO userDAO;\n+\n+    private final GroupDAO groupDAO;\n+\n+    private final AnyObjectDAO anyObjectDAO;\n+\n+    public DeprovisionProducer(\n+            final Endpoint endpoint,\n+            final AnyTypeKind anyTypeKind,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO) {\n+\n         super(endpoint, anyTypeKind);\n         this.userDAO = userDAO;\n         this.groupDAO = groupDAO;\n@@ -50,43 +59,48 @@ public void process(final Exchange exchange) throws Exception {\n         String key = exchange.getIn().getBody(String.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n         Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-        \n-        if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            PropagationByResource propByRes = new PropagationByResource();\n-            propByRes.set(ResourceOperation.DELETE, resources);\n-\n-            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n-                    AnyTypeKind.USER,\n-                    key,\n-                    propByRes,\n-                    CollectionUtils.removeAll(userDAO.findAllResourceNames(key), resources));\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n-            exchange.getOut().setBody(propagationReporter.getStatuses());\n-        } else if (getAnyTypeKind() == AnyTypeKind.GROUP) {\n+        if (null != getAnyTypeKind()) {\n             PropagationByResource propByRes = new PropagationByResource();\n-            propByRes.addAll(ResourceOperation.DELETE, resources);\n+            List<PropagationTask> tasks;\n+            PropagationReporter propagationReporter;\n+            switch (getAnyTypeKind()) {\n+                case USER:\n+                    propByRes.set(ResourceOperation.DELETE, resources);\n+                    tasks = getPropagationManager().getDeleteTasks(\n+                            AnyTypeKind.USER,\n+                            key,\n+                            propByRes,\n+                            CollectionUtils.removeAll(userDAO.findAllResourceNames(key), resources));\n+                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    exchange.getOut().setBody(propagationReporter.getStatuses());\n+                    break;\n \n-            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n-                    AnyTypeKind.GROUP,\n-                    key,\n-                    propByRes,\n-                    CollectionUtils.removeAll(groupDAO.authFind(key).getResourceKeys(), resources));\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n-\n-            exchange.getOut().setBody(propagationReporter.getStatuses());\n-        } else if (getAnyTypeKind() == AnyTypeKind.ANY_OBJECT) {\n-            PropagationByResource propByRes = new PropagationByResource();\n-            propByRes.addAll(ResourceOperation.DELETE, resources);\n+                case GROUP:\n+                    propByRes.addAll(ResourceOperation.DELETE, resources);\n+                    tasks = getPropagationManager().getDeleteTasks(\n+                            AnyTypeKind.GROUP,\n+                            key,\n+                            propByRes,\n+                            CollectionUtils.removeAll(groupDAO.authFind(key).getResourceKeys(), resources));\n+                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    exchange.getOut().setBody(propagationReporter.getStatuses());\n+                    break;\n \n-            List<PropagationTask> tasks = getPropagationManager().getDeleteTasks(\n-                    AnyTypeKind.ANY_OBJECT,\n-                    key,\n-                    propByRes,\n-                    CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(key), resources));\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                case ANY_OBJECT:\n+                    propByRes.addAll(ResourceOperation.DELETE, resources);\n+                    tasks = getPropagationManager().getDeleteTasks(\n+                            AnyTypeKind.ANY_OBJECT,\n+                            key,\n+                            propByRes,\n+                            CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(key), resources));\n+                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    exchange.getOut().setBody(propagationReporter.getStatuses());\n+                    break;\n \n-            exchange.getOut().setBody(propagationReporter.getStatuses());\n+                default:\n+                    break;\n+            }\n         }\n     }\n "},{"sha":"182a45961a8f94a6114d9454cfe18f590d2ac1db","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -47,15 +49,15 @@ public void process(final Exchange exchange) throws Exception {\n         String key = exchange.getIn().getBody(String.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n         Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n-        \n+\n         if (getAnyTypeKind() == AnyTypeKind.USER) {\n             Boolean changePwd = exchange.getProperty(\"changePwd\", Boolean.class);\n             String password = exchange.getProperty(\"password\", String.class);\n \n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(key);\n-            userPatch.getResources().addAll(CollectionUtils.collect(resources, \n-                                                                    new Transformer<String, StringPatchItem>() {\n+            userPatch.getResources().addAll(CollectionUtils.collect(resources,\n+                    new Transformer<String, StringPatchItem>() {\n \n                 @Override\n                 public StringPatchItem transform(final String resource) {"},{"sha":"45f62e64a37a114dc2263e2606ac816f7c1aecf7","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"modified","additions":27,"deletions":20,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -38,11 +40,16 @@\n \n public class StatusProducer extends AbstractProducer {\n \n-    private UserDAO userDAO;\n-    private UserWorkflowAdapter uwfAdapter;\n-    \n-    public StatusProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind, final UserDAO userDAO,\n-                          final UserWorkflowAdapter uwfAdapter) {\n+    private final UserDAO userDAO;\n+\n+    private final UserWorkflowAdapter uwfAdapter;\n+\n+    public StatusProducer(\n+            final Endpoint endpoint,\n+            final AnyTypeKind anyTypeKind,\n+            final UserDAO userDAO,\n+            final UserWorkflowAdapter uwfAdapter) {\n+\n         super(endpoint, anyTypeKind);\n         this.userDAO = userDAO;\n         this.uwfAdapter = uwfAdapter;\n@@ -52,8 +59,8 @@ public StatusProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind, fi\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n         if (getAnyTypeKind() == AnyTypeKind.USER && isPull()) {\n-            WorkflowResult<Map.Entry<UserPatch, Boolean>> updated = \n-                (WorkflowResult<Entry<UserPatch, Boolean>>) exchange.getIn().getBody();\n+            WorkflowResult<Map.Entry<UserPatch, Boolean>> updated =\n+                    (WorkflowResult<Entry<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n             Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n             String key = exchange.getProperty(\"key\", String.class);"},{"sha":"57c1404186ca8df58160d2413139423d7b4cb242","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":17,"deletions":15,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -37,8 +39,8 @@ public SuspendProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n         if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            Pair<WorkflowResult<String>, Boolean> updated = \n-                (Pair<WorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n+            Pair<WorkflowResult<String>, Boolean> updated =\n+                    (Pair<WorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n \n             // propagate suspension if and only if it is required by policy\n             if (updated != null && updated.getValue()) {"},{"sha":"7c3761e867611e0af18d4cba36917054636d2b41","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=12ef6f5041e33d505e10c7f5d7b56b8c5ff3b67f","patch":"@@ -1,18 +1,20 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n package org.apache.syncope.core.provisioning.camel.producer;\n \n@@ -49,16 +51,15 @@ public void process(final Exchange exchange) throws Exception {\n                 WorkflowResult<Pair<UserPatch, Boolean>> updated =\n                         (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n-                List<PropagationTask> tasks = null;\n-                \n+                List<PropagationTask> tasks;\n                 if (isPull()) {\n                     boolean passwordNotNull = updated.getResult().getKey().getPassword() != null;\n                     tasks = getPropagationManager().getUserUpdateTasks(updated, passwordNotNull, excludedResources);\n                 } else {\n                     tasks = getPropagationManager().getUserUpdateTasks(updated);\n                 }\n-                PropagationReporter propagationReporter = \n-                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                PropagationReporter propagationReporter =\n+                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(new ImmutablePair<>(\n                         updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));\n@@ -79,7 +80,7 @@ public void process(final Exchange exchange) throws Exception {\n                         ((AnyPatch) actual).getVirAttrs(),\n                         excludedResources);\n                 PropagationReporter propagationReporter =\n-                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n \n                 exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));\n             }"}]}