{"sha":"2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJiN2RkNWQyY2Q1ODc0NTRhOThjOTYzOWJmNDEyYWI2ZmU1YTNkZWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-01T15:00:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-01T15:00:51Z"},"message":"Fastert DOM (de)serialization + ResourceWithFallbackLoader for user and role XML routes","tree":{"sha":"945a0adff90e8c231acca998d19e1d37d8cfa10a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/945a0adff90e8c231acca998d19e1d37d8cfa10a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dae87ef8989ad20818e45a05ff7830d709286da1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dae87ef8989ad20818e45a05ff7830d709286da1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dae87ef8989ad20818e45a05ff7830d709286da1"}],"stats":{"total":163,"additions":98,"deletions":65},"files":[{"sha":"34181ae0b912ec27623924e5bfed8b88187cfea6","filename":"syncope620/ext/camel/logic/src/main/java/org/apache/syncope/server/logic/init/CamelRouteLoader.java","status":"modified","additions":47,"deletions":33,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java?ref=2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","patch":"@@ -22,29 +22,30 @@\n import java.util.List;\n import java.util.Map;\n import javax.sql.DataSource;\n-import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.dom.DOMSource;\n-import javax.xml.transform.stream.StreamResult;\n import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.server.persistence.api.SyncopeLoader;\n import org.apache.syncope.server.persistence.api.entity.CamelEntityFactory;\n import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSOutput;\n+import org.w3c.dom.ls.LSParser;\n+import org.w3c.dom.ls.LSSerializer;\n \n @Component\n public class CamelRouteLoader implements SyncopeLoader {\n@@ -55,6 +56,12 @@ public class CamelRouteLoader implements SyncopeLoader {\n \n     private static final TransformerFactory T_FACTORY = TransformerFactory.newInstance();\n \n+    @javax.annotation.Resource(name = \"userRoutes\")\n+    private ResourceWithFallbackLoader userRoutesLoader;\n+\n+    @javax.annotation.Resource(name = \"roleRoutes\")\n+    private ResourceWithFallbackLoader roleRoutesLoader;\n+\n     @Autowired\n     private DataSource dataSource;\n \n@@ -74,8 +81,8 @@ public Integer getPriority() {\n     public void load() {\n         synchronized (this) {\n             if (!loaded) {\n-                loadRoutes(\"/userRoute.xml\", SubjectType.USER);\n-                loadRoutes(\"/roleRoute.xml\", SubjectType.ROLE);\n+                loadRoutes(userRoutesLoader.getResource(), SubjectType.USER);\n+                loadRoutes(roleRoutesLoader.getResource(), SubjectType.ROLE);\n                 loadEntitlements();\n                 loaded = true;\n             }\n@@ -89,45 +96,52 @@ private boolean routesAvailable(final SubjectType subject) {\n         return !rows.isEmpty();\n     }\n \n-    private String nodeToString(final Node node) {\n-        StringWriter sw = new StringWriter();\n+    private String nodeToString(final Node content, final DOMImplementationLS impl) {\n+        StringWriter writer = new StringWriter();\n         try {\n-            Transformer transformer = T_FACTORY.newTransformer();\n-            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n-            transformer.transform(new DOMSource(node), new StreamResult(sw));\n-        } catch (TransformerException te) {\n-            LOG.debug(\"nodeToString Transformer Exception\", te);\n+            LSSerializer serializer = impl.createLSSerializer();\n+            LSOutput lso = impl.createLSOutput();\n+            lso.setCharacterStream(writer);\n+            serializer.write(content, lso);\n+        } catch (Exception e) {\n+            LOG.debug(\"While serializing route node\", e);\n         }\n-        return sw.toString();\n+        return writer.toString();\n     }\n \n-    private void loadRoutes(final String path, final SubjectType subjectType) {\n+    private void loadRoutes(final Resource resource, final SubjectType subjectType) {\n         if (routesAvailable(subjectType)) {\n-            final String query = String.format(\"INSERT INTO %s(ID, NAME, SUBJECT, ROUTECONTENT) VALUES (?, ?, ?, ?)\",\n+            String query = String.format(\"INSERT INTO %s(NAME, SUBJECT, ROUTECONTENT) VALUES (?, ?, ?, ?)\",\n                     CamelRoute.class.getSimpleName());\n+            JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n             try {\n-                final DocumentBuilder dBuilder = DOC_FACTORY.newDocumentBuilder();\n-                final Document doc = dBuilder.parse(getClass().getResourceAsStream(path));\n-                doc.getDocumentElement().normalize();\n-                final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-                final NodeList listOfRoutes = doc.getElementsByTagName(\"route\");\n-                for (int s = 0; s < listOfRoutes.getLength(); s++) {\n-                    //getting the route node element\n-                    Node routeEl = listOfRoutes.item(s);\n+                DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n+                DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n+                LSInput lsinput = domImpl.createLSInput();\n+                lsinput.setByteStream(resource.getInputStream());\n+\n+                LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n+\n+                NodeList routeNodes = parser.parse(lsinput).getElementsByTagName(\"route\");\n+                for (int s = 0; s < routeNodes.getLength(); s++) {\n+                    Node routeElement = routeNodes.item(s);\n+                    String routeContent = nodeToString(routeNodes.item(s), domImpl);\n+\n                     //crate an instance of CamelRoute Entity\n                     CamelRoute route = entityFactory.newCamelRoute();\n                     route.setSubjectType(subjectType);\n-                    route.setKey(((Element) routeEl).getAttribute(\"id\"));\n-                    route.setContent(nodeToString(listOfRoutes.item(s)));\n+                    route.setKey(((Element) routeElement).getAttribute(\"id\"));\n+                    route.setContent(routeContent);\n \n-                    jdbcTemplate.update(query, new Object[] { size++, ((Element) routeEl).getAttribute(\"id\"),\n-                        subjectType.name(), nodeToString(listOfRoutes.item(s)) });\n-                    LOG.debug(\"Route {} successfully registered\", ((Element) routeEl).getAttribute(\"id\"));\n+                    jdbcTemplate.update(query, new Object[] {\n+                        ((Element) routeElement).getAttribute(\"id\"), subjectType.name(), routeContent });\n+                    LOG.debug(\"Route {} successfully loaded\", ((Element) routeElement).getAttribute(\"id\"));\n                 }\n             } catch (DataAccessException e) {\n                 LOG.error(\"While trying to store queries {}\", e);\n             } catch (Exception e) {\n-                LOG.error(\"Route Registration failed {}\", e.getMessage());\n+                LOG.error(\"Route load failed {}\", e.getMessage());\n             }\n         }\n     }"},{"sha":"2a7de7bda2bae8248e69993a0c5e6f4174a05f8a","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":16,"deletions":32,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","patch":"@@ -25,10 +25,7 @@\n import java.util.Collections;\n import java.util.List;\n import javax.xml.bind.JAXBContext;\n-import javax.xml.bind.JAXBElement;\n import javax.xml.bind.Unmarshaller;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n import org.apache.camel.model.Constants;\n import org.apache.camel.model.RouteDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n@@ -41,8 +38,11 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.w3c.dom.Document;\n import org.w3c.dom.Node;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSParser;\n \n @Component\n public class SyncopeCamelContext {\n@@ -77,22 +77,25 @@ public SpringCamelContext getContext() {\n \n     public void loadContext(final CamelRouteDAO routeDAO, final List<CamelRoute> routes) {\n         try {\n-            DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n+            DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n+            LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n+\n             JAXBContext jaxbContext = JAXBContext.newInstance(Constants.JAXB_CONTEXT_PACKAGES);\n             Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n             List<RouteDefinition> routeDefs = new ArrayList<>();\n             for (CamelRoute route : routes) {\n-                InputStream is = null;\n+                InputStream input = null;\n                 try {\n-                    is = new ByteArrayInputStream(\n+                    input = new ByteArrayInputStream(\n                             URLDecoder.decode(route.getContent(), SyncopeConstants.DEFAULT_ENCODING).getBytes());\n-                    Document doc = dBuilder.parse(is);\n-                    doc.getDocumentElement().normalize();\n-                    Node routeEl = doc.getElementsByTagName(\"route\").item(0);\n-                    JAXBElement<RouteDefinition> obj = unmarshaller.unmarshal(routeEl, RouteDefinition.class);\n-                    routeDefs.add(obj.getValue());\n+                    LSInput lsinput = domImpl.createLSInput();\n+                    lsinput.setByteStream(input);\n+\n+                    Node routeElement = parser.parse(lsinput).getElementsByTagName(\"route\").item(0);\n+                    routeDefs.add(unmarshaller.unmarshal(routeElement, RouteDefinition.class).getValue());\n                 } finally {\n-                    IOUtils.closeQuietly(is);\n+                    IOUtils.closeQuietly(input);\n                 }\n             }\n             camelContext.addRouteDefinitions(routeDefs);\n@@ -101,22 +104,6 @@ public void loadContext(final CamelRouteDAO routeDAO, final List<CamelRoute> rou\n         }\n     }\n \n-    public void reloadContext() {\n-        if (camelContext == null) {\n-            getContext();\n-        } else {\n-            if (!camelContext.getRouteDefinitions().isEmpty()) {\n-                try {\n-                    camelContext.removeRouteDefinitions(new ArrayList<>(camelContext.getRouteDefinitions()));\n-                } catch (Exception e) {\n-                    LOG.error(\"While clearing Camel context {}\", e);\n-                }\n-            }\n-\n-            loadContext(routeDAO, new ArrayList<>(routeDAO.findAll()));\n-        }\n-    }\n-\n     public void reloadContext(final String routeKey) {\n         if (camelContext == null) {\n             getContext();\n@@ -128,7 +115,4 @@ public void reloadContext(final String routeKey) {\n         }\n     }\n \n-    public List<RouteDefinition> getDefinitions() {\n-        return camelContext.getRouteDefinitions();\n-    }\n }"},{"sha":"b0c8917f3375138f4d45a835ec17abc207915787","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/provisioning.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","patch":"@@ -14,5 +14,6 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+camel.directory=${conf.directory}\n userProvisioningManager=org.apache.syncope.server.provisioning.camel.CamelUserProvisioningManager\n roleProvisioningManager=org.apache.syncope.server.provisioning.camel.CamelRoleProvisioningManager"},{"sha":"e46b58afd5879b6b4a8c5790e2b909ab48fdb556","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/provisioningCamelContext.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml?ref=2b7dd5d2cd587454a98c9639bf412ab6fe5a3deb","patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+  <bean id=\"userRoutes\" class=\"org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${camel.directory}/userWorkflow.bpmn20.xml\"/>\n+    <property name=\"fallback\" value=\"classpath:userRoutes.xml\"/>\n+  </bean>\n+  <bean id=\"roleRoutes\" class=\"org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${camel.directory}/userWorkflow.bpmn20.xml\"/>\n+    <property name=\"fallback\" value=\"classpath:roleRoutes.xml\"/>\n+  </bean>\n+    \n+</beans>"}]}