{"sha":"268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI2OGU2ZmZjZDNmNmZjNDFiODMxNTM0YWQ5NWZiMWQ2YzJiYTU0Y2Y=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-09T10:12:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-09T10:12:50Z"},"message":"[SYNCOPE-1077] Enhancing sort support","tree":{"sha":"413a9e53982fd24db827c5f2432e74319484c041","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/413a9e53982fd24db827c5f2432e74319484c041"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"648c45461ad9636ebdd5ac27eb8aa9502c8b74c6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/648c45461ad9636ebdd5ac27eb8aa9502c8b74c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/648c45461ad9636ebdd5ac27eb8aa9502c8b74c6"}],"stats":{"total":49,"additions":44,"deletions":5},"files":[{"sha":"61d4a7f017cb25a4c8dc7458717407d3aa749d8e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf","patch":"@@ -251,10 +251,10 @@ private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         return orderBy;\n     }\n \n-    private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport svs,\n+    private OrderBySupport parseOrderBy(final AnyTypeKind kind, final SearchSupport svs,\n             final List<OrderByClause> orderByClauses) {\n \n-        final AnyUtils attrUtils = anyUtilsFactory.getInstance(type);\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n \n         OrderBySupport obs = new OrderBySupport();\n "},{"sha":"06752542979c33ef90d7bb9e2a36976a58b6d9b5","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":42,"deletions":3,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=268e6ffcd3f6fc41b831534ad95fb1d6c2ba54cf","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import static org.apache.syncope.core.persistence.jpa.dao.AbstractDAO.LOG;\n+\n+import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -42,6 +45,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -58,6 +62,7 @@\n import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.sort.SortOrder;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.ReflectionUtils;\n \n /**\n  * Search engine implementation for users, groups and any objects, based on Elasticsearch.\n@@ -112,6 +117,42 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n         return (int) builder.get().getHits().getTotalHits();\n     }\n \n+    private void addSort(\n+            final SearchRequestBuilder builder,\n+            final AnyTypeKind kind,\n+            final List<OrderByClause> orderBy) {\n+\n+        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n+\n+        for (OrderByClause clause : orderBy) {\n+            String sortName = null;\n+\n+            // Manage difference among external key attribute and internal JPA @Id\n+            String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n+\n+            Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), fieldName);\n+            if (anyField == null) {\n+                PlainSchema schema = schemaDAO.find(fieldName);\n+                if (schema != null) {\n+                    sortName = schema.getType() == AttrSchemaType.String\n+                            || schema.getType() == AttrSchemaType.Enum\n+                            ? fieldName + \".keyword\"\n+                            : fieldName;\n+                }\n+            } else {\n+                sortName = anyField.getType().equals(String.class)\n+                        ? fieldName + \".keyword\"\n+                        : fieldName;\n+            }\n+\n+            if (sortName == null) {\n+                LOG.warn(\"Cannot build any valid clause from {}\", clause);\n+            } else {\n+                builder.addSort(sortName, SortOrder.valueOf(clause.getDirection().name()));\n+            }\n+        }\n+    }\n+\n     @Override\n     protected <T extends Any<?>> List<T> doSearch(\n             final Set<String> adminRealms,\n@@ -124,9 +165,7 @@ protected <T extends Any<?>> List<T> doSearch(\n         SearchRequestBuilder builder = searchRequestBuilder(adminRealms, cond, kind).\n                 setFrom(page <= 0 ? 0 : page - 1).\n                 setSize(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage);\n-        for (OrderByClause clause : orderBy) {\n-            builder.addSort(clause.getField(), SortOrder.valueOf(clause.getDirection().name()));\n-        }\n+        addSort(builder, kind, orderBy);\n \n         return buildResult(\n                 CollectionUtils.collect(Arrays.asList(builder.get().getHits().getHits()),"}]}