{"sha":"091c735fd84516757bac6f47edc98a34102734e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA5MWM3MzVmZDg0NTE2NzU3YmFjNmY0N2VkYzk4YTM0MTAyNzM0ZTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-07T14:25:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-07T14:25:39Z"},"message":"More replacements thanks to commons-collections","tree":{"sha":"ccd69fe5188b5333688f9a71504518ec43d480b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ccd69fe5188b5333688f9a71504518ec43d480b6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/091c735fd84516757bac6f47edc98a34102734e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/091c735fd84516757bac6f47edc98a34102734e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/091c735fd84516757bac6f47edc98a34102734e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/091c735fd84516757bac6f47edc98a34102734e1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c5d8c89693aa05dadd775524d763b777a61c58fc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c5d8c89693aa05dadd775524d763b777a61c58fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c5d8c89693aa05dadd775524d763b777a61c58fc"}],"stats":{"total":428,"additions":207,"deletions":221},"files":[{"sha":"e505f24756c1c827694b9ee0061039effedbbba1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Notification.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -24,10 +24,6 @@\n \n public interface Notification extends Entity<Long> {\n \n-    boolean addEvent(String event);\n-\n-    boolean addStaticRecipient(String staticRecipient);\n-\n     List<String> getEvents();\n \n     String getRecipientAttrName();\n@@ -54,10 +50,6 @@ public interface Notification extends Entity<Long> {\n \n     boolean isSelfAsRecipient();\n \n-    boolean removeEvent(String event);\n-\n-    boolean removeStaticRecipient(String staticRecipient);\n-\n     void setActive(boolean active);\n \n     void setRecipientAttrName(String recipientAttrName);"},{"sha":"98529e8d8ca169a2f097ca9fdb740d905c778cb2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -35,22 +35,22 @@\n \n     public MultiParentNode(final T object) {\n         this.object = object;\n-        children = new HashSet<MultiParentNode<T>>();\n+        children = new HashSet<>();\n     }\n \n     public int getLevel() {\n         return level;\n     }\n \n-    public void setLevel(int level) {\n+    public void setLevel(final int level) {\n         this.level = level;\n     }\n \n     boolean isExploited() {\n         return exploited;\n     }\n \n-    void setExploited(boolean exploited) {\n+    void setExploited(final boolean exploited) {\n         this.exploited = exploited;\n     }\n "},{"sha":"68568aee054252f3a00da828a5de93bc614e9211","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNodeOp.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNodeOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNodeOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNodeOp.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -33,7 +33,6 @@ public static <T> void traverseTree(final Set<MultiParentNode<T>> roots, final C\n     }\n \n     public static <T> void traverseTree(final MultiParentNode<T> root, final Collection<T> objects) {\n-\n         root.setExploited(true);\n \n         for (MultiParentNode<T> child : root.getChildren()) {"},{"sha":"6d4f6c306f158a168f640f5e33671e40a927fecb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttributable.java","status":"modified","additions":40,"deletions":41,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -20,6 +20,10 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -35,72 +39,67 @@\n \n     @Override\n     public P getPlainAttr(final String plainSchemaName) {\n-        P result = null;\n-        for (P plainAttr : getPlainAttrs()) {\n-            if (plainAttr != null && plainAttr.getSchema() != null\n-                    && plainSchemaName.equals(plainAttr.getSchema().getKey())) {\n+        return CollectionUtils.find(getPlainAttrs(), new Predicate<P>() {\n \n-                result = plainAttr;\n+            @Override\n+            public boolean evaluate(final P plainAttr) {\n+                return plainAttr != null && plainAttr.getSchema() != null\n+                        && plainSchemaName.equals(plainAttr.getSchema().getKey());\n             }\n-        }\n-        return result;\n+        });\n     }\n \n     @Override\n     public D getDerAttr(final String derSchemaName) {\n-        D result = null;\n-        for (D derAttr : getDerAttrs()) {\n-            if (derAttr != null && derAttr.getSchema() != null\n-                    && derSchemaName.equals(derAttr.getSchema().getKey())) {\n+        return CollectionUtils.find(getDerAttrs(), new Predicate<D>() {\n \n-                result = derAttr;\n+            @Override\n+            public boolean evaluate(final D derAttr) {\n+                return derAttr != null && derAttr.getSchema() != null\n+                        && derSchemaName.equals(derAttr.getSchema().getKey());\n             }\n-        }\n-\n-        return result;\n+        });\n     }\n \n     @Override\n     public V getVirAttr(final String virSchemaName) {\n-        V result = null;\n-        for (V virAttr : getVirAttrs()) {\n-            if (virAttr != null && virAttr.getSchema() != null\n-                    && virSchemaName.equals(virAttr.getSchema().getKey())) {\n+        return CollectionUtils.find(getVirAttrs(), new Predicate<V>() {\n \n-                result = virAttr;\n+            @Override\n+            public boolean evaluate(final V virAttr) {\n+                return virAttr != null && virAttr.getSchema() != null\n+                        && virSchemaName.equals(virAttr.getSchema().getKey());\n             }\n-        }\n-\n-        return result;\n+        });\n     }\n \n     protected Map<PlainSchema, P> getPlainAttrMap() {\n-        final Map<PlainSchema, P> map = new HashMap<>();\n+        return MapUtils.lazyMap(new HashMap<PlainSchema, P>(), new Transformer<PlainSchema, P>() {\n \n-        for (P attr : getPlainAttrs()) {\n-            map.put(attr.getSchema(), attr);\n-        }\n-\n-        return map;\n+            @Override\n+            public P transform(final PlainSchema input) {\n+                return getPlainAttr(input.getKey());\n+            }\n+        });\n     }\n \n     protected Map<DerSchema, D> getDerAttrMap() {\n-        final Map<DerSchema, D> map = new HashMap<>();\n+        return MapUtils.lazyMap(new HashMap<DerSchema, D>(), new Transformer<DerSchema, D>() {\n \n-        for (D attr : getDerAttrs()) {\n-            map.put(attr.getSchema(), attr);\n-        }\n-\n-        return map;\n+            @Override\n+            public D transform(final DerSchema input) {\n+                return getDerAttr(input.getKey());\n+            }\n+        });\n     }\n \n     protected Map<VirSchema, V> getVirAttrMap() {\n-        final Map<VirSchema, V> map = new HashMap<>();\n+        return MapUtils.lazyMap(new HashMap<VirSchema, V>(), new Transformer<VirSchema, V>() {\n \n-        for (V attr : getVirAttrs()) {\n-            map.put(attr.getSchema(), attr);\n-        }\n-\n-        return map;\n+            @Override\n+            public V transform(final VirSchema input) {\n+                return getVirAttr(input.getKey());\n+            }\n+        });\n     }\n }"},{"sha":"4481d3edd5254d26013e2833fd5129367f3ed93a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractMapping.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -20,6 +20,8 @@\n \n import javax.persistence.Cacheable;\n import javax.persistence.MappedSuperclass;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.entity.Mapping;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n@@ -47,13 +49,13 @@ public void setAccountLink(final String accountLink) {\n \n     @Override\n     public T getAccountIdItem() {\n-        T accountIdItem = null;\n-        for (T item : getItems()) {\n-            if (item.isAccountid()) {\n-                accountIdItem = item;\n+        return CollectionUtils.find(getItems(), new Predicate<T>() {\n+\n+            @Override\n+            public boolean evaluate(final T item) {\n+                return item.isAccountid();\n             }\n-        }\n-        return accountIdItem;\n+        });\n     }\n \n     protected boolean addAccountIdItem(final T accountIdItem) {"},{"sha":"2db17f02249b1a0c2560cf93727bad4ca8c63f49","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -23,6 +23,8 @@\n import java.util.List;\n \n import javax.persistence.MappedSuperclass;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -67,10 +69,13 @@ public void addValue(final String value, final AttributableUtil attributableUtil\n     public List<String> getValuesAsStrings() {\n         List<String> result;\n         if (getUniqueValue() == null) {\n-            result = new ArrayList<>(getValues().size());\n-            for (PlainAttrValue attributeValue : getValues()) {\n-                result.add(attributeValue.getValueAsString());\n-            }\n+            result = CollectionUtils.collect(getValues(), new Transformer<PlainAttrValue, String>() {\n+\n+                @Override\n+                public String transform(final PlainAttrValue input) {\n+                    return input.getValueAsString();\n+                }\n+            }, new ArrayList<String>());\n         } else {\n             result = Collections.singletonList(getUniqueValue().getValueAsString());\n         }"},{"sha":"c3469b14dc70a50facd7c4c4f08d5b790d0eadbf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -256,7 +256,7 @@ public String getValueAsString(final AttrSchemaType type) {\n                 break;\n \n             case Binary:\n-                result = new String(Base64.encodeBase64String(getBinaryValue()));\n+                result = Base64.encodeBase64String(getBinaryValue());\n                 break;\n \n             case String:"},{"sha":"d08ba1c8d3c474e64080f37f3acecaa3fe9250db","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainSchema.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -143,7 +143,7 @@ public boolean isMultivalue() {\n     }\n \n     @Override\n-    public void setMultivalue(boolean multivalue) {\n+    public void setMultivalue(final boolean multivalue) {\n         this.multivalue = getBooleanAsInteger(multivalue);\n     }\n \n@@ -217,7 +217,7 @@ public String getEnumerationKeys() {\n     }\n \n     @Override\n-    public void setEnumerationKeys(String enumerationKeys) {\n+    public void setEnumerationKeys(final String enumerationKeys) {\n         this.enumerationKeys = enumerationKeys;\n     }\n "},{"sha":"14a33aade23feb9a18a6b037fbbe8c9ba0b83e6a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractSubject.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -20,6 +20,8 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -51,14 +53,13 @@ public Set<? extends ExternalResource> getResources() {\n \n     @Override\n     public Set<String> getResourceNames() {\n-        Set<? extends ExternalResource> ownResources = getResources();\n+        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n \n-        Set<String> result = new HashSet<>(ownResources.size());\n-        for (ExternalResource resource : ownResources) {\n-            result.add(resource.getKey());\n-        }\n-\n-        return result;\n+            @Override\n+            public String transform(final ExternalResource input) {\n+                return input.getKey();\n+            }\n+        }, new HashSet<String>());\n     }\n \n }"},{"sha":"068dd29cbb5dd6aaf06c46829ea1da4eb4a15964","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccountPolicy.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -27,6 +27,8 @@\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.validation.Valid;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -80,11 +82,12 @@ public Set<? extends ExternalResource> getResources() {\n \n     @Override\n     public Set<String> getResourceNames() {\n-        Set<String> result = new HashSet<>(resources.size());\n-        for (ExternalResource resource : resources) {\n-            result.add(resource.getKey());\n-        }\n+        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n \n-        return result;\n+            @Override\n+            public String transform(final ExternalResource input) {\n+                return input.getKey();\n+            }\n+        }, new HashSet<String>());\n     }\n }"},{"sha":"6abedd5fe34cdc3f189dec62432bf7a2e110205e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -37,7 +35,7 @@\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -182,12 +180,9 @@ public void setVersion(final String version) {\n \n     @Override\n     public Set<ConnConfProperty> getConfiguration() {\n-        Set<ConnConfProperty> configuration = Collections.<ConnConfProperty>emptySet();\n+        Set<ConnConfProperty> configuration = new HashSet<>();\n         if (!StringUtils.isBlank(jsonConf)) {\n-            ConnConfProperty[] deserialized = POJOHelper.deserialize(jsonConf, ConnConfProperty[].class);\n-            if (ArrayUtils.isNotEmpty(deserialized)) {\n-                configuration = new HashSet<>(Arrays.asList(deserialized));\n-            }\n+            CollectionUtils.addAll(configuration, POJOHelper.deserialize(jsonConf, ConnConfProperty[].class));\n         }\n \n         return configuration;"},{"sha":"908422b016429808e0be079fa71af8908705a904","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -42,6 +40,7 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationMode;\n@@ -253,7 +252,7 @@ public boolean isPropagationPrimary() {\n     }\n \n     @Override\n-    public void setPropagationPrimary(boolean propagationPrimary) {\n+    public void setPropagationPrimary(final boolean propagationPrimary) {\n         this.propagationPrimary = getBooleanAsInteger(propagationPrimary);\n     }\n \n@@ -263,7 +262,7 @@ public Integer getPropagationPriority() {\n     }\n \n     @Override\n-    public void setPropagationPriority(Integer propagationPriority) {\n+    public void setPropagationPriority(final Integer propagationPriority) {\n         if (propagationPriority != null) {\n             this.propagationPriority = propagationPriority;\n         }\n@@ -275,7 +274,7 @@ public boolean isRandomPwdIfNotProvided() {\n     }\n \n     @Override\n-    public void setRandomPwdIfNotProvided(boolean randomPwdIfNotProvided) {\n+    public void setRandomPwdIfNotProvided(final boolean randomPwdIfNotProvided) {\n         this.randomPwdIfNotProvided = getBooleanAsInteger(randomPwdIfNotProvided);\n     }\n \n@@ -285,7 +284,7 @@ public PropagationMode getPropagationMode() {\n     }\n \n     @Override\n-    public void setPropagationMode(PropagationMode propagationMode) {\n+    public void setPropagationMode(final PropagationMode propagationMode) {\n         this.propagationMode = propagationMode;\n     }\n \n@@ -375,9 +374,12 @@ public void setSyncPolicy(final SyncPolicy syncPolicy) {\n \n     @Override\n     public Set<ConnConfProperty> getConnInstanceConfiguration() {\n-        return StringUtils.isBlank(jsonConf)\n-                ? Collections.<ConnConfProperty>emptySet()\n-                : new HashSet<>(Arrays.asList(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n+        Set<ConnConfProperty> configuration = new HashSet<>();\n+        if (!StringUtils.isBlank(jsonConf)) {\n+            CollectionUtils.addAll(configuration, POJOHelper.deserialize(jsonConf, ConnConfProperty[].class));\n+        }\n+\n+        return configuration;\n     }\n \n     @Override"},{"sha":"d2acd589135eeb60643ff1de6c8db253d0808694","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -173,32 +173,11 @@ public List<String> getEvents() {\n         return events;\n     }\n \n-    @Override\n-    public boolean addEvent(final String event) {\n-        return event != null && !events.contains(event) && events.add(event);\n-    }\n-\n-    @Override\n-    public boolean removeEvent(final String event) {\n-        return event != null && events.remove(event);\n-    }\n-\n     @Override\n     public List<String> getStaticRecipients() {\n         return staticRecipients;\n     }\n \n-    @Override\n-    public boolean addStaticRecipient(final String staticRecipient) {\n-        return staticRecipient != null && !staticRecipients.contains(staticRecipient)\n-                && staticRecipients.add(staticRecipient);\n-    }\n-\n-    @Override\n-    public boolean removeStaticRecipient(final String staticRecipient) {\n-        return staticRecipient != null && staticRecipients.remove(staticRecipient);\n-    }\n-\n     @Override\n     public boolean isSelfAsRecipient() {\n         return isBooleanAsInteger(selfAsRecipient);"},{"sha":"544868f3e2c38cd7758ec3ec61fd4afcd211532f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -27,9 +27,13 @@\n import javax.persistence.Id;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n+import org.apache.syncope.core.persistence.api.entity.ReportletConfInstance;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ReportCheck;\n \n @Entity\n@@ -109,31 +113,24 @@ public boolean addReportletConf(final ReportletConf reportletConf) {\n \n     @Override\n     public boolean removeReportletConf(final ReportletConf reportletConf) {\n-        if (reportletConf == null) {\n-            return false;\n-        }\n+        return CollectionUtils.filter(reportletConfs, new Predicate<JPAReportletConfInstance>() {\n \n-        JPAReportletConfInstance found = null;\n-        for (JPAReportletConfInstance instance : reportletConfs) {\n-            if (reportletConf.equals(instance.getInstance())) {\n-                found = instance;\n+            @Override\n+            public boolean evaluate(final JPAReportletConfInstance object) {\n+                return reportletConf.equals(object.getInstance());\n             }\n-        }\n-\n-        return found == null\n-                ? false\n-                : reportletConfs.remove(found);\n+        });\n     }\n \n     @Override\n     public List<ReportletConf> getReportletConfs() {\n-        List<ReportletConf> result = new ArrayList<>(reportletConfs.size());\n-\n-        for (JPAReportletConfInstance instance : reportletConfs) {\n-            result.add(instance.getInstance());\n-        }\n+        return CollectionUtils.collect(reportletConfs, new Transformer<ReportletConfInstance, ReportletConf>() {\n \n-        return result;\n+            @Override\n+            public ReportletConf transform(final ReportletConfInstance input) {\n+                return input.getInstance();\n+            }\n+        }, new ArrayList<ReportletConf>());\n     }\n \n     @Override"},{"sha":"d81981a6c202ff99de1318a9ce86bda0fa9cb7c8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAttributableUtilFactory.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilFactory.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -47,8 +47,7 @@ public AttributableUtil getInstance(final ObjectClass objectClass) {\n         AttributableType type = null;\n         if (ObjectClass.ACCOUNT.equals(objectClass)) {\n             type = AttributableType.USER;\n-        }\n-        if (ObjectClass.GROUP.equals(objectClass)) {\n+        } else if (ObjectClass.GROUP.equals(objectClass)) {\n             type = AttributableType.GROUP;\n         }\n \n@@ -64,14 +63,11 @@ public AttributableUtil getInstance(final Attributable<?, ?, ?> attributable) {\n         AttributableType type = null;\n         if (attributable instanceof User) {\n             type = AttributableType.USER;\n-        }\n-        if (attributable instanceof Group) {\n+        } else if (attributable instanceof Group) {\n             type = AttributableType.GROUP;\n-        }\n-        if (attributable instanceof Membership) {\n+        } else if (attributable instanceof Membership) {\n             type = AttributableType.MEMBERSHIP;\n-        }\n-        if (attributable instanceof Conf) {\n+        } else if (attributable instanceof Conf) {\n             type = AttributableType.CONFIGURATION;\n         }\n "},{"sha":"e6dcc7bffa35767915f53d4ff588706b9b224aee","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -41,6 +41,9 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -338,26 +341,24 @@ public <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(fi\n     public <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n             final Class<T> reference, final String schemaName) {\n \n-        T result = null;\n+        return CollectionUtils.find(findInheritedTemplates(reference), new Predicate<T>() {\n \n-        for (T template : findInheritedTemplates(reference)) {\n-            if (schemaName.equals(template.getSchema().getKey())) {\n-                result = template;\n+            @Override\n+            public boolean evaluate(final T template) {\n+                return schemaName.equals(template.getSchema().getKey());\n             }\n-        }\n-\n-        return result;\n+        });\n     }\n \n     @Override\n     public <T extends AttrTemplate<K>, K extends Schema> List<K> getAttrTemplateSchemas(final Class<T> reference) {\n-        final List<K> result = new ArrayList<>();\n-\n-        for (T template : findInheritedTemplates(reference)) {\n-            result.add(template.getSchema());\n-        }\n+        return CollectionUtils.collect(findInheritedTemplates(reference), new Transformer<T, K>() {\n \n-        return result;\n+            @Override\n+            public K transform(final T input) {\n+                return input.getSchema();\n+            }\n+        }, new ArrayList<K>());\n     }\n \n     @Override\n@@ -439,11 +440,11 @@ public void setInheritPlainAttrs(final boolean inheritPlainAttrs) {\n      */\n     @Override\n     public List<? extends GPlainAttr> findLastInheritedAncestorPlainAttrs() {\n-        final Map<JPAGPlainSchema, GPlainAttr> result = new HashMap<>();\n-\n         if (!isInheritPlainAttrs()) {\n             return plainAttrs;\n         }\n+\n+        final Map<JPAGPlainSchema, GPlainAttr> result = new HashMap<>();\n         if (isInheritPlainAttrs() && getParent() != null) {\n             final Map<PlainSchema, GPlainAttr> attrMap = getPlainAttrMap();\n \n@@ -476,11 +477,11 @@ public void setInheritDerAttrs(final boolean inheritDerAttrs) {\n      */\n     @Override\n     public List<? extends GDerAttr> findLastInheritedAncestorDerAttrs() {\n-        final Map<GDerSchema, GDerAttr> result = new HashMap<>();\n-\n         if (!isInheritDerAttrs()) {\n             return derAttrs;\n         }\n+\n+        final Map<GDerSchema, GDerAttr> result = new HashMap<>();\n         if (isInheritDerAttrs() && getParent() != null) {\n             Map<DerSchema, GDerAttr> derAttrMap = getDerAttrMap();\n \n@@ -513,12 +514,11 @@ public void setInheritVirAttrs(final boolean inheritVirAttrs) {\n      */\n     @Override\n     public List<? extends GVirAttr> findLastInheritedAncestorVirAttrs() {\n-        final Map<GVirSchema, GVirAttr> result = new HashMap<>();\n-\n         if (!isInheritVirAttrs()) {\n             return virAttrs;\n         }\n \n+        final Map<GVirSchema, GVirAttr> result = new HashMap<>();\n         if (isInheritVirAttrs() && getParent() != null) {\n             Map<VirSchema, GVirAttr> virAttrMap = getVirAttrMap();\n "},{"sha":"ad79250585ba8f6b0d52cc1684d272cd8049cf38","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMembership.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -28,6 +28,8 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerAttr;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttr;\n@@ -127,12 +129,15 @@ public boolean addDerAttr(final MDerAttr derAttr) {\n         checkType(derAttr, JPAMDerAttr.class);\n \n         if (getGroup() != null && derAttr.getSchema() != null) {\n-            MDerAttrTemplate found = null;\n-            for (MDerAttrTemplate template : getGroup().findInheritedTemplates(MDerAttrTemplate.class)) {\n-                if (derAttr.getSchema().equals(template.getSchema())) {\n-                    found = template;\n-                }\n-            }\n+            MDerAttrTemplate found = CollectionUtils.find(getGroup().findInheritedTemplates(MDerAttrTemplate.class),\n+                    new Predicate<MDerAttrTemplate>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MDerAttrTemplate template) {\n+                            return derAttr.getSchema().equals(template.getSchema());\n+                        }\n+\n+                    });\n             if (found != null) {\n                 derAttr.setTemplate(found);\n                 return derAttrs.add((JPAMDerAttr) derAttr);"},{"sha":"b63bd1054e16b496bf5b180423020c1a18f83fd8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPANotificationTask.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -144,7 +144,7 @@ public boolean isExecuted() {\n     }\n \n     @Override\n-    public void setExecuted(boolean executed) {\n+    public void setExecuted(final boolean executed) {\n         this.executed = getBooleanAsInteger(executed);\n     }\n "},{"sha":"90104a3d27234f198a47676f19a24c54d9a0acf2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.DiscriminatorValue;\n@@ -28,6 +26,7 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.PropagationMode;\n@@ -118,9 +117,12 @@ public void setOldAccountId(final String oldAccountId) {\n \n     @Override\n     public Set<Attribute> getAttributes() {\n-        return StringUtils.isBlank(xmlAttributes)\n-                ? Collections.<Attribute>emptySet()\n-                : new HashSet<>(Arrays.asList(POJOHelper.deserialize(xmlAttributes, Attribute[].class)));\n+        Set<Attribute> attributes = new HashSet<>();\n+        if (!StringUtils.isBlank(xmlAttributes)) {\n+            CollectionUtils.addAll(attributes, POJOHelper.deserialize(xmlAttributes, Attribute[].class));\n+        }\n+\n+        return attributes;\n     }\n \n     @Override"},{"sha":"a5e3f28afba0f74c5f9a39c67fea90beb00188f6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":21,"deletions":24,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -22,7 +22,6 @@\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Basic;\n@@ -50,6 +49,9 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n@@ -212,15 +214,13 @@ public boolean removeMembership(final Membership membership) {\n \n     @Override\n     public Membership getMembership(final Long groupKey) {\n-        Membership result = null;\n-        Membership membership;\n-        for (Iterator<? extends Membership> itor = getMemberships().iterator(); result == null && itor.hasNext();) {\n-            membership = itor.next();\n-            if (membership.getGroup() != null && groupKey.equals(membership.getGroup().getKey())) {\n-                result = membership;\n+        return CollectionUtils.find(getMemberships(), new Predicate<Membership>() {\n+\n+            @Override\n+            public boolean evaluate(final Membership membership) {\n+                return membership.getGroup() != null && groupKey.equals(membership.getGroup().getKey());\n             }\n-        }\n-        return result;\n+        });\n     }\n \n     @Override\n@@ -230,27 +230,24 @@ public List<? extends Membership> getMemberships() {\n \n     @Override\n     public List<Group> getGroups() {\n-        List<Group> result = new ArrayList<>();\n+        return CollectionUtils.collect(memberships, new Transformer<Membership, Group>() {\n \n-        for (Membership membership : memberships) {\n-            if (membership.getGroup() != null) {\n-                result.add(membership.getGroup());\n+            @Override\n+            public Group transform(final Membership input) {\n+                return input.getGroup();\n             }\n-        }\n-\n-        return result;\n+        }, new ArrayList<Group>());\n     }\n \n     @Override\n     public Set<Long> getGroupKeys() {\n-        List<Group> groups = getGroups();\n-\n-        Set<Long> result = new HashSet<>(groups.size());\n-        for (Group group : groups) {\n-            result.add(group.getKey());\n-        }\n+        return CollectionUtils.collect(getGroups(), new Transformer<Group, Long>() {\n \n-        return result;\n+            @Override\n+            public Long transform(final Group input) {\n+                return input.getKey();\n+            }\n+        }, new HashSet<Long>());\n     }\n \n     @Override\n@@ -417,7 +414,7 @@ public Date getTokenExpireTime() {\n \n     @Override\n     public boolean checkToken(final String token) {\n-        return this.token == null \n+        return this.token == null\n                 ? token == null\n                 : this.token.equals(token) && !hasTokenExpired();\n     }"},{"sha":"2393975dfac167b7a0dc793afa6f60f2600128f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -21,7 +21,6 @@\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAConnPoolConf;\n import org.apache.syncope.core.provisioning.api.URIUtil;\n import org.apache.syncope.core.provisioning.api.ConnPoolConfUtil;\n "},{"sha":"9fbbeabd8d0f02ea5e58bc70e94c6b2b09d70bdd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n@@ -63,12 +65,13 @@ private boolean isValid(final Mapping<?> mapping, final ConstraintValidatorConte\n             return true;\n         }\n \n-        int accountIds = 0;\n-        for (MappingItem item : mapping.getItems()) {\n-            if (item.isAccountid()) {\n-                accountIds++;\n+        int accountIds = CollectionUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.isAccountid();\n             }\n-        }\n+        });\n         if (accountIds != 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"One and only one accountId mapping is needed\")).\n@@ -79,6 +82,7 @@ private boolean isValid(final Mapping<?> mapping, final ConstraintValidatorConte\n         final MappingItem accountId = mapping.getAccountIdItem();\n         if (mapping instanceof UMapping\n                 && AttributableType.GROUP == accountId.getIntMappingType().getAttributableType()) {\n+\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping,\n                             \"Group attribute as accountId is not permitted\"))."},{"sha":"e05dee803f37de27791e2457c71ee0066258bf2b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -22,6 +22,8 @@\n import java.util.HashSet;\n import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Report;\n@@ -48,10 +50,14 @@ public boolean isValid(final Report object, final ConstraintValidatorContext con\n             }\n         }\n \n-        Set<String> reportletNames = new HashSet<>();\n-        for (ReportletConf conf : object.getReportletConfs()) {\n-            reportletNames.add(conf.getName());\n-        }\n+        Set<String> reportletNames = CollectionUtils.collect(object.getReportletConfs(),\n+                new Transformer<ReportletConf, String>() {\n+\n+                    @Override\n+                    public String transform(final ReportletConf input) {\n+                        return input.getName();\n+                    }\n+                }, new HashSet<String>());\n         if (reportletNames.size() != object.getReportletConfs().size()) {\n             LOG.error(\"Reportlet name must be unique\");\n             isValid = false;"},{"sha":"5084522743dfc9eae69ec6b883dfeebd651652ba","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SchemaNameValidator.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -19,11 +19,12 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import java.lang.reflect.Field;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n@@ -44,13 +45,13 @@\n \n public class SchemaNameValidator extends AbstractValidator<SchemaNameCheck, Object> {\n \n-    private static final List<String> UNALLOWED_USCHEMA_NAMES = new ArrayList<>();\n+    private static final Set<String> UNALLOWED_USCHEMA_NAMES = new HashSet<>();\n \n-    private static final List<String> UNALLOWED_MSCHEMA_NAMES = new ArrayList<>();\n+    private static final Set<String> UNALLOWED_MSCHEMA_NAMES = new HashSet<>();\n \n-    private static final List<String> UNALLOWED_RSCHEMA_NAMES = new ArrayList<>();\n+    private static final Set<String> UNALLOWED_RSCHEMA_NAMES = new HashSet<>();\n \n-    private static final List<String> UNALLOWED_CSCHEMA_NAMES = new ArrayList<>();\n+    private static final Set<String> UNALLOWED_CSCHEMA_NAMES = new HashSet<>();\n \n     static {\n         initUnallowedSchemaNames(JPAUser.class, UNALLOWED_USCHEMA_NAMES);\n@@ -59,9 +60,11 @@ public class SchemaNameValidator extends AbstractValidator<SchemaNameCheck, Obje\n         initUnallowedSchemaNames(JPAConf.class, UNALLOWED_CSCHEMA_NAMES);\n     }\n \n-    private static void initUnallowedSchemaNames(final Class<?> entityClass, final List<String> names) {\n+    private static void initUnallowedSchemaNames(final Class<?> entityClass, final Set<String> names) {\n         List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n-        classes.add(JPAUser.class);\n+        if (!classes.contains(JPAUser.class)) {\n+            classes.add(JPAUser.class);\n+        }\n         for (Class<?> clazz : classes) {\n             for (Field field : clazz.getDeclaredFields()) {\n                 if (!Collection.class.isAssignableFrom(field.getType())\n@@ -76,7 +79,7 @@ private static void initUnallowedSchemaNames(final Class<?> entityClass, final L\n     @Override\n     public boolean isValid(final Object object, final ConstraintValidatorContext context) {\n         final String schemaName;\n-        final List<String> unallowedNames;\n+        final Set<String> unallowedNames;\n \n         if (object instanceof UPlainSchema) {\n             schemaName = ((UPlainSchema) object).getKey();\n@@ -110,7 +113,7 @@ public boolean isValid(final Object object, final ConstraintValidatorContext con\n             unallowedNames = UNALLOWED_CSCHEMA_NAMES;\n         } else {\n             schemaName = null;\n-            unallowedNames = Collections.emptyList();\n+            unallowedNames = Collections.emptySet();\n         }\n \n         boolean isValid = NAME_PATTERN.matcher(schemaName).matches();"},{"sha":"8b545b8afe51615790ebefb7383a5221b39f74a0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/NotificationTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/091c735fd84516757bac6f47edc98a34102734e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FNotificationTest.java?ref=091c735fd84516757bac6f47edc98a34102734e1","patch":"@@ -58,7 +58,7 @@ public void findAll() {\n     @Test\n     public void save() {\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"save\");\n+        notification.getEvents().add(\"save\");\n \n         notification.setUserAbout(\"fake search condition\");\n \n@@ -85,7 +85,7 @@ public void delete() {\n     @Test\n     public void issueSYNCOPE445() {\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"save\");\n+        notification.getEvents().add(\"save\");\n \n         notification.setUserAbout(\"fake search condition\");\n \n@@ -94,7 +94,7 @@ public void issueSYNCOPE445() {\n         notification.setRecipientAttrName(\"email\");\n         notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n-        notification.addStaticRecipient(\"syncope445@syncope.apache.org\");\n+        notification.getStaticRecipients().add(\"syncope445@syncope.apache.org\");\n \n         notification.setSender(\"syncope@syncope.apache.org\");\n         notification.setSubject(\"Test notification\");\n@@ -110,14 +110,14 @@ public void issueSYNCOPE445() {\n     @Test\n     public void issueSYNCOPE446() {\n         Notification notification = entityFactory.newEntity(Notification.class);\n-        notification.addEvent(\"[REST]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n+        notification.getEvents().add(\"[REST]:[GroupLogic]:[]:[create]:[SUCCESS]\");\n \n         notification.setGroupAbout(\"fake search condition\");\n \n         notification.setRecipientAttrName(\"email\");\n         notification.setRecipientAttrType(IntMappingType.UserPlainSchema);\n \n-        notification.addStaticRecipient(\"syncope446@syncope.apache.org\");\n+        notification.getStaticRecipients().add(\"syncope446@syncope.apache.org\");\n \n         notification.setSender(\"syncope@syncope.apache.org\");\n         notification.setSubject(\"Test notification\");"}]}