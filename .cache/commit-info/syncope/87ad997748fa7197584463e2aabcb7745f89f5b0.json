{"sha":"87ad997748fa7197584463e2aabcb7745f89f5b0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg3YWQ5OTc3NDhmYTcxOTc1ODQ0NjNlMmFhYmNiNzc0NWY4OWY1YjA=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:09:37Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:09:37Z"},"message":"Fixed SYNCOPE-584","tree":{"sha":"d7817a8bb61ddd8b33cf7fdfb10f75a0958d48a9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d7817a8bb61ddd8b33cf7fdfb10f75a0958d48a9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/87ad997748fa7197584463e2aabcb7745f89f5b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/87ad997748fa7197584463e2aabcb7745f89f5b0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/87ad997748fa7197584463e2aabcb7745f89f5b0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/87ad997748fa7197584463e2aabcb7745f89f5b0/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"9589199482b8823bb630bf901014f816f179475e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9589199482b8823bb630bf901014f816f179475e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9589199482b8823bb630bf901014f816f179475e"}],"stats":{"total":339,"additions":225,"deletions":114},"files":[{"sha":"00f12b15f0e6ab55490c4f722b1d6c62e4cd35ec","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"modified","additions":225,"deletions":114,"changes":339,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/87ad997748fa7197584463e2aabcb7745f89f5b0/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/87ad997748fa7197584463e2aabcb7745f89f5b0/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=87ad997748fa7197584463e2aabcb7745f89f5b0","patch":"@@ -18,13 +18,12 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import com.beust.jcommander.DynamicParameter;\n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n-import java.util.HashMap;\n-import java.util.Map;\n+import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.UsageMessages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n@@ -33,135 +32,247 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-@Parameters(\n-        commandNames = \"logger\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope logger service\")\n+@Command(name = \"logger\")\n public class LoggerCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n \n-    private final String helpMessage = \"Usage: logger [options]\\n\"\n+    private static final String HELP_MESSAGE = \"Usage: logger [options]\\n\"\n             + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={LOG-NAME} \\n\"\n-            + \"    -u, --update \\n\"\n-            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n-            + \"    -ua, --update-all \\n\"\n-            + \"       Syntax: -ua={LOG-LEVEL} \\n\"\n-            + \"    -c, --create \\n\"\n-            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={LOG-NAME}\";\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private String logNameToRead;\n-\n-    @DynamicParameter(names = { \"-u\", \"--update\" })\n-    private final Map<String, String> updateLogs = new HashMap<String, String>();\n-\n-    @Parameter(names = { \"-ua\", \"--update-all\" })\n-    private String logLevel;\n-\n-    @DynamicParameter(names = { \"-c\", \"--create\" })\n-    private final Map<String, String> createLogs = new HashMap<String, String>();\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private String logNameToDelete;\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {LOG-NAME} {LOG-NAME} [...]\\n\"\n+            + \"    --update \\n\"\n+            + \"       Syntax: --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n+            + \"    --update-all \\n\"\n+            + \"       Syntax: --update-all {LOG-LEVEL} \\n\"\n+            + \"    --create \\n\"\n+            + \"       Syntax: --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {LOG-NAME} {LOG-NAME} [...]\";\n \n     @Override\n-    public void execute() {\n-        final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n \n-        LOG.debug(\"Logger service successfully created\");\n+        final String[] parameters = input.getParameters();\n \n-        if (help) {\n-            LOG.debug(\"- logger help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            LOG.debug(\"- logger list command\");\n-            try {\n-                for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                    System.out.println(\" - \" + loggerTO.getKey() + \" -> \" + loggerTO.getLevel());\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(logNameToRead)) {\n-            LOG.debug(\"- logger read {} command\", logNameToRead);\n-            try {\n-                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, logNameToRead);\n-                System.out.println(\" - Logger \" + loggerTO.getKey() + \" with level -> \" + loggerTO.getLevel());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (!updateLogs.isEmpty()) {\n-            LOG.debug(\"- logger update command with params {}\", updateLogs);\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n \n-            for (final Map.Entry<String, String> log : updateLogs.entrySet()) {\n-                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, log.getKey());\n+        final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n                 try {\n-                    loggerTO.setLevel(LoggerLevel.valueOf(log.getValue()));\n-                    loggerService.update(LoggerType.LOG, loggerTO);\n-                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n+                    System.out.println(\"\\n\");\n+                    for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                        System.out.println(\" - \" + loggerTO.getKey() + \" -> \" + loggerTO.getLevel());\n+                        System.out.println(\"\");\n+                    }\n                 } catch (final SyncopeClientException ex) {\n-                    System.out.println(\" - Error: \" + ex.getMessage());\n-                } catch (final IllegalArgumentException ex) {\n-                    System.out.println(\" - Error: \" + log.getValue() + \" isn't a valid logger level, try with:\");\n-                    for (final LoggerLevel level : LoggerLevel.values()) {\n-                        System.out.println(\"  *** \" + level.name());\n+                    UsageMessages.printErrorMessage(\"Error: \" + ex.getMessage());\n+                }\n+                break;\n+            case READ:\n+                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"logger --read {LOG-NAME} {LOG-NAME} [...]\");\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, parameter);\n+                            System.out.println(\"\\n - Logger\");\n+                            System.out.println(\"   - key: \" + loggerTO.getKey());\n+                            System.out.println(\"   - level: \" + loggerTO.getLevel());\n+                            System.out.println(\"\");\n+                        } catch (final SyncopeClientException | WebServiceException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\n+                                        \"Logger \" + parameter + \" doesn't exist!\");\n+                            } else {\n+                                UsageMessages.printErrorMessage(\"Error: \" + ex.getMessage());\n+                            }\n+                        }\n                     }\n+                } else {\n+                    System.out.println(readErrorMessage);\n                 }\n-            }\n-        } else if (StringUtils.isNotBlank(logLevel)) {\n-            LOG.debug(\"- logger update all command with level {}\", logLevel);\n-            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                try {\n-                    loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n-                    loggerService.update(LoggerType.LOG, loggerTO);\n-                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n-                } catch (final SyncopeClientException ex) {\n-                    System.out.println(\" - Error: \" + ex.getMessage());\n-                } catch (final IllegalArgumentException ex) {\n-                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n-                    for (final LoggerLevel level : LoggerLevel.values()) {\n-                        System.out.println(\"  *** \" + level.name());\n+                break;\n+            case UPDATE:\n+                final String updateErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"logger --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\");\n+\n+                if (parameters.length >= 1) {\n+                    Input.PairParameter pairParameter = null;\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            pairParameter = input.toPairParameter(parameter);\n+                            final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, pairParameter.getKey());\n+                            loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n+                            loggerService.update(LoggerType.LOG, loggerTO);\n+                            System.out.\n+                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n+                            System.out.println(\"   - new level: \" + loggerTO.getLevel());\n+                            System.out.println(\"\");\n+                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                System.out.println(\"Try with:\");\n+                                for (final LoggerLevel level : LoggerLevel.values()) {\n+                                    System.out.println(\"  *** \" + level.name());\n+                                }\n+                                System.out.println(\"\");\n+                            } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n+                                UsageMessages.printErrorMessage(ex.getMessage(), updateErrorMessage);\n+                            } else if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\n+                                        \"Logger \" + pairParameter.getKey() + \" doesn't exists!\");\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage(), updateErrorMessage);\n+                            }\n+                            break;\n+                        }\n                     }\n+                } else {\n+                    System.out.println(updateErrorMessage);\n                 }\n-            }\n-        } else if (!createLogs.isEmpty()) {\n-            LOG.debug(\"- logger create command with params {}\", createLogs);\n+                break;\n+            case UPDATE_ALL:\n+                final String updateAllErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"logger --update-all {LOG-LEVEL}\");\n \n-            for (final Map.Entry<String, String> entrySet : createLogs.entrySet()) {\n-                final LoggerTO loggerTO = new LoggerTO();\n-                try {\n-                    loggerTO.setKey(entrySet.getKey());\n-                    loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n-                    loggerService.update(LoggerType.LOG, loggerTO);\n-                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" created with level -> \" + loggerTO.\n-                            getLevel());\n-                } catch (final SyncopeClientException ex) {\n-                    System.out.println(\" - Error: \" + ex.getMessage());\n-                } catch (final IllegalArgumentException ex) {\n-                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n-                    for (final LoggerLevel level : LoggerLevel.values()) {\n-                        System.out.println(\"  *** \" + level.name());\n+                if (parameters.length == 1) {\n+                    for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                        try {\n+                            loggerTO.setLevel(LoggerLevel.valueOf(parameters[0]));\n+                            loggerService.update(LoggerType.LOG, loggerTO);\n+                            System.out.\n+                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n+                            System.out.println(\"   - new level: \" + loggerTO.getLevel());\n+                            System.out.println(\"\");\n+                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                System.out.println(\"Try with:\");\n+                                for (final LoggerLevel level : LoggerLevel.values()) {\n+                                    System.out.println(\"  *** \" + level.name());\n+                                }\n+                                System.out.println(\"\");\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage(), updateAllErrorMessage);\n+                            }\n+                            break;\n+                        }\n                     }\n+                } else {\n+                    System.out.println(updateAllErrorMessage);\n+                }\n+                break;\n+            case CREATE:\n+                final String createErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"logger --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\");\n+\n+                if (parameters.length >= 1) {\n+                    Input.PairParameter pairParameter;\n+                    LoggerTO loggerTO;\n+                    for (final String parameter : parameters) {\n+                        loggerTO = new LoggerTO();\n+                        try {\n+                            pairParameter = input.toPairParameter(parameter);\n+                            loggerTO.setKey(pairParameter.getKey());\n+                            loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n+                            loggerService.update(LoggerType.LOG, loggerTO);\n+                            System.out.\n+                                    println(\"\\n - Logger \" + loggerTO.getKey() + \" updated\");\n+                            System.out.println(\"   - level: \" + loggerTO.getLevel());\n+                            System.out.println(\"\");\n+                        } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                            if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                                System.out.println(\"Try with:\");\n+                                for (final LoggerLevel level : LoggerLevel.values()) {\n+                                    System.out.println(\"  *** \" + level.name());\n+                                }\n+                                System.out.println(\"\");\n+                            } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n+                                UsageMessages.printErrorMessage(ex.getMessage(), createErrorMessage);\n+                            }\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(createErrorMessage);\n+                }\n+                break;\n+            case DELETE:\n+                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"logger --delete {LOG-NAME} {LOG-NAME} [...]\");\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            loggerService.delete(LoggerType.LOG, parameter);\n+                            System.out.println(\"\\n - Logger \" + parameter + \" deleted!\\n\");\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\n+                                        \"Logger \" + parameter + \" doesn't exists!\");\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(deleteErrorMessage);\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(HELP_MESSAGE);\n+        }\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        READ(\"--read\"),\n+        UPDATE(\"--update\"),\n+        UPDATE_ALL(\"--update-all\"),\n+        CREATE(\"--create\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n                 }\n             }\n-        } else if (StringUtils.isNotBlank(logNameToDelete)) {\n-            try {\n-                LOG.debug(\"- logger delete {} command\", logNameToDelete);\n-                loggerService.delete(LoggerType.LOG, logNameToDelete);\n-                System.out.println(\" - Logger \" + logNameToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n+            return optionToReturn;\n         }\n     }\n "}]}