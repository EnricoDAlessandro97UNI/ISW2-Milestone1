{"sha":"a8c39efa167e9cc34a8d1d2c315454ae305a3a84","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE4YzM5ZWZhMTY3ZTljYzM0YThkMWQyYzMxNTQ1NGFlMzA1YTNhODQ=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-07-10T13:10:32Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-07-10T13:10:32Z"},"message":"SYNCOPE-1570: Support U2F device registration via REST APIs (#197)\n\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@users.noreply.github.com>","tree":{"sha":"af1ea46bb0012937b46ff05252703093590ef591","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/af1ea46bb0012937b46ff05252703093590ef591"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a8c39efa167e9cc34a8d1d2c315454ae305a3a84","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCGjICRBK7hj4Ov3rIwAAdHIIADurni25seO41gcd52weVYXX\nx+A/dFmnQWStSRCyvCabV5DUggCibhE7ndDK6Z2fDT+lBkXyEBhHMzrkr66CvsRz\nK9m21ezzT8S4xqtzjYXjjCZCsuFN+bN1BGQPKkBD+B04GF82kgqMYjVf8Aw1FEjJ\nvMRrubXL8W8bW1hjM1kriyZRQ6wow2LaAiixRz1s9PGJDFxpbFQqZhgYQ/Ry4Gzh\n2mijrKH+K+zA1ewrSXhttR30DTAHYOWVkj17KNt3fhwzP38hXKaqawTHEiQmDo+D\nRj7d08jxYORCJn9QTUoQrVHUvXmwuVXBkjWGy23OGkcA/wJvCNARU90V59/HUn8=\n=2mna\n-----END PGP SIGNATURE-----\n","payload":"tree af1ea46bb0012937b46ff05252703093590ef591\nparent abfbd41114a38a1d5b078c09d386d46645ec94da\nauthor Misagh Moayyed <mm1844@gmail.com> 1594386632 +0430\ncommitter GitHub <noreply@github.com> 1594386632 +0430\n\nSYNCOPE-1570: Support U2F device registration via REST APIs (#197)\n\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@users.noreply.github.com>"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8c39efa167e9cc34a8d1d2c315454ae305a3a84","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a8c39efa167e9cc34a8d1d2c315454ae305a3a84","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"abfbd41114a38a1d5b078c09d386d46645ec94da","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/abfbd41114a38a1d5b078c09d386d46645ec94da","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/abfbd41114a38a1d5b078c09d386d46645ec94da"}],"stats":{"total":1143,"additions":1117,"deletions":26},"files":[{"sha":"c588d5303180cfa6d9db4d1ea981dca81c61de21","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SAML2IdPAuthModuleConf.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -159,7 +159,7 @@ public class SAML2IdPAuthModuleConf extends AbstractAuthModuleConf {\n     /**\n      * Collection of signing signature blacklisted algorithms, if any, to override the global defaults.\n      */\n-    private final List<String> blackListedSignatureSigningAlgorithms = new ArrayList<>(0);\n+    private final List<String> blockedSignatureSigningAlgorithms = new ArrayList<>(0);\n \n     /**\n      * Collection of signing signature algorithms, if any, to override the global defaults.\n@@ -355,8 +355,8 @@ public void setSignServiceProviderLogoutRequest(final boolean signServiceProvide\n         this.signServiceProviderLogoutRequest = signServiceProviderLogoutRequest;\n     }\n \n-    public List<String> getBlackListedSignatureSigningAlgorithms() {\n-        return blackListedSignatureSigningAlgorithms;\n+    public List<String> getBlockedSignatureSigningAlgorithms() {\n+        return blockedSignatureSigningAlgorithms;\n     }\n \n     public List<String> getSignatureAlgorithms() {"},{"sha":"20b08e1c9bb828bd97c0d67be45166c2de63afad","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -106,6 +106,16 @@ public final class AMEntitlement {\n \n     public static final String OIDC_JWKS_DELETE = \"OIDC_JWKS_DELETE\";\n \n+    public static final String U2F_DELETE_DEVICE = \"U2F_DELETE_DEVICE\";\n+\n+    public static final String U2F_SAVE_DEVICE = \"U2F_SAVE_DEVICE\";\n+\n+    public static final String U2F_READ_DEVICE = \"U2F_READ_DEVICE\";\n+\n+    public static final String U2F_SEARCH = \"U2F_SEARCH\";\n+\n+    public static final String U2F_UPDATE_DEVICE = \"U2F_UPDATE_DEVICE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"74450e1ccaa4afb57e9d91116843bcce22afc80e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/U2FRegisteredDevice.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FU2FRegisteredDevice.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FU2FRegisteredDevice.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FU2FRegisteredDevice.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+import java.util.Date;\n+import java.util.Optional;\n+\n+public class U2FRegisteredDevice implements BaseBean {\n+\n+    private static final long serialVersionUID = 1185073386484048953L;\n+\n+    private long id;\n+\n+    private String key;\n+\n+    private String record;\n+\n+    private String owner;\n+\n+    private Date issueDate;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getRecord() {\n+        return record;\n+    }\n+\n+    public void setRecord(final String record) {\n+        this.record = record;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    public Date getIssueDate() {\n+        return Optional.ofNullable(this.issueDate).\n+            map(date -> new Date(date.getTime())).orElse(null);\n+    }\n+\n+    public void setIssueDate(final Date issueDate) {\n+        this.issueDate = Optional.ofNullable(issueDate).\n+            map(date -> new Date(date.getTime())).orElse(null);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(key)\n+            .append(record)\n+            .append(owner)\n+            .append(id)\n+            .append(issueDate)\n+            .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        U2FRegisteredDevice rhs = (U2FRegisteredDevice) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.key, rhs.key)\n+            .append(this.record, rhs.record)\n+            .append(this.owner, rhs.owner)\n+            .append(this.id, rhs.id)\n+            .append(this.issueDate, rhs.issueDate)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .append(\"key\", key)\n+            .append(\"record\", record)\n+            .append(\"owner\", owner)\n+            .append(\"id\", id)\n+            .append(\"issueDate\", issueDate)\n+            .toString();\n+    }\n+\n+    public static class Builder {\n+\n+        private final U2FRegisteredDevice instance = new U2FRegisteredDevice();\n+\n+        public U2FRegisteredDevice.Builder issueDate(final Date issued) {\n+            instance.setIssueDate(issued);\n+            return this;\n+        }\n+\n+        public U2FRegisteredDevice.Builder record(final String record) {\n+            instance.setRecord(record);\n+            return this;\n+        }\n+\n+        public U2FRegisteredDevice.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public U2FRegisteredDevice.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public U2FRegisteredDevice.Builder id(final long id) {\n+            instance.setId(id);\n+            return this;\n+        }\n+\n+        public U2FRegisteredDevice build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"a87ca5188f8a0008ca373d48208147c495d02bed","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/U2FDeviceQuery.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FDeviceQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FDeviceQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FDeviceQuery.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.syncope.common.rest.api.beans.AbstractQuery;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.ws.rs.QueryParam;\n+\n+import java.util.Date;\n+\n+public class U2FDeviceQuery extends AbstractQuery {\n+    private static final long serialVersionUID = -7381828286332101171L;\n+\n+    private Long id;\n+\n+    private String entityKey;\n+\n+    private Date expirationDate;\n+\n+    private String owner;\n+\n+    @Parameter(name = JAXRSService.PARAM_ENTITY_KEY, in = ParameterIn.QUERY,\n+        schema = @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n+    public String getEntityKey() {\n+        return entityKey;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_ENTITY_KEY)\n+    public void setEntityKey(final String entityKey) {\n+        this.entityKey = entityKey;\n+    }\n+\n+    @Parameter(name = \"id\", in = ParameterIn.QUERY, schema = @Schema(implementation = Long.class))\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @QueryParam(\"id\")\n+    public void setId(final Long id) {\n+        this.id = id;\n+    }\n+\n+    @Parameter(name = \"expirationDate\", in = ParameterIn.QUERY, schema = @Schema(implementation = Date.class))\n+    public Date getExpirationDate() {\n+        return expirationDate;\n+    }\n+\n+    @QueryParam(\"expirationDate\")\n+    public void setExpirationDate(final Date expirationDate) {\n+        this.expirationDate = expirationDate;\n+    }\n+\n+    @Parameter(name = \"owner\", in = ParameterIn.QUERY, schema = @Schema(implementation = String.class))\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    @QueryParam(\"owner\")\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    public static class Builder extends AbstractQuery.Builder<U2FDeviceQuery, U2FDeviceQuery.Builder> {\n+        @Override\n+        protected U2FDeviceQuery newInstance() {\n+            return new U2FDeviceQuery();\n+        }\n+\n+        public U2FDeviceQuery.Builder entityKey(final String entityKey) {\n+            getInstance().setEntityKey(entityKey);\n+            return this;\n+        }\n+\n+        public U2FDeviceQuery.Builder owner(final String owner) {\n+            getInstance().setOwner(owner);\n+            return this;\n+        }\n+\n+        public U2FDeviceQuery.Builder id(final Long id) {\n+            getInstance().setId(id);\n+            return this;\n+        }\n+\n+        public U2FDeviceQuery.Builder expirationDate(final Date date) {\n+            getInstance().setExpirationDate(date);\n+            return this;\n+        }\n+    }\n+}"},{"sha":"4a47c2543f4c31e8003f7374a6864397ab4ca22f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/U2FRegistrationService.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Tag(name = \"U2F Registrations\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"wa/u2f\")\n+public interface U2FRegistrationService extends JAXRSService {\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"devices\")\n+    Response delete(@BeanParam U2FDeviceQuery query);\n+\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"U2FRegistration successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\")})})\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"devices\")\n+    Response create(@NotNull U2FRegisteredDevice acct);\n+\n+    @PUT\n+    @Path(\"devices\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    void update(@NotNull U2FRegisteredDevice acct);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"devices\")\n+    PagedResult<U2FRegisteredDevice> search(@BeanParam U2FDeviceQuery query);\n+\n+    @GET\n+    @Path(\"{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    U2FRegisteredDevice read(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"94bfcbc520b794daf5546280dedc6e8a0de3b1fa","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthTokenLogic.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -115,7 +115,6 @@ public GoogleMfaAuthToken save(final GoogleMfaAuthToken token) {\n                 filter(t -> t.getToken().equals(token.getToken())).\n                 findFirst().\n                 orElse(null);\n-\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n@@ -191,9 +190,9 @@ protected AuthProfileTO resolveReference(final Method method, final Object... ar\n                 return authProfileDAO.findByKey(key).\n                         map(authProfileDataBinder::getAuthProfileTO).\n                         orElseThrow();\n-            } catch (Throwable ignore) {\n-                LOG.debug(\"Unresolved reference\", ignore);\n-                throw new UnresolvedReferenceException(ignore);\n+            } catch (final Throwable ex) {\n+                LOG.debug(\"Unresolved reference\", ex);\n+                throw new UnresolvedReferenceException(ex);\n             }\n         }\n "},{"sha":"a6232cc2180feade3277a10d22e9f67ae5adb22c","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/U2FRegistrationLogic.java","status":"added","additions":238,"deletions":0,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FU2FRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FU2FRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FU2FRegistrationLogic.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -0,0 +1,238 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.CompareToBuilder;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.reflect.Method;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class U2FRegistrationLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n+    @Autowired\n+    private AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AuthProfileDataBinder authProfileDataBinder;\n+\n+    @Override\n+    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String key = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuthProfileTO) {\n+                    key = ((AuthProfileTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return authProfileDAO.findByKey(key).\n+                    map(authProfileDataBinder::getAuthProfileTO).\n+                    orElseThrow();\n+            } catch (final Throwable e) {\n+                LOG.debug(\"Unresolved reference\", e);\n+                throw new UnresolvedReferenceException(e);\n+            }\n+        }\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SAVE_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public U2FRegisteredDevice save(final U2FRegisteredDevice acct) {\n+        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n+            orElseGet(() -> {\n+                final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+                authProfile.setOwner(acct.getOwner());\n+                return authProfile;\n+            });\n+\n+        if (acct.getKey() == null) {\n+            acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+        profile.add(acct);\n+        profile = authProfileDAO.save(profile);\n+        return profile.getU2FRegisteredDevices().\n+            stream().\n+            filter(Objects::nonNull).\n+            filter(t -> t.getKey().equals(acct.getKey())).\n+            findFirst().\n+            orElse(null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_READ_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public U2FRegisteredDevice read(final String key) {\n+        return authProfileDAO.findAll().\n+            stream().\n+            map(AuthProfile::getU2FRegisteredDevices).\n+            filter(Objects::nonNull).\n+            flatMap(List::stream).\n+            filter(record -> record.getKey().equals(key)).\n+            findFirst().\n+            orElse(null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_DELETE_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String entityKey, final Long id, final Date expirationDate) {\n+        List<AuthProfile> profiles = authProfileDAO.findAll();\n+        profiles.forEach(profile -> {\n+            List<U2FRegisteredDevice> devices = profile.getU2FRegisteredDevices();\n+            if (devices != null) {\n+                if (StringUtils.isNotBlank(entityKey)) {\n+                    devices.removeIf(device -> device.getKey().equals(entityKey));\n+                } else if (id != null) {\n+                    devices.removeIf(device -> device.getId() == id);\n+                } else if (expirationDate != null) {\n+                    devices.removeIf(device -> device.getIssueDate().compareTo(expirationDate) < 0);\n+                } else {\n+                    devices = List.of();\n+                }\n+                profile.setU2FRegisteredDevices(devices);\n+                authProfileDAO.save(profile);\n+            }\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SEARCH + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public Pair<Integer, List<U2FRegisteredDevice>> search(final String entityKey, final Integer page,\n+                                                           final Integer itemsPerPage, final Long id,\n+                                                           final Date expirationDate,\n+                                                           final List<OrderByClause> orderByClauses) {\n+        List<Comparator<U2FRegisteredDevice>> comparatorList = orderByClauses.\n+            stream().\n+            map(orderByClause -> {\n+                Comparator<U2FRegisteredDevice> comparator = null;\n+                if (orderByClause.getField().equals(\"id\")) {\n+                    comparator = (o1, o2) -> new CompareToBuilder().append(o1.getId(), o2.getId()).toComparison();\n+                }\n+                if (orderByClause.getField().equals(\"owner\")) {\n+                    comparator = (o1, o2) -> new CompareToBuilder().append(o1.getOwner(), o2.getOwner()).toComparison();\n+                }\n+                if (orderByClause.getField().equals(\"key\")) {\n+                    comparator = (o1, o2) -> new CompareToBuilder().append(o1.getKey(), o2.getKey()).toComparison();\n+                }\n+                if (orderByClause.getField().equals(\"issueDate\")) {\n+                    comparator = (o1, o2) ->\n+                        new CompareToBuilder().append(o1.getIssueDate(), o2.getIssueDate()).toComparison();\n+                }\n+                if (orderByClause.getField().equals(\"record\")) {\n+                    comparator = (o1, o2) ->\n+                        new CompareToBuilder().append(o1.getRecord(), o2.getRecord()).toComparison();\n+                }\n+                if (comparator != null) {\n+                    if (orderByClause.getDirection() == OrderByClause.Direction.DESC) {\n+                        return comparator.reversed();\n+                    }\n+                    return comparator;\n+                }\n+                return null;\n+            }).\n+            filter(Objects::nonNull).\n+            collect(Collectors.toList());\n+\n+        List<U2FRegisteredDevice> devices = authProfileDAO.findAll().\n+            stream().\n+            map(AuthProfile::getU2FRegisteredDevices).\n+            filter(Objects::nonNull).\n+            flatMap(List::stream).\n+            filter(device -> {\n+                EqualsBuilder builder = new EqualsBuilder();\n+                if (StringUtils.isNotBlank(entityKey)) {\n+                    builder.append(entityKey, device.getKey());\n+                }\n+                if (id != null) {\n+                    builder.append(id, (Long) device.getId());\n+                }\n+                if (expirationDate != null) {\n+                    builder.appendSuper(device.getIssueDate().compareTo(expirationDate) >= 0);\n+                }\n+                return true;\n+            }).\n+            filter(Objects::nonNull).\n+            collect(Collectors.toList());\n+\n+        List<U2FRegisteredDevice> pagedResults = devices.\n+            stream().\n+            limit(itemsPerPage).\n+            skip(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n+            sorted((o1, o2) -> {\n+                int result;\n+                for (Comparator<U2FRegisteredDevice> comparator : comparatorList) {\n+                    result = comparator.compare(o1, o2);\n+                    if (result != 0) {\n+                        return result;\n+                    }\n+                }\n+                return 0;\n+            })\n+            .collect(Collectors.toList());\n+        return Pair.of(devices.size(), pagedResults);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_UPDATE_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void update(final U2FRegisteredDevice acct) {\n+        List<AuthProfile> profiles = authProfileDAO.findAll();\n+        profiles.forEach(profile -> {\n+            List<U2FRegisteredDevice> devices = profile.getU2FRegisteredDevices();\n+            if (devices != null) {\n+                if (devices.removeIf(device -> device.getKey().equals(acct.getKey()))) {\n+                    devices.add(acct);\n+                    profile.setU2FRegisteredDevices(devices);\n+                    authProfileDAO.save(profile);\n+                }\n+            }\n+        });\n+    }\n+}"},{"sha":"16912be4c843b645daccea8506c96072d3259cfc","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/U2FRegistrationServiceImpl.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.U2FDeviceQuery;\n+import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n+import org.apache.syncope.core.logic.U2FRegistrationLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+@Service\n+public class U2FRegistrationServiceImpl extends AbstractServiceImpl implements U2FRegistrationService {\n+    @Autowired\n+    private U2FRegistrationLogic logic;\n+\n+    @Override\n+    public Response delete(final U2FDeviceQuery query) {\n+        logic.delete(query.getEntityKey(), query.getId(), query.getExpirationDate());\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public void update(final U2FRegisteredDevice acct) {\n+        logic.update(acct);\n+    }\n+\n+    @Override\n+    public Response create(final U2FRegisteredDevice acct) {\n+        final U2FRegisteredDevice token = logic.save(acct);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n+            entity(token).\n+            build();\n+    }\n+\n+    @Override\n+    public PagedResult<U2FRegisteredDevice> search(final U2FDeviceQuery query) {\n+        Pair<Integer, List<U2FRegisteredDevice>> result = logic.search(\n+            query.getEntityKey(),\n+            query.getPage(),\n+            query.getSize(),\n+            query.getId(),\n+            query.getExpirationDate(),\n+            getOrderByClauses(query.getOrderBy()));\n+        return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n+    }\n+    \n+    @Override\n+    public U2FRegisteredDevice read(final String key) {\n+        return logic.read(key);\n+    }\n+}"},{"sha":"b6428b734081ac09555264a4f81cebda94873050","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -21,6 +21,7 @@\n \n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n \n import java.util.List;\n@@ -30,16 +31,22 @@ public interface AuthProfile extends Entity {\n     String getOwner();\n \n     void setOwner(String owner);\n-    \n+\n     List<GoogleMfaAuthToken> getGoogleMfaAuthTokens();\n \n     void setGoogleMfaAuthTokens(List<GoogleMfaAuthToken> tokens);\n \n+    List<U2FRegisteredDevice> getU2FRegisteredDevices();\n+\n+    void setU2FRegisteredDevices(List<U2FRegisteredDevice> records);\n+\n     List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts();\n \n     void setGoogleMfaAuthAccounts(List<GoogleMfaAuthAccount> accounts);\n \n     void add(GoogleMfaAuthToken token);\n \n     void add(GoogleMfaAuthAccount account);\n+\n+    void add(U2FRegisteredDevice account);\n }"},{"sha":"a830b1bb8d4e74344e481e2daf69cd43448bf828","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -42,6 +43,9 @@ public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthPr\n \n     private static final long serialVersionUID = 57352617217394093L;\n \n+    @Lob\n+    private String u2fRegisteredDevices;\n+\n     @Lob\n     private String googleMfaAuthAccounts;\n \n@@ -95,11 +99,32 @@ public void add(final GoogleMfaAuthToken token) {\n         setGoogleMfaAuthTokens(tokens);\n     }\n \n+    @Override\n+    public List<U2FRegisteredDevice> getU2FRegisteredDevices() {\n+        return u2fRegisteredDevices == null\n+            ? new ArrayList<>(0)\n+            : POJOHelper.deserialize(u2fRegisteredDevices, new TypeReference<List<U2FRegisteredDevice>>() {\n+        });\n+    }\n+\n+    @Override\n+    public void setU2FRegisteredDevices(final List<U2FRegisteredDevice> records) {\n+        this.u2fRegisteredDevices = POJOHelper.serialize(records);\n+    }\n+\n     @Override\n     public void add(final GoogleMfaAuthAccount account) {\n         checkType(account, GoogleMfaAuthAccount.class);\n         final List<GoogleMfaAuthAccount> accounts = getGoogleMfaAuthAccounts();\n         accounts.add(account);\n         setGoogleMfaAuthAccounts(accounts);\n     }\n+\n+    @Override\n+    public void add(final U2FRegisteredDevice registration) {\n+        checkType(registration, U2FRegisteredDevice.class);\n+        final List<U2FRegisteredDevice> records = getU2FRegisteredDevices();\n+        records.add(registration);\n+        setU2FRegisteredDevices(records);\n+    }\n }"},{"sha":"137e7999de09a502d9428b27cb11272034717ad5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n@@ -69,7 +70,28 @@ public void googleMfaToken() {\n         assertTrue(result.isPresent());\n \n         authProfile.setOwner(\"SyncopeCreate-New\");\n-        authProfile.getGoogleMfaAuthTokens().clear();\n+        authProfile.setGoogleMfaAuthTokens(List.of());\n+        authProfileDAO.save(authProfile);\n+\n+        assertFalse(authProfileDAO.findByOwner(id).isPresent());\n+    }\n+\n+    @Test\n+    public void u2fRegisteredDevice() {\n+        String id = SecureRandomUtils.generateRandomUUID().toString();\n+        createAuthProfileWithU2FDevice(id, \"{ 'record': 1 }\");\n+\n+        Optional<AuthProfile> result = authProfileDAO.findByOwner(id);\n+        assertTrue(result.isPresent());\n+\n+        assertFalse(authProfileDAO.findAll().isEmpty());\n+\n+        AuthProfile authProfile = result.get();\n+        result = authProfileDAO.findByKey(authProfile.getKey());\n+        assertTrue(result.isPresent());\n+\n+        authProfile.setOwner(\"SyncopeCreate-NewU2F\");\n+        authProfile.setU2FRegisteredDevices(List.of());\n         authProfileDAO.save(authProfile);\n \n         assertFalse(authProfileDAO.findByOwner(id).isPresent());\n@@ -112,6 +134,18 @@ private AuthProfile createAuthProfileWithToken(final String owner, final Integer\n         return authProfileDAO.save(profile);\n     }\n \n+    private AuthProfile createAuthProfileWithU2FDevice(final String owner, final String record) {\n+        AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n+        profile.setOwner(owner);\n+        U2FRegisteredDevice token = new U2FRegisteredDevice.Builder()\n+            .issueDate(new Date())\n+            .record(record)\n+            .owner(owner)\n+            .build();\n+        profile.add(token);\n+        return authProfileDAO.save(profile);\n+    }\n+\n     private AuthProfile createAuthProfileWithAccount(final String owner) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);"},{"sha":"881063f3e973078cc216253baa3b361547ed0e8b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -149,6 +149,7 @@\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n+import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n import org.apache.syncope.fit.core.CoreITContext;\n import org.apache.syncope.fit.core.UserITCase;\n import org.identityconnectors.common.security.Encryptor;\n@@ -349,6 +350,8 @@ public abstract class AbstractITCase {\n \n     protected static OIDCJWKSConfService oidcJwksConfService;\n \n+    protected static U2FRegistrationService u2FRegistrationService;\n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = Encryptor.class.getResourceAsStream(\"/security.properties\")) {\n@@ -431,6 +434,7 @@ public static void restSetup() {\n         authProfileService = adminClient.getService(AuthProfileService.class);\n         oidcJwksService = adminClient.getService(OIDCJWKSService.class);\n         oidcJwksConfService = adminClient.getService(OIDCJWKSConfService.class);\n+        u2FRegistrationService = adminClient.getService(U2FRegistrationService.class);\n     }\n \n     @Autowired"},{"sha":"4d75b8f9f849352127ae346a1a41532e44d8deb6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/U2FRegistrationITCase.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FU2FRegistrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FU2FRegistrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FU2FRegistrationITCase.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.U2FDeviceQuery;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class U2FRegistrationITCase extends AbstractITCase {\n+    private static U2FRegisteredDevice createDeviceRegistration() {\n+        return new U2FRegisteredDevice.Builder()\n+            .owner(UUID.randomUUID().toString())\n+            .issueDate(new Date())\n+            .id(System.currentTimeMillis())\n+            .record(\"{\\\"keyHandle\\\":\\\"2_QYgDSPYcOgYBGBe8c9PVCunjigbD-3o5HcliXhu-Up_GKckYMxxVF6AgSPWubqfWy8WmJNDYQEJ1QKZe343Q\\\",\" +\n+                \"\\\"publicKey\\\":\\\"BMj46cH-lHkRMovZhrusmm_fYL_sFausDPJIDZfx4pIiRqRNtasd4vU3yJyrTXXbdxyD36GZLx1WKLHGmApv7Nk\\\"\" +\n+                \",\\\"counter\\\":-1,\\\"compromised\\\":false}\")\n+            .build();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().build());\n+    }\n+\n+    @Test\n+    public void create() {\n+        U2FRegisteredDevice acct = createDeviceRegistration();\n+        assertDoesNotThrow(() -> {\n+            Response response = u2FRegistrationService.create(acct);\n+            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+                if (ex != null) {\n+                    throw ex;\n+                }\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void count() {\n+        U2FRegisteredDevice acct = createDeviceRegistration();\n+        Response response = u2FRegistrationService.create(acct);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(u2FRegistrationService.read(key));\n+        Date date = Date.from(LocalDate.now().minusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\n+        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n+            .owner(acct.getOwner())\n+            .expirationDate(date)\n+            .build();\n+        List<U2FRegisteredDevice> devices = u2FRegistrationService.search(query).getResult();\n+        assertEquals(1, devices.size());\n+\n+        query = new U2FDeviceQuery.Builder()\n+            .id(acct.getId())\n+            .build();\n+        u2FRegistrationService.delete(query);\n+\n+        query = new U2FDeviceQuery.Builder().build();\n+        devices = u2FRegistrationService.search(query).getResult();\n+        assertTrue(devices.isEmpty());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        U2FRegisteredDevice acct1 = createDeviceRegistration();\n+        Response response = u2FRegistrationService.create(acct1);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(u2FRegistrationService.read(key));\n+\n+        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n+            .entityKey(key)\n+            .build();\n+        u2FRegistrationService.delete(query);\n+        assertNull(u2FRegistrationService.read(key));\n+\n+        Date date = Date.from(LocalDate.now().plusDays(1)\n+            .atStartOfDay(ZoneId.systemDefault()).toInstant());\n+        query = new U2FDeviceQuery.Builder()\n+            .expirationDate(date)\n+            .build();\n+        u2FRegistrationService.delete(query);\n+\n+        query = new U2FDeviceQuery.Builder()\n+            .expirationDate(date)\n+            .build();\n+        assertTrue(u2FRegistrationService.search(query).getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void update() {\n+        U2FRegisteredDevice acct1 = createDeviceRegistration();\n+        Response response = u2FRegistrationService.create(acct1);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        acct1 = u2FRegistrationService.read(key);\n+        assertNotNull(acct1);\n+        acct1.setOwner(\"NewOwner\");\n+        u2FRegistrationService.update(acct1);\n+        acct1 = u2FRegistrationService.read(key);\n+        assertEquals(\"NewOwner\", acct1.getOwner());\n+\n+    }\n+}"},{"sha":"133129ce4f3e28d348090df86733600492502e93","filename":"pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -1634,7 +1634,12 @@ under the License.\n       </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n-        <artifactId>cas-server-support-rest-service-registry</artifactId>\n+        <artifactId>cas-server-support-u2f</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-u2f-core</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n       <dependency>"},{"sha":"ad9d115bb4c800f9b303e4f316cb3d723ec26067","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -27,8 +27,8 @@\n import org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n@@ -263,7 +263,7 @@ private static void mapSaml2IdPAuthModuleConf(\n         props.setAttributeConsumingServiceIndex(conf.getAttributeConsumingServiceIndex());\n         props.setAuthnContextClassRef(conf.getAuthnContextClassRefs());\n         props.setAuthnContextComparisonType(conf.getAuthnContextComparisonType());\n-        props.setBlockedSignatureSigningAlgorithms(conf.getBlackListedSignatureSigningAlgorithms());\n+        props.setBlockedSignatureSigningAlgorithms(conf.getBlockedSignatureSigningAlgorithms());\n         props.setDestinationBinding(conf.getDestinationBinding());\n         props.setIdentityProviderMetadataPath(conf.getIdentityProviderMetadataPath());\n         props.setKeystoreAlias(conf.getKeystoreAlias());"},{"sha":"5f57937c314abcc956b86238c9b964bceaed737a","filename":"wa/starter/pom.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -216,7 +216,11 @@ under the License.\n     </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n-      <artifactId>cas-server-support-rest-service-registry</artifactId>\n+      <artifactId>cas-server-support-u2f</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-u2f-core</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>"},{"sha":"343497b0c68191e66327e8995c22c71edd41a09a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":32,"deletions":12,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.syncope.wa.starter.config;\n \n+import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRepository;\n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n import org.apereo.cas.otp.repository.credentials.OneTimeTokenCredentialRepository;\n import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n@@ -30,9 +32,13 @@\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n+import org.apereo.cas.util.DateTimeUtils;\n import org.apereo.cas.util.crypto.CipherExecutor;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n import com.warrenstrange.googleauth.IGoogleAuthenticator;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n@@ -54,16 +60,19 @@\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n import org.apache.syncope.wa.starter.services.SyncopeWAServiceRegistry;\n+import org.apache.syncope.wa.starter.u2f.SyncopeWAU2FDeviceRepository;\n import org.pac4j.core.client.Client;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n-import org.springframework.context.ApplicationContext;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n+import java.time.LocalDate;\n+import java.time.ZoneId;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n@@ -85,39 +94,37 @@ public class SyncopeWAConfiguration {\n     @Qualifier(\"serviceRegistryListeners\")\n     private Collection<ServiceRegistryListener> serviceRegistryListeners;\n \n-    @Autowired\n-    private ApplicationContext ctx;\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public RegisteredServiceMapper registeredServiceMapper() {\n         Map<String, AuthMapper> authPolicyConfMappers = new HashMap<>();\n-        ctx.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n-            AuthMapFor authMapFor = ctx.findAnnotationOnBean(name, AuthMapFor.class);\n+        applicationContext.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n+            AuthMapFor authMapFor = applicationContext.findAnnotationOnBean(name, AuthMapFor.class);\n             if (authMapFor != null) {\n                 authPolicyConfMappers.put(authMapFor.authPolicyConfClass().getName(), bean);\n             }\n         });\n \n         Map<String, AccessMapper> accessPolicyConfMappers = new HashMap<>();\n-        ctx.getBeansOfType(AccessMapper.class).forEach((name, bean) -> {\n-            AccessMapFor accessMapFor = ctx.findAnnotationOnBean(name, AccessMapFor.class);\n+        applicationContext.getBeansOfType(AccessMapper.class).forEach((name, bean) -> {\n+            AccessMapFor accessMapFor = applicationContext.findAnnotationOnBean(name, AccessMapFor.class);\n             if (accessMapFor != null) {\n                 accessPolicyConfMappers.put(accessMapFor.accessPolicyConfClass().getName(), bean);\n             }\n         });\n \n         Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers = new HashMap<>();\n-        ctx.getBeansOfType(AttrReleaseMapper.class).forEach((name, bean) -> {\n-            AttrReleaseMapFor attrReleaseMapFor = ctx.findAnnotationOnBean(name, AttrReleaseMapFor.class);\n+        applicationContext.getBeansOfType(AttrReleaseMapper.class).forEach((name, bean) -> {\n+            AttrReleaseMapFor attrReleaseMapFor =\n+                applicationContext.findAnnotationOnBean(name, AttrReleaseMapFor.class);\n             if (attrReleaseMapFor != null) {\n                 attrReleasePolicyConfMappers.put(attrReleaseMapFor.attrReleasePolicyConfClass().getName(), bean);\n             }\n         });\n \n         Map<String, ClientAppMapper> clientAppTOMappers = new HashMap<>();\n-        ctx.getBeansOfType(ClientAppMapper.class).forEach((name, bean) -> {\n-            ClientAppMapFor clientAppMapFor = ctx.findAnnotationOnBean(name, ClientAppMapFor.class);\n+        applicationContext.getBeansOfType(ClientAppMapper.class).forEach((name, bean) -> {\n+            ClientAppMapFor clientAppMapFor = applicationContext.findAnnotationOnBean(name, ClientAppMapFor.class);\n             if (clientAppMapFor != null) {\n                 clientAppTOMappers.put(clientAppMapFor.clientAppClass().getName(), bean);\n             }\n@@ -192,6 +199,19 @@ public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(f\n         return new SyncopeWAOIDCJWKSGeneratorService(restClient);\n     }\n \n+    @Bean\n+    @Autowired\n+    @RefreshScope\n+    public U2FDeviceRepository u2fDeviceRepository(final WARestClient restClient) {\n+        U2FMultifactorProperties u2f = casProperties.getAuthn().getMfa().getU2f();\n+        final LocalDate expirationDate = LocalDate.now(ZoneId.systemDefault())\n+            .minus(u2f.getExpireDevices(), DateTimeUtils.toChronoUnit(u2f.getExpireDevicesTimeUnit()));\n+        final LoadingCache<String, String> requestStorage = Caffeine.newBuilder()\n+            .expireAfterWrite(u2f.getExpireRegistrations(), u2f.getExpireRegistrationsTimeUnit())\n+            .build(key -> StringUtils.EMPTY);\n+        return new SyncopeWAU2FDeviceRepository(requestStorage, restClient, expirationDate);\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"},{"sha":"2f18e608bf3739ff7744ba54494f0a3408748859","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/u2f/SyncopeWAU2FDeviceRepository.java","status":"added","additions":167,"deletions":0,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.u2f;\n+\n+import org.apereo.cas.adaptors.u2f.storage.BaseU2FDeviceRepository;\n+import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRegistration;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.rest.api.service.wa.U2FDeviceQuery;\n+import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class SyncopeWAU2FDeviceRepository extends BaseU2FDeviceRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAU2FDeviceRepository.class);\n+\n+    private final WARestClient waRestClient;\n+\n+    private final LocalDate expirationDate;\n+\n+    public SyncopeWAU2FDeviceRepository(final LoadingCache<String, String> requestStorage,\n+                                        final WARestClient waRestClient,\n+                                        final LocalDate expirationDate) {\n+        super(requestStorage, CipherExecutor.noOpOfSerializableToString());\n+        this.waRestClient = waRestClient;\n+        this.expirationDate = expirationDate;\n+    }\n+\n+    private static U2FDeviceRegistration parseRegistrationRecord(final U2FRegisteredDevice record) {\n+        try {\n+            return U2FDeviceRegistration.builder().\n+                id(record.getId()).\n+                username(record.getOwner()).\n+                record(record.getRecord()).\n+                createdDate(record.getIssueDate().\n+                    toInstant().\n+                    atZone(ZoneId.systemDefault()).\n+                    toLocalDate()).\n+                build();\n+        } catch (final Exception e) {\n+            LOG.error(e.getMessage(), e);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<? extends U2FDeviceRegistration> getRegisteredDevices(final String owner) {\n+        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n+            .owner(owner)\n+            .expirationDate(Date.from(Instant.from(expirationDate)))\n+            .build();\n+        final List<U2FRegisteredDevice> records = getU2FService().search(query).getResult();\n+        return records.\n+            stream().\n+            map(SyncopeWAU2FDeviceRepository::parseRegistrationRecord).\n+            filter(Objects::nonNull).\n+            collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Collection<? extends U2FDeviceRegistration> getRegisteredDevices() {\n+        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n+            .expirationDate(Date.from(Instant.from(expirationDate)))\n+            .build();\n+        final List<U2FRegisteredDevice> records = getU2FService().search(query).getResult();\n+        return records.\n+            stream().\n+            map(SyncopeWAU2FDeviceRepository::parseRegistrationRecord).\n+            filter(Objects::nonNull).\n+            collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public U2FDeviceRegistration registerDevice(final U2FDeviceRegistration registration) {\n+        U2FRegisteredDevice record = new U2FRegisteredDevice.Builder().\n+            issueDate(Date.from(registration.getCreatedDate().atStartOfDay()\n+                .atZone(ZoneId.systemDefault())\n+                .toInstant())).\n+            owner(registration.getUsername()).\n+            record(registration.getRecord()).\n+            id(registration.getId()).\n+            build();\n+        Response response = getU2FService().create(record);\n+        return parseRegistrationRecord(response.readEntity(new GenericType<U2FRegisteredDevice>() {\n+        }));\n+    }\n+\n+    @Override\n+    public void deleteRegisteredDevice(final U2FDeviceRegistration registration) {\n+        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n+            .id(registration.getId())\n+            .build();\n+        getU2FService().delete(query);\n+    }\n+\n+    @Override\n+    public boolean isDeviceRegisteredFor(final String owner) {\n+        try {\n+            Collection<? extends U2FDeviceRegistration> devices = getRegisteredDevices(owner);\n+            return devices != null && !devices.isEmpty();\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                LOG.info(\"Could not locate account for owner {}\", owner);\n+            } else {\n+                LOG.error(e.getMessage(), e);\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void clean() {\n+        Date date = Date.from(expirationDate.atStartOfDay()\n+            .atZone(ZoneId.systemDefault())\n+            .toInstant());\n+        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n+            .expirationDate(date)\n+            .build();\n+        getU2FService().delete(query);\n+    }\n+\n+    @Override\n+    public void removeAll() {\n+        getU2FService().delete(new U2FDeviceQuery.Builder().build());\n+    }\n+\n+    private U2FRegistrationService getU2FService() {\n+        if (!WARestClient.isReady()) {\n+            throw new RuntimeException(\"Syncope core is not yet ready\");\n+        }\n+        return waRestClient.getSyncopeClient().getService(U2FRegistrationService.class);\n+    }\n+}"},{"sha":"c69fcdb03338c8fc0407cddd377f2172238b8640","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c39efa167e9cc34a8d1d2c315454ae305a3a84/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=a8c39efa167e9cc34a8d1d2c315454ae305a3a84","patch":"@@ -21,7 +21,6 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.Collection;"}]}