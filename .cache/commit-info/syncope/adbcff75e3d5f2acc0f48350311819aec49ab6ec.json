{"sha":"adbcff75e3d5f2acc0f48350311819aec49ab6ec","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFkYmNmZjc1ZTNkNWYyYWNjMGY0ODM1MDMxMTgxOWFlYzQ5YWI2ZWM=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-10-05T08:09:43Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-10-05T08:09:43Z"},"message":"SYNCOPE-1589: WA WebAuthN Device Registration APIs (#216)","tree":{"sha":"9ece87531f28de9e1b4bccf4b47e9da548c8af8e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9ece87531f28de9e1b4bccf4b47e9da548c8af8e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/adbcff75e3d5f2acc0f48350311819aec49ab6ec","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfetTHCRBK7hj4Ov3rIwAAdHIIAJs8UFlooZs+3bDnrr5bgrsC\nOJF/6hu7n0apiwKbgA/sIlfV5VJYpA+GIIa6TkMn02d/5sWi3iiH+iRzJH9kdmOD\nIkxo52KAuNpAsvTRPMX2uStRrRfl82HuC0Y8J1nNwDnQmi6BJRgVTuCCL5U/v8nh\nBEkF98Rq4ayVCiKKlSVJw3c8tVFDmgchJCLHVCDNL5NN8vk07BF3fQTcK1e7yeQW\nKeexwbMFBxuWF+z0ZoLE1bGVPMVL7/GyuEbJzUKnwkAad0JYVcrPY3oL1uto2QZp\n1JPUotRwZJvu3+CIPCjshLxOQfdFCTsemG5dAo1ovHzGyjpxR8GtlKhzS82SfT8=\n=6QkC\n-----END PGP SIGNATURE-----\n","payload":"tree 9ece87531f28de9e1b4bccf4b47e9da548c8af8e\nparent fa82b8266c0c664c49d010d397a9ffb3f6ab4555\nauthor Misagh Moayyed <mm1844@gmail.com> 1601885383 +0400\ncommitter GitHub <noreply@github.com> 1601885383 +0330\n\nSYNCOPE-1589: WA WebAuthN Device Registration APIs (#216)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/adbcff75e3d5f2acc0f48350311819aec49ab6ec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/adbcff75e3d5f2acc0f48350311819aec49ab6ec","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/adbcff75e3d5f2acc0f48350311819aec49ab6ec/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"fa82b8266c0c664c49d010d397a9ffb3f6ab4555","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fa82b8266c0c664c49d010d397a9ffb3f6ab4555","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fa82b8266c0c664c49d010d397a9ffb3f6ab4555"}],"stats":{"total":940,"additions":940,"deletions":0},"files":[{"sha":"1aa48882f386b31ca91c7bdb46aae37e47edba27","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -130,6 +130,16 @@ public final class AMEntitlement {\n \n     public static final String WA_CONFIG_PUSH = \"WA_CONFIG_PUSH\";\n \n+    public static final String WEBAUTHN_DELETE_DEVICE = \"WEBAUTHN_DELETE_DEVICE\";\n+\n+    public static final String WEBAUTHN_READ_DEVICE = \"WEBAUTHN_READ_DEVICE\";\n+\n+    public static final String WEBAUTHN_UPDATE_DEVICE = \"WEBAUTHN_UPDATE_DEVICE\";\n+\n+    public static final String WEBAUTHN_CREATE_DEVICE = \"WEBAUTHN_CREATE_DEVICE\";\n+\n+    public static final String WEBAUTHN_LIST_DEVICE = \"WEBAUTHN_LIST_DEVICE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"1115f00b1d8369038eb0bbcd28eba14ef318c2e6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/WebAuthnAccount.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FWebAuthnAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FWebAuthnAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FWebAuthnAccount.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+import java.util.List;\n+\n+public class WebAuthnAccount implements BaseBean {\n+\n+    private static final long serialVersionUID = 2285073386484048953L;\n+\n+    private String key;\n+\n+    private List<WebAuthnDeviceCredential> records;\n+\n+    private String owner;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public List<WebAuthnDeviceCredential> getRecords() {\n+        return records;\n+    }\n+\n+    public void setRecords(final List<WebAuthnDeviceCredential> record) {\n+        this.records = record;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(key)\n+            .append(records)\n+            .append(owner)\n+            .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        WebAuthnAccount rhs = (WebAuthnAccount) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.key, rhs.key)\n+            .append(this.records, rhs.records)\n+            .append(this.owner, rhs.owner)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .append(\"key\", key)\n+            .append(\"records\", records)\n+            .append(\"owner\", owner)\n+            .toString();\n+    }\n+\n+    public static class Builder {\n+\n+        private final WebAuthnAccount instance = new WebAuthnAccount();\n+\n+        public WebAuthnAccount.Builder records(final List<WebAuthnDeviceCredential> records) {\n+            instance.setRecords(records);\n+            return this;\n+        }\n+\n+        public WebAuthnAccount.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public WebAuthnAccount.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public WebAuthnAccount build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"4a8225ee667688bebb9dfb0fcc8f7aa657e59782","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/WebAuthnDeviceCredential.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FWebAuthnDeviceCredential.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FWebAuthnDeviceCredential.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FWebAuthnDeviceCredential.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+public class WebAuthnDeviceCredential implements BaseBean {\n+\n+    private static final long serialVersionUID = 1185073386484048953L;\n+\n+    private String json;\n+\n+    private String owner;\n+\n+    private String identifier;\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public void setIdentifier(final String identifier) {\n+        this.identifier = identifier;\n+    }\n+\n+    public String getJson() {\n+        return json;\n+    }\n+\n+    public void setJson(final String json) {\n+        this.json = json;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(json)\n+            .append(identifier)\n+            .append(owner)\n+            .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        WebAuthnDeviceCredential rhs = (WebAuthnDeviceCredential) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.json, rhs.json)\n+            .append(this.identifier, rhs.identifier)\n+            .append(this.owner, rhs.owner)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .append(\"records\", json)\n+            .append(\"identifier\", identifier)\n+            .append(\"owner\", owner)\n+            .toString();\n+    }\n+\n+    public static class Builder {\n+\n+        private final WebAuthnDeviceCredential instance = new WebAuthnDeviceCredential();\n+\n+        public WebAuthnDeviceCredential.Builder json(final String json) {\n+            instance.setJson(json);\n+            return this;\n+        }\n+\n+        public WebAuthnDeviceCredential.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public WebAuthnDeviceCredential.Builder identifier(final String identifier) {\n+            instance.setIdentifier(identifier);\n+            return this;\n+        }\n+\n+        public WebAuthnDeviceCredential build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"fb3da8f7c59c876a107217f64178ca5490314870","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WebAuthnRegistrationService.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import java.util.List;\n+\n+@Tag(name = \"WA Registrations\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"wa/webauthn\")\n+public interface WebAuthnRegistrationService extends JAXRSService {\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    List<WebAuthnAccount> list();\n+\n+    @GET\n+    @Path(\"{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    WebAuthnAccount read(@NotNull @PathParam(\"key\") String key);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"users/${owner}\")\n+    WebAuthnAccount findAccountFor(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"${owner}\")\n+    Response delete(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"${owner}/${credentialId}\")\n+    Response delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"credentialId\") String credentialId);\n+\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"WebAuthn successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\")})})\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    Response create(WebAuthnAccount account);\n+\n+    @PUT\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    void update(@NotNull WebAuthnAccount account);\n+\n+}"},{"sha":"f644460a4f4501d9f4fa592e06327811ca45cf03","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/WebAuthnRegistrationServiceLogic.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWebAuthnRegistrationServiceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWebAuthnRegistrationServiceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWebAuthnRegistrationServiceLogic.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class WebAuthnRegistrationServiceLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n+    @Autowired\n+    private AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AuthProfileDataBinder authProfileDataBinder;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public WebAuthnAccount read(final String key) {\n+        return authProfileDAO.findAll().\n+            stream().\n+            map(AuthProfile::getWebAuthnAccount).\n+            filter(Objects::nonNull).\n+            filter(record -> record.getKey().equals(key)).\n+            findFirst().\n+            orElse(null);\n+    }\n+\n+    @Override\n+    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String key = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuthProfileTO) {\n+                    key = ((AuthProfileTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return authProfileDAO.findByKey(key).\n+                    map(authProfileDataBinder::getAuthProfileTO).\n+                    orElseThrow();\n+            } catch (final Throwable e) {\n+                LOG.debug(\"Unresolved reference\", e);\n+                throw new UnresolvedReferenceException(e);\n+            }\n+        }\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_LIST_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<WebAuthnAccount> list() {\n+        return authProfileDAO.findAll().stream().\n+            map(AuthProfile::getWebAuthnAccount).\n+            filter(Objects::nonNull).\n+            collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public WebAuthnAccount findAccountBy(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+            stream().\n+            map(AuthProfile::getWebAuthnAccount).\n+            filter(Objects::nonNull).\n+            findFirst().\n+            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_DELETE_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String owner) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n+            profile.setWebAuthnAccount(null);\n+            authProfileDAO.save(profile);\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_DELETE_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String owner, final String credentialId) {\n+        authProfileDAO.findByOwner(owner).\n+            stream().\n+            filter(Objects::nonNull).\n+            findFirst().\n+            ifPresent(profile -> {\n+                WebAuthnAccount webAuthnAccount = profile.getWebAuthnAccount();\n+                final List<WebAuthnDeviceCredential> accounts = webAuthnAccount.getRecords();\n+                if (accounts.removeIf(acct -> acct.getIdentifier().equals(credentialId))) {\n+                    profile.setWebAuthnAccount(webAuthnAccount);\n+                    authProfileDAO.save(profile);\n+                }\n+            });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_CREATE_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public WebAuthnAccount create(final WebAuthnAccount acct) {\n+        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n+            orElseGet(() -> {\n+                final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+                authProfile.setOwner(acct.getOwner());\n+                return authProfile;\n+            });\n+\n+        if (acct.getKey() == null) {\n+            acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+        profile.setWebAuthnAccount(acct);\n+        authProfileDAO.save(profile);\n+        return profile.getWebAuthnAccount();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_UPDATE_DEVICE + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void update(final WebAuthnAccount account) {\n+        List<AuthProfile> profiles = authProfileDAO.findAll();\n+        profiles.forEach(profile -> {\n+            if (profile.getWebAuthnAccount() != null) {\n+                profile.setWebAuthnAccount(account);\n+                authProfileDAO.save(profile);\n+            }\n+        });\n+    }\n+}"},{"sha":"2f45bfb0e7e40df60f6d3506cbee04b86ebb6683","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WebAuthnRegistrationServiceImpl.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n+import org.apache.syncope.core.logic.WebAuthnRegistrationServiceLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+@Service\n+public class WebAuthnRegistrationServiceImpl extends AbstractServiceImpl implements WebAuthnRegistrationService {\n+    @Autowired\n+    private WebAuthnRegistrationServiceLogic logic;\n+\n+    @Override\n+    public List<WebAuthnAccount> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public WebAuthnAccount read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public WebAuthnAccount findAccountFor(final String owner) {\n+        return logic.findAccountBy(owner);\n+    }\n+\n+    @Override\n+    public Response delete(final String owner) {\n+        logic.delete(owner);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response delete(final String owner, final String credentialId) {\n+        logic.delete(owner, credentialId);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response create(final WebAuthnAccount account) {\n+        final WebAuthnAccount token = logic.create(account);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n+            entity(token).\n+            build();\n+    }\n+\n+    @Override\n+    public void update(final WebAuthnAccount account) {\n+        logic.update(account);\n+    }\n+}"},{"sha":"2cdb4e05fd01733cc6b60cca503516e3decf2ec3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n \n import java.util.List;\n@@ -44,6 +45,10 @@ public interface AuthProfile extends Entity {\n \n     void setGoogleMfaAuthAccounts(List<GoogleMfaAuthAccount> accounts);\n \n+    WebAuthnAccount getWebAuthnAccount();\n+\n+    void setWebAuthnAccount(WebAuthnAccount accounts);\n+\n     void add(GoogleMfaAuthToken token);\n \n     void add(GoogleMfaAuthAccount account);"},{"sha":"d3b913e9cac0d9e583e0b56f1daf3d90005df618","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -51,6 +52,9 @@ public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthPr\n     @Lob\n     private String googleMfaAuthTokens;\n \n+    @Lob\n+    private String webAuthnAccount;\n+\n     @Column(nullable = false)\n     private String owner;\n \n@@ -111,6 +115,19 @@ public void setU2FRegisteredDevices(final List<U2FRegisteredDevice> records) {\n         this.u2fRegisteredDevices = POJOHelper.serialize(records);\n     }\n \n+    @Override\n+    public WebAuthnAccount getWebAuthnAccount() {\n+        return webAuthnAccount == null\n+            ? null\n+            : POJOHelper.deserialize(webAuthnAccount, new TypeReference<WebAuthnAccount>() {\n+        });\n+    }\n+\n+    @Override\n+    public void setWebAuthnAccount(final WebAuthnAccount accounts) {\n+        this.webAuthnAccount = POJOHelper.serialize(accounts);\n+    }\n+\n     @Override\n     public void add(final GoogleMfaAuthAccount account) {\n         checkType(account, GoogleMfaAuthAccount.class);"},{"sha":"cd5c56efbfe75dbabad209cf8808b59d598005a6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -21,6 +21,8 @@\n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n@@ -97,6 +99,44 @@ public void u2fRegisteredDevice() {\n         assertFalse(authProfileDAO.findByOwner(id).isPresent());\n     }\n \n+    @Test\n+    public void webAuthnRegisteredDevice() {\n+        String id = SecureRandomUtils.generateRandomUUID().toString();\n+        String record = \"[ {\" +\n+            \"    \\\"userIdentity\\\" : {\" +\n+            \"      \\\"name\\\" : \\\"casuser\\\",\" +\n+            \"      \\\"displayName\\\" : \\\"casuser\\\"\" +\n+            \"    },\" +\n+            \"    \\\"credential\\\" : {\" +\n+            \"      \\\"credentialId\\\" : \\\"fFGyV3K5x1\\\"\" +\n+            \"    },\" +\n+            \"    \\\"username\\\" : \\\"casuser\\\"\" +\n+            \"  } ]\";\n+\n+        WebAuthnDeviceCredential credential = new WebAuthnDeviceCredential.Builder().\n+            json(record).\n+            owner(id).\n+            identifier(\"fFGyV3K5x1\").\n+            build();\n+        \n+        createAuthProfileWithWebAuthnDevice(id, List.of(credential));\n+\n+        Optional<AuthProfile> result = authProfileDAO.findByOwner(id);\n+        assertTrue(result.isPresent());\n+\n+        assertFalse(authProfileDAO.findAll().isEmpty());\n+\n+        AuthProfile authProfile = result.get();\n+        result = authProfileDAO.findByKey(authProfile.getKey());\n+        assertTrue(result.isPresent());\n+\n+        authProfile.setOwner(\"SyncopeCreate-NewU2F\");\n+        authProfile.setWebAuthnAccount(null);\n+        authProfileDAO.save(authProfile);\n+\n+        assertFalse(authProfileDAO.findByOwner(id).isPresent());\n+    }\n+\n     @Test\n     public void googleMfaAccount() {\n         String id = SecureRandomUtils.generateRandomUUID().toString();\n@@ -146,6 +186,17 @@ private AuthProfile createAuthProfileWithU2FDevice(final String owner, final Str\n         return authProfileDAO.save(profile);\n     }\n \n+    private AuthProfile createAuthProfileWithWebAuthnDevice(final String owner, final List<WebAuthnDeviceCredential> records) {\n+        AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n+        profile.setOwner(owner);\n+        WebAuthnAccount account = new WebAuthnAccount.Builder()\n+            .records(records)\n+            .owner(owner)\n+            .build();\n+        profile.setWebAuthnAccount(account);\n+        return authProfileDAO.save(profile);\n+    }\n+\n     private AuthProfile createAuthProfileWithAccount(final String owner) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);"},{"sha":"904b6c08442b65db2cd1af0d057b25d33bd137c4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -145,6 +145,7 @@\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n+import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n import org.apache.syncope.fit.core.CoreITContext;\n import org.apache.syncope.fit.core.UserITCase;\n import org.junit.jupiter.api.BeforeAll;\n@@ -343,6 +344,8 @@ public abstract class AbstractITCase {\n \n     protected static WAConfigService waConfigService;\n \n+    protected static WebAuthnRegistrationService webAuthnRegistrationService;\n+\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/security.properties\")) {\n@@ -423,6 +426,7 @@ public static void restSetup() {\n         oidcJWKSService = adminClient.getService(OIDCJWKSService.class);\n         u2FRegistrationService = adminClient.getService(U2FRegistrationService.class);\n         waConfigService = adminClient.getService(WAConfigService.class);\n+        webAuthnRegistrationService = adminClient.getService(WebAuthnRegistrationService.class);\n     }\n \n     @Autowired"},{"sha":"ff872a0d84de8fc95f067a856c0026d11d0f497b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WebAuthnAccountITCase.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWebAuthnAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWebAuthnAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWebAuthnAccountITCase.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class WebAuthnAccountITCase extends AbstractITCase {\n+\n+    private static WebAuthnAccount createWebAuthnRegisteredAccount() {\n+        String id = SecureRandomUtils.generateRandomUUID().toString();\n+        String record = \"[ {\" +\n+            \"    \\\"userIdentity\\\" : {\" +\n+            \"      \\\"name\\\" : \\\"%s\\\",\" +\n+            \"      \\\"displayName\\\" : \\\"%s\\\"\" +\n+            \"    },\" +\n+            \"    \\\"credential\\\" : {\" +\n+            \"      \\\"credentialId\\\" : \\\"fFGyV3K5x1\\\"\" +\n+            \"    },\" +\n+            \"    \\\"username\\\" : \\\"%s\\\"\" +\n+            \"  } ]\";\n+        WebAuthnDeviceCredential credential = new WebAuthnDeviceCredential.Builder().\n+            json(String.format(record, id, id, id)).\n+            owner(id).\n+            identifier(\"fFGyV3K5x1\").\n+            build();\n+        return new WebAuthnAccount.Builder()\n+            .owner(id)\n+            .records(List.of(credential))\n+            .build();\n+    }\n+\n+    @Test\n+    public void listAndFind() {\n+        WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n+        webAuthnRegistrationService.create(acct);\n+        assertFalse(webAuthnRegistrationService.list().isEmpty());\n+        assertNotNull(webAuthnRegistrationService.findAccountFor(acct.getOwner()));\n+    }\n+\n+    @Test\n+    public void deleteByOwner() {\n+        WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n+        webAuthnRegistrationService.create(acct);\n+        assertNotNull(webAuthnRegistrationService.delete(acct.getOwner()));\n+        assertThrows(SyncopeClientException.class, () -> webAuthnRegistrationService.findAccountFor(acct.getOwner()));\n+    }\n+\n+    @Test\n+    public void deleteByAcct() {\n+        WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n+        webAuthnRegistrationService.create(acct);\n+        assertNotNull(webAuthnRegistrationService.delete(acct.getOwner(), acct.getRecords().get(0).getIdentifier()));\n+        acct = webAuthnRegistrationService.findAccountFor(acct.getOwner());\n+        assertTrue(acct.getRecords().isEmpty());\n+    }\n+\n+    @Test\n+    public void create() {\n+        WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n+        assertDoesNotThrow(() -> {\n+            Response response = webAuthnRegistrationService.create(acct);\n+            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+                if (ex != null) {\n+                    throw ex;\n+                }\n+            }\n+        });\n+    }\n+}"},{"sha":"b7977eca3ddbb944640da14e39e8f5071c9e86a3","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -65,6 +65,8 @@\n import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n import org.apereo.cas.util.DateTimeUtils;\n import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import org.apache.syncope.wa.starter.webauthn.SyncopeWAWebAuthnCredentialRepository;\n import org.pac4j.core.client.Client;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -82,6 +84,7 @@\n import org.apache.syncope.wa.starter.events.SyncopeWAEventRepository;\n import org.apereo.cas.support.events.CasEventRepository;\n import org.apereo.cas.support.events.CasEventRepositoryFilter;\n+import org.apereo.cas.webauthn.storage.WebAuthnCredentialRepository;\n \n public class SyncopeWAConfiguration {\n \n@@ -244,6 +247,13 @@ public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(f\n         return new SyncopeWAOIDCJWKSGeneratorService(restClient, size, algorithm);\n     }\n \n+    @RefreshScope\n+    @Bean\n+    @Autowired\n+    public WebAuthnCredentialRepository webAuthnCredentialRepository(final WARestClient restClient) {\n+        return new SyncopeWAWebAuthnCredentialRepository(casProperties, restClient);\n+    }\n+\n     @Bean\n     @Autowired\n     @RefreshScope"},{"sha":"0a4bb784db92b7375cb7f9cf12e60d9806c87c10","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/webauthn/SyncopeWAWebAuthnCredentialRepository.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/adbcff75e3d5f2acc0f48350311819aec49ab6ec/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/adbcff75e3d5f2acc0f48350311819aec49ab6ec/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java?ref=adbcff75e3d5f2acc0f48350311819aec49ab6ec","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.webauthn;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+import org.apereo.cas.webauthn.storage.BaseWebAuthnCredentialRepository;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.yubico.webauthn.data.CredentialRegistration;\n+import lombok.val;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n+import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.jooq.lambda.Unchecked;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class SyncopeWAWebAuthnCredentialRepository extends BaseWebAuthnCredentialRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAWebAuthnCredentialRepository.class);\n+\n+    private final WARestClient waRestClient;\n+\n+    public SyncopeWAWebAuthnCredentialRepository(final CasConfigurationProperties properties,\n+                                                 final WARestClient waRestClient) {\n+        super(properties, CipherExecutor.noOpOfStringToString());\n+        this.waRestClient = waRestClient;\n+    }\n+\n+    @Override\n+    public boolean removeRegistrationByUsername(final String username,\n+                                                final CredentialRegistration credentialRegistration) {\n+        val id = credentialRegistration.getCredential().getCredentialId().getHex();\n+        getService().delete(username, id);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean removeAllRegistrations(final String username) {\n+        getService().delete(username);\n+        return true;\n+    }\n+\n+    @Override\n+    protected Stream<CredentialRegistration> load() {\n+        return getService().list().\n+            stream().\n+            map(WebAuthnAccount::getRecords).\n+            flatMap(Collection::stream).\n+            map(Unchecked.function(record -> {\n+                String json = getCipherExecutor().decode(record.getJson());\n+                return getObjectMapper().readValue(json, new TypeReference<>() {\n+                });\n+            }));\n+    }\n+\n+    @Override\n+    protected void update(final String username, final Collection<CredentialRegistration> records) {\n+        try {\n+            List<WebAuthnDeviceCredential> devices = records.stream().\n+                map(Unchecked.function(record -> {\n+                    String json = getCipherExecutor().encode(getObjectMapper().writeValueAsString(record));\n+                    return new WebAuthnDeviceCredential.Builder().\n+                        json(json).\n+                        owner(username).\n+                        identifier(record.getCredential().getCredentialId().getHex()).\n+                        build();\n+                })).\n+                collect(Collectors.toList());\n+\n+            WebAuthnAccount account = getService().findAccountFor(username);\n+            if (account != null) {\n+                account.setRecords(devices);\n+                getService().update(account);\n+            } else {\n+                account = new WebAuthnAccount.Builder()\n+                    .owner(username)\n+                    .records(devices)\n+                    .build();\n+                getService().create(account);\n+            }\n+        } catch (final Exception e) {\n+            LOG.error(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<CredentialRegistration> getRegistrationsByUsername(final String username) {\n+        try {\n+            WebAuthnAccount account = getService().findAccountFor(username);\n+            if (account != null) {\n+\n+                return account.getRecords().stream().\n+                    map(Unchecked.function(record -> {\n+                        String json = getCipherExecutor().decode(record.getJson());\n+                        return getObjectMapper().readValue(json, new TypeReference<CredentialRegistration>() {\n+                        });\n+                    })).\n+                    collect(Collectors.toList());\n+            }\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                LOG.info(\"Could not locate account for {}\", username);\n+            } else {\n+                LOG.error(e.getMessage(), e);\n+            }\n+        } catch (final Exception e) {\n+            LOG.error(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    private WebAuthnRegistrationService getService() {\n+        if (!WARestClient.isReady()) {\n+            throw new RuntimeException(\"Syncope core is not yet ready\");\n+        }\n+        return waRestClient.getSyncopeClient().getService(WebAuthnRegistrationService.class);\n+    }\n+}"}]}