{"sha":"1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEzNDdjMTA4MWRkOWViM2UzMmFlMGIwZjM5ZTQ3ZmE1NDk4YWEzYzM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-26T09:55:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-26T09:55:14Z"},"message":"[SYNCOPE-714] Consolidating old buildSchemaNames and buildSupportedObjectClasses into new buildO\nbjectClassInfo","tree":{"sha":"bea1faa11cfeca01924a1e75272aaf95099b5a6b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bea1faa11cfeca01924a1e75272aaf95099b5a6b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"934398172f91b1128a0d3bac12c4a0ac2e1dea55","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/934398172f91b1128a0d3bac12c4a0ac2e1dea55","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/934398172f91b1128a0d3bac12c4a0ac2e1dea55"}],"stats":{"total":1580,"additions":668,"deletions":912},"files":[{"sha":"3e454d7442e7701ba2d1772b5257e9b37b0947e3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/connector/ConnectorListConfigurationProperties.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorListConfigurationProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorListConfigurationProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorListConfigurationProperties.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -37,8 +37,8 @@ public void list() {\n         if (input.getParameters().length >= 1) {\n             for (final String parameter : input.getParameters()) {\n                 try {\n-                    connectorResultManager.fromListConfigurationProperties(\n-                            connectorService.getConfigurationProperties(Long.valueOf(parameter)));\n+                    connectorResultManager.fromConfigurationProperties(\n+                            connectorService.read(Long.valueOf(parameter), null).getConf());\n                 } catch (final NumberFormatException ex) {\n                     connectorResultManager.managerNumberFormatException(\"connector\", parameter);\n                 } catch (final SyncopeClientException | WebServiceException ex) {"},{"sha":"7c72349cb8522ff981871b5812a9da334d0f74dc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/connector/ConnectorResultManager.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.cli.commands.connector;\n \n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n@@ -49,8 +48,8 @@ public void fromListBundles(final List<ConnBundleTO> connBundleTOs) {\n         }\n     }\n \n-    public void fromListConfigurationProperties(final List<ConnConfProperty> connConfPropertys) {\n-        printConfiguration(new HashSet<>(connConfPropertys));\n+    public void fromConfigurationProperties(final Set<ConnConfProperty> connConfPropertys) {\n+        printConfiguration(connConfPropertys);\n \n     }\n \n@@ -65,7 +64,7 @@ private void printConnector(final ConnInstanceTO connInstanceTO) {\n         System.out.println(\"    CAPABILITIES:\");\n         printCapabilities(connInstanceTO.getCapabilities());\n         System.out.println(\"    CONFIGURATION:\");\n-        printConfiguration(connInstanceTO.getConfiguration());\n+        printConfiguration(connInstanceTO.getConf());\n         System.out.println(\"    POOL CONFIGURATION:\");\n         printConfPool(connInstanceTO.getPoolConf());\n     }"},{"sha":"43944bd45b8a84039fdc1e1e515e8f0e0ac4aafa","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/ProvisioningModalPage.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -37,8 +37,6 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-import org.apache.syncope.common.lib.wrap.AbstractWrappable;\n-import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n@@ -227,26 +225,25 @@ public List<StatusBean> getStatusBeans() {\n \n     private void bulkAssociationAction(\n             final AjaxRequestTarget target,\n-            final ResourceDeassociationAction type,\n+            final ResourceDeassociationAction action,\n             final ActionDataTablePanel<StatusBean, String> table,\n             final List<IColumn<StatusBean, String>> columns) {\n \n-        final List<StatusBean> beans = new ArrayList<>(table.getModelObject());\n-        List<AnyKey> subjectKeys = new ArrayList<>();\n+        List<StatusBean> beans = new ArrayList<>(table.getModelObject());\n+        List<Long> anyKeys = new ArrayList<>();\n         for (StatusBean bean : beans) {\n-            LOG.debug(\"Selected bean {}\", bean);\n-            subjectKeys.add(AbstractWrappable.getInstance(AnyKey.class, bean.getAnyKey()));\n+            anyKeys.add(bean.getAnyKey());\n         }\n \n         if (beans.isEmpty()) {\n             window.close(target);\n         } else {\n-            final BulkActionResult res = resourceRestClient.bulkAssociationAction(\n-                    resourceTO.getKey(), anyTypeKind.name(), type, subjectKeys);\n+            BulkActionResult result =\n+                    resourceRestClient.bulkAssociationAction(resourceTO.getKey(), anyTypeKind.name(), action, anyKeys);\n \n             ((BasePage) pageRef.getPage()).setModalResult(true);\n \n-            setResponsePage(new BulkActionResultModalPage<>(window, beans, columns, res, \"anyKey\"));\n+            setResponsePage(new BulkActionResultModalPage<>(window, beans, columns, result, \"anyKey\"));\n         }\n     }\n }"},{"sha":"f02cbe9c7a45cb3ecfe48cbb00b372d1d57461a2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorModal.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -286,7 +286,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         // form - second tab (properties)\n         final ListView<ConnConfProperty> connPropView = new ConnConfPropertyListView(\"connectorProperties\",\n                 new PropertyModel<List<ConnConfProperty>>(this, \"properties\"),\n-                true, connInstanceTO.getConfiguration());\n+                true, connInstanceTO.getConf());\n         connPropView.setOutputMarkupId(true);\n         connectorPropForm.add(connPropView);\n \n@@ -353,8 +353,8 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 conn.setConnectorName(bundleTO.getConnectorName());\n                 conn.setBundleName(bundleTO.getBundleName());\n                 conn.setVersion(bundleTO.getVersion());\n-                conn.getConfiguration().clear();\n-                conn.getConfiguration().addAll(connPropView.getModelObject());\n+                conn.getConf().clear();\n+                conn.getConf().addAll(connPropView.getModelObject());\n \n                 // Set the model object's capabilities to capabilitiesPalette's converted Set\n                 conn.getCapabilities().clear();\n@@ -448,11 +448,11 @@ private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO, final\n                 final ConnConfProperty property = new ConnConfProperty();\n                 property.setSchema(key);\n                 if (connInstanceTO.getKey() != 0\n-                        && connInstanceTO.getConfigurationMap().containsKey(key.getName())\n-                        && connInstanceTO.getConfigurationMap().get(key.getName()).getValues() != null) {\n+                        && connInstanceTO.getConfMap().containsKey(key.getName())\n+                        && connInstanceTO.getConfMap().get(key.getName()).getValues() != null) {\n \n-                    property.getValues().addAll(connInstanceTO.getConfigurationMap().get(key.getName()).getValues());\n-                    property.setOverridable(connInstanceTO.getConfigurationMap().get(key.getName()).isOverridable());\n+                    property.getValues().addAll(connInstanceTO.getConfMap().get(key.getName()).getValues());\n+                    property.setOverridable(connInstanceTO.getConfMap().get(key.getName()).isOverridable());\n                 }\n \n                 if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {"},{"sha":"fdb9f837ab0dc278361ac46a27568f575e0f78fa","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceConnConfPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -79,7 +79,7 @@ public ResourceConnConfPanel(final String id, final ResourceTO resourceTO, final\n          */\n         final ListView<ConnConfProperty> connPropView = new ConnConfPropertyListView(\"connectorProperties\",\n                 new PropertyModel<List<ConnConfProperty>>(this, \"connConfProperties\"),\n-                false, resourceTO.getConnConfProperties());\n+                false, resourceTO.getConfOverride());\n         connPropView.setOutputMarkupId(true);\n         connConfPropContainer.add(connPropView);\n \n@@ -116,17 +116,17 @@ private List<ConnConfProperty> getConnConfProperties() {\n         List<ConnConfProperty> props = new ArrayList<>();\n         Long connectorKey = resourceTO.getConnector();\n         if (connectorKey != null && connectorKey > 0) {\n-            for (ConnConfProperty property : restClient.read(connectorKey).getConfiguration()) {\n+            for (ConnConfProperty property : restClient.read(connectorKey).getConf()) {\n                 if (property.isOverridable()) {\n                     props.add(property);\n                 }\n             }\n         }\n-        if (createFlag || resourceTO.getConnConfProperties().isEmpty()) {\n-            resourceTO.getConnConfProperties().clear();\n+        if (createFlag || resourceTO.getConfOverride().isEmpty()) {\n+            resourceTO.getConfOverride().clear();\n         } else {\n             Map<String, ConnConfProperty> valuedProps = new HashMap<>();\n-            for (ConnConfProperty prop : resourceTO.getConnConfProperties()) {\n+            for (ConnConfProperty prop : resourceTO.getConfOverride()) {\n                 valuedProps.put(prop.getSchema().getName(), prop);\n             }\n "},{"sha":"ceabd575781a91cab5ef5669c70adefbfe0fea5c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -25,6 +25,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.panels.ResourceConnConfPanel.ConnConfModEvent;\n@@ -36,6 +38,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MappingPurposePanel;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n@@ -156,7 +159,7 @@ public ResourceMappingPanel(final String id, final ResourceTO resourceTO, final\n         add(this.mappingContainer);\n \n         if (resourceTO.getConnector() != null && resourceTO.getConnector() > 0) {\n-            schemaNames = getSchemaNames(resourceTO.getConnector(), resourceTO.getConnConfProperties());\n+            schemaNames = getSchemaNames(resourceTO.getConnector(), resourceTO.getConfOverride());\n             setEnabled();\n         } else {\n             schemaNames = Collections.<String>emptyList();\n@@ -441,15 +444,24 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n     private List<String> getSchemaNames(final Long connectorId, final Set<ConnConfProperty> conf) {\n         final ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setKey(connectorId);\n-        connInstanceTO.getConfiguration().addAll(conf);\n+        connInstanceTO.getConf().addAll(conf);\n \n-        return connRestClient.getSchemaNames(connInstanceTO);\n+        // SYNCOPE-156: use provided info to give schema names (and type!) by ObjectClass\n+        return CollectionUtils.collect(connRestClient.buildObjectClassInfo(connInstanceTO, true),\n+                new Transformer<ConnIdObjectClassTO, String>() {\n+\n+                    @Override\n+                    public String transform(final ConnIdObjectClassTO input) {\n+                        return input.getType();\n+                    }\n+                },\n+                new ArrayList<String>());\n     }\n \n     private void setEnabled() {\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setKey(resourceTO.getConnector());\n-        connInstanceTO.getConfiguration().addAll(resourceTO.getConnConfProperties());\n+        connInstanceTO.getConf().addAll(resourceTO.getConfOverride());\n \n         boolean enabled = provisionTO != null;\n "},{"sha":"d48341138b0eb2abfb428f9690207fa9c7d368d5","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":12,"deletions":28,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -28,11 +28,10 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.springframework.beans.BeanUtils;\n@@ -57,9 +56,9 @@ public List<ConnInstanceTO> getAllConnectors() {\n     }\n \n     public void create(final ConnInstanceTO connectorTO) {\n-        Set<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConfiguration());\n-        connectorTO.getConfiguration().clear();\n-        connectorTO.getConfiguration().addAll(filteredConf);\n+        Set<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n+        connectorTO.getConf().clear();\n+        connectorTO.getConf().addAll(filteredConf);\n         getService(ConnectorService.class).create(connectorTO);\n     }\n \n@@ -83,9 +82,9 @@ public ConnInstanceTO read(final Long key) {\n     }\n \n     public void update(final ConnInstanceTO connectorTO) {\n-        Set<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConfiguration());\n-        connectorTO.getConfiguration().clear();\n-        connectorTO.getConfiguration().addAll(filteredConf);\n+        Set<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n+        connectorTO.getConf().clear();\n+        connectorTO.getConf().addAll(filteredConf);\n         getService(ConnectorService.class).update(connectorTO);\n     }\n \n@@ -139,7 +138,7 @@ private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> prope\n     public boolean check(final ConnInstanceTO connectorTO) {\n         ConnInstanceTO toBeChecked = new ConnInstanceTO();\n         BeanUtils.copyProperties(connectorTO, toBeChecked, new String[] { \"configuration\", \"configurationMap\" });\n-        toBeChecked.getConfiguration().addAll(filterProperties(connectorTO.getConfiguration()));\n+        toBeChecked.getConf().addAll(filterProperties(connectorTO.getConf()));\n \n         boolean check = false;\n         try {\n@@ -164,27 +163,12 @@ public boolean check(final ResourceTO resourceTO) {\n         return check;\n     }\n \n-    public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n-        List<String> schemaNames = new ArrayList<>();\n-        try {\n-            List<PlainSchemaTO> response = getService(ConnectorService.class).buildSchemaNames(connectorTO, false);\n-            for (PlainSchemaTO schema : response) {\n-                schemaNames.add(schema.getKey());\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"While getting schema names\", e);\n-        } finally {\n-            // re-order schema names list\n-            Collections.sort(schemaNames);\n-        }\n-\n-        return schemaNames;\n-    }\n+    public List<ConnIdObjectClassTO> buildObjectClassInfo(\n+            final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n-    public List<ConnIdObjectClass> getSupportedObjectClasses(final ConnInstanceTO connectorTO) {\n-        List<ConnIdObjectClass> result = Collections.emptyList();\n+        List<ConnIdObjectClassTO> result = Collections.emptyList();\n         try {\n-            result = getService(ConnectorService.class).buildSupportedObjectClasses(connectorTO);\n+            result = getService(ConnectorService.class).buildObjectClassInfo(connInstanceTO, includeSpecial);\n         } catch (Exception e) {\n             LOG.error(\"While getting supported object classes\", e);\n         }"},{"sha":"56283ab339270a68ed374caea7bf81a1e3fb0a80","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.LoggerWrapper;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.springframework.stereotype.Component;\n \n@@ -43,7 +43,7 @@ public List<LoggerTO> listLogs() {\n     }\n \n     public List<AuditLoggerName> listAudits() {\n-        return CollectionWrapper.wrapLogger(getService(LoggerService.class).list(LoggerType.AUDIT));\n+        return LoggerWrapper.wrap(getService(LoggerService.class).list(LoggerType.AUDIT));\n     }\n \n     public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {"},{"sha":"f5579cf02f1b52fb725518f7e82a23bce3cee49c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -21,11 +21,11 @@\n import java.util.List;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.springframework.stereotype.Component;\n \n@@ -82,8 +82,14 @@ public BulkActionResult bulkAction(final BulkAction action) {\n \n     public BulkActionResult bulkAssociationAction(\n             final String resourceName, final String anyTypeName,\n-            final ResourceDeassociationAction type, final List<AnyKey> anyKeys) {\n+            final ResourceDeassociationAction action, final List<Long> anyKeys) {\n \n-        return getService(ResourceService.class).bulkDeassociation(resourceName, anyTypeName, type, anyKeys);\n+        ResourceDeassociationPatch patch = new ResourceDeassociationPatch();\n+        patch.setKey(resourceName);\n+        patch.setAnyTypeKey(anyTypeName);\n+        patch.setAction(action);\n+        patch.getAnyKyes().addAll(anyKeys);\n+\n+        return getService(ResourceService.class).bulkDeassociation(patch);\n     }\n }"},{"sha":"97384989d4a8edf48675435dc6df5b93c7ea9308","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/ResourceDeassociationPatch.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FResourceDeassociationPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FResourceDeassociationPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FResourceDeassociationPatch.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+\n+@XmlRootElement(name = \"resourceDeassociationPatch\")\n+@XmlType\n+public class ResourceDeassociationPatch extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -9116268525079837276L;\n+\n+    private String key;\n+\n+    private String anyTypeKey;\n+\n+    private ResourceDeassociationAction action;\n+\n+    private final List<Long> anyKyes = new ArrayList<>();\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getAnyTypeKey() {\n+        return anyTypeKey;\n+    }\n+\n+    @PathParam(\"anyTypeKey\")\n+    public void setAnyTypeKey(final String anyTypeKey) {\n+        this.anyTypeKey = anyTypeKey;\n+    }\n+\n+    public ResourceDeassociationAction getAction() {\n+        return action;\n+    }\n+\n+    @PathParam(\"action\")\n+    public void setAction(final ResourceDeassociationAction action) {\n+        this.action = action;\n+    }\n+\n+    @XmlElementWrapper(name = \"anyKyes\")\n+    @XmlElement(name = \"key\")\n+    @JsonProperty(\"anyKyes\")\n+    public List<Long> getAnyKyes() {\n+        return anyKyes;\n+    }\n+\n+}"},{"sha":"be1b6d67b14a7618847f1594a9523d2f4ae70427","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnIdObjectClassTO.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnIdObjectClassTO.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+/**\n+ * Metadata description of ConnId ObjectClass.\n+ */\n+@XmlRootElement(name = \"connIdObjectClass\")\n+@XmlType\n+public class ConnIdObjectClassTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -3719658595689434648L;\n+\n+    private String type;\n+\n+    private boolean container;\n+\n+    private boolean auxiliary;\n+\n+    private final List<String> attributes = new ArrayList<>();\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(final String type) {\n+        this.type = type;\n+    }\n+\n+    public boolean isContainer() {\n+        return container;\n+    }\n+\n+    public void setContainer(final boolean container) {\n+        this.container = container;\n+    }\n+\n+    public boolean isAuxiliary() {\n+        return auxiliary;\n+    }\n+\n+    public void setAuxiliary(final boolean auxiliary) {\n+        this.auxiliary = auxiliary;\n+    }\n+\n+    @XmlElementWrapper(name = \"attributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributes\")\n+    public List<String> getAttributes() {\n+        return attributes;\n+    }\n+\n+}"},{"sha":"257f2eda4699df7e648264cad8d905e8cf9ede44","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":13,"deletions":25,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -51,23 +51,16 @@ public class ConnInstanceTO extends AbstractBaseBean {\n \n     private String version;\n \n-    private final Set<ConnConfProperty> configuration;\n+    private final Set<ConnConfProperty> conf = new HashSet<>();\n \n-    private final Set<ConnectorCapability> capabilities;\n+    private final Set<ConnectorCapability> capabilities = EnumSet.noneOf(ConnectorCapability.class);\n \n     private String displayName;\n \n     private Integer connRequestTimeout;\n \n     private ConnPoolConfTO poolConf;\n \n-    public ConnInstanceTO() {\n-        super();\n-\n-        configuration = new HashSet<>();\n-        capabilities = EnumSet.noneOf(ConnectorCapability.class);\n-    }\n-\n     public long getKey() {\n         return key;\n     }\n@@ -109,28 +102,23 @@ public void setVersion(final String version) {\n         this.version = version;\n     }\n \n-    @XmlElementWrapper(name = \"configuration\")\n+    @XmlElementWrapper(name = \"conf\")\n     @XmlElement(name = \"property\")\n-    @JsonProperty(\"configuration\")\n-    public Set<ConnConfProperty> getConfiguration() {\n-        return this.configuration;\n+    @JsonProperty(\"conf\")\n+    public Set<ConnConfProperty> getConf() {\n+        return this.conf;\n     }\n \n     @JsonIgnore\n-    public Map<String, ConnConfProperty> getConfigurationMap() {\n-        Map<String, ConnConfProperty> result;\n-\n-        if (getConfiguration() == null) {\n-            result = Collections.<String, ConnConfProperty>emptyMap();\n-        } else {\n-            result = new HashMap<>();\n-            for (ConnConfProperty prop : getConfiguration()) {\n-                result.put(prop.getSchema().getName(), prop);\n-            }\n-            result = Collections.unmodifiableMap(result);\n+    public Map<String, ConnConfProperty> getConfMap() {\n+        Map<String, ConnConfProperty> result = new HashMap<>();\n+\n+        for (ConnConfProperty prop : getConf()) {\n+            result.put(prop.getSchema().getName(), prop);\n         }\n+        result = Collections.unmodifiableMap(result);\n \n-        return result;\n+        return Collections.unmodifiableMap(result);\n     }\n \n     @XmlElementWrapper(name = \"capabilities\")"},{"sha":"fc540a9af63a05ea8d6f6fed89123773305d60e0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n+import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -32,6 +33,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n @XmlRootElement(name = \"resource\")\n@@ -76,7 +78,11 @@ public class ResourceTO extends AbstractAnnotatedBean {\n \n     private Long syncPolicy;\n \n-    private final Set<ConnConfProperty> connConfProperties = new HashSet<>();\n+    private final Set<ConnConfProperty> confOverride = new HashSet<>();\n+\n+    private boolean overrideCapabilities = false;\n+\n+    private final Set<ConnectorCapability> capabilitiesOverride = EnumSet.noneOf(ConnectorCapability.class);\n \n     private final List<String> propagationActionsClassNames = new ArrayList<>();\n \n@@ -203,11 +209,26 @@ public List<ProvisionTO> getProvisions() {\n         return provisions;\n     }\n \n-    @XmlElementWrapper(name = \"connConfProperties\")\n+    @XmlElementWrapper(name = \"confOverride\")\n     @XmlElement(name = \"property\")\n-    @JsonProperty(\"connConfProperties\")\n-    public Set<ConnConfProperty> getConnConfProperties() {\n-        return connConfProperties;\n+    @JsonProperty(\"confOverride\")\n+    public Set<ConnConfProperty> getConfOverride() {\n+        return confOverride;\n+    }\n+\n+    public boolean isOverrideCapabilities() {\n+        return overrideCapabilities;\n+    }\n+\n+    public void setOverrideCapabilities(final boolean overrideCapabilities) {\n+        this.overrideCapabilities = overrideCapabilities;\n+    }\n+\n+    @XmlElementWrapper(name = \"capabilitiesOverride\")\n+    @XmlElement(name = \"capability\")\n+    @JsonProperty(\"capabilitiesOverride\")\n+    public Set<ConnectorCapability> getCapabilitiesOverride() {\n+        return capabilitiesOverride;\n     }\n \n     public TraceLevel getSyncTraceLevel() {"},{"sha":"7ba0afad64fbe6d6570a8ebcd792117b653fca1b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/AbstractWrappable.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAbstractWrappable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAbstractWrappable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAbstractWrappable.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.wrap;\n-\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-\n-public abstract class AbstractWrappable<E> extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 1712808704911635170L;\n-\n-    private E element;\n-\n-    public static <E, T extends AbstractWrappable<E>> T getInstance(final Class<T> reference, final E element) {\n-        try {\n-            T instance = reference.newInstance();\n-            instance.setElement(element);\n-            return instance;\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Could not instantiate \" + reference.getName(), e);\n-        }\n-    }\n-\n-    public E getElement() {\n-        return element;\n-    }\n-\n-    public void setElement(final E element) {\n-        this.element = element;\n-    }\n-}"},{"sha":"0eb6eef82b29bad801dfa5929ff1f95b1479a7dc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/AnyKey.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAnyKey.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAnyKey.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FAnyKey.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.wrap;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement(name = \"anyKey\")\n-@XmlType\n-public class AnyKey extends AbstractWrappable<Long> {\n-\n-    private static final long serialVersionUID = -8664228651057889297L;\n-\n-}"},{"sha":"868b3f11f88cb35d050f9a718eb2b11b858073a6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/ConnIdObjectClass.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FConnIdObjectClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FConnIdObjectClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FConnIdObjectClass.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.wrap;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement(name = \"connIdObjectClass\")\n-@XmlType\n-public class ConnIdObjectClass extends AbstractWrappable<String> {\n-\n-    private static final long serialVersionUID = 613925852330408531L;\n-\n-}"},{"sha":"397cb66e9020b3f4615430489ea88da1c0c58499","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/package-info.java","status":"removed","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/934398172f91b1128a0d3bac12c4a0ac2e1dea55/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2Fpackage-info.java?ref=934398172f91b1128a0d3bac12c4a0ac2e1dea55","patch":"@@ -1,23 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-@XmlSchema(namespace = SyncopeConstants.NAMESPACE)\n-package org.apache.syncope.common.lib.wrap;\n-\n-import javax.xml.bind.annotation.XmlSchema;\n-import org.apache.syncope.common.lib.SyncopeConstants;"},{"sha":"9f9dfde84e5872ca7ae279f1cd5e8f4786818fad","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/LoggerWrapper.java","status":"renamed","additions":4,"deletions":28,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -20,42 +20,18 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.wrap.AbstractWrappable;\n \n-public final class CollectionWrapper {\n+public final class LoggerWrapper {\n \n-    private CollectionWrapper() {\n+    private LoggerWrapper() {\n         // empty constructor for static utility class\n     }\n \n-    public static <E, T extends AbstractWrappable<E>> List<T> wrap(final E element, final Class<T> reference) {\n-        return Collections.singletonList(AbstractWrappable.getInstance(reference, element));\n-    }\n-\n-    public static <E, T extends AbstractWrappable<E>> List<T> wrap(\n-            final Collection<E> collection, final Class<T> reference) {\n-\n-        List<T> response = new ArrayList<>();\n-        for (E element : collection) {\n-            response.add(AbstractWrappable.getInstance(reference, element));\n-        }\n-        return response;\n-    }\n-\n-    public static <T extends AbstractWrappable<String>> List<String> unwrap(final Collection<T> collection) {\n-        List<String> response = new ArrayList<>();\n-        for (T item : collection) {\n-            response.add(item.getElement());\n-        }\n-        return response;\n-    }\n-\n-    public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger) {\n+    public static List<AuditLoggerName> wrap(final Collection<LoggerTO> logger) {\n         List<AuditLoggerName> respons = new ArrayList<>();\n         for (LoggerTO loggerTO : logger) {\n             try {\n@@ -67,7 +43,7 @@ public static List<AuditLoggerName> wrapLogger(final Collection<LoggerTO> logger\n         return respons;\n     }\n \n-    public static List<LoggerTO> unwrapLogger(final Collection<AuditLoggerName> auditNames) {\n+    public static List<LoggerTO> unwrap(final Collection<AuditLoggerName> auditNames) {\n         List<LoggerTO> respons = new ArrayList<>();\n         for (AuditLoggerName name : auditNames) {\n             LoggerTO loggerTO = new LoggerTO();","previous_filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/CollectionWrapper.java"},{"sha":"bc111edce6a2b6ba6673fbdbde8e7dcf34544913","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":7,"deletions":22,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -35,9 +35,8 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n \n /**\n  * REST operations for connector bundles and instances.\n@@ -57,37 +56,23 @@ public interface ConnectorService extends JAXRSService {\n     List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\n \n     /**\n-     * Builds the list of schema names managed by the connector bundle matching the given connector instance key, with\n-     * the provided configuration.\n+     * Builds the list of ConnId object classes information for the connector bundle matching the given connector\n+     * instance key, with the provided configuration.\n      *\n      * @param connInstanceTO connector instance object providing configuration properties\n      * @param includeSpecial if set to true, special schema names (like '__PASSWORD__') will be included;\n      * default is false\n-     * @return schema names for the connector bundle matching the given connector instance key, with the provided\n-     * configuration\n+     * @return supported object classes info for the connector bundle matching the given connector instance key, with\n+     * the provided configuration\n      */\n     @POST\n-    @Path(\"{key}/schemaNames\")\n+    @Path(\"{key}/supportedObjectClasses\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<PlainSchemaTO> buildSchemaNames(\n+    List<ConnIdObjectClassTO> buildObjectClassInfo(\n             @NotNull ConnInstanceTO connInstanceTO,\n             @QueryParam(\"includeSpecial\") @DefaultValue(\"false\") boolean includeSpecial);\n \n-    /**\n-     * Builds the list of supported ConnId object classes for the connector bundle matching the given connector instance\n-     * key, with the provided configuration.\n-     *\n-     * @param connInstanceTO connector instance object providing configuration properties\n-     * @return supported object classes for the connector bundle matching the given connector instance key, with the\n-     * provided configuration\n-     */\n-    @POST\n-    @Path(\"{key}/supportedObjectClasses\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ConnIdObjectClass> buildSupportedObjectClasses(@NotNull ConnInstanceTO connInstanceTO);\n-\n     /**\n      * Returns connector instance with matching key.\n      *"},{"sha":"d5152682794892e7592f8d2cd3641b865ff77009","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -31,13 +31,12 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n \n /**\n@@ -143,19 +142,14 @@ PagedConnObjectTOResult listConnObjects(\n     /**\n      * De-associate any objects from the given resource.\n      *\n-     * @param key name of resource\n-     * @param anyTypeKey any object kind\n-     * @param type resource de-association action type\n-     * @param keys any object keys against which the bulk action will be performed\n-     * @return Response object featuring BulkActionResult as Entity\n+     * @param patch any objects to be used for propagation-related operations\n+     * @return Bulk action result\n      */\n     @POST\n     @Path(\"{key}/bulkDeassociation/{anyTypeKey}/{action}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    BulkActionResult bulkDeassociation(@NotNull @PathParam(\"key\") String key,\n-            @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n-            @NotNull @PathParam(\"action\") ResourceDeassociationAction type, @NotNull List<AnyKey> keys);\n+    BulkActionResult bulkDeassociation(@NotNull ResourceDeassociationPatch patch);\n \n     /**\n      * Executes the provided bulk action."},{"sha":"77ef94c16b452ea606a9955d343c4d1172384fbb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":26,"deletions":50,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -32,26 +32,26 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.AttributeInfo;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -93,7 +93,7 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_UPDATE + \"')\")\n     public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n-        ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getKey(), connInstanceTO);\n+        ConnInstance connInstance = binder.update(connInstanceTO.getKey(), connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (SyncopeClientException e) {\n@@ -193,7 +193,7 @@ public List<ConnBundleTO> getBundles(final String lang) {\n                 ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(bundle);\n \n                 for (String propName : properties.getPropertyNames()) {\n-                    connBundleTO.getProperties().add(binder.buildConnConfPropSchema(properties.getProperty(propName)));\n+                    connBundleTO.getProperties().add(binder.build(properties.getProperty(propName)));\n                 }\n \n                 connectorBundleTOs.add(connBundleTO);\n@@ -204,65 +204,41 @@ public List<ConnBundleTO> getBundles(final String lang) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<PlainSchemaTO> buildSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n+    public List<ConnIdObjectClassTO> buildObjectClassInfo(\n+            final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n+\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n         }\n \n-        // consider the possibility to receive overridden properties only\n-        Set<ConnConfProperty> conf =\n-                binder.mergeConnConfProperties(connInstanceTO.getConfiguration(), connInstance.getConfiguration());\n+        Set<ObjectClassInfo> objectClassInfo = connFactory.createConnector(\n+                connFactory.buildConnInstanceOverride(connInstance, connInstanceTO.getConf(), null)).\n+                getObjectClassInfo();\n \n-        // We cannot use Spring bean because this method could be used during resource definition or modification:\n-        // bean couldn't exist or couldn't be updated.\n-        // This is the reason why we should take a \"not mature\" connector facade proxy to ask for schema names.\n-        Set<String> schemaNames = connFactory.createConnector(connInstance, conf).getSchemaNames(includeSpecial);\n+        List<ConnIdObjectClassTO> result = new ArrayList<>(objectClassInfo.size());\n+        for (ObjectClassInfo info : objectClassInfo) {\n+            ConnIdObjectClassTO connIdObjectClassTO = new ConnIdObjectClassTO();\n+            connIdObjectClassTO.setType(info.getType());\n+            connIdObjectClassTO.setAuxiliary(info.isAuxiliary());\n+            connIdObjectClassTO.setContainer(info.isContainer());\n \n-        return CollectionUtils.collect(schemaNames, new Transformer<String, PlainSchemaTO>() {\n-\n-            @Override\n-            public PlainSchemaTO transform(final String name) {\n-                PlainSchemaTO schemaTO = new PlainSchemaTO();\n-                schemaTO.setKey(name);\n-                return schemaTO;\n+            for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n+                if (includeSpecial || !AttributeUtil.isSpecialName(attrInfo.getName())) {\n+                    connIdObjectClassTO.getAttributes().add(attrInfo.getName());\n+                }\n             }\n-        }, new ArrayList<PlainSchemaTO>());\n-    }\n \n-    @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<String> buildSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n-        if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n+            result.add(connIdObjectClassTO);\n         }\n \n-        // consider the possibility to receive overridden properties only\n-        Set<ConnConfProperty> conf =\n-                binder.mergeConnConfProperties(connInstanceTO.getConfiguration(), connInstance.getConfiguration());\n-\n-        // We cannot use Spring bean because this method could be used during resource definition or modification:\n-        // bean couldn't exist or couldn't be updated.\n-        // This is the reason why we should take a \"not mature\" connector facade proxy to ask for object classes.\n-        Set<ObjectClass> objectClasses = connFactory.createConnector(connInstance, conf).getSupportedObjectClasses();\n-\n-        return CollectionUtils.collect(objectClasses, new Transformer<ObjectClass, String>() {\n-\n-            @Override\n-            public String transform(final ObjectClass objectClass) {\n-                return objectClass.getObjectClassValue();\n-            }\n-        }, new ArrayList<String>());\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void check(final ConnInstanceTO connInstanceTO) {\n-        Connector connector = connFactory.createConnector(\n-                binder.getConnInstance(connInstanceTO), connInstanceTO.getConfiguration());\n-        connector.test();\n+        connFactory.createConnector(binder.getConnInstance(connInstanceTO)).test();\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n@@ -274,7 +250,7 @@ public ConnInstanceTO readByResource(final String resourceName, final String lan\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n-        return binder.getConnInstanceTO(connFactory.getConnector(resource).getActiveConnInstance());\n+        return binder.getConnInstanceTO(connFactory.getConnector(resource).getConnInstance());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_RELOAD + \"')\")"},{"sha":"a6a261068bb231cf2d7bdd2ce255560162873058","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -54,10 +53,12 @@\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -84,6 +85,9 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -245,7 +249,7 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         ConnectorObject connectorObject = connector.getObject(\n                 init.getRight().getObjectClass(),\n                 new Uid(connObjectKeyValue),\n-                connector.getOperationOptions(mapItems));\n+                MappingUtils.buildOperationOptions(mapItems));\n         if (connectorObject == null) {\n             throw new NotFoundException(\n                     \"Object \" + connObjectKeyValue + \" with class \" + init.getRight().getObjectClass()\n@@ -303,10 +307,17 @@ public boolean handle(final ConnectorObject connectorObject) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void check(final ResourceTO resourceTO) {\n-        ConnInstance connInstance = binder.getConnInstance(resourceTO);\n-        Connector connector = connFactory.createConnector(connInstance, connInstance.getConfiguration());\n+        ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnector());\n+        if (connInstance == null) {\n+            throw new NotFoundException(\"Connector '\" + resourceTO.getConnector() + \"'\");\n+        }\n \n-        connector.test();\n+        connFactory.createConnector(\n+                connFactory.buildConnInstanceOverride(\n+                        connInstance,\n+                        resourceTO.getConfOverride(),\n+                        resourceTO.isOverrideCapabilities() ? resourceTO.getCapabilitiesOverride() : null)).\n+                test();\n     }\n \n     @Override"},{"sha":"aed2ee67fb5b86a2938bb11bb0cf01933c8c35c6","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":32,"deletions":1,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.ListUtils;\n@@ -75,7 +76,10 @@\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -255,6 +259,34 @@ public static List<MappingItemTransformer> getMappingItemTransformers(final Mapp\n         return result;\n     }\n \n+    /**\n+     * Build options for requesting all mapped connector attributes.\n+     *\n+     * @param mapItems mapping items\n+     * @return options for requesting all mapped connector attributes\n+     * @see OperationOptions\n+     */\n+    public static OperationOptions buildOperationOptions(final Iterator<? extends MappingItem> mapItems) {\n+        OperationOptionsBuilder builder = new OperationOptionsBuilder();\n+\n+        Set<String> attrsToGet = new HashSet<>();\n+        attrsToGet.add(Name.NAME);\n+        attrsToGet.add(Uid.NAME);\n+        attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n+\n+        while (mapItems.hasNext()) {\n+            MappingItem mapItem = mapItems.next();\n+            if (mapItem.getPurpose() != MappingPurpose.NONE) {\n+                attrsToGet.add(mapItem.getExtAttrName());\n+            }\n+        }\n+\n+        builder.setAttributesToGet(attrsToGet);\n+        // -------------------------------------\n+\n+        return builder.build();\n+    }\n+\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n@@ -796,5 +828,4 @@ public <T extends AnyTO> void setIntValues(\n             default:\n         }\n     }\n-\n }"},{"sha":"2019e8ec45a75af215455e3b33443e4a39c58d60","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ConnInstance.java","status":"modified","additions":19,"deletions":22,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -26,47 +26,44 @@\n \n public interface ConnInstance extends Entity<Long> {\n \n-    boolean addCapability(ConnectorCapability capabitily);\n-\n-    boolean addResource(ExternalResource resource);\n-\n-    String getBundleName();\n-\n-    Set<ConnectorCapability> getCapabilities();\n-\n-    Set<ConnConfProperty> getConfiguration();\n-\n-    Integer getConnRequestTimeout();\n+    void setConnectorName(String connectorName);\n \n     String getConnectorName();\n \n+    void setDisplayName(String displayName);\n+\n     String getDisplayName();\n \n+    void setLocation(String location);\n+\n     String getLocation();\n \n+    void setPoolConf(ConnPoolConf poolConf);\n+\n     ConnPoolConf getPoolConf();\n \n-    List<? extends ExternalResource> getResources();\n+    void setVersion(String version);\n \n     String getVersion();\n \n-    boolean removeCapability(ConnectorCapability capabitily);\n+    void setBundleName(String bundleName);\n \n-    boolean removeResource(ExternalResource resource);\n+    String getBundleName();\n \n-    void setBundleName(String bundleName);\n+    Set<ConnectorCapability> getCapabilities();\n \n-    void setConfiguration(Set<ConnConfProperty> configuration);\n+    boolean add(ExternalResource resource);\n \n-    void setConnRequestTimeout(Integer timeout);\n+    boolean remove(ExternalResource resource);\n \n-    void setConnectorName(String connectorName);\n+    List<? extends ExternalResource> getResources();\n \n-    void setDisplayName(String displayName);\n+    void setConf(Set<ConnConfProperty> conf);\n \n-    void setLocation(String location);\n+    Set<ConnConfProperty> getConf();\n \n-    void setPoolConf(ConnPoolConf poolConf);\n+    void setConnRequestTimeout(Integer timeout);\n+\n+    Integer getConnRequestTimeout();\n \n-    void setVersion(String version);\n }"},{"sha":"0cc3c0455a395afc9a448119de8611b05f5d0035","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n@@ -38,9 +39,15 @@ public interface ExternalResource extends AnnotatedEntity<String> {\n \n     void setConnector(ConnInstance connector);\n \n-    Set<ConnConfProperty> getConnInstanceConfiguration();\n+    Set<ConnConfProperty> getConfOverride();\n \n-    void setConnInstanceConfiguration(Set<ConnConfProperty> properties);\n+    void setConfOverride(Set<ConnConfProperty> confOverride);\n+\n+    boolean isOverrideCapabilities();\n+\n+    void setOverrideCapabilities(boolean overrideCapabilities);\n+\n+    Set<ConnectorCapability> getCapabilitiesOverride();\n \n     AccountPolicy getAccountPolicy();\n "},{"sha":"e31aaaa940de48a6cc67b24fa152e5ecd2e35a81","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":8,"deletions":25,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -99,8 +99,8 @@ public class JPAConnInstance extends AbstractEntity<Long> implements ConnInstanc\n     @Column(name = \"capability\")\n     @CollectionTable(name = \"ConnInstance_capabilities\",\n             joinColumns =\n-            @JoinColumn(name = \"ConnInstance_id\", referencedColumnName = \"id\"))\n-    private Set<ConnectorCapability> capabilities;\n+            @JoinColumn(name = \"connInstance_id\", referencedColumnName = \"id\"))\n+    private Set<ConnectorCapability> capabilities = new HashSet<>();\n \n     /**\n      * The main configuration for the connector instance. This is directly implemented by the Configuration bean class\n@@ -118,7 +118,7 @@ public class JPAConnInstance extends AbstractEntity<Long> implements ConnInstanc\n      * External resources associated to the connector.\n      */\n     @OneToMany(cascade = { CascadeType.ALL }, mappedBy = \"connector\")\n-    private List<JPAExternalResource> resources;\n+    private List<JPAExternalResource> resources = new ArrayList<>();\n \n     /**\n      * Connector request timeout. It is not applied in case of sync, full reconciliation and search.\n@@ -128,13 +128,6 @@ public class JPAConnInstance extends AbstractEntity<Long> implements ConnInstanc\n \n     private JPAConnPoolConf poolConf;\n \n-    public JPAConnInstance() {\n-        super();\n-\n-        capabilities = new HashSet<>();\n-        resources = new ArrayList<>();\n-    }\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -181,7 +174,7 @@ public void setVersion(final String version) {\n     }\n \n     @Override\n-    public Set<ConnConfProperty> getConfiguration() {\n+    public Set<ConnConfProperty> getConf() {\n         Set<ConnConfProperty> configuration = new HashSet<>();\n         if (!StringUtils.isBlank(jsonConf)) {\n             CollectionUtils.addAll(configuration, POJOHelper.deserialize(jsonConf, ConnConfProperty[].class));\n@@ -191,8 +184,8 @@ public Set<ConnConfProperty> getConfiguration() {\n     }\n \n     @Override\n-    public void setConfiguration(final Set<ConnConfProperty> configuration) {\n-        jsonConf = POJOHelper.serialize(new HashSet<>(configuration));\n+    public void setConf(final Set<ConnConfProperty> conf) {\n+        jsonConf = POJOHelper.serialize(new HashSet<>(conf));\n     }\n \n     @Override\n@@ -211,28 +204,18 @@ public List<? extends ExternalResource> getResources() {\n     }\n \n     @Override\n-    public boolean addResource(final ExternalResource resource) {\n+    public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);\n         return this.resources.contains((JPAExternalResource) resource)\n                 || this.resources.add((JPAExternalResource) resource);\n     }\n \n     @Override\n-    public boolean removeResource(final ExternalResource resource) {\n+    public boolean remove(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);\n         return this.resources.remove((JPAExternalResource) resource);\n     }\n \n-    @Override\n-    public boolean addCapability(final ConnectorCapability capabitily) {\n-        return capabilities.add(capabitily);\n-    }\n-\n-    @Override\n-    public boolean removeCapability(final ConnectorCapability capabitily) {\n-        return capabilities.remove(capabitily);\n-    }\n-\n     @Override\n     public Set<ConnectorCapability> getCapabilities() {\n         return capabilities;"},{"sha":"393338ba692539db1160740e1cb6b5ca12e72861","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":37,"deletions":9,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -44,6 +44,7 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -153,6 +154,20 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     @Lob\n     private String jsonConf;\n \n+    @NotNull\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer overrideCapabilities;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"capabilityOverride\")\n+    @CollectionTable(name = \"ExternalResource_capabilitiesOverride\",\n+            joinColumns =\n+            @JoinColumn(name = \"resource_name\", referencedColumnName = \"name\"))\n+    private Set<ConnectorCapability> capabilitiesOverride = new HashSet<>();\n+\n     /**\n      * (Optional) classes for PropagationAction.\n      */\n@@ -163,16 +178,14 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n             @JoinColumn(name = \"resource_name\", referencedColumnName = \"name\"))\n     private List<String> propagationActionsClassNames = new ArrayList<>();\n \n-    /**\n-     * Default constructor.\n-     */\n     public JPAExternalResource() {\n         super();\n \n         enforceMandatoryCondition = getBooleanAsInteger(false);\n         propagationPrimary = 0;\n         propagationPriority = 0;\n         randomPwdIfNotProvided = 0;\n+        overrideCapabilities = 0;\n \n         createTraceLevel = TraceLevel.FAILURES;\n         updateTraceLevel = TraceLevel.FAILURES;\n@@ -357,18 +370,33 @@ public void setSyncPolicy(final SyncPolicy syncPolicy) {\n     }\n \n     @Override\n-    public Set<ConnConfProperty> getConnInstanceConfiguration() {\n-        Set<ConnConfProperty> configuration = new HashSet<>();\n+    public Set<ConnConfProperty> getConfOverride() {\n+        Set<ConnConfProperty> confOverride = new HashSet<>();\n         if (!StringUtils.isBlank(jsonConf)) {\n-            CollectionUtils.addAll(configuration, POJOHelper.deserialize(jsonConf, ConnConfProperty[].class));\n+            CollectionUtils.addAll(confOverride, POJOHelper.deserialize(jsonConf, ConnConfProperty[].class));\n         }\n \n-        return configuration;\n+        return confOverride;\n+    }\n+\n+    @Override\n+    public void setConfOverride(final Set<ConnConfProperty> confOverride) {\n+        jsonConf = POJOHelper.serialize(new HashSet<>(confOverride));\n+    }\n+\n+    @Override\n+    public boolean isOverrideCapabilities() {\n+        return isBooleanAsInteger(overrideCapabilities);\n+    }\n+\n+    @Override\n+    public void setOverrideCapabilities(final boolean overrideCapabilities) {\n+        this.overrideCapabilities = getBooleanAsInteger(overrideCapabilities);\n     }\n \n     @Override\n-    public void setConnInstanceConfiguration(final Set<ConnConfProperty> properties) {\n-        jsonConf = POJOHelper.serialize(new HashSet<>(properties));\n+    public Set<ConnectorCapability> getCapabilitiesOverride() {\n+        return capabilitiesOverride;\n     }\n \n     @Override"},{"sha":"f0b892bb71eeb939ded05fd522b2c67c81315aa0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyConnectorRegistry.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -18,10 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n-import java.util.Set;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.springframework.stereotype.Component;\n@@ -30,15 +27,7 @@\n public class DummyConnectorRegistry implements ConnectorRegistry {\n \n     @Override\n-    public ConnInstance getOverriddenConnInstance(\n-            final ConnInstance connInstance, final Set<ConnConfProperty> overridden) {\n-\n-        return connInstance;\n-    }\n-\n-    @Override\n-    public void registerConnector(final ExternalResource resource)\n-            throws NotFoundException {\n+    public void registerConnector(final ExternalResource resource) throws NotFoundException {\n     }\n \n     @Override"},{"sha":"6033bd413c4d87477cdd24a5491b7b7069b5fbd4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConnInstanceTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -104,8 +104,8 @@ public void save() throws ClassNotFoundException {\n         conf.add(servicename);\n \n         // set connector configuration\n-        connInstance.setConfiguration(conf);\n-        assertFalse(connInstance.getConfiguration().isEmpty());\n+        connInstance.setConf(conf);\n+        assertFalse(connInstance.getConf().isEmpty());\n \n         // perform save operation\n         ConnInstance actual = connInstanceDAO.save(connInstance);\n@@ -125,7 +125,7 @@ public void save() throws ClassNotFoundException {\n \n         assertEquals(60, actual.getConnRequestTimeout(), 0);\n \n-        conf = connInstance.getConfiguration();\n+        conf = connInstance.getConf();\n         assertFalse(conf.isEmpty());\n \n         assertNotNull(\"configuration retrieving failed\", conf);"},{"sha":"f557e8c993644ea62deae8c1283194abbaac9e6a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceTest.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -85,7 +85,7 @@ public void issue176() {\n                 || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(2).getKey())\n                 || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(3).getKey()));\n \n-        connInstance.addCapability(ConnectorCapability.SEARCH);\n+        connInstance.getCapabilities().add(ConnectorCapability.SEARCH);\n \n         connInstance = connInstanceDAO.save(connInstance);\n         assertNotNull(connInstance);"},{"sha":"2bc840db836eb4f172468d14a2a8d256efb76ea5","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":24,"deletions":20,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -580,54 +580,55 @@ under the License.\n   <ConnInstance_capabilities ConnInstance_id=\"108\" capability=\"SYNC\"/>\n   \n   <ExternalResource name=\"ws-target-resource-1\" connector_id=\"100\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n-                    creator=\"admin\" lastModifier=\"admin\" \n+                    creator=\"admin\" lastModifier=\"admin\"\n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     syncPolicy_id=\"9\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-timeout\" connector_id=\"102\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     jsonConf='[{\"schema\":{\"name\":\"endpoint\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"http://localhost:${cargo.servlet.port}/syncope-fit-build-tools/services/provisioning\"]}]'\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-delete\" connector_id=\"102\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n                     propagationPriority=\"2\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"ws-target-resource-update\" connector_id=\"100\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-testdb\" connector_id=\"101\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-testdb2\" connector_id=\"106\"\n-                    randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-csv\" connector_id=\"104\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" syncPolicy_id=\"3\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n+                    syncPolicy_id=\"3\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n@@ -636,30 +637,33 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource name=\"resource-ldap\" connector_id=\"105\"\n-                    randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource_PropActions resource_name=\"resource-ldap\"\n                                 actionClassName=\"org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\"\n-                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n                     passwordPolicy_id=\"4\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   \n-  <!-- The following three resources has been added to verify the issue SYNCOPE-68 -->\n-  <ExternalResource name=\"ws-target-resource-nopropagation2\" connector_id=\"103\" enforceMandatoryCondition=\"1\"\n+  <!-- The following three resources have been added to verify the issue SYNCOPE-68 -->\n+  <ExternalResource name=\"ws-target-resource-nopropagation2\" connector_id=\"103\" \n+                    enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <ExternalResource name=\"ws-target-resource-nopropagation3\" connector_id=\"103\" enforceMandatoryCondition=\"1\"\n+  <ExternalResource name=\"ws-target-resource-nopropagation3\" connector_id=\"103\" \n+                    enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <ExternalResource name=\"ws-target-resource-nopropagation4\" connector_id=\"103\" enforceMandatoryCondition=\"1\"\n+  <ExternalResource name=\"ws-target-resource-nopropagation4\" connector_id=\"103\" \n+                    enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n@@ -668,22 +672,22 @@ under the License.\n   <ExternalResource name=\"resource-db-sync\" connector_id=\"107\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n-                    propagationPrimary=\"0\" propagationPriority=\"0\"\n+                    propagationPrimary=\"0\" propagationPriority=\"0\" overrideCapabilities=\"0\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n                     \n   <!-- External resource for issue SYNCOPE-267 -->\n   <ExternalResource name=\"resource-db-virattr\" connector_id=\"107\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n-                    propagationPrimary=\"0\" propagationPriority=\"0\"\n+                    propagationPrimary=\"0\" propagationPriority=\"0\" overrideCapabilities=\"0\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n   <ExternalResource name=\"resource-db-scripted\" connector_id=\"108\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\"\n-                    propagationPrimary=\"0\" propagationPriority=\"0\"\n+                    propagationPrimary=\"0\" propagationPriority=\"0\" overrideCapabilities=\"0\"\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n "},{"sha":"242202f010079c6a04f91dc36a6b88a07c84ed17","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnIdBundleManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -31,7 +31,7 @@\n  */\n public interface ConnIdBundleManager {\n \n-    ConfigurationProperties getConfigurationProperties(final ConnectorInfo info);\n+    ConfigurationProperties getConfigurationProperties(ConnectorInfo info);\n \n     Map<URI, ConnectorInfoManager> getConnManagers();\n "},{"sha":"2a3a0a144aff110bda99d9fe7145f1c966e56705","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":6,"deletions":44,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -28,6 +28,7 @@\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n@@ -134,8 +135,7 @@ void delete(\n     ConnectorObject getObject(ObjectClass objectClass, Uid uid, OperationOptions options);\n \n     /**\n-     * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an\n-     * update (object exists).\n+     * Get remote object with check for intended operation to perform on external resource.\n      *\n      * @param operationType resource operation type\n      * @param objectClass ConnId's object class\n@@ -186,40 +186,11 @@ void search(\n             Iterator<? extends MappingItem> mapItems);\n \n     /**\n-     * Read attribute for a given connector object.\n+     * Builds metadata description of ConnId {@link ObjectClass}.\n      *\n-     * @param objectClass ConnId's object class\n-     * @param uid ConnId's Uid\n-     * @param options ConnId's OperationOptions\n-     * @param attributeName attribute to read\n-     * @return attribute (if present)\n-     */\n-    Attribute getObjectAttribute(ObjectClass objectClass, Uid uid, OperationOptions options, String attributeName);\n-\n-    /**\n-     * Read attributes for a given connector object.\n-     *\n-     * @param objectClass ConnId's object class\n-     * @param uid ConnId's Uid\n-     * @param options ConnId's OperationOptions\n-     * @return attributes (if present)\n+     * @return metadata description of ConnId ObjectClass\n      */\n-    Set<Attribute> getObjectAttributes(ObjectClass objectClass, Uid uid, OperationOptions options);\n-\n-    /**\n-     * Return resource schema names.\n-     *\n-     * @param includeSpecial return special attributes (like as __NAME__ or __PASSWORD__) if true\n-     * @return schema names\n-     */\n-    Set<String> getSchemaNames(boolean includeSpecial);\n-\n-    /**\n-     * Return ConnId's object classes supported by this connector.\n-     *\n-     * @return supported object classes\n-     */\n-    Set<ObjectClass> getSupportedObjectClasses();\n+    Set<ObjectClassInfo> getObjectClassInfo();\n \n     /**\n      * Validate a connector instance.\n@@ -236,14 +207,5 @@ void search(\n      *\n      * @return active connector instance.\n      */\n-    ConnInstance getActiveConnInstance();\n-\n-    /**\n-     * Build options for requesting all mapped connector attributes.\n-     *\n-     * @param mapItems mapping items\n-     * @return options for requesting all mapped connector attributes\n-     * @see OperationOptions\n-     */\n-    OperationOptions getOperationOptions(Iterator<? extends MappingItem> mapItems);\n+    ConnInstance getConnInstance();\n }"},{"sha":"4c6dd82d1ff330d4fe053de6140b065f35b7a629","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Set;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n@@ -29,16 +29,28 @@\n  *\n  * @see Connector\n  */\n-public interface ConnectorFactory extends SyncopeLoader {\n+public interface ConnectorFactory {\n \n     /**\n-     * Create connector from given connector instance and configuration properties.\n+     * Builds connector instance override over base connector instance, configuration and capabilities override.\n+     *\n+     * @param connInstance base connector instance\n+     * @param confOverride configuration override\n+     * @param capabilitiesOverride capabilities override\n+     * @return connector instance override over base connector instance, configuration and capabilities override\n+     */\n+    ConnInstance buildConnInstanceOverride(\n+            ConnInstance connInstance,\n+            Set<ConnConfProperty> confOverride,\n+            Set<ConnectorCapability> capabilitiesOverride);\n+\n+    /**\n+     * Create connector from given connector instance.\n      *\n      * @param connInstance connector instance\n-     * @param configuration configuration properties\n      * @return connector\n      */\n-    Connector createConnector(ConnInstance connInstance, Set<ConnConfProperty> configuration);\n+    Connector createConnector(ConnInstance connInstance);\n \n     /**\n      * Get existing connector for the given resource.\n@@ -53,7 +65,6 @@ public interface ConnectorFactory extends SyncopeLoader {\n      *\n      * @see ExternalResource\n      */\n-    @Override\n     void load();\n \n     /**"},{"sha":"c1cc547e7b252006e3e37b7628b516488fb8f6ba","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorRegistry.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorRegistry.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -18,25 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import java.util.Set;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n /**\n  * Manage Spring beans lifecycle for connectors.\n  */\n public interface ConnectorRegistry {\n \n-    /**\n-     * Returns a connector instance with overridden property values, if found.\n-     *\n-     * @param connInstance base connector instance\n-     * @param overridden overridden property values\n-     * @return connector instance with overridden property values, if found\n-     */\n-    ConnInstance getOverriddenConnInstance(ConnInstance connInstance, Set<ConnConfProperty> overridden);\n-\n     /**\n      * Create and register into Spring context a bean for the given resource.\n      *"},{"sha":"373d1af6f091b4a70c374c14801e2632aefd33a8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ConnInstanceDataBinder.java","status":"modified","additions":2,"deletions":14,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -18,31 +18,19 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import java.util.Set;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n \n public interface ConnInstanceDataBinder {\n \n-    ConnConfPropSchema buildConnConfPropSchema(ConfigurationProperty property);\n+    ConnConfPropSchema build(ConfigurationProperty property);\n \n     ConnInstance getConnInstance(ConnInstanceTO connInstanceTO);\n \n     ConnInstanceTO getConnInstanceTO(ConnInstance connInstance);\n \n-    /**\n-     * Merge connector configuration properties avoiding repetition but giving priority to primary set.\n-     *\n-     * @param primary primary set.\n-     * @param secondary secondary set.\n-     * @return merged set.\n-     */\n-    Set<ConnConfProperty> mergeConnConfProperties(Set<ConnConfProperty> primary,\n-            Set<ConnConfProperty> secondary);\n-\n-    ConnInstance updateConnInstance(long connInstanceId, ConnInstanceTO connInstanceTO);\n+    ConnInstance update(long key, ConnInstanceTO connInstanceTO);\n \n }"},{"sha":"9f1ea5d1c0f25f324d4d103dfcf205a07a75afa9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FResourceDataBinder.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -19,17 +19,14 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface ResourceDataBinder {\n \n-    ExternalResource create(ResourceTO resourceTO);\n-\n-    ConnInstance getConnInstance(ResourceTO resourceTO);\n-\n     ResourceTO getResourceTO(ExternalResource resource);\n \n+    ExternalResource create(ResourceTO resourceTO);\n+\n     ExternalResource update(ExternalResource resource, ResourceTO resourceTO);\n \n }"},{"sha":"83a38eb9ff0534bacf117a3e816dbc0bc6c0abec","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java","status":"modified","additions":5,"deletions":77,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -18,19 +18,16 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.Set;\n import java.util.concurrent.Future;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.AttributeInfo;\n-import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n-import org.identityconnectors.framework.common.objects.Schema;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n@@ -46,9 +43,6 @@\n @Component\n public class AsyncConnectorFacade {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(AsyncConnectorFacade.class);\n \n     @Async\n@@ -111,83 +105,17 @@ public Future<ConnectorObject> getObject(\n     }\n \n     @Async\n-    public Future<Attribute> getObjectAttribute(\n-            final ConnectorFacade connector,\n-            final ObjectClass objectClass,\n-            final Uid uid,\n-            final OperationOptions options,\n-            final String attributeName) {\n-\n-        Attribute attribute = null;\n-\n-        ConnectorObject object = connector.getObject(objectClass, uid, options);\n-        if (object == null) {\n-            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n-        } else {\n-            attribute = object.getAttributeByName(attributeName);\n-        }\n-\n-        return new AsyncResult<>(attribute);\n-    }\n-\n-    @Async\n-    public Future<Set<Attribute>> getObjectAttributes(\n-            final ConnectorFacade connector,\n-            final ObjectClass objectClass,\n-            final Uid uid,\n-            final OperationOptions options) {\n-\n-        Set<Attribute> attributes = new HashSet<>();\n-\n-        ConnectorObject object = connector.getObject(objectClass, uid, options);\n-\n-        if (object == null) {\n-            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n-        } else {\n-            for (String attribute : options.getAttributesToGet()) {\n-                attributes.add(object.getAttributeByName(attribute));\n-            }\n-        }\n-\n-        return new AsyncResult<>(attributes);\n-    }\n-\n-    @Async\n-    public Future<Set<String>> getSchemaNames(final ConnectorFacade connector, final boolean includeSpecial) {\n-        Set<String> schemaNames = new HashSet<>();\n-\n-        try {\n-            Schema schema = connector.schema();\n-            for (ObjectClassInfo info : schema.getObjectClassInfo()) {\n-                for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n-                    if (includeSpecial || !AttributeUtil.isSpecialName(attrInfo.getName())) {\n-                        schemaNames.add(attrInfo.getName());\n-                    }\n-                }\n-            }\n-        } catch (Exception e) {\n-            // catch exception in order to manage unpredictable behaviors\n-            LOG.debug(\"While reading schema on connector {}\", connector, e);\n-        }\n-\n-        return new AsyncResult<>(schemaNames);\n-    }\n-\n-    @Async\n-    public Future<Set<ObjectClass>> getSupportedObjectClasses(final ConnectorFacade connector) {\n-        Set<ObjectClass> objectClasses = new HashSet<>();\n+    public Future<Set<ObjectClassInfo>> getObjectClassInfo(final ConnectorFacade connector) {\n+        Set<ObjectClassInfo> result = Collections.emptySet();\n \n         try {\n-            Schema schema = connector.schema();\n-            for (ObjectClassInfo info : schema.getObjectClassInfo()) {\n-                objectClasses.add(new ObjectClass(info.getType()));\n-            }\n+            result = connector.schema().getObjectClassInfo();\n         } catch (Exception e) {\n             // catch exception in order to manage unpredictable behaviors\n             LOG.debug(\"While reading schema on connector {}\", connector, e);\n         }\n \n-        return new AsyncResult<>(objectClasses);\n+        return new AsyncResult<>(result);\n     }\n \n     @Async"},{"sha":"a3b865f4fa4f471aa15667397e6bba1410a7db10","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":39,"deletions":125,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -21,7 +21,6 @@\n import java.io.File;\n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n@@ -31,8 +30,8 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.ConnPoolConfUtils;\n@@ -50,11 +49,10 @@\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n-import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.SortKey;\n@@ -84,22 +82,22 @@ public class ConnectorFacadeProxy implements Connector {\n     /**\n      * Active connector instance.\n      */\n-    private final ConnInstance activeConnInstance;\n+    private final ConnInstance connInstance;\n \n     @Autowired\n     private AsyncConnectorFacade asyncFacade;\n \n     /**\n      * Use the passed connector instance to build a ConnectorFacade that will be used to make all wrapped calls.\n      *\n-     * @param connInstance the connector instance configuration\n+     * @param connInstance the connector instance\n      * @see ConnectorInfo\n      * @see APIConfiguration\n      * @see ConfigurationProperties\n      * @see ConnectorFacade\n      */\n     public ConnectorFacadeProxy(final ConnInstance connInstance) {\n-        this.activeConnInstance = connInstance;\n+        this.connInstance = connInstance;\n \n         ConnIdBundleManager connIdBundleManager =\n                 ApplicationContextProvider.getBeanFactory().getBean(ConnIdBundleManager.class);\n@@ -112,7 +110,7 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n \n         // set connector configuration according to conninstance's\n         ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n-        for (ConnConfProperty property : connInstance.getConfiguration()) {\n+        for (ConnConfProperty property : connInstance.getConf()) {\n             if (property.getValues() != null && !property.getValues().isEmpty()) {\n                 properties.setPropertyValue(property.getSchema().getName(),\n                         getPropertyValue(property.getSchema().getType(), property.getValues()));\n@@ -140,11 +138,11 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n     public Uid authenticate(final String username, final String password, final OperationOptions options) {\n         Uid result = null;\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.AUTHENTICATE)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.AUTHENTICATE)) {\n             Future<Uid> future = asyncFacade.authenticate(\n                     connector, username, new GuardedString(password.toCharArray()), options);\n             try {\n-                result = future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+                result = future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n             } catch (java.util.concurrent.TimeoutException e) {\n                 future.cancel(true);\n                 throw new TimeoutException(\"Request timeout\");\n@@ -158,7 +156,7 @@ public Uid authenticate(final String username, final String password, final Oper\n             }\n         } else {\n             LOG.info(\"Authenticate was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    activeConnInstance.getCapabilities());\n+                    connInstance.getCapabilities());\n         }\n \n         return result;\n@@ -173,12 +171,12 @@ public Uid create(\n \n         Uid result = null;\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.CREATE)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.CREATE)) {\n             propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.create(connector, objectClass, attrs, options);\n             try {\n-                result = future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+                result = future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n             } catch (java.util.concurrent.TimeoutException e) {\n                 future.cancel(true);\n                 throw new TimeoutException(\"Request timeout\");\n@@ -192,7 +190,7 @@ public Uid create(\n             }\n         } else {\n             LOG.info(\"Create was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    activeConnInstance.getCapabilities());\n+                    connInstance.getCapabilities());\n         }\n \n         return result;\n@@ -208,13 +206,13 @@ public Uid update(\n \n         Uid result = null;\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.UPDATE)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.UPDATE)) {\n             propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.update(connector, objectClass, uid, attrs, options);\n \n             try {\n-                result = future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+                result = future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n             } catch (java.util.concurrent.TimeoutException e) {\n                 future.cancel(true);\n                 throw new TimeoutException(\"Request timeout\");\n@@ -228,7 +226,7 @@ public Uid update(\n             }\n         } else {\n             LOG.info(\"Update for {} was attempted, although the \"\n-                    + \"connector only has these capabilities: {}. No action.\", uid.getUidValue(), activeConnInstance.\n+                    + \"connector only has these capabilities: {}. No action.\", uid.getUidValue(), connInstance.\n                     getCapabilities());\n         }\n \n@@ -242,13 +240,13 @@ public void delete(\n             final OperationOptions options,\n             final Boolean[] propagationAttempted) {\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.DELETE)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.DELETE)) {\n             propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.delete(connector, objectClass, uid, options);\n \n             try {\n-                future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+                future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n             } catch (java.util.concurrent.TimeoutException e) {\n                 future.cancel(true);\n                 throw new TimeoutException(\"Request timeout\");\n@@ -262,31 +260,31 @@ public void delete(\n             }\n         } else {\n             LOG.info(\"Delete for {} was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    uid.getUidValue(), activeConnInstance.getCapabilities());\n+                    uid.getUidValue(), connInstance.getCapabilities());\n         }\n     }\n \n     @Override\n     public void sync(final ObjectClass objectClass, final SyncToken token, final SyncResultsHandler handler,\n             final OperationOptions options) {\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SYNC)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.SYNC)) {\n             connector.sync(objectClass, token, handler, options);\n         } else {\n             LOG.info(\"Sync was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    activeConnInstance.getCapabilities());\n+                    connInstance.getCapabilities());\n         }\n     }\n \n     @Override\n     public SyncToken getLatestSyncToken(final ObjectClass objectClass) {\n         SyncToken result = null;\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SYNC)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.SYNC)) {\n             Future<SyncToken> future = asyncFacade.getLatestSyncToken(connector, objectClass);\n \n             try {\n-                result = future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+                result = future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n             } catch (java.util.concurrent.TimeoutException e) {\n                 future.cancel(true);\n                 throw new TimeoutException(\"Request timeout\");\n@@ -300,7 +298,7 @@ public SyncToken getLatestSyncToken(final ObjectClass objectClass) {\n             }\n         } else {\n             LOG.info(\"getLatestSyncToken was attempted, although the \"\n-                    + \"connector only has these capabilities: {}. No action.\", activeConnInstance.getCapabilities());\n+                    + \"connector only has these capabilities: {}. No action.\", connInstance.getCapabilities());\n         }\n \n         return result;\n@@ -320,17 +318,17 @@ public ConnectorObject getObject(\n \n         boolean hasCapablities = false;\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n             if (operationType == null) {\n                 hasCapablities = true;\n             } else {\n                 switch (operationType) {\n                     case CREATE:\n-                        hasCapablities = activeConnInstance.getCapabilities().contains(ConnectorCapability.CREATE);\n+                        hasCapablities = connInstance.getCapabilities().contains(ConnectorCapability.CREATE);\n                         break;\n \n                     case UPDATE:\n-                        hasCapablities = activeConnInstance.getCapabilities().contains(ConnectorCapability.UPDATE);\n+                        hasCapablities = connInstance.getCapabilities().contains(ConnectorCapability.UPDATE);\n                         break;\n \n                     default:\n@@ -344,11 +342,11 @@ public ConnectorObject getObject(\n             future = asyncFacade.getObject(connector, objectClass, uid, options);\n         } else {\n             LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    activeConnInstance.getCapabilities());\n+                    connInstance.getCapabilities());\n         }\n \n         try {\n-            return future == null ? null : future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+            return future == null ? null : future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n         } catch (java.util.concurrent.TimeoutException e) {\n             if (future != null) {\n                 future.cancel(true);\n@@ -383,69 +381,10 @@ public boolean handle(final ConnectorObject obj) {\n     }\n \n     @Override\n-    public Attribute getObjectAttribute(final ObjectClass objectClass, final Uid uid, final OperationOptions options,\n-            final String attributeName) {\n-\n-        Future<Attribute> future = asyncFacade.getObjectAttribute(\n-                connector, objectClass, uid, options, attributeName);\n-        try {\n-            return future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n-        } catch (java.util.concurrent.TimeoutException e) {\n-            future.cancel(true);\n-            throw new TimeoutException(\"Request timeout\");\n-        } catch (Exception e) {\n-            LOG.error(\"Connector request execution failure\", e);\n-            if (e.getCause() instanceof RuntimeException) {\n-                throw (RuntimeException) e.getCause();\n-            } else {\n-                throw new IllegalArgumentException(e.getCause());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Set<Attribute> getObjectAttributes(final ObjectClass objectClass, final Uid uid,\n-            final OperationOptions options) {\n-\n-        Future<Set<Attribute>> future = asyncFacade.getObjectAttributes(connector, objectClass, uid, options);\n+    public Set<ObjectClassInfo> getObjectClassInfo() {\n+        Future<Set<ObjectClassInfo>> future = asyncFacade.getObjectClassInfo(connector);\n         try {\n-            return future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n-        } catch (java.util.concurrent.TimeoutException e) {\n-            future.cancel(true);\n-            throw new TimeoutException(\"Request timeout\");\n-        } catch (Exception e) {\n-            LOG.error(\"Connector request execution failure\", e);\n-            if (e.getCause() instanceof RuntimeException) {\n-                throw (RuntimeException) e.getCause();\n-            } else {\n-                throw new IllegalArgumentException(e.getCause());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Set<String> getSchemaNames(final boolean includeSpecial) {\n-        Future<Set<String>> future = asyncFacade.getSchemaNames(connector, includeSpecial);\n-        try {\n-            return future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n-        } catch (java.util.concurrent.TimeoutException e) {\n-            future.cancel(true);\n-            throw new TimeoutException(\"Request timeout\");\n-        } catch (Exception e) {\n-            LOG.error(\"Connector request execution failure\", e);\n-            if (e.getCause() instanceof RuntimeException) {\n-                throw (RuntimeException) e.getCause();\n-            } else {\n-                throw new IllegalArgumentException(e.getCause());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Set<ObjectClass> getSupportedObjectClasses() {\n-        Future<Set<ObjectClass>> future = asyncFacade.getSupportedObjectClasses(connector);\n-        try {\n-            return future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+            return future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n         } catch (java.util.concurrent.TimeoutException e) {\n             future.cancel(true);\n             throw new TimeoutException(\"Request timeout\");\n@@ -463,7 +402,7 @@ public Set<ObjectClass> getSupportedObjectClasses() {\n     public void validate() {\n         Future<String> future = asyncFacade.test(connector);\n         try {\n-            future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+            future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n         } catch (java.util.concurrent.TimeoutException e) {\n             future.cancel(true);\n             throw new TimeoutException(\"Request timeout\");\n@@ -481,7 +420,7 @@ public void validate() {\n     public void test() {\n         Future<String> future = asyncFacade.test(connector);\n         try {\n-            future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+            future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n         } catch (java.util.concurrent.TimeoutException e) {\n             future.cancel(true);\n             throw new TimeoutException(\"Request timeout\");\n@@ -502,7 +441,7 @@ public void search(\n             final ResultsHandler handler,\n             final OperationOptions options) {\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n             if (options.getPageSize() == null && options.getPagedResultsCookie() == null) {\n                 OperationOptionsBuilder builder = new OperationOptionsBuilder(options);\n                 builder.setPageSize(DEFAULT_PAGE_SIZE);\n@@ -534,7 +473,7 @@ public boolean handle(final ConnectorObject connectorObject) {\n             }\n         } else {\n             LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    activeConnInstance.getCapabilities());\n+                    connInstance.getCapabilities());\n         }\n     }\n \n@@ -560,39 +499,14 @@ public SortKey transform(final OrderByClause clause) {\n             }\n         }, new ArrayList<SortKey>(orderBy.size())));\n \n-        builder.setAttributesToGet(getOperationOptions(mapItems).getAttributesToGet());\n+        builder.setAttributesToGet(MappingUtils.buildOperationOptions(mapItems).getAttributesToGet());\n \n         search(objectClass, filter, handler, builder.build());\n     }\n \n     @Override\n-    public ConnInstance getActiveConnInstance() {\n-        return activeConnInstance;\n-    }\n-\n-    @Override\n-    public OperationOptions getOperationOptions(final Iterator<? extends MappingItem> mapItems) {\n-        // -------------------------------------\n-        // Ask just for mapped attributes\n-        // -------------------------------------\n-        OperationOptionsBuilder builder = new OperationOptionsBuilder();\n-\n-        Set<String> attrsToGet = new HashSet<>();\n-        attrsToGet.add(Name.NAME);\n-        attrsToGet.add(Uid.NAME);\n-        attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n-\n-        while (mapItems.hasNext()) {\n-            MappingItem mapItem = mapItems.next();\n-            if (mapItem.getPurpose() != MappingPurpose.NONE) {\n-                attrsToGet.add(mapItem.getExtAttrName());\n-            }\n-        }\n-\n-        builder.setAttributesToGet(attrsToGet);\n-        // -------------------------------------\n-\n-        return builder.build();\n+    public ConnInstance getConnInstance() {\n+        return connInstance;\n     }\n \n     private Object getPropertyValue(final String propType, final List<?> values) {\n@@ -637,6 +551,6 @@ private Object getPropertyValue(final String propType, final List<?> values) {\n     @Override\n     public String toString() {\n         return \"ConnectorFacadeProxy{\"\n-                + \"connector=\" + connector + \"\\n\" + \"capabitilies=\" + activeConnInstance.getCapabilities() + '}';\n+                + \"connector=\" + connector + \"\\n\" + \"capabitilies=\" + connInstance.getCapabilities() + '}';\n     }\n }"},{"sha":"1ecc163ad95a89a5b259aaf65de28f93aed6e8fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":41,"deletions":35,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -25,8 +25,10 @@\n import java.util.Set;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n@@ -42,11 +44,8 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-/**\n- * Load ConnId connector instances.\n- */\n @Component\n-public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n+public class ConnectorManager implements ConnectorRegistry, ConnectorFactory, SyncopeLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConnectorManager.class);\n \n@@ -56,6 +55,11 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Override\n+    public Integer getPriority() {\n+        return 100;\n+    }\n+\n     private String getBeanName(final ExternalResource resource) {\n         return String.format(\"connInstance-%s-%d-%s\",\n                 AuthContextUtils.getDomain(), resource.getConnector().getKey(), resource.getKey());\n@@ -72,54 +76,61 @@ public Connector getConnector(final ExternalResource resource) {\n     }\n \n     @Override\n-    public Connector createConnector(final ConnInstance connInstance, final Set<ConnConfProperty> configuration) {\n-        ConnInstance connInstanceClone = SerializationUtils.clone(connInstance);\n-\n-        connInstanceClone.setConfiguration(configuration);\n+    public ConnInstance buildConnInstanceOverride(\n+            final ConnInstance connInstance,\n+            final Set<ConnConfProperty> confOverride,\n+            final Set<ConnectorCapability> capabilitiesOverride) {\n \n-        Connector connector = new ConnectorFacadeProxy(connInstanceClone);\n-        ApplicationContextProvider.getBeanFactory().autowireBean(connector);\n-\n-        return connector;\n-    }\n-\n-    @Override\n-    public ConnInstance getOverriddenConnInstance(\n-            final ConnInstance connInstance, final Set<ConnConfProperty> overridden) {\n+        ConnInstance override = SerializationUtils.clone(connInstance);\n \n-        Set<ConnConfProperty> configuration = new HashSet<>();\n         Map<String, ConnConfProperty> overridable = new HashMap<>();\n+        Set<ConnConfProperty> conf = new HashSet<>();\n \n-        // add not overridable properties\n-        for (ConnConfProperty prop : connInstance.getConfiguration()) {\n+        for (ConnConfProperty prop : override.getConf()) {\n             if (prop.isOverridable()) {\n                 overridable.put(prop.getSchema().getName(), prop);\n             } else {\n-                configuration.add(prop);\n+                conf.add(prop);\n             }\n         }\n \n         // add overridden properties\n-        for (ConnConfProperty prop : overridden) {\n+        for (ConnConfProperty prop : confOverride) {\n             if (overridable.containsKey(prop.getSchema().getName()) && !prop.getValues().isEmpty()) {\n-                configuration.add(prop);\n+                conf.add(prop);\n                 overridable.remove(prop.getSchema().getName());\n             }\n         }\n \n         // add overridable properties not overridden\n-        configuration.addAll(overridable.values());\n+        conf.addAll(overridable.values());\n \n-        connInstance.setConfiguration(configuration);\n+        override.setConf(conf);\n \n-        return connInstance;\n+        // replace capabilities\n+        if (capabilitiesOverride != null) {\n+            override.getCapabilities().clear();\n+            override.getCapabilities().addAll(capabilitiesOverride);\n+        }\n+\n+        return override;\n+    }\n+\n+    @Override\n+    public Connector createConnector(final ConnInstance connInstance) {\n+        Connector connector = new ConnectorFacadeProxy(connInstance);\n+        ApplicationContextProvider.getBeanFactory().autowireBean(connector);\n+\n+        return connector;\n     }\n \n     @Override\n     public void registerConnector(final ExternalResource resource) {\n-        ConnInstance connInstance = getOverriddenConnInstance(\n-                SerializationUtils.clone(resource.getConnector()), resource.getConnInstanceConfiguration());\n-        Connector connector = createConnector(resource.getConnector(), connInstance.getConfiguration());\n+        ConnInstance connInstance = buildConnInstanceOverride(\n+                resource.getConnector(),\n+                resource.getConfOverride(),\n+                resource.isOverrideCapabilities() ? resource.getCapabilitiesOverride() : null);\n+        Connector connector = createConnector(connInstance);\n         LOG.debug(\"Connector to be registered: {}\", connector);\n \n         String beanName = getBeanName(resource);\n@@ -137,11 +148,6 @@ public void unregisterConnector(final String id) {\n         ApplicationContextProvider.getBeanFactory().destroySingleton(id);\n     }\n \n-    @Override\n-    public Integer getPriority() {\n-        return 100;\n-    }\n-\n     @Transactional(readOnly = true)\n     @Override\n     public void load() {\n@@ -171,7 +177,7 @@ public void load() {\n     public void unload() {\n         int connectors = 0;\n         for (ExternalResource resource : resourceDAO.findAll()) {\n-            final String beanName = getBeanName(resource);\n+            String beanName = getBeanName(resource);\n             if (ApplicationContextProvider.getBeanFactory().containsSingleton(beanName)) {\n                 LOG.info(\"Unegistering resource-connector pair {}-{}\", resource, resource.getConnector());\n                 unregisterConnector(beanName);"},{"sha":"94c68ee78e3a19c78d98f83db702fcf183187fa1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -130,7 +130,7 @@ private Map<VirSchema, List<String>> getValues(final Any<?, ?> any, final Set<Vi\n                     ConnectorObject connectorObject = connector.getObject(\n                             entry.getKey().getObjectClass(),\n                             new Uid(connObjectKey),\n-                            connector.getOperationOptions(linkingMappingItems.iterator()));\n+                            MappingUtils.buildOperationOptions(linkingMappingItems.iterator()));\n \n                     if (connectorObject == null) {\n                         LOG.debug(\"No read from {} about {}\", entry.getKey(), connObjectKey);"},{"sha":"70914ae618c6ed1197605b7a4215095b9bffe861","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":8,"deletions":39,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -21,8 +21,6 @@\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -57,35 +55,6 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Override\n-    public Set<ConnConfProperty> mergeConnConfProperties(\n-            final Set<ConnConfProperty> primary,\n-            final Set<ConnConfProperty> secondary) {\n-\n-        Set<ConnConfProperty> conf = new HashSet<>();\n-\n-        // to be used to control managed prop (needed by overridden mechanism)\n-        Set<String> propertyNames = new HashSet<>();\n-\n-        // get overridden connector configuration properties\n-        for (ConnConfProperty prop : primary) {\n-            if (!propertyNames.contains(prop.getSchema().getName())) {\n-                conf.add(prop);\n-                propertyNames.add(prop.getSchema().getName());\n-            }\n-        }\n-\n-        // get connector configuration properties\n-        for (ConnConfProperty prop : secondary) {\n-            if (!propertyNames.contains(prop.getSchema().getName())) {\n-                conf.add(prop);\n-                propertyNames.add(prop.getSchema().getName());\n-            }\n-        }\n-\n-        return conf;\n-    }\n-\n     @Override\n     public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n@@ -106,7 +75,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n             sce.getElements().add(\"connectorname\");\n         }\n \n-        if (connInstanceTO.getConfiguration() == null || connInstanceTO.getConfiguration().isEmpty()) {\n+        if (connInstanceTO.getConf().isEmpty()) {\n             sce.getElements().add(\"configuration\");\n         }\n \n@@ -130,7 +99,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n     }\n \n     @Override\n-    public ConnInstance updateConnInstance(final long connInstanceId, final ConnInstanceTO connInstanceTO) {\n+    public ConnInstance update(final long connInstanceId, final ConnInstanceTO connInstanceTO) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         if (connInstanceId == 0) {\n@@ -157,8 +126,8 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n             connInstance.setConnectorName(connInstanceTO.getConnectorName());\n         }\n \n-        if (connInstanceTO.getConfiguration() != null && !connInstanceTO.getConfiguration().isEmpty()) {\n-            connInstance.setConfiguration(connInstanceTO.getConfiguration());\n+        if (connInstanceTO.getConf() != null && !connInstanceTO.getConf().isEmpty()) {\n+            connInstance.setConf(connInstanceTO.getConf());\n         }\n \n         if (connInstanceTO.getDisplayName() != null) {\n@@ -184,7 +153,7 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n     }\n \n     @Override\n-    public ConnConfPropSchema buildConnConfPropSchema(final ConfigurationProperty property) {\n+    public ConnConfPropSchema build(final ConfigurationProperty property) {\n         ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n \n         connConfPropSchema.setName(property.getName());\n@@ -219,9 +188,9 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         ConfigurationProperties properties =\n                 connIdBundleManager.getConfigurationProperties(connIdBundleManager.getConnectorInfo(connInstance));\n         for (final String propName : properties.getPropertyNames()) {\n-            ConnConfPropSchema schema = buildConnConfPropSchema(properties.getProperty(propName));\n+            ConnConfPropSchema schema = build(properties.getProperty(propName));\n \n-            ConnConfProperty property = CollectionUtils.find(connInstanceTO.getConfiguration(),\n+            ConnConfProperty property = CollectionUtils.find(connInstanceTO.getConf(),\n                     new Predicate<ConnConfProperty>() {\n \n                         @Override\n@@ -231,7 +200,7 @@ public boolean evaluate(final ConnConfProperty candidate) {\n                     });\n             if (property == null) {\n                 property = new ConnConfProperty();\n-                connInstanceTO.getConfiguration().add(property);\n+                connInstanceTO.getConf().add(property);\n             }\n \n             property.setSchema(schema);"},{"sha":"dff71a0ba4aafc8162a37978434eeebd3d0810c4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":10,"deletions":19,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -43,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.SyncPolicy;\n-import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -67,9 +65,6 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ConnectorRegistry connRegistry;\n-\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n@@ -100,7 +95,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             resource.setConnector(connector);\n \n             if (!connector.getResources().contains(resource)) {\n-                connector.addResource(resource);\n+                connector.add(resource);\n             }\n         }\n \n@@ -196,7 +191,11 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setSyncPolicy(resourceTO.getSyncPolicy() == null\n                 ? null : (SyncPolicy) policyDAO.find(resourceTO.getSyncPolicy()));\n \n-        resource.setConnInstanceConfiguration(new HashSet<>(resourceTO.getConnConfProperties()));\n+        resource.setConfOverride(new HashSet<>(resourceTO.getConfOverride()));\n+\n+        resource.setOverrideCapabilities(resourceTO.isOverrideCapabilities());\n+        resource.getCapabilitiesOverride().clear();\n+        resource.getCapabilitiesOverride().addAll(resourceTO.getCapabilitiesOverride());\n \n         resource.getPropagationActionsClassNames().clear();\n         resource.getPropagationActionsClassNames().addAll(resourceTO.getPropagationActionsClassNames());\n@@ -270,17 +269,6 @@ private MappingItem getMappingItem(final MappingItemTO itemTO, final MappingItem\n         return item;\n     }\n \n-    @Override\n-    public ConnInstance getConnInstance(final ResourceTO resourceTO) {\n-        ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnector());\n-        if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + resourceTO.getConnector() + \"'\");\n-        }\n-\n-        final ConnInstance connInstanceClone = SerializationUtils.clone(connInstance);\n-        return connRegistry.getOverriddenConnInstance(connInstanceClone, resourceTO.getConnConfProperties());\n-    }\n-\n     private void populateMappingTO(final Mapping mapping, final MappingTO mappingTO) {\n         mappingTO.setConnObjectLink(mapping.getConnObjectLink());\n \n@@ -367,7 +355,10 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.setSyncPolicy(resource.getSyncPolicy() == null\n                 ? null : resource.getSyncPolicy().getKey());\n \n-        resourceTO.getConnConfProperties().addAll(resource.getConnInstanceConfiguration());\n+        resourceTO.getConfOverride().addAll(resource.getConfOverride());\n+\n+        resourceTO.setOverrideCapabilities(resource.isOverrideCapabilities());\n+        resourceTO.getCapabilitiesOverride().addAll(resource.getCapabilitiesOverride());\n \n         resourceTO.getPropagationActionsClassNames().addAll(resource.getPropagationActionsClassNames());\n "},{"sha":"c083187b41edbf3df8f62ada3d9a6a182517cc24","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -566,7 +566,7 @@ protected ConnectorObject getRemoteObject(\n                     task.getOperation(),\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(connObjectKey),\n-                    connector.getOperationOptions(IteratorUtils.chainedIterator(\n+                    MappingUtils.buildOperationOptions(IteratorUtils.chainedIterator(\n                                     MappingUtils.getPropagationMappingItems(provision).iterator(),\n                                     linkingMappingItems.iterator())));\n "},{"sha":"6910c198b098659722c245da8c0707a3658cff01","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -88,7 +88,7 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n         ConnConfProperty cipherAlgorithm =\n-                CollectionUtils.find(connInstance.getConfiguration(), new Predicate<ConnConfProperty>() {\n+                CollectionUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n \n                     @Override\n                     public boolean evaluate(final ConnConfProperty property) {"},{"sha":"3ba0dc9581c5d308df993ecd6bbeb8f2f0cc22f5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -94,7 +94,7 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n         ConnConfProperty cipherAlgorithm =\n-                CollectionUtils.find(connInstance.getConfiguration(), new Predicate<ConnConfProperty>() {\n+                CollectionUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n \n                     @Override\n                     public boolean evaluate(final ConnConfProperty property) {"},{"sha":"e0d3d598fcfb09455f24e632dcffec48ba9d0266","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -134,7 +134,7 @@ protected ConnectorObject getRemoteObject(final String connObjectKey, final Obje\n             obj = profile.getConnector().getObject(\n                     objectClass,\n                     uid,\n-                    profile.getConnector().getOperationOptions(IteratorUtils.<MappingItem>emptyIterator()));\n+                    MappingUtils.buildOperationOptions(IteratorUtils.<MappingItem>emptyIterator()));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"35e50f92f7e6130d521006acaee4af15505f7a13","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DBPasswordSyncActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -91,7 +91,7 @@ public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n \n     private void parseEncodedPassword(final String password, final Connector connector) {\n         if (password != null) {\n-            ConnInstance connInstance = connector.getActiveConnInstance();\n+            ConnInstance connInstance = connector.getConnInstance();\n \n             String cipherAlgorithm = getCipherAlgorithm(connInstance);\n             if (!CLEARTEXT.equals(cipherAlgorithm)) {\n@@ -108,7 +108,7 @@ private void parseEncodedPassword(final String password, final Connector connect\n \n     private String getCipherAlgorithm(final ConnInstance connInstance) {\n         ConnConfProperty cipherAlgorithm =\n-                CollectionUtils.find(connInstance.getConfiguration(), new Predicate<ConnConfProperty>() {\n+                CollectionUtils.find(connInstance.getConf(), new Predicate<ConnConfProperty>() {\n \n                     @Override\n                     public boolean evaluate(final ConnConfProperty property) {"},{"sha":"59e8c42c3514eb3156c4a62980a3152c6485489b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -109,7 +110,7 @@ public class LDAPMembershipSyncActions extends DefaultSyncActions {\n      * @return the name of the attribute used to keep track of group memberships\n      */\n     protected String getGroupMembershipAttrName(final Connector connector) {\n-        ConnConfProperty groupMembership = CollectionUtils.find(connector.getActiveConnInstance().getConfiguration(),\n+        ConnConfProperty groupMembership = CollectionUtils.find(connector.getConnInstance().getConf(),\n                 new Predicate<ConnConfProperty>() {\n \n                     @Override\n@@ -196,7 +197,12 @@ protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector\n         if (membAttr == null) {\n             OperationOptionsBuilder oob = new OperationOptionsBuilder();\n             oob.setAttributesToGet(groupMemberName);\n-            membAttr = connector.getObjectAttribute(ObjectClass.GROUP, delta.getUid(), oob.build(), groupMemberName);\n+            ConnectorObject remoteObj = connector.getObject(ObjectClass.GROUP, delta.getUid(), oob.build());\n+            if (remoteObj == null) {\n+                LOG.debug(\"Object for '{}' not found\", delta.getUid().getUidValue());\n+            } else {\n+                membAttr = remoteObj.getAttributeByName(groupMemberName);\n+            }\n         }\n         if (membAttr != null && membAttr.getValue() != null) {\n             result = membAttr.getValue();"},{"sha":"d3a4a4d7f36597e9c418479bc6c05e2f0811c1b0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n+import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -185,13 +186,13 @@ protected String doExecuteProvisioning(\n                         connector.getAllObjects(\n                                 provision.getObjectClass(),\n                                 handler,\n-                                connector.getOperationOptions(mapItems));\n+                                MappingUtils.buildOperationOptions(mapItems));\n                     } else {\n                         connector.sync(\n                                 provision.getObjectClass(),\n                                 provision.getSyncToken(),\n                                 handler,\n-                                connector.getOperationOptions(mapItems));\n+                                MappingUtils.buildOperationOptions(mapItems));\n                     }\n \n                     if (!dryRun && !syncTask.isFullReconciliation()) {"},{"sha":"4fa504e836e87127e17fdf8b1ca0bb933af3f2d4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -128,7 +128,7 @@ public boolean handle(final ConnectorObject obj) {\n                         return found.add(obj);\n                     }\n                 },\n-                connector.getOperationOptions(MappingUtils.getSyncMappingItems(provision).iterator()));\n+                MappingUtils.buildOperationOptions(MappingUtils.getSyncMappingItems(provision).iterator()));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.getObjectClass(), resource, name);"},{"sha":"c64a02d349492855b9277e717454cdde0c6f1e7d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -24,10 +24,8 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.core.logic.ConnectorLogic;\n@@ -60,13 +58,10 @@ public List<ConnBundleTO> getBundles(final String lang) {\n     }\n \n     @Override\n-    public List<PlainSchemaTO> buildSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n-        return logic.buildSchemaNames(connInstanceTO, includeSpecial);\n-    }\n+    public List<ConnIdObjectClassTO> buildObjectClassInfo(\n+            final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n-    @Override\n-    public List<ConnIdObjectClass> buildSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n-        return CollectionWrapper.wrap(logic.buildSupportedObjectClasses(connInstanceTO), ConnIdObjectClass.class);\n+        return logic.buildObjectClassInfo(connInstanceTO, includeSpecial);\n     }\n \n     @Override"},{"sha":"b8a9fa777c0f73aba3166eb362b0033e53d3981e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.LoggerWrapper;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.core.logic.LoggerLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -66,7 +66,7 @@ public List<LoggerTO> list(final LoggerType type) {\n \n             case AUDIT:\n                 List<AuditLoggerName> auditLogger = logic.listAudits();\n-                return CollectionWrapper.unwrapLogger(auditLogger);\n+                return LoggerWrapper.unwrap(auditLogger);\n \n             default:\n                 throw new BadRequestException();"},{"sha":"39dbba902cdc1cdb76ce6e9763b94eb72e7ac58b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":17,"deletions":20,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -28,15 +28,14 @@\n import javax.ws.rs.core.UriBuilder;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -134,41 +133,39 @@ public void check(final ResourceTO resourceTO) {\n     }\n \n     @Override\n-    public BulkActionResult bulkDeassociation(\n-            final String key, final String anyTypeKey, final ResourceDeassociationAction type,\n-            final List<AnyKey> keys) {\n-\n-        AbstractResourceAssociator<? extends AnyTO> associator = anyTypeKey.equalsIgnoreCase(AnyTypeKind.USER.name())\n-                ? userLogic\n-                : anyTypeKey.equalsIgnoreCase(AnyTypeKind.GROUP.name())\n-                        ? groupLogic\n-                        : anyObjectLogic;\n+    public BulkActionResult bulkDeassociation(final ResourceDeassociationPatch patch) {\n+        AbstractResourceAssociator<? extends AnyTO> associator =\n+                patch.getAnyTypeKey().equalsIgnoreCase(AnyTypeKind.USER.name())\n+                        ? userLogic\n+                        : patch.getAnyTypeKey().equalsIgnoreCase(AnyTypeKind.GROUP.name())\n+                                ? groupLogic\n+                                : anyObjectLogic;\n \n         BulkActionResult result = new BulkActionResult();\n \n-        for (AnyKey anyKey : keys) {\n-            Set<String> resources = Collections.singleton(key);\n+        for (Long anyKey : patch.getAnyKyes()) {\n+            Set<String> resources = Collections.singleton(patch.getKey());\n             try {\n-                switch (type) {\n+                switch (patch.getAction()) {\n                     case DEPROVISION:\n-                        associator.deprovision(anyKey.getElement(), resources);\n+                        associator.deprovision(anyKey, resources);\n                         break;\n \n                     case UNASSIGN:\n-                        associator.unassign(anyKey.getElement(), resources);\n+                        associator.unassign(anyKey, resources);\n                         break;\n \n                     case UNLINK:\n-                        associator.unlink(anyKey.getElement(), resources);\n+                        associator.unlink(anyKey, resources);\n                         break;\n \n                     default:\n                 }\n \n-                result.getResults().put(String.valueOf(anyKey.getElement()), BulkActionResult.Status.SUCCESS);\n+                result.getResults().put(String.valueOf(anyKey), BulkActionResult.Status.SUCCESS);\n             } catch (Exception e) {\n-                LOG.warn(\"While executing {} on {} {}\", type, anyTypeKey, anyKey.getElement(), e);\n-                result.getResults().put(String.valueOf(anyKey.getElement()), BulkActionResult.Status.FAILURE);\n+                LOG.warn(\"While executing {} on {} {}\", patch.getAction(), patch.getAnyTypeKey(), anyKey, e);\n+                result.getResults().put(String.valueOf(anyKey), BulkActionResult.Status.FAILURE);\n             }\n         }\n "},{"sha":"60565e174c6491e69d8fe6ab7783b1f590e058b2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -399,7 +399,7 @@ protected InitialDirContext getLdapResourceDirContext(final String bindDn, final\n             throws NamingException {\n         ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n         final Map<String, ConnConfProperty> ldapConnConf =\n-                connectorService.read(ldapRes.getConnector(), Locale.ENGLISH.getLanguage()).getConfigurationMap();\n+                connectorService.read(ldapRes.getConnector(), Locale.ENGLISH.getLanguage()).getConfMap();\n \n         Properties env = new Properties();\n         env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");"},{"sha":"770a7cbd23e974285b0f77e6d9a7f39774d2c64e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":35,"deletions":49,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -28,6 +28,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -37,24 +38,25 @@\n import java.util.Properties;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n-import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.common.security.GuardedString;\n@@ -146,7 +148,7 @@ public void create() {\n         conf.add(servicename);\n \n         // set connector configuration\n-        connectorTO.getConfiguration().addAll(conf);\n+        connectorTO.getConf().addAll(conf);\n \n         // set connector capabilities\n         connectorTO.getCapabilities().add(ConnectorCapability.CREATE);\n@@ -253,7 +255,7 @@ public void update() {\n         conf.add(servicename);\n \n         // set connector configuration\n-        connectorTO.getConfiguration().addAll(conf);\n+        connectorTO.getConf().addAll(conf);\n \n         connectorService.update(connectorTO);\n         ConnInstanceTO actual = connectorService.read(connectorTO.getKey(), Locale.ENGLISH.getLanguage());\n@@ -397,7 +399,7 @@ public void getBundles() {\n \n     @Test\n     public void getConnectorConfiguration() {\n-        Set<ConnConfProperty> props = connectorService.read(104L, Locale.ENGLISH.getLanguage()).getConfiguration();\n+        Set<ConnConfProperty> props = connectorService.read(104L, Locale.ENGLISH.getLanguage()).getConf();\n         assertNotNull(props);\n         assertFalse(props.isEmpty());\n     }\n@@ -408,7 +410,7 @@ public void checkHiddenProperty() {\n \n         boolean check = false;\n \n-        for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n+        for (ConnConfProperty prop : connInstanceTO.getConf()) {\n             if (\"receiveTimeout\".equals(prop.getSchema().getName())) {\n                 check = true;\n             }\n@@ -424,7 +426,7 @@ public void checkSelectedLanguage() {\n         Map<String, ConnConfProperty> instanceConfMap;\n         for (ConnInstanceTO instance : connectorInstanceTOs) {\n             if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n-                instanceConfMap = instance.getConfigurationMap();\n+                instanceConfMap = instance.getConfMap();\n                 assertEquals(\"Utente\", instanceConfMap.get(\"user\").getSchema().getDisplayName());\n             }\n         }\n@@ -434,7 +436,7 @@ public void checkSelectedLanguage() {\n \n         for (ConnInstanceTO instance : connectorInstanceTOs) {\n             if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n-                instanceConfMap = instance.getConfigurationMap();\n+                instanceConfMap = instance.getConfMap();\n                 assertEquals(\"User\", instanceConfMap.get(\"user\").getSchema().getDisplayName());\n             }\n         }\n@@ -516,7 +518,7 @@ public void validate() {\n         conf.add(passwordColumn);\n \n         // set connector configuration\n-        connectorTO.getConfiguration().addAll(conf);\n+        connectorTO.getConf().addAll(conf);\n \n         try {\n             connectorService.check(connectorTO);\n@@ -538,51 +540,35 @@ public void validate() {\n     }\n \n     @Test\n-    public void getSchemaNames() {\n-        ConnInstanceTO conn = connectorService.read(101L, Locale.ENGLISH.getLanguage());\n-\n-        List<PlainSchemaTO> schemaNames = connectorService.buildSchemaNames(conn, true);\n-        assertNotNull(schemaNames);\n-        assertFalse(schemaNames.isEmpty());\n-        assertNotNull(schemaNames.get(0).getKey());\n-        assertNull(schemaNames.get(0).getEnumerationValues());\n+    public void buildObjectClassInfo() {\n+        ConnInstanceTO ws = connectorService.read(102L, Locale.ENGLISH.getLanguage());\n+        assertNotNull(ws);\n \n-        schemaNames = connectorService.buildSchemaNames(conn, false);\n+        List<ConnIdObjectClassTO> objectClassInfo = connectorService.buildObjectClassInfo(ws, true);\n+        assertNotNull(objectClassInfo);\n+        assertEquals(1, objectClassInfo.size());\n+        assertEquals(ObjectClass.ACCOUNT_NAME, objectClassInfo.get(0).getType());\n+        assertTrue(objectClassInfo.get(0).getAttributes().contains(\"promoThirdPartyDisclaimer\"));\n \n-        assertNotNull(schemaNames);\n-        assertEquals(1, schemaNames.size());\n+        ConnInstanceTO ldap = connectorService.read(105L, Locale.ENGLISH.getLanguage());\n+        assertNotNull(ldap);\n \n-        conn = connectorService.read(104L, Locale.ENGLISH.getLanguage());\n+        objectClassInfo = connectorService.buildObjectClassInfo(ldap, true);\n+        assertNotNull(objectClassInfo);\n+        assertEquals(2, objectClassInfo.size());\n \n-        // to be used with overridden properties\n-        conn.getConfiguration().clear();\n+        Collection<String> objectClasses = CollectionUtils.collect(objectClassInfo,\n+                new Transformer<ConnIdObjectClassTO, String>() {\n \n-        schemaNames = connectorService.buildSchemaNames(conn, true);\n-        assertNotNull(schemaNames);\n-        assertFalse(schemaNames.isEmpty());\n-    }\n-\n-    @Test\n-    public void getSupportedObjectClasses() {\n-        ConnInstanceTO ldap = connectorService.read(105L, Locale.ENGLISH.getLanguage());\n-        assertNotNull(ldap);\n+                    @Override\n+                    public String transform(final ConnIdObjectClassTO info) {\n+                        return info.getType();\n+                    }\n \n-        List<ConnIdObjectClass> objectClasses = connectorService.buildSupportedObjectClasses(ldap);\n-        assertNotNull(objectClasses);\n+                });\n         assertEquals(2, objectClasses.size());\n-        assertTrue(objectClasses.contains(\n-                ConnIdObjectClass.getInstance(ConnIdObjectClass.class, ObjectClass.ACCOUNT_NAME)));\n-        assertTrue(objectClasses.contains(\n-                ConnIdObjectClass.getInstance(ConnIdObjectClass.class, ObjectClass.GROUP_NAME)));\n-\n-        ConnInstanceTO csv = connectorService.read(104L, Locale.ENGLISH.getLanguage());\n-        assertNotNull(csv);\n-\n-        objectClasses = connectorService.buildSupportedObjectClasses(csv);\n-        assertNotNull(objectClasses);\n-        assertEquals(1, objectClasses.size());\n-        assertTrue(objectClasses.contains(\n-                ConnIdObjectClass.getInstance(ConnIdObjectClass.class, ObjectClass.ACCOUNT_NAME)));\n+        assertTrue(objectClasses.contains(ObjectClass.ACCOUNT_NAME));\n+        assertTrue(objectClasses.contains(ObjectClass.GROUP_NAME));\n     }\n \n     @Test\n@@ -631,7 +617,7 @@ public void issueSYNCOPE112() {\n         conf.add(servicename);\n \n         // set connector configuration\n-        connectorTO.getConfiguration().addAll(conf);\n+        connectorTO.getConf().addAll(conf);\n \n         try {\n             try {\n@@ -664,7 +650,7 @@ public void issueSYNCOPE112() {\n             endpoint.getValues().add(\"http://localhost:9080/wssample/services/provisioning\");\n             conf.add(endpoint);\n \n-            resourceTO.getConnConfProperties().addAll(conf);\n+            resourceTO.getConfOverride().addAll(conf);\n \n             ProvisionTO provisionTO = new ProvisionTO();\n             provisionTO.setAnyType(AnyTypeKind.USER.name());"},{"sha":"236d1695b85fe6a069daeff7ec25e14cbfea337f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/LoggerITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FLoggerITCase.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.LoggerWrapper;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.logic.ResourceLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n@@ -105,7 +105,7 @@ public void enableDisableAudit() {\n                 \"deleteExecution\",\n                 AuditElements.Result.FAILURE);\n \n-        List<AuditLoggerName> audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n+        List<AuditLoggerName> audits = LoggerWrapper.wrap(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n \n@@ -114,13 +114,13 @@ public void enableDisableAudit() {\n         loggerTO.setLevel(LoggerLevel.DEBUG);\n         loggerService.update(LoggerType.AUDIT, loggerTO);\n \n-        audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n+        audits = LoggerWrapper.wrap(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n         assertTrue(audits.contains(auditLoggerName));\n \n         loggerService.delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n \n-        audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n+        audits = LoggerWrapper.wrap(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n     }"},{"sha":"5d4d17615a0c70060aefdac80e2f4d0e14bd5358","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ResourceITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FResourceITCase.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -170,7 +170,7 @@ public void createOverridingProps() {\n         p.getValues().add(\"http://invalidurl/\");\n \n         Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<>(Arrays.asList(p));\n-        resourceTO.getConnConfProperties().addAll(connectorConfigurationProperties);\n+        resourceTO.getConfOverride().addAll(connectorConfigurationProperties);\n \n         Response response = resourceService.create(resourceTO);\n         ResourceTO actual = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);"},{"sha":"ef7324248a16e0843f161fbc9998421c34eed1bb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -748,7 +748,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         ResourceTO ldapResource = resourceService.read(RESOURCE_NAME_LDAP);\n         ConnInstanceTO resourceConnector = connectorService.read(\n                 ldapResource.getConnector(), Locale.ENGLISH.getLanguage());\n-        ConnConfProperty property = resourceConnector.getConfigurationMap().get(\"retrievePasswordsWithSearch\");\n+        ConnConfProperty property = resourceConnector.getConfMap().get(\"retrievePasswordsWithSearch\");\n         property.getValues().clear();\n         property.getValues().add(Boolean.TRUE);\n         connectorService.update(resourceConnector);"},{"sha":"cf00ffdf730a1238fdece1158fcb8578603741ae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=1347c1081dd9eb3e32ae0b0f39e47fa5498aa3c3","patch":"@@ -367,7 +367,7 @@ public void issueSYNCOPE442() {\n         String jdbcURL = null;\n         ConnInstanceTO connInstanceTO = connectorService.readByResource(\n                 RESOURCE_NAME_DBVIRATTR, Locale.ENGLISH.getLanguage());\n-        for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n+        for (ConnConfProperty prop : connInstanceTO.getConf()) {\n             if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n                 jdbcURL = prop.getValues().iterator().next().toString();\n                 prop.getValues().clear();\n@@ -400,7 +400,7 @@ public void issueSYNCOPE442() {\n         // ----------------------------------------\n         // 5. restore connector URL, values can be read again from external resource\n         // ----------------------------------------\n-        for (ConnConfProperty prop : connInstanceTO.getConfiguration()) {\n+        for (ConnConfProperty prop : connInstanceTO.getConf()) {\n             if (\"jdbcUrlTemplate\".equals(prop.getSchema().getName())) {\n                 prop.getValues().clear();\n                 prop.getValues().add(jdbcURL);"}]}