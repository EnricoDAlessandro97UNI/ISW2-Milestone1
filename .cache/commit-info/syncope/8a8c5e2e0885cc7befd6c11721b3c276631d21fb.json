{"sha":"8a8c5e2e0885cc7befd6c11721b3c276631d21fb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhhOGM1ZTJlMDg4NWNjN2JlZmQ2YzExNzIxYjNjMjc2NjMxZDIxZmI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-15T09:08:14Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-15T09:08:14Z"},"message":"Performance analysis completed: added indexes and more second-level caching\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246695 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"20c1439cdf0e5bc7d47db7484b2b0a839184c943","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/20c1439cdf0e5bc7d47db7484b2b0a839184c943"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8a8c5e2e0885cc7befd6c11721b3c276631d21fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a8c5e2e0885cc7befd6c11721b3c276631d21fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a8c5e2e0885cc7befd6c11721b3c276631d21fb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/comments","author":null,"committer":null,"parents":[{"sha":"4eb90b200445456e3482e305aebda6e63951289a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4eb90b200445456e3482e305aebda6e63951289a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4eb90b200445456e3482e305aebda6e63951289a"}],"stats":{"total":539,"additions":260,"deletions":279},"files":[{"sha":"9250d7d0c99deb2e044223fe67bc87453025eb7c","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":68,"deletions":36,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -61,30 +61,12 @@ public final void contextInitialized(final ServletContextEvent sce) {\n                 WebApplicationContextUtils.getWebApplicationContext(\n                 sce.getServletContext());\n \n+        // 0. DB connection, to be used below\n         DataSource dataSource =\n                 (DataSource) springContext.getBean(\"localDataSource\");\n-        DefaultDataTypeFactory dbUnitDataTypeFactory =\n-                (DefaultDataTypeFactory) springContext.getBean(\n-                \"dbUnitDataTypeFactory\");\n-\n-        String dbSchema = null;\n-        try {\n-            InputStream dbPropsStream =\n-                    sce.getServletContext().getResourceAsStream(\n-                    \"WEB-INF/classes/persistence.properties\");\n-            Properties dbProps = new Properties();\n-            dbProps.load(dbPropsStream);\n-            dbSchema = dbProps.getProperty(\"database.schema\");\n-        } catch (Throwable t) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Could not find persistence.properties\", t);\n-            } else {\n-                LOG.error(\"Could not find persistence.properties\");\n-            }\n-        }\n-\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n \n+        // 1. Check wether we are allowed to load default content into the DB\n         Statement statement = null;\n         ResultSet resultSet = null;\n         boolean existingData = false;\n@@ -109,38 +91,88 @@ public final void contextInitialized(final ServletContextEvent sce) {\n                 resultSet.close();\n                 statement.close();\n             } catch (SQLException e) {\n-                LOG.error(\"While closing SQL connection\", e);\n+                LOG.error(\"While closing SQL statement\", e);\n             }\n         }\n+\n+        if (existingData) {\n+            LOG.info(\"Data found in the database, leaving untouched\");\n+            return;\n+        }\n+\n+        LOG.info(\"Empty database found, loading default content\");\n+\n+        LOG.debug(\"Creating indexes\");\n+        try {\n+            InputStream indexesStream = getClass().getResourceAsStream(\n+                    \"/indexes.xml\");\n+            Properties indexes = new Properties();\n+            indexes.loadFromXML(indexesStream);\n+\n+            for (String idx : indexes.stringPropertyNames()) {\n+                LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n+\n+                try {\n+                    statement = conn.createStatement();\n+                    statement.executeQuery(indexes.get(idx).toString());\n+                    statement.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"Could not create index \", e);\n+                }\n+            }\n+\n+            LOG.debug(\"Indexes created, go for default content\");\n+        } catch (Throwable t) {\n+            LOG.error(\"While creating indexes\", t);\n+        }\n+\n+        String dbSchema = null;\n+        try {\n+            InputStream dbPropsStream = getClass().getResourceAsStream(\n+                    \"/persistence.properties\");\n+            Properties dbProps = new Properties();\n+            dbProps.load(dbPropsStream);\n+            dbSchema = dbProps.getProperty(\"database.schema\");\n+        } catch (Throwable t) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Could not find persistence.properties\", t);\n+            } else {\n+                LOG.error(\"Could not find persistence.properties\");\n+            }\n+        }\n+\n         try {\n             IDatabaseConnection dbUnitConn = dbSchema == null\n                     ? new DatabaseConnection(conn)\n                     : new DatabaseConnection(conn, dbSchema);\n \n             DatabaseConfig config = dbUnitConn.getConfig();\n             config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,\n-                    dbUnitDataTypeFactory);\n+                    (DefaultDataTypeFactory) springContext.getBean(\n+                    \"dbUnitDataTypeFactory\"));\n             config.setProperty(\n-                    DatabaseConfig.FEATURE_SKIP_ORACLE_RECYCLEBIN_TABLES, true);\n+                    DatabaseConfig.FEATURE_SKIP_ORACLE_RECYCLEBIN_TABLES,\n+                    true);\n \n-            if (existingData) {\n-                LOG.info(\"Data found in the database, leaving untouched\");\n-            } else {\n-                LOG.info(\"Empty database found, loading default content\");\n+            FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n+            dataSetBuilder.setColumnSensing(true);\n+            IDataSet dataSet = dataSetBuilder.build(getClass().\n+                    getResourceAsStream(\"/content.xml\"));\n \n-                FlatXmlDataSetBuilder dataSetBuilder =\n-                        new FlatXmlDataSetBuilder();\n-                dataSetBuilder.setColumnSensing(true);\n-                IDataSet dataSet = dataSetBuilder.build(\n-                        getClass().getResourceAsStream(\"/content.xml\"));\n+            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n \n-                DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n-            }\n+            LOG.debug(\"Default content successfully loaded\");\n         } catch (Throwable t) {\n             LOG.error(\"While loading default content\", t);\n         } finally {\n             DataSourceUtils.releaseConnection(conn, dataSource);\n         }\n+\n+        try {\n+            conn.close();\n+        } catch (SQLException e) {\n+            LOG.error(\"While closing SQL connection\", e);\n+        }\n     }\n \n     @Override"},{"sha":"4740fc54cf774ea18b1801bb8a461b7ea0e87857","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -22,10 +22,13 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.hibernate.validator.constraints.Range;\n import org.syncope.types.SourceMappingType;\n \n @Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class SchemaMapping extends AbstractBaseBean {\n \n     @Id"},{"sha":"1b4ec7bca683f32c2bcbef2ead00b167c57a1629","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":16,"deletions":27,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -26,10 +26,7 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n-import javax.persistence.NamedQueries;\n-import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n-import javax.persistence.QueryHint;\n import javax.validation.Valid;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n@@ -38,36 +35,13 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.validation.entity.TargetResourceCheck;\n+import org.syncope.types.SourceMappingType;\n \n /**\n  * A resource to which propagation occurs.\n  */\n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n-@NamedQueries({\n-    @NamedQuery(name = \"TargetResource.find\",\n-    query = \"SELECT e FROM TargetResource e WHERE e.name = :name\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n-    }),\n-    @NamedQuery(name = \"TargetResource.getMappings\",\n-    query = \"SELECT m FROM SchemaMapping m \"\n-    + \"WHERE m.sourceAttrName=:sourceAttrName \"\n-    + \"AND m.sourceMappingType=:sourceMappingType\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\"),\n-        @QueryHint(name = \"org.hibernate.cacheMode\", value = \"refresh\")\n-    }),\n-    @NamedQuery(name = \"TargetResource.getMappingsByTargetResource\",\n-    query = \"SELECT m FROM SchemaMapping m \"\n-    + \"WHERE m.sourceAttrName=:sourceAttrName \"\n-    + \"AND m.sourceMappingType=:sourceMappingType \"\n-    + \"AND m.resource.name=:resourceName\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\"),\n-        @QueryHint(name = \"org.hibernate.cacheMode\", value = \"refresh\")\n-    })\n-})\n @TargetResourceCheck\n public class TargetResource extends AbstractBaseBean {\n \n@@ -172,6 +146,21 @@ public List<SchemaMapping> getMappings() {\n         return mappings;\n     }\n \n+    public List<SchemaMapping> getMappings(final String sourceAttrName,\n+            final SourceMappingType sourceMappingType) {\n+\n+        List<SchemaMapping> result = new ArrayList<SchemaMapping>();\n+        for (SchemaMapping mapping : mappings) {\n+            if (mapping.getSourceAttrName().equals(sourceAttrName)\n+                    && mapping.getSourceMappingType() == sourceMappingType) {\n+\n+                result.add(mapping);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public boolean removeMapping(SchemaMapping mapping) {\n         return mappings == null || mappings.remove(mapping);\n     }"},{"sha":"28b3814f08f416e57f98b5ff298cde46113e58b5","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MSchema.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -18,10 +18,7 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n-import javax.persistence.NamedQueries;\n-import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n-import javax.persistence.QueryHint;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttr;\n@@ -30,13 +27,6 @@\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n-@NamedQueries({\n-    @NamedQuery(name = \"MSchema.findAll\",\n-    query = \"SELECT e FROM MSchema e\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n-    })\n-})\n public class MSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")"},{"sha":"96c4cb7e74c60607fe4ea76beec48089ba85787b","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RSchema.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -18,10 +18,7 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n-import javax.persistence.NamedQueries;\n-import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n-import javax.persistence.QueryHint;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttr;\n@@ -30,13 +27,6 @@\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n-@NamedQueries({\n-    @NamedQuery(name = \"RSchema.findAll\",\n-    query = \"SELECT e FROM RSchema e\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n-    })\n-})\n public class RSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")"},{"sha":"58c220bebda758234a1801ce737a970048e206cf","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -31,6 +31,8 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -45,6 +47,7 @@\n     \"name\",\n     \"parent_id\"\n }))\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class SyncopeRole extends AbstractAttributable {\n \n     @Id\n@@ -208,6 +211,15 @@ public void setInheritAttributes(boolean inheritAttributes) {\n         this.inheritAttributes = getBooleanAsInteger(inheritAttributes);\n     }\n \n+    public List<RAttr> findInheritedAttributes() {\n+        List<RAttr> result = new ArrayList<RAttr>(attributes);\n+        if (isInheritAttributes() && getParent() != null) {\n+            result.addAll(getParent().findInheritedAttributes());\n+        }\n+\n+        return result;\n+    }\n+\n     public boolean isInheritDerivedAttributes() {\n         return isBooleanAsInteger(inheritDerivedAttributes);\n     }\n@@ -217,4 +229,13 @@ public void setInheritDerivedAttributes(boolean inheritDerivedAttributes) {\n                 getBooleanAsInteger(inheritDerivedAttributes);\n \n     }\n+\n+    public List<RDerAttr> findInheritedDerivedAttributes() {\n+        List<RDerAttr> result = new ArrayList<RDerAttr>(derivedAttributes);\n+        if (isInheritDerivedAttributes() && getParent() != null) {\n+            result.addAll(getParent().findInheritedDerivedAttributes());\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"9a85337a2e92ad295f657ed4ce0524f46e7a7853","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -28,10 +28,7 @@\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n-import javax.persistence.NamedQueries;\n-import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n-import javax.persistence.QueryHint;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.Valid;\n@@ -47,18 +44,6 @@\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n-@NamedQueries({\n-    @NamedQuery(name = \"SyncopeUser.find\",\n-    query = \"SELECT e FROM SyncopeUser e WHERE e.id = :id\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n-    }),\n-    @NamedQuery(name = \"SyncopeUser.findByWorkflowId\",\n-    query = \"SELECT e FROM SyncopeUser e WHERE e.workflowId = :workflowId\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n-    })\n-})\n public class SyncopeUser extends AbstractAttributable {\n \n     @Id"},{"sha":"2f3cbb838b8fb5529fc97f9f9661cbdb59d3f23c","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/USchema.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -18,10 +18,7 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n-import javax.persistence.NamedQueries;\n-import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n-import javax.persistence.QueryHint;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttr;\n@@ -30,13 +27,6 @@\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n-@NamedQueries({\n-    @NamedQuery(name = \"USchema.findAll\",\n-    query = \"SELECT e FROM USchema e\",\n-    hints = {\n-        @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n-    })\n-})\n public class USchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")"},{"sha":"1aed6244b452bfc815e92baaf2ecaf4a189fc66c","filename":"core/src/main/java/org/syncope/core/persistence/dao/ResourceDAO.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -29,12 +29,7 @@ public interface ResourceDAO extends DAO {\n     TargetResource save(TargetResource resource)\n             throws InvalidEntityException;\n \n-    List<SchemaMapping> getMappings(String schemaName,\n-            SourceMappingType sourceMappingType);\n-\n-    List<SchemaMapping> getMappings(String schemaName,\n-            SourceMappingType sourceMappingType,\n-            String resourceName);\n+    List<SchemaMapping> findAllMappings();\n \n     SchemaMapping getMappingForAccountId(String resourceName);\n "},{"sha":"5e04c6d05911c66d5603250b987d3550ae8b6f7c","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeRoleDAO.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -15,22 +15,18 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.role.RAttr;\n-import org.syncope.core.persistence.beans.role.RDerAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface SyncopeRoleDAO extends DAO {\n \n-    SyncopeRole find(String name, Long parent);\n-\n     SyncopeRole find(Long id);\n \n-    List<SyncopeRole> findChildren(Long roleId);\n+    List<SyncopeRole> find(String name);\n \n-    List<RAttr> findInheritedAttributes(SyncopeRole role);\n+    SyncopeRole find(String name, Long parent);\n \n-    List<RDerAttr> findInheritedDerivedAttributes(SyncopeRole role);\n+    List<SyncopeRole> findChildren(Long roleId);\n \n     List<SyncopeRole> findAll();\n "},{"sha":"f4a2a868cd34844c82a813de223777a8ccc88a87","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":21,"deletions":23,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -17,6 +17,7 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import org.hibernate.Session;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n@@ -31,7 +32,10 @@ public class ResourceDAOImpl extends AbstractDAOImpl\n \n     @Override\n     public TargetResource find(final String name) {\n-        Query query = entityManager.createNamedQuery(\"TargetResource.find\");\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM TargetResource e WHERE e.name = :name\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n+\n         query.setParameter(\"name\", name);\n \n         try {\n@@ -54,27 +58,12 @@ public TargetResource save(final TargetResource resource) {\n     }\n \n     @Override\n-    public List<SchemaMapping> getMappings(final String sourceAttrName,\n-            final SourceMappingType sourceMappingType) {\n-\n-        Query query = entityManager.createNamedQuery(\n-                \"TargetResource.getMappings\");\n-        query.setParameter(\"sourceAttrName\", sourceAttrName);\n-        query.setParameter(\"sourceMappingType\", sourceMappingType);\n-\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public List<SchemaMapping> getMappings(final String sourceAttrName,\n-            final SourceMappingType sourceMappingType,\n-            final String resourceName) {\n-\n-        Query query = entityManager.createNamedQuery(\n-                \"TargetResource.getMappingsByTargetResource\");\n-        query.setParameter(\"sourceAttrName\", sourceAttrName);\n-        query.setParameter(\"sourceMappingType\", sourceMappingType);\n-        query.setParameter(\"resourceName\", resourceName);\n+    public List<SchemaMapping> findAllMappings() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SchemaMapping e\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n+        query.setHint(\"org.hibernate.cacheRegion\",\n+                SchemaMapping.class.getName());\n \n         return query.getResultList();\n     }\n@@ -98,6 +87,7 @@ public void deleteMappings(final String sourceAttrName,\n \n         if (sourceMappingType == SourceMappingType.SyncopeUserId\n                 || sourceMappingType == SourceMappingType.Password) {\n+\n             return;\n         }\n \n@@ -110,6 +100,10 @@ public void deleteMappings(final String sourceAttrName,\n \n         int items = query.executeUpdate();\n         LOG.debug(\"Removed {} schema mappings\", items);\n+\n+        // Make empty SchemaMapping query cache\n+        ((Session) entityManager.getDelegate()).getSessionFactory().\n+                evictQueries(SchemaMapping.class.getName());\n     }\n \n     @Override\n@@ -123,6 +117,10 @@ public void deleteAllMappings(final TargetResource resource) {\n         LOG.debug(\"Removed {} schema mappings\", items);\n \n         resource.getMappings().clear();\n+\n+        // Make empty SchemaMapping query cache\n+        ((Session) entityManager.getDelegate()).getSessionFactory().\n+                evictQueries(SchemaMapping.class.getName());\n     }\n \n     @Override\n@@ -132,7 +130,7 @@ public void delete(final String name) {\n             return;\n         }\n \n-        resource.getMappings().clear();\n+        deleteAllMappings(resource);\n \n         resource.getTasks().clear();\n "},{"sha":"c4d613890f59c9498664aac4715d99c2e716f634","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -49,8 +49,9 @@ public <T extends AbstractSchema> T find(final String name,\n     public <T extends AbstractSchema> List<T> findAll(\n             final Class<T> reference) {\n \n-        Query query = entityManager.createNamedQuery(\n-                reference.getSimpleName() + \".findAll\");\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n \n         return query.getResultList();\n     }"},{"sha":"2cab8df3ef587f0d47a41228a8f6ae86b2f12d35","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":25,"deletions":72,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -14,22 +14,44 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.membership.Membership;\n-import org.syncope.core.persistence.beans.role.RAttr;\n-import org.syncope.core.persistence.beans.role.RDerAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Repository\n public class SyncopeRoleDAOImpl extends AbstractDAOImpl\n         implements SyncopeRoleDAO {\n \n+    @Override\n+    public SyncopeRole find(final Long id) {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeRole e WHERE e.id = :id\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n+        query.setParameter(\"id\", id);\n+\n+        try {\n+            return (SyncopeRole) query.getSingleResult();\n+        } catch (NoResultException e) {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public List<SyncopeRole> find(final String name) {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeRole e WHERE e.name = :name\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n+        query.setParameter(\"name\", name);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public SyncopeRole find(final String name, final Long parentId) {\n         Query query;\n@@ -49,11 +71,6 @@ public SyncopeRole find(final String name, final Long parentId) {\n         return result.isEmpty() ? null : result.get(0);\n     }\n \n-    @Override\n-    public SyncopeRole find(final Long id) {\n-        return entityManager.find(SyncopeRole.class, id);\n-    }\n-\n     @Override\n     public List<SyncopeRole> findChildren(final Long roleId) {\n         Query query = entityManager.createQuery(\n@@ -75,70 +92,6 @@ private List<Long> getAncestors(final SyncopeRole role,\n         return ancestors;\n     }\n \n-    @Override\n-    public List<RAttr> findInheritedAttributes(final SyncopeRole role) {\n-        if (role.getParent() == null) {\n-            return Collections.EMPTY_LIST;\n-        }\n-\n-        List<Long> ancestors = getAncestors(role.getParent(),\n-                new ArrayList<Long>());\n-        if (ancestors == null || ancestors.isEmpty()) {\n-            return Collections.EMPTY_LIST;\n-        }\n-\n-        StringBuilder queryExp = new StringBuilder();\n-        queryExp.append(\"SELECT ra \").\n-                append(\"FROM \" + RAttr.class.getSimpleName() + \" ra \").\n-                append(\"WHERE ra.owner.id = \");\n-        queryExp.append(ancestors.get(0));\n-\n-        if (ancestors.size() > 1) {\n-            for (int i = 1; i < ancestors.size(); i++) {\n-                queryExp.append(\"OR ra.owner.id = \");\n-                queryExp.append(ancestors.get(i));\n-                queryExp.append(\" \");\n-            }\n-        }\n-        queryExp.append(\"ORDER BY ra.owner.id ASC\");\n-\n-        Query query = entityManager.createQuery(queryExp.toString());\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public List<RDerAttr> findInheritedDerivedAttributes(\n-            final SyncopeRole role) {\n-\n-        if (role.getParent() == null) {\n-            return Collections.EMPTY_LIST;\n-        }\n-\n-        List<Long> ancestors = getAncestors(role.getParent(),\n-                new ArrayList<Long>());\n-        if (ancestors == null || ancestors.isEmpty()) {\n-            return Collections.EMPTY_LIST;\n-        }\n-\n-        StringBuilder queryExp = new StringBuilder();\n-        queryExp.append(\"SELECT rda \").\n-                append(\"FROM \" + RDerAttr.class.getSimpleName() + \" rda \").\n-                append(\"WHERE rda.owner.id = \");\n-        queryExp.append(ancestors.get(0));\n-\n-        if (ancestors.size() > 1) {\n-            for (int i = 1; i < ancestors.size(); i++) {\n-                queryExp.append(\"OR rda.owner.id = \");\n-                queryExp.append(ancestors.get(i));\n-                queryExp.append(\" \");\n-            }\n-        }\n-        queryExp.append(\"ORDER BY rda.owner.id ASC\");\n-\n-        Query query = entityManager.createQuery(queryExp.toString());\n-        return query.getResultList();\n-    }\n-\n     @Override\n     public List<SyncopeRole> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e\");"},{"sha":"91201558f3a2de0053907caeb3f2091f3fa43314","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -50,7 +50,9 @@ public class SyncopeUserDAOImpl extends AbstractDAOImpl\n \n     @Override\n     public SyncopeUser find(final Long id) {\n-        Query query = entityManager.createNamedQuery(\"SyncopeUser.find\");\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeUser e WHERE e.id = :id\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n         query.setParameter(\"id\", id);\n \n         try {\n@@ -62,8 +64,9 @@ public SyncopeUser find(final Long id) {\n \n     @Override\n     public SyncopeUser findByWorkflowId(final Long workflowId) {\n-        Query query = entityManager.createNamedQuery(\n-                \"SyncopeUser.findByWorkflowId\");\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeUser e WHERE e.workflowId = :workflowId\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n         query.setParameter(\"workflowId\", workflowId);\n \n         return (SyncopeUser) query.getSingleResult();"},{"sha":"7ba1ab4bd36083dd0169e16a27430f8c22497c79","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -207,13 +207,13 @@ private boolean evaluateMandatoryCondition(\n     }\n \n     private boolean evaluateMandatoryCondition(\n-            final String resourceName,\n+            final TargetResource resource,\n             final List<? extends AbstractAttr> attributes,\n-            final String schemaName,\n+            final String sourceAttrName,\n             final AttributableUtil attributableUtil) {\n \n-        List<SchemaMapping> mappings = resourceDAO.getMappings(schemaName,\n-                attributableUtil.sourceMappingType(), resourceName);\n+        List<SchemaMapping> mappings = resource.getMappings(sourceAttrName,\n+                attributableUtil.sourceMappingType());\n \n         boolean result = false;\n \n@@ -234,7 +234,7 @@ private boolean evaluateMandatoryCondition(\n     private boolean evaluateMandatoryCondition(\n             final Set<TargetResource> resources,\n             final List<? extends AbstractAttr> attributes,\n-            final String schemaName,\n+            final String sourceAttrName,\n             final AttributableUtil attributableUtil) {\n \n         boolean result = false;\n@@ -245,8 +245,8 @@ private boolean evaluateMandatoryCondition(\n \n             resource = itor.next();\n             if (resource.isForceMandatoryConstraint()) {\n-                result |= evaluateMandatoryCondition(resource.getName(),\n-                        attributes, schemaName, attributableUtil);\n+                result |= evaluateMandatoryCondition(resource,\n+                        attributes, sourceAttrName, attributableUtil);\n             }\n         }\n \n@@ -333,11 +333,11 @@ protected ResourceOperations fill(\n                             attributableUtil.attributeClass());\n                 }\n \n-                for (SchemaMapping mapping : resourceDAO.getMappings(\n-                        schema.getName(),\n-                        attributableUtil.sourceMappingType())) {\n-\n-                    if (mapping.getResource() != null\n+                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+                    if (mapping.getSourceAttrName().equals(schema.getName())\n+                            && mapping.getSourceMappingType()\n+                            == attributableUtil.sourceMappingType()\n+                            && mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n@@ -366,11 +366,11 @@ protected ResourceOperations fill(\n                     attributableUtil.schemaClass());\n \n             if (schema != null) {\n-                for (SchemaMapping mapping : resourceDAO.getMappings(\n-                        schema.getName(),\n-                        attributableUtil.sourceMappingType())) {\n-\n-                    if (mapping.getResource() != null\n+                for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+                    if (mapping.getSourceAttrName().equals(schema.getName())\n+                            && mapping.getSourceMappingType()\n+                            == attributableUtil.sourceMappingType()\n+                            && mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n \n                         resourceOperations.add(ResourceOperationType.UPDATE,\n@@ -637,7 +637,7 @@ protected void fill(AbstractAttributable attributable,\n         }\n     }\n \n-    protected void fillTO(\n+    public void fillTO(\n             AbstractAttributableTO abstractAttributableTO,\n             Collection<? extends AbstractAttr> attributes,\n             Collection<? extends AbstractDerAttr> derivedAttributes,"},{"sha":"16f9a0c0d4925c47a2f775b7ec0cde7f9a923c25","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":4,"deletions":14,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -15,7 +15,6 @@\n package org.syncope.core.rest.data;\n \n import org.syncope.core.persistence.util.AttributableUtil;\n-import java.util.Collections;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.RoleMod;\n@@ -130,19 +129,10 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.setParent(role.getParent().getId());\n         }\n \n-        fillTO(roleTO, role.getAttributes(),\n-                role.getDerivedAttributes(), role.getTargetResources());\n-\n-        if (role.isInheritAttributes() || role.isInheritDerivedAttributes()) {\n-            fillTO(roleTO,\n-                    role.isInheritAttributes()\n-                    ? syncopeRoleDAO.findInheritedAttributes(role)\n-                    : Collections.EMPTY_SET,\n-                    role.isInheritDerivedAttributes()\n-                    ? syncopeRoleDAO.findInheritedDerivedAttributes(role)\n-                    : Collections.EMPTY_SET,\n-                    Collections.EMPTY_SET);\n-        }\n+        fillTO(roleTO,\n+                role.findInheritedAttributes(),\n+                role.findInheritedDerivedAttributes(),\n+                role.getTargetResources());\n \n         return roleTO;\n     }"},{"sha":"fba9fcaa6da16e08a637a2a1422f54cebaf9ad0d","filename":"core/src/main/resources/indexes.xml","status":"added","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+    <comment>Additional indexes</comment>\n+    <entry key=\"index1\">CREATE INDEX roleNameIndex ON SyncopeRole(name)</entry>\n+</properties>"},{"sha":"e9f45b99f0b8b8671dd7581c3863cdbaac4852ff","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -81,17 +81,18 @@\n         <property name=\"jpaPropertyMap\">\n             <map>\n                 <entry key=\"hibernate.order_updates\" value=\"true\"/>\n+                <entry key=\"hibernate.generate_statistics\" value=\"true\"/>\n \n                 <!-- Second level cache -->\n                 <entry key=\"hibernate.cache.use_second_level_cache\" value=\"true\"/>\n                 <entry key=\"hibernate.cache.use_query_cache\" value=\"true\"/>\n+                <entry key=\"hibernate.cache.use_minimal_puts\" value=\"true\"/>\n                 <entry key=\"hibernate.cache.region.factory_class\"\n                        value=\"net.sf.ehcache.hibernate.EhCacheRegionFactory\"/>\n                 <entry key=\"net.sf.ehcache.configurationResourceName\"\n                        value=\"/ehcache.xml\"/>\n                 <entry key=\"hibernate.cache.region_prefix\"\n                        value=\"syncopecache\"/>\n-                <entry key=\"hibernate.generate_statistics\" value=\"true\"/>\n             </map>\n         </property>\n     </bean>"},{"sha":"58d5da6088e1aa04109d25c412b94dd269a7fa4e","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -68,9 +68,16 @@ public class ResourceTest extends AbstractTest {\n     @Test\n     public final void issue42() {\n         USchema userId = schemaDAO.find(\"userId\", USchema.class);\n-        int beforeUserIdMappings = resourceDAO.getMappings(\n-                userId.getName(),\n-                SourceMappingType.UserSchema).size();\n+\n+        Set<SchemaMapping> beforeUserIdMappings = new HashSet<SchemaMapping>();\n+        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+            if (mapping.getSourceAttrName().equals(userId.getName())\n+                    && mapping.getSourceMappingType()\n+                    == SourceMappingType.UserSchema) {\n+\n+                beforeUserIdMappings.add(mapping);\n+            }\n+        }\n \n         SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setSourceAttrName(\"userId\");\n@@ -98,11 +105,19 @@ public final void issue42() {\n         assertEquals(resource, actual);\n \n         userId = schemaDAO.find(\"userId\", USchema.class);\n-        int afterUserIdMappings = resourceDAO.getMappings(\n-                userId.getName(),\n-                SourceMappingType.UserSchema).size();\n \n-        assertEquals(beforeUserIdMappings, afterUserIdMappings - 1);\n+        Set<SchemaMapping> afterUserIdMappings = new HashSet<SchemaMapping>();\n+        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+            if (mapping.getSourceAttrName().equals(userId.getName())\n+                    && mapping.getSourceMappingType()\n+                    == SourceMappingType.UserSchema) {\n+\n+                afterUserIdMappings.add(mapping);\n+            }\n+        }\n+\n+        assertEquals(beforeUserIdMappings.size(),\n+                afterUserIdMappings.size() - 1);\n     }\n \n     @Test"},{"sha":"1213ffc178744ebfe3df0da6155f6605feeb4eb3","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -36,14 +36,19 @@ public class RoleTest extends AbstractTest {\n \n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     private SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private AttributeDAO attributeDAO;\n+\n     @Autowired\n     private AttributeValueDAO attributeValueDAO;\n+\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n@@ -54,7 +59,7 @@ public final void delete() {\n         syncopeRoleDAO.flush();\n \n         assertNull(syncopeRoleDAO.find(2L));\n-        assertTrue(entitlementDAO.find(\"base\").getRoles().size() == 1);\n+        assertEquals(1, entitlementDAO.find(\"base\").getRoles().size());\n         assertTrue(syncopeUserDAO.find(2L).getRoles().size() == 1);\n         assertNull(attributeDAO.find(700L, RAttr.class));\n         assertNull(attributeValueDAO.find(41L, RAttrValue.class));\n@@ -65,15 +70,13 @@ public final void delete() {\n     public final void inheritedAttributes() {\n         SyncopeRole director = syncopeRoleDAO.find(7L);\n \n-        assertEquals(2,\n-                syncopeRoleDAO.findInheritedAttributes(director).size());\n+        assertEquals(2, director.findInheritedAttributes().size());\n     }\n \n     @Test\n     public final void inheritedDerivedAttributes() {\n         SyncopeRole director = syncopeRoleDAO.find(7L);\n \n-       assertEquals(1,\n-                syncopeRoleDAO.findInheritedDerivedAttributes(director).size());\n+        assertEquals(1, director.findInheritedDerivedAttributes().size());\n     }\n }"},{"sha":"642b45ee68ca54c4926ed723da578ae8e8415f32","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":30,"deletions":10,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -14,7 +14,8 @@\n  */\n package org.syncope.core.persistence.relationships;\n \n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n import static org.junit.Assert.*;\n import org.junit.Test;\n \n@@ -59,9 +60,15 @@ public final void test1() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        List<SchemaMapping> mappings = resourceDAO.getMappings(\n-                schema.getName(),\n-                SourceMappingType.UserSchema);\n+        Set<SchemaMapping> mappings = new HashSet<SchemaMapping>();\n+        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+            if (mapping.getSourceAttrName().equals(schema.getName())\n+                    && mapping.getSourceMappingType()\n+                    == SourceMappingType.UserSchema) {\n+\n+                mappings.add(mapping);\n+            }\n+        }\n         assertFalse(mappings.isEmpty());\n \n         // delete user schema username\n@@ -75,8 +82,15 @@ public final void test1() {\n         assertNull(schema);\n \n         // check for mappings deletion\n-        mappings = resourceDAO.getMappings(\"username\",\n-                SourceMappingType.UserSchema);\n+        mappings = new HashSet<SchemaMapping>();\n+        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+            if (mapping.getSourceAttrName().equals(\"username\")\n+                    && mapping.getSourceMappingType()\n+                    == SourceMappingType.UserSchema) {\n+\n+                mappings.add(mapping);\n+            }\n+        }\n         assertTrue(mappings.isEmpty());\n \n         assertNull(attributeDAO.find(100L, UAttr.class));\n@@ -94,10 +108,16 @@ public void test2() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        List<SchemaMapping> mappings = resourceDAO.getMappings(\n-                schema.getName(),\n-                SourceMappingType.UserSchema);\n-        assertNotNull(mappings);\n+        Set<SchemaMapping> mappings = new HashSet<SchemaMapping>();\n+        for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n+            if (mapping.getSourceAttrName().equals(schema.getName())\n+                    && mapping.getSourceMappingType()\n+                    == SourceMappingType.UserSchema) {\n+\n+                mappings.add(mapping);\n+            }\n+        }\n+        assertFalse(mappings.isEmpty());\n \n         // delete user schema username\n         schemaDAO.delete(\"surname\", AttributableUtil.USER);"},{"sha":"2fecc54a8fe60860fdb466b25eaa6d787f616099","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a8c5e2e0885cc7befd6c11721b3c276631d21fb/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=8a8c5e2e0885cc7befd6c11721b3c276631d21fb","patch":"@@ -57,7 +57,7 @@\n     <SyncopeRole id=\"4\" name=\"employee\" parent_id=\"3\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n     <SyncopeRole id=\"5\" name=\"secretary\" parent_id=\"4\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n     <SyncopeRole id=\"6\" name=\"director\" parent_id=\"4\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\"/>\n-    <SyncopeRole id=\"7\" name=\"managingDirector\" parent_id=\"6\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n+    <SyncopeRole id=\"7\" name=\"managingDirector\" parent_id=\"6\" inheritAttributes=\"1\" inheritDerivedAttributes=\"1\"/>\n     <SyncopeRole id=\"8\" name=\"otherchild\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n \n     <Membership id=\"1\" syncopeUser_id=\"1\" syncopeRole_id=\"1\"/>"}]}