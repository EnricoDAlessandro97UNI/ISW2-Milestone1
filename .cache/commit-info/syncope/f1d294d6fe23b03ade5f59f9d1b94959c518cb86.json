{"sha":"f1d294d6fe23b03ade5f59f9d1b94959c518cb86","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYxZDI5NGQ2ZmUyM2IwM2FkZTVmNTlmOWQxYjk0OTU5YzUxOGNiODY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-07T12:26:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-12-07T12:27:36Z"},"message":"[SYNCOPE-980] Fix parenthesis for some subqueries, including memberships","tree":{"sha":"24220fb6888ab393a9147afa12371922f4166f0a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/24220fb6888ab393a9147afa12371922f4166f0a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f1d294d6fe23b03ade5f59f9d1b94959c518cb86","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1d294d6fe23b03ade5f59f9d1b94959c518cb86","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1d294d6fe23b03ade5f59f9d1b94959c518cb86","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5cab8afc94a1520accfcbeac30ab7da4a3dcc1ab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cab8afc94a1520accfcbeac30ab7da4a3dcc1ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5cab8afc94a1520accfcbeac30ab7da4a3dcc1ab"}],"stats":{"total":326,"additions":216,"deletions":110},"files":[{"sha":"e87df923873fbf60528bf12fa047ae392454e26f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":48,"deletions":43,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=f1d294d6fe23b03ade5f59f9d1b94959c518cb86","patch":"@@ -55,9 +55,9 @@ public enum Type {\n \n     private MemberCond memberCond;\n \n-    private SearchCond leftNodeCond;\n+    private SearchCond leftSearchCond;\n \n-    private SearchCond rightNodeCond;\n+    private SearchCond rightSearchCond;\n \n     public static SearchCond getLeafCond(final AnyTypeCond anyTypeCond) {\n         SearchCond nodeCond = new SearchCond();\n@@ -189,8 +189,8 @@ public static SearchCond getAndCond(final SearchCond leftCond, final SearchCond\n         SearchCond nodeCond = new SearchCond();\n \n         nodeCond.type = Type.AND;\n-        nodeCond.leftNodeCond = leftCond;\n-        nodeCond.rightNodeCond = rightCond;\n+        nodeCond.leftSearchCond = leftCond;\n+        nodeCond.rightSearchCond = rightCond;\n \n         return nodeCond;\n     }\n@@ -208,8 +208,8 @@ public static SearchCond getOrCond(final SearchCond leftCond, final SearchCond r\n         SearchCond nodeCond = new SearchCond();\n \n         nodeCond.type = Type.OR;\n-        nodeCond.leftNodeCond = leftCond;\n-        nodeCond.rightNodeCond = rightCond;\n+        nodeCond.leftSearchCond = leftCond;\n+        nodeCond.rightSearchCond = rightCond;\n \n         return nodeCond;\n     }\n@@ -231,6 +231,42 @@ public void setAnyTypeCond(final AnyTypeCond anyTypeCond) {\n         this.anyTypeCond = anyTypeCond;\n     }\n \n+    /**\n+     * Not a simple getter: recursively scans the search condition tree.\n+     *\n+     * @return the AnyType key or {@code NULL} if no type condition was found\n+     */\n+    public String hasAnyTypeCond() {\n+        String anyTypeName = null;\n+\n+        if (type == null) {\n+            return anyTypeName;\n+        }\n+\n+        switch (type) {\n+            case LEAF:\n+            case NOT_LEAF:\n+                if (anyTypeCond != null) {\n+                    anyTypeName = anyTypeCond.getAnyTypeKey();\n+                }\n+                break;\n+\n+            case AND:\n+            case OR:\n+                if (leftSearchCond != null) {\n+                    anyTypeName = leftSearchCond.hasAnyTypeCond();\n+                }\n+                if (anyTypeName == null && rightSearchCond != null) {\n+                    anyTypeName = rightSearchCond.hasAnyTypeCond();\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return anyTypeName;\n+    }\n+\n     public AnyCond getAnyCond() {\n         return anyCond;\n     }\n@@ -267,49 +303,18 @@ public MemberCond getMemberCond() {\n         return memberCond;\n     }\n \n-    public SearchCond getLeftNodeCond() {\n-        return leftNodeCond;\n+    public SearchCond getLeftSearchCond() {\n+        return leftSearchCond;\n     }\n \n-    public SearchCond getRightNodeCond() {\n-        return rightNodeCond;\n+    public SearchCond getRightSearchCond() {\n+        return rightSearchCond;\n     }\n \n     public Type getType() {\n         return type;\n     }\n \n-    public String hasAnyTypeCond() {\n-        String anyTypeName = null;\n-\n-        if (type == null) {\n-            return anyTypeName;\n-        }\n-\n-        switch (type) {\n-            case LEAF:\n-            case NOT_LEAF:\n-                if (anyTypeCond != null) {\n-                    anyTypeName = anyTypeCond.getAnyTypeKey();\n-                }\n-                break;\n-\n-            case AND:\n-            case OR:\n-                if (leftNodeCond != null) {\n-                    anyTypeName = leftNodeCond.hasAnyTypeCond();\n-                }\n-                if (anyTypeName == null && rightNodeCond != null) {\n-                    anyTypeName = rightNodeCond.hasAnyTypeCond();\n-                }\n-                break;\n-\n-            default:\n-        }\n-\n-        return anyTypeName;\n-    }\n-\n     @Override\n     public boolean isValid() {\n         boolean isValid = false;\n@@ -335,9 +340,9 @@ public boolean isValid() {\n \n             case AND:\n             case OR:\n-                isValid = (leftNodeCond == null || rightNodeCond == null)\n+                isValid = (leftSearchCond == null || rightSearchCond == null)\n                         ? false\n-                        : leftNodeCond.isValid() && rightNodeCond.isValid();\n+                        : leftSearchCond.isValid() && rightSearchCond.isValid();\n                 break;\n \n             default:"},{"sha":"9554f9ae4329af4ea00136713d0ac6575917ec7f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":61,"deletions":62,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=f1d294d6fe23b03ade5f59f9d1b94959c518cb86","patch":"@@ -135,12 +135,12 @@ private String getAdminRealmsFilter(\n     }\n \n     @Override\n-    public int count(final Set<String> adminRealms, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n+    public int count(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind typeKind) {\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(typeKind);\n-        StringBuilder queryString = getQuery(searchCondition, parameters, svs);\n+        StringBuilder queryString = getQuery(cond, parameters, svs);\n \n         // 2. take into account administrative realms\n         queryString.insert(0, \"SELECT u.any_id FROM (\");\n@@ -166,35 +166,35 @@ public <T extends Any<?>> List<T> searchAssignable(final String realmFullPath, f\n     }\n \n     @Override\n-    public <T extends Any<?>> List<T> search(final SearchCond searchCondition, final AnyTypeKind typeKind) {\n-        return search(searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n+    public <T extends Any<?>> List<T> search(final SearchCond cond, final AnyTypeKind typeKind) {\n+        return search(cond, Collections.<OrderByClause>emptyList(), typeKind);\n     }\n \n     @Override\n     public <T extends Any<?>> List<T> search(\n-            final SearchCond searchCondition, final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n+            final SearchCond cond, final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n \n-        return search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, -1, -1, orderBy, typeKind);\n+        return search(SyncopeConstants.FULL_ADMIN_REALMS, cond, -1, -1, orderBy, typeKind);\n     }\n \n     @Override\n     public <T extends Any<?>> List<T> search(\n-            final Set<String> adminRealms, final SearchCond searchCondition, final int page, final int itemsPerPage,\n+            final Set<String> adminRealms, final SearchCond cond, final int page, final int itemsPerPage,\n             final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n \n         List<T> result = Collections.<T>emptyList();\n \n         if (adminRealms != null && !adminRealms.isEmpty()) {\n-            LOG.debug(\"Search condition:\\n{}\", searchCondition);\n+            LOG.debug(\"Search condition:\\n{}\", cond);\n \n-            if (searchCondition != null && searchCondition.isValid()) {\n+            if (cond != null && cond.isValid()) {\n                 try {\n-                    result = doSearch(adminRealms, searchCondition, page, itemsPerPage, orderBy, typeKind);\n+                    result = doSearch(adminRealms, cond, page, itemsPerPage, orderBy, typeKind);\n                 } catch (Exception e) {\n                     LOG.error(\"While searching for {}\", typeKind, e);\n                 }\n             } else {\n-                LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n+                LOG.error(\"Invalid search condition:\\n{}\", cond);\n             }\n         }\n \n@@ -203,13 +203,13 @@ public <T extends Any<?>> List<T> search(\n \n     @Override\n     public <T extends Any<?>> boolean matches(\n-            final T any, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n+            final T any, final SearchCond cond, final AnyTypeKind typeKind) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(typeKind);\n-        StringBuilder queryString = getQuery(searchCondition, parameters, svs);\n+        StringBuilder queryString = getQuery(cond, parameters, svs);\n \n         boolean matches;\n         if (queryString.length() == 0) {\n@@ -369,14 +369,14 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n \n     @SuppressWarnings(\"unchecked\")\n     private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n-            final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n+            final SearchCond cond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n             final AnyTypeKind typeKind) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(typeKind);\n-        StringBuilder queryString = getQuery(nodeCond, parameters, svs);\n+        StringBuilder queryString = getQuery(cond, parameters, svs);\n \n         // 2. take into account administrative groups and ordering\n         OrderBySupport orderBySupport = parseOrderBy(typeKind, svs, orderBy);\n@@ -428,68 +428,67 @@ private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n         return result;\n     }\n \n-    private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters, final SearchSupport svs) {\n+    private StringBuilder getQuery(final SearchCond cond, final List<Object> parameters, final SearchSupport svs) {\n         StringBuilder query = new StringBuilder();\n \n-        switch (nodeCond.getType()) {\n-\n+        switch (cond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                if (nodeCond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == svs.anyTypeKind()) {\n-                    query.append(getQuery(nodeCond.getAnyTypeCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getRelationshipTypeCond() != null\n+                if (cond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == svs.anyTypeKind()) {\n+                    query.append(getQuery(cond.getAnyTypeCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getRelationshipTypeCond() != null\n                         && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n \n-                    query.append(getQuery(nodeCond.getRelationshipTypeCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getRelationshipCond() != null\n+                    query.append(getQuery(cond.getRelationshipTypeCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getRelationshipCond() != null\n                         && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n \n-                    query.append(getQuery(nodeCond.getRelationshipCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getMembershipCond() != null\n+                    query.append(getQuery(cond.getRelationshipCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getMembershipCond() != null\n                         && (AnyTypeKind.USER == svs.anyTypeKind() || AnyTypeKind.ANY_OBJECT == svs.anyTypeKind())) {\n \n-                    query.append(getQuery(nodeCond.getMembershipCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getAssignableCond() != null) {\n-                    query.append(getQuery(nodeCond.getAssignableCond(), parameters, svs));\n-                } else if (nodeCond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind()) {\n-                    query.append(getQuery(nodeCond.getRoleCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getMemberCond() != null && AnyTypeKind.GROUP == svs.anyTypeKind()) {\n-                    query.append(getQuery(nodeCond.getMemberCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getResourceCond() != null) {\n-                    query.append(getQuery(nodeCond.getResourceCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getAttributeCond() != null) {\n-                    query.append(getQuery(nodeCond.getAttributeCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                } else if (nodeCond.getAnyCond() != null) {\n-                    query.append(getQuery(nodeCond.getAnyCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                    query.append(getQuery(cond.getMembershipCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getAssignableCond() != null) {\n+                    query.append(getQuery(cond.getAssignableCond(), parameters, svs));\n+                } else if (cond.getRoleCond() != null && AnyTypeKind.USER == svs.anyTypeKind()) {\n+                    query.append(getQuery(cond.getRoleCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getMemberCond() != null && AnyTypeKind.GROUP == svs.anyTypeKind()) {\n+                    query.append(getQuery(cond.getMemberCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getResourceCond() != null) {\n+                    query.append(getQuery(cond.getResourceCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getAttributeCond() != null) {\n+                    query.append(getQuery(cond.getAttributeCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (cond.getAnyCond() != null) {\n+                    query.append(getQuery(cond.getAnyCond(),\n+                            cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 }\n                 break;\n \n             case AND:\n-                String andSubQuery = getQuery(nodeCond.getLeftNodeCond(), parameters, svs).toString();\n+                String andSubQuery = getQuery(cond.getLeftSearchCond(), parameters, svs).toString();\n                 // Add extra parentheses\n                 andSubQuery = andSubQuery.replaceFirst(\"WHERE \", \"WHERE (\");\n                 query.append(andSubQuery).\n                         append(\" AND any_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, svs)).\n+                        append(getQuery(cond.getRightSearchCond(), parameters, svs)).\n                         append(\"))\");\n                 break;\n \n             case OR:\n-                String orSubQuery = getQuery(nodeCond.getLeftNodeCond(), parameters, svs).toString();\n+                String orSubQuery = getQuery(cond.getLeftSearchCond(), parameters, svs).toString();\n                 // Add extra parentheses\n                 orSubQuery = orSubQuery.replaceFirst(\"WHERE \", \"WHERE (\");\n                 query.append(orSubQuery).\n                         append(\" OR any_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, svs)).\n+                        append(getQuery(cond.getRightSearchCond(), parameters, svs)).\n                         append(\"))\");\n                 break;\n \n@@ -585,7 +584,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n         }\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n-                append(svs.field().name).append(\" WHERE \");\n+                append(svs.field().name).append(\" WHERE (\");\n \n         if (not) {\n             query.append(\"any_id NOT IN (\");\n@@ -596,7 +595,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.membership().name).append(\" WHERE \").\n                 append(\"group_id=?\").append(setParameter(parameters, groupKey)).\n-                append(')');\n+                append(\") \");\n \n         if (not) {\n             query.append(\"AND any_id NOT IN (\");\n@@ -607,7 +606,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dyngroupmembership().name).append(\" WHERE \").\n                 append(\"group_id=?\").append(setParameter(parameters, groupKey)).\n-                append(')');\n+                append(\"))\");\n \n         return query.toString();\n     }\n@@ -616,7 +615,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n             final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n-                append(svs.field().name).append(\" WHERE \");\n+                append(svs.field().name).append(\" WHERE (\");\n \n         if (not) {\n             query.append(\"any_id NOT IN (\");\n@@ -627,7 +626,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.role().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n-                append(')');\n+                append(\") \");\n \n         if (not) {\n             query.append(\"AND any_id NOT IN (\");\n@@ -638,7 +637,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dynrolemembership().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n-                append(')');\n+                append(\"))\");\n \n         return query.toString();\n     }\n@@ -723,20 +722,20 @@ private String getQuery(final MemberCond cond, final boolean not, final List<Obj\n         }\n \n         query.append(\"SELECT DISTINCT group_id AS any_id FROM \").\n-                append(new SearchSupport(AnyTypeKind.USER).membership().name).append(\" WHERE \").\n+                append(new SearchSupport(AnyTypeKind.USER).membership().name).append(\" WHERE (\").\n                 append(\"any_id=?\").append(setParameter(parameters, memberKey)).\n-                append(')');\n+                append(\") \");\n \n         if (not) {\n-            query.append(\" AND any_id NOT IN (\");\n+            query.append(\"AND any_id NOT IN (\");\n         } else {\n-            query.append(\" OR any_id IN (\");\n+            query.append(\"OR any_id IN (\");\n         }\n \n         query.append(\"SELECT DISTINCT group_id AS any_id FROM \").\n                 append(new SearchSupport(AnyTypeKind.ANY_OBJECT).membership().name).append(\" WHERE \").\n                 append(\"any_id=?\").append(setParameter(parameters, memberKey)).\n-                append(')');\n+                append(\"))\");\n \n         return query.toString();\n     }"},{"sha":"429dfb58a43a247a1577f8615274fc95a881d2db","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":64,"deletions":5,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=f1d294d6fe23b03ade5f59f9d1b94959c518cb86","patch":"@@ -35,6 +35,8 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -49,6 +51,8 @@\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -72,6 +76,12 @@ public class AnySearchTest extends AbstractTest {\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Test\n     public void anyObjectMatch() {\n         AnyObject anyObject = anyObjectDAO.find(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n@@ -474,20 +484,20 @@ public void searchByRelationshipType() {\n                 SearchCond.getLeafCond(relationshipTypeCond), SearchCond.getLeafCond(tcond));\n         assertTrue(searchCondition.isValid());\n \n-        List<Any<?>> matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n+        List<AnyObject> matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertNotNull(matching);\n         assertEquals(2, matching.size());\n-        assertTrue(IterableUtils.matchesAny(matching, new Predicate<Any<?>>() {\n+        assertTrue(IterableUtils.matchesAny(matching, new Predicate<AnyObject>() {\n \n             @Override\n-            public boolean evaluate(final Any<?> any) {\n+            public boolean evaluate(final AnyObject any) {\n                 return \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\".equals(any.getKey());\n             }\n         }));\n-        assertTrue(IterableUtils.matchesAny(matching, new Predicate<Any<?>>() {\n+        assertTrue(IterableUtils.matchesAny(matching, new Predicate<AnyObject>() {\n \n             @Override\n-            public boolean evaluate(final Any<?> any) {\n+            public boolean evaluate(final AnyObject any) {\n                 return \"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\".equals(any.getKey());\n             }\n         }));\n@@ -696,4 +706,53 @@ public void issueSYNCOPE929() {\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE980() {\n+        AnyType service = entityFactory.newEntity(AnyType.class);\n+        service.setKey(\"SERVICE\");\n+        service.setKind(AnyTypeKind.ANY_OBJECT);\n+        service = anyTypeDAO.save(service);\n+\n+        Group citizen = groupDAO.findByName(\"citizen\");\n+        assertNotNull(citizen);\n+\n+        AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        anyObject.setName(\"one\");\n+        anyObject.setType(service);\n+        anyObject.setRealm(realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM));\n+\n+        AMembership membership = entityFactory.newEntity(AMembership.class);\n+        membership.setRightEnd(citizen);\n+        membership.setLeftEnd(anyObject);\n+\n+        anyObject.add(membership);\n+        anyObjectDAO.save(anyObject);\n+\n+        anyObject = anyObjectDAO.find(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n+        membership = entityFactory.newEntity(AMembership.class);\n+        membership.setRightEnd(citizen);\n+        membership.setLeftEnd(anyObject);\n+        anyObject.add(membership);\n+        anyObjectDAO.save(anyObject);\n+\n+        anyObjectDAO.flush();\n+\n+        MembershipCond groupCond = new MembershipCond();\n+        groupCond.setGroup(\"citizen\");\n+\n+        SearchCond searchCondition = SearchCond.getLeafCond(groupCond);\n+\n+        List<AnyObject> matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n+        assertEquals(2, matching.size());\n+\n+        AnyTypeCond anyTypeCond = new AnyTypeCond();\n+        anyTypeCond.setAnyTypeKey(service.getKey());\n+\n+        searchCondition = SearchCond.getAndCond(\n+                SearchCond.getLeafCond(groupCond), SearchCond.getLeafCond(anyTypeCond));\n+\n+        matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n+        assertEquals(1, matching.size());\n+    }\n }"},{"sha":"c652cde4c5ccda831a0c9dec79e9f7527b90aeb3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1d294d6fe23b03ade5f59f9d1b94959c518cb86/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=f1d294d6fe23b03ade5f59f9d1b94959c518cb86","patch":"@@ -30,11 +30,16 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -478,4 +483,42 @@ public void issueSYNCOPE929() {\n             assertTrue(user.getUsername().startsWith(\"bellini\"));\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE980() {\n+        AnyTypeTO service = new AnyTypeTO();\n+        service.setKey(\"SERVICE\");\n+        service.setKind(AnyTypeKind.ANY_OBJECT);\n+        Response response = anyTypeService.create(service);\n+        assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n+\n+        String serviceKey = null;\n+        try {\n+            AnyObjectTO anyObjectTO = new AnyObjectTO();\n+            anyObjectTO.setName(\"one\");\n+            anyObjectTO.setRealm(SyncopeConstants.ROOT_REALM);\n+            anyObjectTO.setType(service.getKey());\n+            anyObjectTO.getMemberships().add(\n+                    new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n+            serviceKey = createAnyObject(anyObjectTO).getEntity().getKey();\n+\n+            AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n+            anyObjectPatch.setKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n+            anyObjectPatch.getMemberships().add(\n+                    new MembershipPatch.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n+            updateAnyObject(anyObjectPatch);\n+\n+            PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().fiql(\n+                    SyncopeClient.getAnyObjectSearchConditionBuilder(service.getKey()).\n+                            inGroups(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").\n+                            query()).build());\n+            assertEquals(1, matching.getSize());\n+            assertEquals(serviceKey, matching.getResult().get(0).getKey());\n+        } finally {\n+            if (serviceKey != null) {\n+                anyObjectService.delete(serviceKey);\n+            }\n+            anyTypeService.delete(service.getKey());\n+        }\n+    }\n }"}]}