{"sha":"da93d10e824868d652dbbd647253e60e4cf4e07e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRhOTNkMTBlODI0ODY4ZDY1MmRiYmQ2NDcyNTNlNjBlNGNmNGUwN2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-22T16:31:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-22T16:31:19Z"},"message":"[SYNCOPE-323] Check added in the REST create methods, throwing exception mapped to HTTP 409 CONFLICT as suggested\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1449107 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df031942bebd7a1628d8661175a918219d56ce98","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/df031942bebd7a1628d8661175a918219d56ce98"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/da93d10e824868d652dbbd647253e60e4cf4e07e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/da93d10e824868d652dbbd647253e60e4cf4e07e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/da93d10e824868d652dbbd647253e60e4cf4e07e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/da93d10e824868d652dbbd647253e60e4cf4e07e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"15202675bb8f5642b23cc02b647ab4f89382a1a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15202675bb8f5642b23cc02b647ab4f89382a1a8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/15202675bb8f5642b23cc02b647ab4f89382a1a8"}],"stats":{"total":288,"additions":242,"deletions":46},"files":[{"sha":"33234bee93ae24bb8c7e37569b88246d06330d7b","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -72,8 +72,8 @@ public Exception fromResponse(final Response response) {\n \r\n         } else {\r\n             // 4. All other codes are mapped to runtime exception with HTTP code information\r\n-            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\", Response.Status\r\n-                    .fromStatusCode(statusCode).name()));\r\n+            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\r\n+                    Response.Status.fromStatusCode(statusCode).name()));\r\n         }\r\n         LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n         return ex;\r"},{"sha":"0dd4ca5762be3caf3a30232f1b1907241b13cab1","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeClientExceptionType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -23,9 +23,10 @@\n @XmlEnum\r\n public enum SyncopeClientExceptionType {\r\n \r\n+    AssociatedResources(\"Syncope.AssociatedResources\", \"Syncope.AssociatedResources.name\"),\r\n     Deadlock(\"Syncope.Deadlock\", \"\"),\r\n     DataIntegrityViolation(\"Syncope.DataIntegrityViolation\", \"Syncope.DataIntegrityViolation.name\"),\r\n-    ExistingResource(\"Syncope.ExistingResource\", \"Syncope.ExistingResource.name\"),\r\n+    EntityExists(\"Syncope.EntityExists\", \"Syncope.EntityExists.name\"),\r\n     GenericPersistence(\"Syncope.GenericPersistence\", \"Syncope.GenericPersistence.cause\"),\r\n     InvalidLogger(\"Syncope.InvalidLogger\", \"Syncope.InvalidLogger.message\"),\r\n     InvalidConnInstance(\"Syncope.InvalidConnInstance\", \"Syncope.InvalidConnInstance.message\"),\r"},{"sha":"a1bc50a499d679b1411546ab44ec2968af186f01","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientCompositeErrorException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -27,6 +27,8 @@\n \r\n public class SyncopeClientCompositeErrorException extends HttpClientErrorException {\r\n \r\n+    private static final long serialVersionUID = 7882118041134372129L;\r\n+\r\n     private Set<SyncopeClientException> exceptions;\r\n \r\n     public SyncopeClientCompositeErrorException(HttpStatus statusCode) {\r\n@@ -43,11 +45,9 @@ public boolean hasException(SyncopeClientExceptionType exceptionType) {\n     }\r\n \r\n     public SyncopeClientException getException(SyncopeClientExceptionType exceptionType) {\r\n-\r\n         boolean found = false;\r\n         SyncopeClientException syncopeClientException = null;\r\n         for (Iterator<SyncopeClientException> itor = exceptions.iterator(); itor.hasNext() && !found;) {\r\n-\r\n             syncopeClientException = itor.next();\r\n             if (syncopeClientException.getType().equals(exceptionType)) {\r\n                 found = true;\r"},{"sha":"b7c5b08af4517a7ae3cd8368db04113eb841d5d9","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientErrorHandler.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -39,7 +39,9 @@ public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\n      */\r\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeClientErrorHandler.class);\r\n \r\n-    private static final HttpStatus[] MANAGED_STATUSES = {HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND};\r\n+    private static final HttpStatus[] MANAGED_STATUSES = {\r\n+        HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND, HttpStatus.CONFLICT\r\n+    };\r\n \r\n     @Override\r\n     public void handleError(final ClientHttpResponse response) throws IOException {\r"},{"sha":"bb7802ef5c894a9b9b9f0d517695ba8de9700913","filename":"console/src/main/java/org/apache/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -40,6 +39,7 @@\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n@@ -214,12 +214,12 @@ protected void onUpdate(AjaxRequestTarget art) {\n         final AjaxCheckBoxPanel uniqueConstraint = new AjaxCheckBoxPanel(\"uniqueConstraint\",\n                 getString(\"uniqueConstraint\"), new PropertyModel<Boolean>(schema, \"uniqueConstraint\"));\n \n-        final AjaxButton submit = new ClearIndicatingAjaxButton(\"apply\", new ResourceModel(\"submit\"), pageRef) {\n+        final AjaxButton submit = new IndicatingAjaxButton(\"apply\", new ResourceModel(\"submit\")) {\n \n             private static final long serialVersionUID = -958724007591692537L;\n \n             @Override\n-            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 final SchemaTO schemaTO = (SchemaTO) form.getDefaultModelObject();\n \n                 schemaTO.setEnumerationValues(getEnumValuesAsString(enumerationValues.getView().getModelObject()));\n@@ -254,12 +254,12 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n             }\n         };\n \n-        final AjaxButton cancel = new ClearIndicatingAjaxButton(\"cancel\", new ResourceModel(\"cancel\"), pageRef) {\n+        final AjaxButton cancel = new IndicatingAjaxButton(\"cancel\", new ResourceModel(\"cancel\")) {\n \n             private static final long serialVersionUID = -958724007591692537L;\n \n             @Override\n-            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 window.close(target);\n             }\n         };"},{"sha":"ee96f97b6b5e51c52a45182bdba8852a791f3c63","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -142,7 +142,6 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connInstanceTO) {\n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{connInstanceId}\")\n     public ConnInstanceTO delete(@PathVariable(\"connInstanceId\") final Long connInstanceId) {\n-\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n@@ -152,13 +151,13 @@ public ConnInstanceTO delete(@PathVariable(\"connInstanceId\") final Long connInst\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n-            SyncopeClientException invalidConnInstance = new SyncopeClientException(\n-                    SyncopeClientExceptionType.ExistingResource);\n+            SyncopeClientException associatedResources =\n+                    new SyncopeClientException(SyncopeClientExceptionType.AssociatedResources);\n             for (ExternalResource resource : connInstance.getResources()) {\n-                invalidConnInstance.addElement(resource.getName());\n+                associatedResources.addElement(resource.getName());\n             }\n \n-            scce.addException(invalidConnInstance);\n+            scce.addException(associatedResources);\n             throw scce;\n         }\n "},{"sha":"dcf7f11f4dab151e8ad838265fb20e6a2705e236","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":27,"deletions":7,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -20,19 +20,24 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.to.DerivedSchemaTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.rest.data.DerivedSchemaDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -56,11 +61,26 @@ public class DerivedSchemaController extends AbstractController {\n     @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public DerivedSchemaTO create(final HttpServletResponse response,\n-            @RequestBody final DerivedSchemaTO derivedSchemaTO, @PathVariable(\"kind\") final String kind)\n-            throws SyncopeClientCompositeErrorException {\n+            @RequestBody final DerivedSchemaTO derSchemaTO, @PathVariable(\"kind\") final String kind) {\n \n-        AbstractDerSchema derivedSchema = derSchemaDAO.save(\n-                binder.create(derivedSchemaTO, getAttributableUtil(kind).newDerSchema()));\n+\n+        if (StringUtils.isBlank(derSchemaTO.getName())) {\n+            SyncopeClientCompositeErrorException sccee =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n+            sce.addElement(\"Derived schema name\");\n+            sccee.addException(sce);\n+            throw sccee;\n+        }\n+\n+        AttributableUtil attrUtil = getAttributableUtil(kind);\n+\n+        if (derSchemaDAO.find(derSchemaTO.getName(), attrUtil.derSchemaClass()) != null) {\n+            throw new EntityExistsException(attrUtil.schemaClass().getSimpleName()\n+                    + \" '\" + derSchemaTO.getName() + \"'\");\n+        }\n+\n+        AbstractDerSchema derivedSchema = derSchemaDAO.save(binder.create(derSchemaTO, attrUtil.newDerSchema()));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.createDerived, Result.success,\n                 \"Successfully created derived schema: \" + kind + \"/\" + derivedSchema.getName());\n@@ -72,7 +92,7 @@ public DerivedSchemaTO create(final HttpServletResponse response,\n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n     public DerivedSchemaTO delete(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"schema\") final String derivedSchemaName) throws NotFoundException {\n+            @PathVariable(\"schema\") final String derivedSchemaName) {\n \n         Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n         AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaName, reference);\n@@ -109,7 +129,7 @@ public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n     @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/read/{derivedSchema}\")\n     public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"derivedSchema\") final String derivedSchemaName) throws NotFoundException {\n+            @PathVariable(\"derivedSchema\") final String derivedSchemaName) {\n \n         Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n         AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaName, reference);\n@@ -126,7 +146,7 @@ public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public DerivedSchemaTO update(@RequestBody final DerivedSchemaTO derivedSchemaTO,\n-            @PathVariable(\"kind\") final String kind) throws NotFoundException {\n+            @PathVariable(\"kind\") final String kind) {\n \n         Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n         AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaTO.getName(), reference);"},{"sha":"d09d1b996226b1379f41ebc16941eb8cc298277b","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -20,7 +20,9 @@\n \n import java.util.List;\n import java.util.Set;\n+import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -29,6 +31,9 @@\n import org.apache.syncope.common.types.AuditElements.ResourceSubCategory;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.MappingPurpose;\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n@@ -48,6 +53,7 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n@@ -84,13 +90,26 @@ public class ResourceController extends AbstractController {\n     private ConnObjectUtil connObjectUtil;\n \n     @Autowired\n-    private ConnectorFactory connLoader;\n+    private ConnectorFactory connFactory;\n \n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO) {\n         LOG.debug(\"Resource creation: {}\", resourceTO);\n \n+        if (StringUtils.isBlank(resourceTO.getName())) {\n+            SyncopeClientCompositeErrorException sccee =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n+            sce.addElement(\"Resource name\");\n+            sccee.addException(sce);\n+            throw sccee;\n+        }\n+\n+        if (resourceDAO.find(resourceTO.getName()) != null) {\n+            throw new EntityExistsException(\"Resource '\" + resourceTO.getName() + \"'\");\n+        }\n+\n         ExternalResource resource = resourceDAO.save(binder.create(resourceTO));\n \n         auditManager.audit(Category.resource, ResourceSubCategory.create, Result.success,\n@@ -203,7 +222,7 @@ public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourc\n         AttributableUtil attrUtil = AttributableUtil.getInstance(type);\n         ObjectClass objectClass = AttributableType.USER == type ? ObjectClass.ACCOUNT : ObjectClass.GROUP;\n \n-        final Connector connector = connLoader.getConnector(resource);\n+        final Connector connector = connFactory.getConnector(resource);\n \n         final ConnectorObject connectorObject = connector.getObject(objectClass, new Uid(objectId),\n                 connector.getOperationOptions(attrUtil.getMappingItems(resource, MappingPurpose.BOTH)));\n@@ -231,7 +250,7 @@ public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourc\n     public ModelAndView check(@RequestBody final ResourceTO resourceTO) {\n         final ConnInstance connInstance = binder.getConnInstance(resourceTO);\n \n-        final Connector connector = connLoader.createConnector(connInstance, connInstance.getConfiguration());\n+        final Connector connector = connFactory.createConnector(connInstance, connInstance.getConfiguration());\n \n         boolean result;\n         try {"},{"sha":"5f0639af042c74edd5d001c177044e17b6089e57","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":24,"deletions":2,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -20,18 +20,24 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.rest.data.SchemaDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -57,15 +63,31 @@ public class SchemaController extends AbstractController {\n     public SchemaTO create(final HttpServletResponse response, @RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind) {\n \n-        AbstractSchema schema = getAttributableUtil(kind).newSchema();\n+        if (StringUtils.isBlank(schemaTO.getName())) {\n+            SyncopeClientCompositeErrorException sccee =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n+            sce.addElement(\"Schema name\");\n+            sccee.addException(sce);\n+            throw sccee;\n+        }\n+\n+        AttributableUtil attrUtil = getAttributableUtil(kind);\n+\n+        if (schemaDAO.find(schemaTO.getName(), attrUtil.schemaClass()) != null) {\n+            throw new EntityExistsException(attrUtil.schemaClass().getSimpleName()\n+                    + \" '\" + schemaTO.getName() + \"'\");\n+        }\n+\n+        AbstractSchema schema = attrUtil.newSchema();\n         binder.create(schemaTO, schema);\n         schema = schemaDAO.save(schema);\n \n         auditManager.audit(Category.schema, SchemaSubCategory.create, Result.success,\n                 \"Successfully created schema: \" + kind + \"/\" + schema.getName());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getSchemaTO(schema, getAttributableUtil(kind));\n+        return binder.getSchemaTO(schema, attrUtil);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")"},{"sha":"eaa047b28d36ce362af96efb0e048164a785b794","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/VirtualSchemaController.java","status":"modified","additions":25,"deletions":3,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -20,17 +20,24 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import javax.persistence.EntityExistsException;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.to.VirtualSchemaTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.VirSchemaDAO;\n import org.apache.syncope.core.rest.data.VirtualSchemaDataBinder;\n+import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -54,10 +61,25 @@ public class VirtualSchemaController extends AbstractController {\n     @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public VirtualSchemaTO create(final HttpServletResponse response,\n-            @RequestBody final VirtualSchemaTO virtualSchemaTO, @PathVariable(\"kind\") final String kind) {\n+            @RequestBody final VirtualSchemaTO virSchemaTO, @PathVariable(\"kind\") final String kind) {\n+\n+        if (StringUtils.isBlank(virSchemaTO.getName())) {\n+            SyncopeClientCompositeErrorException sccee =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n+            sce.addElement(\"Virtual schema name\");\n+            sccee.addException(sce);\n+            throw sccee;\n+        }\n+\n+        AttributableUtil attrUtil = getAttributableUtil(kind);\n+\n+        if (virSchemaDAO.find(virSchemaTO.getName(), attrUtil.virSchemaClass()) != null) {\n+            throw new EntityExistsException(attrUtil.schemaClass().getSimpleName()\n+                    + \" '\" + virSchemaTO.getName() + \"'\");\n+        }\n \n-        AbstractVirSchema virSchema = virSchemaDAO.save(binder.create(\n-                virtualSchemaTO, getAttributableUtil(kind).newVirSchema()));\n+        AbstractVirSchema virSchema = virSchemaDAO.save(binder.create(virSchemaTO, attrUtil.newVirSchema()));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.createVirtual, Result.success,\n                 \"Successfully created virtual schema: \" + kind + \"/\" + virSchema.getName());"},{"sha":"e154260fb96cdf238fd8d29a55251dd5d9935acc","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -20,6 +20,7 @@\n \r\n import java.util.Map;\r\n import java.util.Set;\r\n+import javax.persistence.EntityExistsException;\r\n import javax.persistence.PersistenceException;\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.HttpHeaders;\r\n@@ -76,6 +77,12 @@ public Response toResponse(final Exception ex) {\n                     getExMessage(ex));\r\n         }\r\n \r\n+        if (ex instanceof EntityExistsException) {\r\n+            return buildResponse(Response.status(Response.Status.CONFLICT),\r\n+                    SyncopeClientExceptionType.EntityExists,\r\n+                    getExMessage(ex));\r\n+        }\r\n+\r\n         if (ex instanceof DataIntegrityViolationException) {\r\n             return buildResponse(Response.status(Response.Status.CONFLICT),\r\n                     SyncopeClientExceptionType.DataIntegrityViolation,\r\n@@ -168,8 +175,8 @@ private Response processBadRequestExceptions(final Exception ex) {\n \r\n             responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n \r\n-            for (@SuppressWarnings(\"rawtypes\") Map.Entry<Class, Set<EntityViolationType>> violation :\r\n-                    ((InvalidEntityException) ex).getViolations().entrySet()) {\r\n+            for (@SuppressWarnings(\"rawtypes\") Map.Entry<Class, Set<EntityViolationType>> violation\r\n+                    : ((InvalidEntityException) ex).getViolations().entrySet()) {\r\n \r\n                 for (EntityViolationType violationType : violation.getValue()) {\r\n                     responseBuilder.header(exType.getElementHeaderName(),\r"},{"sha":"8286187688667695df9f1f6cf20719f2ebfb381b","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -17,13 +17,12 @@ specific language governing permissions and limitations\n under the License.\n --%>\n <%@page isErrorPage=\"true\" session=\"false\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n-<%@page import=\"org.springframework.orm.jpa.JpaSystemException\"%>\n-<%@page import=\"org.apache.syncope.common.types.EntityViolationType\"%>\n <%@page import=\"java.util.Set\"%>\n <%@page import=\"java.util.Map\"%>\n-<%@page import=\"org.apache.syncope.core.persistence.validation.entity.InvalidEntityException\"%>\n+<%@page import=\"javax.persistence.EntityExistsException\"%>\n <%@page import=\"javax.persistence.PersistenceException\"%>\n-<%@page import=\"org.springframework.dao.DataIntegrityViolationException\"%>\n+<%@page import=\"org.apache.syncope.common.types.EntityViolationType\"%>\n+<%@page import=\"org.apache.syncope.core.persistence.validation.entity.InvalidEntityException\"%>\n <%@page import=\"org.apache.syncope.common.services.InvalidSearchConditionException\"%>\n <%@page import=\"org.apache.syncope.core.rest.controller.UnauthorizedRoleException\"%>\n <%@page import=\"org.apache.syncope.core.persistence.dao.MissingConfKeyException\"%>\n@@ -35,9 +34,11 @@ under the License.\n <%@page import=\"org.apache.syncope.core.persistence.dao.NotFoundException\"%>\n <%@page import=\"org.identityconnectors.framework.common.exceptions.ConfigurationException\"%>\n <%@page import=\"org.apache.syncope.common.validation.SyncopeClientErrorHandler\"%>\n+<%@page import=\"org.apache.syncope.core.rest.controller.AbstractController\"%>\n <%@page import=\"org.slf4j.LoggerFactory\"%>\n <%@page import=\"org.slf4j.Logger\"%>\n-<%@page import=\"org.apache.syncope.core.rest.controller.AbstractController\"%>\n+<%@page import=\"org.springframework.dao.DataIntegrityViolationException\"%>\n+<%@page import=\"org.springframework.orm.jpa.JpaSystemException\"%>\n \n <%!    static final Logger LOG = LoggerFactory.getLogger(AbstractController.class);%>\n \n@@ -54,8 +55,8 @@ under the License.\n \n         response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\n \n-        for (Map.Entry<Class, Set<EntityViolationType>> violation :\n-                ((InvalidEntityException) ex).getViolations().entrySet()) {\n+        for (Map.Entry<Class, Set<EntityViolationType>> violation : ((InvalidEntityException) ex).getViolations().\n+                entrySet()) {\n \n             for (EntityViolationType violationType : violation.getValue()) {\n                 response.addHeader(exType.getElementHeaderName(),\n@@ -70,6 +71,12 @@ under the License.\n         response.setHeader(SyncopeClientExceptionType.NotFound.getElementHeaderName(), ex.getMessage());\n \n         statusCode = HttpServletResponse.SC_NOT_FOUND;\n+    } else if (ex instanceof EntityExistsException) {\n+        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.EntityExists.getHeaderValue());\n+        response.setHeader(SyncopeClientExceptionType.EntityExists.getElementHeaderName(), ex.getMessage());\n+\n+        statusCode = HttpServletResponse.SC_CONFLICT;\n     } else if (ex instanceof WorkflowException) {\n         response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                 SyncopeClientExceptionType.Workflow.getHeaderValue());"},{"sha":"856dd9eff07317c95e0a2569535ec77a5d01f87a","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -21,12 +21,13 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.List;\n \n import javax.ws.rs.core.Response;\n \n-import org.apache.http.HttpStatus;\n import org.apache.syncope.common.to.DerivedSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n@@ -35,6 +36,7 @@\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class DerivedSchemaTestITCase extends AbstractTest {\n@@ -91,7 +93,7 @@ public void delete() {\n             // Recreate schema to make test re-runnable\n             Response response = createSchema(AttributableType.ROLE, SchemaType.DERIVED, schema);\n             assertNotNull(response);\n-            assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n+            assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n         }\n         assertNotNull(t);\n     }\n@@ -118,4 +120,27 @@ public void update() {\n                     schema.getName(), schema);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE323() {\n+        DerivedSchemaTO actual = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n+        assertNotNull(actual);\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.DERIVED, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n+        }\n+\n+        actual.setName(null);\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.DERIVED, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n+        }\n+    }\n }"},{"sha":"498b9b5e2ba7c391b3f126cad55673a5fe2d0b36","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -346,7 +346,7 @@ public void updateResetSyncToken() {\n \n     @Test\n     public void delete() {\n-        String resourceName = \"ws-target-resource-delete\";\n+        String resourceName = \"tobedeleted\";\n \n         ResourceTO resource = buildResourceTO(resourceName);\n         Response response = resourceService.create(resource);\n@@ -384,8 +384,30 @@ public void listByType() {\n     @Test\n     public void read() {\n         ResourceTO actual = resourceService.read(\"resource-testdb\");\n+        assertNotNull(actual);\n+    }\n \n+    @Test\n+    public void issueSYNCOPE323() {\n+        ResourceTO actual = resourceService.read(\"resource-testdb\");\n         assertNotNull(actual);\n+\n+        try {\n+            createResource(resourceService, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n+        }\n+\n+        actual.setName(null);\n+        try {\n+            createResource(resourceService, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n+        }\n     }\n \n     private ResourceTO buildResourceTO(String resourceName) {"},{"sha":"949a2f3f0823d7c8c763e2b3201d98b82cde067c","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":24,"deletions":2,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -164,8 +164,7 @@ public void update() {\n         SchemaTO schemaTO = schemaService.read(AttributableType.ROLE, SchemaType.NORMAL, \"icon\");\n         assertNotNull(schemaTO);\n \n-        schemaService.update(AttributableType.ROLE, SchemaType.NORMAL,\n-                schemaTO.getName(), schemaTO);\n+        schemaService.update(AttributableType.ROLE, SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n         SchemaTO updatedTO = schemaService.read(AttributableType.ROLE, SchemaType.NORMAL, \"icon\");\n         assertEquals(schemaTO, updatedTO);\n \n@@ -254,6 +253,29 @@ public void issue260() {\n         }\n     }\n \n+    @Test\n+    public void issueSYNCOPE323() {\n+        SchemaTO actual = schemaService.read(AttributableType.ROLE, SchemaType.NORMAL, \"icon\");\n+        assertNotNull(actual);\n+\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.NORMAL, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n+        }\n+\n+        actual.setName(null);\n+        try {\n+            createSchema(AttributableType.ROLE, SchemaType.NORMAL, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n+        }\n+    }\n+\n     private SchemaTO buildSchemaTO(final String name, final AttributeSchemaType type) {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(name + getUUIDString());"},{"sha":"3c99060304ea9f8659217214c768c33b3796eb65","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da93d10e824868d652dbbd647253e60e4cf4e07e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=da93d10e824868d652dbbd647253e60e4cf4e07e","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.List;\n \n@@ -33,14 +36,16 @@\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class VirtualSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n         @SuppressWarnings(\"unchecked\")\n-        List<VirtualSchemaTO> vSchemas = (List<VirtualSchemaTO>) schemaService.list(AttributableType.USER, SchemaType.VIRTUAL);\n+        List<VirtualSchemaTO> vSchemas = (List<VirtualSchemaTO>) schemaService.list(AttributableType.USER,\n+                SchemaType.VIRTUAL);\n         assertFalse(vSchemas.isEmpty());\n         for (VirtualSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n@@ -85,4 +90,27 @@ public void delete() {\n         }\n         assertNotNull(t);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE323() {\n+        VirtualSchemaTO actual = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, \"mvirtualdata\");\n+        assertNotNull(actual);\n+\n+        try {\n+            createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n+        }\n+\n+        actual.setName(null);\n+        try {\n+            createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, actual);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+            assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n+        }\n+    }\n }"}]}