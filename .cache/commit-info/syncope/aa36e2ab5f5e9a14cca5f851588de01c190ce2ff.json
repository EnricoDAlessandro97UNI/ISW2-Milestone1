{"sha":"aa36e2ab5f5e9a14cca5f851588de01c190ce2ff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFhMzZlMmFiNWY1ZTlhMTRjY2E1Zjg1MTU4OGRlMDFjMTkwY2UyZmY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-18T08:41:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-18T08:43:01Z"},"message":"[SYNCOPE-1066] Avoid invoking REST via HTTP to fetch the generated WADL; rather getting it via Spring bean","tree":{"sha":"2f3d768f86d22a3a1e236ad436ae131f8944a2cb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2f3d768f86d22a3a1e236ad436ae131f8944a2cb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJY9dGVAAoJEGtDE+0nPfKHytUH/0cFRh4hpDGy5zk9VZzE8Oxh\n4Yka8tichwaXR7HfcbyMcife4cG/LMyxWsXjdIFFUglChpS2bD3HV+jsSLp9sKC8\nSz+LuSwmEwIszy8PUy1KR693COS05sUFRflcIRyT8NtfbjzJmwgNGVm3hnatP+3W\n9+oJcAmvuNzVb3fqLwpulk3araHwntNAdj+Vq/szHwlZS/BqITfv7vKM0HGtnM/M\nK3wTnOOQ0dPfujQIHm62+Gy78sOLgYyG28cjSfvCCBDtCFBWvOtzxcL+U1fwjdC+\nGYG+JhP3hLMkfHC503j4GgkJsncUOEKPn1pV2HR8Ym+NQHz/par7+xzcS4F88+U=\n=4ZeS\n-----END PGP SIGNATURE-----","payload":"tree 2f3d768f86d22a3a1e236ad436ae131f8944a2cb\nparent 8b8b5d13b67864c0c0a56e8c9f582a1a4571b918\nauthor Francesco Chicchiriccò <ilgrosso@apache.org> 1492504901 +0200\ncommitter Francesco Chicchiriccò <ilgrosso@apache.org> 1492504981 +0200\n\n[SYNCOPE-1066] Avoid invoking REST via HTTP to fetch the generated WADL; rather getting it via Spring bean\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b8b5d13b67864c0c0a56e8c9f582a1a4571b918","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b8b5d13b67864c0c0a56e8c9f582a1a4571b918","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b8b5d13b67864c0c0a56e8c9f582a1a4571b918"}],"stats":{"total":91,"additions":83,"deletions":8},"files":[{"sha":"e42190990a512117a93d506eb60b2e6e12b76fde","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java?ref=aa36e2ab5f5e9a14cca5f851588de01c190ce2ff","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.net.URL;\n import java.rmi.ServerException;\n import java.util.HashMap;\n import java.util.Map;\n@@ -39,7 +39,7 @@\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n \n public class WADLServlet extends HttpServlet {\n \n@@ -73,10 +73,11 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n \n         Matcher schemaMatcher = SCHEMA_PATTERN.matcher(request.getServletPath());\n \n+        WadlGenerator wadlGenerator = ApplicationContextProvider.getApplicationContext().getBean(WadlGenerator.class);\n+        String wadl = wadlGenerator.getWadl();\n+\n         Pipeline<SAXPipelineComponent> pipeline = new CachingPipeline<>();\n-        String wadlURL = StringUtils.substringBeforeLast(request.getRequestURL().toString(), \"/\")\n-                + \"/rest/?_wadl\";\n-        pipeline.addComponent(new XMLGenerator(new URL(wadlURL)));\n+        pipeline.addComponent(new XMLGenerator(wadl));\n         if (\"/index.html\".equals(request.getServletPath())) {\n             XSLTTransformer xslt = new XSLTTransformer(getClass().getResource(\"/wadl2html/index.xsl\"));\n \n@@ -102,7 +103,7 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n         } else if (\"/syncope.wadl\".equals(request.getServletPath())) {\n             response.setContentType(MediaType.APPLICATION_XML);\n \n-            InputStream in = new URL(wadlURL).openStream();\n+            InputStream in = new ByteArrayInputStream(wadl.getBytes());\n             OutputStream out = response.getOutputStream();\n             try {\n                 IOUtils.copy(in, out);"},{"sha":"8595293d9d450dcb67a38609973ba2f66e267e5a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WadlGenerator.java","status":"modified","additions":72,"deletions":2,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java?ref=aa36e2ab5f5e9a14cca5f851588de01c190ce2ff","patch":"@@ -18,8 +18,21 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n+import java.lang.annotation.Annotation;\n import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.Path;\n import javax.ws.rs.container.ContainerRequestContext;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.cxf.BusFactory;\n+import org.apache.cxf.common.util.ClasspathScanner;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.utils.InjectionUtils;\n+import org.apache.cxf.jaxrs.utils.ResourceUtils;\n \n /**\n  * Automatically loads available javadocs from class loader (when {@link java.net.URLClassLoader}).\n@@ -28,8 +41,9 @@ public class WadlGenerator extends org.apache.cxf.jaxrs.model.wadl.WadlGenerator\n \n     private boolean inited = false;\n \n-    @Override\n-    public void filter(final ContainerRequestContext context) {\n+    private String wadl = null;\n+\n+    private void init() {\n         synchronized (this) {\n             if (!inited) {\n                 URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n@@ -40,8 +54,64 @@ public void filter(final ContainerRequestContext context) {\n                 inited = true;\n             }\n         }\n+    }\n \n+    @Override\n+    public void filter(final ContainerRequestContext context) {\n+        init();\n         super.filter(context);\n     }\n \n+    public String getWadl() {\n+        synchronized (this) {\n+            if (wadl == null) {\n+                init();\n+\n+                List<Class<?>> resourceClasses = new ArrayList<>();\n+                try {\n+                    List<Class<? extends Annotation>> anns = new ArrayList<>();\n+                    anns.add(Path.class);\n+                    Map<Class<? extends Annotation>, Collection<Class<?>>> discoveredClasses =\n+                            ClasspathScanner.findClasses(ClasspathScanner.parsePackages(\n+                                    \"org.apache.syncope.common.rest.api.service\"),\n+                                    anns);\n+                    if (discoveredClasses.containsKey(Path.class)) {\n+                        resourceClasses.addAll(discoveredClasses.get(Path.class));\n+                    }\n+                } catch (Exception e) {\n+                    // ignore\n+                }\n+\n+                List<ClassResourceInfo> classResourceInfos = new ArrayList<>();\n+                for (final Class<?> beanClass : resourceClasses) {\n+                    ClassResourceInfo cri = IterableUtils.find(classResourceInfos, new Predicate<ClassResourceInfo>() {\n+\n+                        @Override\n+                        public boolean evaluate(final ClassResourceInfo cri) {\n+                            return cri.isCreatedFromModel() && cri.isRoot()\n+                                    && cri.getServiceClass().isAssignableFrom(beanClass);\n+                        }\n+                    });\n+                    if (cri != null) {\n+                        if (!InjectionUtils.isConcreteClass(cri.getServiceClass())) {\n+                            cri = new ClassResourceInfo(cri);\n+                            classResourceInfos.add(cri);\n+                        }\n+                        cri.setResourceClass(beanClass);\n+                        continue;\n+                    }\n+\n+                    cri = ResourceUtils.createClassResourceInfo(\n+                            beanClass, beanClass, true, true, BusFactory.getDefaultBus());\n+                    if (cri != null) {\n+                        classResourceInfos.add(cri);\n+                    }\n+                }\n+\n+                wadl = generateWADL(\"/\", classResourceInfos, false, null, null).toString();\n+            }\n+        }\n+\n+        return wadl;\n+    }\n }"},{"sha":"19f5cc47e0419bf7c7b756c9e77f8d2af455730d","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/aa36e2ab5f5e9a14cca5f851588de01c190ce2ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=aa36e2ab5f5e9a14cca5f851588de01c190ce2ff","patch":"@@ -144,6 +144,10 @@ under the License.\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.apache.cocoon\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>"}]}