{"sha":"f5a434bc74450644f0d6866cb30c95afed7bcd94","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY1YTQzNGJjNzQ0NTA2NDRmMGQ2ODY2Y2IzMGM5NWFmZWQ3YmNkOTQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-09T08:58:07Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-09T08:58:07Z"},"message":"Refactoring SchemaMapping and TargetResource\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d73ace9313425c0efdacaf8dee4fa36ddeb0080","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1d73ace9313425c0efdacaf8dee4fa36ddeb0080"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f5a434bc74450644f0d6866cb30c95afed7bcd94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f5a434bc74450644f0d6866cb30c95afed7bcd94","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f5a434bc74450644f0d6866cb30c95afed7bcd94","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f5a434bc74450644f0d6866cb30c95afed7bcd94/comments","author":null,"committer":null,"parents":[{"sha":"938edd5c45830bf307176291bcc1f03ce4e406d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/938edd5c45830bf307176291bcc1f03ce4e406d8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/938edd5c45830bf307176291bcc1f03ce4e406d8"}],"stats":{"total":2073,"additions":457,"deletions":1616},"files":[{"sha":"ffe4b5b050c5d5e2046342a169d69087e5368715","filename":"client/src/main/java/org/syncope/types/SchemaType.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -43,4 +43,14 @@ public Class getSchemaClass() {\n             return String.class;\n         }\n     }\n+\n+    public static SchemaType byClass(Class theClass) {\n+        for (SchemaType schemaType : SchemaType.values()) {\n+            if (schemaType.getClassName().equals(theClass.getName())) {\n+                return schemaType;\n+            }\n+        }\n+\n+        return null;\n+    }\n }"},{"sha":"71fc4da4c9ec5283a1743e2a8488a452e392ba0a","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":127,"deletions":13,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -14,13 +14,23 @@\n  */\n package org.syncope.core.persistence;\n \n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n+import org.identityconnectors.common.IOUtil;\n+import org.identityconnectors.framework.api.APIConfiguration;\n+import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n+import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n+import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n+import org.identityconnectors.framework.api.ConnectorKey;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n@@ -33,7 +43,6 @@\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n-import org.syncope.core.rest.controller.ConnectorInstanceController;\n import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n \n /**\n@@ -47,25 +56,58 @@ public class ConnectorInstanceLoader implements ServletContextListener {\n     private static final Logger LOG = LoggerFactory.getLogger(\n             ConnectorInstanceLoader.class);\n \n-    private static ConnectorInfoManager getConnectorManager() {\n+    public static ConnectorInfoManager getConnectorManager()\n+            throws NotFoundException {\n+\n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n \n+        // 1. Bundles directory\n         SyncopeConfigurationDAO syncopeConfigurationDAO =\n                 (SyncopeConfigurationDAO) context.getBean(\n                 \"syncopeConfigurationDAOImpl\");\n-\n-        ConnectorInfoManager manager = null;\n+        SyncopeConfiguration connectorBundleDir = null;\n         try {\n-            SyncopeConfiguration connectorBundleDir =\n-                    syncopeConfigurationDAO.find(\n+            connectorBundleDir = syncopeConfigurationDAO.find(\n                     \"identityconnectors.bundle.directory\");\n-            manager = ConnectorInstanceController.getConnectorManager(\n-                    connectorBundleDir.getConfValue());\n         } catch (MissingConfKeyException e) {\n             LOG.error(\"Missing configuration\", e);\n-        } catch (NotFoundException e) {\n-            LOG.error(\"Could not find Connector Manager\", e);\n+        }\n+\n+        // 2. Find bundles inside that directory\n+        File bundleDirectory = new File(connectorBundleDir.getConfValue());\n+        String[] bundleFiles = bundleDirectory.list();\n+        if (bundleFiles == null) {\n+            throw new NotFoundException(\"Bundles from dir \"\n+                    + connectorBundleDir.getConfValue());\n+        }\n+\n+        List<URL> bundleFileURLs = new ArrayList<URL>();\n+        for (String file : bundleFiles) {\n+            try {\n+                bundleFileURLs.add(IOUtil.makeURL(bundleDirectory, file));\n+            } catch (Exception ignore) {\n+                // ignore exception and don't add bundle\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(bundleDirectory.toString() + \"/\" + file + \"\\\"\"\n+                            + \" is not a valid connector bundle.\", ignore);\n+                }\n+            }\n+        }\n+        if (bundleFileURLs.isEmpty()) {\n+            throw new NotFoundException(\"Bundles from dir \"\n+                    + connectorBundleDir.getConfValue());\n+        }\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Bundle file URLs: \" + bundleFileURLs);\n+        }\n+\n+        // 3. Get connector info manager\n+        ConnectorInfoManager manager =\n+                ConnectorInfoManagerFactory.getInstance().getLocalManager(\n+                bundleFileURLs.toArray(new URL[0]));\n+        if (manager == null) {\n+            throw new NotFoundException(\"Connector Info Manager\");\n         }\n \n         return manager;\n@@ -78,6 +120,80 @@ private static synchronized DefaultListableBeanFactory getBeanFactory() {\n         return (DefaultListableBeanFactory) context.getBeanFactory();\n     }\n \n+    private static ConnectorFacade getConnectorFacade(String bundlename,\n+            String bundleversion, String connectorname,\n+            Set<PropertyTO> configuration) throws NotFoundException {\n+\n+        // specify a connector.\n+        ConnectorKey key = new ConnectorKey(\n+                bundlename,\n+                bundleversion,\n+                connectorname);\n+\n+        if (key == null) {\n+            throw new NotFoundException(\"Connector Key\");\n+        }\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"\\nBundle name: \" + key.getBundleName()\n+                    + \"\\nBundle version: \" + key.getBundleVersion()\n+                    + \"\\nBundle class: \" + key.getConnectorName());\n+        }\n+\n+        // get the specified connector.\n+        ConnectorInfo info = getConnectorManager().findConnectorInfo(key);\n+\n+        if (info == null) {\n+            throw new NotFoundException(\"Connector Info\");\n+        }\n+\n+        // create default configuration\n+        APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n+\n+        if (apiConfig == null) {\n+            throw new NotFoundException(\"Default API configuration\");\n+        }\n+\n+        // retrieve the ConfigurationProperties.\n+        ConfigurationProperties properties =\n+                apiConfig.getConfigurationProperties();\n+\n+        if (properties == null) {\n+            throw new NotFoundException(\"Configuration properties\");\n+        }\n+\n+        // Print out what the properties are (not necessary)\n+        if (LOG.isDebugEnabled()) {\n+            for (String propName : properties.getPropertyNames()) {\n+                LOG.debug(\"\\nProperty Name: \"\n+                        + properties.getProperty(propName).getName()\n+                        + \"\\nProperty Type: \"\n+                        + properties.getProperty(propName).getType());\n+            }\n+        }\n+\n+        // Set all of the ConfigurationProperties needed by the connector.\n+        for (PropertyTO property : configuration) {\n+            properties.setPropertyValue(\n+                    property.getKey(), property.getValue());\n+        }\n+\n+        // Use the ConnectorFacadeFactory's newInstance() method to get\n+        // a new connector.\n+        ConnectorFacade connector =\n+                ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n+\n+        if (connector == null) {\n+            throw new NotFoundException(\"Connector\");\n+        }\n+\n+        // Make sure we have set up the Configuration properly\n+        connector.validate();\n+        //connector.test(); //needs a target resource deployed\n+\n+        return connector;\n+    }\n+\n     public static ConnectorFacade getConnectorFacade(final String id)\n             throws BeansException {\n \n@@ -91,9 +207,7 @@ public static void registerConnectorFacade(final ConnectorInstance instance)\n             removeConnectorFacade(instance.getId().toString());\n         }\n \n-        ConnectorFacade connector =\n-                ConnectorInstanceController.getConnectorFacade(\n-                getConnectorManager(),\n+        ConnectorFacade connector = getConnectorFacade(\n                 instance.getBundleName(),\n                 instance.getVersion(),\n                 instance.getConnectorName(),"},{"sha":"63dd4109d8f1bdce88ce789d9b595f102f0f00e3","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -42,7 +42,10 @@\n  */\n public class DefaultContentLoader implements ServletContextListener {\n \n-    private static final Logger log = LoggerFactory.getLogger(\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n             DefaultContentLoader.class);\n \n     /**\n@@ -74,10 +77,10 @@ public void contextInitialized(final ServletContextEvent sce) {\n             dbProps.load(dbPropsStream);\n             dbSchema = dbProps.getProperty(\"database.schema\");\n         } catch (Throwable t) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Could not find db.properties\", t);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Could not find db.properties\", t);\n             } else {\n-                log.error(\"Could not find db.properties\");\n+                LOG.error(\"Could not find db.properties\");\n             }\n \n             dbSchema = null;\n@@ -99,7 +102,7 @@ public void contextInitialized(final ServletContextEvent sce) {\n \n             existingData = resultSet.getRow() > 0;\n         } catch (SQLException e) {\n-            log.error(\"Could not access to table \"\n+            LOG.error(\"Could not access to table \"\n                     + SyncopeConfiguration.class.getSimpleName(), e);\n \n             // Setting this to true make nothing to be done below\n@@ -109,7 +112,7 @@ public void contextInitialized(final ServletContextEvent sce) {\n                 resultSet.close();\n                 statement.close();\n             } catch (SQLException e) {\n-                log.error(\"While closing SQL connection\", e);\n+                LOG.error(\"While closing SQL connection\", e);\n             }\n         }\n         try {\n@@ -124,9 +127,9 @@ public void contextInitialized(final ServletContextEvent sce) {\n                     DatabaseConfig.FEATURE_SKIP_ORACLE_RECYCLEBIN_TABLES, true);\n \n             if (existingData) {\n-                log.info(\"Data found in the database, leaving untouched\");\n+                LOG.info(\"Data found in the database, leaving untouched\");\n             } else {\n-                log.info(\"Empty database found, loading default content\");\n+                LOG.info(\"Empty database found, loading default content\");\n \n                 FlatXmlDataSetBuilder dataSetBuilder =\n                         new FlatXmlDataSetBuilder();\n@@ -137,7 +140,7 @@ public void contextInitialized(final ServletContextEvent sce) {\n                 DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n             }\n         } catch (Throwable t) {\n-            log.error(\"While loading default content\", t);\n+            LOG.error(\"While loading default content\", t);\n         } finally {\n             DataSourceUtils.releaseConnection(conn, dataSource);\n         }"},{"sha":"4852f31371a4156328f8110f01151ece3fa610f0","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -28,7 +28,7 @@\n \n public abstract class AbstractBaseBean implements Serializable {\n \n-    protected static final Logger log = LoggerFactory.getLogger(\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n             AbstractBaseBean.class);\n \n     /**\n@@ -93,8 +93,8 @@ public String toString() {\n             try {\n                 result.append(method.invoke(this));\n             } catch (Exception e) {\n-                if (log.isDebugEnabled()) {\n-                    log.error(\"While serializing to string\", e);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.error(\"While serializing to string\", e);\n                 }\n             }\n         }"},{"sha":"d998fbf2635f479c0370251b0bb771c76319b1f6","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":4,"deletions":37,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -18,17 +18,14 @@\n import java.text.DecimalFormat;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Basic;\n import static javax.persistence.EnumType.STRING;\n \n import javax.persistence.Column;\n import javax.persistence.Enumerated;\n-import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-import javax.persistence.OneToMany;\n import javax.persistence.Transient;\n import org.syncope.core.persistence.validation.AttributeBasicValidator;\n import org.syncope.core.persistence.validation.AttributeValidator;\n@@ -42,11 +39,6 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n     @Column(nullable = false)\n     @Enumerated(STRING)\n     private SchemaValueType type;\n-    /**\n-     * All the mappings of the attribute schema.\n-     */\n-    @OneToMany(fetch = FetchType.EAGER)\n-    private List<SchemaMapping> mappings;\n     /**\n      * Specify if the attribute should be stored on the local repository.\n      */\n@@ -92,30 +84,6 @@ public void setType(SchemaValueType type) {\n         this.type = type;\n     }\n \n-    public List<SchemaMapping> getMappings() {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-\n-        return this.mappings;\n-    }\n-\n-    public void setMappings(List<SchemaMapping> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-\n-        return this.mappings.contains(mapping) || this.mappings.add(mapping);\n-    }\n-\n-    public boolean removeMapping(SchemaMapping mapping) {\n-        return this.mappings == null || this.mappings.remove(mapping);\n-    }\n-\n     public boolean isVirtual() {\n         return isBooleanAsCharacter(virtual);\n     }\n@@ -170,7 +138,7 @@ public AttributeValidator getValidator() {\n                         (AttributeValidator) validatorConstructor.newInstance(\n                         this);\n             } catch (Exception e) {\n-                log.error(\"Could not instantiate validator of type \"\n+                LOG.error(\"Could not instantiate validator of type \"\n                         + getValidatorClass()\n                         + \", reverting to AttributeBasicValidator\", e);\n             }\n@@ -192,9 +160,8 @@ public void setValidatorClass(String validatorClass) {\n     }\n \n     public String getConversionPattern() {\n-        if (!getType().isConversionPatternNeeded() && log.isDebugEnabled()) {\n-\n-            log.debug(\"Conversion pattern is not needed: \" + this\n+        if (!getType().isConversionPatternNeeded() && LOG.isDebugEnabled()) {\n+            LOG.debug(\"Conversion pattern is not needed: \" + this\n                     + \"'s type is \" + getType());\n         }\n \n@@ -203,7 +170,7 @@ public String getConversionPattern() {\n \n     public void setConversionPattern(String conversionPattern) {\n         if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern will be ignored: \"\n+            LOG.warn(\"Conversion pattern will be ignored: \"\n                     + \"this attribute type is \" + getType());\n         }\n "},{"sha":"6dbe2e63e807dd4e603dffa9cdb60c504a958328","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -30,6 +30,10 @@\n @Entity\n public class SchemaMapping extends AbstractBaseBean {\n \n+    /**\n+     * This autogenerated id leads to strange behavior with PostgreSQL, when\n+     * using GenerationType.AUTO.\n+     */\n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n     generator = \"SEQ_SchemaMapping\")"},{"sha":"1a7100f3f1621a652c935cc467def1b19280e889","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n@@ -57,13 +58,15 @@ public class TargetResource extends AbstractBaseBean {\n      * Attribute mappings.\n      */\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"resource\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<SchemaMapping> mappings;\n     @Column(nullable = false)\n     @Basic\n     private Character forceMandatoryConstraint;\n \n     public TargetResource() {\n-        this.forceMandatoryConstraint = getBooleanAsCharacter(false);\n+        forceMandatoryConstraint = getBooleanAsCharacter(false);\n+        mappings = new ArrayList<SchemaMapping>();\n     }\n \n     public boolean isForceMandatoryConstraint() {\n@@ -84,25 +87,22 @@ public void setConnector(ConnectorInstance connector) {\n     }\n \n     public List<SchemaMapping> getMappings() {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-        return this.mappings;\n+        return mappings;\n     }\n \n     public boolean removeMapping(SchemaMapping mapping) {\n-        return this.mappings == null || this.mappings.remove(mapping);\n+        return mappings == null || mappings.remove(mapping);\n     }\n \n     public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMapping>();\n-        }\n-        return this.mappings.contains(mapping) || this.mappings.add(mapping);\n+        return mappings.contains(mapping) || mappings.add(mapping);\n     }\n \n     public void setMappings(List<SchemaMapping> mappings) {\n-        this.mappings = mappings;\n+        this.mappings.clear();\n+        if (mappings != null) {\n+            this.mappings.addAll(mappings);\n+        }\n     }\n \n     public String getName() {"},{"sha":"77e2b19bfa81defcd2c677ca8e207679c2c5d33c","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -147,8 +147,8 @@ public Set<TargetResource> getInheritedTargetResources() {\n                 inheritedTargetResources.addAll(role.getTargetResources());\n \n             } catch (Throwable t) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Invalid role \" + role, t);\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Invalid role \" + role, t);\n                 }\n             }\n         }\n@@ -167,7 +167,7 @@ public String getPassword() {\n             result = new String(AsymmetricCipher.decrypt(password,\n                     kp.getPrivate()));\n         } catch (Throwable t) {\n-            log.error(\"Could not get the key pair and the password\", t);\n+            LOG.error(\"Could not get the key pair and the password\", t);\n         }\n \n         return result;\n@@ -190,7 +190,7 @@ public void setPassword(String password) {\n                     kp.getPublic());\n             this.passwordKeyPair = AsymmetricCipher.serializeKeyPair(kp);\n         } catch (Throwable t) {\n-            log.error(\"Could not set the password and the key pair\", t);\n+            LOG.error(\"Could not set the password and the key pair\", t);\n         }\n     }\n "},{"sha":"15c8e02ebc474dd375049ce279c8228c61b40b5c","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedSchemaDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -25,5 +25,6 @@ public interface DerivedSchemaDAO extends DAO {\n \n     <T extends AbstractDerivedSchema> T save(T derivedSchema);\n \n-    <T extends AbstractDerivedSchema> void delete(String name, Class<T> reference);\n+    <T extends AbstractDerivedSchema> void delete(\n+            String name, Class<T> reference);\n }"},{"sha":"7a02bc23bdc16909b2cc702a2abf2f0a0da68dc8","filename":"core/src/main/java/org/syncope/core/persistence/dao/ResourceDAO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceDAO.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -15,7 +15,9 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.types.SchemaType;\n \n public interface ResourceDAO extends DAO {\n \n@@ -25,5 +27,10 @@ public interface ResourceDAO extends DAO {\n \n     TargetResource save(TargetResource resource);\n \n+    List<SchemaMapping> getMappings(final String schemaName,\n+            final SchemaType schemaType);\n+\n+    void deleteMappings(String schemaName, SchemaType schemaType);\n+\n     void delete(String name);\n }"},{"sha":"46ac4e488ac1912385e3aa9c83d7b3ef7ee1952d","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -17,7 +17,6 @@\n import java.util.List;\n import java.util.Set;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n \n@@ -27,21 +26,14 @@ public interface SchemaDAO extends DAO {\n \n     <T extends AbstractSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractSchema> T save(T schema) throws MultiUniqueValueException;\n+    <T extends AbstractSchema> T save(\n+            T schema) throws MultiUniqueValueException;\n \n     <T extends AbstractSchema> void delete(String name, Class<T> reference);\n \n-    public SchemaMapping findMapping(Long id);\n-\n-    public List<SchemaMapping> findAllMappings();\n-\n-    public SchemaMapping saveMapping(SchemaMapping mapping);\n-\n-    public void removeMapping(Long mappingId);\n-\n-    public boolean isMandatoryOnResource(\n+    boolean isMandatoryOnResource(\n             AbstractSchema schema, TargetResource resource);\n \n-    public boolean isMandatoryOnResource(\n+    boolean isMandatoryOnResources(\n             AbstractSchema schema, Set<TargetResource> resources);\n }"},{"sha":"23976735d2326ecf1b17417ebdaddb28c20523eb","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnectorInstanceDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -47,7 +47,7 @@ public final ConnectorInstance save(final ConnectorInstance connector) {\n         try {\n             ConnectorInstanceLoader.registerConnectorFacade(actual);\n         } catch (NotFoundException e) {\n-            LOG.error(\"While restingering the connector facade for instance \"\n+            LOG.error(\"While resgistering the connector facade for instance \"\n                     + actual, e);\n         }\n "},{"sha":"540ae0ac88b8ed23915bd8145272e5042489fca2","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":46,"deletions":24,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -14,28 +14,22 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Query;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.types.SchemaType;\n \n @Repository\n public class ResourceDAOImpl extends AbstractDAOImpl\n         implements ResourceDAO {\n \n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n     @Override\n     @Transactional(readOnly = true)\n     public TargetResource find(String name) {\n@@ -56,8 +50,44 @@ public TargetResource save(TargetResource resource) {\n     }\n \n     @Override\n-    public void delete(String name) {\n+    @Transactional(readOnly = true)\n+    public List<SchemaMapping> getMappings(final String schemaName,\n+            final SchemaType schemaType) {\n+\n+        Query query = entityManager.createQuery(\"SELECT m FROM \"\n+                + SchemaMapping.class.getSimpleName()\n+                + \" m WHERE m.schemaName=:schemaName \"\n+                + \"AND m.schemaType=:schemaType\");\n+        query.setParameter(\"schemaName\", schemaName);\n+        query.setParameter(\"schemaType\", schemaType);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public void deleteMappings(final String schemaName,\n+            final SchemaType schemaType) {\n+\n+        if (schemaType == SchemaType.AccountId\n+                || schemaType == SchemaType.Password) {\n+            return;\n+        }\n+\n+        Query query = entityManager.createQuery(\"DELETE FROM \"\n+                + SchemaMapping.class.getSimpleName()\n+                + \" m WHERE m.schemaName=:schemaName \"\n+                + \"AND m.schemaType=:schemaType\");\n+        query.setParameter(\"schemaName\", schemaName);\n+        query.setParameter(\"schemaType\", schemaType);\n+\n+        int items = query.executeUpdate();\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Removed \" + items + \" schema mappings\");\n+        }\n+    }\n \n+    @Override\n+    public void delete(String name) {\n         TargetResource resource = find(name);\n         if (resource == null) {\n             return;\n@@ -66,13 +96,7 @@ public void delete(String name) {\n         // --------------------------------------\n         // Remove all mappings\n         // --------------------------------------\n-        List<SchemaMapping> mappings = resource.getMappings();\n-        resource.setMappings(Collections.EMPTY_LIST);\n-\n-        for (SchemaMapping mapping : mappings) {\n-            mapping.setResource(null);\n-            schemaDAO.removeMapping(mapping.getId());\n-        }\n+        resource.getMappings().clear();\n         // --------------------------------------\n \n         Set<SyncopeUser> users = resource.getUsers();\n@@ -81,23 +105,21 @@ public void delete(String name) {\n                 user.removeTargetResource(resource);\n             }\n         }\n-        resource.setUsers(null);\n+        resource.getUsers().clear();\n \n         Set<SyncopeRole> roles = resource.getRoles();\n         if (roles != null && !roles.isEmpty()) {\n             for (SyncopeRole role : roles) {\n                 role.removeTargetResource(resource);\n             }\n         }\n-        resource.setRoles(null);\n+        resource.getRoles().clear();\n \n-        ConnectorInstance connector = resource.getConnector();\n-        List<TargetResource> resources = null;\n-        if (connector != null) {\n-            resources = connector.getResources();\n-        }\n-        if (resources != null && !resources.isEmpty()) {\n-            resources.remove(resource);\n+        if (resource.getConnector() != null\n+                && resource.getConnector().getResources() != null\n+                && !resource.getConnector().getResources().isEmpty()) {\n+\n+            resource.getConnector().getResources().remove(resource);\n         }\n         resource.setConnector(null);\n "},{"sha":"627ff014b3fc7f8deced117310b0983cdb7ea66e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":7,"deletions":103,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -24,7 +24,6 @@\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -71,26 +70,14 @@ public <T extends AbstractSchema> T save(T schema)\n     }\n \n     @Override\n-    public <T extends AbstractSchema> void delete(\n-            String name, Class<T> reference) {\n+    public <T extends AbstractSchema> void delete(String name,\n+            Class<T> reference) {\n \n         T schema = find(name, reference);\n-\n         if (schema == null) {\n             return;\n         }\n \n-        // --------------------------------------\n-        // Remove all mappings\n-        // --------------------------------------\n-        List<SchemaMapping> mappings = schema.getMappings();\n-        schema.setMappings(Collections.EMPTY_LIST);\n-\n-        for (SchemaMapping mapping : mappings) {\n-            removeMapping(mapping.getId());\n-        }\n-        // --------------------------------------\n-\n         for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n             derivedSchema.removeSchema(schema);\n         }\n@@ -103,91 +90,9 @@ public <T extends AbstractSchema> void delete(\n         }\n         schema.setAttributes(Collections.EMPTY_LIST);\n \n-        entityManager.remove(schema);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true)\n-    public SchemaMapping findMapping(Long id) {\n-        return entityManager.find(SchemaMapping.class, id);\n-    }\n+        resourceDAO.deleteMappings(name, SchemaType.byClass(reference));\n \n-    @Override\n-    @Transactional(readOnly = true)\n-    public List<SchemaMapping> findAllMappings() {\n-        Query query =\n-                entityManager.createQuery(\"SELECT e FROM SchemaMapping e\");\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public SchemaMapping saveMapping(SchemaMapping mapping) {\n-        return entityManager.merge(mapping);\n-    }\n-\n-    @Override\n-    public void removeMapping(Long mappingId) {\n-\n-        // Get mapping object\n-        SchemaMapping mapping = findMapping(mappingId);\n-\n-        if (mapping == null) {\n-            return;\n-        }\n-\n-        // --------------------------------------\n-        // Synchronize schema\n-        // --------------------------------------\n-        String schemaName = mapping.getSchemaName();\n-        SchemaType schemaType = mapping.getSchemaType();\n-\n-        try {\n-            // check for schema type\n-            schemaType.getSchemaClass().asSubclass(AbstractSchema.class);\n-\n-            /**\n-             * Schema type could be:\n-             * * UserSchema\n-             * * RoleSchema\n-             * * MembershipSchema\n-             */\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Schema type \" + schemaType.getClassName());\n-            }\n-            AbstractSchema schema = find(schemaName,\n-                    schemaType.getSchemaClass());\n-\n-            if (schema != null) {\n-                schema.removeMapping(mapping);\n-            }\n-\n-        } catch (ClassCastException e) {\n-            /**\n-             * Schema type could be:\n-             * * AccountId\n-             * * Password\n-             */\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Wrong schema type \" + schemaType.getClassName());\n-            }\n-        }\n-        // --------------------------------------\n-\n-        // --------------------------------------\n-        // Synchronize resource\n-        // --------------------------------------\n-        TargetResource resource =\n-                resourceDAO.find(mapping.getResource().getName());\n-\n-        if (resource != null) {\n-            resource.removeMapping(mapping);\n-        }\n-\n-        mapping.setResource(null);\n-        // --------------------------------------\n-\n-        // Remove mapping\n-        entityManager.remove(mapping);\n+        entityManager.remove(schema);\n     }\n \n     @Override\n@@ -202,14 +107,13 @@ public boolean isMandatoryOnResource(\n                 + \"AND e.resource.name='\" + resource.getName() + \"' \"\n                 + \"AND e.nullable='F'\");\n \n-        return schema.isMandatory()\n-                || (resource.isForceMandatoryConstraint()\n-                && !query.getResultList().isEmpty());\n+        return resource.isForceMandatoryConstraint()\n+                && !query.getResultList().isEmpty();\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public boolean isMandatoryOnResource(\n+    public boolean isMandatoryOnResources(\n             AbstractSchema schema, Set<TargetResource> resources) {\n \n         StringBuilder queryBuilder = new StringBuilder();"},{"sha":"8b6bdbe5d7144726f08705da5d2341f3ca192f8f","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -24,16 +24,19 @@\n @Transactional(rollbackFor = {Throwable.class})\n public abstract class AbstractController {\n \n-    protected static final Logger log =\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n             LoggerFactory.getLogger(AbstractController.class);\n \n-    protected AttributableUtil getAttributableUtil(String kind) {\n+    protected AttributableUtil getAttributableUtil(final String kind) {\n         AttributableUtil result = null;\n \n         try {\n             result = AttributableUtil.valueOf(kind.toUpperCase());\n         } catch (Exception e) {\n-            log.error(\"Attributable not supported: \" + kind);\n+            LOG.error(\"Attributable not supported: \" + kind);\n \n             throw new TypeMismatchException(kind, AttributableUtil.class, e);\n         }"},{"sha":"643778d8069a833750cd28aa618252c1188d8925","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -46,8 +46,8 @@ public ConfigurationTO create(HttpServletRequest request,\n             HttpServletResponse response,\n             @RequestBody ConfigurationTO configurationTO) {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"create called with parameters \" + configurationTO);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"create called with parameters \" + configurationTO);\n         }\n \n         SyncopeConfiguration syncopeConfiguration ="},{"sha":"65d28d78ff6f7158cc22fa50928e273e8decbbab","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":42,"deletions":298,"changes":340,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -15,28 +15,19 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.File;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import java.net.URL;\n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n-import org.identityconnectors.common.IOUtil;\n-import org.identityconnectors.framework.api.APIConfiguration;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorFacade;\n-import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n-import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n import org.identityconnectors.framework.api.ConnectorKey;\n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -45,13 +36,11 @@\n import org.syncope.client.to.ConnectorBundleTOs;\n import org.syncope.client.to.ConnectorInstanceTO;\n import org.syncope.client.to.ConnectorInstanceTOs;\n-import org.syncope.client.to.PropertyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n \n@@ -62,8 +51,6 @@ public class ConnectorInstanceController extends AbstractController {\n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n     @Autowired\n-    private SyncopeConfigurationDAO syncopeConfigurationDAO;\n-    @Autowired\n     private ConnectorInstanceDataBinder binder;\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -73,60 +60,24 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n             throws SyncopeClientCompositeErrorException, NotFoundException,\n             MissingConfKeyException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Create called with configuration \" + connectorTO);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Create called with configuration \" + connectorTO);\n         }\n \n-        ConnectorInstance actual = null;\n-\n+        ConnectorInstance connectorInstance = null;\n         try {\n-\n-            ConnectorInstance connectorInstance =\n-                    binder.getConnectorInstance(connectorTO);\n-\n-            // Everything went out fine, we can flush to the database\n-            actual = connectorInstanceDAO.save(connectorInstance);\n+            connectorInstance = binder.getConnectorInstance(connectorTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n-            log.error(\"Could not create for \" + connectorTO, e);\n+            LOG.error(\"Could not create for \" + connectorTO, e);\n \n             throw e;\n         }\n \n-        SyncopeConfiguration syncopeConfiguration =\n-                syncopeConfigurationDAO.find(\n-                \"identityconnectors.bundle.directory\");\n-\n-        ConnectorInfoManager manager =\n-                getConnectorManager(syncopeConfiguration.getConfValue());\n-\n-        ConnectorFacade connector = getConnectorFacade(\n-                manager,\n-                connectorTO.getBundleName(),\n-                connectorTO.getVersion(),\n-                connectorTO.getConnectorName(),\n-                connectorTO.getConfiguration());\n-\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        DefaultListableBeanFactory beanFactory =\n-                (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-        try {\n-\n-            beanFactory.destroySingleton(actual.getId().toString());\n-\n-        } catch (NoSuchBeanDefinitionException ignore) {\n-            // ignore exception\n-            if (log.isInfoEnabled()) {\n-                log.info(\"No bean named '\" + actual.getId() + \"' is defined\");\n-            }\n-        }\n-\n-        beanFactory.registerSingleton(actual.getId().toString(), connector);\n+        // Everything went out fine, we can flush to the database\n+        // and register the new connector instance for later usage\n+        connectorInstance = connectorInstanceDAO.save(connectorInstance);\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getConnectorInstanceTO(actual);\n+        return binder.getConnectorInstanceTO(connectorInstance);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -136,66 +87,25 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n             throws SyncopeClientCompositeErrorException, NotFoundException,\n             MissingConfKeyException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"update called with configuration \" + connectorTO);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"update called with configuration \" + connectorTO);\n         }\n \n-        ConnectorInstance actual = null;\n-\n+        ConnectorInstance connectorInstance = null;\n         try {\n-            ConnectorInstance connectorInstance =\n-                    binder.updateConnectorInstance(\n+            connectorInstance = binder.updateConnectorInstance(\n                     connectorTO.getId(), connectorTO);\n-\n-            // Everything went out fine, we can flush to the database\n-            actual = connectorInstanceDAO.save(connectorInstance);\n         } catch (SyncopeClientCompositeErrorException e) {\n-            log.error(\"Could not create for \" + connectorTO, e);\n+            LOG.error(\"Could not create for \" + connectorTO, e);\n \n             throw e;\n         }\n \n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        DefaultListableBeanFactory beanFactory =\n-                (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-        ConnectorFacade connector = (ConnectorFacade) beanFactory.getBean(\n-                actual.getId().toString());\n-\n-        if (connector == null) {\n-\n-            SyncopeConfiguration syncopeConfiguration =\n-                    syncopeConfigurationDAO.find(\n-                    \"identityconnectors.bundle.directory\");\n-\n-            ConnectorInfoManager manager =\n-                    getConnectorManager(syncopeConfiguration.getConfValue());\n-\n-            connector = getConnectorFacade(\n-                    manager,\n-                    connectorTO.getBundleName(),\n-                    connectorTO.getVersion(),\n-                    connectorTO.getConnectorName(),\n-                    connectorTO.getConfiguration());\n-        }\n-\n-        try {\n-\n-            beanFactory.destroySingleton(actual.getId().toString());\n+        // Everything went out fine, we can flush to the database\n+        // and register the new connector instance for later usage\n+        connectorInstance = connectorInstanceDAO.save(connectorInstance);\n \n-        } catch (NoSuchBeanDefinitionException ignore) {\n-            // ignore exception\n-            if (log.isInfoEnabled()) {\n-                log.info(\"No bean named '\" + actual.getId() + \"' is defined\");\n-            }\n-        }\n-\n-        beanFactory.registerSingleton(actual.getId().toString(), connector);\n-\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getConnectorInstanceTO(actual);\n+        return binder.getConnectorInstanceTO(connectorInstance);\n     }\n \n     @RequestMapping(method = RequestMethod.DELETE,\n@@ -208,33 +118,14 @@ public void delete(HttpServletResponse response,\n                 connectorInstanceDAO.find(connectorId);\n \n         if (connectorInstance == null) {\n-\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Could not find connector '\" + connectorId + \"'\");\n+            if (LOG.isErrorEnabled()) {\n+                LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n             }\n \n             throw new NotFoundException(String.valueOf(connectorId));\n-\n-        } else {\n-            connectorInstanceDAO.delete(connectorId);\n-\n-            ConfigurableApplicationContext context =\n-                    ApplicationContextManager.getApplicationContext();\n-\n-            DefaultListableBeanFactory beanFactory =\n-                    (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-            try {\n-\n-                beanFactory.destroySingleton(connectorId.toString());\n-\n-            } catch (NoSuchBeanDefinitionException ignore) {\n-                // ignore exception\n-                if (log.isInfoEnabled()) {\n-                    log.info(\"No bean named '\" + connectorId + \"' is defined\");\n-                }\n-            }\n         }\n+\n+        connectorInstanceDAO.delete(connectorId);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n@@ -264,7 +155,7 @@ public ConnectorInstanceTO read(HttpServletResponse response,\n                 connectorInstanceDAO.find(connectorId);\n \n         if (connectorInstance == null) {\n-            log.error(\"Could not find connector '\" + connectorId + \"'\");\n+            LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n \n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n@@ -283,8 +174,8 @@ public ModelAndView check(HttpServletResponse response,\n         DefaultListableBeanFactory beanFactory =\n                 (DefaultListableBeanFactory) context.getBeanFactory();\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Singleton in bean factory: \"\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Singleton in bean factory: \"\n                     + beanFactory.getSingletonNames());\n         }\n \n@@ -294,17 +185,14 @@ public ModelAndView check(HttpServletResponse response,\n         ModelAndView mav = new ModelAndView();\n \n         Boolean verify = Boolean.FALSE;\n-\n         try {\n-\n             if (connector != null) {\n                 connector.validate();\n                 verify = Boolean.TRUE;\n             }\n-\n         } catch (RuntimeException ignore) {\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Connector validation failed\", ignore);\n+            if (LOG.isInfoEnabled()) {\n+                LOG.info(\"Connector validation failed\", ignore);\n             }\n         }\n \n@@ -318,32 +206,32 @@ public ModelAndView check(HttpServletResponse response,\n     public ConnectorBundleTOs getBundles()\n             throws NotFoundException, MissingConfKeyException {\n \n-        ConnectorBundleTOs connectorBundleTOs = new ConnectorBundleTOs();\n+        ConnectorInfoManager manager =\n+                ConnectorInstanceLoader.getConnectorManager();\n \n-        SyncopeConfiguration syncopeConfiguration =\n-                syncopeConfigurationDAO.find(\n-                \"identityconnectors.bundle.directory\");\n+        List<ConnectorInfo> bundles = manager.getConnectorInfos();\n \n-        ConnectorInfoManager manager =\n-                getConnectorManager(syncopeConfiguration.getConfValue());\n+        if (LOG.isDebugEnabled() && bundles != null) {\n+            LOG.debug(\"#Bundles: \" + bundles.size());\n \n-        List<ConnectorInfo> bundles = getBundles(manager);\n+            for (ConnectorInfo bundle : bundles) {\n+                LOG.debug(\"Bundle: \" + bundle.getConnectorDisplayName());\n+            }\n+        }\n \n         ConnectorBundleTO connectorBundleTO = null;\n         ConnectorKey key = null;\n         ConfigurationProperties properties = null;\n \n+        ConnectorBundleTOs connectorBundleTOs = new ConnectorBundleTOs();\n         for (ConnectorInfo bundle : bundles) {\n-\n             connectorBundleTO = new ConnectorBundleTO();\n-\n             connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n \n             key = bundle.getConnectorKey();\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\n-                        \"\\nBundle name: \" + key.getBundleName()\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"\\nBundle name: \" + key.getBundleName()\n                         + \"\\nBundle version: \" + key.getBundleVersion()\n                         + \"\\nBundle class: \" + key.getConnectorName());\n             }\n@@ -357,8 +245,8 @@ public ConnectorBundleTOs getBundles()\n \n             connectorBundleTO.setProperties(properties.getPropertyNames());\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Bundle properties: \"\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Bundle properties: \"\n                         + connectorBundleTO.getProperties());\n             }\n \n@@ -367,148 +255,4 @@ public ConnectorBundleTOs getBundles()\n \n         return connectorBundleTOs;\n     }\n-\n-    public static List<ConnectorInfo> getBundles(\n-            ConnectorInfoManager manager) {\n-\n-        List<ConnectorInfo> bundles = manager.getConnectorInfos();\n-\n-        if (log.isDebugEnabled() && bundles != null) {\n-            log.debug(\"#Bundles: \" + bundles.size());\n-\n-            for (ConnectorInfo bundle : bundles) {\n-                log.debug(\"Bundle: \" + bundle.getConnectorDisplayName());\n-            }\n-        }\n-\n-        return bundles;\n-    }\n-\n-    public static ConnectorFacade getConnectorFacade(\n-            ConnectorInfoManager manager,\n-            String bundlename,\n-            String bundleversion,\n-            String connectorname,\n-            Set<PropertyTO> configuration) throws NotFoundException {\n-\n-        // specify a connector.\n-        ConnectorKey key = new ConnectorKey(\n-                bundlename,\n-                bundleversion,\n-                connectorname);\n-\n-        if (key == null) {\n-            throw new NotFoundException(\"Connector Key\");\n-        }\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"\\nBundle name: \" + key.getBundleName()\n-                    + \"\\nBundle version: \" + key.getBundleVersion()\n-                    + \"\\nBundle class: \" + key.getConnectorName());\n-        }\n-\n-        // get the specified connector.\n-        ConnectorInfo info = manager.findConnectorInfo(key);\n-\n-        if (info == null) {\n-            throw new NotFoundException(\"Connector Info\");\n-        }\n-\n-        // create default configuration\n-        APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n-\n-        if (apiConfig == null) {\n-            throw new NotFoundException(\"Default API configuration\");\n-        }\n-\n-        // retrieve the ConfigurationProperties.\n-        ConfigurationProperties properties =\n-                apiConfig.getConfigurationProperties();\n-\n-        if (properties == null) {\n-            throw new NotFoundException(\"Configuration properties\");\n-        }\n-\n-        // Print out what the properties are (not necessary)\n-        if (log.isDebugEnabled()) {\n-            for (String propName : properties.getPropertyNames()) {\n-                log.debug(\"\\nProperty Name: \"\n-                        + properties.getProperty(propName).getName()\n-                        + \"\\nProperty Type: \"\n-                        + properties.getProperty(propName).getType());\n-            }\n-        }\n-\n-        // Set all of the ConfigurationProperties needed by the connector.\n-        for (PropertyTO property : configuration) {\n-            properties.setPropertyValue(\n-                    property.getKey(), property.getValue());\n-        }\n-\n-        // Use the ConnectorFacadeFactory's newInstance() method to get\n-        // a new connector.\n-        ConnectorFacade connector =\n-                ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n-\n-        if (connector == null) {\n-            throw new NotFoundException(\"Connector\");\n-        }\n-\n-        // Make sure we have set up the Configuration properly\n-        connector.validate();\n-        //connector.test(); //needs a target resource deployed\n-\n-        return connector;\n-    }\n-\n-    public static ConnectorInfoManager getConnectorManager(\n-            String bundledirectory) throws NotFoundException {\n-\n-        ConnectorInfoManagerFactory connectorInfoManagerFactory =\n-                ConnectorInfoManagerFactory.getInstance();\n-\n-        File bundleDirectory = new File(bundledirectory);\n-\n-        List<URL> urls = new ArrayList<URL>();\n-\n-        String[] files = bundleDirectory.list();\n-\n-        if (files == null) {\n-            throw new NotFoundException(\"Bundles\");\n-        }\n-\n-        for (String file : files) {\n-            try {\n-                urls.add(IOUtil.makeURL(bundleDirectory, file));\n-            } catch (Exception ignore) {\n-                // ignore exception and don't add bundle\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\n-                            \"\\\"\"\n-                            + bundleDirectory.toString() + \"/\" + file\n-                            + \"\\\"\"\n-                            + \" is not a valid connector bundle.\", ignore);\n-                }\n-            }\n-        }\n-\n-        if (urls.isEmpty()) {\n-            throw new NotFoundException(\"Bundles\");\n-        }\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"URL: \" + urls.toString());\n-        }\n-\n-        ConnectorInfoManager manager =\n-                connectorInfoManagerFactory.getLocalManager(\n-                urls.toArray(new URL[0]));\n-\n-        if (manager == null) {\n-            throw new NotFoundException(\"Connector Info Manager\");\n-        }\n-\n-        return manager;\n-    }\n }"},{"sha":"1dd8c0dc474f77553c43670fd3f15b42af16e8e2","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -68,7 +68,7 @@ public void delete(HttpServletResponse response,\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n-            log.error(\"Could not find derived schema '\"\n+            LOG.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n \n             throw new NotFoundException(derivedSchemaName);\n@@ -108,7 +108,7 @@ public DerivedSchemaTO read(HttpServletResponse response,\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n-            log.error(\"Could not find derived schema '\"\n+            LOG.error(\"Could not find derived schema '\"\n                     + derivedSchemaName + \"'\");\n \n             throw new NotFoundException(derivedSchemaName);\n@@ -130,7 +130,7 @@ public DerivedSchemaTO update(HttpServletResponse response,\n                 derivedSchemaTO, derivedSchema,\n                 getAttributableUtil(kind).getSchemaClass());\n         if (derivedSchema == null) {\n-            log.error(\"Could not find schema '\"\n+            LOG.error(\"Could not find schema '\"\n                     + derivedSchemaTO.getName() + \"'\");\n \n             throw new NotFoundException(derivedSchemaTO.getName());"},{"sha":"ebd3d492e0ddc3be7816290f1c2964f7f892d33c","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":27,"deletions":329,"changes":356,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -15,34 +15,24 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.ResourceTOs;\n-import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n-import org.syncope.types.SchemaType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -52,10 +42,6 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ResourceDAO resourceDAO;\n     @Autowired\n-    private SchemaDAO schemaDAO;\n-    @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n-    @Autowired\n     private ResourceDataBinder binder;\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -64,25 +50,25 @@ public ResourceTO create(HttpServletResponse response,\n             @RequestBody ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Creation request received\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Creation request received\");\n         }\n \n         SyncopeClientCompositeErrorException compositeErrorException =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n         if (resourceTO == null) {\n-            log.error(\"Missing resource\");\n+            LOG.error(\"Missing resource\");\n \n             throw new NotFoundException(\"Missing resource\");\n         }\n \n         TargetResource resource = null;\n \n         try {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Verify that resource dosn't exist\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Verify that resource dosn't exist\");\n             }\n \n             if (resourceDAO.find(resourceTO.getName()) != null) {\n@@ -95,13 +81,13 @@ public ResourceTO create(HttpServletResponse response,\n                 throw compositeErrorException;\n             }\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Resource data binder ..\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Resource data binder ..\");\n             }\n \n             resource = binder.getResource(resourceTO);\n             if (resource == null) {\n-                log.error(\"Resource creation failed\");\n+                LOG.error(\"Resource creation failed\");\n \n                 SyncopeClientException ex = new SyncopeClientException(\n                         SyncopeClientExceptionType.Unknown);\n@@ -111,8 +97,8 @@ public ResourceTO create(HttpServletResponse response,\n                 throw compositeErrorException;\n             }\n         } catch (Throwable t) {\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Unknown exception\", t);\n+            if (LOG.isErrorEnabled()) {\n+                LOG.error(\"Unknown exception\", t);\n             }\n \n             SyncopeClientException ex = new SyncopeClientException(\n@@ -135,8 +121,8 @@ public ResourceTO update(HttpServletResponse response,\n             @RequestBody ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Update request received\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Update request received\");\n         }\n \n         TargetResource resource = null;\n@@ -146,7 +132,7 @@ public ResourceTO update(HttpServletResponse response,\n         }\n \n         if (resource == null) {\n-            log.error(\"Missing resource\");\n+            LOG.error(\"Missing resource\");\n \n             throw new NotFoundException(resourceTO.getName());\n         }\n@@ -156,26 +142,21 @@ public ResourceTO update(HttpServletResponse response,\n                 HttpStatus.BAD_REQUEST);\n \n         try {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Remove old mappings ..\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Remove old mappings ..\");\n             }\n \n             // remove older mappings\n-            List<SchemaMapping> mappings = resource.getMappings();\n-            for (SchemaMapping mapping : mappings) {\n-                mapping.setResource(null);\n-                schemaDAO.removeMapping(mapping.getId());\n-            }\n             resource.getMappings().clear();\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Resource data binder ..\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Resource data binder ..\");\n             }\n \n             resource = binder.getResource(resource, resourceTO);\n             if (resource == null) {\n-                if (log.isErrorEnabled()) {\n-                    log.error(\"Resource creation failed\");\n+                if (LOG.isErrorEnabled()) {\n+                    LOG.error(\"Resource creation failed\");\n                 }\n \n                 SyncopeClientException ex = new SyncopeClientException(\n@@ -185,7 +166,7 @@ public ResourceTO update(HttpServletResponse response,\n                 throw compositeErrorException;\n             }\n         } catch (Throwable t) {\n-            log.error(\"Unknown exception\", t);\n+            LOG.error(\"Unknown exception\", t);\n \n             SyncopeClientException ex = new SyncopeClientException(\n                     SyncopeClientExceptionType.Unknown);\n@@ -208,20 +189,16 @@ public void delete(HttpServletResponse response,\n         TargetResource resource = resourceDAO.find(resourceName);\n \n         if (resource == null) {\n-\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Could not find resource '\" + resourceName + \"'\");\n+            if (LOG.isErrorEnabled()) {\n+                LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n             }\n-\n             throw new NotFoundException(resourceName);\n-\n         } else {\n-\n             resourceDAO.delete(resourceName);\n-\n         }\n     }\n \n+    @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{resourceName}\")\n     public ResourceTO read(HttpServletResponse response,\n@@ -230,14 +207,15 @@ public ResourceTO read(HttpServletResponse response,\n \n         TargetResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n-            log.error(\"Could not find resource '\" + resourceName + \"'\");\n+            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n \n             throw new NotFoundException(resourceName);\n         }\n \n         return binder.getResourceTO(resource);\n     }\n \n+    @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public ResourceTOs list(HttpServletResponse response)\n@@ -246,291 +224,11 @@ public ResourceTOs list(HttpServletResponse response)\n         List<TargetResource> resources = resourceDAO.findAll();\n \n         if (resources == null) {\n-            log.error(\"No resource found\");\n+            LOG.error(\"No resource found\");\n \n             throw new NotFoundException(\"No resource found\");\n         }\n \n         return binder.getResourceTOs(resources);\n     }\n-\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/{resourceName}/mappings/create\")\n-    public SchemaMappingTOs createMappings(HttpServletResponse response,\n-            @PathVariable(\"resourceName\") String resourceName,\n-            @RequestBody SchemaMappingTOs mappings)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        Set<SchemaMapping> actuals = new HashSet<SchemaMapping>();\n-\n-        try {\n-\n-            TargetResource resource = null;\n-            if (resourceName != null) {\n-                resource = resourceDAO.find(resourceName);\n-            }\n-\n-            if (resource == null) {\n-                if (log.isErrorEnabled()) {\n-                    log.error(\"Missing resource\");\n-                }\n-\n-                SyncopeClientException ex = new SyncopeClientException(\n-                        SyncopeClientExceptionType.RequiredValuesMissing);\n-\n-                ex.addElement(\"resource\");\n-\n-                throw ex;\n-            }\n-\n-            if (mappings == null || mappings.getMappings().isEmpty()) {\n-                if (log.isErrorEnabled()) {\n-                    log.error(\"Missing mapping\");\n-                }\n-\n-                SyncopeClientException ex = new SyncopeClientException(\n-                        SyncopeClientExceptionType.RequiredValuesMissing);\n-\n-                ex.addElement(\"mappings\");\n-\n-                throw ex;\n-            }\n-\n-            // resource.getMappings() can never return a null value\n-            List<SchemaMapping> existentMappings = resource.getMappings();\n-\n-            for (SchemaMapping mapping : existentMappings) {\n-                if (mapping != null) {// a list can contain null values\n-                    mapping.setResource(null);\n-                    schemaDAO.removeMapping(mapping.getId());\n-                }\n-            }\n-\n-            // to be sure ...\n-            resource.setMappings(new ArrayList<SchemaMapping>());\n-\n-            List<SchemaMapping> schemaMappings =\n-                    binder.getSchemaMappings(resource, mappings);\n-\n-            SchemaMapping actual = null;\n-\n-            for (SchemaMapping schemaMapping : schemaMappings) {\n-                // --------------------------------------\n-                // Synchronize resource\n-                // --------------------------------------\n-                resource.addMapping(actual);\n-                // --------------------------------------\n-\n-                // --------------------------------------\n-                // Synchronize schema\n-                // --------------------------------------\n-                String schemaName = schemaMapping.getSchemaName();\n-                SchemaType schemaType = schemaMapping.getSchemaType();\n-\n-                try {\n-                    // check for schema type\n-                    schemaType.getSchemaClass().asSubclass(AbstractSchema.class);\n-\n-                    /**\n-                     * Schema type could be:\n-                     * * UserSchema\n-                     * * RoleSchema\n-                     * * MembershipSchema\n-                     */\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Schema type \" + schemaType.getClassName());\n-                    }\n-\n-                    AbstractSchema schema = schemaDAO.find(\n-                            schemaName, schemaType.getSchemaClass());\n-\n-                    if (schema != null) {\n-                        schema.removeMapping(schemaMapping);\n-                    }\n-\n-                } catch (ClassCastException e) {\n-                    /**\n-                     * Schema type could be:\n-                     * * AccountId\n-                     * * Password\n-                     */\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Wrong schema type \"\n-                                + schemaType.getClassName());\n-                    }\n-                }\n-                // --------------------------------------\n-\n-                actual = schemaDAO.saveMapping(schemaMapping);\n-                actuals.add(actual);\n-            }\n-\n-            resourceDAO.save(resource);\n-\n-        } catch (SyncopeClientException ex) {\n-\n-            SyncopeClientCompositeErrorException compositeErrorException =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-\n-            compositeErrorException.addException(ex);\n-\n-            throw compositeErrorException;\n-\n-        } catch (Throwable t) {\n-\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Unknown exception\", t);\n-            }\n-\n-            SyncopeClientException ex = new SyncopeClientException(\n-                    SyncopeClientExceptionType.Unknown);\n-\n-            SyncopeClientCompositeErrorException compositeErrorException =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-\n-            compositeErrorException.addException(ex);\n-\n-            throw compositeErrorException;\n-        }\n-\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getSchemaMappingTOs(actuals);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.DELETE,\n-    value = \"/{resourceName}/mappings/delete\")\n-    public void deleteMappings(HttpServletResponse response,\n-            @PathVariable(\"resourceName\") String resourceName)\n-            throws NotFoundException {\n-\n-        TargetResource resource = resourceDAO.find(resourceName);\n-\n-        if (resource == null) {\n-\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Could not find resource '\" + resourceName + \"'\");\n-            }\n-\n-            throw new NotFoundException(resourceName);\n-\n-        } else {\n-\n-            List<SchemaMapping> mappings = resource.getMappings();\n-\n-            // resource.getMappings() can never return a null value\n-\n-            for (SchemaMapping mapping : mappings) {\n-                mapping.setResource(null);\n-                schemaDAO.removeMapping(mapping.getId());\n-            }\n-\n-            // to be sure ...\n-            resource.setMappings(Collections.EMPTY_LIST);\n-        }\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/{resourceName}/mappings/list\")\n-    public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n-            @PathVariable(\"resourceName\") String resourceName)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        TargetResource resource = null;\n-        if (resourceName != null) {\n-            resource = resourceDAO.find(resourceName);\n-        }\n-\n-        if (resource == null) {\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Resource \" + resourceName + \" not found.\");\n-            }\n-\n-            SyncopeClientCompositeErrorException compositeErrorException =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-\n-            SyncopeClientException ex = new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValuesMissing);\n-\n-            ex.addElement(\"resource\");\n-\n-            compositeErrorException.addException(ex);\n-\n-            throw compositeErrorException;\n-        }\n-\n-        List<SchemaMapping> schemaMappings = resource.getMappings();\n-\n-        // resource.getMappings() can never return a null value\n-\n-        return binder.getSchemaMappingTOs(schemaMappings);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/{roleName}/resources/mappings/list\")\n-    public SchemaMappingTOs getRoleResourcesMapping(\n-            HttpServletResponse response,\n-            @PathVariable(\"roleName\") Long roleId)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        SyncopeRole role = null;\n-        if (roleId != null) {\n-            role = syncopeRoleDAO.find(roleId);\n-        }\n-\n-        if (role == null) {\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Role \" + roleId + \" not found.\");\n-            }\n-\n-            SyncopeClientCompositeErrorException compositeErrorException =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-\n-            SyncopeClientException ex = new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValuesMissing);\n-\n-            ex.addElement(\"resource\");\n-\n-            compositeErrorException.addException(ex);\n-\n-            throw compositeErrorException;\n-        }\n-\n-        SchemaMappingTOs roleMappings = new SchemaMappingTOs();\n-\n-        Set<TargetResource> resources = role.getTargetResources();\n-\n-        SchemaMappingTOs resourceMappings = null;\n-\n-        for (TargetResource resource : resources) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Ask for the mappings of '\" + resource + \"'\");\n-            }\n-\n-            List<SchemaMapping> schemaMappings = resource.getMappings();\n-\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"The mappings of '\" + resource + \"' are '\"\n-                        + schemaMappings + \"'\");\n-            }\n-\n-            resourceMappings = binder.getSchemaMappingTOs(schemaMappings);\n-\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"The mappings TO of '\" + resource + \"' are '\"\n-                        + resourceMappings.getMappings() + \"'\");\n-            }\n-\n-            roleMappings.getMappings().addAll(resourceMappings.getMappings());\n-        }\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Mappings found: \" + roleMappings.getMappings());\n-        }\n-\n-        return roleMappings;\n-    }\n }"},{"sha":"a2811172bc094c26f0ac8b24883bfd141aaddcb3","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -50,15 +50,15 @@ public RoleTO create(HttpServletRequest request,\n             @RequestBody RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"create called with parameters \" + roleTO);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"create called with parameters \" + roleTO);\n         }\n \n         SyncopeRole role = null;\n         try {\n             role = roleDataBinder.create(roleTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n-            log.error(\"Could not create for \" + roleTO, e);\n+            LOG.error(\"Could not create for \" + roleTO, e);\n \n             throw e;\n         }\n@@ -77,7 +77,7 @@ public void delete(HttpServletResponse response,\n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n \n         if (role == null) {\n-            log.error(\"Could not find role '\" + roleId + \"'\");\n+            LOG.error(\"Could not find role '\" + roleId + \"'\");\n \n             throw new NotFoundException(String.valueOf(roleId));\n         } else {\n@@ -109,7 +109,7 @@ public RoleTO parent(HttpServletResponse response,\n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n \n         if (role == null) {\n-            log.error(\"Could not find role '\" + roleId + \"'\");\n+            LOG.error(\"Could not find role '\" + roleId + \"'\");\n \n             throw new NotFoundException(String.valueOf(roleId));\n         }\n@@ -144,7 +144,7 @@ public RoleTO read(HttpServletResponse response,\n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n \n         if (role == null) {\n-            log.error(\"Could not find role '\" + roleId + \"'\");\n+            LOG.error(\"Could not find role '\" + roleId + \"'\");\n \n             throw new NotFoundException(String.valueOf(roleId));\n         }\n@@ -157,13 +157,13 @@ public RoleTO read(HttpServletResponse response,\n     public RoleTO update(HttpServletResponse response,\n             @RequestBody RoleMod roleMod) throws NotFoundException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"update called with parameter \" + roleMod);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"update called with parameter \" + roleMod);\n         }\n \n         SyncopeRole role = syncopeRoleDAO.find(roleMod.getId());\n         if (role == null) {\n-            log.error(\"Could not find user '\" + roleMod.getId() + \"'\");\n+            LOG.error(\"Could not find user '\" + roleMod.getId() + \"'\");\n \n             throw new NotFoundException(String.valueOf(roleMod.getId()));\n         }"},{"sha":"cc1538e6eecc3d8ba29855d71ae10d7cdede0dd5","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -67,7 +67,7 @@ public void delete(HttpServletResponse response,\n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n-            log.error(\"Could not find schema '\" + schemaName + \"'\");\n+            LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n \n             throw new NotFoundException(schemaName);\n         } else {\n@@ -101,7 +101,7 @@ public SchemaTO read(HttpServletResponse response,\n         Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n-            log.error(\"Could not find schema '\" + schemaName + \"'\");\n+            LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n \n             throw new NotFoundException(schemaName);\n         }\n@@ -122,12 +122,12 @@ public SchemaTO update(HttpServletResponse response,\n                     reference,\n                     getAttributableUtil(kind).getDerivedSchemaClass());\n             if (schema == null) {\n-                log.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n+                LOG.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n \n                 throw new NotFoundException(schemaTO.getName());\n             }\n         } catch (SyncopeClientCompositeErrorException e) {\n-            log.error(\"Could not update for \" + schemaTO, e);\n+            LOG.error(\"Could not update for \" + schemaTO, e);\n \n             throw e;\n         }"},{"sha":"cf6d59e26b89b51117c2e0ff40f803c9b55fb4b1","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -107,7 +107,7 @@ public SyncopeUser doExecuteAction(String actionName, Long userId,\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n         if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n+            LOG.error(\"Could not find user '\" + userId + \"'\");\n             throw new NotFoundException(String.valueOf(userId));\n         }\n \n@@ -204,7 +204,7 @@ public UserTO read(@PathVariable(\"userId\") Long userId)\n         SyncopeUser user = syncopeUserDAO.find(userId);\n \n         if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n+            LOG.error(\"Could not find user '\" + userId + \"'\");\n \n             throw new NotFoundException(String.valueOf(userId));\n         }\n@@ -219,7 +219,7 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n         if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n+            LOG.error(\"Could not find user '\" + userId + \"'\");\n             throw new NotFoundException(String.valueOf(userId));\n         }\n \n@@ -242,12 +242,12 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n     public UserTOs search(@RequestBody NodeSearchCondition searchCondition)\n             throws InvalidSearchConditionException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"search called with condition \" + searchCondition);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"search called with condition \" + searchCondition);\n         }\n \n         if (!searchCondition.checkValidity()) {\n-            log.error(\"Invalid search condition: \" + searchCondition);\n+            LOG.error(\"Invalid search condition: \" + searchCondition);\n \n             throw new InvalidSearchConditionException();\n         }\n@@ -269,7 +269,7 @@ public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n         if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n+            LOG.error(\"Could not find user '\" + userId + \"'\");\n             throw new NotFoundException(String.valueOf(userId));\n         }\n \n@@ -321,8 +321,8 @@ public UserTO create(HttpServletResponse response,\n             throws SyncopeClientCompositeErrorException,\n             WorkflowException, PropagationException, NotFoundException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"create called with parameters \" + userTO + \"\\n\"\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"create called with parameters \" + userTO + \"\\n\"\n                     + syncRoles + \"\\n\" + syncResources);\n         }\n \n@@ -336,7 +336,7 @@ public UserTO create(HttpServletResponse response,\n             workflowId = userWorkflow.initialize(Constants.USER_WORKFLOW, 0,\n                     Collections.singletonMap(Constants.USER_TO, userTO));\n         } catch (WorkflowInitException e) {\n-            log.error(\"During workflow initialization: \" + e);\n+            LOG.error(\"During workflow initialization: \" + e);\n             wie = e;\n \n             // Removing dirty workflow entry\n@@ -390,16 +390,16 @@ public UserTO create(HttpServletResponse response,\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);\n \n-        if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n-            log.debug(\"About to propagate synchronously onto resources \"\n+        if (LOG.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate synchronously onto resources \"\n                     + syncResourceNames);\n         }\n \n         Set<String> propagatedResources =\n                 propagationManager.create(user, syncResourceNames);\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Propagated onto resources \" + propagatedResources);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Propagated onto resources \" + propagatedResources);\n         }\n \n         // User is created locally and propagated, let's advance on the workflow\n@@ -429,8 +429,8 @@ public UserTO update(@RequestBody UserMod userMod,\n             required = false) Set<String> syncResources)\n             throws NotFoundException, PropagationException, WorkflowException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"update called with parameter \" + userMod);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"update called with parameter \" + userMod);\n         }\n \n         // First of all, let's check if update is allowed\n@@ -449,16 +449,16 @@ public UserTO update(@RequestBody UserMod userMod,\n         // Now that user is update locally, let's propagate\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);\n-        if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n-            log.debug(\"About to propagate synchronously onto resources \"\n+        if (LOG.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate synchronously onto resources \"\n                     + syncResourceNames);\n         }\n \n         Set<String> propagatedResources =\n                 propagationManager.update(user,\n                 resourceOperations, syncResourceNames);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Propagated onto resources \" + propagatedResources);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Propagated onto resources \" + propagatedResources);\n         }\n \n         return userDataBinder.getUserTO(user, userWorkflow);\n@@ -472,7 +472,7 @@ public void delete(@PathVariable(\"userId\") Long userId)\n         SyncopeUser user = syncopeUserDAO.find(userId);\n \n         if (user == null) {\n-            log.error(\"Could not find user '\" + userId + \"'\");\n+            LOG.error(\"Could not find user '\" + userId + \"'\");\n \n             throw new NotFoundException(String.valueOf(userId));\n         } else {"},{"sha":"46ddcba60f4b8062bdc56456f0c41701e711ee12","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -52,6 +52,7 @@\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n import org.syncope.core.persistence.validation.ValidationException;\n+import org.syncope.types.SchemaType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Transactional(rollbackFor = {Throwable.class})\n@@ -189,7 +190,7 @@ private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n             if (attributable.getAttribute(schema.getName()) == null\n                     && !schema.isVirtual() && !schema.isReadonly()\n                     && (schema.isMandatory()\n-                    || schemaDAO.isMandatoryOnResource(schema, resources))) {\n+                    || schemaDAO.isMandatoryOnResources(schema, resources))) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getName()\n                         + \" not provided with values\");\n@@ -227,25 +228,27 @@ protected ResourceOperations fill(\n                     attributeToBeRemoved, attributableUtil.getSchemaClass());\n \n             if (schema != null) {\n-                for (SchemaMapping mapping : schema.getMappings()) {\n+                for (SchemaMapping mapping : resourceDAO.getMappings(\n+                        schema.getName(),\n+                        SchemaType.byClass(attributableUtil.getSchemaClass()))) {\n                     if (mapping.getResource() != null) {\n                         resourceOperations.add(Type.UPDATE,\n                                 mapping.getResource());\n                     }\n                 }\n+            }\n \n-                attribute = attributable.getAttribute(schema.getName());\n-                if (attribute == null) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"No attribute found for schema \"\n-                                + schema.getName());\n-                    }\n-                } else {\n-                    attributable.removeAttribute(attribute);\n-\n-                    attributeDAO.delete(attribute.getId(),\n-                            attributableUtil.getAttributeClass());\n+            attribute = attributable.getAttribute(schema.getName());\n+            if (attribute == null) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"No attribute found for schema \"\n+                            + schema.getName());\n                 }\n+            } else {\n+                attributable.removeAttribute(attribute);\n+\n+                attributeDAO.delete(attribute.getId(),\n+                        attributableUtil.getAttributeClass());\n             }\n         }\n \n@@ -262,7 +265,9 @@ protected ResourceOperations fill(\n                     attributableUtil.getSchemaClass());\n \n             if (schema != null) {\n-                for (SchemaMapping mapping : schema.getMappings()) {\n+                for (SchemaMapping mapping : resourceDAO.getMappings(\n+                        schema.getName(),\n+                        SchemaType.byClass(attributableUtil.getSchemaClass()))) {\n                     if (mapping.getResource() != null) {\n                         resourceOperations.add(Type.UPDATE,\n                                 mapping.getResource());\n@@ -282,10 +287,8 @@ protected ResourceOperations fill(\n                 valuesToBeRemoved = new HashSet<Long>();\n                 for (String valueToBeRemoved :\n                         attributeMod.getValuesToBeRemoved()) {\n-\n                     for (AbstractAttributeValue mav :\n                             attribute.getAttributeValues()) {\n-\n                         if (valueToBeRemoved.equals(mav.getValueAsString())) {\n                             valuesToBeRemoved.add(mav.getId());\n                         }\n@@ -451,8 +454,8 @@ protected AbstractAttributable fill(AbstractAttributable attributable,\n         AbstractSchema schema = null;\n         AbstractAttribute attribute = null;\n         AbstractAttributeValue attributeValue = null;\n-        for (AttributeTO attributeTO : attributableTO.getAttributes()) {\n-            // Only consider attributeTO with values\n+        for (AttributeTO attributeTO : attributableTO.getAttributes()) // Only consider attributeTO with values\n+        {\n             if (attributeTO.getValues() != null\n                     && !attributeTO.getValues().isEmpty()) {\n \n@@ -570,10 +573,8 @@ public void checkUniqueness(AbstractAttributable attributable)\n                 SyncopeClientExceptionType.InvalidUniques);\n \n         for (AbstractAttribute attribute : attributable.getAttributes()) {\n-\n             for (AbstractAttributeValue attributeValue :\n                     attribute.getAttributeValues()) {\n-\n                 if (attribute.getSchema().isUniquevalue()\n                         && attributeValueDAO.nonUniqueAttributeValue(\n                         attributeValue)) {"},{"sha":"73476a932ba34c14a5133eea21e7f69f63f6f915","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -28,6 +28,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.ConnectorInstanceTO;\n import org.syncope.client.to.PropertyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -37,9 +38,13 @@\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n+@Transactional(rollbackFor = {Throwable.class})\n public class ConnectorInstanceDataBinder {\n \n-    private static final Logger log = LoggerFactory.getLogger(\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n             ConnectorInstanceDataBinder.class);\n     private static final String[] ignoreProperties = {\n         \"id\", \"resources\", \"xmlConfiguration\", \"configuration\"};\n@@ -140,15 +145,15 @@ public ConnectorInstance updateConnectorInstance(\n         }\n \n         try {\n-            if (log.isDebugEnabled()) {\n-                log.debug(URLEncoder.encode(\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(URLEncoder.encode(\n                         serializeToXML(connectorTO.getConfiguration()),\n                         \"UTF-8\"));\n             }\n             // Throw composite exception if there is at least one element set\n             // in the composing exceptions\n         } catch (UnsupportedEncodingException ex) {\n-            log.error(\"Unexpected exception\", ex);\n+            LOG.error(\"Unexpected exception\", ex);\n         }\n \n         // Throw composite exception if there is at least one element set\n@@ -195,7 +200,7 @@ public static String serializeToXML(Object obj) {\n \n             return URLEncoder.encode(res, \"UTF-8\");\n         } catch (Throwable t) {\n-            log.error(\"Exception during connector serialization\", t);\n+            LOG.error(\"Exception during connector serialization\", t);\n             return null;\n         }\n     }\n@@ -211,7 +216,7 @@ public static Object buildFromXML(String xml) {\n \n             return object;\n         } catch (Throwable t) {\n-            log.error(\"Exception during connector deserialization\", t);\n+            LOG.error(\"Exception during connector deserialization\", t);\n             return null;\n         }\n     }"},{"sha":"344a8f3b3c00331cecfc23ddd5195803bbec9883","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -19,29 +19,28 @@\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n \n @Component\n+@Transactional(rollbackFor = {Throwable.class})\n public class DerivedSchemaDataBinder {\n \n-    private static final Logger log = LoggerFactory.getLogger(\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n             DerivedSchemaDataBinder.class);\n     private static final String[] ignoreDerivedSchemaProperties = {\n         \"schemas\", \"derivedAttributes\"};\n+    @Autowired\n     private SchemaDAO schemaDAO;\n-    private DerivedSchemaDAO derivedSchemaDAO;\n-\n     @Autowired\n-    public DerivedSchemaDataBinder(SchemaDAO schemaDAO,\n-            DerivedSchemaDAO derivedSchemaDAO) {\n-\n-        this.schemaDAO = schemaDAO;\n-        this.derivedSchemaDAO = derivedSchemaDAO;\n-    }\n+    private DerivedSchemaDAO derivedSchemaDAO;\n \n     private <T extends AbstractDerivedSchema, K extends AbstractSchema> T populateDerivedSchema(\n             T derivedSchema,\n@@ -58,7 +57,7 @@ private <T extends AbstractDerivedSchema, K extends AbstractSchema> T populateDe\n             if (abstractSchema != null) {\n                 derivedSchema.addSchema(abstractSchema);\n             } else {\n-                log.error(\"Unmatched schema name: \" + schema);\n+                LOG.error(\"Unmatched schema name: \" + schema);\n             }\n         }\n "},{"sha":"59c698cc82c921631322acd25e6485d2d1cd1069","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -30,13 +30,10 @@\n import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n-import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -48,11 +45,7 @@ public class ResourceDataBinder {\n     private static final String[] ignoreMappingProperties = {\n         \"id\", \"resource\"};\n     @Autowired\n-    private SchemaDAO schemaDAO;\n-    @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n-    @Autowired\n-    private ResourceDAO resourceDAO;\n \n     public TargetResource getResource(ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException {\n@@ -111,29 +104,6 @@ public TargetResource getResource(TargetResource resource,\n         resource.setMappings(\n                 getSchemaMappings(resource, resourceTO.getMappings()));\n \n-        resource = resourceDAO.save(resource);\n-\n-        for (SchemaMapping mapping : resource.getMappings()) {\n-            try {\n-                mapping.getSchemaType().getSchemaClass().asSubclass(\n-                        AbstractSchema.class);\n-\n-                // search for the attribute schema\n-                AbstractSchema schema = schemaDAO.find(\n-                        mapping.getSchemaName(),\n-                        mapping.getSchemaType().getSchemaClass());\n-                if (schema != null) {\n-                    schema.addMapping(mapping);\n-                }\n-            } catch (ClassCastException e) {\n-                // no real schema provided\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Wrong schema type \"\n-                            + mapping.getSchemaType().getClassName());\n-                }\n-            }\n-        }\n-\n         return resource;\n     }\n "},{"sha":"25cce175ab785e161ba132974033b852f2908dfc","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -21,6 +21,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n@@ -33,22 +34,20 @@\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n+@Transactional(rollbackFor = {Throwable.class})\n public class SchemaDataBinder {\n \n-    private static final Logger log = LoggerFactory.getLogger(\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n             SchemaDataBinder.class);\n     private static final String[] ignoreSchemaProperties = {\n         \"derivedSchemas\", \"attributes\"};\n+    @Autowired\n     private SchemaDAO schemaDAO;\n-    private DerivedSchemaDAO derivedSchemaDAO;\n-\n     @Autowired\n-    public SchemaDataBinder(SchemaDAO schemaDAO,\n-            DerivedSchemaDAO derivedSchemaDAO) {\n-\n-        this.schemaDAO = schemaDAO;\n-        this.derivedSchemaDAO = derivedSchemaDAO;\n-    }\n+    private DerivedSchemaDAO derivedSchemaDAO;\n \n     private <T extends AbstractSchema, K extends AbstractDerivedSchema> T populateSchema(\n             T schema,\n@@ -65,7 +64,7 @@ private <T extends AbstractSchema, K extends AbstractDerivedSchema> T populateSc\n             if (abstractDerivedSchema != null) {\n                 schema.addDerivedSchema(abstractDerivedSchema);\n             } else {\n-                log.error(\"Unmatched derived schema name: \" + derivedSchema);\n+                LOG.error(\"Unmatched derived schema name: \" + derivedSchema);\n             }\n         }\n "},{"sha":"0a090777ca73a6225cc6d1666d24079d661176ea","filename":"core/src/main/java/org/syncope/core/workflow/BaseSendEmail.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -43,8 +43,8 @@ protected String getEmailBody(String urlPrefix, String template,\n             String urlSuffix, String fallback) {\n \n         String templateURL = urlPrefix + template + urlSuffix;\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Email template URL: \" + templateURL);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Email template URL: \" + templateURL);\n         }\n \n         StringBuilder templateContent = new StringBuilder();\n@@ -59,7 +59,7 @@ protected String getEmailBody(String urlPrefix, String template,\n \n             reader.close();\n         } catch (Exception e) {\n-            log.error(\"While reading mail template \" + template, e);\n+            LOG.error(\"While reading mail template \" + template, e);\n         }\n \n         return templateContent.length() == 0\n@@ -97,7 +97,7 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n             email = getHtmlEmail(args, syncopeUser);\n             email.send();\n         } catch (EmailException e) {\n-            log.error(\"Could not send e-mail \" + email, e);\n+            LOG.error(\"Could not send e-mail \" + email, e);\n         }\n     }\n }"},{"sha":"8364ed3e38ede54ba849833f5a161e0f9ccd0061","filename":"core/src/main/java/org/syncope/core/workflow/JPAPropertySet.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FJPAPropertySet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FJPAPropertySet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FJPAPropertySet.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -39,7 +39,10 @@\n  */\n public class JPAPropertySet extends AbstractPropertySet {\n \n-    protected static final Logger log =\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n             LoggerFactory.getLogger(JPAPropertySet.class);\n     private OSWorkflowPropertyDAO osWorkflowPropertyDAO;\n     private long workflowEntryId;\n@@ -129,7 +132,7 @@ protected void setImpl(int type, String key, Object value)\n                     break;\n             }\n         } catch (Throwable t) {\n-            log.error(\"While setting property value\", t);\n+            LOG.error(\"While setting property value\", t);\n             throw new PropertyException(t.getMessage());\n         }\n "},{"sha":"7d07cd92dad8d6da3367f503449da7926d0da01e","filename":"core/src/main/java/org/syncope/core/workflow/OSWorkflowComponent.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -22,7 +22,10 @@\n \n public abstract class OSWorkflowComponent {\n \n-    protected static final Logger log =\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n             LoggerFactory.getLogger(OSWorkflowComponent.class);\n     protected static final ConfigurableApplicationContext context =\n             ApplicationContextManager.getApplicationContext();"},{"sha":"f388e9b6aa35c9fcff25a8bd8087c1a4efc1c58e","filename":"core/src/test/java/org/syncope/core/test/persistence/ConnectorInstanceDAOTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -25,6 +25,7 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n+import org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector;\n \n @Transactional\n public class ConnectorInstanceDAOTest extends AbstractTest {\n@@ -38,9 +39,8 @@ public final void findById() {\n \n         assertNotNull(\"findById did not work\", connectorInstance);\n \n-        assertEquals(\n-                \"invalid connector name\",\n-                \"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\",\n+        assertEquals(\"invalid connector name\",\n+                WebServiceConnector.class.getName(),\n                 connectorInstance.getConnectorName());\n \n         assertEquals(\"invalid bundle name\","},{"sha":"90a4735e4cb51fc7c13f05b469780925bb9d8953","filename":"core/src/test/java/org/syncope/core/test/persistence/EntitlementDAOTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -31,14 +31,14 @@ public class EntitlementDAOTest extends AbstractTest {\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n-    //@Test\n+    @Test\n     public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n         assertEquals(\"did not get expected number of entitlements \",\n                 2, list.size());\n     }\n \n-    //@Test\n+    @Test\n     public final void findByName() {\n         Entitlement entitlement = entitlementDAO.find(\"base\");\n         assertNotNull(\"did not find expected entitlement\",\n@@ -57,7 +57,7 @@ public final void save() {\n         assertEquals(entitlement, actual);\n     }\n \n-    //@Test\n+    @Test\n     public final void delete() {\n         Entitlement entitlement = entitlementDAO.find(\"base\");\n         assertNotNull(\"did not find expected entitlement\","},{"sha":"c4a26be9c99ee55b7a9acd280118145c81f2dc09","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -108,9 +108,6 @@ public final void checkForMandatoryOnResource() {\n \n         schema = schemaDAO.find(\"userId\", UserSchema.class);\n \n-        // schema mandatory and field onto the resource not mandatory\n-        assertTrue(schemaDAO.isMandatoryOnResource(schema, resource));\n-\n         // multi choice\n         TargetResource resource1 =\n                 resourceDAO.find(\"ws-target-resource-list-mappings-2\");\n@@ -121,6 +118,6 @@ public final void checkForMandatoryOnResource() {\n         resources.add(resource1);\n         resources.add(resource2);\n \n-        assertTrue(schemaDAO.isMandatoryOnResource(schema, resources));\n+        assertTrue(schemaDAO.isMandatoryOnResources(schema, resources));\n     }\n }"},{"sha":"d8927d524b0543bf82b4c1b3c9e2b55f1fc0d568","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaMappingDAOTest.java","status":"removed","additions":0,"deletions":156,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaMappingDAOTest.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -1,156 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.test.persistence;\n-\n-import java.util.List;\n-import org.junit.Before;\n-import static org.junit.Assert.*;\n-\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.beans.membership.MembershipSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n-import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.types.SchemaType;\n-\n-@Transactional\n-public class SchemaMappingDAOTest extends AbstractTest {\n-\n-    @Autowired\n-    private ResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-\n-    @Before\n-    public final void checkBeforeForStoredData() {\n-        List<SchemaMapping> mappings = schemaDAO.findAllMappings();\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found \" + mappings);\n-        }\n-\n-        assertNotNull(mappings);\n-        assertFalse(mappings.isEmpty());\n-\n-        for (SchemaMapping mapping : mappings) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Check for schema mapping \" + mapping);\n-            }\n-\n-            String name = mapping.getSchemaName();\n-            assertNotNull(name);\n-\n-            SchemaType type = mapping.getSchemaType();\n-            assertNotNull(type);\n-\n-            TargetResource resource = mapping.getResource();\n-            assertNotNull(resource);\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\n-                        \"\\nRelated schema name: \" + name +\n-                        \"\\nRelated schema type: \" + type.toString() +\n-                        \"\\nRelated resource name: \" + resource.getName() +\n-                        \"\\nBrothers in resource : \" + resource.getMappings());\n-            }\n-\n-            AbstractSchema schema = null;\n-\n-            schema = schemaDAO.find(name, UserSchema.class);\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Brothers in UserSchema: \" +\n-                        (schema != null ? ((UserSchema)schema).getMappings() : \"\"));\n-            }\n-\n-            schema = schemaDAO.find(name, RoleSchema.class);\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Brothers in RoleSchema: \" +\n-                        (schema != null ? ((RoleSchema)schema).getMappings() : \"\"));\n-            }\n-\n-            schema = schemaDAO.find(name, MembershipSchema.class);\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Brothers in MembershipSchema: \" +\n-                        (schema != null ? ((MembershipSchema)schema).getMappings() : \"\"));\n-            }\n-        }\n-    }\n-\n-    @Test\n-    public final void findById() {\n-        SchemaMapping schema = schemaDAO.findMapping(100L);\n-\n-        assertNotNull(\"findById did not work\", schema);\n-\n-        assertEquals(\"email\", schema.getField());\n-\n-        assertEquals(\"email\", schema.getSchemaName());\n-\n-        assertEquals(\"ws-target-resource-1\", schema.getResource().getName());\n-\n-        assertFalse(schema.isNullable());\n-\n-        assertTrue(schema.isAccountid());\n-\n-        assertFalse(schema.isPassword());\n-    }\n-\n-    @Test\n-    public final void save() throws ClassNotFoundException {\n-        SchemaMapping schema = new SchemaMapping();\n-\n-        schema.setField(\"name\");\n-        schema.setSchemaName(\"firstname\");\n-        schema.setSchemaType(SchemaType.UserSchema);\n-        schema.setResource(resourceDAO.find(\"ws-target-resource-1\"));\n-\n-        SchemaMapping actual = schemaDAO.saveMapping(schema);\n-\n-        assertNotNull(actual);\n-\n-        assertTrue(actual.isNullable());\n-\n-        assertFalse(actual.isAccountid());\n-\n-        assertFalse(actual.isPassword());\n-\n-        assertEquals(\"firstname\", actual.getSchemaName());\n-\n-        assertEquals(\"name\", actual.getField());\n-    }\n-\n-    @Test\n-    public final void delete() {\n-        SchemaMapping mapping = schemaDAO.findMapping(100L);\n-\n-        assertNotNull(\"find to delete did not work\", mapping);\n-\n-        schemaDAO.removeMapping(mapping.getId());\n-\n-        SchemaMapping actual = schemaDAO.findMapping(100L);\n-\n-        assertNull(\"delete did not work\", actual);\n-    }\n-}"},{"sha":"82696e362a79ec7c8eb1d15ff4cb091ec888708f","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":6,"deletions":24,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -14,9 +14,7 @@\n  */\n package org.syncope.core.test.persistence.relationships;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -61,7 +59,9 @@ public class ResourceTest extends AbstractTest {\n     @Test\n     public final void issue42() {\n         UserSchema userId = schemaDAO.find(\"userId\", UserSchema.class);\n-        int beforeUserIdMappings = userId.getMappings().size();\n+        int beforeUserIdMappings = resourceDAO.getMappings(\n+                userId.getName(),\n+                SchemaType.UserSchema).size();\n \n         SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setSchemaName(\"userId\");\n@@ -90,7 +90,9 @@ public final void issue42() {\n         assertEquals(resource, actual);\n \n         userId = schemaDAO.find(\"userId\", UserSchema.class);\n-        int afterUserIdMappings = userId.getMappings().size();\n+        int afterUserIdMappings = resourceDAO.getMappings(\n+                userId.getName(),\n+                SchemaType.UserSchema).size();\n \n         assertEquals(beforeUserIdMappings, afterUserIdMappings - 1);\n     }\n@@ -168,24 +170,10 @@ public final void save() throws ClassNotFoundException {\n \n     @Test\n     public final void delete() {\n-\n         TargetResource resource = resourceDAO.find(\"ws-target-resource-2\");\n \n         assertNotNull(\"find to delete did not work\", resource);\n \n-        // -------------------------------------\n-        // Get originally associated mappings\n-        // -------------------------------------\n-        List<SchemaMapping> mappings = resource.getMappings();\n-\n-        assertNotNull(mappings);\n-\n-        Set<Long> mappingIds = new HashSet<Long>();\n-        for (SchemaMapping mapping : mappings) {\n-            mappingIds.add(mapping.getId());\n-        }\n-        // -------------------------------------\n-\n         // -------------------------------------\n         // Get originally associated connector\n         // -------------------------------------\n@@ -219,12 +207,6 @@ public final void delete() {\n         TargetResource actual = resourceDAO.find(\"ws-target-resource-2\");\n         assertNull(\"delete did not work\", actual);\n \n-        // mappings must be removed\n-        for (Long id : mappingIds) {\n-            assertNull(\"mapping delete did not work\",\n-                    schemaDAO.findMapping(id));\n-        }\n-\n         // resource must be not referenced any more from users\n         SyncopeUser actualUser = null;\n         Collection<TargetResource> resources = null;"},{"sha":"3b4e5aaa84ea5e2fee554c87c58a262261dfbf45","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaMappingTest.java","status":"removed","additions":0,"deletions":270,"changes":270,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaMappingTest.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -1,270 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.test.persistence.relationships;\n-\n-import static org.junit.Assert.*;\n-\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.TargetResource;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n-import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.validation.MultiUniqueValueException;\n-import org.syncope.core.test.persistence.AbstractTest;\n-import org.syncope.types.SchemaType;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-@Transactional\n-public class SchemaMappingTest extends AbstractTest {\n-\n-    @Autowired\n-    private SchemaDAO schemaDAO;\n-    @Autowired\n-    private ResourceDAO resourceDAO;\n-\n-    @Test\n-    public final void create() throws\n-            ClassNotFoundException, MultiUniqueValueException {\n-\n-        SchemaMapping mapping = new SchemaMapping();\n-        mapping.setSchemaType(SchemaType.UserSchema);\n-        mapping.setSchemaName(\"firstname\");\n-        mapping.setField(\"name\");\n-\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-delete\");\n-        assertNotNull(resource);\n-\n-        // update resource\n-        resource.addMapping(mapping);\n-        TargetResource actualResource = resourceDAO.save(resource);\n-\n-        assertNotNull(actualResource);\n-\n-        SchemaMapping actualMapping =\n-                actualResource.getMappings().iterator().next();\n-\n-        assertNotNull(actualMapping);\n-        assertTrue(actualMapping.isNullable());\n-        assertFalse(actualMapping.isAccountid());\n-        assertFalse(actualMapping.isPassword());\n-        assertEquals(\"firstname\", actualMapping.getSchemaName());\n-        assertEquals(\"name\", actualMapping.getField());\n-\n-        // close the transaction\n-        schemaDAO.flush();\n-\n-        actualResource = resourceDAO.find(\"ws-target-resource-delete\");\n-\n-        assertNotNull(actualResource.getMappings());\n-        assertFalse(actualResource.getMappings().isEmpty());\n-        assertTrue(actualResource.getMappings().contains(actualMapping));\n-    }\n-\n-    @Test\n-    public final void delete() throws MultiUniqueValueException {\n-        SchemaMapping mapping = schemaDAO.findMapping(100L);\n-\n-        assertNotNull(\"find did not work\", mapping);\n-\n-        TargetResource resource = mapping.getResource();\n-\n-        assertNotNull(resource);\n-        assertNotNull(resource.getMappings());\n-        assertFalse(resource.getMappings().isEmpty());\n-\n-        int resourceMappings = resource.getMappings().size();\n-\n-        assertTrue(resourceMappings > 0);\n-\n-        UserSchema schema =\n-                schemaDAO.find(mapping.getSchemaName(), UserSchema.class);\n-\n-        assertNotNull(schema);\n-        assertNotNull(schema.getMappings());\n-        assertFalse(schema.getMappings().isEmpty());\n-\n-        int userMappings = schema.getMappings().size();\n-\n-        assertTrue(userMappings > 0);\n-\n-        schemaDAO.removeMapping(mapping.getId());\n-\n-        SchemaMapping actual = schemaDAO.findMapping(100L);\n-\n-        assertNull(\"delete did not work\", actual);\n-\n-        // close the transaction\n-        schemaDAO.flush();\n-\n-        UserSchema actualUser =\n-                schemaDAO.find(schema.getName(), UserSchema.class);\n-\n-        assertNotNull(actualUser);\n-        assertNotNull(actualUser.getMappings());\n-        assertTrue(userMappings > actualUser.getMappings().size());\n-        assertFalse(actualUser.getMappings().contains(mapping));\n-\n-        TargetResource actualResource =\n-                resourceDAO.find(resource.getName());\n-\n-        assertNotNull(actualResource);\n-        assertNotNull(actualResource.getMappings());\n-        assertTrue(resourceMappings > actualResource.getMappings().size());\n-        assertFalse(actualResource.getMappings().contains(mapping));\n-    }\n-\n-    @Test\n-    public void update() throws MultiUniqueValueException {\n-        SchemaMapping mapping = schemaDAO.findMapping(100L);\n-\n-        assertNotNull(mapping);\n-        assertEquals(\"email\", mapping.getSchemaName());\n-        assertEquals(mapping.getSchemaType(), SchemaType.UserSchema);\n-        assertTrue(mapping.isAccountid());\n-        assertFalse(mapping.isPassword());\n-        assertEquals(\"ws-target-resource-1\", mapping.getResource().getName());\n-\n-        UserSchema schema =\n-                schemaDAO.find(mapping.getSchemaName(), UserSchema.class);\n-\n-        assertNotNull(schema);\n-        assertTrue(schema.getMappings().contains(mapping));\n-\n-        int schemaMappings = schema.getMappings().size();\n-\n-        TargetResource resource =\n-                resourceDAO.find(mapping.getResource().getName());\n-\n-        assertNotNull(resource);\n-        assertTrue(resource.getMappings().contains(mapping));\n-\n-        int resourceMappings = resource.getMappings().size();\n-\n-        // Schema must be forcely synchronized\n-        schema.removeMapping(mapping);\n-        schemaDAO.save(schema);\n-\n-        // Resource must be forcely synchronized\n-        resource.removeMapping(mapping);\n-        resourceDAO.save(resource);\n-\n-        resource = resourceDAO.find(\"ws-target-resource-2\");\n-\n-        mapping.setAccountid(false);\n-        mapping.setPassword(true);\n-        mapping.setSchemaName(\"Password\");\n-        mapping.setSchemaType(SchemaType.Password);\n-        mapping.setResource(resource);\n-\n-        SchemaMapping actual = schemaDAO.saveMapping(mapping);\n-        schemaDAO.flush();\n-\n-        assertNotNull(actual);\n-        assertEquals(\"Password\", actual.getSchemaName());\n-        assertEquals(actual.getSchemaType(), SchemaType.Password);\n-        assertFalse(actual.isAccountid());\n-        assertTrue(actual.isPassword());\n-        assertEquals(\"ws-target-resource-2\", actual.getResource().getName());\n-\n-        // Check for synchronization\n-\n-        schema = schemaDAO.find(\"email\", UserSchema.class);\n-        assertNotNull(schema);\n-        assertTrue(schemaMappings > schema.getMappings().size());\n-\n-        resource = resourceDAO.find(\"ws-target-resource-1\");\n-        assertNotNull(resource);\n-        assertTrue(resourceMappings > resource.getMappings().size());\n-    }\n-\n-    @Test\n-    public void removeResourceAndCheckForMapping() {\n-        TargetResource resource = resourceDAO.find(\"ws-target-resource-2\");\n-\n-        assertNotNull(resource);\n-\n-        List<SchemaMapping> mappings = resource.getMappings();\n-\n-        assertNotNull(mappings);\n-        assertFalse(mappings.isEmpty());\n-\n-        Set<Long> mappingIds = new HashSet<Long>();\n-        for (SchemaMapping mapping : mappings) {\n-            mappingIds.add(mapping.getId());\n-        }\n-\n-        resourceDAO.delete(\"ws-target-resource-2\");\n-\n-        resourceDAO.flush();\n-\n-        resource = resourceDAO.find(\"ws-target-resource-2\");\n-\n-        assertNull(resource);\n-\n-        for (Long id : mappingIds) {\n-            assertNull(schemaDAO.findMapping(id));\n-        }\n-    }\n-\n-    @Test\n-    public void removeSchemaAndCheckForMapping() {\n-        UserSchema schema = schemaDAO.find(\"email\", UserSchema.class);\n-\n-        assertNotNull(schema);\n-\n-        List<SchemaMapping> mappings = schema.getMappings();\n-\n-        assertNotNull(mappings);\n-        assertFalse(mappings.isEmpty());\n-\n-        Set<Long> mappingIds = new HashSet<Long>();\n-        for (SchemaMapping mapping : mappings) {\n-            mappingIds.add(mapping.getId());\n-        }\n-\n-        schemaDAO.delete(\"email\", UserSchema.class);\n-\n-        schemaDAO.flush();\n-\n-        schema = schemaDAO.find(\"email\", UserSchema.class);\n-\n-        assertNull(schema);\n-\n-        for (Long id : mappingIds) {\n-            assertNull(schemaDAO.findMapping(id));\n-        }\n-    }\n-\n-    @Test\n-    public void checkForAccountId() {\n-        schemaDAO.removeMapping(99L);\n-        schemaDAO.flush();\n-\n-        assertNull(schemaDAO.findMapping(99L));\n-    }\n-\n-    @Test\n-    public void checkForPassword() {\n-        schemaDAO.removeMapping(106L);\n-        schemaDAO.flush();\n-\n-        assertNull(schemaDAO.findMapping(106L));\n-    }\n-}"},{"sha":"c814315e63808210e0bb1beea65e7c94823d6496","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaTest.java","status":"modified","additions":15,"deletions":29,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -14,9 +14,7 @@\n  */\n package org.syncope.core.test.persistence.relationships;\n \n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import static org.junit.Assert.*;\n import org.junit.Test;\n \n@@ -28,24 +26,25 @@\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.test.persistence.AbstractTest;\n+import org.syncope.types.SchemaType;\n \n @Transactional\n public class SchemaTest extends AbstractTest {\n \n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n-\n     @Autowired\n     private SchemaDAO schemaDAO;\n-\n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n-\n     @Autowired\n     private AttributeDAO attributeDAO;\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n \n     @Test\n     public final void test1() {\n@@ -55,16 +54,10 @@ public final void test1() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        List<SchemaMapping> mappings = schema.getMappings();\n-\n-        assertNotNull(mappings);\n-\n-        Set<Long> mappingIds = new HashSet<Long>();\n-        for (SchemaMapping mapping : mappings) {\n-            mappingIds.add(mapping.getId());\n-        }\n-\n-        assertFalse(mappingIds.isEmpty());\n+        List<SchemaMapping> mappings = resourceDAO.getMappings(\n+                schema.getName(),\n+                SchemaType.UserSchema);\n+        assertFalse(mappings.isEmpty());\n \n         // delete user schema username\n         schemaDAO.delete(\"username\", UserSchema.class);\n@@ -77,10 +70,9 @@ public final void test1() {\n         assertNull(schema);\n \n         // check for mappings deletion\n-        for (Long mappingId : mappingIds) {\n-            SchemaMapping actualMapping = schemaDAO.findMapping(mappingId);\n-            assertNull(actualMapping);\n-        }\n+        mappings = resourceDAO.getMappings(\"username\",\n+                SchemaType.UserSchema);\n+        assertTrue(mappings.isEmpty());\n \n         assertNull(attributeDAO.find(100L, UserAttribute.class));\n         assertNull(attributeDAO.find(300L, UserAttribute.class));\n@@ -97,17 +89,11 @@ public void test2() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        List<SchemaMapping> mappings = schema.getMappings();\n-\n+        List<SchemaMapping> mappings = resourceDAO.getMappings(\n+                schema.getName(),\n+                SchemaType.UserSchema);\n         assertNotNull(mappings);\n \n-        Set<Long> mappingIds = new HashSet<Long>();\n-        for (SchemaMapping mapping : mappings) {\n-            mappingIds.add(mapping.getId());\n-        }\n-\n-        assertFalse(mappingIds.isEmpty());\n-\n         // delete user schema username\n         schemaDAO.delete(\"surname\", UserSchema.class);\n \n@@ -119,7 +105,7 @@ public void test2() {\n         assertNull(schema);\n \n         assertNull(schemaDAO.find(\"surname\", UserSchema.class));\n-        \n+\n         assertEquals(1, derivedSchemaDAO.find(\"cn\",\n                 UserDerivedSchema.class).getSchemas().size());\n     }"},{"sha":"77a7edcc08212591e843eaf80e62673af8d7fe4b","filename":"core/src/test/java/org/syncope/core/test/rest/AbstractTestITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -29,7 +29,10 @@\n     \"file:target/syncope/WEB-INF/syncope-core-rest-servlet.xml\"})\n public abstract class AbstractTestITCase {\n \n-    protected static final Logger log = LoggerFactory.getLogger(\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n             AbstractTestITCase.class);\n     protected static final String BASE_URL =\n             \"http://localhost:8080/syncope/rest/\";"},{"sha":"94efdd29dab40a34225cee6d7dcbf95e19ff96da","filename":"core/src/test/java/org/syncope/core/test/rest/ConnectorInstanceTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -96,7 +96,7 @@ public void create() {\n                     connectorTO, ConnectorInstanceTO.class);\n \n         } catch (HttpStatusCodeException e) {\n-            log.error(\"update failed\", e);\n+            LOG.error(\"update failed\", e);\n             t = e;\n         }\n \n@@ -113,7 +113,7 @@ public void create() {\n                     actual.getId().toString());\n \n         } catch (HttpStatusCodeException e) {\n-            log.error(\"delete failed\", e);\n+            LOG.error(\"delete failed\", e);\n             t = e;\n         }\n "},{"sha":"ce4079364c2cc4d219c10f7b17280387cc85cc71","filename":"core/src/test/java/org/syncope/core/test/rest/ResourceTestITCase.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -146,11 +146,9 @@ public void update() {\n     @Test\n     public void deleteWithException() {\n         try {\n-\n             restTemplate.delete(\n                     BASE_URL + \"resource/delete/{resourceName}.json\",\n                     \"resourcenotfound\");\n-\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -165,12 +163,10 @@ public void delete() {\n                 resourceName);\n \n         try {\n-\n             restTemplate.getForObject(\n                     BASE_URL + \"resource/read/{resourceName}.json\",\n                     ResourceTO.class,\n                     resourceName);\n-\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }"},{"sha":"a10c713f4e1bfd949e714ae1ff2daa633bb385a5","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaMappingTestITCase.java","status":"removed","additions":0,"deletions":135,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/938edd5c45830bf307176291bcc1f03ce4e406d8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java?ref=938edd5c45830bf307176291bcc1f03ce4e406d8","patch":"@@ -1,135 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.test.rest;\n-\n-import static org.junit.Assert.*;\n-\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.test.annotation.ExpectedException;\n-import org.springframework.web.client.HttpStatusCodeException;\n-import org.syncope.client.to.SchemaMappingTO;\n-import org.syncope.client.to.SchemaMappingTOs;\n-import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.types.SchemaType;\n-\n-public class SchemaMappingTestITCase extends AbstractTestITCase {\n-\n-    @Autowired\n-    SchemaDAO schemaDAO;\n-\n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public void createWithException() {\n-        final String resourceName = \"ws-target-resource-1\";\n-\n-        SchemaMappingTOs mappings = new SchemaMappingTOs();\n-\n-        SchemaMappingTO mapping = new SchemaMappingTO();\n-\n-        mappings.addMapping(mapping);\n-\n-        restTemplate.postForObject(\n-                BASE_URL + \"resource/{resourceName}/mappings/create.json\",\n-                mappings,\n-                SchemaMappingTOs.class,\n-                resourceName);\n-    }\n-\n-    @Test\n-    public void create() {\n-        final String resourceName = \"ws-target-resource-1\";\n-\n-        SchemaMappingTOs mappings = new SchemaMappingTOs();\n-\n-        SchemaMappingTO mapping = null;\n-\n-        for (int i = 0; i < 3; i++) {\n-            mapping = new SchemaMappingTO();\n-            mapping.setField(\"test\" + i);\n-            mapping.setSchemaName(\"username\");\n-            mapping.setSchemaType(SchemaType.UserSchema);\n-            mappings.addMapping(mapping);\n-        }\n-\n-        SchemaMappingTOs actuals =\n-                (SchemaMappingTOs) restTemplate.postForObject(\n-                BASE_URL + \"resource/{resourceName}/mappings/create.json\",\n-                mappings, SchemaMappingTOs.class, resourceName);\n-\n-        assertNotNull(actuals);\n-\n-        assertTrue(actuals.getMappings().size() == 3);\n-\n-        // check the non existence\n-\n-        actuals = restTemplate.getForObject(\n-                BASE_URL + \"resource/{resourceName}/mappings/list.json\",\n-                SchemaMappingTOs.class,\n-                resourceName);\n-\n-        assertNotNull(actuals);\n-\n-        assertTrue(actuals.getMappings().size() == 3);\n-    }\n-\n-    @Test\n-    public void deleteWithException() {\n-        try {\n-\n-            restTemplate.delete(\n-                    BASE_URL + \"resource/{resourceName}/mappings/delete.json\",\n-                    \"notfoundresourcename\");\n-\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-        }\n-    }\n-\n-    @Test\n-    public void delete() {\n-        final String resourceName = \"ws-target-resource-2\";\n-\n-        restTemplate.delete(\n-                BASE_URL + \"resource/{resourceName}/mappings/delete.json\",\n-                resourceName);\n-\n-        SchemaMappingTOs actuals = restTemplate.getForObject(\n-                BASE_URL + \"resource/{resourceName}/mappings/list.json\",\n-                SchemaMappingTOs.class,\n-                resourceName);\n-\n-        assertNotNull(actuals);\n-\n-        assertTrue(actuals.getMappings().isEmpty());\n-    }\n-\n-    @Test\n-    public void getRoleResourcesMapping() {\n-        final Long roleId = 3L;\n-\n-        SchemaMappingTOs actuals =\n-                restTemplate.getForObject(\n-                BASE_URL + \"resource/{roleName}/resources/mappings/list.json\",\n-                SchemaMappingTOs.class,\n-                roleId);\n-\n-        assertNotNull(actuals);\n-\n-        assertFalse(actuals.getMappings().isEmpty());\n-    }\n-}"},{"sha":"4d8f9a2f4c8a48ebb7d40c613edcee6485755e21","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5a434bc74450644f0d6866cb30c95afed7bcd94/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=f5a434bc74450644f0d6866cb30c95afed7bcd94","patch":"@@ -39,10 +39,10 @@\n     <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\"\n                           confValue=\"/tmp/bundles\"/>\n                           \n-    <SyncopeUser id=\"1\" password=\"XXX\" workflowId=\"0\"/>\n-    <SyncopeUser id=\"2\" password=\"YYY\" workflowId=\"0\"/>\n-    <SyncopeUser id=\"3\" password=\"ZZZ\" workflowId=\"0\"/>\n-    <SyncopeUser id=\"4\" password=\"PPP\" workflowId=\"0\"/>\n+    <SyncopeUser id=\"1\" password=\"1\" workflowId=\"0\"/>\n+    <SyncopeUser id=\"2\" password=\"1\" workflowId=\"0\"/>\n+    <SyncopeUser id=\"3\" password=\"1\" workflowId=\"0\"/>\n+    <SyncopeUser id=\"4\" password=\"1\" workflowId=\"0\"/>\n \n     <SyncopeRole id=\"1\" name=\"root\" inheritAttributes=\"F\" inheritDerivedAttributes=\"F\"/>\n     <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\" inheritAttributes=\"F\" inheritDerivedAttributes=\"F\"/>\n@@ -170,37 +170,31 @@\n                    resource_name=\"ws-target-resource-1\"\n                    schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"email\" mappings_id=\"100\" />\n \n     <SchemaMapping id=\"101\" field=\"username\"\n                    resource_name=\"ws-target-resource-2\"\n                    schemaName=\"username\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"username\" mappings_id=\"101\" />\n \n     <SchemaMapping id=\"102\" field=\"email\"\n                    resource_name=\"ws-target-resource-list-mappings-1\"\n                    schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"email\" mappings_id=\"102\" />\n \n     <SchemaMapping id=\"103\" field=\"surname\"\n                    resource_name=\"ws-target-resource-list-mappings-1\"\n                    schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"F\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"surname\" mappings_id=\"103\" />\n \n     <SchemaMapping id=\"104\" field=\"userid\"\n                    resource_name=\"ws-target-resource-list-mappings-2\"\n                    schemaName=\"userId\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"T\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"userId\" mappings_id=\"104\" />\n \n     <SchemaMapping id=\"105\" field=\"surname\"\n                    resource_name=\"ws-target-resource-1\"\n                    schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"F\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"surname\" mappings_id=\"105\" />\n \n     <SchemaMapping id=\"106\" field=\"password\"\n                    resource_name=\"ws-target-resource-1\"\n@@ -216,31 +210,26 @@\n                    resource_name=\"ws-target-resource-2\"\n                    schemaName=\"type\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"F\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"type\" mappings_id=\"108\" />\n \n     <SchemaMapping id=\"109\" field=\"surname\"\n                    resource_name=\"ws-target-resource-2\"\n                    schemaName=\"surname\" schemaType=\"UserSchema\" nullable=\"F\"\n                    accountid=\"F\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"surname\" mappings_id=\"109\" />\n \n     <SchemaMapping id=\"110\" field=\"email\"\n                    resource_name=\"ws-target-resource-update\"\n                    schemaName=\"email\" schemaType=\"UserSchema\" nullable=\"T\"\n                    accountid=\"F\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"email\" mappings_id=\"110\" />\n \n     <SchemaMapping id=\"111\" field=\"userId\"\n                    resource_name=\"ws-target-resource-update\"\n                    schemaName=\"userId\" schemaType=\"UserSchema\" nullable=\"T\"\n                    accountid=\"F\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"userId\" mappings_id=\"111\" />\n     \n     <SchemaMapping id=\"112\" field=\"test3\"\n                    resource_name=\"ws-target-resource-update\"\n                    schemaName=\"username\" schemaType=\"UserSchema\" nullable=\"T\"\n                    accountid=\"F\" password=\"F\"/>\n-    <UserSchema_SchemaMapping UserSchema_name=\"username\" mappings_id=\"112\" />\n \n     <Entitlement name=\"base\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>"}]}