{"sha":"e0ba7481ffd8f438916358147dba284b5b20a7ad","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUwYmE3NDgxZmZkOGY0Mzg5MTYzNTgxNDdkYmEyODRiNWIyMGE3YWQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-17T09:58:38Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-17T09:58:38Z"},"message":"Defining an interface for user search and two possible implementations: criteria and native\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246733 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a7c86811821eb5e8983d0221c5fbb77ec053e714","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a7c86811821eb5e8983d0221c5fbb77ec053e714"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e0ba7481ffd8f438916358147dba284b5b20a7ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0ba7481ffd8f438916358147dba284b5b20a7ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e0ba7481ffd8f438916358147dba284b5b20a7ad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0ba7481ffd8f438916358147dba284b5b20a7ad/comments","author":null,"committer":null,"parents":[{"sha":"ee9a788e5f3f26c13b6174788ac20181f369efc6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee9a788e5f3f26c13b6174788ac20181f369efc6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ee9a788e5f3f26c13b6174788ac20181f369efc6"}],"stats":{"total":1367,"additions":840,"deletions":527},"files":[{"sha":"bcd7cbbc72e33efad96115ca13583fc83d557ee3","filename":"core/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -376,6 +376,7 @@\n                                        dest=\"${cargo.run.dir}\">\n                                     <patternset>\n                                         <exclude name=\"**/content.xml\"/>\n+                                        <exclude name=\"**/views.xml\"/>\n                                         <exclude name=\"**/ehcache.xml\"/>\n                                         <exclude name=\"**/persistence.properties\"/>\n                                         <exclude name=\"**/security.properties\"/>"},{"sha":"39a791473ad2e20bc8b092992522c772b636c659","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -33,7 +33,7 @@\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfDAO;\n+import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n \n@@ -55,8 +55,8 @@ public static ConnectorInfoManager getConnectorManager()\n                 ApplicationContextManager.getApplicationContext();\n \n         // 1. Bundles directory\n-        SyncopeConfDAO syncopeConfigurationDAO =\n-                (SyncopeConfDAO) context.getBean(\"syncopeConfDAOImpl\");\n+        ConfDAO syncopeConfigurationDAO =\n+                (ConfDAO) context.getBean(\"confDAOImpl\");\n         SyncopeConf connectorBundleDir = null;\n         try {\n             connectorBundleDir = syncopeConfigurationDAO.find("},{"sha":"923947dd12c41cfdd8e954c2ad153f23c4aad95f","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -36,6 +36,7 @@\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.context.support.WebApplicationContextUtils;\n import org.syncope.core.persistence.beans.SyncopeConf;\n+import org.syncope.core.rest.controller.UserController;\n \n /**\n  * Load default content in the database.\n@@ -102,6 +103,31 @@ public final void contextInitialized(final ServletContextEvent sce) {\n \n         LOG.info(\"Empty database found, loading default content\");\n \n+        LOG.debug(\"Creating views\");\n+        try {\n+            InputStream viewsStream = getClass().getResourceAsStream(\n+                    \"/views.xml\");\n+            Properties views = new Properties();\n+            views.loadFromXML(viewsStream);\n+\n+            for (String idx : views.stringPropertyNames()) {\n+                LOG.debug(\"Creating view {}\", views.get(idx).toString());\n+\n+                try {\n+                    statement = conn.createStatement();\n+                    statement.executeUpdate(views.get(idx).toString().\n+                            replaceAll(\"\\\\n\", \" \"));\n+                    statement.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"Could not create view \", e);\n+                }\n+            }\n+\n+            LOG.debug(\"Views created, go for indexes\");\n+        } catch (Throwable t) {\n+            LOG.error(\"While creating views\", t);\n+        }\n+\n         LOG.debug(\"Creating indexes\");\n         try {\n             InputStream indexesStream = getClass().getResourceAsStream(\n@@ -127,12 +153,14 @@ public final void contextInitialized(final ServletContextEvent sce) {\n         }\n \n         String dbSchema = null;\n+        String searchMode = null;\n         try {\n             InputStream dbPropsStream = getClass().getResourceAsStream(\n                     \"/persistence.properties\");\n             Properties dbProps = new Properties();\n             dbProps.load(dbPropsStream);\n             dbSchema = dbProps.getProperty(\"database.schema\");\n+            searchMode = dbProps.getProperty(\"search.mode\");\n         } catch (Throwable t) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Could not find persistence.properties\", t);\n@@ -141,6 +169,10 @@ public final void contextInitialized(final ServletContextEvent sce) {\n             }\n         }\n \n+        LOG.debug(\"Setting sarch mode to \" + searchMode);\n+        UserController.setSearchMode(searchMode);\n+        LOG.debug(\"Search mode set to {}\", UserController.getSearchMode());\n+\n         try {\n             IDatabaseConnection dbUnitConn = dbSchema == null\n                     ? new DatabaseConnection(conn)"},{"sha":"1c3796e16ad0fc8d1a821596fae311a73b8bba79","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttValueDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttValueDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,7 +18,7 @@\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface AttributeValueDAO extends DAO {\n+public interface AttValueDAO extends DAO {\n \n     <T extends AbstractAttrValue> T find(Long id, Class<T> reference);\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeValueDAO.java"},{"sha":"9ae4e87160d53483e17b7398df8402f3a479266a","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttrDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,7 +18,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractAttr;\n \n-public interface AttributeDAO extends DAO {\n+public interface AttrDAO extends DAO {\n \n     <T extends AbstractAttr> T find(Long id, Class<T> reference);\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeDAO.java"},{"sha":"9aa695affe76abdcfb3ce9a4780aec005cb773db","filename":"core/src/main/java/org/syncope/core/persistence/dao/ConfDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConfDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,7 +18,7 @@\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface SyncopeConfDAO extends DAO {\n+public interface ConfDAO extends DAO {\n \n     SyncopeConf find(String name)\n             throws MissingConfKeyException;","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeConfDAO.java"},{"sha":"fdafca33b7ca15068f6c831767ac1326e52512b4","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerAttrDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,7 +18,7 @@\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface DerivedAttributeDAO extends DAO {\n+public interface DerAttrDAO extends DAO {\n \n     <T extends AbstractDerAttr> T find(Long id, Class<T> reference);\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedAttributeDAO.java"},{"sha":"dcb9f67324c80ff74b2c3d824882d7665e3b3c05","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerSchemaDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,7 +18,7 @@\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface DerivedSchemaDAO extends DAO {\n+public interface DerSchemaDAO extends DAO {\n \n     <T extends AbstractDerSchema> T find(String name, Class<T> reference);\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedSchemaDAO.java"},{"sha":"b4b42c2766bb5711773a2c2b3b35943e27c395aa","filename":"core/src/main/java/org/syncope/core/persistence/dao/RoleDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -19,7 +19,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface SyncopeRoleDAO extends DAO {\n+public interface RoleDAO extends DAO {\n \n     SyncopeRole find(Long id);\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeRoleDAO.java"},{"sha":"564d105c9a091588a04b55dc59967b3c4bd3248a","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserDAO.java","status":"renamed","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -15,13 +15,11 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n-public interface SyncopeUserDAO extends DAO {\n+public interface UserDAO extends DAO {\n \n     SyncopeUser find(Long id);\n \n@@ -38,12 +36,7 @@ SyncopeUser findByAttrUniqueValue(String schemaName,\n \n     Long count();\n \n-    List<SyncopeUser> search(NodeCond searchCondition);\n-\n-    List<SyncopeUser> search(NodeCond searchCondition,\n-            int page, int itemsPerPage, PaginatedResult paginatedResult);\n-\n-    SyncopeUser save(SyncopeUser syncopeUser)\n+    SyncopeUser save(SyncopeUser user)\n             throws InvalidEntityException;\n \n     void delete(Long id);","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java"},{"sha":"65530a7381f24cce1b1bd6858778db3394abc122","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserSearchDAO.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -0,0 +1,28 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+\n+public interface UserSearchDAO extends DAO {\n+\n+    List<SyncopeUser> search(NodeCond searchCondition);\n+\n+    List<SyncopeUser> search(NodeCond searchCondition,\n+            int page, int itemsPerPage, PaginatedResult paginatedResult);\n+}"},{"sha":"67b4787585f2429654dfd202abb89b8d13cb2708","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractUserSearchDAOImpl.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.UserSearchDAO;\n+\n+@Repository\n+public abstract class AbstractUserSearchDAOImpl extends AbstractDAOImpl\n+        implements UserSearchDAO {\n+\n+    @Override\n+    public List<SyncopeUser> search(final NodeCond searchCondition) {\n+        return search(searchCondition, -1, -1, null);\n+    }\n+\n+    @Override\n+    public List<SyncopeUser> search(final NodeCond searchCondition,\n+            final int page,\n+            final int itemsPerPage,\n+            final PaginatedResult paginatedResult) {\n+\n+        LOG.debug(\"Search condition:\\n{}\", searchCondition);\n+\n+        List<SyncopeUser> result;\n+        try {\n+            result = doSearch(searchCondition);\n+        } catch (Throwable t) {\n+            LOG.error(\"While searching users\", t);\n+\n+            result = Collections.EMPTY_LIST;\n+        }\n+\n+        if (paginatedResult != null) {\n+            paginatedResult.setTotalRecords(new Long((long) result.size()));\n+        }\n+\n+        // TODO: temporary solution to the paginated search\n+        int from = itemsPerPage * (page <= 0 ? 0 : page - 1);\n+\n+        int to = itemsPerPage <= 0 || from + itemsPerPage > result.size()\n+                ? result.size() : from + itemsPerPage;\n+\n+        return from > to ? Collections.EMPTY_LIST : result.subList(from, to);\n+    }\n+\n+    protected abstract List<SyncopeUser> doSearch(final NodeCond nodeCond);\n+}"},{"sha":"d5a3b2e97d75dd286f4cbc478211c9205430b262","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttrDAOImpl.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,11 +18,10 @@\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n \n @Repository\n-public class AttributeDAOImpl extends AbstractDAOImpl\n-        implements AttributeDAO {\n+public class AttrDAOImpl extends AbstractDAOImpl implements AttrDAO {\n \n     @Override\n     public <T extends AbstractAttr> T find(final Long id,","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeDAOImpl.java"},{"sha":"dabc550a900d7bee997e0df89b2e2e132f134d7a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttrValueDAOImpl.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrValueDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,11 +18,11 @@\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n-import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.AttValueDAO;\n \n @Repository\n-public class AttributeValueDAOImpl extends AbstractDAOImpl\n-        implements AttributeValueDAO {\n+public class AttrValueDAOImpl extends AbstractDAOImpl\n+        implements AttValueDAO {\n \n     @Override\n     public <T extends AbstractAttrValue> T find(","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java"},{"sha":"8a6518f18147f15cdc980f520d867434cea93cdd","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConfDAOImpl.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -19,11 +19,10 @@\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfDAO;\n+import org.syncope.core.persistence.dao.ConfDAO;\n \n @Repository\n-public class SyncopeConfDAOImpl extends AbstractDAOImpl\n-        implements SyncopeConfDAO {\n+public class ConfDAOImpl extends AbstractDAOImpl implements ConfDAO {\n \n     @Override\n     public SyncopeConf find(final String name)","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfDAOImpl.java"},{"sha":"a2878aef2c171b12d350d5bc1fef0cd5f8c746f6","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerAttrDAOImpl.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -18,11 +18,10 @@\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n-import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n+import org.syncope.core.persistence.dao.DerAttrDAO;\n \n @Repository\n-public class DerivedAttributeDAOImpl extends AbstractDAOImpl\n-        implements DerivedAttributeDAO {\n+public class DerAttrDAOImpl extends AbstractDAOImpl implements DerAttrDAO {\n \n     @Override\n     public <T extends AbstractDerAttr> T find(","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedAttributeDAOImpl.java"},{"sha":"3d133cd2c3fe6859c25bd115836341ea222609ef","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerSchemaDAOImpl.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -23,15 +23,14 @@\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.DerAttrDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n \n @Repository\n-public class DerivedSchemaDAOImpl extends AbstractDAOImpl\n-        implements DerivedSchemaDAO {\n+public class DerSchemaDAOImpl extends AbstractDAOImpl implements DerSchemaDAO {\n \n     @Autowired\n-    private DerivedAttributeDAO derivedAttributeDAO;\n+    private DerAttrDAO derivedAttributeDAO;\n \n     @Override\n     public <T extends AbstractDerSchema> T find(final String name,","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedSchemaDAOImpl.java"},{"sha":"afb7abf5f7798a2bf7e6fcc0fd92ba6e0a0d330d","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -22,14 +22,14 @@\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n \n @Repository\n public class EntitlementDAOImpl extends AbstractDAOImpl\n         implements EntitlementDAO {\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO syncopeRoleDAO;\n \n     @Override\n     public Entitlement find(String name) {"},{"sha":"0e1e2f627c7b920f4dd989ed9a1983e5a62f8879","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -23,18 +23,18 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MembershipDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n \n @Repository\n public class MembershipDAOImpl extends AbstractDAOImpl\n         implements MembershipDAO {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Override\n     public Membership find(final Long id) {\n@@ -81,10 +81,10 @@ public void delete(final Long id) {\n         }\n \n         membership.getSyncopeUser().removeMembership(membership);\n-        syncopeUserDAO.save(membership.getSyncopeUser());\n+        userDAO.save(membership.getSyncopeUser());\n         membership.setSyncopeUser(null);\n \n-        syncopeRoleDAO.save(membership.getSyncopeRole());\n+        roleDAO.save(membership.getSyncopeRole());\n         membership.setSyncopeRole(null);\n \n         entityManager.remove(membership);"},{"sha":"48e4aef196d06e51849b6990c5818bf7e3426e5b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -22,11 +22,10 @@\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n \n @Repository\n-public class SyncopeRoleDAOImpl extends AbstractDAOImpl\n-        implements SyncopeRoleDAO {\n+public class RoleDAOImpl extends AbstractDAOImpl implements RoleDAO {\n \n     @Override\n     public SyncopeRole find(final Long id) {","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java"},{"sha":"f29ea1f17b18670ff13c4920ef5573344d0ab903","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -23,7 +23,7 @@\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.util.AttributableUtil;\n@@ -33,7 +33,7 @@ public class SchemaDAOImpl extends AbstractDAOImpl\n         implements SchemaDAO {\n \n     @Autowired\n-    private AttributeDAO attributeDAO;\n+    private AttrDAO attributeDAO;\n \n     @Autowired\n     private ResourceDAO resourceDAO;"},{"sha":"7283090d31a033cd238bf2c8d65eea9a460fe3d0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"added","additions":200,"deletions":0,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -0,0 +1,200 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.persistence.NoResultException;\n+import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.USchema;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n+\n+@Repository\n+public class UserDAOImpl extends AbstractDAOImpl\n+        implements UserDAO {\n+\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Override\n+    public SyncopeUser find(final Long id) {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeUser e WHERE e.id = :id\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n+        query.setParameter(\"id\", id);\n+\n+        try {\n+            return (SyncopeUser) query.getSingleResult();\n+        } catch (NoResultException e) {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public SyncopeUser findByWorkflowId(final Long workflowId) {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeUser e WHERE e.workflowId = :workflowId\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n+        query.setParameter(\"workflowId\", workflowId);\n+\n+        return (SyncopeUser) query.getSingleResult();\n+    }\n+\n+    @Override\n+    public List<SyncopeUser> findByAttrValue(final String schemaName,\n+            final UAttrValue attrValue) {\n+\n+        USchema schema = schemaDAO.find(schemaName, USchema.class);\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema name '{}'\", schemaName);\n+            return Collections.EMPTY_LIST;\n+        }\n+\n+        final String entityName = schema.isUniqueConstraint()\n+                ? UAttrUniqueValue.class.getName() : UAttrValue.class.getName();\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + entityName + \" e\"\n+                + \" WHERE e.attribute.schema.name = :schemaName \"\n+                + \" AND (e.stringValue IS NOT NULL\"\n+                + \" AND e.stringValue = :stringValue)\"\n+                + \" OR (e.booleanValue IS NOT NULL\"\n+                + \" AND e.booleanValue = :booleanValue)\"\n+                + \" OR (e.dateValue IS NOT NULL\"\n+                + \" AND e.dateValue = :dateValue)\"\n+                + \" OR (e.longValue IS NOT NULL\"\n+                + \" AND e.longValue = :longValue)\"\n+                + \" OR (e.doubleValue IS NOT NULL\"\n+                + \" AND e.doubleValue = :doubleValue)\");\n+\n+        query.setParameter(\"schemaName\", schemaName);\n+        query.setParameter(\"stringValue\", attrValue.getStringValue());\n+        query.setParameter(\"booleanValue\",\n+                attrValue.getBooleanValue() == null\n+                ? null\n+                : attrValue.getBooleanAsInteger(attrValue.getBooleanValue()));\n+        query.setParameter(\"dateValue\", attrValue.getDateValue());\n+        query.setParameter(\"longValue\", attrValue.getLongValue());\n+        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n+\n+        List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n+        SyncopeUser user;\n+        for (AbstractAttrValue value :\n+                (List<AbstractAttrValue>) query.getResultList()) {\n+\n+            user = (SyncopeUser) value.getAttribute().getOwner();\n+            if (!result.contains(user)) {\n+                result.add(user);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public SyncopeUser findByAttrUniqueValue(final String schemaName,\n+            final UAttrValue attrUniqueValue) {\n+\n+        USchema schema = schemaDAO.find(schemaName, USchema.class);\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema name '{}'\", schemaName);\n+            return null;\n+        }\n+        if (!schema.isUniqueConstraint()) {\n+            LOG.error(\"This schema has not unique constraint: '{}'\",\n+                    schemaName);\n+            return null;\n+        }\n+\n+        List<SyncopeUser> result = findByAttrValue(schemaName, attrUniqueValue);\n+        return result.isEmpty() ? null : result.iterator().next();\n+    }\n+\n+    @Override\n+    public final List<SyncopeUser> findAll() {\n+        return findAll(-1, -1);\n+    }\n+\n+    @Override\n+    public final List<SyncopeUser> findAll(\n+            final int page, final int itemsPerPage) {\n+\n+        final Query query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeUser e ORDER BY e.id\");\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public final Long count() {\n+\n+        final Query query = entityManager.createQuery(\n+                \"SELECT count(e.id) FROM SyncopeUser e\");\n+\n+        return (Long) query.getSingleResult();\n+    }\n+\n+    @Override\n+    public SyncopeUser save(final SyncopeUser user) {\n+        return entityManager.merge(user);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        SyncopeUser user = find(id);\n+        if (user == null) {\n+            return;\n+        }\n+\n+        delete(user);\n+    }\n+\n+    @Override\n+    public void delete(final SyncopeUser user) {\n+        // Not calling membershipDAO.delete() here because it would try\n+        // to save this user as well, thus going into\n+        // ConcurrentModificationException\n+        for (Membership membership : user.getMemberships()) {\n+            membership.setSyncopeUser(null);\n+\n+            roleDAO.save(membership.getSyncopeRole());\n+            membership.setSyncopeRole(null);\n+\n+            entityManager.remove(membership);\n+        }\n+        user.getMemberships().clear();\n+\n+        entityManager.remove(user);\n+    }\n+}"},{"sha":"162732a8d4cc98b398cb45642e1c554032dd2b5b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOCriteriaImpl.java","status":"renamed","additions":4,"deletions":240,"changes":244,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -14,10 +14,8 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.validation.ValidationException;\n import org.hibernate.Criteria;\n@@ -30,256 +28,22 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n-import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.UserSearchDAO;\n \n @Repository\n-public class SyncopeUserDAOImpl extends AbstractDAOImpl\n-        implements SyncopeUserDAO {\n+public class UserSearchDAOCriteriaImpl extends AbstractUserSearchDAOImpl\n+        implements UserSearchDAO {\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n \n-    @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n-\n-    @Override\n-    public SyncopeUser find(final Long id) {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeUser e WHERE e.id = :id\");\n-        query.setHint(\"org.hibernate.cacheable\", true);\n-        query.setParameter(\"id\", id);\n-\n-        try {\n-            return (SyncopeUser) query.getSingleResult();\n-        } catch (NoResultException e) {\n-            return null;\n-        }\n-    }\n-\n-    @Override\n-    public SyncopeUser findByWorkflowId(final Long workflowId) {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeUser e WHERE e.workflowId = :workflowId\");\n-        query.setHint(\"org.hibernate.cacheable\", true);\n-        query.setParameter(\"workflowId\", workflowId);\n-\n-        return (SyncopeUser) query.getSingleResult();\n-    }\n-\n-    @Override\n-    public List<SyncopeUser> findByAttrValue(final String schemaName,\n-            final UAttrValue attrValue) {\n-\n-        StringBuilder queryHead1 = new StringBuilder(\n-                \"SELECT e FROM \" + UAttrValue.class.getName() + \" e\");\n-        StringBuilder queryHead2 = new StringBuilder(\n-                \"SELECT e FROM \" + UAttrUniqueValue.class.getName() + \" e\");\n-\n-        StringBuilder whereCondition = new StringBuilder().append(\n-                \" WHERE e.attribute.schema.name = :schemaName \").\n-                append(\" AND (e.stringValue IS NOT NULL\").\n-                append(\" AND e.stringValue = :stringValue)\").\n-                append(\" OR (e.booleanValue IS NOT NULL\").\n-                append(\" AND e.booleanValue = :booleanValue)\").\n-                append(\" OR (e.dateValue IS NOT NULL\").\n-                append(\" AND e.dateValue = :dateValue)\").\n-                append(\" OR (e.longValue IS NOT NULL\").\n-                append(\" AND e.longValue = :longValue)\").\n-                append(\" OR (e.doubleValue IS NOT NULL\").\n-                append(\" AND e.doubleValue = :doubleValue)\");\n-\n-        Query query = entityManager.createQuery(\n-                queryHead1.append(whereCondition).toString());\n-\n-        query.setParameter(\"schemaName\", schemaName);\n-        query.setParameter(\"stringValue\", attrValue.getStringValue());\n-        query.setParameter(\"booleanValue\", attrValue.getBooleanValue() == null\n-                ? null\n-                : attrValue.getBooleanAsInteger(attrValue.getBooleanValue()));\n-        query.setParameter(\"dateValue\", attrValue.getDateValue());\n-        query.setParameter(\"longValue\", attrValue.getLongValue());\n-        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n-\n-        List<UAttrValue> result1 = query.getResultList();\n-\n-        query = entityManager.createQuery(\n-                queryHead2.append(whereCondition).toString());\n-\n-        query.setParameter(\"schemaName\", schemaName);\n-        query.setParameter(\"stringValue\", attrValue.getStringValue());\n-        query.setParameter(\"booleanValue\", attrValue.getBooleanValue() == null\n-                ? null\n-                : attrValue.getBooleanAsInteger(attrValue.getBooleanValue()));\n-        query.setParameter(\"dateValue\", attrValue.getDateValue());\n-        query.setParameter(\"longValue\", attrValue.getLongValue());\n-        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n-\n-        List<UAttrUniqueValue> result2 = query.getResultList();\n-\n-        List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n-        for (UAttrValue value : (List<UAttrValue>) result1) {\n-\n-            result.add((SyncopeUser) value.getAttribute().getOwner());\n-        }\n-        for (UAttrUniqueValue value : (List<UAttrUniqueValue>) result2) {\n-\n-            result.add((SyncopeUser) value.getAttribute().getOwner());\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public SyncopeUser findByAttrUniqueValue(final String schemaName,\n-            final UAttrValue attrUniqueValue) {\n-\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM \" + UAttrUniqueValue.class.getSimpleName() + \" e\"\n-                + \" WHERE e.attribute.schema.name = :schemaName \"\n-                + \" AND (e.stringValue IS NOT NULL\"\n-                + \" AND e.stringValue = :stringValue)\"\n-                + \" OR (e.booleanValue IS NOT NULL\"\n-                + \" AND e.booleanValue = :booleanValue)\"\n-                + \" OR (e.dateValue IS NOT NULL\"\n-                + \" AND e.dateValue = :dateValue)\"\n-                + \" OR (e.longValue IS NOT NULL\"\n-                + \" AND e.longValue = :longValue)\"\n-                + \" OR (e.doubleValue IS NOT NULL\"\n-                + \" AND e.doubleValue = :doubleValue)\");\n-\n-        query.setParameter(\"schemaName\", schemaName);\n-        query.setParameter(\"stringValue\", attrUniqueValue.getStringValue());\n-        query.setParameter(\"booleanValue\",\n-                attrUniqueValue.getBooleanValue() == null\n-                ? null\n-                : attrUniqueValue.getBooleanAsInteger(attrUniqueValue.\n-                getBooleanValue()));\n-        query.setParameter(\"dateValue\", attrUniqueValue.getDateValue());\n-        query.setParameter(\"longValue\", attrUniqueValue.getLongValue());\n-        query.setParameter(\"doubleValue\", attrUniqueValue.getDoubleValue());\n-\n-        UAttrUniqueValue result = null;\n-        try {\n-            result = (UAttrUniqueValue) query.getSingleResult();\n-        } catch (Exception e) {\n-            LOG.debug(\"While finding by attribute unique value: \" + schemaName\n-                    + \" {}\", attrUniqueValue, e);\n-        }\n-\n-        return result == null\n-                ? null : (SyncopeUser) result.getAttribute().getOwner();\n-    }\n-\n-    @Override\n-    public final List<SyncopeUser> findAll() {\n-        return findAll(-1, -1);\n-    }\n-\n-    @Override\n-    public final List<SyncopeUser> findAll(\n-            final int page, final int itemsPerPage) {\n-\n-        final Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeUser e ORDER BY e.id\");\n-\n-        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n-\n-        if (itemsPerPage > 0) {\n-            query.setMaxResults(itemsPerPage);\n-        }\n-\n-        return query.getResultList();\n-    }\n-\n     @Override\n-    public final Long count() {\n-\n-        final Query query = entityManager.createQuery(\n-                \"SELECT count(e.id) FROM SyncopeUser e\");\n-\n-        return (Long) query.getSingleResult();\n-    }\n-\n-    @Override\n-    public SyncopeUser save(final SyncopeUser syncopeUser) {\n-        return entityManager.merge(syncopeUser);\n-    }\n-\n-    @Override\n-    public void delete(final Long id) {\n-        SyncopeUser user = find(id);\n-        if (user == null) {\n-            return;\n-        }\n-\n-        delete(user);\n-    }\n-\n-    @Override\n-    public void delete(final SyncopeUser user) {\n-        // Not calling membershipDAO.delete() here because it would try\n-        // to save this user as well, thus going into\n-        // ConcurrentModificationException\n-        for (Membership membership : user.getMemberships()) {\n-            membership.setSyncopeUser(null);\n-\n-            syncopeRoleDAO.save(membership.getSyncopeRole());\n-            membership.setSyncopeRole(null);\n-\n-            entityManager.remove(membership);\n-        }\n-        user.getMemberships().clear();\n-\n-        entityManager.remove(user);\n-    }\n-\n-    @Override\n-    public List<SyncopeUser> search(final NodeCond searchCondition) {\n-        return search(searchCondition, -1, -1, null);\n-    }\n-\n-    @Override\n-    public List<SyncopeUser> search(final NodeCond searchCondition,\n-            final int page,\n-            final int itemsPerPage,\n-            final PaginatedResult paginatedResult) {\n-\n-        LOG.debug(\"Search condition:\\n{}\", searchCondition);\n-\n-        List<SyncopeUser> result;\n-        try {\n-            result = doSearch(searchCondition);\n-        } catch (Throwable t) {\n-            LOG.error(\"While searching users\", t);\n-\n-            result = Collections.EMPTY_LIST;\n-        }\n-\n-        if (paginatedResult != null) {\n-            paginatedResult.setTotalRecords(\n-                    new Long((long) result.size()));\n-        }\n-\n-        // TODO: temporary solution to the paginated search\n-        int from = itemsPerPage * (page <= 0 ? 0 : page - 1);\n-\n-        int to = itemsPerPage <= 0 || from + itemsPerPage > result.size()\n-                ? result.size() : from + itemsPerPage;\n-\n-        return from > to ? Collections.EMPTY_LIST : result.subList(from, to);\n-    }\n-\n-    private List<SyncopeUser> doSearch(\n-            final NodeCond nodeCond) {\n+    protected List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n         List<SyncopeUser> result;\n         List<SyncopeUser> rightResult;\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java"},{"sha":"2530dbb9b6c5008757ded4ee1a9d6f3305e426e7","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAONativeImpl.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAONativeImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAONativeImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAONativeImpl.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.UserSearchDAO;\n+\n+@Repository\n+public class UserSearchDAONativeImpl extends AbstractUserSearchDAOImpl\n+        implements UserSearchDAO {\n+\n+    @Override\n+    protected List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n+        return null;\n+    }\n+}"},{"sha":"16b5b078519eaf6417789dab7e086cccfa6caa8b","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -33,7 +33,7 @@\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfDAO;\n+import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.validation.attrvalue.Validator;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n \n@@ -42,7 +42,7 @@\n public class ConfigurationController extends AbstractController {\n \n     @Autowired\n-    private SyncopeConfDAO syncopeConfigurationDAO;\n+    private ConfDAO syncopeConfigurationDAO;\n \n     @Autowired\n     private ConfigurationDataBinder configurationDataBinder;"},{"sha":"43502adf29e905e35bd18b30f336b21278b6f98b","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -28,15 +28,15 @@\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.rest.data.DerivedSchemaDataBinder;\n \n @Controller\n @RequestMapping(\"/derivedSchema\")\n public class DerivedSchemaController extends AbstractController {\n \n     @Autowired\n-    private DerivedSchemaDAO derivedSchemaDAO;\n+    private DerSchemaDAO derivedSchemaDAO;\n \n     @Autowired\n     private DerivedSchemaDataBinder derivedSchemaDataBinder;"},{"sha":"dd0d41ba99996a0d6c2651f1c6d7ffce60cfce14","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -36,7 +36,7 @@\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -49,7 +49,7 @@ public class ResourceController extends AbstractController {\n     private ResourceDAO resourceDAO;\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO syncopeRoleDAO;\n \n     @Autowired\n     private ResourceDataBinder binder;"},{"sha":"b39ac5e9fc6d6ed32a8727e266a3e99af069fa59","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -29,15 +29,15 @@\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.rest.data.RoleDataBinder;\n \n @Controller\n @RequestMapping(\"/role\")\n public class RoleController extends AbstractController {\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO syncopeRoleDAO;\n \n     @Autowired\n     private RoleDataBinder roleDataBinder;"},{"sha":"ae2f1bb8bf148c81832356ef36e490925a56f242","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":69,"deletions":20,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -28,7 +28,7 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.propagation.PropagationException;\n import org.syncope.core.rest.data.UserDataBinder;\n import java.util.ArrayList;\n@@ -39,6 +39,7 @@\n import java.util.Map;\n import java.util.Set;\n import javassist.NotFoundException;\n+import javax.annotation.Resource;\n import javax.servlet.http.HttpServletResponse;\n import jpasymphony.dao.JPAWorkflowEntryDAO;\n import org.springframework.dao.DataIntegrityViolationException;\n@@ -55,6 +56,7 @@\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.dao.UserSearchDAO;\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.rest.data.InvalidSearchConditionException;\n@@ -66,8 +68,19 @@\n @RequestMapping(\"/user\")\n public class UserController extends AbstractController {\n \n+    public enum SearchMode {\n+\n+        CRITERIA, NATIVE\n+\n+    }\n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n+\n+    @Resource(name = \"userSearchDAOCriteriaImpl\")\n+    private UserSearchDAO userSearchCriteriaDAO;\n+\n+    @Resource(name = \"userSearchDAONativeImpl\")\n+    private UserSearchDAO userSearchNativeDAO;\n \n     @Autowired\n     private JPAWorkflowEntryDAO workflowEntryDAO;\n@@ -81,6 +94,42 @@ public class UserController extends AbstractController {\n     @Autowired\n     private PropagationManager propagationManager;\n \n+    protected static SearchMode searchMode;\n+\n+    public static SearchMode getSearchMode() {\n+        return searchMode;\n+    }\n+\n+    public static void setSearchMode(String searchMode) {\n+        try {\n+            UserController.searchMode = SearchMode.valueOf(searchMode);\n+        } catch (IllegalArgumentException e) {\n+            LOG.error(\"Invalid search mode specified: \" + searchMode\n+                    + \", reverting to CRITERIA\");\n+\n+            UserController.searchMode = SearchMode.CRITERIA;\n+        }\n+    }\n+\n+    private UserSearchDAO getSelectedUserSearchDAO() {\n+        UserSearchDAO result;\n+\n+        switch (getSearchMode()) {\n+            case CRITERIA:\n+                result = userSearchCriteriaDAO;\n+                break;\n+\n+            case NATIVE:\n+                result = userSearchNativeDAO;\n+                break;\n+\n+            default:\n+                result = userSearchCriteriaDAO;\n+        }\n+\n+        return result;\n+    }\n+\n     public Integer findWorkflowAction(final Long workflowId,\n             final String actionName) {\n \n@@ -114,7 +163,7 @@ public SyncopeUser doExecuteAction(final String actionName,\n             final Map<String, Object> moreInputs)\n             throws WorkflowException, NotFoundException {\n \n-        SyncopeUser user = syncopeUserDAO.find(userId);\n+        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n@@ -138,7 +187,7 @@ public SyncopeUser doExecuteAction(final String actionName,\n             throw new WorkflowException(e);\n         }\n \n-        return syncopeUserDAO.save(user);\n+        return userDAO.save(user);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n@@ -200,7 +249,7 @@ public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n             @RequestParam(\"password\") final String password)\n             throws NotFoundException {\n \n-        SyncopeUser user = syncopeUserDAO.find(userId);\n+        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n@@ -217,7 +266,7 @@ public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n     value = \"/list\")\n     @Transactional(readOnly = true)\n     public List<UserTO> list() {\n-        List<SyncopeUser> users = syncopeUserDAO.findAll();\n+        List<SyncopeUser> users = userDAO.findAll();\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, userWorkflow));\n@@ -238,10 +287,10 @@ public PaginatedResult paginatedList(\n         paginatedResult.setPageNumber(page);\n         paginatedResult.setPageSize(size);\n \n-        Long totalUsers = syncopeUserDAO.count();\n+        Long totalUsers = userDAO.count();\n         paginatedResult.setTotalRecords(totalUsers);\n \n-        List<SyncopeUser> users = syncopeUserDAO.findAll(page, size);\n+        List<SyncopeUser> users = userDAO.findAll(page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, userWorkflow));\n@@ -260,7 +309,7 @@ public PaginatedResult paginatedList(\n     public UserTO read(@PathVariable(\"userId\") Long userId)\n             throws NotFoundException {\n \n-        SyncopeUser user = syncopeUserDAO.find(userId);\n+        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n@@ -275,7 +324,7 @@ public UserTO read(@PathVariable(\"userId\") Long userId)\n     public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n             throws NotFoundException {\n \n-        SyncopeUser user = syncopeUserDAO.find(userId);\n+        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n@@ -308,7 +357,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         }\n \n         List<SyncopeUser> matchingUsers =\n-                syncopeUserDAO.search(searchCondition);\n+                getSelectedUserSearchDAO().search(searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, userWorkflow));\n@@ -338,8 +387,8 @@ public PaginatedResult paginatedSearch(\n             throw new InvalidSearchConditionException();\n         }\n \n-        final List<SyncopeUser> matchingUsers = syncopeUserDAO.search(\n-                searchCondition, page, size, paginatedResult);\n+        final List<SyncopeUser> matchingUsers = getSelectedUserSearchDAO().\n+                search(searchCondition, page, size, paginatedResult);\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n@@ -359,7 +408,7 @@ public PaginatedResult paginatedSearch(\n     public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n             throws NotFoundException {\n \n-        SyncopeUser user = syncopeUserDAO.find(userId);\n+        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n@@ -448,7 +497,7 @@ public UserTO create(HttpServletResponse response,\n         // The user to be created\n         SyncopeUser user = new SyncopeUser();\n         userDataBinder.create(user, userTO);\n-        user = syncopeUserDAO.save(user);\n+        user = userDAO.save(user);\n \n         // Now that user is created locally, let's propagate\n         Set<String> syncResourceNames =\n@@ -481,7 +530,7 @@ public UserTO create(HttpServletResponse response,\n             LOG.debug(\"Action {} on user {} run successfully\", wfAction, user);\n         }\n \n-        user = syncopeUserDAO.save(user);\n+        user = userDAO.save(user);\n \n         final UserTO savedTO = userDataBinder.getUserTO(user, userWorkflow);\n         LOG.debug(\"About to return create user\\n{}\", savedTO);\n@@ -502,7 +551,7 @@ public UserTO update(@RequestBody UserMod userMod,\n \n         LOG.debug(\"update called with parameter {}\", userMod);\n \n-        SyncopeUser user = syncopeUserDAO.find(userMod.getId());\n+        SyncopeUser user = userDAO.find(userMod.getId());\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userMod.getId());\n         }\n@@ -515,7 +564,7 @@ public UserTO update(@RequestBody UserMod userMod,\n         // Update user with provided userMod\n         ResourceOperations resourceOperations =\n                 userDataBinder.update(user, userMod);\n-        user = syncopeUserDAO.save(user);\n+        user = userDAO.save(user);\n \n         // Now that user is update locally, let's propagate\n         Set<String> syncResourceNames =\n@@ -541,7 +590,7 @@ public void delete(@PathVariable(\"userId\") Long userId,\n             required = false) Set<String> syncResources)\n             throws NotFoundException, WorkflowException, PropagationException {\n \n-        SyncopeUser user = syncopeUserDAO.find(userId);\n+        SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n@@ -562,6 +611,6 @@ public void delete(@PathVariable(\"userId\") Long userId,\n         if (user.getWorkflowId() != null) {\n             workflowEntryDAO.delete(user.getWorkflowId());\n         }\n-        syncopeUserDAO.delete(userId);\n+        userDAO.delete(userId);\n     }\n }"},{"sha":"bbc6a84b04fe97580fb46479d8b4eadddbce1912","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -46,15 +46,15 @@\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.AttributeValueDAO;\n-import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n+import org.syncope.core.persistence.dao.AttValueDAO;\n+import org.syncope.core.persistence.dao.DerAttrDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -68,25 +68,25 @@ public abstract class AbstractAttributableDataBinder {\n             AbstractAttributableDataBinder.class);\n \n     @Autowired\n-    protected SyncopeRoleDAO syncopeRoleDAO;\n+    protected RoleDAO roleDAO;\n \n     @Autowired\n     protected SchemaDAO schemaDAO;\n \n     @Autowired\n-    protected DerivedSchemaDAO derivedSchemaDAO;\n+    protected DerSchemaDAO derivedSchemaDAO;\n \n     @Autowired\n-    protected AttributeDAO attributeDAO;\n+    protected AttrDAO attributeDAO;\n \n     @Autowired\n-    protected DerivedAttributeDAO derivedAttributeDAO;\n+    protected DerAttrDAO derivedAttributeDAO;\n \n     @Autowired\n-    protected AttributeValueDAO attributeValueDAO;\n+    protected AttValueDAO attributeValueDAO;\n \n     @Autowired\n-    protected SyncopeUserDAO syncopeUserDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n     protected ResourceDAO resourceDAO;"},{"sha":"2e3a5755fc3f9e5b6f09bf6bafed7208c324f3aa","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -58,7 +58,7 @@ public SyncopeRole create(final RoleTO roleTO)\n             role.setName(roleTO.getName());\n         }\n         Long parentRoleId = null;\n-        SyncopeRole parentRole = syncopeRoleDAO.find(roleTO.getParent());\n+        SyncopeRole parentRole = roleDAO.find(roleTO.getParent());\n         if (parentRole == null) {\n             LOG.error(\"Could not find role with id \" + roleTO.getParent());\n \n@@ -69,7 +69,7 @@ public SyncopeRole create(final RoleTO roleTO)\n             parentRoleId = role.getParent().getId();\n         }\n \n-        SyncopeRole otherRole = syncopeRoleDAO.find(\n+        SyncopeRole otherRole = roleDAO.find(\n                 roleTO.getName(), parentRoleId);\n         if (otherRole != null) {\n             LOG.error(\"Another role exists with the same name \"\n@@ -106,7 +106,7 @@ public ResourceOperations update(SyncopeRole role, RoleMod roleMod)\n         SyncopeClientException invalidRoles = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidRoles);\n         if (roleMod.getName() != null) {\n-            SyncopeRole otherRole = syncopeRoleDAO.find(\n+            SyncopeRole otherRole = roleDAO.find(\n                     roleMod.getName(), role.getParent().getId());\n \n             if (otherRole != null) {"},{"sha":"204184725ed682fed2a0932d18aff7c7ad6ea139","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -30,7 +30,7 @@\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.util.AttributableUtil;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -51,7 +51,7 @@ public class SchemaDataBinder {\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n-    private DerivedSchemaDAO derivedSchemaDAO;\n+    private DerSchemaDAO derivedSchemaDAO;\n \n     @Autowired\n     private JexlEngine jexlEngine;"},{"sha":"1fe676cad5ce16f625a4b9392d725d32119cf20d","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -161,7 +161,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n         // memberships\n         SyncopeRole role;\n         for (MembershipTO membershipTO : userTO.getMemberships()) {\n-            role = syncopeRoleDAO.find(membershipTO.getRoleId());\n+            role = roleDAO.find(membershipTO.getRoleId());\n \n             if (role == null) {\n                 if (LOG.isDebugEnabled()) {\n@@ -295,7 +295,7 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n                         + membershipMod.getRole() + \")\");\n             }\n \n-            role = syncopeRoleDAO.find(membershipMod.getRole());\n+            role = roleDAO.find(membershipMod.getRole());\n             if (role == null) {\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Ignoring invalid role \""},{"sha":"d66a6a8b78b6e1d870200b365aa6cbd03ff16d24","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -24,7 +24,7 @@\n import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n \n @Configurable\n public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n@@ -36,9 +36,9 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n             SyncopeAuthenticationProvider.class);\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n-    private SyncopeUserDetailsService syncopeUserDetailsService;\n+    private SyncopeUserDetailsService userDetailsService;\n \n     private String adminUser;\n \n@@ -61,13 +61,13 @@ public void setAdminUser(String adminUser) {\n     }\n \n     public SyncopeUserDetailsService getSyncopeUserDetailsService() {\n-        return syncopeUserDetailsService;\n+        return userDetailsService;\n     }\n \n     public void setSyncopeUserDetailsService(\n             SyncopeUserDetailsService syncopeUserDetailsService) {\n \n-        this.syncopeUserDetailsService = syncopeUserDetailsService;\n+        this.userDetailsService = syncopeUserDetailsService;\n     }\n \n     @Override\n@@ -90,7 +90,7 @@ public Authentication authenticate(final Authentication authentication)\n                         \"Invalid user id: \" + authentication.getName(), e);\n             }\n \n-            SyncopeUser user = syncopeUserDAO.find(id);\n+            SyncopeUser user = userDAO.find(id);\n             if (user == null) {\n                 throw new UsernameNotFoundException(\n                         \"Could not find any user with id \" + id);\n@@ -106,7 +106,7 @@ public Authentication authenticate(final Authentication authentication)\n                     new UsernamePasswordAuthenticationToken(\n                     authentication.getPrincipal(),\n                     null,\n-                    syncopeUserDetailsService.loadUserByUsername(\n+                    userDetailsService.loadUserByUsername(\n                     authentication.getPrincipal().toString()).getAuthorities());\n             token.setDetails(authentication.getDetails());\n "},{"sha":"6cb7a7b09f3ac780088da189c2a1c65ce3b0f2d5","filename":"core/src/main/java/org/syncope/core/security/SyncopeUserDetailsService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -28,13 +28,13 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n \n @Configurable\n public class SyncopeUserDetailsService implements UserDetailsService {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n@@ -70,7 +70,7 @@ public UserDetails loadUserByUsername(final String username)\n                         \"Invalid user id: \" + username, e);\n             }\n \n-            SyncopeUser user = syncopeUserDAO.find(id);\n+            SyncopeUser user = userDAO.find(id);\n             if (user == null) {\n                 throw new UsernameNotFoundException(\n                         \"Could not find any user with id \" + id);"},{"sha":"481e1c037407b92a49ba9a105dedbf063d96a254","filename":"core/src/main/java/org/syncope/core/workflow/BaseSendEmail.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FBaseSendEmail.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -25,16 +25,15 @@\n import org.apache.commons.mail.EmailException;\n import org.apache.commons.mail.HtmlEmail;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfDAO;\n+import org.syncope.core.persistence.dao.ConfDAO;\n \n public class BaseSendEmail extends OSWorkflowComponent\n         implements FunctionProvider {\n \n-    protected SyncopeConfDAO syncopeConfigurationDAO;\n+    protected ConfDAO syncopeConfigurationDAO;\n \n     public BaseSendEmail() {\n-        syncopeConfigurationDAO =\n-                (SyncopeConfDAO) context.getBean(\"syncopeConfDAOImpl\");\n+        syncopeConfigurationDAO = (ConfDAO) context.getBean(\"confDAOImpl\");\n     }\n \n     protected String getEmailBody(String urlPrefix, String template,"},{"sha":"8b7c0860b70939eac9c322e96c7dce6ab876d45a","filename":"core/src/main/java/org/syncope/core/workflow/GenerateToken.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FGenerateToken.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -21,7 +21,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.SyncopeConfDAO;\n+import org.syncope.core.persistence.dao.ConfDAO;\n import javax.crypto.Cipher;\n import javax.crypto.SecretKey;\n import javax.crypto.SecretKeyFactory;\n@@ -31,21 +31,20 @@\n public class GenerateToken extends OSWorkflowComponent\n         implements FunctionProvider {\n \n-    private SyncopeConfDAO syncopeConfigurationDAO;\n+    private ConfDAO confDAO;\n \n     public GenerateToken() {\n         super();\n \n-        syncopeConfigurationDAO =\n-                (SyncopeConfDAO) context.getBean(\"syncopeConfDAOImpl\");\n+        confDAO = (ConfDAO) context.getBean(\"confDAOImpl\");\n     }\n \n     @Override\n     @Transactional\n     public void execute(Map transientVars, Map args, PropertySet ps)\n             throws WorkflowException {\n \n-        SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n+        SyncopeUser user = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n \n         final String token = (String) transientVars.get(\n@@ -54,16 +53,16 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n         LOG.debug(\"Received token {}\", token);\n \n         try {\n-            syncopeUser.generateToken(\n-                    Integer.parseInt(syncopeConfigurationDAO.find(\n+            user.generateToken(\n+                    Integer.parseInt(confDAO.find(\n                     \"token.length\").getConfValue()),\n-                    Integer.parseInt(syncopeConfigurationDAO.find(\n+                    Integer.parseInt(confDAO.find(\n                     \"token.expireTime\").getConfValue()), token);\n         } catch (MissingConfKeyException e) {\n             throw new WorkflowException(e);\n         }\n \n-        transientVars.put(Constants.SYNCOPE_USER, syncopeUser);\n+        transientVars.put(Constants.SYNCOPE_USER, user);\n     }\n \n     public final String encrypt(final String toBeCrypted) {\n@@ -73,7 +72,7 @@ public final String encrypt(final String toBeCrypted) {\n         try {\n \n             final DESKeySpec keySpec =\n-                    new DESKeySpec(syncopeConfigurationDAO.find(\n+                    new DESKeySpec(confDAO.find(\n                     \"token.encryption.key\").getConfValue().getBytes(\"UTF8\"));\n \n             final SecretKeyFactory keyFactory =\n@@ -109,7 +108,7 @@ public final String decrypt(final String toBeDecrypted) {\n         try {\n \n             final DESKeySpec keySpec =\n-                    new DESKeySpec(syncopeConfigurationDAO.find(\n+                    new DESKeySpec(confDAO.find(\n                     \"token.encryption.key\").getConfValue().getBytes(\"UTF8\"));\n \n             final SecretKeyFactory keyFactory ="},{"sha":"cdc7a3bd686a0bc06a53b7572dc9cb4fd1d06531","filename":"core/src/main/java/org/syncope/core/workflow/IsValidToken.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FIsValidToken.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -24,19 +24,21 @@ public class IsValidToken extends OSWorkflowComponent\n         implements Condition {\n \n     @Override\n-    public boolean passesCondition(Map transientVars, Map args, PropertySet ps)\n+    public boolean passesCondition(final Map transientVars,\n+            final Map args,\n+            final PropertySet propertySet)\n             throws WorkflowException {\n \n-        SyncopeUser syncopeUser = (SyncopeUser) transientVars.get(\n+        SyncopeUser user = (SyncopeUser) transientVars.get(\n                 Constants.SYNCOPE_USER);\n \n         final String token = (String) transientVars.get(Constants.TOKEN);\n \n-        boolean validToken = syncopeUser.checkToken(token);\n+        boolean validToken = user.checkToken(token);\n \n         if (validToken) {\n             LOG.debug(\"Remove valid token '{}': \", token);\n-            syncopeUser.removeToken();\n+            user.removeToken();\n         }\n \n         return validToken;"},{"sha":"287e0fef0f299cbdc962521720f7aac066b8d52b","filename":"core/src/main/resources/indexes.xml","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -14,7 +14,18 @@\n -->\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n-    <comment>Additional indexes</comment>\n+    <comment>Additional indexes (in respect to JPA's)</comment>\n+\n+    <entry key=\"v_schema_nameIndex\">CREATE INDEX v_schema_nameIndex ON user_search_attr(schema_name)</entry>\n+    <entry key=\"v_booleanvalueIndex\">CREATE INDEX v_booleanvalueIndex ON user_search_attr(v_booleanvalue)</entry>\n+    <entry key=\"v_datevalueIndex\">CREATE INDEX v_datevalueIndex ON user_search_attr(v_datevalue)</entry>\n+    <entry key=\"v_doublevalueIndex\">CREATE INDEX v_doublevalueIndex ON user_search_attr(v_doublevalue)</entry>\n+    <entry key=\"v_longvalueIndex\">CREATE INDEX v_longvalueIndex ON user_search_attr(v_longvalue)</entry>\n+    <entry key=\"v_stringvalueIndex\">CREATE INDEX v_stringvalueIndex ON user_search_attr(v_stringvalue)</entry>\n+\n+    <entry key=\"v_role_idIndex\">CREATE INDEX v_role_idIndex ON user_search_membership(role_id)</entry>\n+    <entry key=\"v_role_nameIndex\">CREATE INDEX v_role_nameIndex ON user_search_membership(role_name)</entry>\n+\n     <entry key=\"roleNameIndex\">CREATE INDEX roleNameIndex ON SyncopeRole(name)</entry>\n     <entry key=\"UAttrUniqueValueSchemaIndex\">CREATE INDEX UAttrUniqueValueSchemaIndex ON UAttrUniqueValue(schema_name)</entry>\n     <entry key=\"MAttrUniqueValueSchemaIndex\">CREATE INDEX MAttrUniqueValueSchemaIndex ON MAttrUniqueValue(schema_name)</entry>"},{"sha":"e539832ea0edc1d1741bbb5f46ad6e38f0007d1e","filename":"core/src/main/resources/persistence.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -19,4 +19,7 @@ hibernate.connection.password=syncope\n hibernate.dialect=org.hibernate.dialect.Oracle10gDialect\n #dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n dbUnitDataTypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory\n-database.schema=SYNCOPE\n\\ No newline at end of file\n+database.schema=SYNCOPE\n+\n+# criteria | native\n+search.mode=criteria"},{"sha":"c2dda62cca4abcc4b24d96d3c444bb40f2b70adf","filename":"core/src/main/resources/views.xml","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+    <comment>Views</comment>\n+    <entry key=\"user_search_attr\">\n+CREATE MATERIALIZED VIEW user_search_attr\n+PARALLEL\n+BUILD IMMEDIATE\n+REFRESH FORCE\n+AS\n+\n+SELECT ua.owner_id AS owner_id,\n+ua.schema_name AS schema_name,\n+uav.booleanvalue AS booleanvalue,\n+uav.datevalue AS datevalue,\n+uav.doublevalue AS doublevalue,\n+uav.longvalue AS longvalue,\n+uav.stringvalue AS stringvalue\n+FROM uattruniquevalue uav, uattr ua\n+WHERE uav.attribute_id = ua.id\n+\n+UNION\n+\n+SELECT ua.owner_id AS owner_id,\n+ua.schema_name AS schema_name,\n+uav.booleanvalue AS booleanvalue,\n+uav.datevalue AS datevalue,\n+uav.doublevalue AS doublevalue,\n+uav.longvalue AS longvalue,\n+uav.stringvalue AS stringvalue\n+FROM uattrvalue uav, uattr ua\n+WHERE uav.attribute_id = ua.id\n+\n+UNION\n+\n+SELECT u.id AS owner_id, uschema.name AS schema_name,\n+NULL AS booleanvalue,\n+NULL AS datevalue,\n+NULL AS doublevalue,\n+NULL AS longvalue,\n+NULL AS stringvalue\n+FROM syncopeuser u CROSS JOIN uschema\n+LEFT OUTER JOIN uattr ua ON (uschema.name = ua.schema_name AND ua.owner_id = u.id)\n+WHERE ua.id IS NULL\n+    </entry>\n+    <entry key=\"user_search_membership\">\n+CREATE MATERIALIZED VIEW user_search_membership\n+PARALLEL\n+BUILD IMMEDIATE\n+REFRESH FORCE\n+AS\n+\n+SELECT m.syncopeuser_id AS user_id, r.id AS role_id, r.name AS role_name\n+FROM membership m, syncoperole r\n+WHERE m.syncoperole_id = r.id\n+    </entry>\n+</properties>"},{"sha":"c4a55e36e42c47cd305cef0f932db1f197257cd3","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttrTest.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -31,37 +31,37 @@\n import org.syncope.types.EntityViolationType;\n \n @Transactional\n-public class AttributeTest extends AbstractTest {\n+public class AttrTest extends AbstractTest {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n-    private AttributeDAO attributeDAO;\n+    private AttrDAO attrDAO;\n \n     @Autowired\n     private SchemaDAO userSchemaDAO;\n \n     @Test\n     public final void findAll() {\n-        List<UAttr> list = attributeDAO.findAll(UAttr.class);\n+        List<UAttr> list = attrDAO.findAll(UAttr.class);\n         assertEquals(\"did not get expected number of attributes \",\n                 8, list.size());\n     }\n \n     @Test\n     public final void findById() {\n-        UAttr attribute = attributeDAO.find(100L, UAttr.class);\n+        UAttr attribute = attrDAO.find(100L, UAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n-        attribute = attributeDAO.find(200L, UAttr.class);\n+        attribute = attrDAO.find(200L, UAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n     }\n \n     @Test\n     public final void read() {\n-        UAttr attribute = attributeDAO.find(100L, UAttr.class);\n+        UAttr attribute = attrDAO.find(100L, UAttr.class);\n         assertNotNull(attribute);\n \n         assertTrue(attribute.getValues().isEmpty());\n@@ -72,7 +72,7 @@ public final void read() {\n     public final void save()\n             throws ClassNotFoundException {\n \n-        SyncopeUser user = syncopeUserDAO.find(1L);\n+        SyncopeUser user = userDAO.find(1L);\n \n         USchema emailSchema = userSchemaDAO.find(\"email\", USchema.class);\n         assertNotNull(emailSchema);\n@@ -100,13 +100,13 @@ public final void save()\n \n         InvalidEntityException iee = null;\n         try {\n-            attribute = attributeDAO.save(attribute);\n+            attribute = attrDAO.save(attribute);\n         } catch (InvalidEntityException e) {\n             iee = e;\n         }\n         assertNull(iee);\n \n-        UAttr actual = attributeDAO.find(attribute.getId(),\n+        UAttr actual = attrDAO.find(attribute.getId(),\n                 UAttr.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attribute, actual);\n@@ -134,7 +134,7 @@ public final void validateAndSave() {\n \n         InvalidEntityException iee = null;\n         try {\n-            attribute = attributeDAO.save(attribute);\n+            attribute = attrDAO.save(attribute);\n         } catch (InvalidEntityException e) {\n             iee = e;\n         }\n@@ -147,10 +147,10 @@ public final void validateAndSave() {\n \n     @Test\n     public final void delete() {\n-        UAttr attribute = attributeDAO.find(200L, UAttr.class);\n+        UAttr attribute = attrDAO.find(200L, UAttr.class);\n         String attrSchemaName = attribute.getSchema().getName();\n \n-        attributeDAO.delete(attribute.getId(), UAttr.class);\n+        attrDAO.delete(attribute.getId(), UAttr.class);\n \n         USchema schema = userSchemaDAO.find(attrSchemaName, USchema.class);\n         assertNotNull(\"user attribute schema deleted when deleting values\",","previous_filename":"core/src/test/java/org/syncope/core/persistence/dao/AttributeTest.java"},{"sha":"61d3e881468f597d9a98f767563728b3afb3772f","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerAttrTest.java","status":"renamed","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -24,53 +24,53 @@\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n-import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n-public class DerivedAttributeTest extends AbstractTest {\n+public class DerAttrTest extends AbstractTest {\n \n     @Autowired\n-    private DerivedAttributeDAO derivedAttributeDAO;\n+    private DerAttrDAO derAttrDAO;\n+\n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n+\n     @Autowired\n-    private DerivedSchemaDAO derivedSchemaDAO;\n+    private DerSchemaDAO derSchemaDAO;\n \n     @Test\n     public final void findAll() {\n-        List<UDerAttr> list = derivedAttributeDAO.findAll(\n+        List<UDerAttr> list = derAttrDAO.findAll(\n                 UDerAttr.class);\n         assertEquals(\"did not get expected number of derived attributes \",\n                 1, list.size());\n     }\n \n     @Test\n     public final void findById() {\n-        UDerAttr attribute = derivedAttributeDAO.find(1000L,\n+        UDerAttr attribute = derAttrDAO.find(1000L,\n                 UDerAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n     }\n \n     @Test\n-    public final void save() throws ClassNotFoundException {\n+    public final void save()\n+            throws ClassNotFoundException {\n         UDerSchema cnSchema =\n-                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n+                derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNotNull(cnSchema);\n \n-        SyncopeUser owner = syncopeUserDAO.find(3L);\n+        SyncopeUser owner = userDAO.find(3L);\n         assertNotNull(\"did not get expected user\", owner);\n \n         UDerAttr derivedAttribute = new UDerAttr();\n         derivedAttribute.setOwner(owner);\n         derivedAttribute.setDerivedSchema(cnSchema);\n \n-        derivedAttribute = derivedAttributeDAO.save(derivedAttribute);\n+        derivedAttribute = derAttrDAO.save(derivedAttribute);\n \n-        UDerAttr actual = derivedAttributeDAO.find(\n+        UDerAttr actual = derAttrDAO.find(\n                 derivedAttribute.getId(), UDerAttr.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(derivedAttribute, actual);\n@@ -81,28 +81,28 @@ public final void save() throws ClassNotFoundException {\n         UAttrValue surnameAttribute =\n                 (UAttrValue) owner.getAttribute(\n                 \"surname\").getValues().iterator().next();\n-        \n+\n         assertEquals(surnameAttribute.getValue() + \", \"\n                 + firstnameAttribute.getValue(),\n                 derivedAttribute.getValue(owner.getAttributes()));\n     }\n \n     @Test\n     public final void delete() {\n-        UDerAttr attribute = derivedAttributeDAO.find(1000L,\n+        UDerAttr attribute = derAttrDAO.find(1000L,\n                 UDerAttr.class);\n         String attributeSchemaName =\n                 attribute.getDerivedSchema().getName();\n \n-        derivedAttributeDAO.delete(attribute.getId(),\n+        derAttrDAO.delete(attribute.getId(),\n                 UDerAttr.class);\n \n-        UDerAttr actual = derivedAttributeDAO.find(1000L,\n+        UDerAttr actual = derAttrDAO.find(1000L,\n                 UDerAttr.class);\n         assertNull(\"delete did not work\", actual);\n \n         UDerSchema attributeSchema =\n-                derivedSchemaDAO.find(attributeSchemaName,\n+                derSchemaDAO.find(attributeSchemaName,\n                 UDerSchema.class);\n         assertNotNull(\"user derived attribute schema deleted \"\n                 + \"when deleting values\",","previous_filename":"core/src/test/java/org/syncope/core/persistence/dao/DerivedAttributeTest.java"},{"sha":"c623933ac43208c122cae0bdec37793e2cd93ed1","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerSchemaTest.java","status":"renamed","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -22,30 +22,28 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n-public class DerivedSchemaTest extends AbstractTest {\n+public class DerSchemaTest extends AbstractTest {\n \n     @Autowired\n-    private DerivedSchemaDAO derivedSchemaDAO;\n+    private DerSchemaDAO derSchemaDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n     @Test\n     public final void findAll() {\n         List<UDerSchema> list =\n-                derivedSchemaDAO.findAll(UDerSchema.class);\n-        assertEquals(\"did not get expected number of derived attribute schemas \",\n-                1, list.size());\n+                derSchemaDAO.findAll(UDerSchema.class);\n+        assertEquals(1, list.size());\n     }\n \n     @Test\n     public final void findByName() {\n         UDerSchema attributeSchema =\n-                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n+                derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNotNull(\"did not find expected derived attribute schema\",\n                 attributeSchema);\n     }\n@@ -61,24 +59,24 @@ public final void save() {\n         derivedAttributeSchema.addSchema(\n                 schemaDAO.find(\"surname\", USchema.class));\n \n-        derivedSchemaDAO.save(derivedAttributeSchema);\n+        derSchemaDAO.save(derivedAttributeSchema);\n \n         UDerSchema actual =\n-                derivedSchemaDAO.find(\"cn2\", UDerSchema.class);\n+                derSchemaDAO.find(\"cn2\", UDerSchema.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(derivedAttributeSchema, actual);\n     }\n \n     @Test\n     public final void delete() {\n         UDerSchema attributeSchema =\n-                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n+                derSchemaDAO.find(\"cn\", UDerSchema.class);\n \n-        derivedSchemaDAO.delete(attributeSchema.getName(),\n+        derSchemaDAO.delete(attributeSchema.getName(),\n                 UDerSchema.class);\n \n         UDerSchema actual =\n-                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n+                derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n }","previous_filename":"core/src/test/java/org/syncope/core/persistence/dao/DerivedSchemaTest.java"},{"sha":"f9ba59f00c379112af4e4a167a55510bf9ac1d1d","filename":"core/src/test/java/org/syncope/core/persistence/dao/MembershipTest.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -23,20 +23,19 @@\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.MembershipDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n public class MembershipTest extends AbstractTest {\n \n     @Autowired\n     private MembershipDAO membershipDAO;\n+\n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n+\n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Test\n     public final void findAll() {\n@@ -52,8 +51,8 @@ public final void find() {\n \n     @Test\n     public final void save() {\n-        SyncopeUser user = syncopeUserDAO.find(4L);\n-        SyncopeRole role = syncopeRoleDAO.find(1L);\n+        SyncopeUser user = userDAO.find(4L);\n+        SyncopeRole role = roleDAO.find(1L);\n \n         Membership membership = new Membership();\n         membership.setSyncopeUser(user);"},{"sha":"d6925bec27d68eb2c16091c5c568e477c7c2a41e","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -34,9 +34,6 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n-\n     @Test\n     public final void findById() {\n         TargetResource resource ="},{"sha":"96c522687e1c3b11743c7ac482b13dd8dc52b011","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -27,7 +27,7 @@\n public class RoleTest extends AbstractTest {\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO syncopeRoleDAO;\n \n     @Test\n     public final void findAll() {"},{"sha":"318536cb01b597db721eb0b72f69f32f252708b6","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":31,"deletions":23,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -19,6 +19,7 @@\n \n import java.util.List;\n import java.util.Set;\n+import javax.annotation.Resource;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -33,37 +34,43 @@\n public class UserTest extends AbstractTest {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n+\n+    @Resource(name = \"userSearchDAOCriteriaImpl\")\n+    private UserSearchDAO userSearchCriteriaDAO;\n+\n+    @Resource(name = \"userSearchDAONativeImpl\")\n+    private UserSearchDAO userSearchNativeDAO;\n \n     @Test\n     public final void findAll() {\n-        List<SyncopeUser> list = syncopeUserDAO.findAll();\n+        List<SyncopeUser> list = userDAO.findAll();\n         assertEquals(\"did not get expected number of users \", 4, list.size());\n     }\n \n     @Test\n     public final void count() {\n-        Long count = syncopeUserDAO.count();\n+        Long count = userDAO.count();\n         assertNotNull(count);\n         assertEquals(4L, count.longValue());\n     }\n \n     @Test\n     public final void findAllByPageAndSize() {\n         // get first page\n-        List<SyncopeUser> list = syncopeUserDAO.findAll(1, 2);\n+        List<SyncopeUser> list = userDAO.findAll(1, 2);\n         assertEquals(\"did not get expected number of users \", 2, list.size());\n \n         // get second page\n-        list = syncopeUserDAO.findAll(2, 2);\n+        list = userDAO.findAll(2, 2);\n         assertEquals(\"did not get expected number of users \", 2, list.size());\n \n         // get second page with uncomplete set\n-        list = syncopeUserDAO.findAll(2, 3);\n+        list = userDAO.findAll(2, 3);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n \n         // get unexistent page\n-        list = syncopeUserDAO.findAll(3, 2);\n+        list = userDAO.findAll(3, 2);\n         assertEquals(\"did not get expected number of users \", 0, list.size());\n     }\n \n@@ -72,7 +79,7 @@ public final void findByAttributeValue() {\n         final UAttrValue usernameValue = new UAttrValue();\n         usernameValue.setStringValue(\"chicchiricco\");\n \n-        final List<SyncopeUser> list = syncopeUserDAO.findByAttrValue(\n+        final List<SyncopeUser> list = userDAO.findByAttrValue(\n                 \"username\", usernameValue);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n@@ -82,18 +89,18 @@ public final void findByAttributeBooleanValue() {\n         final UAttrValue coolValue = new UAttrValue();\n         coolValue.setBooleanValue(true);\n \n-        final List<SyncopeUser> list = syncopeUserDAO.findByAttrValue(\n+        final List<SyncopeUser> list = userDAO.findByAttrValue(\n                 \"cool\", coolValue);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n \n     @Test\n     public final void findById() {\n-        SyncopeUser user = syncopeUserDAO.find(1L);\n+        SyncopeUser user = userDAO.find(1L);\n         assertNotNull(\"did not find expected user\", user);\n-        user = syncopeUserDAO.find(3L);\n+        user = userDAO.find(3L);\n         assertNotNull(\"did not find expected user\", user);\n-        user = syncopeUserDAO.find(5L);\n+        user = userDAO.find(5L);\n         assertNull(\"found user but did not expect it\", user);\n     }\n \n@@ -102,9 +109,9 @@ public final void save() {\n         SyncopeUser user = new SyncopeUser();\n         user.setPassword(\"password\");\n \n-        user = syncopeUserDAO.save(user);\n+        user = userDAO.save(user);\n \n-        SyncopeUser actual = syncopeUserDAO.find(user.getId());\n+        SyncopeUser actual = userDAO.find(user.getId());\n         assertNotNull(\"expected save to work\", actual);\n     }\n \n@@ -133,7 +140,7 @@ public final void searchWithLikeCondition() {\n \n         assertTrue(cond.checkValidity());\n \n-        List<SyncopeUser> users = syncopeUserDAO.search(cond);\n+        List<SyncopeUser> users = userSearchCriteriaDAO.search(cond);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -148,7 +155,7 @@ public final void searchWithNotCondition() {\n         final NodeCond cond = NodeCond.getNotLeafCond(usernameLeafCond);\n         assertTrue(cond.checkValidity());\n \n-        final List<SyncopeUser> users = syncopeUserDAO.search(cond);\n+        final List<SyncopeUser> users = userSearchCriteriaDAO.search(cond);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n@@ -169,7 +176,7 @@ public final void searchByBoolean() {\n         final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.checkValidity());\n \n-        final List<SyncopeUser> users = syncopeUserDAO.search(cond);\n+        final List<SyncopeUser> users = userSearchCriteriaDAO.search(cond);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n@@ -201,28 +208,29 @@ public final void searchByPageAndSize() {\n \n         assertTrue(cond.checkValidity());\n \n-        List<SyncopeUser> users = syncopeUserDAO.search(cond, 1, 2, null);\n+        List<SyncopeUser> users =\n+                userSearchCriteriaDAO.search(cond, 1, 2, null);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        users = syncopeUserDAO.search(cond, 2, 2, null);\n+        users = userSearchCriteriaDAO.search(cond, 2, 2, null);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n \n     @Test\n     public final void delete() {\n-        SyncopeUser user = syncopeUserDAO.find(3L);\n+        SyncopeUser user = userDAO.find(3L);\n \n-        syncopeUserDAO.delete(user.getId());\n+        userDAO.delete(user.getId());\n \n-        SyncopeUser actual = syncopeUserDAO.find(3L);\n+        SyncopeUser actual = userDAO.find(3L);\n         assertNull(\"delete did not work\", actual);\n     }\n \n     @Test\n     public final void getRoleResources() {\n-        SyncopeUser user = syncopeUserDAO.find(1L);\n+        SyncopeUser user = userDAO.find(1L);\n         assertFalse(user.getInheritedTargetResources().isEmpty());\n     }\n }"},{"sha":"e0d3ece0716c7e05abd34ecc1b2b17d689d0925e","filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttrTest.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -21,17 +21,17 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n+import org.syncope.core.persistence.dao.AttValueDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n-public class AttributeTest extends AbstractTest {\n+public class AttrTest extends AbstractTest {\n \n     @Autowired\n-    private AttributeDAO attributeDAO;\n+    private AttrDAO attributeDAO;\n     @Autowired\n-    private AttributeValueDAO attributeValueDAO;\n+    private AttValueDAO attributeValueDAO;\n \n     @Test\n     public final void deleteAttribute() {","previous_filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttributeTest.java"},{"sha":"bbf3af98f69b8e52f4f29eb0efecd62941983f08","filename":"core/src/test/java/org/syncope/core/persistence/relationships/DerSchemaTest.java","status":"renamed","additions":20,"deletions":16,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -22,39 +22,43 @@\n import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n+import org.syncope.core.persistence.dao.DerAttrDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n-public class DerivedSchemaTest extends AbstractTest {\n+public class DerSchemaTest extends AbstractTest {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n-    private DerivedSchemaDAO derivedSchemaDAO;\n+    private DerSchemaDAO derSchemaDAO;\n+\n     @Autowired\n-    private AttributeDAO attributeDAO;\n+    private AttrDAO attrDAO;\n+\n     @Autowired\n-    DerivedAttributeDAO derivedAttributeDAO;\n+    private DerAttrDAO derAttrDAO;\n \n     @Test\n     public final void test() {\n-        derivedSchemaDAO.delete(\"cn\", UDerSchema.class);\n+        derSchemaDAO.delete(\"cn\", UDerSchema.class);\n \n-        derivedSchemaDAO.flush();\n+        derSchemaDAO.flush();\n \n-        assertNull(derivedSchemaDAO.find(\"cn\", UDerSchema.class));\n-        assertNull(derivedAttributeDAO.find(1000L, UDerAttr.class));\n+        assertNull(derSchemaDAO.find(\"cn\", UDerSchema.class));\n+        assertNull(derAttrDAO.find(1000L, UDerAttr.class));\n         assertTrue(schemaDAO.find(\"surname\",\n                 USchema.class).getDerivedSchemas().isEmpty());\n         assertTrue(schemaDAO.find(\"firstname\",\n                 USchema.class).getDerivedSchemas().isEmpty());\n-        assertNull(syncopeUserDAO.find(3L).getDerivedAttribute(\"cn\"));\n+        assertNull(userDAO.find(3L).getDerivedAttribute(\"cn\"));\n     }\n }","previous_filename":"core/src/test/java/org/syncope/core/persistence/relationships/DerivedSchemaTest.java"},{"sha":"1e37cb976b14231d12e66b474ea9471e6d283936","filename":"core/src/test/java/org/syncope/core/persistence/relationships/MembershipTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -24,7 +24,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.AbstractTest;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n \n @Transactional\n public class MembershipTest extends AbstractTest {\n@@ -33,7 +33,7 @@ public class MembershipTest extends AbstractTest {\n     private MembershipDAO membershipDAO;\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO syncopeRoleDAO;\n \n     @Test\n     public final void delete() {"},{"sha":"863d53a023e533181231823dfe01d59b20ff5109","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -14,14 +14,14 @@\n  */\n package org.syncope.core.persistence.relationships;\n \n+import static org.junit.Assert.*;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import static org.junit.Assert.*;\n import org.junit.Test;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.ResourceTO;\n@@ -34,7 +34,7 @@\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.Task;\n@@ -54,7 +54,7 @@ public class ResourceTest extends AbstractTest {\n     private ConnectorInstanceDAO connectorInstanceDAO;\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -160,7 +160,7 @@ public final void save()\n         resource.addMapping(accountId);\n \n         // specify an user schema\n-        SyncopeUser user = syncopeUserDAO.find(1L);\n+        SyncopeUser user = userDAO.find(1L);\n \n         assertNotNull(\"user not found\", user);\n \n@@ -247,7 +247,7 @@ public final void delete() {\n         SyncopeUser actualUser;\n         Collection<TargetResource> resources;\n         for (Long id : userIds) {\n-            actualUser = syncopeUserDAO.find(id);\n+            actualUser = userDAO.find(id);\n             assertNotNull(actualUser);\n             resources = actualUser.getTargetResources();\n             for (TargetResource res : resources) {"},{"sha":"f8f31494dd6c04b8ad6e1c2a3ea2e1f019554a37","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -23,59 +23,59 @@\n import org.syncope.core.persistence.beans.role.RAttrValue;\n import org.syncope.core.persistence.beans.role.RSchema;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n+import org.syncope.core.persistence.dao.AttValueDAO;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n public class RoleTest extends AbstractTest {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n-    private AttributeDAO attributeDAO;\n+    private AttrDAO attrDAO;\n \n     @Autowired\n-    private AttributeValueDAO attributeValueDAO;\n+    private AttValueDAO attrValueDAO;\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n     @Test\n     public final void delete() {\n-        syncopeRoleDAO.delete(2L);\n+        roleDAO.delete(2L);\n \n-        syncopeRoleDAO.flush();\n+        roleDAO.flush();\n \n-        assertNull(syncopeRoleDAO.find(2L));\n+        assertNull(roleDAO.find(2L));\n         assertEquals(1, entitlementDAO.find(\"base\").getRoles().size());\n-        assertTrue(syncopeUserDAO.find(2L).getRoles().size() == 1);\n-        assertNull(attributeDAO.find(700L, RAttr.class));\n-        assertNull(attributeValueDAO.find(41L, RAttrValue.class));\n+        assertTrue(userDAO.find(2L).getRoles().size() == 1);\n+        assertNull(attrDAO.find(700L, RAttr.class));\n+        assertNull(attrValueDAO.find(41L, RAttrValue.class));\n         assertNotNull(schemaDAO.find(\"icon\", RSchema.class));\n     }\n \n     @Test\n     public final void inheritedAttributes() {\n-        SyncopeRole director = syncopeRoleDAO.find(7L);\n+        SyncopeRole director = roleDAO.find(7L);\n \n         assertEquals(2, director.findInheritedAttributes().size());\n     }\n \n     @Test\n     public final void inheritedDerivedAttributes() {\n-        SyncopeRole director = syncopeRoleDAO.find(7L);\n+        SyncopeRole director = roleDAO.find(7L);\n \n         assertEquals(1, director.findInheritedDerivedAttributes().size());\n     }"},{"sha":"8166b49c73e03864e17faaade7083c29a85df7ac","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -25,11 +25,11 @@\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.util.AttributableUtil;\n import org.syncope.types.SourceMappingType;\n@@ -38,16 +38,16 @@\n public class SchemaTest extends AbstractTest {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n-    private DerivedSchemaDAO derivedSchemaDAO;\n+    private DerSchemaDAO derSchemaDAO;\n \n     @Autowired\n-    private AttributeDAO attributeDAO;\n+    private AttrDAO attrDAO;\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -93,10 +93,10 @@ public final void test1() {\n         }\n         assertTrue(mappings.isEmpty());\n \n-        assertNull(attributeDAO.find(100L, UAttr.class));\n-        assertNull(attributeDAO.find(300L, UAttr.class));\n-        assertNull(syncopeUserDAO.find(1L).getAttribute(\"username\"));\n-        assertNull(syncopeUserDAO.find(3L).getAttribute(\"username\"));\n+        assertNull(attrDAO.find(100L, UAttr.class));\n+        assertNull(attrDAO.find(300L, UAttr.class));\n+        assertNull(userDAO.find(1L).getAttribute(\"username\"));\n+        assertNull(userDAO.find(3L).getAttribute(\"username\"));\n     }\n \n     @Test\n@@ -131,7 +131,7 @@ public void test2() {\n \n         assertNull(schemaDAO.find(\"surname\", USchema.class));\n \n-        assertEquals(1, derivedSchemaDAO.find(\"cn\",\n+        assertEquals(1, derSchemaDAO.find(\"cn\",\n                 UDerSchema.class).getSchemas().size());\n     }\n }"},{"sha":"3e2cbb71bdea131209dfb1938aecc115123f5b0f","filename":"core/src/test/java/org/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -23,45 +23,45 @@\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.AttrDAO;\n+import org.syncope.core.persistence.dao.AttValueDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.membership.Membership;\n \n @Transactional\n public class UserTest extends AbstractTest {\n \n     @Autowired\n-    private SyncopeUserDAO syncopeUserDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n-    private SyncopeRoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n-    private AttributeDAO attributeDAO;\n+    private AttrDAO attrDAO;\n \n     @Autowired\n-    private AttributeValueDAO attributeValueDAO;\n+    private AttValueDAO attrValueDAO;\n \n     @Test\n     public final void test() {\n-        syncopeUserDAO.delete(4L);\n+        userDAO.delete(4L);\n \n-        syncopeUserDAO.flush();\n+        userDAO.flush();\n \n-        assertNull(syncopeUserDAO.find(4L));\n-        assertNull(attributeDAO.find(550L, UAttr.class));\n-        assertNull(attributeValueDAO.find(22L, UAttrValue.class));\n+        assertNull(userDAO.find(4L));\n+        assertNull(attrDAO.find(550L, UAttr.class));\n+        assertNull(attrValueDAO.find(22L, UAttrValue.class));\n         assertNotNull(schemaDAO.find(\"loginDate\", USchema.class));\n \n         List<Membership> memberships =\n-                syncopeRoleDAO.getMemberships(syncopeRoleDAO.find(7L));\n+                roleDAO.getMemberships(roleDAO.find(7L));\n         assertTrue(memberships.isEmpty());\n     }\n }"},{"sha":"93faf3933bb4de2d9c8135b67a8765b4f5e2363c","filename":"core/src/test/resources/exploredb.jsp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -73,7 +73,7 @@\n                                 dataSource);\n \n                         DatabaseMetaData dbm = conn.getMetaData();\n-                        String[] types = {\"TABLE\"};\n+                        String[] types = {\"TABLE\", \"VIEW\"};\n                         ResultSet rs = dbm.getTables(null, null, \"%\", types);\n             %>\n             <div style=\"width:300px;float:left;\">"},{"sha":"3b015d52a21a48dc889081824c7d25f0123c4269","filename":"core/src/test/resources/persistence.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -14,4 +14,5 @@ hibernate.connection.url=jdbc:hsqldb:mem:syncopedb\n hibernate.connection.username=sa\n hibernate.connection.password=\n hibernate.dialect=org.hibernate.dialect.HSQLDialect\n-dbUnitDataTypeFactory=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory\n\\ No newline at end of file\n+dbUnitDataTypeFactory=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory\n+search.mode=criteria"},{"sha":"838c8e024f187e6f9d770ae9bdb42948b24aa7f6","filename":"core/src/test/resources/views.xml","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0ba7481ffd8f438916358147dba284b5b20a7ad/core%2Fsrc%2Ftest%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fviews.xml?ref=e0ba7481ffd8f438916358147dba284b5b20a7ad","patch":"@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+    <comment>Views</comment>\n+    <entry key=\"user_search_attr\">\n+CREATE VIEW user_search_attr\n+AS\n+\n+SELECT ua.owner_id AS owner_id,\n+ua.schema_name AS schema_name,\n+uav.booleanvalue AS booleanvalue,\n+uav.datevalue AS datevalue,\n+uav.doublevalue AS doublevalue,\n+uav.longvalue AS longvalue,\n+uav.stringvalue AS stringvalue\n+FROM uattruniquevalue uav, uattr ua\n+WHERE uav.attribute_id = ua.id\n+\n+UNION\n+\n+SELECT ua.owner_id AS owner_id,\n+ua.schema_name AS schema_name,\n+uav.booleanvalue AS booleanvalue,\n+uav.datevalue AS datevalue,\n+uav.doublevalue AS doublevalue,\n+uav.longvalue AS longvalue,\n+uav.stringvalue AS stringvalue\n+FROM uattrvalue uav, uattr ua\n+WHERE uav.attribute_id = ua.id\n+\n+UNION\n+\n+SELECT u.id AS owner_id, uschema.name AS schema_name,\n+NULL AS booleanvalue,\n+NULL AS datevalue,\n+NULL AS doublevalue,\n+NULL AS longvalue,\n+NULL AS stringvalue\n+FROM syncopeuser u CROSS JOIN uschema\n+LEFT OUTER JOIN uattr ua ON (uschema.name = ua.schema_name AND ua.owner_id = u.id)\n+WHERE ua.id IS NULL\n+    </entry>\n+    <entry key=\"user_search_membership\">\n+CREATE VIEW user_search_membership\n+AS\n+\n+SELECT m.syncopeuser_id AS user_id, r.id AS role_id, r.name AS role_name\n+FROM membership m, syncoperole r\n+WHERE m.syncoperole_id = r.id\n+    </entry>\n+</properties>"}]}