{"sha":"c7adba1a0f961b1a18904da13240284c157e7246","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM3YWRiYTFhMGY5NjFiMWExODkwNGRhMTMyNDAyODRjMTU3ZTcyNDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-28T15:20:12Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-28T15:20:12Z"},"message":"Merge from 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1414751 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1103f7b592212beaa35bfc935a32a0057ef962f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1103f7b592212beaa35bfc935a32a0057ef962f6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c7adba1a0f961b1a18904da13240284c157e7246","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7adba1a0f961b1a18904da13240284c157e7246","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c7adba1a0f961b1a18904da13240284c157e7246","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7adba1a0f961b1a18904da13240284c157e7246/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bc0294f00a3f7ea0d4b1e59766d7d99e9ebebd83","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc0294f00a3f7ea0d4b1e59766d7d99e9ebebd83","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bc0294f00a3f7ea0d4b1e59766d7d99e9ebebd83"}],"stats":{"total":191,"additions":95,"deletions":96},"files":[{"sha":"9e4655a936aa82dcb69b6b43a4c9aa8c2fb2fd71","filename":"console/src/main/java/org/apache/syncope/console/pages/BasePage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.console.SyncopeApplication;\n import org.apache.syncope.console.SyncopeSession;\n-import org.apache.syncope.console.rest.UserRequestRestClient;\n+import org.apache.syncope.console.rest.UserRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.LinkPanel;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n@@ -53,7 +53,7 @@ public class BasePage extends AbstractBasePage implements IAjaxIndicatorAware {\n     private final static int EDIT_PROFILE_WIN_WIDTH = 800;\n \n     @SpringBean\n-    private UserRequestRestClient profileRestClient;\n+    private UserRestClient userRestClient;\n \n     @SpringBean(name = \"version\")\n     private String version;\n@@ -117,7 +117,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n             editProfileFrag = new Fragment(\"editProfile\", \"adminEmptyFrag\", this);\n         } else {\n             final UserTO userTO = SyncopeSession.get().isAuthenticated()\n-                    ? profileRestClient.readProfile()\n+                    ? userRestClient.readProfile()\n                     : new UserTO();\n \n             editProfileFrag = new Fragment(\"editProfile\", \"editProfileFrag\", this);"},{"sha":"c98234c9b2f7c4cfc96fdf3bfb697771a3245ef9","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -29,10 +29,6 @@\n @Component\n public class UserRequestRestClient extends AbstractBaseRestClient {\n \n-    public UserTO readProfile() {\n-        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/request/read/self\", UserTO.class);\n-    }\n-\n     public List<UserRequestTO> list() {\n         return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n                 baseURL + \"user/request/list\", UserRequestTO[].class));"},{"sha":"ebdefa2516c998e7fb767ffb5d99107c2e0cef02","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -91,6 +91,10 @@ public UserTO read(String username) {\n         return userTO;\n     }\n \n+    public UserTO readProfile() {\n+        return SyncopeSession.get().getRestTemplate().getForObject(baseURL + \"user/read/self\", UserTO.class);\n+    }\n+\n     public Integer searchCount(final NodeCond searchCond) {\n         return SyncopeSession.get().getRestTemplate().postForObject(\n                 baseURL + \"user/search/count.json\", searchCond, Integer.class);"},{"sha":"6b1175d5db66bbbd8c459625e9da6d3eabad60ae","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":27,"deletions":15,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -93,7 +93,7 @@ public class UserController {\n     private UserSearchDAO searchDAO;\n \n     @Autowired\n-    private UserDataBinder userDataBinder;\n+    private UserDataBinder dataBinder;\n \n     @Autowired\n     private UserWorkflowAdapter wfAdapter;\n@@ -123,7 +123,7 @@ public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Verified password for: \" + username);\n \n-        return new ModelAndView().addObject(userDataBinder.verifyPassword(username, password));\n+        return new ModelAndView().addObject(dataBinder.verifyPassword(username, password));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n@@ -161,7 +161,7 @@ public List<UserTO> list() {\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n \n         for (SyncopeUser user : users) {\n-            userTOs.add(userDataBinder.getUserTO(user));\n+            userTOs.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n@@ -180,7 +180,7 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n-            userTOs.add(userDataBinder.getUserTO(user));\n+            userTOs.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n@@ -195,7 +195,7 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n     public UserTO read(@PathVariable(\"userId\") final Long userId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        UserTO result = userDataBinder.getUserTO(userId);\n+        UserTO result = dataBinder.getUserTO(userId);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + userId);\n@@ -209,14 +209,26 @@ public UserTO read(@PathVariable(\"userId\") final Long userId)\n     public UserTO read(@PathVariable final String username)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        UserTO result = userDataBinder.getUserTO(username);\n+        UserTO result = dataBinder.getUserTO(username);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + username);\n \n         return result;\n     }\n \n+    @PreAuthorize(\"isAuthenticated()\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/self\")\n+    @Transactional(readOnly = true)\n+    public UserTO read() throws NotFoundException {\n+        UserTO userTO = dataBinder.getAuthenticatedUserTO();\n+\n+        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n+                \"Successfully read own data: \" + userTO.getUsername());\n+\n+        return userTO;\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n@@ -234,7 +246,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n                 getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.add(userDataBinder.getUserTO(user));\n+            result.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -262,7 +274,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.add(userDataBinder.getUserTO(user));\n+            result.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -320,7 +332,7 @@ public void handle(final String resourceName, final PropagationTaskExecStatus ex\n \n         notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n \n-        final UserTO savedTO = userDataBinder.getUserTO(created.getResult().getKey());\n+        final UserTO savedTO = dataBinder.getUserTO(created.getResult().getKey());\n         savedTO.setPropagationTOs(propagations);\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n@@ -370,7 +382,7 @@ public void handle(final String resourceName, final PropagationTaskExecStatus ex\n \n         notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n \n-        final UserTO updatedTO = userDataBinder.getUserTO(updated.getResult().getKey());\n+        final UserTO updatedTO = dataBinder.getUserTO(updated.getResult().getKey());\n         updatedTO.setPropagationTOs(propagations);\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n@@ -515,7 +527,7 @@ public UserTO delete(@PathVariable final String username)\n             throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n         LOG.debug(\"User delete called with {}\", username);\n \n-        UserTO result = userDataBinder.getUserTO(username);\n+        UserTO result = dataBinder.getUserTO(username);\n         long userId = result.getId();\n \n         return doDelete(userId);\n@@ -537,7 +549,7 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"t\n \n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n \n-        final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n+        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n@@ -565,7 +577,7 @@ public List<WorkflowFormTO> getForms() {\n     public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId)\n             throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n \n-        SyncopeUser user = userDataBinder.getUserFromId(userId);\n+        SyncopeUser user = dataBinder.getUserFromId(userId);\n         WorkflowFormTO result = wfAdapter.getForm(user.getWorkflowId());\n \n         auditManager.audit(Category.user, UserSubCategory.getFormForUser, Result.success,\n@@ -605,7 +617,7 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n                 getPerformedTasks()), updated.getResult().getValue(), null, null);\n         taskExecutor.execute(tasks);\n \n-        final UserTO savedTO = userDataBinder.getUserTO(updated.getResult().getKey());\n+        final UserTO savedTO = dataBinder.getUserTO(updated.getResult().getKey());\n \n         auditManager.audit(Category.user, UserSubCategory.submitForm, Result.success,\n                 \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n@@ -650,7 +662,7 @@ private UserTO setStatus(final SyncopeUser user, final String token, final Set<S\n         taskExecutor.execute(tasks);\n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n \n-        final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n+        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n \n         auditManager.audit(Category.user, UserSubCategory.setStatus, Result.success,\n                 \"Successfully changed status to \" + savedTO.getStatus() + \" for user: \" + savedTO.getUsername());"},{"sha":"1f90ca3a52110ea28c1dab4053c9f8ab6a47d2b7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":26,"deletions":42,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -67,29 +67,15 @@ public class UserRequestController {\n     @Autowired\n     private UserRequestDataBinder dataBinder;\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/self\")\n-    @Transactional(readOnly = true)\n-    public UserTO read() throws NotFoundException {\n-\n-        UserTO userTO = dataBinder.getAuthUserTO();\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n-                \"Successfully read self data\");\n-\n-        return userTO;\n-    }\n-\n     private Boolean isCreateAllowedByConf() {\n-        SyncopeConf createRequestAllowed = confDAO.find(\"createRequest.allowed\", \"false\");\n+        final SyncopeConf createRequestAllowed = confDAO.find(\"createRequest.allowed\", \"false\");\n \n         return Boolean.valueOf(createRequestAllowed.getValue());\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/create/allowed\")\n     @Transactional(readOnly = true)\n     public ModelAndView isCreateAllowed() {\n-\n         auditManager.audit(Category.userRequest, UserRequestSubCategory.isCreateAllowed, Result.success,\n                 \"Successfully checked whether self create is allowed\");\n \n@@ -98,7 +84,6 @@ public ModelAndView isCreateAllowed() {\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public UserRequestTO create(@RequestBody final UserTO userTO) throws UnauthorizedRoleException {\n-\n         if (!isCreateAllowedByConf()) {\n             LOG.error(\"Create requests are not allowed\");\n \n@@ -146,6 +131,29 @@ public UserRequestTO update(@RequestBody final UserMod userMod)\n         return dataBinder.getUserRequestTO(request);\n     }\n \n+    @PreAuthorize(\"isAuthenticated()\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n+    public UserRequestTO delete(@PathVariable(\"userId\") final Long userId) throws NotFoundException,\n+            UnauthorizedRoleException {\n+\n+        LOG.debug(\"Request user delete called with {}\", userId);\n+\n+        try {\n+            dataBinder.testDelete(userId);\n+        } catch (RollbackException e) {\n+            LOG.debug(\"Testing delete - ignore exception\");\n+        }\n+\n+        UserRequest request = new UserRequest();\n+        request.setUserId(userId);\n+        request = userRequestDAO.save(request);\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n+                \"Successfully deleted user request for user\" + userId);\n+\n+        return dataBinder.getUserRequestTO(request);\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true)\n@@ -166,7 +174,6 @@ public List<UserRequestTO> list() {\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{requestId}\")\n     @Transactional(readOnly = true)\n     public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) throws NotFoundException {\n-\n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n@@ -178,44 +185,21 @@ public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) throw\n         return dataBinder.getUserRequestTO(request);\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{requestId}\")\n-    public UserRequestTO delete(@PathVariable(\"requestId\") final Long userId) throws NotFoundException, UnauthorizedRoleException {\n-\n-        LOG.debug(\"Request user delete called with {}\", userId);\n-\n-        try {\n-            dataBinder.testDelete(userId);\n-        } catch (RollbackException e) {\n-            LOG.debug(\"Testing delete - ignore exception\");\n-        }\n-\n-        UserRequest request = new UserRequest();\n-        request.setUserId(userId);\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + userId);\n-\n-        return dataBinder.getUserRequestTO(request);\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/deleteRequest/{requestId}\")\n     public UserRequestTO deleteRequest(@PathVariable(\"requestId\") final Long requestId) throws NotFoundException {\n-\n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n-        \n+\n         UserRequestTO requestToDelete = dataBinder.getUserRequestTO(request);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n                 \"Successfully deleted user request for user\" + request.getUserId());\n \n         userRequestDAO.delete(requestId);\n-        \n+\n         return requestToDelete;\n     }\n }"},{"sha":"2edbecb5a48f7fbc2af67a257ebeab0cf1fb11dc","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -56,6 +56,7 @@\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -94,6 +95,12 @@ public SyncopeUser getUserFromId(final Long userId)\n         return user;\n     }\n \n+    @Transactional(readOnly = true)\n+    public UserTO getAuthenticatedUserTO() throws NotFoundException {\n+        SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n+        return getUserTO(authUser);\n+    }\n+\n     @Transactional(readOnly = true)\n     public boolean verifyPassword(final String username, final String password)\n             throws NotFoundException, UnauthorizedRoleException {\n@@ -136,8 +143,7 @@ public SyncopeUser getUserFromUsername(final String username)\n      * Get pre-configured password cipher algorithm.\n      *\n      * @return cipher algorithm.\n-     * @throws NotFoundException in case of algorithm not included into\n-     * <code>CipherAlgorithm</code>.\n+     * @throws NotFoundException in case of algorithm not included into <code>CipherAlgorithm</code>.\n      */\n     private CipherAlgorithm getCipherAlgoritm()\n             throws NotFoundException {"},{"sha":"89e710f71185389ca46598c2c8134061d2b1c0fb","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserRequestDataBinder.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -42,9 +42,8 @@ public class UserRequestDataBinder {\n     @Autowired\n     private UserDAO userDAO;\n \n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public SyncopeUser getUserFromId(final Long userId) throws NotFoundException, UnauthorizedRoleException {\n-\n         if (userId == null) {\n             throw new NotFoundException(\"Null user id\");\n         }\n@@ -63,9 +62,8 @@ public SyncopeUser getUserFromId(final Long userId) throws NotFoundException, Un\n         return user;\n     }\n \n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO getAuthUserTO() throws NotFoundException {\n-\n         SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n         return userDataBinder.getUserTO(authUser);\n     }\n@@ -77,7 +75,7 @@ public UserRequestTO getUserRequestTO(final UserRequest request) {\n         return result;\n     }\n \n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public void testCreate(final UserTO userTO) {\n         SyncopeUser user = new SyncopeUser();\n         userDataBinder.create(user, userTO);\n@@ -86,19 +84,17 @@ public void testCreate(final UserTO userTO) {\n         throw new RollbackException();\n     }\n \n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public void testUpdate(final UserMod userMod) throws NotFoundException, UnauthorizedRoleException {\n-\n         SyncopeUser user = getUserFromId(userMod.getId());\n         userDataBinder.update(user, userMod);\n         userDAO.save(user);\n \n         throw new RollbackException();\n     }\n \n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public void testDelete(final Long userId) throws NotFoundException, UnauthorizedRoleException {\n-\n         SyncopeUser user = getUserFromId(userId);\n         userDAO.delete(user);\n "},{"sha":"cb2b53490bc19fcf91ee6d999b7ccc44074448e5","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":3,"deletions":21,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -26,7 +26,6 @@\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.UserMod;\n@@ -41,24 +40,6 @@\n \n public class UserRequestTestITCase extends AbstractTest {\n \n-    @Test\n-    public void selfRead() {\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n-                getRequestFactory());\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n-\n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n-            fail();\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n-        }\n-\n-        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/request/read/self\", UserTO.class);\n-        assertEquals(\"user1\", userTO.getUsername());\n-    }\n-\n     @Test\n     public void create() {\n         // 1. set create request not allowed\n@@ -168,7 +149,8 @@ public void update() {\n         assertNotNull(userTO);\n \n         // 9. user password has now changed\n-        verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=\" + userMod.getPassword(),\n+        verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=\" + userMod.\n+                getPassword(),\n                 Boolean.class, userTO.getUsername());\n         assertTrue(verify);\n     }\n@@ -199,7 +181,7 @@ public void delete() {\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), initialPassword));\n \n         // 4. now request user delete works\n-        UserRequestTO request = restTemplate.getForObject(BASE_URL + \"user/request/delete/{userId}\", \n+        UserRequestTO request = restTemplate.getForObject(BASE_URL + \"user/request/delete/{userId}\",\n                 UserRequestTO.class, userTO.getId());\n         assertNotNull(request);\n "},{"sha":"c420269ea8cb44a9f3fd5ba8520346a03b060928","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c7adba1a0f961b1a18904da13240284c157e7246/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=c7adba1a0f961b1a18904da13240284c157e7246","patch":"@@ -67,6 +67,7 @@\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.Assume;\n import org.springframework.util.StringUtils;\n+import org.springframework.web.client.HttpClientErrorException;\n \n public class UserTestITCase extends AbstractTest {\n \n@@ -125,6 +126,24 @@ public static UserTO getSampleTO(final String email) {\n         return userTO;\n     }\n \n+    @Test\n+    public void selfRead() {\n+        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n+\n+        try {\n+            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n+            fail();\n+        } catch (HttpClientErrorException e) {\n+            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+        }\n+\n+        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read/self\", UserTO.class);\n+        assertEquals(\"user1\", userTO.getUsername());\n+    }\n+\n     @Test\n     public void createUserWithNoPropagation() {\n         // get task list"}]}