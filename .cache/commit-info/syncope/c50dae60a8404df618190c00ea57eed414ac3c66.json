{"sha":"c50dae60a8404df618190c00ea57eed414ac3c66","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM1MGRhZTYwYTg0MDRkZjYxODE5MGMwMGVhNTdlZWQ0MTRhYzNjNjY=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-12-09T17:10:19Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-12-09T17:10:19Z"},"message":"[SYNCOPE-156] providing dynamic membership","tree":{"sha":"5179f90ee7a55887a063fe5fc761f4a07e947f22","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5179f90ee7a55887a063fe5fc761f4a07e947f22"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c50dae60a8404df618190c00ea57eed414ac3c66","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c50dae60a8404df618190c00ea57eed414ac3c66","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c50dae60a8404df618190c00ea57eed414ac3c66","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c50dae60a8404df618190c00ea57eed414ac3c66/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"1e51b34ea63c68f77f28c4e1111f7f248f8e420d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1e51b34ea63c68f77f28c4e1111f7f248f8e420d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1e51b34ea63c68f77f28c4e1111f7f248f8e420d"}],"stats":{"total":1854,"additions":1785,"deletions":69},"files":[{"sha":"3eb8c5b7e3fb1e300cc72d1f973c14302b27488e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -122,7 +122,7 @@ private Panel getAnyPanel(final String id, final PageReference pageReference, fi\n                         realmTO.getFullPath(),\n                         anyTypeTO.getKey()).\n                         addNewItemPanelBuilder(new UserWizardBuilder(\n-                                        BaseModal.CONTENT_ID, userTO, anyTypeTO.getClasses(), pageRef)).\n+                                BaseModal.CONTENT_ID, userTO, anyTypeTO.getClasses(), pageRef)).\n                         addNotificationPanel(BasePage.class.cast(this.pageRef.getPage()).getFeedbackPanel()).\n                         build(id);\n                 break;\n@@ -135,7 +135,7 @@ private Panel getAnyPanel(final String id, final PageReference pageReference, fi\n                         realmTO.getFullPath(),\n                         anyTypeTO.getKey()).\n                         addNewItemPanelBuilder(new GroupWizardBuilder(\n-                                        BaseModal.CONTENT_ID, groupTO, anyTypeTO.getClasses(), pageRef)).\n+                                BaseModal.CONTENT_ID, groupTO, anyTypeTO.getClasses(), pageRef)).\n                         addNotificationPanel(BasePage.class.cast(this.pageRef.getPage()).getFeedbackPanel()).\n                         build(id);\n                 break;\n@@ -149,7 +149,7 @@ private Panel getAnyPanel(final String id, final PageReference pageReference, fi\n                         realmTO.getFullPath(),\n                         anyTypeTO.getKey()).\n                         addNewItemPanelBuilder(new AnyWizardBuilder<AnyObjectTO>(\n-                                        BaseModal.CONTENT_ID, anyObjectTO, anyTypeTO.getClasses(), pageRef)).\n+                                BaseModal.CONTENT_ID, anyObjectTO, anyTypeTO.getClasses(), pageRef)).\n                         addNotificationPanel(BasePage.class.cast(this.pageRef.getPage()).getFeedbackPanel()).\n                         build(id);\n                 break;"},{"sha":"90ff64c28b53dfd65394805337dadea0b14fe67c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"added","additions":205,"deletions":0,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.search.SearchableFields;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.feedback.FeedbackMessage;\n+import org.apache.wicket.feedback.IFeedbackMessageFilter;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSearchPanel extends Panel {\n+\n+    private static final long serialVersionUID = 5922413053568696414L;\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchPanel.class);\n+\n+    protected SchemaRestClient schemaRestClient = new SchemaRestClient();\n+\n+    protected ResourceRestClient resourceRestClient = new ResourceRestClient();\n+\n+//    protected AuthRestClient authRestClient;\n+    protected IModel<List<String>> dnames;\n+\n+    protected IModel<List<String>> anames;\n+\n+    protected IModel<List<String>> resourceNames;\n+\n+//    protected IModel<List<String>> entitlements;\n+    protected IModel<List<SearchClause.Type>> types;\n+\n+    protected IModel<List<String>> groupNames;\n+\n+    protected NotificationPanel searchFeedback;\n+\n+    protected PropertyModel<List<SearchClause>> model;\n+\n+    protected WebMarkupContainer searchFormContainer;\n+\n+    protected AnyTypeKind typeKind;\n+\n+    protected boolean required;\n+\n+    public abstract static class Builder<T extends AbstractSearchPanel> implements Serializable {\n+\n+        private static final long serialVersionUID = 6308997285778809578L;\n+\n+        protected final PropertyModel<List<SearchClause>> model;\n+\n+        protected boolean required = true;\n+\n+        public Builder(final PropertyModel<List<SearchClause>> model) {\n+            this.model = model;\n+        }\n+\n+        public Builder<T> required(final boolean required) {\n+            this.required = required;\n+            return this;\n+        }\n+\n+        public abstract T build(final String id);\n+    }\n+\n+    protected AbstractSearchPanel(\n+            final String id,\n+            final PropertyModel<List<SearchClause>> model,\n+            final AnyTypeKind typeKind) {\n+        this(id, model, typeKind, true);\n+    }\n+\n+    protected AbstractSearchPanel(\n+            final String id,\n+            final PropertyModel<List<SearchClause>> model,\n+            final AnyTypeKind typeKind,\n+            final boolean required) {\n+\n+        super(id);\n+        populate();\n+\n+        this.typeKind = typeKind;\n+        this.required = required;\n+\n+        setOutputMarkupId(true);\n+\n+        searchFormContainer = new WebMarkupContainer(\"searchFormContainer\");\n+        searchFormContainer.setOutputMarkupId(true);\n+        add(searchFormContainer);\n+\n+        searchFeedback = new NotificationPanel(\"searchFeedback\", new IFeedbackMessageFilter() {\n+\n+            private static final long serialVersionUID = 6895024863321391672L;\n+\n+            @Override\n+            public boolean accept(final FeedbackMessage message) {\n+                boolean result;\n+\n+                // messages reported on the session have a null reporter\n+                if (message.getReporter() == null) {\n+                    result = false;\n+                } else {\n+                    // only accept messages coming from the children of the search form container\n+                    result = searchFormContainer.contains(message.getReporter(), true);\n+                }\n+\n+                return result;\n+            }\n+        });\n+        searchFeedback.setOutputMarkupId(true);\n+        add(searchFeedback);\n+\n+        final SearchClausePanel searchClausePanel = new SearchClausePanel(\"panel\", \"panel\",\n+                Model.of(new SearchClause()),\n+                required,\n+                types, anames, dnames, groupNames, resourceNames);\n+\n+        final MultiFieldPanel.Builder<SearchClause> searchView = new MultiFieldPanel.Builder<SearchClause>(model) {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected SearchClause newModelObject() {\n+                return new SearchClause();\n+            }\n+        };\n+\n+        searchFormContainer.add(searchView.build(\"search\", \"search\", searchClausePanel).hideLabel());\n+    }\n+\n+    protected void populate() {\n+        dnames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return SearchableFields.get(typeKind);\n+            }\n+        };\n+\n+        anames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return schemaRestClient.getPlainSchemaNames();\n+            }\n+        };\n+\n+        resourceNames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return CollectionUtils.collect(resourceRestClient.getAll(), new Transformer<ResourceTO, String>() {\n+\n+                    @Override\n+                    public String transform(final ResourceTO input) {\n+                        return input.getKey();\n+                    }\n+                }, new ArrayList<String>());\n+            }\n+        };\n+    }\n+\n+    public NotificationPanel getSearchFeedback() {\n+        return searchFeedback;\n+    }\n+}"},{"sha":"16115b07e8bc365f5678f61bd8f48bd7b634082a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.rest.GroupRestClient;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class AnyObjectSearchPanel extends AbstractSearchPanel {\n+\n+    private static final long serialVersionUID = -1769527800450203738L;\n+\n+    private final GroupRestClient groupRestClient = new GroupRestClient();\n+\n+    public static class Builder extends AbstractSearchPanel.Builder<AnyObjectSearchPanel> {\n+\n+        private static final long serialVersionUID = 6308997285778809578L;\n+\n+        public Builder(final PropertyModel<List<SearchClause>> model) {\n+            super(model);\n+        }\n+\n+        @Override\n+        public AnyObjectSearchPanel build(final String id) {\n+            return new AnyObjectSearchPanel(id, AnyTypeKind.ANY_OBJECT, this);\n+        }\n+    }\n+\n+    protected AnyObjectSearchPanel(final String id, final AnyTypeKind kind, final Builder builder) {\n+        super(id, builder.model, kind, builder.required);\n+    }\n+\n+    @Override\n+    protected void populate() {\n+        super.populate();\n+\n+        this.types = new LoadableDetachableModel<List<SearchClause.Type>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<SearchClause.Type> load() {\n+                List<SearchClause.Type> result = new ArrayList<SearchClause.Type>();\n+                result.add(SearchClause.Type.ATTRIBUTE);\n+                result.add(SearchClause.Type.MEMBERSHIP);\n+                result.add(SearchClause.Type.RESOURCE);\n+                return result;\n+            }\n+        };\n+\n+        this.groupNames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                List<GroupTO> groupTOs = groupRestClient.list(\"/\",\n+                        -1, -1,\n+                        new SortParam<>(\"name\", true),\n+                        null);\n+\n+                List<String> result = new ArrayList<>(groupTOs.size());\n+                for (GroupTO group : groupTOs) {\n+                    result.add(group.getName());\n+                }\n+\n+                return result;\n+            }\n+        };\n+    }\n+}"},{"sha":"046e00fa88f23247f559fc37c38b6405678d121a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public final class GroupSearchPanel extends AbstractSearchPanel {\n+\n+    private static final long serialVersionUID = 5757183539269316263L;\n+\n+    public static class Builder extends AbstractSearchPanel.Builder<GroupSearchPanel> {\n+\n+        private static final long serialVersionUID = 6308997285778809578L;\n+\n+        public Builder(final PropertyModel<List<SearchClause>> model) {\n+            super(model);\n+        }\n+\n+        @Override\n+        public GroupSearchPanel build(final String id) {\n+            return new GroupSearchPanel(id, this);\n+        }\n+    }\n+\n+    private GroupSearchPanel(final String id, final GroupSearchPanel.Builder builder) {\n+        super(id, builder.model, AnyTypeKind.USER, builder.required);\n+    }\n+\n+    @Override\n+    protected void populate() {\n+        super.populate();\n+\n+        this.types = new LoadableDetachableModel<List<SearchClause.Type>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<SearchClause.Type> load() {\n+                final List<SearchClause.Type> result = new ArrayList<SearchClause.Type>();\n+                result.add(SearchClause.Type.ATTRIBUTE);\n+                result.add(SearchClause.Type.RESOURCE);\n+                return result;\n+            }\n+        };\n+\n+        this.groupNames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return Collections.<String>emptyList();\n+            }\n+        };\n+    }\n+}"},{"sha":"403c498ce4a0509ea79654b58cb05704648b2521","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/MapOfListModel.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FMapOfListModel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FMapOfListModel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FMapOfListModel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class MapOfListModel<T> extends PropertyModel<List<T>> {\n+\n+    private static final long serialVersionUID = -7647997536634092231L;\n+\n+    private final String key;\n+\n+    public MapOfListModel(final Object modelObject, final String expression, final String key) {\n+        super(modelObject, expression);\n+        this.key = key;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<T> getObject() {\n+        final String expression = propertyExpression();\n+        final Object target = getInnermostModelOrObject();\n+\n+        if (target == null || StringUtils.isBlank(expression) || expression.startsWith(\".\")) {\n+            throw new IllegalArgumentException(\"Property expressions cannot start with a '.' character\");\n+        }\n+\n+        final Map<String, List<T>> map = (Map<String, List<T>>) PropertyResolver.getValue(expression, target);\n+\n+        final List<T> res;\n+        if (map.containsKey(key)) {\n+            res = map.get(key);\n+        } else {\n+            res = new ArrayList<T>();\n+            map.put(key, res);\n+        }\n+        return res;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void setObject(final List<T> object) {\n+        final String expression = propertyExpression();\n+        final Object target = getInnermostModelOrObject();\n+        ((Map<String, List<T>>) PropertyResolver.getValue(expression, target)).put(key, object);\n+    }\n+}"},{"sha":"dd46075bf941e5df91204d19fb16f4d29f0ca195","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClause.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+public final class SearchClause implements Serializable {\n+\n+    private static final long serialVersionUID = 2010794463096110104L;\n+\n+    public enum Operator {\n+\n+        AND,\n+        OR;\n+\n+    }\n+\n+    public enum Type {\n+\n+        ATTRIBUTE,\n+        MEMBERSHIP,\n+        RESOURCE,\n+        ENTITLEMENT;\n+\n+    }\n+\n+    public enum Comparator {\n+\n+        IS_NULL,\n+        IS_NOT_NULL,\n+        EQUALS,\n+        NOT_EQUALS,\n+        GREATER_OR_EQUALS,\n+        GREATER_THAN,\n+        LESS_OR_EQUALS,\n+        LESS_THAN;\n+\n+    }\n+\n+    private Operator operator;\n+\n+    private Type type;\n+\n+    private String property;\n+\n+    private Comparator comparator;\n+\n+    private String value;\n+\n+    public SearchClause() {\n+        setOperator(SearchClause.Operator.AND);\n+        setComparator(SearchClause.Comparator.EQUALS);\n+    }\n+\n+    public Operator getOperator() {\n+        return operator;\n+    }\n+\n+    public void setOperator(final Operator operator) {\n+        this.operator = operator;\n+    }\n+\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    public void setType(final Type type) {\n+        this.type = type;\n+    }\n+\n+    public String getProperty() {\n+        return property;\n+    }\n+\n+    public void setProperty(final String property) {\n+        this.property = property;\n+    }\n+\n+    public Comparator getComparator() {\n+        return comparator;\n+    }\n+\n+    public void setComparator(final Comparator comparator) {\n+        this.comparator = comparator;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final String value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"561c7440574c61f473c206fafb637ce52a1895f4","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"added","additions":488,"deletions":0,"changes":488,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,488 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import static org.apache.syncope.client.console.panels.search.SearchClause.Type.ATTRIBUTE;\n+\n+import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggle;\n+import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.checkbox.bootstraptoggle.BootstrapToggleConfig;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.search.SearchClause.Comparator;\n+import org.apache.syncope.client.console.panels.search.SearchClause.Operator;\n+import org.apache.syncope.client.console.panels.search.SearchClause.Type;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.MarkupContainer;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.CheckBox;\n+import org.apache.wicket.markup.html.form.FormComponent;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class SearchClausePanel extends FieldPanel<SearchClause> {\n+\n+    private static final long serialVersionUID = -527351923968737757L;\n+\n+    private final boolean required;\n+\n+    private final IModel<List<SearchClause.Type>> types;\n+\n+    private final IModel<List<String>> anames;\n+\n+    private final IModel<List<String>> dnames;\n+\n+    private final IModel<List<String>> groupNames;\n+\n+    private final IModel<List<String>> resourceNames;\n+\n+    private IModel<SearchClause> clause;\n+\n+    private final LoadableDetachableModel<List<Comparator>> comparators;\n+\n+    private final LoadableDetachableModel<List<String>> properties;\n+\n+    public SearchClausePanel(\n+            final String id,\n+            final String name,\n+            final Model<SearchClause> clause,\n+            final boolean required,\n+            final IModel<List<SearchClause.Type>> types,\n+            final IModel<List<String>> anames,\n+            final IModel<List<String>> dnames,\n+            final IModel<List<String>> groupNames,\n+            final IModel<List<String>> resourceNames\n+    ) {\n+\n+        super(id, name, clause);\n+\n+        this.clause = clause == null ? new Model<SearchClause>(null) : clause;\n+\n+        this.required = required;\n+        this.types = types;\n+        this.anames = anames;\n+        this.dnames = dnames;\n+        this.groupNames = groupNames;\n+        this.resourceNames = resourceNames;\n+\n+        field = new FormComponent<SearchClause>(\"container\", this.clause) {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+        };\n+\n+        add(field);\n+\n+        comparators = new LoadableDetachableModel<List<Comparator>>() {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected List<Comparator> load() {\n+                if (field.getModel().getObject() == null || field.getModel().getObject().getType() == null) {\n+                    return Collections.<Comparator>emptyList();\n+                }\n+\n+                switch (field.getModel().getObject().getType()) {\n+                    case ATTRIBUTE:\n+                        return Arrays.asList(SearchClause.Comparator.values());\n+\n+                    case MEMBERSHIP:\n+                    case RESOURCE:\n+                        return Arrays.asList(SearchClause.Comparator.EQUALS, SearchClause.Comparator.NOT_EQUALS);\n+                    default:\n+                        return Collections.<Comparator>emptyList();\n+                }\n+            }\n+        };\n+\n+        properties = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected List<String> load() {\n+                if (field.getModel().getObject() == null || field.getModel().getObject().getType() == null) {\n+                    return Collections.<String>emptyList();\n+                }\n+\n+                switch (field.getModel().getObject().getType()) {\n+                    case ATTRIBUTE:\n+                        final List<String> names = new ArrayList<String>(dnames.getObject());\n+                        if (anames.getObject() != null && !anames.getObject().isEmpty()) {\n+                            names.addAll(anames.getObject());\n+                        }\n+                        Collections.sort(names);\n+                        return names;\n+\n+                    case MEMBERSHIP:\n+                        return groupNames.getObject();\n+\n+                    case RESOURCE:\n+                        return resourceNames.getObject();\n+                    default:\n+                        return Collections.<String>emptyList();\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public SearchClause getModelObject() {\n+        return this.clause.getObject();\n+    }\n+\n+    @Override\n+    public FieldPanel<SearchClause> setModelObject(final SearchClause object) {\n+        this.clause.setObject(object);\n+        return super.setModelObject(object);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public FieldPanel<SearchClause> setNewModel(final ListItem item) {\n+        clause.setObject(SearchClause.class.cast(item.getModelObject()));\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel<SearchClause> setNewModel(final IModel<SearchClause> model) {\n+        clause = model;\n+        return super.setNewModel(model);\n+    }\n+\n+    @Override\n+    public final MarkupContainer add(final Component... childs) {\n+        return super.add(childs);\n+    }\n+\n+    @Override\n+    public FieldPanel<SearchClause> settingsDependingComponents() {\n+        final SearchClause searchClause = this.clause.getObject();\n+\n+        final WebMarkupContainer operatorContainer = new WebMarkupContainer(\"operatorContainer\") {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected void onComponentTag(final ComponentTag tag) {\n+                super.onComponentTag(tag);\n+                if (getIndex() == 0) {\n+                    tag.append(\"class\", \"glyphicon glyphicon-search\", \" \");\n+                }\n+            }\n+\n+        };\n+\n+        operatorContainer.setOutputMarkupId(true);\n+\n+        field.add(operatorContainer);\n+\n+        final BootstrapToggleConfig config = new BootstrapToggleConfig();\n+        config\n+                .withOnStyle(BootstrapToggleConfig.Style.info).withOffStyle(BootstrapToggleConfig.Style.warning)\n+                .withSize(BootstrapToggleConfig.Size.mini)\n+                .withOnLabel(\"AND\")\n+                .withOffLabel(\"OR\");\n+\n+        operatorContainer.add(new BootstrapToggle(\"operator\", new Model<Boolean>() {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public Boolean getObject() {\n+                return searchClause.getOperator() == Operator.AND;\n+            }\n+\n+            @Override\n+            public void setObject(final Boolean object) {\n+                searchClause.setOperator(object ? Operator.AND : Operator.OR);\n+            }\n+        }, config) {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected IModel<String> getOffLabel() {\n+                return Model.of(getString(\"Off\", null, \"Off\"));\n+            }\n+\n+            @Override\n+            protected IModel<String> getOnLabel() {\n+                return Model.of(getString(\"On\", null, \"On\"));\n+            }\n+\n+            @Override\n+            protected CheckBox newCheckBox(final String id, final IModel<Boolean> model) {\n+                final CheckBox checkBox = super.newCheckBox(id, model);\n+                checkBox.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                    private static final long serialVersionUID = 1L;\n+\n+                    @Override\n+                    protected void onUpdate(final AjaxRequestTarget target) {\n+                    }\n+                });\n+                return checkBox;\n+            }\n+        }.setVisible(getIndex() > 0).setOutputMarkupPlaceholderTag(true));\n+\n+        final AjaxDropDownChoicePanel<String> property = new AjaxDropDownChoicePanel<>(\n+                \"property\", \"property\", new PropertyModel<String>(searchClause, \"property\"));\n+        property.hideLabel().setRequired(required).setOutputMarkupId(true);\n+        property.setChoices(properties);\n+        field.add(property);\n+\n+        final AjaxDropDownChoicePanel<SearchClause.Comparator> comparator = new AjaxDropDownChoicePanel<>(\n+                \"comparator\", \"comparator\", new PropertyModel<SearchClause.Comparator>(searchClause, \"comparator\"));\n+        comparator.setChoices(comparators);\n+        comparator.setNullValid(false).hideLabel().setOutputMarkupId(true);\n+        comparator.setRequired(required);\n+        comparator.setChoiceRenderer(getComparatorRender(field.getModel()));\n+        field.add(comparator);\n+\n+        final AjaxTextFieldPanel value = new AjaxTextFieldPanel(\n+                \"value\", \"value\", new PropertyModel<String>(searchClause, \"value\"));\n+        value.hideLabel().setOutputMarkupId(true);\n+        field.add(value);\n+\n+        final AjaxDropDownChoicePanel<SearchClause.Type> type = new AjaxDropDownChoicePanel<>(\n+                \"type\", \"type\", new PropertyModel<SearchClause.Type>(searchClause, \"type\"));\n+        type.setChoices(types).hideLabel().setRequired(required).setOutputMarkupId(true);\n+        type.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                setFieldAccess(searchClause.getType(), comparator, value);\n+                target.add(property);\n+                target.add(comparator);\n+                target.add(value);\n+            }\n+        });\n+        field.add(type);\n+\n+        comparator.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (type.getModelObject() == SearchClause.Type.ATTRIBUTE) {\n+                    if (comparator.getModelObject() == SearchClause.Comparator.IS_NULL\n+                            || comparator.getModelObject() == SearchClause.Comparator.IS_NOT_NULL) {\n+\n+                        value.setModelObject(null);\n+                        value.setEnabled(false);\n+                    } else {\n+                        value.setEnabled(true);\n+                    }\n+                    target.add(value);\n+                }\n+            }\n+        });\n+\n+        setFieldAccess(searchClause.getType(), comparator, value);\n+\n+        return this;\n+    }\n+\n+    private void setFieldAccess(\n+            final Type type, final FieldPanel<Comparator> comparator, final FieldPanel<String> value) {\n+        if (type != null) {\n+            switch (type) {\n+                case ATTRIBUTE:\n+                    if (!comparator.isEnabled()) {\n+                        comparator.setEnabled(true);\n+                        comparator.setRequired(true);\n+                    }\n+\n+                    value.setEnabled(comparator.getModelObject() != SearchClause.Comparator.IS_NULL\n+                            && comparator.getModelObject() != SearchClause.Comparator.IS_NOT_NULL);\n+                    break;\n+                default:\n+                    value.setEnabled(false);\n+                    value.setModelObject(\"\");\n+            }\n+        }\n+    }\n+\n+    private IChoiceRenderer<SearchClause.Comparator> getComparatorRender(final IModel<SearchClause> clause) {\n+        return new IChoiceRenderer<SearchClause.Comparator>() {\n+\n+            private static final long serialVersionUID = -9086043750227867686L;\n+\n+            @Override\n+            public Object getDisplayValue(final SearchClause.Comparator object) {\n+\n+                if (clause == null || clause.getObject() == null || clause.getObject().getType() == null) {\n+                    return object.toString();\n+                }\n+\n+                String display;\n+\n+                switch (clause.getObject().getType()) {\n+                    case ATTRIBUTE:\n+                        switch (object) {\n+                            case IS_NULL:\n+                                display = \"NULL\";\n+                                break;\n+\n+                            case IS_NOT_NULL:\n+                                display = \"NOT NULL\";\n+                                break;\n+\n+                            case EQUALS:\n+                                display = \"==\";\n+                                break;\n+\n+                            case NOT_EQUALS:\n+                                display = \"!=\";\n+                                break;\n+\n+                            case LESS_THAN:\n+                                display = \"<\";\n+                                break;\n+\n+                            case LESS_OR_EQUALS:\n+                                display = \"<=\";\n+                                break;\n+\n+                            case GREATER_THAN:\n+                                display = \">\";\n+                                break;\n+\n+                            case GREATER_OR_EQUALS:\n+                                display = \">=\";\n+                                break;\n+\n+                            default:\n+                                display = StringUtils.EMPTY;\n+                        }\n+                        break;\n+                    case MEMBERSHIP:\n+                        switch (object) {\n+                            case EQUALS:\n+                                display = \"IN\";\n+                                break;\n+\n+                            case NOT_EQUALS:\n+                                display = \"NOT IN\";\n+                                break;\n+\n+                            default:\n+                                display = StringUtils.EMPTY;\n+                        }\n+                        break;\n+                    case RESOURCE:\n+                        switch (object) {\n+                            case EQUALS:\n+                                display = \"HAS\";\n+                                break;\n+\n+                            case NOT_EQUALS:\n+                                display = \"HAS NOT\";\n+                                break;\n+\n+                            default:\n+                                display = StringUtils.EMPTY;\n+                        }\n+                        break;\n+                    default:\n+                        display = object.toString();\n+                }\n+                return display;\n+            }\n+\n+            @Override\n+            public String getIdValue(final SearchClause.Comparator object, final int index) {\n+                return getDisplayValue(object).toString();\n+            }\n+\n+            @Override\n+            public SearchClause.Comparator getObject(\n+                    final String id, final IModel<? extends List<? extends SearchClause.Comparator>> choices) {\n+\n+                final SearchClause.Comparator res;\n+                switch (id) {\n+                    case \"HAS\":\n+                    case \"IN\":\n+                        res = SearchClause.Comparator.EQUALS;\n+                        break;\n+                    case \"HAS NOT\":\n+                    case \"NOT IN\":\n+                        res = SearchClause.Comparator.NOT_EQUALS;\n+                        break;\n+                    case \"NULL\":\n+                        res = SearchClause.Comparator.IS_NULL;\n+                        break;\n+                    case \"NOT NULL\":\n+                        res = SearchClause.Comparator.IS_NOT_NULL;\n+                        break;\n+                    case \"==\":\n+                        res = SearchClause.Comparator.EQUALS;\n+                        break;\n+                    case \"!=\":\n+                        res = SearchClause.Comparator.NOT_EQUALS;\n+                        break;\n+                    case \"<\":\n+                        res = SearchClause.Comparator.LESS_THAN;\n+                        break;\n+                    case \"<=\":\n+                        res = SearchClause.Comparator.LESS_OR_EQUALS;\n+                        break;\n+                    case \">\":\n+                        res = SearchClause.Comparator.GREATER_THAN;\n+                        break;\n+                    case \">=\":\n+                        res = SearchClause.Comparator.GREATER_OR_EQUALS;\n+                        break;\n+                    default:\n+                        // EQUALS to be used as default value\n+                        res = SearchClause.Comparator.EQUALS;\n+                        break;\n+                }\n+                return res;\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public FieldPanel<SearchClause> clone() {\n+        final SearchClausePanel panel = new SearchClausePanel(\n+                getId(), name, null, required, types, anames, dnames, groupNames, resourceNames);\n+        panel.setReadOnly(this.isReadOnly());\n+        panel.setRequired(this.isRequired());\n+        return panel;\n+    }\n+}"},{"sha":"bfbe3142cc684d799f038e21acf802ffc9ca84ab","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"added","additions":266,"deletions":0,"changes":266,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,266 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import static org.apache.syncope.client.console.panels.search.AbstractSearchPanel.LOG;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.SpecialAttr;\n+import org.apache.syncope.common.lib.search.SyncopeProperty;\n+import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n+\n+public final class SearchUtils implements Serializable {\n+\n+    private static final long serialVersionUID = 398381905376547084L;\n+\n+    private SearchUtils() {\n+\n+    }\n+\n+    public static Map<String, List<SearchClause>> getSearchClauses(final Map<String, String> fiql) {\n+        final Map<String, List<SearchClause>> res = new HashMap<>();\n+        if (fiql != null && !fiql.isEmpty()) {\n+            for (Map.Entry<String, String> entry : fiql.entrySet()) {\n+                res.put(entry.getKey(), getSearchClauses(entry.getValue()));\n+            }\n+        }\n+        return res;\n+    }\n+\n+    public static List<SearchClause> getSearchClauses(final String fiql) {\n+        final List<SearchClause> res = new ArrayList<>();\n+        if (StringUtils.isNotBlank(fiql)) {\n+            try {\n+                FiqlParser<SearchBean> fiqlParser = new FiqlParser<>(\n+                        SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n+                res.addAll(getSearchClauses(fiqlParser.parse(fiql)));\n+            } catch (Exception e) {\n+                LOG.error(\"Unparseable FIQL expression '{}'\", fiql, e);\n+            }\n+        }\n+        return res;\n+    }\n+\n+    public static List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {\n+        List<SearchClause> res = new ArrayList<SearchClause>();\n+\n+        if (sc.getStatement() == null) {\n+            res.addAll(getCompoundSearchClause(sc));\n+        } else {\n+            res.add(getPrimitiveSearchClause(sc));\n+        }\n+\n+        return res;\n+    }\n+\n+    public static List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {\n+        List<SearchClause> res = new ArrayList<SearchClause>();\n+\n+        for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n+            if (searchCondition.getStatement() == null) {\n+                res.addAll(getCompoundSearchClause(searchCondition));\n+            } else {\n+                SearchClause clause = getPrimitiveSearchClause(searchCondition);\n+                if (sc.getConditionType() == ConditionType.AND) {\n+                    clause.setOperator(SearchClause.Operator.AND);\n+                }\n+                if (sc.getConditionType() == ConditionType.OR) {\n+                    clause.setOperator(SearchClause.Operator.OR);\n+                }\n+                res.add(clause);\n+            }\n+        }\n+\n+        return res;\n+    }\n+\n+    public static SearchClause getPrimitiveSearchClause(final SearchCondition<SearchBean> sc) {\n+        SearchClause res = new SearchClause();\n+\n+        String property = sc.getCondition().getKeySet().iterator().next();\n+        res.setProperty(property);\n+        String value = sc.getCondition().get(property);\n+        res.setValue(value);\n+\n+        LOG.info(\"Condition: \" + sc.getCondition());\n+\n+        if (SpecialAttr.GROUPS.toString().equals(property)) {\n+            res.setType(SearchClause.Type.MEMBERSHIP);\n+            // check if the following is really required\n+\n+//            for (String label : groupNames.getObject()) {\n+//                if (value.equals(label.substring(0, label.indexOf(' ')))) {\n+//                    searchClause.setProperty(label);\n+//                }\n+//            }\n+        } else if (SpecialAttr.RESOURCES.toString().equals(property)) {\n+            res.setType(SearchClause.Type.RESOURCE);\n+            res.setProperty(value);\n+        } else {\n+            res.setType(SearchClause.Type.ATTRIBUTE);\n+        }\n+\n+        switch (sc.getConditionType()) {\n+            case EQUALS:\n+                res.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                        ? SearchClause.Comparator.IS_NULL : SearchClause.Comparator.EQUALS);\n+                break;\n+\n+            case NOT_EQUALS:\n+                res.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                        ? SearchClause.Comparator.IS_NOT_NULL : SearchClause.Comparator.NOT_EQUALS);\n+                break;\n+\n+            case GREATER_OR_EQUALS:\n+                res.setComparator(SearchClause.Comparator.GREATER_OR_EQUALS);\n+                break;\n+\n+            case GREATER_THAN:\n+                res.setComparator(SearchClause.Comparator.GREATER_THAN);\n+                break;\n+\n+            case LESS_OR_EQUALS:\n+                res.setComparator(SearchClause.Comparator.LESS_OR_EQUALS);\n+                break;\n+\n+            case LESS_THAN:\n+                res.setComparator(SearchClause.Comparator.LESS_THAN);\n+                break;\n+\n+            default:\n+                break;\n+        }\n+\n+        return res;\n+    }\n+\n+    public static String buildFIQL(final List<SearchClause> clauses, final AbstractFiqlSearchConditionBuilder builder) {\n+        LOG.debug(\"Generating FIQL from List<SearchClause>: {}\", clauses);\n+\n+        CompleteCondition prevCondition;\n+        CompleteCondition condition = null;\n+\n+        boolean notTheFirst = false;\n+\n+        for (SearchClause clause : clauses) {\n+            if (clause.getType() != null && StringUtils.isNotBlank(clause.getProperty())) {\n+                prevCondition = condition;\n+\n+                switch (clause.getType()) {\n+                    case MEMBERSHIP:\n+                        Long groupId = NumberUtils.toLong(clause.getProperty().split(\" \")[0]);\n+\n+                        if (builder instanceof UserFiqlSearchConditionBuilder) {\n+                            condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n+                                    ? ((UserFiqlSearchConditionBuilder) builder).inGroups(groupId)\n+                                    : ((UserFiqlSearchConditionBuilder) builder).notInGroups(groupId);\n+                        } else {\n+                            condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n+                                    ? ((AnyObjectFiqlSearchConditionBuilder) builder).inGroups(groupId)\n+                                    : ((AnyObjectFiqlSearchConditionBuilder) builder).notInGroups(groupId);\n+                        }\n+                        break;\n+\n+                    case RESOURCE:\n+                        condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n+                                ? builder.hasResources(clause.getProperty())\n+                                : builder.hasNotResources(clause.getProperty());\n+                        break;\n+\n+                    case ATTRIBUTE:\n+                        SyncopeProperty property = builder.is(clause.getProperty());\n+                        switch (clause.getComparator()) {\n+                            case IS_NULL:\n+                                condition = builder.isNull(clause.getProperty());\n+                                break;\n+\n+                            case IS_NOT_NULL:\n+                                condition = builder.isNotNull(clause.getProperty());\n+                                break;\n+\n+                            case LESS_THAN:\n+                                condition = StringUtils.isNumeric(clause.getProperty())\n+                                        ? property.lessThan(NumberUtils.toDouble(clause.getValue()))\n+                                        : property.lexicalBefore(clause.getValue());\n+                                break;\n+\n+                            case LESS_OR_EQUALS:\n+                                condition = StringUtils.isNumeric(clause.getProperty())\n+                                        ? property.lessOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n+                                        : property.lexicalNotAfter(clause.getValue());\n+                                break;\n+\n+                            case GREATER_THAN:\n+                                condition = StringUtils.isNumeric(clause.getProperty())\n+                                        ? property.greaterThan(NumberUtils.toDouble(clause.getValue()))\n+                                        : property.lexicalAfter(clause.getValue());\n+                                break;\n+\n+                            case GREATER_OR_EQUALS:\n+                                condition = StringUtils.isNumeric(clause.getProperty())\n+                                        ? property.greaterOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n+                                        : property.lexicalNotBefore(clause.getValue());\n+                                break;\n+\n+                            case NOT_EQUALS:\n+                                condition = property.notEqualTo(clause.getValue());\n+                                break;\n+\n+                            case EQUALS:\n+                            default:\n+                                condition = property.equalTo(clause.getValue());\n+                                break;\n+                        }\n+                        break;\n+                    default:\n+                        break;\n+                }\n+\n+                if (notTheFirst) {\n+                    if (clause.getOperator() == SearchClause.Operator.AND) {\n+                        condition = builder.and(prevCondition, condition);\n+                    }\n+                    if (clause.getOperator() == SearchClause.Operator.OR) {\n+                        condition = builder.or(prevCondition, condition);\n+                    }\n+                }\n+\n+                notTheFirst = true;\n+            }\n+        }\n+\n+        String fiql = condition == null ? null : condition.query();\n+        LOG.debug(\"Generated FIQL: {}\", fiql);\n+\n+        return fiql;\n+    }\n+}"},{"sha":"bf6a4fccb69e87714da1dde469184f50a92b77da","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public final class UserSearchPanel extends AnyObjectSearchPanel {\n+\n+    private static final long serialVersionUID = -1769527800450203738L;\n+\n+    public static class Builder extends AnyObjectSearchPanel.Builder {\n+\n+        private static final long serialVersionUID = 6308997285778809578L;\n+\n+        public Builder(final PropertyModel<List<SearchClause>> model) {\n+            super(model);\n+        }\n+\n+        @Override\n+        public UserSearchPanel build(final String id) {\n+            return new UserSearchPanel(id, this);\n+        }\n+    }\n+\n+    private UserSearchPanel(final String id, final Builder builder) {\n+        super(id, AnyTypeKind.USER, builder);\n+    }\n+}"},{"sha":"1d5171c5efdf3520b18434daf579926cfe55629e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -37,6 +37,8 @@\n \n     protected String title = null;\n \n+    private final Model<Integer> index = Model.of(0);\n+\n     public FieldPanel(final String id, final IModel<T> model) {\n         this(id, id, model);\n     }\n@@ -164,6 +166,25 @@ public void setObject(final Serializable object) {\n         });\n     }\n \n+    public FieldPanel<T> setIndex(final int index) {\n+        this.index.setObject(index);\n+        return this;\n+    }\n+\n+    public int getIndex() {\n+        return index.getObject();\n+    }\n+\n+    /**\n+     * To be overridded to add settings depending components.\n+     * It has to be used by default to add components depending by index model.\n+     *\n+     * @return the current field panel.\n+     */\n+    public FieldPanel<T> settingsDependingComponents() {\n+        return this;\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public FieldPanel<T> clone() {"},{"sha":"906ea02f5b4900d1c0021d5a168078de6aaa019e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/MultiFieldPanel.java","status":"modified","additions":44,"deletions":8,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiFieldPanel.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -34,7 +34,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n \n-public final class MultiFieldPanel<E extends Serializable> extends AbstractFieldPanel<List<E>> {\n+public abstract class MultiFieldPanel<E extends Serializable> extends AbstractFieldPanel<List<E>> {\n \n     private static final long serialVersionUID = -6322397761456513324L;\n \n@@ -71,7 +71,8 @@ private MultiFieldPanel(\n         container.add(form);\n         // -----------------------\n \n-        if (model.getObject() != null && model.getObject().isEmpty()) {\n+        final List<E> obj = model.getObject();\n+        if (obj == null || obj.isEmpty()) {\n             form.addOrReplace(getNoDataFragment(model, name));\n         } else {\n             form.addOrReplace(getDataFragment(model, name));\n@@ -94,8 +95,10 @@ private Fragment getDataFragment(final IModel<List<E>> model, final String label\n \n             @Override\n             protected void populateItem(final ListItem<E> item) {\n-\n                 final FieldPanel<? extends Serializable> fieldPanel = panelTemplate.clone();\n+                fieldPanel.setIndex(item.getIndex());\n+                fieldPanel.setNewModel(item);\n+                fieldPanel.settingsDependingComponents();\n \n                 if (eventTemplate) {\n                     fieldPanel.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n@@ -109,7 +112,6 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     });\n                 }\n \n-                fieldPanel.setNewModel(item);\n                 item.add(fieldPanel.hideLabel().setRenderBodyOnly(true));\n \n                 final AjaxSubmitLink minus = new AjaxSubmitLink(\"drop\") {\n@@ -132,6 +134,12 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                             send(getPage(), Broadcast.BREADTH, new MultiValueSelectorEvent(target));\n                         }\n                     }\n+\n+                    @Override\n+                    protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                        error(getString(Constants.OPERATION_ERROR));\n+                        super.onError(target, form);\n+                    }\n                 };\n \n                 item.add(minus);\n@@ -143,7 +151,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     fragment = new Fragment(\"panelPlus\", \"emptyFragment\", MultiFieldPanel.this);\n                 }\n \n-                item.add(fragment);\n+                item.add(fragment.setRenderBodyOnly(true));\n             }\n         };\n \n@@ -160,14 +168,20 @@ private Fragment getPlusFragment(final IModel<List<E>> model, final String label\n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 //Add current component\n-                model.getObject().add(null);\n+                model.getObject().add(newModelObject());\n \n                 if (model.getObject().size() == 1) {\n                     form.addOrReplace(getDataFragment(model, label));\n                 }\n \n                 target.add(container);\n             }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                error(getString(Constants.OPERATION_ERROR));\n+                super.onError(target, form);\n+            }\n         };\n \n         final Fragment fragment = new Fragment(\"panelPlus\", \"fragmentPlus\", MultiFieldPanel.this);\n@@ -200,7 +214,11 @@ public AjaxRequestTarget getTarget() {\n         }\n     }\n \n-    public static class Builder<E extends Serializable> {\n+    protected abstract E newModelObject();\n+\n+    public static class Builder<E extends Serializable> implements Serializable {\n+\n+        private static final long serialVersionUID = 1L;\n \n         private final IModel<List<E>> model;\n \n@@ -261,8 +279,26 @@ public Builder<E> setEventTemplate(final boolean eventTemplate) {\n             return this;\n         }\n \n+        /**\n+         * Default model object instance.\n+         *\n+         * @return default model object instance.\n+         */\n+        protected E newModelObject() {\n+            return null;\n+        }\n+\n         public MultiFieldPanel<E> build(final String id, final String name, final FieldPanel<E> panelTemplate) {\n-            return new MultiFieldPanel<>(id, name, model, panelTemplate, eventTemplate);\n+            return new MultiFieldPanel<E>(id, name, model, panelTemplate, eventTemplate) {\n+\n+                private static final long serialVersionUID = 1L;\n+\n+                @Override\n+                protected E newModelObject() {\n+                    return Builder.this.newModelObject();\n+                }\n+\n+            };\n         }\n     }\n }"},{"sha":"173e4d5c288a1ca6bf7958051cd5724d26580d73","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardBuilder.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardBuilder.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -20,7 +20,9 @@\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n \n-public abstract class AjaxWizardBuilder<T extends Serializable> {\n+public abstract class AjaxWizardBuilder<T extends Serializable> implements Serializable {\n+\n+    private static final long serialVersionUID = 5241745929825564456L;\n \n     private final String id;\n \n@@ -81,6 +83,10 @@ protected T getOriginalItem() {\n         return item;\n     }\n \n+    public T getDefaultItem() {\n+        return defaultItem;\n+    }\n+\n     private T newModelObject() {\n         if (item == null) {\n             // keep the original item: the which one before the changes performed during wizard browsing"},{"sha":"b9f13258740c194fc313333e4b956e8e11f452c8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardButton.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardButton.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardButton.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardButton.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -24,7 +24,7 @@\n \n public abstract class AjaxWizardButton extends AjaxButton {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = -9147736051493629209L;\n \n     private final IWizard wizard;\n "},{"sha":"2711e2885f82723f7df4118db6ce9924a4d25d29","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AjaxWizardButtonBar.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardButtonBar.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardButtonBar.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAjaxWizardButtonBar.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -24,14 +24,14 @@\n \n public class AjaxWizardButtonBar extends WizardButtonBar {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 5641095671558703391L;\n \n     public AjaxWizardButtonBar(final String id, final AjaxWizard<?> wizard, final boolean edit) {\n         super(id, wizard);\n \n         addOrReplace(new AjaxWizardButton(\"next\", wizard, \"next\") {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 1773811852118436784L;\n \n             @Override\n             protected void onClick(final AjaxRequestTarget target, final Form<?> form) {\n@@ -66,7 +66,7 @@ public final boolean isEnabled() {\n \n         addOrReplace(new AjaxWizardButton(\"previous\", wizard, \"prev\", false) {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 5704878742768853867L;\n \n             @Override\n             protected void onClick(final AjaxRequestTarget target, final Form<?> form) {\n@@ -83,7 +83,7 @@ public final boolean isEnabled() {\n \n         addOrReplace(new AjaxWizardButton(\"cancel\", wizard, \"cancel\", false) {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 5704878742768853867L;\n \n             @Override\n             protected void onClick(final AjaxRequestTarget target, final Form<?> form) {\n@@ -99,7 +99,7 @@ public final boolean isEnabled() {\n \n         addOrReplace(new AjaxWizardButton(\"finish\", wizard, \"finish\") {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 1773811852118436784L;\n \n             @Override\n             protected void onClick(final AjaxRequestTarget target, final Form<?> form) {"},{"sha":"974d3dda7c12963f4c6564cc74748f401fbd545d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -27,7 +27,7 @@\n \n public class Details<T extends AnyTO> extends WizardStep {\n \n-    private static final long serialVersionUID = 6592027822510220463L;\n+    private static final long serialVersionUID = -8995647450549098844L;\n \n     protected final PageReference pageRef;\n "},{"sha":"9705fc4947bb0f9b034b7b7d388a2ad3f1ac5956","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupDetails.java","status":"modified","additions":102,"deletions":17,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -18,12 +18,24 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.Collapsible;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n+import org.apache.syncope.client.console.panels.search.MapOfListModel;\n+import org.apache.syncope.client.console.panels.search.SearchClause;\n+import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -34,9 +46,18 @@\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -50,11 +71,13 @@ public class GroupDetails extends Details<GroupTO> {\n \n     private final GroupRestClient groupRestClient = new GroupRestClient();\n \n+    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n     private final WebMarkupContainer ownerContainer;\n \n-    private final OwnerModel userOwnerModel;\n+    private final OwnerModel uOwnerModel;\n \n-    private final OwnerModel groupOwnerModel;\n+    private final OwnerModel gOwnerModel;\n \n     public GroupDetails(\n             final GroupTO groupTO,\n@@ -64,6 +87,22 @@ public GroupDetails(\n             final boolean includeStatusPanel) {\n         super(groupTO, statusModel, pageRef, includeStatusPanel);\n \n+        final LoadableDetachableModel<List<AnyTypeTO>> types = new LoadableDetachableModel<List<AnyTypeTO>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<AnyTypeTO> load() {\n+                return CollectionUtils.select(anyTypeRestClient.getAll(), new Predicate<AnyTypeTO>() {\n+\n+                    @Override\n+                    public boolean evaluate(final AnyTypeTO t) {\n+                        return AnyTypeKind.USER != t.getKind() && AnyTypeKind.GROUP != t.getKind();\n+                    }\n+                }, new ArrayList<AnyTypeTO>());\n+            }\n+        };\n+\n         ownerContainer = new WebMarkupContainer(\"ownerContainer\");\n         ownerContainer.setOutputMarkupId(true);\n         this.add(ownerContainer);\n@@ -77,8 +116,8 @@ public GroupDetails(\n         groupOwnerSelectWin.setCookieName(\"create-groupOwnerSelect-modal\");\n         this.add(groupOwnerSelectWin);\n \n-        final AjaxTextFieldPanel name =\n-                new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<String>(groupTO, \"name\"), false);\n+        final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", \"name\",\n+                new PropertyModel<String>(groupTO, \"name\"), false);\n \n         final WebMarkupContainer jexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"jexlHelp\");\n \n@@ -92,11 +131,12 @@ public GroupDetails(\n         }\n         this.add(name);\n \n-        userOwnerModel = new OwnerModel(groupTO, AnyTypeKind.USER);\n+        uOwnerModel = new OwnerModel(groupTO, AnyTypeKind.USER);\n         @SuppressWarnings(\"unchecked\")\n-        final AjaxTextFieldPanel userOwner = new AjaxTextFieldPanel(\"userOwner\", \"userOwner\", userOwnerModel, false);\n-        userOwner.setReadOnly(true);\n-        userOwner.setOutputMarkupId(true);\n+        final AjaxTextFieldPanel userOwner = new AjaxTextFieldPanel(\"userOwner\", \"userOwner\", uOwnerModel, false);\n+        userOwner.setPlaceholder(\"userOwner\");\n+        userOwner.hideLabel();\n+        userOwner.setReadOnly(true).setOutputMarkupId(true);\n         ownerContainer.add(userOwner);\n         final AjaxLink<Void> userOwnerSelect = new IndicatingAjaxLink<Void>(\"userOwnerSelect\") {\n \n@@ -124,18 +164,18 @@ public Page createPage() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                userOwnerModel.setObject(null);\n+                uOwnerModel.setObject(null);\n                 target.add(userOwner);\n             }\n         };\n         ownerContainer.add(userOwnerReset.setEnabled(false));\n \n-        groupOwnerModel = new OwnerModel(groupTO, AnyTypeKind.GROUP);\n+        gOwnerModel = new OwnerModel(groupTO, AnyTypeKind.GROUP);\n         @SuppressWarnings(\"unchecked\")\n-        final AjaxTextFieldPanel groupOwner =\n-                new AjaxTextFieldPanel(\"groupOwner\", \"groupOwner\", groupOwnerModel, false);\n-        groupOwner.setReadOnly(true);\n-        groupOwner.setOutputMarkupId(true);\n+        final AjaxTextFieldPanel groupOwner = new AjaxTextFieldPanel(\"groupOwner\", \"groupOwner\", gOwnerModel, false);\n+        groupOwner.setPlaceholder(\"groupOwner\");\n+        groupOwner.hideLabel();\n+        groupOwner.setReadOnly(true).setOutputMarkupId(true);\n         ownerContainer.add(groupOwner);\n         final AjaxLink<Void> groupOwnerSelect = new IndicatingAjaxLink<Void>(\"groupOwnerSelect\") {\n \n@@ -164,11 +204,56 @@ public Page createPage() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                groupOwnerModel.setObject(null);\n+                gOwnerModel.setObject(null);\n                 target.add(groupOwner);\n             }\n         };\n         ownerContainer.add(groupOwnerReset.setEnabled(false));\n+\n+        // ------------------------\n+        // uDynMembershipCond\n+        // ------------------------\n+        add(new Collapsible(\"uDynMembershipCond\", Collections.<ITab>singletonList(\n+                new AbstractTab(new ResourceModel(\"uDynMembershipCond\", \"Dynamic USER Membership Conditions\")) {\n+\n+            private static final long serialVersionUID = 1037272333056449378L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new UserSearchPanel.Builder(new PropertyModel<List<SearchClause>>(groupTO, \"uDynClauses\")).\n+                        required(false).build(panelId);\n+            }\n+        }), Model.of(StringUtils.isBlank(groupTO.getUDynMembershipCond()) ? -1 : 0)).setOutputMarkupId(true));\n+        // ------------------------ \n+\n+        // ------------------------\n+        // aDynMembershipConds\n+        // ------------------------\n+        add(new ListView<AnyTypeTO>(\"aDynMembershipCond\", types) {\n+\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<AnyTypeTO> item) {\n+                final String key = item.getModelObject().getKey();\n+                item.add(new Collapsible(\"aDynMembershipCond\", Collections.<ITab>singletonList(\n+                        new AbstractTab(new StringResourceModel(\n+                                \"aDynMembershipCond\", this, new Model<AnyTypeTO>(item.getModelObject()))) {\n+\n+                    private static final long serialVersionUID = 1037272333056449378L;\n+\n+                    @Override\n+                    public Panel getPanel(final String panelId) {\n+                        return new AnyObjectSearchPanel.Builder(\n+                                new MapOfListModel<SearchClause>(groupTO, \"aDynClauses\",\n+                                        item.getModelObject().getKey())).\n+                                required(false).build(panelId);\n+                    }\n+                }), Model.of(StringUtils.isBlank(groupTO.getADynMembershipConds().get(key)) ? -1 : 0))\n+                        .setOutputMarkupId(true));\n+            }\n+        });\n+        // ------------------------\n     }\n \n     /**\n@@ -182,10 +267,10 @@ public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n \n         if (event.getPayload() instanceof UserOwnerSelectPayload) {\n-            userOwnerModel.setObject(((UserOwnerSelectPayload) event.getPayload()).getUserId());\n+            uOwnerModel.setObject(((UserOwnerSelectPayload) event.getPayload()).getUserId());\n         }\n         if (event.getPayload() instanceof GroupOwnerSelectPayload) {\n-            groupOwnerModel.setObject(((GroupOwnerSelectPayload) event.getPayload()).getGroupId());\n+            gOwnerModel.setObject(((GroupOwnerSelectPayload) event.getPayload()).getGroupId());\n         }\n \n         if (event.getPayload() instanceof AjaxRequestTarget) {"},{"sha":"f0f07609c87536f8f39b73e82861e64165aa7c27","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java","status":"modified","additions":100,"deletions":2,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -16,16 +16,25 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.panels.search.SearchClause;\n+import org.apache.syncope.client.console.panels.search.SearchUtils;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n+import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.model.util.ListModel;\n+import org.springframework.beans.BeanUtils;\n \n public class GroupWizardBuilder extends AnyWizardBuilder<GroupTO> {\n \n@@ -46,14 +55,32 @@ public GroupWizardBuilder(\n         super(id, groupTO, anyTypeClasses, pageRef);\n     }\n \n+    /**\n+     * This method has been overridden to manage asynchronous translation of FIQL string to search clases list and\n+     * viceversa.\n+     *\n+     * @param item wizard backend item.\n+     * @return the current builder.\n+     */\n+    @Override\n+    public AjaxWizardBuilder<GroupTO> setItem(final GroupTO item) {\n+        final GroupTO actual = new GroupHandler();\n+        BeanUtils.copyProperties(item == null ? getDefaultItem() : item, actual);\n+        return super.setItem(actual);\n+    }\n+\n     @Override\n     protected void onApplyInternal(final GroupTO modelObject) {\n         final ProvisioningResult<GroupTO> actual;\n \n+        GroupTO toBeProcessed = modelObject instanceof GroupHandler\n+                ? GroupHandler.class.cast(modelObject).toGroupTO()\n+                : modelObject;\n+\n         if (modelObject.getKey() == 0) {\n-            actual = groupRestClient.create(modelObject);\n+            actual = groupRestClient.create(toBeProcessed);\n         } else {\n-            final GroupPatch patch = AnyOperations.diff(modelObject, getOriginalItem(), true);\n+            final GroupPatch patch = AnyOperations.diff(toBeProcessed, getOriginalItem(), true);\n \n             // update user just if it is changed\n             if (!patch.isEmpty()) {\n@@ -68,4 +95,75 @@ protected GroupWizardBuilder addOptionalDetailsPanel(final GroupTO modelObject,\n                 new ListModel<>(Collections.<StatusBean>emptyList()), false, pageRef, modelObject.getKey() > 0));\n         return this;\n     }\n+\n+    /**\n+     * Class tprovided to handle asychronous FIQL string translations.\n+     */\n+    public static class GroupHandler extends GroupTO {\n+\n+        private static final long serialVersionUID = 8058288034211558375L;\n+\n+        private List<SearchClause> uDynClauses;\n+\n+        private Map<String, List<SearchClause>> aDynClauses;\n+\n+        public List<SearchClause> getUDynClauses() {\n+            if (this.uDynClauses == null) {\n+                this.uDynClauses = SearchUtils.getSearchClauses(super.getUDynMembershipCond());\n+            }\n+            return this.uDynClauses;\n+        }\n+\n+        public void setUDynClauses(final List<SearchClause> uDynClauses) {\n+            this.uDynClauses = uDynClauses;\n+        }\n+\n+        public Map<String, List<SearchClause>> getADynClauses() {\n+            if (this.aDynClauses == null) {\n+                this.aDynClauses = SearchUtils.getSearchClauses(super.getADynMembershipConds());\n+            }\n+            return this.aDynClauses;\n+        }\n+\n+        public void setADynClauses(final Map<String, List<SearchClause>> aDynClauses) {\n+            this.aDynClauses = aDynClauses;\n+        }\n+\n+        @Override\n+        public String getUDynMembershipCond() {\n+            if (CollectionUtils.isEmpty(this.uDynClauses)) {\n+                return super.getUDynMembershipCond();\n+            } else {\n+                return getFIQLString(this.uDynClauses, SyncopeClient.getUserSearchConditionBuilder());\n+            }\n+        }\n+\n+        @Override\n+        public Map<String, String> getADynMembershipConds() {\n+            if (this.aDynClauses == null || this.aDynClauses.isEmpty()) {\n+                return super.getADynMembershipConds();\n+            } else {\n+                final Map<String, String> res = new HashMap<>();\n+\n+                for (Map.Entry<String, List<SearchClause>> entry : this.aDynClauses.entrySet()) {\n+                    res.put(entry.getKey(), getFIQLString(entry.getValue(),\n+                            SyncopeClient.getAnyObjectSearchConditionBuilder(entry.getKey())));\n+                }\n+\n+                return res;\n+            }\n+        }\n+\n+        private String getFIQLString(final List<SearchClause> clauses, final AbstractFiqlSearchConditionBuilder bld) {\n+            return SearchUtils.buildFIQL(clauses, bld);\n+        }\n+\n+        public GroupTO toGroupTO() {\n+            final GroupTO res = new GroupTO();\n+            BeanUtils.copyProperties(this, res, \"uDynClauses\", \"aDynClauses\");\n+            res.setUDynMembershipCond(this.getUDynMembershipCond());\n+            res.getADynMembershipConds().putAll(this.getADynMembershipConds());\n+            return res;\n+        }\n+    }\n }"},{"sha":"29d152f0779bb14d98958b7bd798bf2f89439e0d","filename":"client/console/src/main/resources/META-INF/resources/css/search.css","status":"renamed","additions":36,"deletions":23,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fsearch.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fsearch.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fsearch.css?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -16,47 +16,60 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-.drop_button{\n-  vertical-align: middle !important;\n+.searchBox .col-xs-12{\n+  padding-left: 0px !important;\n+  padding-right: 0px !important;\n }\n \n-.add_button{\n-  vertical-align: middle !important;\n-  margin-left: 6px !important;\n+.clause{\n+  display: block;\n+  line-height: 34px;\n+  width: 100%;\n }\n \n-.date_size{\n-  width: 90px !important;\n+.clause .operator{\n+  width: 65px !important;\n }\n \n-.long_dynamicsize{\n-  width: 80% !important;\n+.clause .operator .checkbox{\n+  margin: 0px !important;\n }\n \n-.medium_dynamicsize{\n-  width: 45% !important;\n+.clause .field {\n+  line-height: 34px;\n+  float: left;\n+  padding: 0 3px 0px 0px;\n+  display: inline-block !important;\n+}\n+.clause .type{\n+  width: 120px !important;\n }\n \n-.short_dynamicsize{\n-  width: 35% !important;\n+.clause .property{\n+  width: 190px;\n }\n \n-.long_fixedsize{\n-  width: 500px !important;\n+.clause .comparator{\n+  width: 100px;\n }\n \n-.medium_fixedsize{\n-  width: 300px !important;\n+.clause .comparator button{\n+  width: 100px !important;\n }\n \n-.short_fixedsize{\n-  width: 150px !important;\n+.clause .value{\n+  width: 220px;\n }\n \n-.veryshort_fixedsize{\n-  width: 70px !important;\n+.clause .action{\n+  float: left;\n+  padding: 0px 7px 0px;\n }\n \n-.all_dynamicsize{\n-  width: 100% !important;\n+.searchBox .input-group-addon:last-child{\n+  border: 1px solid #ccc !important;\n }\n+\n+.searchBox .input-group{\n+  margin-top: 1px;\n+}\n\\ No newline at end of file","previous_filename":"client/console/src/main/resources/META-INF/resources/css/fieldstyle.css"},{"sha":"41ae6962518e27f85df03f3e395111e4e1d7b81f","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -303,3 +303,4 @@ div.wrap{\n /**\n END - Style for Information panel\n */\n+"},{"sha":"686d0beec70328b351af7931d4461ea920045402","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -32,7 +32,7 @@\n     <link href=\"css/AdminLTE_skins/skin-green.css\" rel=\"stylesheet\" type=\"text/css\" />\n     <link href=\"css/syncopeConsole.css\" rel=\"stylesheet\" type=\"text/css\" />\n     <link href=\"css/fieldstyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n-    \n+\n     <script type=\"text/javascript\" src=\"webjars/bootbox/${bootbox.version}/bootbox.js\"></script>\n \n     <script type=\"text/javascript\">"},{"sha":"4de4c23d90614dca7d06c9223ea4fd250cc57270","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.html","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.html?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,36 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head><title></title></head>\n+  <body>\n+    <wicket:head>\n+      <link href=\"css/search.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    </wicket:head>\n+    <wicket:panel>\n+      <span class=\"searchBox\">\n+        <div class=\"col-xs-12\">\n+          <div wicket:id=\"searchFeedback\"></div>\n+          <span wicket:id=\"searchFormContainer\">\n+            <span wicket:id=\"search\">[SEARCH]</span>\n+          </span>\n+        </div>\n+      </span>\n+    </wicket:panel>\n+  </body>\n+</html>"},{"sha":"5e25b0cd9789af6ffdf20763faaab95aa3b49e0e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/search/SearchClausePanel.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -0,0 +1,32 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head><title></title></head>\n+  <body>\n+    <wicket:extend>\n+      <span wicket:id=\"container\"  class=\"clause\">\n+        <div wicket:id=\"operatorContainer\" class=\"field operator\"><span wicket:id=\"operator\"/></div>\n+        <span wicket:id=\"type\" class=\"field type\"/>\n+        <span wicket:id=\"property\" class=\"field property\"/>\n+        <span wicket:id=\"comparator\" class=\"field comparator\"/>\n+        <span wicket:id=\"value\" class=\"field value\"/>\n+      </span>\n+    </wicket:extend>\n+  </body>\n+</html>"},{"sha":"b067820b72c617aee1f144990869be04027b45b0","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/AjaxTextFieldPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.html?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -27,7 +27,7 @@\n         <span wicket:id=\"externalAction\"/>\n       </wicket:enclosure>\n       <fieldset class=\"input-group\">\n-        <input type=\"text\" class=\"form-control\" wicket:id=\"textField\"/>\n+        <input type=\"text\" class=\"form-control\" wicket:id=\"textField\" placeholder=\"\"/>\n       </fieldset>\n     </wicket:extend>\n   </body>"},{"sha":"6b99a49a3574455b7a4e2fbf41c80eebda880f69","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/GroupDetails.html","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.html?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -36,21 +36,26 @@\n       </div>\n \n       <div wicket:id=\"ownerContainer\">\n-        <div class=\"form-group\">\n+        <div class=\"form-group input-group\">\n           <span wicket:id=\"userOwner\"/>\n-          <a href=\"#\" wicket:id=\"userOwnerSelect\"><img src=\"img/actions/search.png\" alt=\"select user owner\" title=\"Search\"/></a>\n-          <a href=\"#\" wicket:id=\"userOwnerReset\"><img src=\"img/actions/delete.png\" alt=\"reset user owner\" title=\"Delete\"/></a>\n+          <a href=\"#\" wicket:id=\"userOwnerSelect\" class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\" alt=\"select group owner\" title=\"Search\"></i></a>\n+          <a href=\"#\" wicket:id=\"userOwnerReset\" class=\"input-group-addon\"><i class=\"glyphicon glyphicon-remove-circle\" alt=\"reset user owner\" title=\"Delete\"></i></a>\n         </div>\n \n-        <div class=\"form-group\">\n+        <div class=\"form-group input-group\">\n           <span wicket:id=\"groupOwner\"/>\n-          <a href=\"#\" wicket:id=\"groupOwnerSelect\"><img src=\"img/actions/search.png\" alt=\"select group owner\" title=\"Search\"/></a>\n-          <a href=\"#\" wicket:id=\"groupOwnerReset\"><img src=\"img/actions/delete.png\" alt=\"reset group owner\" title=\"Delete\"/></a>\n+          <a href=\"#\" wicket:id=\"groupOwnerSelect\" class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\" alt=\"select group owner\" title=\"Search\"></i></a>\n+          <a href=\"#\" wicket:id=\"groupOwnerReset\" class=\"input-group-addon\"><i class=\"glyphicon glyphicon-remove-circle\" alt=\"reset group owner\" title=\"Delete\"></i></a>\n         </div>\n       </div>\n \n       <span wicket:id=\"userOwnerSelectWin\"/>\n       <span wicket:id=\"groupOwnerSelectWin\"/>\n+\n+      <div wicket:id=\"uDynMembershipCond\" />\n+      <span wicket:id=\"aDynMembershipCond\">\n+        <div wicket:id=\"aDynMembershipCond\"/>\n+      </span>\n     </wicket:extend>\n   </body>\n </html>"},{"sha":"e40b2c6d4101363320e9cd388d62262966d9f6c0","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/GroupDetails.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.properties?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -14,3 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+uDynMembershipCond=Dynamic USER assignment\n+aDynMembershipCond=Dynamic ${key} assignment\n+On=AND\n+Off=OR"},{"sha":"3c92bdce37288afb48d5e4fa2c48d2e6b82fe34a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/GroupDetails_it.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails_it.properties?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -14,3 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+On=AND\n+Off=OR\n+uDynMembershipCond=Assegnamento dinamico USER\n+aDynMembershipCond=Assegnamento dinamico ${key}"},{"sha":"a07746b05b7136dc3751b1b85d7b2baf22b1d7c7","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/GroupDetails_pt_BR.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c50dae60a8404df618190c00ea57eed414ac3c66/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails_pt_BR.properties?ref=c50dae60a8404df618190c00ea57eed414ac3c66","patch":"@@ -14,3 +14,7 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+On=AND\n+Off=OR\n+uDynMembershipCond=Dynamic USER assignment\n+aDynMembershipCond=Dynamic ${key} assignment"}]}