{"sha":"101a59ed4b227c4de0db3ad63471413d26a926fb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEwMWE1OWVkNGIyMjdjNGRlMGRiM2FkNjM0NzE0MTNkMjZhOTI2ZmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-22T10:13:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-03-22T10:13:30Z"},"message":"White noise: formatting\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1459693 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b9de201865f5c3421bf456e01fa639a4233712de","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b9de201865f5c3421bf456e01fa639a4233712de"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/101a59ed4b227c4de0db3ad63471413d26a926fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/101a59ed4b227c4de0db3ad63471413d26a926fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/101a59ed4b227c4de0db3ad63471413d26a926fb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/101a59ed4b227c4de0db3ad63471413d26a926fb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7cd549c1747c5f1a7e00a4e1f2e8672cfbf8e6c9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7cd549c1747c5f1a7e00a4e1f2e8672cfbf8e6c9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7cd549c1747c5f1a7e00a4e1f2e8672cfbf8e6c9"}],"stats":{"total":35,"additions":22,"deletions":13},"files":[{"sha":"a23ef1c921659f075f506f6c7fe05f0d08076466","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":22,"deletions":13,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/101a59ed4b227c4de0db3ad63471413d26a926fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/101a59ed4b227c4de0db3ad63471413d26a926fb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=101a59ed4b227c4de0db3ad63471413d26a926fb","patch":"@@ -118,7 +118,8 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        SchemaService schemaService2 = setupCredentials(schemaService, SchemaService.class, userTO.getUsername(), \"password123\");\n+        SchemaService schemaService2 = setupCredentials(schemaService, SchemaService.class,\n+                userTO.getUsername(), \"password123\");\n \n         schemaTO = schemaService2.read(AttributableType.USER, SchemaType.NORMAL, schemaName);\n         assertNotNull(schemaTO);\n@@ -155,7 +156,8 @@ public void testUserRead() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, UserService.class,\n+                userTO.getUsername(), \"password123\");\n \n         UserTO readUserTO = userService2.read(1L);\n         assertNotNull(readUserTO);\n@@ -190,7 +192,8 @@ public void testUserSearch() throws InvalidSearchConditionException {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, UserService.class,\n+                userTO.getUsername(), \"password123\");\n \n         AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         isNullCond.setSchema(\"loginDate\");\n@@ -224,9 +227,9 @@ public void testUserSearch() throws InvalidSearchConditionException {\n \n     @Test\n     public void checkFailedLogins() {\n-    \t// Workaround for CXF issue.. remove after upgrade to 2.7.3\n-    \tCXFAuthenticator.addAuthenticator();\n-    \tAuthenticator.setDefault(new CXFPatchedAuthenticator());\n+        // Workaround for CXF issue.. remove after upgrade to 2.7.3\n+        CXFAuthenticator.addAuthenticator();\n+        Authenticator.setDefault(new CXFPatchedAuthenticator());\n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -241,19 +244,22 @@ public void checkFailedLogins() {\n         assertNotNull(userTO);\n         long userId = userTO.getId();\n \n-        UserService userService2 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, UserService.class,\n+                userTO.getUsername(), \"password123\");\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n-        UserService userService3 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 = setupCredentials(userService, UserService.class,\n+                userTO.getUsername(), \"wrongpwd1\");\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n \n         // reset admin credentials for restTemplate\n         super.resetRestTemplate();\n         assertEquals(2, getFailedLogins(userService, userId));\n \n-        UserService userService4 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService4 = setupCredentials(userService, UserService.class,\n+                userTO.getUsername(), \"password123\");\n         assertEquals(0, getFailedLogins(userService4, userId));\n     }\n \n@@ -273,11 +279,13 @@ public void checkUserSuspension() {\n         long userId = userTO.getId();\n         assertNotNull(userTO);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 = setupCredentials(userService, UserService.class,\n+                userTO.getUsername(), \"password123\");\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n-        UserService userService3 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 = setupCredentials(userService, UserService.class,\n+                userTO.getUsername(), \"wrongpwd1\");\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n@@ -349,7 +357,8 @@ public void issueSYNCOPE48() {\n         role1Admin = createUser(role1Admin);\n         assertNotNull(role1Admin);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class, role1Admin.getUsername(), \"password\");\n+        UserService userService2 = setupCredentials(userService, UserService.class,\n+                role1Admin.getUsername(), \"password\");\n \n         // User with role 1, created by user with child role created above\n         UserTO role1User = UserTestITCase.getUniqueSampleTO(\"syncope48user@apache.org\");\n@@ -362,7 +371,7 @@ public void issueSYNCOPE48() {\n         role1User = response.readEntity(UserTO.class);\n         assertNotNull(role1User);\n     }\n-    \n+\n     private int getFailedLogins(UserService testUserService, long userId) {\n         UserTO readUserTO = testUserService.read(userId);\n         assertNotNull(readUserTO);"}]}