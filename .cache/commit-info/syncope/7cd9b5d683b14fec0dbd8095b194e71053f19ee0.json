{"sha":"7cd9b5d683b14fec0dbd8095b194e71053f19ee0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdjZDliNWQ2ODNiMTRmZWMwZGJkODA5NWIxOTRlNzEwNTNmMTllZTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-12T09:44:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-12T10:55:40Z"},"message":"[SYNCOPE-1517] Making JdbcAuditAppender configurable (but still enabled by default)","tree":{"sha":"45a986292af0dd2cac8d2a4cc8b870ba56c1ebf9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/45a986292af0dd2cac8d2a4cc8b870ba56c1ebf9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7cd9b5d683b14fec0dbd8095b194e71053f19ee0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7cd9b5d683b14fec0dbd8095b194e71053f19ee0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7cd9b5d683b14fec0dbd8095b194e71053f19ee0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed"}],"stats":{"total":2390,"additions":899,"deletions":1491},"files":[{"sha":"4b58d906edd0931453ed99227b7dab4b1dd72027","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDetails.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -20,12 +20,13 @@\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.Serializable;\n import java.util.Date;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.JsonDiffPanel;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.to.AbstractAnnotatedBean;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.PageReference;\n@@ -38,27 +39,24 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public abstract class AuditHistoryDetails<T extends EntityTO> extends MultilevelPanel.SecondLevel {\n+public abstract class AuditHistoryDetails<T extends Serializable> extends MultilevelPanel.SecondLevel {\n \n     private static final long serialVersionUID = -7400543686272100483L;\n \n     private static final Logger LOG = LoggerFactory.getLogger(AuditHistoryDetails.class);\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private static final String KEY_CURRENT = \"current\";\n-\n     public AuditHistoryDetails(\n             final MultilevelPanel mlp,\n-            final AuditEntryTO selected,\n-            final T currentEntity,\n+            final AuditEntry selected,\n+            final EntityTO currentEntity,\n             final String auditRestoreEntitlement,\n             final PageReference pageRef) {\n \n         super();\n \n-        AuditEntryTO current = new AuditEntryTO();\n-        current.setKey(KEY_CURRENT);\n+        AuditEntry current = new AuditEntry();\n         if (currentEntity instanceof AbstractAnnotatedBean) {\n             current.setWho(((AbstractAnnotatedBean) currentEntity).getCreator());\n             current.setDate(((AbstractAnnotatedBean) currentEntity).getCreationDate());\n@@ -112,7 +110,7 @@ public void onClick(final AjaxRequestTarget target) {\n \n     protected abstract void restore(String json, AjaxRequestTarget target);\n \n-    private Model<String> toJSON(final AuditEntryTO auditEntry, final Class<T> reference) {\n+    private Model<String> toJSON(final AuditEntry auditEntry, final Class<T> reference) {\n         try {\n             String content = auditEntry.getBefore() == null\n                     ? MAPPER.readTree(auditEntry.getOutput()).get(\"entity\").toPrettyString()"},{"sha":"7b43498ee9bbc9a5b899d813ebe1884bc728494e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDirectoryPanel.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.audit;\n \n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -26,14 +27,14 @@\n import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n-import org.apache.syncope.client.console.rest.AuditHistoryRestClient;\n+import org.apache.syncope.client.console.rest.LoggerRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -47,8 +48,8 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.StringResourceModel;\n \n-public abstract class AuditHistoryDirectoryPanel<T extends EntityTO> extends DirectoryPanel<\n-        AuditEntryTO, AuditEntryTO, AuditHistoryDirectoryPanel<T>.AuditHistoryProvider, AuditHistoryRestClient>\n+public abstract class AuditHistoryDirectoryPanel<T extends Serializable> extends DirectoryPanel<\n+        AuditEntry, AuditEntry, AuditHistoryDirectoryPanel<T>.AuditHistoryProvider, LoggerRestClient>\n         implements ModalPanel {\n \n     private static final long serialVersionUID = -8248734710505211261L;\n@@ -65,7 +66,7 @@\n \n     private final String category;\n \n-    private final T entity;\n+    private final EntityTO entity;\n \n     private final String auditRestoreEntitlement;\n \n@@ -74,7 +75,7 @@ public AuditHistoryDirectoryPanel(\n             final MultilevelPanel mlp,\n             final AuditElements.EventCategoryType type,\n             final String category,\n-            final T entity,\n+            final EntityTO entity,\n             final String auditRestoreEntitlement,\n             final PageReference pageRef) {\n \n@@ -89,7 +90,7 @@ public AuditHistoryDirectoryPanel(\n         this.auditRestoreEntitlement = auditRestoreEntitlement;\n         this.pageRef = pageRef;\n \n-        this.restClient = new AuditHistoryRestClient();\n+        this.restClient = new LoggerRestClient();\n         initResultTable();\n     }\n \n@@ -104,30 +105,30 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected List<IColumn<AuditEntryTO, String>> getColumns() {\n-        List<IColumn<AuditEntryTO, String>> columns = new ArrayList<>();\n+    protected List<IColumn<AuditEntry, String>> getColumns() {\n+        List<IColumn<AuditEntry, String>> columns = new ArrayList<>();\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"who\", this), \"who\"));\n         columns.add(new DatePropertyColumn<>(new StringResourceModel(\"date\", this), null, \"date\"));\n         return columns;\n     }\n \n     @Override\n-    protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<AuditEntryTO, String> resultTableBuilder) {\n+    protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<AuditEntry, String> resultTableBuilder) {\n         resultTableBuilder.setMultiLevelPanel(baseModal, mlp);\n     }\n \n     protected abstract void restore(String json, AjaxRequestTarget target);\n \n     @Override\n-    protected ActionsPanel<AuditEntryTO> getActions(final IModel<AuditEntryTO> model) {\n-        final ActionsPanel<AuditEntryTO> panel = super.getActions(model);\n+    protected ActionsPanel<AuditEntry> getActions(final IModel<AuditEntry> model) {\n+        final ActionsPanel<AuditEntry> panel = super.getActions(model);\n \n-        panel.add(new ActionLink<AuditEntryTO>() {\n+        panel.add(new ActionLink<AuditEntry>() {\n \n             private static final long serialVersionUID = -6745431735457245600L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final AuditEntryTO modelObject) {\n+            public void onClick(final AjaxRequestTarget target, final AuditEntry modelObject) {\n                 AuditHistoryDirectoryPanel.this.getTogglePanel().close(target);\n \n                 mlp.next(\n@@ -159,7 +160,7 @@ protected Collection<ActionLink.ActionType> getBatches() {\n         return List.of();\n     }\n \n-    protected class AuditHistoryProvider extends DirectoryDataProvider<AuditEntryTO> {\n+    protected class AuditHistoryProvider extends DirectoryDataProvider<AuditEntry> {\n \n         private static final long serialVersionUID = 415113175628260864L;\n \n@@ -174,7 +175,7 @@ public long size() {\n         }\n \n         @Override\n-        public Iterator<AuditEntryTO> iterator(final long first, final long count) {\n+        public Iterator<AuditEntry> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n             return restClient.search(\n                     entity.getKey(),\n@@ -189,7 +190,7 @@ public Iterator<AuditEntryTO> iterator(final long first, final long count) {\n         }\n \n         @Override\n-        public IModel<AuditEntryTO> model(final AuditEntryTO auditEntryBean) {\n+        public IModel<AuditEntry> model(final AuditEntry auditEntryBean) {\n             return new CompoundPropertyModel<>(auditEntryBean);\n         }\n     }"},{"sha":"8666aa12efdc6b62a519a921cdf7551487ed49b6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AuditHistoryRestClient.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditHistoryRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditHistoryRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditHistoryRestClient.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,72 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.rest;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n-import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.rest.api.beans.AuditQuery;\n-import org.apache.syncope.common.rest.api.service.AuditService;\n-import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n-\n-public class AuditHistoryRestClient extends BaseRestClient {\n-\n-    private static final long serialVersionUID = -381814125643246243L;\n-\n-    public List<AuditEntryTO> search(\n-            final String key,\n-            final int page,\n-            final int size,\n-            final AuditElements.EventCategoryType type,\n-            final String category,\n-            final List<String> events,\n-            final AuditElements.Result result,\n-            final SortParam<String> sort) {\n-\n-        AuditQuery query = new AuditQuery.Builder(key).\n-                size(size).\n-                page(page).\n-                type(type).\n-                category(category).\n-                events(events).\n-                result(result).\n-                orderBy(toOrderBy(sort)).\n-                build();\n-\n-        return getService(AuditService.class).search(query).getResult();\n-    }\n-\n-    public int count(\n-            final String key,\n-            final AuditElements.EventCategoryType type,\n-            final String category,\n-            final List<String> events,\n-            final AuditElements.Result result) {\n-\n-        AuditQuery query = new AuditQuery.Builder(key).\n-                page(1).\n-                size(1).\n-                type(type).\n-                category(category).\n-                events(events).\n-                result(result).\n-                build();\n-        return getService(AuditService.class).search(query).getTotalCount();\n-    }\n-}"},{"sha":"462b6080a84be21fb0012383590b92a7b78ac57b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -26,15 +26,19 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.LoggerWrapper;\n+import org.apache.syncope.common.rest.api.beans.AuditQuery;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n public class LoggerRestClient extends BaseRestClient {\n \n@@ -104,4 +108,45 @@ public static List<EventCategory> listEvents() {\n             return List.of();\n         }\n     }\n+\n+    public List<AuditEntry> search(\n+            final String key,\n+            final int page,\n+            final int size,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final List<String> events,\n+            final AuditElements.Result result,\n+            final SortParam<String> sort) {\n+\n+        AuditQuery query = new AuditQuery.Builder(key).\n+                size(size).\n+                page(page).\n+                type(type).\n+                category(category).\n+                events(events).\n+                result(result).\n+                orderBy(toOrderBy(sort)).\n+                build();\n+\n+        return getService(LoggerService.class).search(query).getResult();\n+    }\n+\n+    public int count(\n+            final String key,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final List<String> events,\n+            final AuditElements.Result result) {\n+\n+        AuditQuery query = new AuditQuery.Builder(key).\n+                page(1).\n+                size(1).\n+                type(type).\n+                category(category).\n+                events(events).\n+                result(result).\n+                build();\n+        return getService(LoggerService.class).search(query).getTotalCount();\n+    }\n }"},{"sha":"47f5acfdc610963f939d7d3867fe6da381bcb99a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/log/AuditEntry.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FAuditEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FAuditEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FAuditEntry.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.log;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+\n+@XmlRootElement(name = \"auditEntry\")\n+@XmlType\n+public class AuditEntry extends BaseBean {\n+\n+    private static final long serialVersionUID = 1215115961911228005L;\n+\n+    private String who;\n+\n+    private Date date;\n+\n+    private AuditLoggerName logger;\n+\n+    private String before;\n+\n+    private final List<String> inputs = new ArrayList<>();\n+\n+    private String output;\n+\n+    private String throwable;\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getWho() {\n+        return who;\n+    }\n+\n+    public void setWho(final String who) {\n+        this.who = who;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public Date getDate() {\n+        return date == null\n+                ? null\n+                : new Date(date.getTime());\n+    }\n+\n+    public void setDate(final Date date) {\n+        this.date = date == null\n+                ? null\n+                : new Date(date.getTime());\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public AuditLoggerName getLogger() {\n+        return logger;\n+    }\n+\n+    public void setLogger(final AuditLoggerName logger) {\n+        this.logger = logger;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getBefore() {\n+        return before;\n+    }\n+\n+    @XmlElementWrapper(name = \"inputs\")\n+    @XmlElement(name = \"input\")\n+    @JsonProperty(\"inputs\")\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public List<String> getInputs() {\n+        return inputs;\n+    }\n+\n+    public void setBefore(final String before) {\n+        this.before = before;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getOutput() {\n+        return output;\n+    }\n+\n+    public void setOutput(final String output) {\n+        this.output = output;\n+    }\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    public String getThrowable() {\n+        return throwable;\n+    }\n+\n+    public void setThrowable(final String throwable) {\n+        this.throwable = throwable;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(who).\n+                append(date).\n+                append(logger).\n+                append(before).\n+                append(inputs).\n+                append(output).\n+                append(throwable).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AuditEntry other = (AuditEntry) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(who, other.who).\n+                append(date, other.date).\n+                append(logger, other.logger).\n+                append(before, other.before).\n+                append(inputs, other.inputs).\n+                append(output, other.output).\n+                append(throwable, other.throwable).\n+                build();\n+    }\n+}"},{"sha":"9d183e64358fbb9c55e7b26ee6c66cf67f6b9992","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AuditEntryTO.java","status":"removed","additions":0,"deletions":141,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditEntryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditEntryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditEntryTO.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,141 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.BaseBean;\n-\n-@XmlRootElement(name = \"audit\")\n-@XmlType\n-public class AuditEntryTO extends BaseBean implements EntityTO {\n-\n-    private static final long serialVersionUID = 1215115961911228005L;\n-\n-    private String who;\n-\n-    private String subCategory;\n-\n-    private String event;\n-\n-    private String result;\n-\n-    private String before;\n-\n-    private final List<String> inputs = new ArrayList<>();\n-\n-    private String output;\n-\n-    private Date date;\n-\n-    private String throwable;\n-\n-    private String key;\n-\n-    private String loggerName;\n-\n-    public Date getDate() {\n-        return date;\n-    }\n-\n-    public void setDate(final Date date) {\n-        this.date = date;\n-    }\n-\n-    public String getThrowable() {\n-        return throwable;\n-    }\n-\n-    public void setThrowable(final String throwable) {\n-        this.throwable = throwable;\n-    }\n-\n-    public String getOutput() {\n-        return output;\n-    }\n-\n-    public void setOutput(final String output) {\n-        this.output = output;\n-    }\n-\n-    public String getBefore() {\n-        return before;\n-    }\n-\n-    public void setBefore(final String before) {\n-        this.before = before;\n-    }\n-\n-    public List<String> getInputs() {\n-        return inputs;\n-    }\n-\n-    public String getSubCategory() {\n-        return subCategory;\n-    }\n-\n-    public void setSubCategory(final String subCategory) {\n-        this.subCategory = subCategory;\n-    }\n-\n-    public String getEvent() {\n-        return event;\n-    }\n-\n-    public void setEvent(final String event) {\n-        this.event = event;\n-    }\n-\n-    public String getResult() {\n-        return result;\n-    }\n-\n-    public void setResult(final String result) {\n-        this.result = result;\n-    }\n-\n-    public String getWho() {\n-        return who;\n-    }\n-\n-    public void setWho(final String who) {\n-        this.who = who;\n-    }\n-\n-    public String getLoggerName() {\n-        return loggerName;\n-    }\n-\n-    public void setLoggerName(final String loggerName) {\n-        this.loggerName = loggerName;\n-    }\n-\n-    @Override\n-    public String getKey() {\n-        return this.key;\n-    }\n-\n-    @Override\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-}"},{"sha":"503549426c373e2d22b458264237b2bf17f82222","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuditService.java","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,54 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service;\n-\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.AuditQuery;\n-\n-import javax.ws.rs.BeanParam;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n-\n-/**\n- * REST operations for audit events.\n- */\n-@Tag(name = \"Audits\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"audits\")\n-public interface AuditService {\n-\n-    /**\n-     * Returns a paged list of audit objects matching the given query.\n-     *\n-     * @param auditQuery query conditions\n-     * @return paged list of objects matching the given query\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedResult<AuditEntryTO> search(@BeanParam AuditQuery auditQuery);\n-}"},{"sha":"1b494a3dd37c5bf73d6d4acc5e426aa5217513e8","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -28,6 +28,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -36,12 +37,15 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AuditQuery;\n \n /**\n  * REST operations for logging and auditing.\n@@ -84,6 +88,17 @@ public interface LoggerService extends JAXRSService {\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<EventCategory> events();\n \n+    /**\n+     * Returns a paged list of audit entries matching the given query.\n+     *\n+     * @param auditQuery query conditions\n+     * @return paged list of audit entries matching the given query\n+     */\n+    @GET\n+    @Path(\"AUDIT/entries\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    PagedResult<AuditEntry> search(@BeanParam AuditQuery auditQuery);\n+\n     /**\n      * Returns logger with matching type and name.\n      *"},{"sha":"0065543ddfc93745adaf3371851af97d2ddb23e2","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAuditAppender.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,72 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import org.apache.syncope.core.logic.audit.AuditAppender;\n-import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n-import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n-\n-public abstract class AbstractAuditAppender implements AuditAppender {\n-\n-    protected String domainName;\n-\n-    protected Appender targetAppender;\n-\n-    protected RewriteAppender rewriteAppender;\n-\n-    @Override\n-    public abstract void init();\n-\n-    public abstract void initTargetAppender();\n-\n-    public abstract void initRewriteAppender();\n-\n-    @Override\n-    public abstract RewritePolicy getRewritePolicy();\n-\n-    @Override\n-    public String getDomainName() {\n-        return domainName;\n-    }\n-\n-    @Override\n-    public void setDomainName(final String domainName) {\n-        this.domainName = domainName;\n-    }\n-\n-    @Override\n-    public abstract String getTargetAppenderName();\n-\n-    @Override\n-    public boolean isRewriteEnabled() {\n-        return rewriteAppender != null;\n-    }\n-\n-    @Override\n-    public RewriteAppender getRewriteAppender() {\n-        return rewriteAppender;\n-    }\n-\n-    @Override\n-    public Appender getTargetAppender() {\n-        return targetAppender;\n-    }\n-\n-}"},{"sha":"f57eda98a26d255627876cd3750b67892614adee","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,73 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.lang.reflect.Method;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n-import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Component\n-public class AuditLogic extends AbstractTransactionalLogic<AuditEntryTO> {\n-\n-    @Autowired\n-    private AuditDataBinder binder;\n-\n-    @Autowired\n-    private AuditDAO auditDAO;\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_SEARCH + \"')\")\n-    @Transactional(readOnly = true)\n-    public Pair<Integer, List<AuditEntryTO>> search(\n-            final String entityKey,\n-            final int page,\n-            final int size,\n-            final AuditElements.EventCategoryType type,\n-            final String category,\n-            final String subcategory,\n-            final List<String> events,\n-            final AuditElements.Result result,\n-            final List<OrderByClause> orderByClauses) {\n-\n-        Integer count = auditDAO.count(entityKey);\n-        List<AuditEntry> matching = auditDAO.findByEntityKey(\n-                entityKey, page, size, type, category, subcategory, events, result, orderByClauses);\n-        List<AuditEntryTO> searchResults = matching.stream().\n-                map(auditEntry -> binder.getAuditTO(entityKey, auditEntry)).\n-                collect(Collectors.toList());\n-        return Pair.of(count, searchResults);\n-    }\n-\n-    @Override\n-    protected AuditEntryTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-        throw new UnresolvedReferenceException();\n-    }\n-}"},{"sha":"3b1fe495fe4da45000b75b0ca36d55361d6eeeba","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":30,"deletions":20,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -26,10 +26,12 @@\n import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.log.EventCategory;\n@@ -54,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n@@ -72,6 +75,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.SystemPropertyUtils;\n+import org.apache.syncope.core.provisioning.api.data.LoggerDataBinder;\n \n @Component\n public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n@@ -91,6 +95,9 @@ public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private LoggerDataBinder binder;\n+\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n@@ -115,12 +122,7 @@ public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n     }\n \n     private List<LoggerTO> list(final LoggerType type) {\n-        return loggerDAO.findAll(type).stream().map(logger -> {\n-            LoggerTO loggerTO = new LoggerTO();\n-            loggerTO.setKey(logger.getKey());\n-            loggerTO.setLevel(logger.getLevel());\n-            return loggerTO;\n-        }).collect(Collectors.toList());\n+        return loggerDAO.findAll(type).stream().map(binder::getLoggerTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n@@ -173,12 +175,7 @@ public LoggerTO readLog(final String name) {\n     public LoggerTO readAudit(final String name) {\n         return listAudits().stream().\n                 filter(logger -> logger.toLoggerName().equals(name)).findFirst().\n-                map(logger -> {\n-                    LoggerTO loggerTO = new LoggerTO();\n-                    loggerTO.setKey(logger.toLoggerName());\n-                    loggerTO.setLevel(LoggerLevel.DEBUG);\n-                    return loggerTO;\n-                }).orElseThrow(() -> new NotFoundException(\"Audit \" + name));\n+                map(binder::getLoggerTO).orElseThrow(() -> new NotFoundException(\"Audit \" + name));\n     }\n \n     private LoggerTO setLevel(final String name, final Level level, final LoggerType expectedType) {\n@@ -231,11 +228,7 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         logConf.setLevel(level);\n         ctx.updateLoggers();\n \n-        LoggerTO result = new LoggerTO();\n-        result.setKey(syncopeLogger.getKey());\n-        result.setLevel(syncopeLogger.getLevel());\n-\n-        return result;\n+        return binder.getLoggerTO(syncopeLogger);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_SET_LEVEL + \"') and authentication.details.domain == \"\n@@ -264,9 +257,7 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n             throwInvalidLogger(expectedType);\n         }\n \n-        LoggerTO loggerToDelete = new LoggerTO();\n-        loggerToDelete.setKey(syncopeLogger.getKey());\n-        loggerToDelete.setLevel(syncopeLogger.getLevel());\n+        LoggerTO loggerToDelete = binder.getLoggerTO(syncopeLogger);\n \n         // remove SyncopeLogger from local storage, so that LoggerLoader won't load this next time\n         loggerDAO.delete(syncopeLogger);\n@@ -405,6 +396,25 @@ public List<EventCategory> listAuditEvents() {\n         return new ArrayList<>(events);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_SEARCH + \"')\")\n+    @Transactional(readOnly = true)\n+    public Pair<Integer, List<AuditEntry>> search(\n+            final String entityKey,\n+            final int page,\n+            final int size,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final List<String> events,\n+            final AuditElements.Result result,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        int count = loggerDAO.countAuditEntries(entityKey);\n+        List<AuditEntry> matching = loggerDAO.findAuditEntries(\n+                entityKey, page, size, type, category, subcategory, events, result, orderByClauses);\n+        return Pair.of(count, matching);\n+    }\n+\n     @Override\n     protected EntityTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"d81daa668d7c9a95e068b2abcc94e7391533009e","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/AuditAppender.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.logic.audit;\n \n+import java.util.Optional;\n import java.util.Set;\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n-import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n \n /**\n@@ -32,21 +32,17 @@\n  */\n public interface AuditAppender {\n \n-    void init();\n+    void init(String domain);\n \n-    Set<AuditLoggerName> getEvents();\n+    default Set<AuditLoggerName> getEvents() {\n+        return Set.of();\n+    }\n \n     Appender getTargetAppender();\n \n-    RewritePolicy getRewritePolicy();\n-\n     String getTargetAppenderName();\n \n-    void setDomainName(String name);\n-\n-    String getDomainName();\n-\n-    boolean isRewriteEnabled();\n-\n-    RewriteAppender getRewriteAppender();\n+    default Optional<RewriteAppender> getRewriteAppender() {\n+        return Optional.empty();\n+    }\n }"},{"sha":"a78f82f474c64575546ffbb52c7f31a862266a05","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultAuditAppender.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,36 +18,31 @@\n  */\n package org.apache.syncope.core.logic.audit;\n \n-import java.util.Set;\n-import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.core.logic.AbstractAuditAppender;\n+import org.apache.logging.log4j.core.Appender;\n \n /**\n  * Default (abstract) implementation of custom audit appender.\n+ *\n  * It is bound to an empty collection of events, i.e. it does not create any logger.\n- * This class shall be extended by non-rewriting appenders; for rewriting, extend\n+ * This class shall be extended by non-rewrite appenders; for rewrite, extend\n  * {@link DefaultRewriteAuditAppender} instead.\n  */\n-public abstract class DefaultAuditAppender extends AbstractAuditAppender {\n+public abstract class DefaultAuditAppender implements AuditAppender {\n \n-    @Override\n-    public void init() {\n-        initTargetAppender();\n-    }\n+    protected String domain;\n \n-    @Override\n-    public Set<AuditLoggerName> getEvents() {\n-        return Set.of();\n-    }\n+    protected Appender targetAppender;\n \n     @Override\n-    public void initRewriteAppender() {\n+    public void init(final String domain) {\n+        this.domain = domain;\n+        initTargetAppender();\n     }\n \n+    protected abstract void initTargetAppender();\n+\n     @Override\n-    public RewritePolicy getRewritePolicy() {\n-        return null;\n+    public Appender getTargetAppender() {\n+        return targetAppender;\n     }\n-\n }"},{"sha":"ed62206e94bbf2325ad362253efdd3a70fe8409f","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultRewriteAuditAppender.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,46 +18,44 @@\n  */\n package org.apache.syncope.core.logic.audit;\n \n-import java.util.Set;\n+import java.util.Optional;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n import org.apache.logging.log4j.core.config.AppenderRef;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.core.logic.AbstractAuditAppender;\n \n /**\n- * Default (abstract) implementation of custom rewriting audit appender; it provides rewrite appender definition and\n- * a default \"pass-through\" policy.\n+ * Default (abstract) implementation of rewrite audit appender, allowing the logging event to be manipulated\n+ * before it is processed.\n+ * It provides rewrite appender definition and a default \"pass-through\" policy.\n  * It is bound to an empty collection of events, i.e. it does not create any logger.\n- * This class shall be extended by rewriting appenders; for non-rewriting, extend {@link DefaultAuditAppender} instead.\n+ * This class shall be extended by rewrite appenders; for non-rewrite, extend {@link DefaultAuditAppender} instead.\n+ *\n+ * @see RewriteAppender\n  */\n-public abstract class DefaultRewriteAuditAppender extends AbstractAuditAppender {\n+public abstract class DefaultRewriteAuditAppender extends DefaultAuditAppender {\n \n-    @Override\n-    public void init() {\n-        initTargetAppender();\n-        initRewriteAppender();\n-    }\n+    protected RewriteAppender rewriteAppender;\n \n     @Override\n-    public void initRewriteAppender() {\n-        rewriteAppender = RewriteAppender.createAppender(getTargetAppenderName() + \"_rewrite\",\n+    public void init(final String domain) {\n+        super.init(domain);\n+\n+        rewriteAppender = RewriteAppender.createAppender(\n+                getTargetAppenderName() + \"_rewrite\",\n                 \"true\",\n                 new AppenderRef[] { AppenderRef.createAppenderRef(getTargetAppenderName(), Level.DEBUG, null) },\n                 ((LoggerContext) LogManager.getContext(false)).getConfiguration(), getRewritePolicy(), null);\n     }\n \n-    @Override\n-    public Set<AuditLoggerName> getEvents() {\n-        return Set.of();\n+    protected RewritePolicy getRewritePolicy() {\n+        return PassThroughAuditRewritePolicy.createPolicy();\n     }\n \n     @Override\n-    public RewritePolicy getRewritePolicy() {\n-        return PassThroughAuditRewritePolicy.createPolicy();\n+    public Optional<RewriteAppender> getRewriteAppender() {\n+        return Optional.of(rewriteAppender);\n     }\n-\n }"},{"sha":"e96132f9d5bda02cecb744e2999ca87c70066002","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/JdbcAuditAppender.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.audit;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import javax.sql.DataSource;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.appender.db.ColumnMapping;\n+import org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource;\n+import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+\n+public class JdbcAuditAppender extends DefaultAuditAppender {\n+\n+    @Autowired\n+    protected DomainHolder domainHolder;\n+\n+    @Override\n+    protected void initTargetAppender() {\n+        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+\n+        ColumnMapping[] columnMappings = {\n+            ColumnMapping.newBuilder().\n+            setConfiguration(ctx.getConfiguration()).setName(\"EVENT_DATE\").setType(Timestamp.class).build(),\n+            ColumnMapping.newBuilder().\n+            setConfiguration(ctx.getConfiguration()).setName(\"LOGGER_LEVEL\").setPattern(\"%level\").build(),\n+            ColumnMapping.newBuilder().\n+            setConfiguration(ctx.getConfiguration()).setName(\"LOGGER\").setPattern(\"%logger\").build(),\n+            ColumnMapping.newBuilder().\n+            setConfiguration(ctx.getConfiguration()).\n+            setName(LoggerDAO.AUDIT_MESSAGE_COLUMN).setPattern(\"%message\").build(),\n+            ColumnMapping.newBuilder().\n+            setConfiguration(ctx.getConfiguration()).setName(\"THROWABLE\").setPattern(\"%ex{full}\").build()\n+        };\n+\n+        Appender appender = ctx.getConfiguration().getAppender(\"audit_for_\" + domain);\n+        if (appender == null) {\n+            appender = JdbcAppender.newBuilder().\n+                    setName(\"audit_for_\" + domain).\n+                    setIgnoreExceptions(false).\n+                    setConnectionSource(new DataSourceConnectionSource(domain, domainHolder.getDomains().get(domain))).\n+                    setBufferSize(0).\n+                    setTableName(LoggerDAO.AUDIT_TABLE).\n+                    setColumnMappings(columnMappings).\n+                    build();\n+            appender.start();\n+            ctx.getConfiguration().addAppender(appender);\n+        }\n+        targetAppender = appender;\n+    }\n+\n+    @Override\n+    public String getTargetAppenderName() {\n+        // not used\n+        return null;\n+    }\n+\n+    protected static class DataSourceConnectionSource extends AbstractConnectionSource {\n+\n+        private final String description;\n+\n+        private final DataSource dataSource;\n+\n+        DataSourceConnectionSource(final String domain, final DataSource dataSource) {\n+            this.description = \"dataSource{ domain=\" + domain + \", value=\" + dataSource + \" }\";\n+            this.dataSource = dataSource;\n+        }\n+\n+        @Override\n+        public Connection getConnection() throws SQLException {\n+            return DataSourceUtils.getConnection(dataSource);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return this.description;\n+        }\n+    }\n+}"},{"sha":"609c486806834c667ce631b549865b0dda24dc51","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/PassThroughAuditRewritePolicy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FPassThroughAuditRewritePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FPassThroughAuditRewritePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FPassThroughAuditRewritePolicy.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -39,5 +39,4 @@ public LogEvent rewrite(final LogEvent event) {\n     public static PassThroughAuditRewritePolicy createPolicy() {\n         return new PassThroughAuditRewritePolicy();\n     }\n-\n }"},{"sha":"446a7db2e5b04e74e210cbcc47d990023b34dbab","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n+import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n@@ -131,7 +132,7 @@ public void load() {\n         scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(\n-                    Objects.requireNonNull(bd.getBeanClassName()), ClassUtils.getDefaultClassLoader());\n+                        Objects.requireNonNull(bd.getBeanClassName()), ClassUtils.getDefaultClassLoader());\n                 boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n                 if (JWTSSOProvider.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n@@ -231,7 +232,9 @@ public void load() {\n                     classNames.get(IdRepoImplementationType.RECIPIENTS_PROVIDER).add(bd.getBeanClassName());\n                 }\n \n-                if (AuditAppender.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                if (AuditAppender.class.isAssignableFrom(clazz)\n+                        && !JdbcAuditAppender.class.equals(clazz) && !isAbstractClazz) {\n+\n                     classNames.get(IdRepoImplementationType.AUDIT_APPENDER).add(clazz.getName());\n                     auditAppenderClasses.add(clazz);\n                 }"},{"sha":"45ea48c705abd2d05d8b81c2bd0ae650b255d320","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":39,"deletions":92,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,35 +18,30 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.sql.Timestamp;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import javax.sql.DataSource;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.appender.db.ColumnMapping;\n-import org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource;\n-import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.MemoryAppender;\n+import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -58,77 +53,56 @@ public class LoggerLoader implements SyncopeCoreLoader {\n     @Autowired\n     private ImplementationLookup implementationLookup;\n \n+    @Value(\"${enable.jdbcAuditAppender:true}\")\n+    private boolean enableJdbcAuditAppender;\n+\n     private final Map<String, MemoryAppender> memoryAppenders = new HashMap<>();\n \n     @Override\n     public int getOrder() {\n         return 300;\n     }\n \n-    private static ColumnMapping[] buildColumnMappings(final LoggerContext ctx) {\n-        return new ColumnMapping[] {\n-            ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"EVENT_DATE\").setType(Timestamp.class).build(),\n-            ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"LOGGER_LEVEL\").setPattern(\"%level\").build(),\n-            ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"LOGGER\").setPattern(\"%logger\").build(),\n-            ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(AuditDAO.MESSAGE_COLUMN).setPattern(\"%message\").build(),\n-            ColumnMapping.newBuilder().\n-            setConfiguration(ctx.getConfiguration()).setName(\"THROWABLE\").setPattern(\"%ex{full}\").build()\n-        };\n-    }\n-\n     @Override\n     public void load(final String domain, final DataSource datasource) {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n         ctx.getConfiguration().getAppenders().entrySet().stream().\n-                filter(entry -> (entry.getValue() instanceof MemoryAppender)).\n+                filter(entry -> entry.getValue() instanceof MemoryAppender).\n                 forEach(entry -> memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue()));\n \n-        // Audit table and DataSource for the given domain\n-        Appender appender = ctx.getConfiguration().getAppender(\"audit_for_\" + domain);\n-        if (appender == null) {\n-            appender = JdbcAppender.newBuilder().\n-                    setName(\"audit_for_\" + domain).\n-                    setIgnoreExceptions(false).\n-                    setConnectionSource(new DataSourceConnectionSource(domain, datasource)).\n-                    setBufferSize(0).\n-                    setTableName(AuditDAO.TABLE).\n-                    setColumnMappings(buildColumnMappings(ctx)).\n-                    build();\n-            appender.start();\n-            ctx.getConfiguration().addAppender(appender);\n+        if (enableJdbcAuditAppender) {\n+            JdbcAuditAppender jdbcAuditAppender = (JdbcAuditAppender) ApplicationContextProvider.getBeanFactory().\n+                    createBean(JdbcAuditAppender.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+            jdbcAuditAppender.init(domain);\n \n             LoggerConfig logConf = new LoggerConfig(AuditLoggerName.getAuditLoggerName(domain), null, false);\n-            logConf.addAppender(appender, Level.DEBUG, null);\n+            logConf.addAppender(jdbcAuditAppender.getTargetAppender(), Level.DEBUG, null);\n             logConf.setLevel(Level.DEBUG);\n             ctx.getConfiguration().addLogger(logConf.getName(), logConf);\n-\n-            // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-            auditAppenders(domain).forEach(auditAppender -> auditAppender.getEvents().stream().\n-                    map(event -> AuditLoggerName.getAuditEventLoggerName(domain, event.toLoggerName())).\n-                    forEachOrdered(domainAuditLoggerName -> {\n-                        LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n-                        boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n-                        if (isRootLogConf) {\n-                            eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n-                        }\n-                        addAppenderToContext(ctx, auditAppender, eventLogConf);\n-                        eventLogConf.setLevel(Level.DEBUG);\n-                        if (isRootLogConf) {\n-                            ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n-                        }\n-                    }));\n-\n-            AuthContextUtils.callAsAdmin(domain, () -> {\n-                loggerAccessor.synchronizeLog4J(ctx);\n-                return null;\n-            });\n         }\n \n+        // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n+        auditAppenders(domain).forEach(auditAppender -> auditAppender.getEvents().stream().\n+                map(event -> AuditLoggerName.getAuditEventLoggerName(domain, event.toLoggerName())).\n+                forEach(domainAuditLoggerName -> {\n+                    LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n+                    boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n+                    if (isRootLogConf) {\n+                        eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n+                    }\n+                    addAppenderToContext(ctx, auditAppender, eventLogConf);\n+                    eventLogConf.setLevel(Level.DEBUG);\n+                    if (isRootLogConf) {\n+                        ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n+                    }\n+                }));\n+\n+        AuthContextUtils.callAsAdmin(domain, () -> {\n+            loggerAccessor.synchronizeLog4J(ctx);\n+            return null;\n+        });\n+\n         ctx.updateLoggers();\n     }\n \n@@ -145,8 +119,7 @@ public List<AuditAppender> auditAppenders(final String domain) throws BeansExcep\n             } else {\n                 auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n                         createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-                auditAppender.setDomainName(domain);\n-                auditAppender.init();\n+                auditAppender.init(domain);\n             }\n             return auditAppender;\n         }).collect(Collectors.toList());\n@@ -163,39 +136,13 @@ public static void addAppenderToContext(\n         }\n         targetAppender.start();\n         ctx.getConfiguration().addAppender(targetAppender);\n-        if (auditAppender.isRewriteEnabled()) {\n-            RewriteAppender rewriteAppender = ctx.getConfiguration().getAppender(auditAppender.\n-                    getTargetAppenderName() + \"_rewrite\");\n-            if (rewriteAppender == null) {\n-                rewriteAppender = auditAppender.getRewriteAppender();\n-            }\n-            rewriteAppender.start();\n-            ctx.getConfiguration().addAppender(rewriteAppender);\n-            eventLogConf.addAppender(rewriteAppender, Level.DEBUG, null);\n+\n+        Optional<RewriteAppender> rewriteAppender = auditAppender.getRewriteAppender();\n+        if (rewriteAppender.isPresent()) {\n+            rewriteAppender.get().start();\n+            eventLogConf.addAppender(rewriteAppender.get(), Level.DEBUG, null);\n         } else {\n             eventLogConf.addAppender(targetAppender, Level.DEBUG, null);\n         }\n     }\n-\n-    private static class DataSourceConnectionSource extends AbstractConnectionSource {\n-\n-        private final String description;\n-\n-        private final DataSource dataSource;\n-\n-        DataSourceConnectionSource(final String domain, final DataSource dataSource) {\n-            this.description = \"dataSource{ domain=\" + domain + \", value=\" + dataSource + \" }\";\n-            this.dataSource = dataSource;\n-        }\n-\n-        @Override\n-        public Connection getConnection() throws SQLException {\n-            return DataSourceUtils.getConnection(dataSource);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return this.description;\n-        }\n-    }\n }"},{"sha":"3da2e2cacc019f57ab2c9becdffc06cfd75f67cd","filename":"core/idrepo/logic/src/main/resources/logic.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,3 +18,4 @@ version=${syncope.version}\n buildNumber=${buildNumber}\n logicInvocationHandler=org.apache.syncope.core.logic.LogicInvocationHandler\n classPathScanImplementationLookup=org.apache.syncope.core.logic.init.ClassPathScanImplementationLookup\n+enable.jdbcAuditAppender=true"},{"sha":"b646f9155e02fdfa61c6ebfaa2fd7597acfe875a","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuditServiceImpl.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service;\n-\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.rest.api.beans.AuditQuery;\n-import org.apache.syncope.common.rest.api.service.AuditService;\n-import org.apache.syncope.core.logic.AuditLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import java.util.List;\n-\n-@Service\n-public class AuditServiceImpl extends AbstractServiceImpl implements AuditService {\n-\n-    @Autowired\n-    private AuditLogic logic;\n-\n-    @Override\n-    public PagedResult<AuditEntryTO> search(final AuditQuery auditQuery) {\n-        Pair<Integer, List<AuditEntryTO>> result = logic.search(\n-                auditQuery.getEntityKey(),\n-                auditQuery.getPage(),\n-                auditQuery.getSize(),\n-                auditQuery.getType(),\n-                auditQuery.getCategory(),\n-                auditQuery.getSubcategory(),\n-                auditQuery.getEvents(),\n-                auditQuery.getResult(),\n-                getOrderByClauses(auditQuery.getOrderBy()));\n-        return buildPagedResult(result.getRight(), auditQuery.getPage(), auditQuery.getSize(), result.getLeft());\n-    }\n-}"},{"sha":"b8ab5b4ac717a31ed39363dfddad3a249301f35b","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":30,"deletions":10,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -21,13 +21,17 @@\n import java.text.ParseException;\n import java.util.List;\n import javax.ws.rs.BadRequestException;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.LoggerWrapper;\n+import org.apache.syncope.common.rest.api.beans.AuditQuery;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.core.logic.LoggerLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -58,11 +62,11 @@ public void delete(final LoggerType type, final String name) {\n \n             case AUDIT:\n                 try {\n-                    logic.disableAudit(AuditLoggerName.fromLoggerName(name));\n-                } catch (IllegalArgumentException | ParseException e) {\n-                    throw new BadRequestException(e);\n-                }\n-                break;\n+                logic.disableAudit(AuditLoggerName.fromLoggerName(name));\n+            } catch (IllegalArgumentException | ParseException e) {\n+                throw new BadRequestException(e);\n+            }\n+            break;\n \n             default:\n                 throw new BadRequestException();\n@@ -107,11 +111,11 @@ public void update(final LoggerType type, final LoggerTO logger) {\n \n             case AUDIT:\n                 try {\n-                    logic.enableAudit(AuditLoggerName.fromLoggerName(logger.getKey()));\n-                } catch (Exception e) {\n-                    throw new BadRequestException(e);\n-                }\n-                break;\n+                logic.enableAudit(AuditLoggerName.fromLoggerName(logger.getKey()));\n+            } catch (Exception e) {\n+                throw new BadRequestException(e);\n+            }\n+            break;\n \n             default:\n                 throw new BadRequestException();\n@@ -122,4 +126,20 @@ public void update(final LoggerType type, final LoggerTO logger) {\n     public List<EventCategory> events() {\n         return logic.listAuditEvents();\n     }\n+\n+    @Override\n+    public PagedResult<AuditEntry> search(final AuditQuery auditQuery) {\n+        Pair<Integer, List<AuditEntry>> result = logic.search(\n+                auditQuery.getEntityKey(),\n+                auditQuery.getPage(),\n+                auditQuery.getSize(),\n+                auditQuery.getType(),\n+                auditQuery.getCategory(),\n+                auditQuery.getSubcategory(),\n+                auditQuery.getEvents(),\n+                auditQuery.getResult(),\n+                getOrderByClauses(auditQuery.getOrderBy()));\n+\n+        return buildPagedResult(result.getRight(), auditQuery.getPage(), auditQuery.getSize(), result.getLeft());\n+    }\n }"},{"sha":"5a78787c0a4203becfc5de92ec344bf76178fc26","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuditDAO.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditDAO.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,45 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.dao;\n-\n-import java.util.List;\n-\n-import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n-\n-public interface AuditDAO {\n-\n-    String TABLE = \"SYNCOPEAUDIT\";\n-\n-    String MESSAGE_COLUMN = \"MESSAGE\";\n-\n-    List<AuditEntry> findByEntityKey(\n-            String entityKey,\n-            int page,\n-            int size,\n-            AuditElements.EventCategoryType type,\n-            String category,\n-            String subcategory,\n-            List<String> events,\n-            AuditElements.Result result,\n-            List<OrderByClause> orderByClauses);\n-\n-    int count(String key);\n-}"},{"sha":"e8cfe5af69fbad465cba689c7170cb402746df4e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/LoggerDAO.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -19,11 +19,18 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n \n public interface LoggerDAO extends DAO<Logger> {\n \n+    String AUDIT_TABLE = \"SYNCOPEAUDIT\";\n+\n+    String AUDIT_MESSAGE_COLUMN = \"MESSAGE\";\n+\n     Logger find(String key);\n \n     List<Logger> findAll(LoggerType type);\n@@ -33,4 +40,17 @@ public interface LoggerDAO extends DAO<Logger> {\n     void delete(String key);\n \n     void delete(Logger logger);\n+\n+    List<AuditEntry> findAuditEntries(\n+            String entityKey,\n+            int page,\n+            int size,\n+            AuditElements.EventCategoryType type,\n+            String category,\n+            String subcategory,\n+            List<String> events,\n+            AuditElements.Result result,\n+            List<OrderByClause> orderByClauses);\n+\n+    int countAuditEntries(String entityKey);\n }"},{"sha":"2b10e43a275d07d798560ee8580258c150ea26c3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AuditEntry.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditEntry.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import java.io.Serializable;\n-import java.util.Date;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-\n-public interface AuditEntry extends Serializable {\n-\n-    String getWho();\n-\n-    AuditLoggerName getLogger();\n-\n-    Object getBefore();\n-\n-    Object getOutput();\n-\n-    Object[] getInput();\n-\n-    String getThrowable();\n-\n-    Date getDate();\n-}"},{"sha":"3a7c1f3ed0745fd5bf5a5c2c93fc2d04282426f0","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONLoggerDAO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.springframework.util.CollectionUtils;\n \n-public abstract class AbstractJPAJSONAuditDAO extends JPAAuditDAO {\n+public abstract class AbstractJPAJSONLoggerDAO extends JPALoggerDAO {\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n ","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAuditDAO.java"},{"sha":"bbffaedafaccff926e49d58732dce03ae4b0b033","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONLoggerDAO.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONLoggerDAO.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -23,20 +23,20 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n-public class MyJPAJSONAuditDAO extends AbstractJPAJSONAuditDAO {\n+public class MyJPAJSONLoggerDAO extends AbstractJPAJSONLoggerDAO {\n \n     private static class MyMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n-            query.append('(').append(MESSAGE_COLUMN).append(\" -> '$.before' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" -> '$.input' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" -> '$.output' LIKE '%\").append(entityKey).\n+            query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\" -> '$.before' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" -> '$.input' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" -> '$.output' LIKE '%\").append(entityKey).\n                     append(\"%')\");\n \n             if (!containers.isEmpty()) {\n                 query.append(\" AND (\").\n-                        append(containers.stream().map(container -> \"JSON_CONTAINS(\" + MESSAGE_COLUMN + \", '\"\n+                        append(containers.stream().map(container -> \"JSON_CONTAINS(\" + AUDIT_MESSAGE_COLUMN + \", '\"\n                         + POJOHelper.serialize(container).replace(\"'\", \"''\")\n                         + \"')\").collect(Collectors.joining(\" OR \"))).\n                         append(')');","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAuditDAO.java"},{"sha":"c9ee797d7f2f2f0c7e6c32bc6a1e5246adb396e8","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONLoggerDAO.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONLoggerDAO.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -21,23 +21,23 @@\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.util.List;\n import java.util.stream.Collectors;\n-import org.apache.syncope.core.persistence.jpa.dao.AbstractJPAJSONAuditDAO.JSONMessageCriteriaBuilder;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractJPAJSONLoggerDAO.JSONMessageCriteriaBuilder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n-public class PGJPAJSONAuditDAO extends AbstractJPAJSONAuditDAO {\n+public class PGJPAJSONLoggerDAO extends AbstractJPAJSONLoggerDAO {\n \n     private static class PGMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n-            query.append('(').append(MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(MESSAGE_COLUMN).append(\" ->> 'output' LIKE '%\").append(entityKey).\n+            query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n+                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'output' LIKE '%\").append(entityKey).\n                     append(\"%')\");\n \n             if (!containers.isEmpty()) {\n                 query.append(\" AND (\").\n-                        append(containers.stream().map(container -> MESSAGE_COLUMN + \" @> '\"\n+                        append(containers.stream().map(container -> AUDIT_MESSAGE_COLUMN + \" @> '\"\n                         + POJOHelper.serialize(container).replace(\"'\", \"''\")\n                         + \"'::jsonb\").collect(Collectors.joining(\" OR \"))).\n                         append(')');\n@@ -49,7 +49,7 @@ protected String doBuild(final List<ObjectNode> containers) {\n \n     @Override\n     protected String select() {\n-        return MESSAGE_COLUMN + \"::text\";\n+        return AUDIT_MESSAGE_COLUMN + \"::text\";\n     }\n \n     @Override","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAuditDAO.java"},{"sha":"a2a38a92f300ea466bff30ccc19142b3dc414647","filename":"core/persistence-jpa-json/src/main/resources/myjson/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONLoggerDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"5bb728a1ee49289e1e49fe01974833127c1ed765","filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONLoggerDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"9d48a909f8b456b4c67546ee510f142aa607d902","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -25,8 +25,8 @@\n import javax.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -182,13 +182,13 @@ public AnyObjectDAO anyObjectDAO()\n         return (AnyObjectDAO) Class.forName(env.getProperty(\"anyObject.dao\")).getConstructor().newInstance();\n     }\n \n-    @ConditionalOnMissingBean(name = \"auditDAO\")\n+    @ConditionalOnMissingBean(name = \"loggerDAO\")\n     @Bean\n-    public AuditDAO auditDAO()\n+    public LoggerDAO loggerDAO()\n             throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n             IllegalArgumentException, InvocationTargetException {\n \n-        return (AuditDAO) Class.forName(env.getProperty(\"audit.dao\")).getConstructor().newInstance();\n+        return (LoggerDAO) Class.forName(env.getProperty(\"logger.dao\")).getConstructor().newInstance();\n     }\n \n     @Bean"},{"sha":"116e88d18c30a18ba2c17ff6bbe3ff746a1c08ba","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -109,11 +109,11 @@ public class XMLContentExporter implements ContentExporter {\n     private static final Logger LOG = LoggerFactory.getLogger(XMLContentExporter.class);\n \n     private static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = SetUtils.hashSet(\n-        \"QRTZ_\", \"LOGGING\", JPAReportExec.TABLE, JPATaskExec.TABLE,\n-        JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n-        JPAURelationship.TABLE, JPAUMembership.TABLE,\n-        JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n-        JPAARelationship.TABLE, JPAAMembership.TABLE, JPAAccessToken.TABLE\n+            \"QRTZ_\", \"LOGGING\", JPAReportExec.TABLE, JPATaskExec.TABLE,\n+            JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n+            JPAURelationship.TABLE, JPAUMembership.TABLE,\n+            JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n+            JPAARelationship.TABLE, JPAAMembership.TABLE, JPAAccessToken.TABLE\n     );\n \n     private static final Map<String, String> TABLES_TO_BE_FILTERED =\n@@ -134,7 +134,7 @@ private static boolean isTableAllowed(final String tableName) {\n     }\n \n     private static List<String> sortByForeignKeys(final String dbSchema, final Connection conn,\n-                                                  final Set<String> tableNames)\n+            final Set<String> tableNames)\n             throws SQLException {\n \n         Set<MultiParentNode<String>> roots = new HashSet<>();\n@@ -548,7 +548,7 @@ public void export(\n \n             EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(\n                     ApplicationContextProvider.getBeanFactory(), domain);\n-            Set<EntityType<?>> entityTypes = emf == null ? Collections.emptySet() : emf.getMetamodel().getEntities();\n+            Set<EntityType<?>> entityTypes = emf == null ? Set.of() : emf.getMetamodel().getEntities();\n             BidiMap<String, EntityType<?>> entities = entities(entityTypes);\n \n             // then sort tables based on foreign keys and dump"},{"sha":"be47a8115f1e29d8e3685dc5b2e128be027c6b58","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuditDAO.java","status":"removed","additions":0,"deletions":163,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditDAO.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,163 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.sql.Clob;\n-import java.sql.SQLException;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import javax.persistence.Query;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n-import org.apache.syncope.core.provisioning.api.AuditEntryImpl;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-public class JPAAuditDAO extends AbstractDAO<AbstractEntity> implements AuditDAO {\n-\n-    protected static class MessageCriteriaBuilder {\n-\n-        protected final StringBuilder query = new StringBuilder();\n-\n-        protected MessageCriteriaBuilder entityKey(final String entityKey) {\n-            query.append(' ').append(MESSAGE_COLUMN).append(\" LIKE '%\\\"key\\\":\\\"\").append(entityKey).append(\"\\\"%'\");\n-            return this;\n-        }\n-\n-        public MessageCriteriaBuilder type(final AuditElements.EventCategoryType type) {\n-            if (type != null) {\n-                query.append(\" AND \" + MESSAGE_COLUMN + \" LIKE '%\\\"type\\\":\\\"\").append(type.name()).append(\"\\\"%'\");\n-            }\n-            return this;\n-        }\n-\n-        public MessageCriteriaBuilder category(final String category) {\n-            if (StringUtils.isNotBlank(category)) {\n-                query.append(\" AND \" + MESSAGE_COLUMN + \" LIKE '%\\\"category\\\":\\\"\").append(category).append(\"\\\"%'\");\n-            }\n-            return this;\n-        }\n-\n-        public MessageCriteriaBuilder subcategory(final String subcategory) {\n-            if (StringUtils.isNotBlank(subcategory)) {\n-                query.append(\" AND \" + MESSAGE_COLUMN + \" LIKE '%\\\"subcategory\\\":\\\"\").\n-                        append(subcategory).append(\"\\\"%'\");\n-            }\n-            return this;\n-        }\n-\n-        public MessageCriteriaBuilder events(final List<String> events) {\n-            if (!events.isEmpty()) {\n-                query.append(\" AND ( \").\n-                        append(events.stream().\n-                                map(event -> MESSAGE_COLUMN + \" LIKE '%\\\"event\\\":\\\"\" + event + \"\\\"%'\").\n-                                collect(Collectors.joining(\" OR \"))).\n-                        append(\" )\");\n-            }\n-            return this;\n-        }\n-\n-        public MessageCriteriaBuilder result(final AuditElements.Result result) {\n-            if (result != null) {\n-                query.append(\" AND \").\n-                        append(MESSAGE_COLUMN).append(\" LIKE '%\\\"result\\\":\\\"\").append(result.name()).append(\"\\\"%' \");\n-            }\n-            return this;\n-        }\n-\n-        public String build() {\n-            return query.toString();\n-        }\n-    }\n-\n-    protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey) {\n-        return new MessageCriteriaBuilder().entityKey(entityKey);\n-    }\n-\n-    protected String select() {\n-        return MESSAGE_COLUMN;\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<AuditEntry> findByEntityKey(\n-            final String entityKey,\n-            final int page,\n-            final int itemsPerPage,\n-            final AuditElements.EventCategoryType type,\n-            final String category,\n-            final String subcategory,\n-            final List<String> events,\n-            final AuditElements.Result result,\n-            final List<OrderByClause> orderByClauses) {\n-\n-        String queryString = \"SELECT \" + select()\n-                + \" FROM \" + TABLE\n-                + \" WHERE \" + messageCriteriaBuilder(entityKey).\n-                        type(type).\n-                        category(category).\n-                        subcategory(subcategory).\n-                        result(result).\n-                        events(events).\n-                        build();\n-        if (!orderByClauses.isEmpty()) {\n-            queryString += \" ORDER BY \" + orderByClauses.stream().\n-                    map(orderBy -> orderBy.getField() + ' ' + orderBy.getDirection().name()).\n-                    collect(Collectors.joining(\",\"));\n-        }\n-\n-        Query query = entityManager().createNativeQuery(queryString);\n-        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n-        if (itemsPerPage >= 0) {\n-            query.setMaxResults(itemsPerPage);\n-        }\n-\n-        @SuppressWarnings(\"unchecked\")\n-        List<Object> entries = query.getResultList();\n-        return entries.stream().map(row -> {\n-            String value;\n-            if (row instanceof Clob) {\n-                Clob clob = (Clob) row;\n-                try {\n-                    value = clob.getSubString(1, (int) clob.length());\n-                } catch (SQLException e) {\n-                    LOG.error(\"Unexpected error reading Audit Entry for entity key {}\", entityKey, e);\n-                    return null;\n-                }\n-            } else {\n-                value = row.toString();\n-            }\n-            return POJOHelper.deserialize(value, AuditEntryImpl.class);\n-        }).filter(Objects::nonNull).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    public int count(final String key) {\n-        String queryString = \"SELECT COUNT(0) FROM \" + TABLE\n-                + \" WHERE \" + messageCriteriaBuilder(key).build();\n-        Query countQuery = entityManager().createNativeQuery(queryString);\n-\n-        return ((Number) countQuery.getSingleResult()).intValue();\n-    }\n-}"},{"sha":"6e8595267490f6e814e0a042e44a0bb4fbd22c38","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPALoggerDAO.java","status":"modified","additions":139,"deletions":2,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,18 +18,85 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.sql.Clob;\n+import java.sql.SQLException;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.jpa.entity.JPALogger;\n-import org.springframework.stereotype.Repository;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPALoggerDAO extends AbstractDAO<Logger> implements LoggerDAO {\n \n+    protected static class MessageCriteriaBuilder {\n+\n+        protected final StringBuilder query = new StringBuilder();\n+\n+        protected MessageCriteriaBuilder entityKey(final String entityKey) {\n+            query.append(' ').append(AUDIT_MESSAGE_COLUMN).\n+                    append(\" LIKE '%key%\").append(entityKey).append(\"%'\");\n+            return this;\n+        }\n+\n+        public MessageCriteriaBuilder type(final AuditElements.EventCategoryType type) {\n+            if (type != null) {\n+                query.append(\" AND \").append(AUDIT_MESSAGE_COLUMN).\n+                        append(\" LIKE '%\\\"type\\\":\\\"\").append(type.name()).append(\"\\\"%'\");\n+            }\n+            return this;\n+        }\n+\n+        public MessageCriteriaBuilder category(final String category) {\n+            if (StringUtils.isNotBlank(category)) {\n+                query.append(\" AND \").append(AUDIT_MESSAGE_COLUMN).\n+                        append(\" LIKE '%\\\"category\\\":\\\"\").append(category).append(\"\\\"%'\");\n+            }\n+            return this;\n+        }\n+\n+        public MessageCriteriaBuilder subcategory(final String subcategory) {\n+            if (StringUtils.isNotBlank(subcategory)) {\n+                query.append(\" AND \").append(AUDIT_MESSAGE_COLUMN).\n+                        append(\" LIKE '%\\\"subcategory\\\":\\\"\").append(subcategory).append(\"\\\"%'\");\n+            }\n+            return this;\n+        }\n+\n+        public MessageCriteriaBuilder events(final List<String> events) {\n+            if (!events.isEmpty()) {\n+                query.append(\" AND ( \").\n+                        append(events.stream().\n+                                map(event -> AUDIT_MESSAGE_COLUMN + \" LIKE '%\\\"event\\\":\\\"\" + event + \"\\\"%'\").\n+                                collect(Collectors.joining(\" OR \"))).\n+                        append(\" )\");\n+            }\n+            return this;\n+        }\n+\n+        public MessageCriteriaBuilder result(final AuditElements.Result result) {\n+            if (result != null) {\n+                query.append(\" AND \").append(AUDIT_MESSAGE_COLUMN).\n+                        append(\" LIKE '%\\\"result\\\":\\\"\").append(result.name()).append(\"\\\"%' \");\n+            }\n+            return this;\n+        }\n+\n+        public String build() {\n+            return query.toString();\n+        }\n+    }\n+\n     @Override\n     public Logger find(final String key) {\n         return entityManager().find(JPALogger.class, key);\n@@ -66,4 +133,74 @@ public void delete(final String key) {\n \n         delete(logger);\n     }\n+\n+    protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey) {\n+        return new MessageCriteriaBuilder().entityKey(entityKey);\n+    }\n+\n+    @Override\n+    public int countAuditEntries(final String entityKey) {\n+        String queryString = \"SELECT COUNT(0) FROM \" + AUDIT_TABLE\n+                + \" WHERE \" + messageCriteriaBuilder(entityKey).build();\n+        Query countQuery = entityManager().createNativeQuery(queryString);\n+\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n+    protected String select() {\n+        return AUDIT_MESSAGE_COLUMN;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<AuditEntry> findAuditEntries(\n+            final String entityKey,\n+            final int page,\n+            final int itemsPerPage,\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final List<String> events,\n+            final AuditElements.Result result,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        String queryString = \"SELECT \" + select()\n+                + \" FROM \" + AUDIT_TABLE\n+                + \" WHERE \" + messageCriteriaBuilder(entityKey).\n+                        type(type).\n+                        category(category).\n+                        subcategory(subcategory).\n+                        result(result).\n+                        events(events).\n+                        build();\n+        if (!orderByClauses.isEmpty()) {\n+            queryString += \" ORDER BY \" + orderByClauses.stream().\n+                    map(orderBy -> orderBy.getField() + ' ' + orderBy.getDirection().name()).\n+                    collect(Collectors.joining(\",\"));\n+        }\n+\n+        Query query = entityManager().createNativeQuery(queryString);\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+        if (itemsPerPage >= 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> entries = query.getResultList();\n+        return entries.stream().map(row -> {\n+            String value;\n+            if (row instanceof Clob) {\n+                Clob clob = (Clob) row;\n+                try {\n+                    value = clob.getSubString(1, (int) clob.length());\n+                } catch (SQLException e) {\n+                    LOG.error(\"Unexpected error reading Audit Entry for entity key {}\", entityKey, e);\n+                    return null;\n+                }\n+            } else {\n+                value = row.toString();\n+            }\n+            return POJOHelper.deserialize(value, AuditEntry.class);\n+        }).filter(Objects::nonNull).collect(Collectors.toList());\n+    }\n }"},{"sha":"a65b3fb7cc1e6d13f2799114df7ca7991e5c98aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,12 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import java.util.Objects;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"key\")\n public abstract class AbstractEntity implements Entity {\n \n     private static final long serialVersionUID = -9017214159540857901L;"},{"sha":"d44e0810f33115da1f2aacc18f42545d558bd564","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -246,5 +246,4 @@ public void setPoolConf(final ConnPoolConf poolConf) {\n         checkType(poolConf, JPAConnPoolConf.class);\n         this.poolConf = (JPAConnPoolConf) poolConf;\n     }\n-\n }"},{"sha":"b547e65513250c12b92d28fe6f4705f96df5d695","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"3d6b949c56225a9bc3997dc71d763c9d0f441c06","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AuditEntryImpl.java","status":"removed","additions":0,"deletions":219,"changes":219,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImpl.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,219 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License; Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing;\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS; WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND; either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api;\n-\n-import java.util.Date;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.request.UserCR;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n-\n-@SuppressWarnings({ \"squid:S1450\", \"squid:S1948\" })\n-public class AuditEntryImpl implements AuditEntry {\n-\n-    private static final long serialVersionUID = -2299082316063743582L;\n-\n-    private static final String MASKED_VALUE = \"<MASKED>\";\n-\n-    private final String who;\n-\n-    private final AuditLoggerName logger;\n-\n-    private final Object before;\n-\n-    private final Object output;\n-\n-    private final Object[] input;\n-\n-    private String throwable;\n-\n-    private Date date;\n-\n-    @JsonCreator\n-    public AuditEntryImpl(\n-            @JsonProperty(\"who\") final String who,\n-            @JsonProperty(\"logger\") final AuditLoggerName logger,\n-            @JsonProperty(\"before\") final Object before,\n-            @JsonProperty(\"output\") final Object output,\n-            @JsonProperty(\"input\") final Object[] input) {\n-\n-        super();\n-\n-        this.who = who;\n-        this.logger = logger;\n-        this.before = maskSensitive(before);\n-        this.output = maskSensitive(output);\n-        this.input = ArrayUtils.clone(input);\n-        if (this.input != null) {\n-            for (int i = 0; i < this.input.length; i++) {\n-                this.input[i] = maskSensitive(this.input[i]);\n-            }\n-        }\n-    }\n-\n-    private static Object maskSensitive(final Object object) {\n-        Object masked;\n-\n-        if (object instanceof UserTO) {\n-            masked = SerializationUtils.clone((UserTO) object);\n-            if (((UserTO) masked).getPassword() != null) {\n-                ((UserTO) masked).setPassword(MASKED_VALUE);\n-            }\n-            if (((UserTO) masked).getSecurityAnswer() != null) {\n-                ((UserTO) masked).setSecurityAnswer(MASKED_VALUE);\n-            }\n-        } else if (object instanceof UserCR) {\n-            masked = SerializationUtils.clone((UserCR) object);\n-            if (((UserCR) masked).getPassword() != null) {\n-                ((UserCR) masked).setPassword(MASKED_VALUE);\n-            }\n-            if (((UserCR) masked).getSecurityAnswer() != null) {\n-                ((UserCR) masked).setSecurityAnswer(MASKED_VALUE);\n-            }\n-        } else if (object instanceof UserUR && ((UserUR) object).getPassword() != null) {\n-            masked = SerializationUtils.clone((UserUR) object);\n-            ((UserUR) masked).getPassword().setValue(MASKED_VALUE);\n-        } else {\n-            masked = object;\n-        }\n-\n-        return masked;\n-    }\n-\n-    @Override\n-    public String getWho() {\n-        return who;\n-    }\n-\n-    @Override\n-    public AuditLoggerName getLogger() {\n-        return logger;\n-    }\n-\n-    @Override\n-    public Object getBefore() {\n-        return before;\n-    }\n-\n-    @Override\n-    public Object getOutput() {\n-        return output;\n-    }\n-\n-    @Override\n-    public Object[] getInput() {\n-        return input;\n-    }\n-\n-    @Override\n-    public String getThrowable() {\n-        return throwable;\n-    }\n-\n-    public void setThrowable(final String throwable) {\n-        this.throwable = throwable;\n-    }\n-\n-    @Override\n-    public Date getDate() {\n-        return date;\n-    }\n-\n-    public void setDate(final Date date) {\n-        this.date = date;\n-    }\n-\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static final class Builder {\n-\n-        private String who;\n-\n-        private AuditLoggerName logger;\n-\n-        private Object before;\n-\n-        private Object output;\n-\n-        private Object[] input;\n-\n-        private String throwable;\n-\n-        private Date date;\n-\n-        private String key;\n-\n-        private Builder() {\n-        }\n-\n-        public Builder date(final Date date) {\n-            this.date = date;\n-            return this;\n-        }\n-\n-        public Builder throwable(final String throwable) {\n-            this.throwable = throwable;\n-            return this;\n-        }\n-\n-        public Builder key(final String key) {\n-            this.key = key;\n-            return this;\n-        }\n-\n-        public Builder who(final String who) {\n-            this.who = who;\n-            return this;\n-        }\n-\n-        public Builder logger(final AuditLoggerName logger) {\n-            this.logger = logger;\n-            return this;\n-        }\n-\n-        public Builder before(final Object before) {\n-            this.before = before;\n-            return this;\n-        }\n-\n-        public Builder output(final Object output) {\n-            this.output = output;\n-            return this;\n-        }\n-\n-        public Builder input(final Object[] input) {\n-            this.input = input;\n-            return this;\n-        }\n-\n-        public AuditEntryImpl build() {\n-            AuditEntryImpl entry = new AuditEntryImpl(who, logger, before, output, input);\n-            entry.setDate(date);\n-            entry.setThrowable(throwable);\n-            return entry;\n-        }\n-    }\n-}"},{"sha":"1b491ce3832a9f98ed1c8e7645dcebd5c7960f60","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/LoggerDataBinder.java","status":"renamed","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FLoggerDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FLoggerDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FLoggerDataBinder.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n+import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.persistence.api.entity.Logger;\n \n-public interface AuditDataBinder {\n+public interface LoggerDataBinder {\n \n-    AuditEntryTO getAuditTO(String key, AuditEntry auditEntry);\n+    LoggerTO getLoggerTO(Logger logger);\n+\n+    LoggerTO getLoggerTO(AuditLoggerName auditLoggerName);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuditDataBinder.java"},{"sha":"af999062c17893f0a984faf70973adda1380b5c1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelper.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -64,18 +64,6 @@ public static String serialize(final Object object) {\n         return result;\n     }\n \n-    public static String serializeWithDefaultPrettyPrinter(final Object object) {\n-        String result = null;\n-\n-        try {\n-            result = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(object);\n-        } catch (Exception e) {\n-            LOG.error(\"During serialization\", e);\n-        }\n-\n-        return result;\n-    }\n-\n     public static <T extends Object> T deserialize(final String serialized, final Class<T> reference) {\n         T result = null;\n "},{"sha":"42aff674868f3a3c06399adff3942e9b98c16fa6","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/AuditEntryImplTest.java","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImplTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImplTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAuditEntryImplTest.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,93 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import java.util.Date;\n-import java.util.UUID;\n-import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.junit.jupiter.api.Test;\n-import org.mockito.Mock;\n-import org.springframework.test.util.ReflectionTestUtils;\n-\n-public class AuditEntryImplTest extends AbstractTest {\n-\n-    @Mock\n-    private AuditLoggerName logger;\n-\n-    private final String who = \"testUser\";\n-\n-    private final Object before = \"before\";\n-\n-    private final String output = \"output\";\n-\n-    private final String[] input = { \"test1\", \"test2\" };\n-\n-    private final String throwable = \"throwable\";\n-\n-    private final String key = UUID.randomUUID().toString();\n-\n-    private final Date date = new Date();\n-\n-    @Test\n-    public void AuditEntryImpl() {\n-        AuditEntryImpl auditEntryImpl = new AuditEntryImpl(who, logger, before, output, input);\n-        AuditEntryImpl auditEntryImpl2 = AuditEntryImpl.builder().\n-                who(who).\n-                before(before).\n-                logger(logger).\n-                output(output).\n-                input(null).\n-                date(date).\n-                key(key).\n-                throwable(throwable).\n-                build();\n-\n-        assertEquals(auditEntryImpl2.getWho(), auditEntryImpl.getWho());\n-        assertEquals(auditEntryImpl2.getLogger(), auditEntryImpl.getLogger());\n-        assertNotEquals(auditEntryImpl2.getInput(), auditEntryImpl.getInput().length);\n-        assertEquals(auditEntryImpl2.getDate(), auditEntryImpl2.getDate());\n-        assertEquals(auditEntryImpl2.getThrowable(), auditEntryImpl2.getThrowable());\n-    }\n-\n-    @Test\n-    public void AuditEntryImplWithUserTO(@Mock UserTO userTO) {\n-        AuditEntryImpl auditEntryImpl = new AuditEntryImpl(who, logger, before, userTO, input);\n-        assertTrue(EqualsBuilder.reflectionEquals(SerializationUtils.clone(userTO), auditEntryImpl.getOutput()));\n-\n-        ReflectionTestUtils.setField(userTO, \"password\", \"testP4ssw0rd!\");\n-        ReflectionTestUtils.setField(userTO, \"securityAnswer\", \"42\");\n-        AuditEntryImpl auditEntryImpl2 = new AuditEntryImpl(who, logger, before, userTO, input);\n-        assertFalse(EqualsBuilder.reflectionEquals(SerializationUtils.clone(userTO), auditEntryImpl2.getOutput()));\n-    }\n-\n-    @Test\n-    public void AuditEntryImplWithUserPatch(@Mock UserUR userUR) {\n-        AuditEntryImpl auditEntryImpl = new AuditEntryImpl(who, logger, userUR, output, input);\n-        assertTrue(EqualsBuilder.reflectionEquals(SerializationUtils.clone(userUR), auditEntryImpl.getBefore()));\n-    }\n-}"},{"sha":"65e622835ccd646b2c7f2afa6e85b9b99709a3c4","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/PropagationByResourceTest.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -26,7 +26,6 @@\n import static org.mockito.Mockito.verify;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -156,15 +155,15 @@ public void get() {\n \n         ReflectionTestUtils.setField(propagationByResource, \"toBeDeleted\", matchingList);\n         assertEquals(matchingList, propagationByResource.get(ResourceOperation.DELETE));\n-        assertEquals(Collections.<String>emptySet(), propagationByResource.get(ResourceOperation.CREATE));\n-        assertEquals(Collections.<String>emptySet(), propagationByResource.get(ResourceOperation.UPDATE));\n-        assertEquals(Collections.<String>emptySet(), propagationByResource.get(ResourceOperation.NONE));\n+        assertEquals(Set.of(), propagationByResource.get(ResourceOperation.CREATE));\n+        assertEquals(Set.of(), propagationByResource.get(ResourceOperation.UPDATE));\n+        assertEquals(Set.of(), propagationByResource.get(ResourceOperation.NONE));\n \n     }\n \n     @Test\n     public void asMap() {\n-        assertEquals(Collections.emptyMap(), propagationByResource.asMap());\n+        assertEquals(Map.of(), propagationByResource.asMap());\n     }\n \n     @Test\n@@ -173,8 +172,8 @@ public void set() {\n         keys.add(\"testKey1\");\n         keys.add(\"testKey2\");\n \n-        propagationByResource.set(ResourceOperation.CREATE, Collections.<String>emptySet());\n-        assertEquals(Collections.emptySet(), ReflectionTestUtils.getField(propagationByResource, \"toBeCreated\"));\n+        propagationByResource.set(ResourceOperation.CREATE, Set.of());\n+        assertEquals(Set.of(), ReflectionTestUtils.getField(propagationByResource, \"toBeCreated\"));\n         propagationByResource.set(ResourceOperation.CREATE, keys);\n         assertEquals(keys, ReflectionTestUtils.getField(propagationByResource, \"toBeCreated\"));\n         propagationByResource.set(ResourceOperation.UPDATE, keys);"},{"sha":"561d53bcfeb4748fef44e33d11d4dd7c818ea6cc","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValueTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValueTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValueTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValueTest.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -23,7 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-import java.util.Collections;\n+import java.util.List;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.junit.jupiter.api.Test;\n \n@@ -32,8 +32,8 @@ public class VirAttrCacheValueTest extends AbstractTest {\n     @Test\n     public void test() {\n         Object nullObj = null;\n-        VirAttrCacheValue cacheValue = new VirAttrCacheValue(Collections.singletonList(\"testValue\"));\n-        VirAttrCacheValue cacheValue2 = new VirAttrCacheValue(Collections.emptyList());\n+        VirAttrCacheValue cacheValue = new VirAttrCacheValue(List.of(\"testValue\"));\n+        VirAttrCacheValue cacheValue2 = new VirAttrCacheValue(List.of());\n \n         cacheValue.forceExpiring();\n         cacheValue2.forceExpiring();"},{"sha":"a9748ce56a513e14eaab1ff540276a1137b6a07d","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeserializerTest.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -26,7 +26,9 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Collections;\n+import java.util.List;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.junit.jupiter.api.BeforeEach;\n@@ -62,7 +64,7 @@ public void initTest() throws IOException {\n         when(jp.readValueAsTree()).thenReturn(tree);\n         when(tree.get(\"name\")).thenReturn(node2);\n         when(tree.get(\"value\")).thenReturn(node);\n-        when(node.iterator()).thenReturn(Collections.singletonList(node).iterator());\n+        when(node.iterator()).thenReturn(List.of(node).iterator());\n     }\n \n     @Test\n@@ -81,7 +83,7 @@ public void deserializeIsBoolean() throws IOException {\n         when(node.asBoolean()).thenReturn(Boolean.TRUE);\n         attr = deserializer.deserialize(jp, ct);\n         assertEquals(name, attr.getName());\n-        assertEquals(Collections.singletonList(Boolean.TRUE.toString()).get(0), attr.getValue().get(0));\n+        assertEquals(List.of(Boolean.TRUE.toString()).get(0), attr.getValue().get(0));\n     }\n \n     @Test\n@@ -93,7 +95,7 @@ public void deserializeIsDouble() throws IOException {\n         when(node.asDouble()).thenReturn(number);\n         attr = deserializer.deserialize(jp, ct);\n         assertEquals(name, attr.getName());\n-        assertEquals(Collections.singletonList(number).get(0), attr.getValue().get(0));\n+        assertEquals(List.of(number).get(0), attr.getValue().get(0));\n     }\n \n     @Test\n@@ -105,7 +107,7 @@ public void deserializeIsLong() throws IOException {\n         when(node.asLong()).thenReturn(number);\n         attr = deserializer.deserialize(jp, ct);\n         assertEquals(name, attr.getName());\n-        assertEquals(Collections.singletonList(number.toString()).get(0), attr.getValue().get(0));\n+        assertEquals(List.of(number.toString()).get(0), attr.getValue().get(0));\n     }\n \n     @Test\n@@ -116,7 +118,7 @@ public void deserializeIsInt() throws IOException {\n         when(node.asInt()).thenReturn(number);\n         attr = deserializer.deserialize(jp, ct);\n         assertEquals(attr.getName(), name);\n-        assertEquals(Collections.singletonList(number.toString()).get(0), attr.getValue().get(0));\n+        assertEquals(List.of(number.toString()).get(0), attr.getValue().get(0));\n     }\n \n     @Test\n@@ -126,6 +128,6 @@ public void deserializeIsText() throws IOException {\n         when(node.asText()).thenReturn(text);\n         attr = deserializer.deserialize(jp, ct);\n         assertEquals(attr.getName(), name);\n-        assertEquals(Collections.singletonList(text).get(0), attr.getValue().get(0));\n+        assertEquals(List.of(text).get(0), attr.getValue().get(0));\n     }\n }"},{"sha":"0a62afdf4d64d515012caf2d5c7b5066bf76e5ed","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/AttributeSerializerTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializerTest.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -31,7 +31,7 @@\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n-import java.util.Collections;\n+import java.util.List;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -50,31 +50,31 @@ public void serialize(@Mock Attribute source, @Mock JsonGenerator jgen, @Mock Se\n         verify(jgen).writeFieldName(\"value\");\n         verify(jgen).writeNull();\n \n-        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(new GuardedString()));\n+        when(source.getValue()).thenAnswer(ic -> List.of(new GuardedString()));\n         serializer.serialize(source, jgen, sp);\n         verify(jgen).writeObject(any(GuardedString.class));\n \n-        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(9000));\n+        when(source.getValue()).thenAnswer(ic -> List.of(9000));\n         serializer.serialize(source, jgen, sp);\n         verify(jgen).writeNumber(anyInt());\n \n-        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(9000L));\n+        when(source.getValue()).thenAnswer(ic -> List.of(9000L));\n         serializer.serialize(source, jgen, sp);\n         verify(jgen).writeNumber(anyLong());\n \n-        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(9000.1));\n+        when(source.getValue()).thenAnswer(ic -> List.of(9000.1));\n         serializer.serialize(source, jgen, sp);\n         verify(jgen).writeNumber(anyDouble());\n \n-        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(Boolean.TRUE));\n+        when(source.getValue()).thenAnswer(ic -> List.of(Boolean.TRUE));\n         serializer.serialize(source, jgen, sp);\n         verify(jgen).writeBoolean(anyBoolean());\n \n-        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(new byte[] { 9, 0, 0, 0 }));\n+        when(source.getValue()).thenAnswer(ic -> List.of(new byte[] { 9, 0, 0, 0 }));\n         serializer.serialize(source, jgen, sp);\n         verify(jgen).writeString(anyString());\n \n-        when(source.getValue()).thenAnswer(ic -> Collections.singletonList(\"test\"));\n+        when(source.getValue()).thenAnswer(ic -> List.of(\"test\"));\n         serializer.serialize(source, jgen, sp);\n         verify(jgen).writeString(eq(\"test\"));\n     }"},{"sha":"e3d83dd48f8ba84db3c5828a72ac631197fbc7d6","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelperTest.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -35,13 +35,6 @@ public void serialize() {\n         assertEquals(String.valueOf(object), POJOHelper.serialize(object));\n     }\n \n-    @Test\n-    public void serializeWithDefaultPrettyPrinter() {\n-        Object object = 9001;\n-\n-        assertEquals(String.valueOf(object), POJOHelper.serializeWithDefaultPrettyPrinter(object));\n-    }\n-\n     @Test\n     public void deserializeWithClassReference() {\n         String serialized = \"false\";"},{"sha":"1610019f67d575d4ebf37ed78fb5f48997530a8b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAuditManager.java","status":"modified","additions":63,"deletions":22,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,8 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n-import org.apache.syncope.core.provisioning.api.AuditEntryImpl;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n@@ -28,18 +34,48 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n+import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.Date;\n-\n @Transactional(readOnly = true)\n public class DefaultAuditManager implements AuditManager {\n \n+    private static final String MASKED_VALUE = \"<MASKED>\";\n+\n+    private static Object maskSensitive(final Object object) {\n+        Object masked;\n+\n+        if (object instanceof UserTO) {\n+            masked = SerializationUtils.clone((UserTO) object);\n+            if (((UserTO) masked).getPassword() != null) {\n+                ((UserTO) masked).setPassword(MASKED_VALUE);\n+            }\n+            if (((UserTO) masked).getSecurityAnswer() != null) {\n+                ((UserTO) masked).setSecurityAnswer(MASKED_VALUE);\n+            }\n+        } else if (object instanceof UserCR) {\n+            masked = SerializationUtils.clone((UserCR) object);\n+            if (((UserCR) masked).getPassword() != null) {\n+                ((UserCR) masked).setPassword(MASKED_VALUE);\n+            }\n+            if (((UserCR) masked).getSecurityAnswer() != null) {\n+                ((UserCR) masked).setSecurityAnswer(MASKED_VALUE);\n+            }\n+        } else if (object instanceof UserUR && ((UserUR) object).getPassword() != null) {\n+            masked = SerializationUtils.clone((UserUR) object);\n+            ((UserUR) masked).getPassword().setValue(MASKED_VALUE);\n+        } else {\n+            masked = object;\n+        }\n+\n+        return masked;\n+    }\n+\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n@@ -51,11 +87,11 @@ public boolean auditRequested(\n             final String subcategory,\n             final String event) {\n \n-        AuditEntry auditEntry = AuditEntryImpl.builder().\n-                who(who).\n-                logger(new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS)).\n-                date(new Date()).\n-                build();\n+        AuditEntry auditEntry = new AuditEntry();\n+        auditEntry.setWho(who);\n+        auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS));\n+        auditEntry.setDate(new Date());\n+\n         org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n                 loggerDAO.find(auditEntry.getLogger().toLoggerName());\n         boolean auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n@@ -64,11 +100,8 @@ public boolean auditRequested(\n             return true;\n         }\n \n-        auditEntry = AuditEntryImpl.builder()\n-                .who(who)\n-                .logger(new AuditLoggerName(type, category, subcategory, event, Result.FAILURE))\n-                .date(new Date())\n-                .build();\n+        auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, Result.FAILURE));\n+\n         syncopeLogger = loggerDAO.find(auditEntry.getLogger().toLoggerName());\n         auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n \n@@ -108,14 +141,22 @@ public void audit(\n             throwable = (Throwable) output;\n         }\n \n-        AuditEntry auditEntry = AuditEntryImpl.builder().\n-                who(who).\n-                logger(new AuditLoggerName(type, category, subcategory, event, condition)).\n-                before(before).\n-                output(throwable == null ? output : throwable.getMessage()).\n-                input(input).\n-                date(new Date()).\n-                build();\n+        AuditEntry auditEntry = new AuditEntry();\n+        auditEntry.setWho(who);\n+        auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, condition));\n+        auditEntry.setDate(new Date());\n+        auditEntry.setBefore(POJOHelper.serialize((maskSensitive(before))));\n+        if (throwable == null) {\n+            auditEntry.setOutput(POJOHelper.serialize((maskSensitive(output))));\n+        } else {\n+            auditEntry.setOutput(throwable.getMessage());\n+            auditEntry.setThrowable(ExceptionUtils2.getFullStackTrace(throwable));\n+        }\n+        if (input != null) {\n+            auditEntry.getInputs().addAll(Arrays.stream(input).\n+                    map(DefaultAuditManager::maskSensitive).map(POJOHelper::serialize).\n+                    collect(Collectors.toList()));\n+        }\n \n         org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n                 loggerDAO.find(auditEntry.getLogger().toLoggerName());"},{"sha":"4937503a07a8eaa49b1edc6330d20e53a17020b9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuditDataBinderImpl.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java?ref=562f5daa2792b3fd0b46ca7e8dc6d1ab2be964ed","patch":"@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import java.util.Arrays;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n-import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class AuditDataBinderImpl implements AuditDataBinder {\n-\n-    @Override\n-    public AuditEntryTO getAuditTO(final String key, final AuditEntry auditEntry) {\n-        AuditEntryTO auditEntryTO = new AuditEntryTO();\n-        auditEntryTO.setKey(key);\n-        auditEntryTO.setWho(auditEntry.getWho());\n-        auditEntryTO.setDate(auditEntry.getDate());\n-        auditEntryTO.setThrowable(auditEntry.getThrowable());\n-        auditEntryTO.setLoggerName(auditEntry.getLogger().toLoggerName());\n-\n-        auditEntryTO.setSubCategory(auditEntry.getLogger().getSubcategory());\n-        auditEntryTO.setEvent(auditEntry.getLogger().getEvent());\n-\n-        if (auditEntry.getLogger().getResult() != null) {\n-            auditEntryTO.setResult(auditEntry.getLogger().getResult().name());\n-        }\n-\n-        if (auditEntry.getBefore() != null) {\n-            auditEntryTO.setBefore(POJOHelper.serializeWithDefaultPrettyPrinter(auditEntry.getBefore()));\n-        }\n-\n-        if (auditEntry.getInput() != null) {\n-            auditEntryTO.getInputs().addAll(Arrays.stream(auditEntry.getInput()).\n-                    filter(Objects::nonNull).\n-                    map(POJOHelper::serializeWithDefaultPrettyPrinter).\n-                    collect(Collectors.toList()));\n-        }\n-\n-        if (auditEntry.getOutput() != null) {\n-            auditEntryTO.setOutput(POJOHelper.serializeWithDefaultPrettyPrinter(auditEntry.getOutput()));\n-        }\n-\n-        return auditEntryTO;\n-    }\n-}"},{"sha":"906c92dc111a98e9d76e8df9a254c571c90dce20","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/LoggerDataBinderImpl.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FLoggerDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FLoggerDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FLoggerDataBinderImpl.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.core.persistence.api.entity.Logger;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.data.LoggerDataBinder;\n+\n+@Component\n+public class LoggerDataBinderImpl implements LoggerDataBinder {\n+\n+    @Override\n+    public LoggerTO getLoggerTO(final Logger logger) {\n+        LoggerTO loggerTO = new LoggerTO();\n+        loggerTO.setKey(logger.getKey());\n+        loggerTO.setLevel(logger.getLevel());\n+        return loggerTO;\n+    }\n+\n+    @Override\n+    public LoggerTO getLoggerTO(final AuditLoggerName auditLoggerName) {\n+        LoggerTO loggerTO = new LoggerTO();\n+        loggerTO.setKey(auditLoggerName.toLoggerName());\n+        loggerTO.setLevel(LoggerLevel.DEBUG);\n+        return loggerTO;\n+    }\n+}"},{"sha":"7a67647fa511d1152239e2c5bed2973552e3c3bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AuditReportlet.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -23,12 +23,11 @@\n import java.util.concurrent.atomic.AtomicReference;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n-import org.apache.syncope.core.persistence.api.dao.AuditDAO;\n-import org.apache.syncope.core.persistence.api.entity.AuditEntry;\n-import org.apache.syncope.core.provisioning.api.AuditEntryImpl;\n+import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n@@ -49,17 +48,17 @@ public class AuditReportlet extends AbstractReportlet {\n     private DataSource datasource;\n \n     private void doExtractConf(final ContentHandler handler, final AtomicReference<String> status) throws SAXException {\n-        status.set(\"Fetching \" + conf.getSize() + \" rows from the \" + AuditDAO.TABLE + \" table\");\n+        status.set(\"Fetching \" + conf.getSize() + \" rows from the \" + LoggerDAO.AUDIT_TABLE + \" table\");\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n         jdbcTemplate.setMaxRows(conf.getSize());\n         List<Map<String, Object>> rows = jdbcTemplate.\n-                queryForList(\"SELECT * FROM \" + AuditDAO.TABLE + \" ORDER BY EVENT_DATE DESC\");\n+                queryForList(\"SELECT * FROM \" + LoggerDAO.AUDIT_TABLE + \" ORDER BY EVENT_DATE DESC\");\n \n         handler.startElement(\"\", \"\", \"events\", null);\n         AttributesImpl atts = new AttributesImpl();\n         for (Map<String, Object> row : rows) {\n-            AuditEntry auditEntry = POJOHelper.deserialize(row.get(\"MESSAGE\").toString(), AuditEntryImpl.class);\n+            AuditEntry auditEntry = POJOHelper.deserialize(row.get(\"MESSAGE\").toString(), AuditEntry.class);\n \n             atts.clear();\n             if (StringUtils.isNotBlank(auditEntry.getWho())) {\n@@ -94,12 +93,11 @@ private void doExtractConf(final ContentHandler handler, final AtomicReference<S\n                 handler.endElement(\"\", \"\", \"before\");\n             }\n \n-            if (auditEntry.getInput() != null) {\n+            if (!auditEntry.getInputs().isEmpty()) {\n                 handler.startElement(\"\", \"\", \"inputs\", null);\n-                for (Object inputObj : auditEntry.getInput()) {\n-                    char[] input = POJOHelper.serialize(inputObj).toCharArray();\n+                for (String input : auditEntry.getInputs()) {\n                     handler.startElement(\"\", \"\", \"input\", null);\n-                    handler.characters(input, 0, input.length);\n+                    handler.characters(input.toCharArray(), 0, input.length());\n                     handler.endElement(\"\", \"\", \"input\");\n                 }\n                 handler.endElement(\"\", \"\", \"inputs\");"},{"sha":"4808aa0aef0ed271f44c7ea6db75b9e15d8ce41f","filename":"docker/core/src/main/resources/persistence.properties.all","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"20b19a8982ed0e933ec3e54356e9728ea40c6255","filename":"docker/core/src/main/resources/persistence.properties.myjson","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -25,5 +25,5 @@ user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONConfDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONLoggerDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"238a10b0bb699b5e53872fd7b74b60da994c0927","filename":"docker/core/src/main/resources/persistence.properties.pgjsonb","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONLoggerDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"6a968d85ba61caf7aebbc0b0c25609098eb56e0e","filename":"ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"63987774c130f4a3594b199b2ec03726ad651e8e","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/SyslogRewriteAuditAppender.java","status":"modified","additions":21,"deletions":26,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -35,46 +35,41 @@ public class SyslogRewriteAuditAppender extends DefaultRewriteAuditAppender {\n     @Override\n     public Set<AuditLoggerName> getEvents() {\n         Set<AuditLoggerName> events = new HashSet<>();\n-        events.add(\n-                new AuditLoggerName(\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        ResourceLogic.class.getSimpleName(),\n-                        null,\n-                        \"update\",\n-                        AuditElements.Result.SUCCESS));\n-        events.add(\n-                new AuditLoggerName(\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        ConnectorLogic.class.getSimpleName(),\n-                        null,\n-                        \"update\",\n-                        AuditElements.Result.SUCCESS));\n-        events.add(\n-                new AuditLoggerName(\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        ResourceLogic.class.getSimpleName(),\n-                        null,\n-                        \"delete\",\n-                        AuditElements.Result.SUCCESS));\n+        events.add(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ResourceLogic.class.getSimpleName(),\n+                null,\n+                \"update\",\n+                AuditElements.Result.SUCCESS));\n+        events.add(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ConnectorLogic.class.getSimpleName(),\n+                null,\n+                \"update\",\n+                AuditElements.Result.SUCCESS));\n+        events.add(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ResourceLogic.class.getSimpleName(),\n+                null,\n+                \"delete\",\n+                AuditElements.Result.SUCCESS));\n         return events;\n     }\n \n     @Override\n-    public void initTargetAppender() {\n+    protected void initTargetAppender() {\n         targetAppender = SyslogAppender.newSyslogAppenderBuilder().\n                 setName(getTargetAppenderName()).\n                 withHost(\"localhost\").\n                 withPort(514).\n                 withProtocol(Protocol.UDP).\n-                setLayout(PatternLayout.newBuilder().\n-                        withPattern(\"%d{ISO8601} %-5level %logger - %msg%n\").\n-                        build()).\n+                setLayout(PatternLayout.newBuilder().withPattern(\"%d{ISO8601} %-5level %logger - %msg%n\").build()).\n                 setFacility(Facility.LOCAL1).\n                 build();\n     }\n \n     @Override\n     public String getTargetAppenderName() {\n-        return \"audit_for_\" + domainName + \"_syslog\";\n+        return \"audit_for_\" + domain + \"_syslog\";\n     }\n }"},{"sha":"ca508f7cd6c5c29bf3905e570ee6d0ba3d842e82","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileAuditAppender.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -38,25 +38,23 @@ public class TestFileAuditAppender extends DefaultAuditAppender {\n     @Override\n     public Set<AuditLoggerName> getEvents() {\n         Set<AuditLoggerName> events = new HashSet<>();\n-        events.add(\n-                new AuditLoggerName(\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        ResourceLogic.class.getSimpleName(),\n-                        null,\n-                        \"create\",\n-                        AuditElements.Result.SUCCESS));\n-        events.add(\n-                new AuditLoggerName(\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        ConnectorLogic.class.getSimpleName(),\n-                        null,\n-                        \"update\",\n-                        AuditElements.Result.SUCCESS));\n+        events.add(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ResourceLogic.class.getSimpleName(),\n+                null,\n+                \"create\",\n+                AuditElements.Result.SUCCESS));\n+        events.add(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ConnectorLogic.class.getSimpleName(),\n+                null,\n+                \"update\",\n+                AuditElements.Result.SUCCESS));\n         return events;\n     }\n \n     @Override\n-    public void initTargetAppender() {\n+    protected void initTargetAppender() {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n         // get log file path from existing file appender\n         RollingRandomAccessFileAppender mainFile =\n@@ -79,6 +77,6 @@ public void initTargetAppender() {\n \n     @Override\n     public String getTargetAppenderName() {\n-        return \"audit_for_\" + domainName + \"_norewrite_file\";\n+        return \"audit_for_\" + domain + \"_norewrite_file\";\n     }\n }"},{"sha":"9741a290d8b03b143dfc71205a6cad867dc50145","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileRewriteAuditAppender.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n@@ -36,19 +36,16 @@ public class TestFileRewriteAuditAppender extends DefaultRewriteAuditAppender {\n \n     @Override\n     public Set<AuditLoggerName> getEvents() {\n-        Set<AuditLoggerName> events = new HashSet<>();\n-        events.add(\n-                new AuditLoggerName(\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        ResourceLogic.class.getSimpleName(),\n-                        null,\n-                        \"update\",\n-                        AuditElements.Result.SUCCESS));\n-        return events;\n+        return Collections.singleton(new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ResourceLogic.class.getSimpleName(),\n+                null,\n+                \"update\",\n+                AuditElements.Result.SUCCESS));\n     }\n \n     @Override\n-    public void initTargetAppender() {\n+    protected void initTargetAppender() {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n         // get log file path from existing file appender\n@@ -68,11 +65,11 @@ public void initTargetAppender() {\n \n     @Override\n     public String getTargetAppenderName() {\n-        return \"audit_for_\" + domainName + \"_file\";\n+        return \"audit_for_\" + domain + \"_file\";\n     }\n \n     @Override\n-    public RewritePolicy getRewritePolicy() {\n+    protected RewritePolicy getRewritePolicy() {\n         return TestRewritePolicy.createPolicy();\n     }\n }"},{"sha":"2cb724b28bf939240ae7c7042c8ef1e1c334c883","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestRewritePolicy.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestRewritePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestRewritePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestRewritePolicy.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -25,14 +25,10 @@\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.message.SimpleMessage;\n-import org.apache.logging.log4j.status.StatusLogger;\n \n-@Plugin(name = \"TestRewritePolicy\", category = Core.CATEGORY_NAME, elementType = \"rewritePolicy\",\n-        printObject = true)\n+@Plugin(name = \"TestRewritePolicy\", category = Core.CATEGORY_NAME, elementType = \"rewritePolicy\", printObject = true)\n public class TestRewritePolicy implements RewritePolicy {\n \n-    protected static final StatusLogger LOGGER = StatusLogger.getLogger();\n-\n     @Override\n     public LogEvent rewrite(final LogEvent event) {\n         return new Log4jLogEvent.Builder(event).setMessage(new SimpleMessage(\"This is a static test message\")).build();\n@@ -42,5 +38,4 @@ public LogEvent rewrite(final LogEvent event) {\n     public static TestRewritePolicy createPolicy() {\n         return new TestRewritePolicy();\n     }\n-\n }"},{"sha":"6a968d85ba61caf7aebbc0b0c25609098eb56e0e","filename":"fit/core-reference/src/main/resources/elasticsearch/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"abab00d364f2935555a231078ac614fd2bb4bcd1","filename":"fit/core-reference/src/main/resources/logic.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -18,3 +18,4 @@ version=${syncope.version}\n buildNumber=${buildNumber}\n logicInvocationHandler=org.apache.syncope.core.logic.LogicInvocationHandler\n classPathScanImplementationLookup=org.apache.syncope.fit.core.reference.ITImplementationLookup\n+enable.jdbcAuditAppender=true"},{"sha":"111690f66f1bcd5a57353b1f3f6f05dfb55a9528","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -85,7 +85,6 @@\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.ApplicationService;\n-import org.apache.syncope.common.rest.api.service.AuditService;\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n@@ -287,8 +286,6 @@ public abstract class AbstractITCase {\n \n     protected static SCIMConfService scimConfService;\n \n-    protected static AuditService auditService;\n-\n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = Encryptor.class.getResourceAsStream(\"/security.properties\")) {\n@@ -358,7 +355,6 @@ public static void restSetup() {\n         oidcClientService = adminClient.getService(OIDCClientService.class);\n         oidcProviderService = adminClient.getService(OIDCProviderService.class);\n         scimConfService = adminClient.getService(SCIMConfService.class);\n-        auditService = adminClient.getService(AuditService.class);\n     }\n \n     @Autowired"},{"sha":"7aa36ab674101e8c7cf69810de4b40cbb2e1fdd1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -31,8 +31,8 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.AuditEntryTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -47,8 +47,8 @@\n \n public class AuditITCase extends AbstractITCase {\n \n-    private static AuditEntryTO query(final AuditQuery query, final int maxWaitSeconds, final boolean failIfEmpty) {\n-        List<AuditEntryTO> results = query(query, maxWaitSeconds);\n+    private static AuditEntry query(final AuditQuery query, final int maxWaitSeconds, final boolean failIfEmpty) {\n+        List<AuditEntry> results = query(query, maxWaitSeconds);\n         if (results.isEmpty()) {\n             if (failIfEmpty) {\n                 fail(\"Timeout when executing query for key \" + query.getEntityKey());\n@@ -58,15 +58,15 @@ private static AuditEntryTO query(final AuditQuery query, final int maxWaitSecon\n         return results.get(0);\n     }\n \n-    private static List<AuditEntryTO> query(final AuditQuery query, final int maxWaitSeconds) {\n+    private static List<AuditEntry> query(final AuditQuery query, final int maxWaitSeconds) {\n         int i = 0;\n-        List<AuditEntryTO> results = List.of();\n+        List<AuditEntry> results = List.of();\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n-            results = auditService.search(query).getResult();\n+            results = loggerService.search(query).getResult();\n             i++;\n         } while (results.isEmpty() && i < maxWaitSeconds);\n         return results;\n@@ -78,7 +78,7 @@ public void userReadAndSearchYieldsNoAudit() {\n         assertNotNull(userTO.getKey());\n \n         AuditQuery query = new AuditQuery.Builder(userTO.getKey()).build();\n-        List<AuditEntryTO> entries = query(query, MAX_WAIT_SECONDS);\n+        List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(1, entries.size());\n \n         PagedResult<UserTO> usersTOs = userService.search(\n@@ -100,8 +100,8 @@ public void findByUser() {\n \n         AuditQuery query = new AuditQuery.Builder(userTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n-        AuditEntryTO entry = query(query, MAX_WAIT_SECONDS, true);\n-        assertEquals(userTO.getKey(), entry.getKey());\n+        AuditEntry entry = query(query, MAX_WAIT_SECONDS, true);\n+        assertNotNull(entry);\n         userService.delete(userTO.getKey());\n     }\n \n@@ -119,8 +119,8 @@ public void findByUserAndOther() {\n                 event(\"create\").\n                 result(AuditElements.Result.SUCCESS).\n                 build();\n-        AuditEntryTO entry = query(query, MAX_WAIT_SECONDS, true);\n-        assertEquals(userTO.getKey(), entry.getKey());\n+        AuditEntry entry = query(query, MAX_WAIT_SECONDS, true);\n+        assertNotNull(entry);\n         userService.delete(userTO.getKey());\n     }\n \n@@ -131,8 +131,8 @@ public void findByGroup() {\n \n         AuditQuery query = new AuditQuery.Builder(groupTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n-        AuditEntryTO entry = query(query, MAX_WAIT_SECONDS, true);\n-        assertEquals(groupTO.getKey(), entry.getKey());\n+        AuditEntry entry = query(query, MAX_WAIT_SECONDS, true);\n+        assertNotNull(entry);\n         groupService.delete(groupTO.getKey());\n     }\n \n@@ -142,7 +142,7 @@ public void groupReadAndSearchYieldsNoAudit() {\n         assertNotNull(groupTO.getKey());\n \n         AuditQuery query = new AuditQuery.Builder(groupTO.getKey()).build();\n-        List<AuditEntryTO> entries = query(query, MAX_WAIT_SECONDS);\n+        List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(1, entries.size());\n \n         PagedResult<GroupTO> groups = groupService.search(\n@@ -163,8 +163,8 @@ public void findByAnyObject() {\n         assertNotNull(anyObjectTO.getKey());\n         AuditQuery query = new AuditQuery.Builder(anyObjectTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n-        AuditEntryTO entry = query(query, MAX_WAIT_SECONDS, true);\n-        assertEquals(anyObjectTO.getKey(), entry.getKey());\n+        AuditEntry entry = query(query, MAX_WAIT_SECONDS, true);\n+        assertNotNull(entry);\n         anyObjectService.delete(anyObjectTO.getKey());\n     }\n \n@@ -174,7 +174,7 @@ public void anyObjectReadAndSearchYieldsNoAudit() {\n         assertNotNull(anyObjectTO);\n \n         AuditQuery query = new AuditQuery.Builder(anyObjectTO.getKey()).build();\n-        List<AuditEntryTO> entries = query(query, MAX_WAIT_SECONDS);\n+        List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(1, entries.size());\n \n         PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n@@ -199,7 +199,7 @@ public void findByConnector() throws JsonProcessingException {\n                 event(\"update\").\n                 result(AuditElements.Result.SUCCESS).\n                 build();\n-        List<AuditEntryTO> entries = query(query, 0);\n+        List<AuditEntry> entries = query(query, 0);\n         int pre = entries.size();\n \n         ConnInstanceTO ldapConn = connectorService.read(connectorKey, null);"},{"sha":"7857c71247766ecfc0934ca9b0290c1eda3fdd81","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -105,7 +105,6 @@ public void listLogs() {\n     @Test\n     public void listAudits() throws ParseException {\n         List<LoggerTO> audits = loggerService.list(LoggerType.AUDIT);\n-\n         assertNotNull(audits);\n         assertFalse(audits.isEmpty());\n         for (LoggerTO audit : audits) {"},{"sha":"660242099c8f26121e9680f89fffeaf6372ba7d7","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7cd9b5d683b14fec0dbd8095b194e71053f19ee0/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc?ref=7cd9b5d683b14fec0dbd8095b194e71053f19ee0","patch":"@@ -91,7 +91,7 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONLoggerDAO\n ....\n \n In `provisioning.properties`, replace as follows:\n@@ -224,7 +224,7 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditDAO\n+logger.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONLoggerDAO\n ....\n \n In `provisioning.properties`, replace as follows:"}]}