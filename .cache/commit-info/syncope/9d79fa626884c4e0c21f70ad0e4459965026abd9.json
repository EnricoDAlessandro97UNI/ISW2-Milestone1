{"sha":"9d79fa626884c4e0c21f70ad0e4459965026abd9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlkNzlmYTYyNjg4NGM0ZTBjMjFmNzBhZDBlNDQ1OTk2NTAyNmFiZDk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-10T11:56:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-10T11:57:38Z"},"message":"[SYNCOPE-1493] Ensure to call findByPlainAttrValue / findByPlainAttrUniqueValue when it is the case","tree":{"sha":"78e0fb142b8c27e31c42b4ef885e33c73d7cb98f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/78e0fb142b8c27e31c42b4ef885e33c73d7cb98f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9d79fa626884c4e0c21f70ad0e4459965026abd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9d79fa626884c4e0c21f70ad0e4459965026abd9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9d79fa626884c4e0c21f70ad0e4459965026abd9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9d79fa626884c4e0c21f70ad0e4459965026abd9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e0ba6fe2b5def8168672a86fd91d77d662ca58d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0ba6fe2b5def8168672a86fd91d77d662ca58d1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e0ba6fe2b5def8168672a86fd91d77d662ca58d1"}],"stats":{"total":103,"additions":62,"deletions":41},"files":[{"sha":"787f1cb55b360f5f641c8ee42610f5f835af78f9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -21,9 +21,11 @@\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -43,7 +45,8 @@\n \n     List<A> findByPlainAttrValue(PlainSchema schema, PlainAttrValue attrValue, boolean ignoreCaseMatch);\n \n-    A findByPlainAttrUniqueValue(PlainSchema schema, PlainAttrValue attrUniqueValue, boolean ignoreCaseMatch);\n+    Optional<A> findByPlainAttrUniqueValue(\n+            PlainSchema schema, PlainAttrUniqueValue attrUniqueValue, boolean ignoreCaseMatch);\n \n     /**\n      * Find any objects by derived attribute value. This method could fail if one or more string literals contained"},{"sha":"f6fed58dd39f17a0267aebe51b9269014b6c92b5","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/api/dao/JPAJSONAnyDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJPAJSONAnyDAO.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n@@ -34,11 +36,11 @@ <A extends Any<?>> List<A> findByPlainAttrValue(\n             PlainAttrValue attrValue,\n             boolean ignoreCaseMatch);\n \n-    <A extends Any<?>> A findByPlainAttrUniqueValue(\n+    <A extends Any<?>> Optional<A> findByPlainAttrUniqueValue(\n             String table,\n             AnyUtils anyUtils,\n             PlainSchema schema,\n-            PlainAttrValue attrUniqueValue,\n+            PlainAttrUniqueValue attrUniqueValue,\n             boolean ignoreCaseMatch);\n \n     <A extends Any<?>> List<A> findByDerAttrValue("},{"sha":"9c8263a2f4615b2c50df6022950be0a4a6068692","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnyDAO.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -26,6 +26,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.regex.Pattern;\n import javax.persistence.Query;\n@@ -42,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n@@ -134,26 +136,26 @@ public <A extends Any<?>> List<A> findByPlainAttrValue(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <A extends Any<?>> A findByPlainAttrUniqueValue(\n+    public <A extends Any<?>> Optional<A> findByPlainAttrUniqueValue(\n             final String table,\n             final AnyUtils anyUtils,\n             final PlainSchema schema,\n-            final PlainAttrValue attrUniqueValue,\n+            final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n         if (schema == null) {\n             LOG.error(\"No PlainSchema\");\n-            return null;\n+            return Optional.empty();\n         }\n         if (!schema.isUniqueConstraint()) {\n             LOG.error(\"This schema has not unique constraint: '{}'\", schema.getKey());\n-            return null;\n+            return Optional.empty();\n         }\n \n         List<A> result = findByPlainAttrValue(table, anyUtils, schema, attrUniqueValue, ignoreCaseMatch);\n         return result.isEmpty()\n-                ? null\n-                : result.get(0);\n+                ? Optional.empty()\n+                : Optional.of(result.get(0));\n     }\n \n     /**"},{"sha":"253f382b9a40f9c6707db0584dafd09c9ad8c49f","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONAnyObjectDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -27,6 +28,7 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -53,9 +55,9 @@ public List<AnyObject> findByPlainAttrValue(\n     }\n \n     @Override\n-    public AnyObject findByPlainAttrUniqueValue(\n+    public Optional<AnyObject> findByPlainAttrUniqueValue(\n             final PlainSchema schema,\n-            final PlainAttrValue attrUniqueValue,\n+            final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n         return anyDAO().findByPlainAttrUniqueValue("},{"sha":"7066cddec923e3e5c0c51aa059b37d7e19da19f4","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONGroupDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -19,12 +19,14 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class JPAJSONGroupDAO extends JPAGroupDAO {\n@@ -49,9 +51,9 @@ public List<Group> findByPlainAttrValue(\n     }\n \n     @Override\n-    public Group findByPlainAttrUniqueValue(\n+    public Optional<Group> findByPlainAttrUniqueValue(\n             final PlainSchema schema,\n-            final PlainAttrValue attrUniqueValue,\n+            final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n         return anyDAO().findByPlainAttrUniqueValue("},{"sha":"345d1efcc17de7b6a108e9ce0ac92c574328a989","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONUserDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -28,6 +29,7 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n@@ -55,9 +57,9 @@ public List<User> findByPlainAttrValue(\n     }\n \n     @Override\n-    public User findByPlainAttrUniqueValue(\n+    public Optional<User> findByPlainAttrUniqueValue(\n             final PlainSchema schema,\n-            final PlainAttrValue attrUniqueValue,\n+            final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n         return anyDAO().findByPlainAttrUniqueValue("},{"sha":"fd537a6d8fa9fb9c8c4e04fa4d5114b07b4f9eee","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n@@ -227,24 +228,24 @@ public List<A> findByPlainAttrValue(\n     }\n \n     @Override\n-    public A findByPlainAttrUniqueValue(\n+    public Optional<A> findByPlainAttrUniqueValue(\n             final PlainSchema schema,\n-            final PlainAttrValue attrUniqueValue,\n+            final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n         if (schema == null) {\n             LOG.error(\"No PlainSchema\");\n-            return null;\n+            return Optional.empty();\n         }\n         if (!schema.isUniqueConstraint()) {\n             LOG.error(\"This schema has not unique constraint: '{}'\", schema.getKey());\n-            return null;\n+            return Optional.empty();\n         }\n \n         List<A> result = findByPlainAttrValue(schema, attrUniqueValue, ignoreCaseMatch);\n         return result.isEmpty()\n-                ? null\n-                : result.get(0);\n+                ? Optional.empty()\n+                : Optional.of(result.get(0));\n     }\n \n     /**"},{"sha":"71f72b0a06680bb330e026cb4d4e2a71e12027ed","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -27,6 +27,7 @@\n \n import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.junit.jupiter.api.Test;\n@@ -147,16 +149,18 @@ public void findByPlainAttrUniqueValue() {\n         UPlainAttrUniqueValue fullnameValue = entityFactory.newEntity(UPlainAttrUniqueValue.class);\n         fullnameValue.setStringValue(\"Gioacchino Rossini\");\n \n-        List<User> list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"fullname\"), fullnameValue, false);\n-        assertEquals(1, list.size());\n+        PlainSchema fullname = plainSchemaDAO.find(\"fullname\");\n+\n+        Optional<User> found = userDAO.findByPlainAttrUniqueValue(fullname, fullnameValue, false);\n+        assertTrue(found.isPresent());\n \n         fullnameValue.setStringValue(\"Gioacchino ROSSINI\");\n \n-        list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"fullname\"), fullnameValue, false);\n-        assertEquals(0, list.size());\n+        found = userDAO.findByPlainAttrUniqueValue(fullname, fullnameValue, false);\n+        assertFalse(found.isPresent());\n \n-        list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"fullname\"), fullnameValue, true);\n-        assertEquals(1, list.size());\n+        found = userDAO.findByPlainAttrUniqueValue(fullname, fullnameValue, true);\n+        assertTrue(found.isPresent());\n     }\n \n     @Test"},{"sha":"09e8d5f817a31fbc5ced2d93bada26ec199e6542","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":17,"deletions":14,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d79fa626884c4e0c21f70ad0e4459965026abd9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=9d79fa626884c4e0c21f70ad0e4459965026abd9","patch":"@@ -25,7 +25,6 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -42,6 +41,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -282,22 +282,25 @@ private List<String> findByConnObjectKey(\n         } else if (intAttrName.getSchemaType() != null) {\n             switch (intAttrName.getSchemaType()) {\n                 case PLAIN:\n-                    PlainAttrValue value = anyUtils.newPlainAttrValue();\n-\n-                    if (intAttrName.getSchemaType() == SchemaType.PLAIN) {\n+                    PlainAttrValue value = intAttrName.getSchema().isUniqueConstraint()\n+                            ? anyUtils.newPlainAttrUniqueValue()\n+                            : anyUtils.newPlainAttrValue();\n+                    try {\n+                        value.parseValue((PlainSchema) intAttrName.getSchema(), connObjectKey);\n+                    } catch (ParsingValidationException e) {\n+                        LOG.error(\"While parsing provided __UID__ {}\", value, e);\n                         value.setStringValue(connObjectKey);\n-                    } else {\n-                        try {\n-                            value.parseValue((PlainSchema) intAttrName.getSchema(), connObjectKey);\n-                        } catch (ParsingValidationException e) {\n-                            LOG.error(\"While parsing provided __UID__ {}\", value, e);\n-                            value.setStringValue(connObjectKey);\n-                        }\n                     }\n \n-                    result.addAll(anyUtils.dao().findByPlainAttrValue(\n-                            (PlainSchema) intAttrName.getSchema(), value, provision.isIgnoreCaseMatch()).\n-                            stream().map(Entity::getKey).collect(Collectors.toList()));\n+                    if (intAttrName.getSchema().isUniqueConstraint()) {\n+                        anyUtils.dao().findByPlainAttrUniqueValue((PlainSchema) intAttrName.getSchema(),\n+                                (PlainAttrUniqueValue) value, provision.isIgnoreCaseMatch()).\n+                                ifPresent(found -> result.add(found.getKey()));\n+                    } else {\n+                        result.addAll(anyUtils.dao().findByPlainAttrValue((PlainSchema) intAttrName.getSchema(),\n+                                value, provision.isIgnoreCaseMatch()).\n+                                stream().map(Entity::getKey).collect(Collectors.toList()));\n+                    }\n                     break;\n \n                 case DERIVED:"}]}