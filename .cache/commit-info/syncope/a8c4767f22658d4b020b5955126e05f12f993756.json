{"sha":"a8c4767f22658d4b020b5955126e05f12f993756","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE4YzQ3NjdmMjI2NThkNGIwMjBiNTk1NTEyNmUwNWYxMmY5OTM3NTY=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-01T14:10:32Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-01T14:10:32Z"},"message":"[SYNCOPE-231]\n* renaming SchemaType to AttributeSchemaType\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1441449 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4718cf6f7aaff434a025b9b9479e1b27a82a13e0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4718cf6f7aaff434a025b9b9479e1b27a82a13e0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a8c4767f22658d4b020b5955126e05f12f993756","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8c4767f22658d4b020b5955126e05f12f993756","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a8c4767f22658d4b020b5955126e05f12f993756","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a8c4767f22658d4b020b5955126e05f12f993756/comments","author":null,"committer":null,"parents":[{"sha":"e232f5f45e76b0209efd8656236942dc33998a26","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e232f5f45e76b0209efd8656236942dc33998a26","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e232f5f45e76b0209efd8656236942dc33998a26"}],"stats":{"total":120,"additions":60,"deletions":60},"files":[{"sha":"7d56592691d3982a3c28ee87815332078b408da1","filename":"common/src/main/java/org/apache/syncope/common/to/SchemaTO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -22,15 +22,15 @@\n import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n-import org.apache.syncope.common.types.SchemaType;\r\n+import org.apache.syncope.common.types.AttributeSchemaType;\r\n \r\n @XmlRootElement(name = \"schema\")\r\n @XmlType\r\n public class SchemaTO extends AbstractSchemaTO {\r\n \r\n     private static final long serialVersionUID = -8133983392476990308L;\r\n \r\n-    private SchemaType type = SchemaType.String;\r\n+    private AttributeSchemaType type = AttributeSchemaType.String;\r\n \r\n     private String mandatoryCondition;\r\n \r\n@@ -106,11 +106,11 @@ public void setReadonly(final boolean readonly) {\n         this.readonly = readonly;\r\n     }\r\n \r\n-    public SchemaType getType() {\r\n+    public AttributeSchemaType getType() {\r\n         return type;\r\n     }\r\n \r\n-    public void setType(final SchemaType type) {\r\n+    public void setType(final AttributeSchemaType type) {\r\n         this.type = type;\r\n     }\r\n \r"},{"sha":"4ac4432eb0c651721c34d48f3f58f7f2739b9d28","filename":"common/src/main/java/org/apache/syncope/common/types/AttributeSchemaType.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -21,7 +21,7 @@\n import javax.xml.bind.annotation.XmlEnum;\r\n \r\n @XmlEnum\r\n-public enum SchemaType {\r\n+public enum AttributeSchemaType {\r\n \r\n     String(\"java.lang.String\"),\r\n     Long(\"java.lang.Long\"),\r\n@@ -32,7 +32,7 @@ public enum SchemaType {\n \r\n     final private String className;\r\n \r\n-    SchemaType(String className) {\r\n+    AttributeSchemaType(String className) {\r\n         this.className = className;\r\n     }\r\n \r\n@@ -41,6 +41,6 @@ public String getClassName() {\n     }\r\n \r\n     public boolean isConversionPatternNeeded() {\r\n-        return this == SchemaType.Date || this == SchemaType.Double || this == SchemaType.Long;\r\n+        return this == AttributeSchemaType.Date || this == AttributeSchemaType.Double || this == AttributeSchemaType.Long;\r\n     }\r\n }\r","previous_filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java"},{"sha":"6f4dac8720b06350d5d7db5373bf3615bbdc5323","filename":"console/src/main/java/org/apache/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n@@ -103,9 +103,9 @@ protected List<String> load() {\n         ((DropDownChoice) validatorClass.getField()).setNullValid(true);\n         validatorClass.setChoices(validatorsList.getObject());\n \n-        final AjaxDropDownChoicePanel<SchemaType> type = new AjaxDropDownChoicePanel<SchemaType>(\"type\",\n+        final AjaxDropDownChoicePanel<AttributeSchemaType> type = new AjaxDropDownChoicePanel<AttributeSchemaType>(\"type\",\n                 getString(\"type\"), new PropertyModel(schema, \"type\"));\n-        type.setChoices(Arrays.asList(SchemaType.values()));\n+        type.setChoices(Arrays.asList(AttributeSchemaType.values()));\n         type.addRequiredLabel();\n \n         final AjaxTextFieldPanel enumerationValuesPanel = \n@@ -126,7 +126,7 @@ protected List<String> load() {\n \n         enumerationKeys.setModelObject((Serializable) getEnumValuesAsList(schema.getEnumerationKeys()));\n \n-        if (schema != null && SchemaType.Enum.equals(((SchemaTO) schema).getType())) {\n+        if (schema != null && AttributeSchemaType.Enum.equals(((SchemaTO) schema).getType())) {\n             enumerationValues.setEnabled(Boolean.TRUE);\n             enumerationKeys.setEnabled(Boolean.TRUE);\n             enumerationValuesPanel.addRequiredLabel();\n@@ -140,7 +140,7 @@ protected List<String> load() {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                if (SchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {\n+                if (AttributeSchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {\n                     if (!enumerationValuesPanel.isRequired()) {\n                         enumerationValuesPanel.addRequiredLabel();\n                     }"},{"sha":"c415a187c5dd656c3485874b6267f9718459af37","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.console.commons.JexlHelpUtil;\n import org.apache.syncope.console.pages.Schema;\n import org.apache.syncope.console.rest.SchemaRestClient;\n@@ -174,7 +174,7 @@ private FieldPanel getFieldPanel(final SchemaTO schemaTO, final Form form, final\n \n         final boolean readOnly = templateMode ? false : schemaTO.isReadonly();\n \n-        final SchemaType type = templateMode ? SchemaType.String : schemaTO.getType();\n+        final AttributeSchemaType type = templateMode ? AttributeSchemaType.String : schemaTO.getType();\n \n         switch (type) {\n             case Boolean:"},{"sha":"2ac62df562e46e86a3af7b18e9fe6691004d6243","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -31,7 +31,7 @@\n import org.apache.commons.lang.builder.ToStringStyle;\n import org.apache.commons.lang.time.DateUtils;\n import org.apache.syncope.common.SyncopeConstants;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.persistence.validation.entity.AttrValueCheck;\n \n@@ -183,9 +183,9 @@ public <T> T getValue() {\n     public String getValueAsString() {\n         String result = null;\n \n-        final SchemaType type = getAttribute() == null || getAttribute().getSchema() == null\n+        final AttributeSchemaType type = getAttribute() == null || getAttribute().getSchema() == null\n                 || getAttribute().getSchema().getType() == null\n-                ? SchemaType.String\n+                ? AttributeSchemaType.String\n                 : getAttribute().getSchema().getType();\n \n         switch (type) {"},{"sha":"00e380929be00b20303e84c47c72222707d2c620","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerSchema.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -21,7 +21,7 @@\n import javax.persistence.Column;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n \n @MappedSuperclass\n public abstract class AbstractDerSchema extends AbstractBaseBean {\n@@ -50,8 +50,8 @@ public void setExpression(final String expression) {\n         this.expression = expression;\n     }\n \n-    public SchemaType getType() {\n-        return SchemaType.String;\n+    public AttributeSchemaType getType() {\n+        return AttributeSchemaType.String;\n     }\n \n     public String getMandatoryCondition() {"},{"sha":"4a42720815a463a6939a4cc34fe66f2a00236b57","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -32,7 +32,7 @@\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.validation.attrvalue.AbstractValidator;\n import org.apache.syncope.core.persistence.validation.attrvalue.BasicValidator;\n import org.apache.syncope.core.persistence.validation.entity.SchemaCheck;\n@@ -50,7 +50,7 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n \n     @Column(nullable = false)\n     @Enumerated(STRING)\n-    private SchemaType type;\n+    private AttributeSchemaType type;\n \n     @Column(nullable = false)\n     private String mandatoryCondition;\n@@ -90,7 +90,7 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n     public AbstractSchema() {\n         super();\n \n-        type = SchemaType.String;\n+        type = AttributeSchemaType.String;\n         mandatoryCondition = Boolean.FALSE.toString();\n         multivalue = getBooleanAsInteger(false);\n         uniqueConstraint = getBooleanAsInteger(false);\n@@ -105,11 +105,11 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    public SchemaType getType() {\n+    public AttributeSchemaType getType() {\n         return type;\n     }\n \n-    public void setType(final SchemaType type) {\n+    public void setType(final AttributeSchemaType type) {\n         this.type = type;\n     }\n "},{"sha":"4657b30e00c9107b90bed2d16cdd66d12d5640a2","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractVirSchema.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -20,7 +20,7 @@\n \n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n \n @MappedSuperclass\n public abstract class AbstractVirSchema extends AbstractBaseBean {\n@@ -36,8 +36,8 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    public SchemaType getType() {\n-        return SchemaType.String;\n+    public AttributeSchemaType getType() {\n+        return AttributeSchemaType.String;\n     }\n \n     public String getMandatoryCondition() {"},{"sha":"940c52531199d5ad703722c08565af693dec16b0","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.search.ResourceCond;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n@@ -402,7 +402,7 @@ private void fillAttributeQuery(final StringBuilder query, final AbstractAttrVal\n                 break;\n \n             case LIKE:\n-                if (schema.getType() == SchemaType.String || schema.getType() == SchemaType.Enum) {\n+                if (schema.getType() == AttributeSchemaType.String || schema.getType() == AttributeSchemaType.Enum) {\n                     query.append(column);\n                     if (not) {\n                         query.append(\" NOT \");\n@@ -471,7 +471,7 @@ private void fillAttributeQuery(final StringBuilder query, final AbstractAttrVal\n         }\n     }\n \n-    private String getFieldName(final SchemaType type) {\n+    private String getFieldName(final AttributeSchemaType type) {\n         String result;\n \n         switch (type) {\n@@ -555,7 +555,7 @@ private String getQuery(final AttributableCond cond, final boolean not, final Li\n \n         AbstractSchema schema = attrUtil.newSchema();\n         schema.setName(attributableClassField.getName());\n-        for (SchemaType type : SchemaType.values()) {\n+        for (AttributeSchemaType type : AttributeSchemaType.values()) {\n             if (attributableClassField.getType().getName().equals(type.getClassName())) {\n                 schema.setType(type);\n             }"},{"sha":"6cf39b787b592a2ae5e4d607fefc8031f49adcf4","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/attrvalue/BasicValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Arrays;\n \n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n \n@@ -35,7 +35,7 @@ public BasicValidator(final AbstractSchema schema) {\n     @Override\n     protected void doValidate(AbstractAttrValue attributeValue) throws InvalidAttrValueException {\n \n-        if (SchemaType.Enum.equals(schema.getType())) {\n+        if (AttributeSchemaType.Enum.equals(schema.getType())) {\n             final String[] enumeration = schema.getEnumerationValues().split(AbstractSchema.enumValuesSeparator);\n \n             final String value = attributeValue.getStringValue();"},{"sha":"6acaf5b437b623ccbccf8ca30be99c0f606fb405","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchemaValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -22,7 +22,7 @@\n import javax.validation.ConstraintValidatorContext;\n \n import org.apache.syncope.common.types.EntityViolationType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n \n public class SchemaValidator extends AbstractValidator implements ConstraintValidator<SchemaCheck, AbstractSchema> {\n@@ -41,7 +41,7 @@ public boolean isValid(final AbstractSchema object, final ConstraintValidatorCon\n             if (object == null) {\n                 isValid = true;\n             } else {\n-                isValid = object.getType() == null || !object.getType().equals(SchemaType.Enum)\n+                isValid = object.getType() == null || !object.getType().equals(AttributeSchemaType.Enum)\n                         || object.getEnumerationValues() != null;\n \n                 if (!isValid) {"},{"sha":"8874d9dcadd17bee733262ac15d8c5334213c2fd","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -31,7 +31,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.types.IntMappingType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -151,7 +151,7 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                 vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n         AbstractSchema schema = null;\n-        SchemaType schemaType;\n+        AttributeSchemaType schemaType;\n         switch (mapItem.getIntMappingType()) {\n             case UserSchema:\n             case RoleSchema:\n@@ -160,11 +160,11 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n                 final SchemaDAO schemaDAO = context.getBean(SchemaDAO.class);\n                 schema = schemaDAO.find(mapItem.getIntAttrName(),\n                         MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n-                schemaType = schema == null ? SchemaType.String : schema.getType();\n+                schemaType = schema == null ? AttributeSchemaType.String : schema.getType();\n                 break;\n \n             default:\n-                schemaType = SchemaType.String;\n+                schemaType = AttributeSchemaType.String;\n         }\n \n         final String extAttrName = mapItem.getExtAttrName();"},{"sha":"ce3aff9a5038fb91f6c6fb9efb6302b9091743a7","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -26,7 +26,7 @@\n import java.util.List;\n \n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.role.RAttr;\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n@@ -76,7 +76,7 @@ public void getAttributes() {\n     public void save() {\n         USchema attributeSchema = new USchema();\n         attributeSchema.setName(\"secondaryEmail\");\n-        attributeSchema.setType(SchemaType.String);\n+        attributeSchema.setType(AttributeSchemaType.String);\n         attributeSchema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n         attributeSchema.setMandatoryCondition(\"false\");\n         attributeSchema.setMultivalue(true);\n@@ -92,7 +92,7 @@ public void save() {\n     public void saveNonValid() {\n         USchema attributeSchema = new USchema();\n         attributeSchema.setName(\"secondaryEmail\");\n-        attributeSchema.setType(SchemaType.String);\n+        attributeSchema.setType(AttributeSchemaType.String);\n         attributeSchema.setValidatorClass(\"org.apache.syncope.core.validation.EmailAddressValidator\");\n         attributeSchema.setMandatoryCondition(\"false\");\n         attributeSchema.setMultivalue(true);\n@@ -104,7 +104,7 @@ public void saveNonValid() {\n     @Test\n     public void checkForEnumType() {\n         RSchema schema = new RSchema();\n-        schema.setType(SchemaType.Enum);\n+        schema.setType(AttributeSchemaType.Enum);\n         schema.setName(\"color\");\n \n         Exception ex = null;"},{"sha":"4a1e75d1eb837495a7f12044470a2e766666e110","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -25,7 +25,7 @@\n import static org.junit.Assert.assertTrue;\n \n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.membership.MAttr;\n import org.apache.syncope.core.persistence.beans.membership.MSchema;\n@@ -100,7 +100,7 @@ public void deleteAttributeValue() {\n     @Test\n     public void checkForEnumType() {\n         MSchema schema = new MSchema();\n-        schema.setType(SchemaType.Enum);\n+        schema.setType(AttributeSchemaType.Enum);\n         schema.setName(\"color\");\n         schema.setEnumerationValues(\"red\" + AbstractSchema.enumValuesSeparator + \"yellow\");\n "},{"sha":"d693dc815d97fb5962631d5d5e85335524a1670d","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n@@ -89,7 +89,7 @@ public void testUserSchemaAuthorization() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(schemaName);\n         schemaTO.setMandatoryCondition(\"false\");\n-        schemaTO.setType(SchemaType.String);\n+        schemaTO.setType(AttributeSchemaType.String);\n \n         response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         SchemaTO newSchemaTO = getObject(response, SchemaTO.class, entitlementService);"},{"sha":"aaeabe16bff4fe57342c6fcbb0fff9a66d974096","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a8c4767f22658d4b020b5955126e05f12f993756/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=a8c4767f22658d4b020b5955126e05f12f993756","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.EntityViolationType;\n-import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -52,7 +52,7 @@ public class SchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void create() {\n-        SchemaTO schemaTO = buildSchemaTO(\"testAttribute\", SchemaType.String);\n+        SchemaTO schemaTO = buildSchemaTO(\"testAttribute\", AttributeSchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n \n         Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n@@ -68,7 +68,7 @@ public void create() {\n     public void createWithNotPermittedName() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"failedLogins\");\n-        schemaTO.setType(SchemaType.String);\n+        schemaTO.setType(AttributeSchemaType.String);\n \n         try {\n             createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n@@ -86,7 +86,7 @@ public void createWithNotPermittedName() {\n     public void createREnumWithoutEnumeration() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"enumcheck\");\n-        schemaTO.setType(SchemaType.Enum);\n+        schemaTO.setType(AttributeSchemaType.Enum);\n \n         try {\n             createSchema(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO);\n@@ -105,7 +105,7 @@ public void createREnumWithoutEnumeration() {\n     public void createUEnumWithoutEnumeration() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"enumcheck\");\n-        schemaTO.setType(SchemaType.Enum);\n+        schemaTO.setType(AttributeSchemaType.Enum);\n \n         try {\n             createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n@@ -122,7 +122,7 @@ public void createUEnumWithoutEnumeration() {\n \n     @Test\n     public void delete() {\n-        SchemaTO schemaTO = buildSchemaTO(\"todelete\", SchemaType.String);\n+        SchemaTO schemaTO = buildSchemaTO(\"todelete\", AttributeSchemaType.String);\n         schemaTO.setMandatoryCondition(\"false\");\n         createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n \n@@ -169,7 +169,7 @@ public void update() {\n         SchemaTO updatedTO = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n         assertEquals(schemaTO, updatedTO);\n \n-        updatedTO.setType(SchemaType.Date);\n+        updatedTO.setType(AttributeSchemaType.Date);\n         try {\n             schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), updatedTO);\n             fail(\"This should not be reacheable\");\n@@ -183,7 +183,7 @@ public void update() {\n     public void issue258() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"schema_issue258\");\n-        schemaTO.setType(SchemaType.Double);\n+        schemaTO.setType(AttributeSchemaType.Double);\n \n         Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         schemaTO = getObject(response, SchemaTO.class, schemaService);\n@@ -195,7 +195,7 @@ public void issue258() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        schemaTO.setType(SchemaType.Long);\n+        schemaTO.setType(AttributeSchemaType.Long);\n         try {\n             schemaService.update(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n@@ -207,7 +207,7 @@ public void issue258() {\n \n     @Test\n     public void issue259() {\n-        SchemaTO schemaTO = buildSchemaTO(\"schema_issue259\", SchemaType.Double);\n+        SchemaTO schemaTO = buildSchemaTO(\"schema_issue259\", AttributeSchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n         Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n@@ -232,7 +232,7 @@ public void issue259() {\n \n     @Test\n     public void issue260() {\n-        SchemaTO schemaTO = buildSchemaTO(\"schema_issue260\", SchemaType.Double);\n+        SchemaTO schemaTO = buildSchemaTO(\"schema_issue260\", AttributeSchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n         Response response = createSchema(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n@@ -254,7 +254,7 @@ public void issue260() {\n         }\n     }\n \n-    private SchemaTO buildSchemaTO(final String name, final SchemaType type) {\n+    private SchemaTO buildSchemaTO(final String name, final AttributeSchemaType type) {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(name + getUUIDString());\n         schemaTO.setType(type);"}]}