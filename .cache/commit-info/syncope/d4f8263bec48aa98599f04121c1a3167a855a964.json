{"sha":"d4f8263bec48aa98599f04121c1a3167a855a964","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ0ZjgyNjNiZWM0OGFhOTg1OTlmMDQxMjFjMWEzMTY3YTg1NWE5NjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-11T12:41:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-11T12:41:00Z"},"message":"Merge from trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/DEV_ROLE_PROVISIONING@1420126 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab3c3413fbad799a61dfa6236649ca9db81aad48","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ab3c3413fbad799a61dfa6236649ca9db81aad48"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d4f8263bec48aa98599f04121c1a3167a855a964","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4f8263bec48aa98599f04121c1a3167a855a964","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4f8263bec48aa98599f04121c1a3167a855a964","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4f8263bec48aa98599f04121c1a3167a855a964/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8be7cde6f6dcb6e86dafe25be1e681f6db064ee9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8be7cde6f6dcb6e86dafe25be1e681f6db064ee9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8be7cde6f6dcb6e86dafe25be1e681f6db064ee9"}],"stats":{"total":264,"additions":67,"deletions":197},"files":[{"sha":"6311750f3ed556ba2c706b24c6d867d77b0ca23b","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":67,"deletions":197,"changes":264,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4f8263bec48aa98599f04121c1a3167a855a964/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4f8263bec48aa98599f04121c1a3167a855a964/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=d4f8263bec48aa98599f04121c1a3167a855a964","patch":"@@ -55,6 +55,10 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class TaskTestITCase extends AbstractTest {\n \n+    private static final int SCHED_TASK_ID = 5;\n+\n+    private static final int SYNC_TASK_ID = 4;\n+\n     @Test\n     @SuppressWarnings(\"unchecked\")\n     public void getJobClasses() {\n@@ -101,7 +105,7 @@ public void create() {\n \n     @Test\n     public void update() {\n-        SchedTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SchedTaskTO.class, 5);\n+        SchedTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SchedTaskTO.class, SCHED_TASK_ID);\n         assertNotNull(task);\n \n         SchedTaskTO taskMod = new SchedTaskTO();\n@@ -196,18 +200,17 @@ public void deal() {\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n-        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 1);\n-        assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), execution.getStatus());\n+        TaskExecTO exec = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 1);\n+        assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), exec.getStatus());\n \n-        execution = restTemplate.getForObject(BASE_URL + \"task/execution/report/{executionId}\"\n-                + \"?executionStatus=SUCCESS&message=OK\", TaskExecTO.class, execution.getId());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS.name(), execution.getStatus());\n-        assertEquals(\"OK\", execution.getMessage());\n+        exec = restTemplate.getForObject(BASE_URL + \"task/execution/report/{executionId}\"\n+                + \"?executionStatus=SUCCESS&message=OK\", TaskExecTO.class, exec.getId());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS.name(), exec.getStatus());\n+        assertEquals(\"OK\", exec.getMessage());\n \n         restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", PropagationTaskTO.class, 1);\n         try {\n-            restTemplate.getForObject(BASE_URL + \"task/execution/read/{executionId}\", TaskExecTO.class,\n-                    execution.getId());\n+            restTemplate.getForObject(BASE_URL + \"task/execution/read/{executionId}\", TaskExecTO.class, exec.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -237,7 +240,7 @@ public void sync() {\n         assertNotNull(usersPre);\n \n         // Update sync task\n-        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4);\n+        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, SYNC_TASK_ID);\n         assertNotNull(task);\n \n         //  add custom SyncJob actions\n@@ -261,38 +264,11 @@ public void sync() {\n         assertEquals(task.getId(), actual.getId());\n         assertEquals(TestSyncActions.class.getName(), actual.getActionsClassName());\n \n-        SyncTaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n-        assertNotNull(taskTO);\n-        assertNotNull(taskTO.getExecutions());\n-\n-        // read executions before sync (dryrun test could be executed before)\n-        int preSyncSize = taskTO.getExecutions().size();\n-\n-        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class,\n-                taskTO.getId());\n-        assertEquals(\"JOB_FIRED\", execution.getStatus());\n-\n-        int i = 0;\n-        int maxit = 50;\n-\n-        // wait for sync completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, taskTO.getId());\n+        execTask(SyncTaskTO.class, SYNC_TASK_ID, 50, false);\n \n-            assertNotNull(taskTO);\n-            assertNotNull(taskTO.getExecutions());\n-\n-            i++;\n-        } while (preSyncSize == taskTO.getExecutions().size() && i < maxit);\n-\n-        // check for sync policy\n+        // after execution of the sync task the user data should be synced from \n+        // csv datasource and processed by user template\n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-\n         assertNotNull(userTO);\n         assertEquals(\"test9\", userTO.getUsername());\n         assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n@@ -317,9 +293,9 @@ public void sync() {\n         // check for sync results\n         Integer usersPost = restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPost);\n-        assertTrue(\"Expected \" + (usersPre + 9) + \", found \" + usersPost, usersPost == usersPre + 9);\n+        assertEquals(usersPre.intValue() + 9, usersPost.intValue());\n \n-        // Check for issue 215: \n+        // Check for issue 215:\n         // * expected disabled user test1\n         // * expected enabled user test2\n \n@@ -353,34 +329,9 @@ public void reconcileUsers() {\n         assertEquals(template, actual.getUserTemplate());\n         assertEquals(new RoleTO(), actual.getRoleTemplate());\n \n-        // read executions before sync (dryrun test could be executed before)\n-        int preSyncSize = actual.getExecutions().size();\n-\n-        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class,\n-                actual.getId());\n-        assertEquals(\"JOB_FIRED\", execution.getStatus());\n-\n-        int i = 0;\n-        int maxit = 20;\n+        TaskExecTO execution = execTask(SyncTaskTO.class, actual.getId(), 20, false);\n \n-        // wait for sync completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            actual = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, actual.getId());\n-\n-            assertNotNull(actual);\n-            assertNotNull(actual.getExecutions());\n-\n-            i++;\n-        } while (preSyncSize == actual.getExecutions().size() && i < maxit);\n-\n-        assertEquals(1, actual.getExecutions().size());\n-\n-        final String status = actual.getExecutions().get(0).getStatus();\n+        final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n@@ -409,34 +360,9 @@ public void reconcileRoles() {\n         assertEquals(template, actual.getRoleTemplate());\n         assertEquals(new UserTO(), actual.getUserTemplate());\n \n-        // read executions before sync (dryrun test could be executed before)\n-        int preSyncSize = actual.getExecutions().size();\n-\n-        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class,\n-                actual.getId());\n-        assertEquals(\"JOB_FIRED\", execution.getStatus());\n-\n-        int i = 0;\n-        int maxit = 20;\n-\n-        // wait for sync completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            actual = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, actual.getId());\n+        TaskExecTO execution = execTask(SyncTaskTO.class, actual.getId(), 20, false);\n \n-            assertNotNull(actual);\n-            assertNotNull(actual.getExecutions());\n-\n-            i++;\n-        } while (preSyncSize == actual.getExecutions().size() && i < maxit);\n-\n-        assertEquals(1, actual.getExecutions().size());\n-\n-        final String status = actual.getExecutions().get(0).getStatus();\n+        final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n@@ -457,41 +383,17 @@ public void reconcileRoles() {\n \n     @Test\n     public void issue196() {\n-        TaskExecTO execution = restTemplate.postForObject(\n-                BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n-        assertNotNull(execution);\n-        assertEquals(0, execution.getId());\n-        assertNotNull(execution.getTask());\n+        TaskExecTO exec = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n+        assertNotNull(exec);\n+        assertEquals(0, exec.getId());\n+        assertNotNull(exec.getTask());\n     }\n \n     @Test\n     public void dryRun() {\n-        SyncTaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n-\n-        assertNotNull(taskTO);\n-        assertNotNull(taskTO.getExecutions());\n-\n-        int preDryRunSize = taskTO.getExecutions().size();\n-\n-        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}?dryRun=true\", null,\n-                TaskExecTO.class, 4);\n-        assertNotNull(execution);\n-\n-        // wait for sync completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, taskTO.getId());\n-\n-            assertNotNull(taskTO);\n-            assertNotNull(taskTO.getExecutions());\n-\n-        } while (preDryRunSize == taskTO.getExecutions().size());\n-\n-        assertEquals(\"SUCCESS\", taskTO.getExecutions().get(0).getStatus());\n+        TaskExecTO execution = execTask(SyncTaskTO.class, SYNC_TASK_ID, 50, true);\n+        assertEquals(\"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n+                \"SUCCESS\", execution.getStatus());\n     }\n \n     @Test\n@@ -656,32 +558,8 @@ public void issueSYNCOPE68() {\n         assertFalse(actual.getUserTemplate().getResources().isEmpty());\n         assertFalse(actual.getUserTemplate().getMemberships().isEmpty());\n \n-        // read executions before sync (dryrun test could be executed before)\n-        int preSyncSize = actual.getExecutions().size();\n-\n-        TaskExecTO execution =\n-                restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, actual.getId());\n-        assertEquals(\"JOB_FIRED\", execution.getStatus());\n-\n-        int i = 0;\n-        int maxit = 50;\n-\n-        // wait for sync completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            actual = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, actual.getId());\n-            assertNotNull(actual);\n-            assertNotNull(actual.getExecutions());\n-\n-            i++;\n-        } while (preSyncSize == actual.getExecutions().size() && i < maxit);\n-        assertEquals(preSyncSize + 1, actual.getExecutions().size());\n-\n-        final String status = actual.getExecutions().get(0).getStatus();\n+        TaskExecTO execution = execTask(SyncTaskTO.class, actual.getId(), 50, false);\n+        final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n@@ -721,32 +599,7 @@ public void issueSYNCOPE144() {\n     @Test\n     public void issueSYNCOPE230() {\n         // 1. read SyncTask for resource-db-sync (table TESTSYNC on external H2)\n-        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 10);\n-        assertNotNull(task);\n-\n-        int preSyncSize = task.getExecutions().size();\n-\n-        // 2. execute the SyncTask for the first time\n-        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class,\n-                task.getId());\n-        assertEquals(\"JOB_FIRED\", execution.getStatus());\n-\n-        int i = 0;\n-        final int maxit = 20;\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, task.getId());\n-\n-            assertNotNull(task);\n-            assertNotNull(task.getExecutions());\n-\n-            i++;\n-        } while (preSyncSize == task.getExecutions().size() && i < maxit);\n-        assertEquals(1, task.getExecutions().size());\n+        execTask(SyncTaskTO.class, 10, 20, false);\n \n         // 3. read e-mail address for user created by the SyncTask first execution\n         UserTO userTO = restTemplate.getForObject(\n@@ -760,33 +613,50 @@ public void issueSYNCOPE230() {\n         jdbcTemplate.execute(\"UPDATE TESTSYNC SET email='updatedSYNCOPE230@syncope.apache.org'\");\n \n         // 5. re-execute the SyncTask\n-        execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class,\n-                task.getId());\n+        execTask(SyncTaskTO.class, 10, 20, false);\n+\n+        // 6. verify that the e-mail was updated\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"issuesyncope230\");\n+        assertNotNull(userTO);\n+        email = userTO.getAttributeMap().get(\"email\").getValues().iterator().next();\n+        assertNotNull(email);\n+        assertEquals(\"updatedSYNCOPE230@syncope.apache.org\", email);\n+    }\n+\n+    private TaskExecTO execTask(final Class<? extends TaskTO> taskClass, final long taskId,\n+            final int maxWaitSeconds, final boolean dryRun) {\n+\n+        TaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", taskClass, taskId);\n+        assertNotNull(taskTO);\n+        assertNotNull(taskTO.getExecutions());\n+\n+        int preSyncSize = taskTO.getExecutions().size();\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}\" + (dryRun ? \"?dryRun=true\" : \"\"), null,\n+                TaskExecTO.class, taskTO.getId());\n         assertEquals(\"JOB_FIRED\", execution.getStatus());\n \n-        preSyncSize = task.getExecutions().size();\n-        i = 0;\n+        int i = 0;\n+        int maxit = maxWaitSeconds;\n+\n+        // wait for sync completion (executions incremented)\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n \n-            task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, task.getId());\n+            taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", taskClass, taskTO.getId());\n \n-            assertNotNull(task);\n-            assertNotNull(task.getExecutions());\n+            assertNotNull(taskTO);\n+            assertNotNull(taskTO.getExecutions());\n \n             i++;\n-        } while (preSyncSize == task.getExecutions().size() && i < maxit);\n-        assertEquals(2, task.getExecutions().size());\n-\n-        // 6. verify that the e-mail was updated\n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"issuesyncope230\");\n-        assertNotNull(userTO);\n-        email = userTO.getAttributeMap().get(\"email\").getValues().iterator().next();\n-        assertNotNull(email);\n-        assertEquals(\"updatedSYNCOPE230@syncope.apache.org\", email);\n+        } while (preSyncSize == taskTO.getExecutions().size() && i < maxit);\n+        if (i == maxit) {\n+            throw new RuntimeException(\"Timeout when executing task \" + taskId);\n+        }\n+        return taskTO.getExecutions().get(0);\n     }\n-}\n+}\n\\ No newline at end of file"}]}