{"sha":"4b2368930e89d1085b92367683fd2f81f15a1314","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRiMjM2ODkzMGU4OWQxMDg1YjkyMzY3NjgzZmQyZjgxZjE1YTEzMTQ=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-07T15:21:55Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-07T15:21:55Z"},"message":"[SYNCOPE-259]\nIntroduces Policy Service\nUpdates in UserTestITCase to only use new Service Interfaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1429839 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4cef28dfba4a7e6ef2e23913f5a1b1638959077","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a4cef28dfba4a7e6ef2e23913f5a1b1638959077"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4b2368930e89d1085b92367683fd2f81f15a1314","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4b2368930e89d1085b92367683fd2f81f15a1314","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4b2368930e89d1085b92367683fd2f81f15a1314","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4b2368930e89d1085b92367683fd2f81f15a1314/comments","author":null,"committer":null,"parents":[{"sha":"f559327149941c026c935a93ec6c1c56058651b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f559327149941c026c935a93ec6c1c56058651b2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f559327149941c026c935a93ec6c1c56058651b2"}],"stats":{"total":276,"additions":211,"deletions":65},"files":[{"sha":"f298bd19103ecc9dfe6ec791a5fcd8e6cf9b4762","filename":"client/src/main/java/org/apache/syncope/services/PolicyService.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2368930e89d1085b92367683fd2f81f15a1314/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2368930e89d1085b92367683fd2f81f15a1314/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java?ref=4b2368930e89d1085b92367683fd2f81f15a1314","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.client.to.PolicyTO;\r\n+import org.apache.syncope.types.PolicyType;\r\n+\r\n+@Path(\"policies\")\r\n+public interface PolicyService {\r\n+\r\n+\t@POST\r\n+    <T extends PolicyTO> T create(final T policyTO);\r\n+\r\n+\t@PUT\r\n+\t@Path(\"{policyId}\")\r\n+    <T extends PolicyTO> T update(@PathParam(\"policyId\") final Long policyId, final T policyTO);\r\n+\r\n+\t@GET\r\n+\t@Path(\"{type}\")\r\n+\t<T extends PolicyTO> List<T> listByType(@PathParam(\"type\") final PolicyType type);\r\n+\r\n+\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n+\t@GET\r\n+\t@Path(\"global/{type}\")\r\n+\t<T extends PolicyTO> T readGlobal(@PathParam(\"type\") final PolicyType type, Class<T> policyClass);\r\n+\r\n+\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n+\t@GET\r\n+\t@Path(\"{policyId}\")\r\n+\t<T extends PolicyTO> T read(@PathParam(\"policyId\") final Long policyId, Class<T> policyClass);\r\n+\r\n+\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n+\t@DELETE\r\n+\t@Path(\"{policyId}\")\r\n+\t<T extends PolicyTO> T delete(@PathParam(\"policyId\") final Long policyId, Class<T> policyClass);\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"2b1fb7aeb2bd566ce0f10d37679dc65baddf2a66","filename":"client/src/main/java/org/apache/syncope/services/PolicyServiceProxy.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2368930e89d1085b92367683fd2f81f15a1314/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2368930e89d1085b92367683fd2f81f15a1314/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyServiceProxy.java?ref=4b2368930e89d1085b92367683fd2f81f15a1314","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.to.PolicyTO;\r\n+import org.apache.syncope.types.PolicyType;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class PolicyServiceProxy extends SpringServiceProxy implements PolicyService {\r\n+\r\n+\tpublic PolicyServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+\t\tsuper(baseUrl, restTemplate);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T extends PolicyTO> T create(final T policyTO) {\r\n+\t\t@SuppressWarnings(\"unchecked\")\r\n+\t\tT result = (T) restTemplate.postForObject(BASE_URL\r\n+\t\t\t\t+ \"policy/{kind}/create\", policyTO, policyTO.getClass(),\r\n+\t\t\t\ttypeToUrl(policyTO.getType()));\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T extends PolicyTO> T update(Long policyId, T policyTO) {\r\n+\t\t@SuppressWarnings(\"unchecked\")\r\n+\t\tT result = (T) restTemplate.postForObject(BASE_URL\r\n+\t\t\t\t+ \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n+\t\t\t\ttypeToUrl(policyTO.getType()));\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T extends PolicyTO> List<T> listByType(PolicyType type) {\r\n+\t\t@SuppressWarnings(\"unchecked\")\r\n+\t\tList<T> result = restTemplate.getForObject(BASE_URL + \"policy/{kind}/list\",\r\n+\t\t\t\tList.class, typeToUrl(type));\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T extends PolicyTO> T readGlobal(PolicyType type, Class<T> policyClass) {\r\n+\t\tT result = restTemplate.getForObject(BASE_URL + \"policy/{kind}/global/read\",\r\n+                policyClass, typeToUrl(type));\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T extends PolicyTO> T read(Long policyId, Class<T> policyClass) {\r\n+\t\tT result = restTemplate.getForObject(BASE_URL + \"policy/read/{id}\", policyClass, policyId);\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T extends PolicyTO> T delete(Long policyId, Class<T> policyClass) {\r\n+\t\tT result = restTemplate.getForObject(BASE_URL + \"policy/delete/{id}\", policyClass, policyId);\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+    private String typeToUrl(PolicyType type) {\r\n+    \tString url = type.name().toLowerCase();\r\n+    \tint index = url.indexOf(\"_\");\r\n+    \tif (index != -1) {\r\n+    \t\treturn url.substring(index + 1);\r\n+    \t} else {\r\n+    \t\treturn url;\r\n+    \t}\r\n+    }\r\n+}\r"},{"sha":"2f6861bb391481ef50f9539d7243d915d920f32e","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2368930e89d1085b92367683fd2f81f15a1314/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2368930e89d1085b92367683fd2f81f15a1314/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=4b2368930e89d1085b92367683fd2f81f15a1314","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.services.RoleServiceProxy;\n import org.apache.syncope.services.TaskServiceProxy;\n import org.apache.syncope.services.UserServiceProxy;\n+import org.apache.syncope.services.PolicyServiceProxy;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n@@ -76,6 +77,8 @@ protected static AttributeMod attributeMod(final String schema,\n \n \tpublic static final String ADMIN_PWD = \"password\";\n \n+\tprotected PolicyServiceProxy policyService;\n+\n \t@Autowired\n \tprotected RestTemplate restTemplate;\n \n@@ -126,5 +129,6 @@ public void resetRestTemplate() {\n \t\tloggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n \t\treportService = new ReportServiceProxy(BASE_URL, restTemplate);\n \t\ttaskService = new TaskServiceProxy(BASE_URL, restTemplate);\n+\t\tpolicyService = new PolicyServiceProxy(BASE_URL, restTemplate);\n \t}\n }"},{"sha":"6c55e077654e573a3832a6e665154975009de5da","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":23,"deletions":22,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2368930e89d1085b92367683fd2f81f15a1314/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2368930e89d1085b92367683fd2f81f15a1314/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=4b2368930e89d1085b92367683fd2f81f15a1314","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n \n-import java.util.Arrays;\n import java.util.List;\n-import org.junit.Test;\n+\n import org.apache.syncope.client.to.AccountPolicyTO;\n import org.apache.syncope.client.to.PasswordPolicyTO;\n import org.apache.syncope.client.to.PolicyTO;\n@@ -33,31 +35,30 @@\n import org.apache.syncope.types.SyncPolicySpec;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class PolicyTestITCase extends AbstractTest {\n \n     @Test\n     public void listByType() {\n-        List<SyncPolicyTO> policyTOs = Arrays.asList(restTemplate.getForObject(BASE_URL + \"policy/{kind}/list\",\n-                SyncPolicyTO[].class, PolicyType.SYNC.toString()));\n-\n+        List<SyncPolicyTO> policyTOs = policyService.listByType(PolicyType.SYNC);\n+        \n         assertNotNull(policyTOs);\n         assertFalse(policyTOs.isEmpty());\n     }\n \n     @Test\n     public void read() {\n-        SyncPolicyTO policyTO = restTemplate.getForObject(BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 1L);\n+        SyncPolicyTO policyTO = policyService.read(1L, SyncPolicyTO.class);\n \n         assertNotNull(policyTO);\n     }\n \n     @Test\n     public void getGlobalPasswordPolicy() {\n-        PasswordPolicyTO policyTO = restTemplate.getForObject(BASE_URL + \"policy/password/global/read\",\n-                PasswordPolicyTO.class);\n+        PasswordPolicyTO policyTO = policyService.readGlobal(PolicyType.PASSWORD, PasswordPolicyTO.class);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n@@ -66,8 +67,7 @@ public void getGlobalPasswordPolicy() {\n \n     @Test\n     public void getGlobalAccountPolicy() {\n-        AccountPolicyTO policyTO = restTemplate.getForObject(BASE_URL + \"policy/account/global/read\",\n-                AccountPolicyTO.class);\n+        AccountPolicyTO policyTO = policyService.readGlobal(PolicyType.ACCOUNT, AccountPolicyTO.class);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_ACCOUNT, policyTO.getType());\n@@ -78,10 +78,11 @@ public void createWithException() {\n         PasswordPolicyTO policy = new PasswordPolicyTO(true);\n         policy.setSpecification(new PasswordPolicySpec());\n         policy.setDescription(\"global password policy\");\n+        System.out.println(policy.getType());\n \n         Throwable t = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"policy/password/create\", policy, PasswordPolicyTO.class);\n+            policyService.create(policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             t = sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy);\n@@ -96,7 +97,7 @@ public void createMissingDescription() {\n \n         Throwable t = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"policy/sync/create\", policy, PasswordPolicyTO.class);\n+            policyService.create(policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             t = sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy);\n@@ -110,7 +111,7 @@ public void create() {\n         policy.setSpecification(new SyncPolicySpec());\n         policy.setDescription(\"Sync policy\");\n \n-        SyncPolicyTO policyTO = restTemplate.postForObject(BASE_URL + \"policy/sync/create\", policy, SyncPolicyTO.class);\n+        SyncPolicyTO policyTO = policyService.create(policy);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n@@ -119,18 +120,17 @@ public void create() {\n     @Test\n     public void update() {\n         // get global password\n-        PasswordPolicyTO globalPolicy = restTemplate.getForObject(BASE_URL + \"policy/read/{id}\",\n-                PasswordPolicyTO.class, 2L);\n+        PasswordPolicyTO globalPolicy = policyService.read(2L, PasswordPolicyTO.class);\n \n         PasswordPolicyTO policy = new PasswordPolicyTO();\n         policy.setDescription(\"A simple password policy\");\n         policy.setSpecification(globalPolicy.getSpecification());\n \n         // create a new password policy using global password as a template\n-        policy = restTemplate.postForObject(BASE_URL + \"policy/password/create\", policy, PasswordPolicyTO.class);\n+        policy = policyService.create(policy);\n \n         // read new password policy\n-        policy = restTemplate.getForObject(BASE_URL + \"policy/read/{id}\", PasswordPolicyTO.class, policy.getId());\n+        policy = policyService.read(policy.getId(), PasswordPolicyTO.class);\n \n         assertNotNull(\"find to update did not work\", policy);\n \n@@ -139,7 +139,7 @@ public void update() {\n         policy.setSpecification(policySpec);\n \n         // update new password policy\n-        policy = restTemplate.postForObject(BASE_URL + \"policy/password/update\", policy, PasswordPolicyTO.class);\n+        policy = policyService.update(policy.getId(), policy);\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n@@ -149,21 +149,22 @@ public void update() {\n \n     @Test\n     public void delete() {\n-        final PolicyTO policyTO = restTemplate.getForObject(BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 7L);\n+        final SyncPolicyTO policyTO = policyService.read(7L, SyncPolicyTO.class);\n \n         assertNotNull(\"find to delete did not work\", policyTO);\n \n         PolicyTO policyToDelete =\n-                restTemplate.getForObject(BASE_URL + \"policy/delete/{id}\", SyncPolicyTO.class, 7L);\n+                policyService.delete(7L, SyncPolicyTO.class);\n         assertNotNull(policyToDelete);\n \n         Throwable t = null;\n         try {\n-            restTemplate.getForObject(BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 7L);\n+        \tpolicyService.read(7L, SyncPolicyTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n         }\n \n         assertNotNull(t);\n     }\n+    \n }"},{"sha":"37d7eca60fbd63de587ed098637a921ea526b5c6","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":35,"deletions":43,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b2368930e89d1085b92367683fd2f81f15a1314/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b2368930e89d1085b92367683fd2f81f15a1314/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=4b2368930e89d1085b92367683fd2f81f15a1314","patch":"@@ -18,15 +18,20 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n@@ -112,8 +117,7 @@ public void selfRead() {\n     @Test\n     public void createUserWithNoPropagation() {\n         // get task list\n-        List<PropagationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\",\n-                PropagationTaskTO[].class));\n+        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -141,7 +145,7 @@ public void createUserWithNoPropagation() {\n         userService.create(userTO);\n \n         // get the new task list\n-        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n@@ -156,8 +160,7 @@ public void createUserWithNoPropagation() {\n         assertTrue(newMaxId > maxId);\n \n         // get last task\n-        PropagationTaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class,\n-                newMaxId);\n+        PropagationTaskTO taskTO = taskService.read(newMaxId, PropagationTaskTO.class);\n \n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -171,11 +174,11 @@ public void createUserWithNoPropagation() {\n      * introducing a simple control.\n      */\n     public void issue172() {\n-        PolicyTO policyTO = restTemplate.getForObject(BASE_URL + \"policy/read/{id}\", PasswordPolicyTO.class, 2L);\n+        PolicyTO policyTO = policyService.read(2L, PasswordPolicyTO.class);\n \n         assertNotNull(policyTO);\n \n-        restTemplate.getForObject(BASE_URL + \"policy/delete/{id}\", PasswordPolicyTO.class, 2L);\n+        policyService.delete(2L, PasswordPolicyTO.class);\n \n         UserTO userTO = new UserTO();\n         userTO.setUsername(\"issue172@syncope.apache.org\");\n@@ -188,7 +191,7 @@ public void issue172() {\n \n         userService.create(userTO);\n \n-        policyTO = restTemplate.postForObject(BASE_URL + \"policy/password/create\", policyTO, PasswordPolicyTO.class);\n+        policyService.create(policyTO);\n \n         assertNotNull(policyTO);\n     }\n@@ -284,12 +287,11 @@ public void testEnforceMandatoryCondition() {\n \n     @Test\n     public void testEnforceMandatoryConditionOnDerived() {\n-        ResourceTO resourceTO = restTemplate.getForObject(BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"resource-csv\");\n+        ResourceTO resourceTO = resourceService.read(\"resource-csv\");\n         assertNotNull(resourceTO);\n         resourceTO.setName(\"resource-csv-enforcing\");\n         resourceTO.setEnforceMandatoryCondition(true);\n-        resourceTO = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        resourceTO = resourceService.create(resourceTO);\n         assertNotNull(resourceTO);\n \n         UserTO userTO = getSampleTO(\"syncope222@apache.org\");\n@@ -414,7 +416,7 @@ public void createWithException() {\n     public void create() {\n         // get task list\n         List<PropagationTaskTO> tasks =\n-                Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+                taskService.list(\"propagation\", PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -426,8 +428,7 @@ public void create() {\n                 maxId = task.getId();\n             }\n         }\n-        PropagationTaskTO taskTO =\n-                restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, maxId);\n+        PropagationTaskTO taskTO = taskService.read(maxId, PropagationTaskTO.class);\n \n         assertNotNull(taskTO);\n         int maxTaskExecutions = taskTO.getExecutions().size();\n@@ -468,7 +469,7 @@ public void create() {\n         assertEquals(\"virtualvalue\", newUserTO.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n \n         // get the new task list\n-        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -487,7 +488,7 @@ public void create() {\n         assertEquals(newMaxId, maxId);\n \n         // get last task\n-        taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, newMaxId);\n+        taskTO = taskService.read(newMaxId, PropagationTaskTO.class);\n \n         assertNotNull(taskTO);\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n@@ -924,8 +925,7 @@ public void update() {\n \n     @Test\n     public void updatePasswordOnly() {\n-        List<PropagationTaskTO> beforeTasks = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"task/propagation/list\", PropagationTaskTO[].class));\n+        List<PropagationTaskTO> beforeTasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n         assertNotNull(beforeTasks);\n         assertFalse(beforeTasks.isEmpty());\n \n@@ -950,8 +950,7 @@ public void updatePasswordOnly() {\n         passwordTestUser.setPassword(\"newPassword123\", CipherAlgorithm.SHA1, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n-        List<PropagationTaskTO> afterTasks = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        List<PropagationTaskTO> afterTasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n         assertNotNull(afterTasks);\n         assertFalse(afterTasks.isEmpty());\n \n@@ -961,8 +960,7 @@ public void updatePasswordOnly() {\n     @Test\n     public void verifyTaskRegistration() {\n         // get task list\n-        List<PropagationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\",\n-                PropagationTaskTO[].class));\n+        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -991,7 +989,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -1022,7 +1020,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n \n         // get max task id\n         maxId = newMaxId;\n@@ -1037,8 +1035,7 @@ public void verifyTaskRegistration() {\n         //             all update executions have to be registered\n         assertTrue(newMaxId > maxId);\n \n-        final PropagationTaskTO taskTO =\n-                restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, newMaxId);\n+        final PropagationTaskTO taskTO = taskService.read(newMaxId, PropagationTaskTO.class);\n \n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());\n@@ -1049,7 +1046,7 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getId());\n \n         // get the new task list\n-        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n+        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n \n         // get max task id\n         maxId = newMaxId;\n@@ -1175,14 +1172,12 @@ public void suspendReactivateOnResource() {\n         userTO.getMemberships().clear();\n         userTO.getResources().clear();\n \n-        ResourceTO dbTable = restTemplate.getForObject(BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"resource-testdb\");\n+        ResourceTO dbTable = resourceService.read(\"resource-testdb\");\n \n         assertNotNull(dbTable);\n         userTO.addResource(dbTable.getName());\n \n-        ResourceTO ldap = restTemplate.getForObject(BASE_URL + \"/resource/read/{resourceName}.json\", ResourceTO.class,\n-                \"resource-ldap\");\n+        ResourceTO ldap = resourceService.read(\"resource-ldap\");\n \n         assertNotNull(ldap);\n         userTO.addResource(ldap.getName());\n@@ -1689,15 +1684,13 @@ public void issueSYNCOPE185() {\n \n     @Test()\n     public void issueSYNCOPE51() {\n-        ConfigurationTO defaultConfigurationTO = restTemplate.getForObject(\n-                BASE_URL + \"configuration/read/{key}.json\", ConfigurationTO.class, \"password.cipher.algorithm\");\n+        ConfigurationTO defaultConfigurationTO = configurationService.read(\"password.cipher.algorithm\");\n \n         ConfigurationTO configurationTO = new ConfigurationTO();\n         configurationTO.setKey(\"password.cipher.algorithm\");\n         configurationTO.setValue(\"MD5\");\n \n-        ConfigurationTO newConfTO =\n-                restTemplate.postForObject(BASE_URL + \"configuration/update\", configurationTO, ConfigurationTO.class);\n+        ConfigurationTO newConfTO = configurationService.update(configurationTO.getKey(), configurationTO);\n \n         assertEquals(configurationTO, newConfTO);\n \n@@ -1712,8 +1705,7 @@ public void issueSYNCOPE51() {\n                     e.getException(SyncopeClientExceptionType.NotFound).getElements().iterator().next().contains(\"MD5\"));\n         }\n \n-        ConfigurationTO oldConfTO = restTemplate.postForObject(\n-                BASE_URL + \"configuration/update\", defaultConfigurationTO, ConfigurationTO.class);\n+        ConfigurationTO oldConfTO = configurationService.update(defaultConfigurationTO.getKey(), defaultConfigurationTO);\n \n         assertEquals(defaultConfigurationTO, oldConfTO);\n     }\n@@ -1726,7 +1718,7 @@ public void issueSYNCOPE260() {\n         UserTO userTO = getSampleTO(\"syncope260@apache.org\");\n         userTO.addResource(\"ws-target-resource-2\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationTOs().isEmpty());\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationTOs().get(0).getResourceName());\n@@ -1750,7 +1742,7 @@ public void issueSYNCOPE260() {\n \n         userMod.addVirtualAttributeToBeUpdated(attrMod);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationTOs().isEmpty());\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationTOs().get(0).getResourceName());\n@@ -1794,7 +1786,7 @@ public void issueSYNCOPE260() {\n \n         userMod.addAttributeToBeUpdated(attrMod);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationTOs().isEmpty());\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationTOs().get(0).getResourceName());\n@@ -1816,7 +1808,7 @@ public void issueSYNCOPE260() {\n         userMod.setId(userTO.getId());\n         userMod.addVirtualAttributeToBeRemoved(\"virtualdata\");\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n         assertTrue(userTO.getVirtualAttributes().isEmpty());\n         assertFalse(userTO.getPropagationTOs().isEmpty());"}]}