{"sha":"b04805a8eded18ee6c7d15eeda567a5e849186e0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIwNDgwNWE4ZWRlZDE4ZWU2YzdkMTVlZWRhNTY3YTVlODQ5MTg2ZTA=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-08T14:47:04Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-08T14:47:04Z"},"message":"SYNCOPE-28 #comment not SyncJobAction methods return a copy of the original SyncDelta in order to be easily processed by the SyncJob\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1298417 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ff2c97917d2d863ff8972534128f0dcc5843510","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5ff2c97917d2d863ff8972534128f0dcc5843510"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b04805a8eded18ee6c7d15eeda567a5e849186e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b04805a8eded18ee6c7d15eeda567a5e849186e0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b04805a8eded18ee6c7d15eeda567a5e849186e0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b04805a8eded18ee6c7d15eeda567a5e849186e0/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"75aa600f539b42bb3fd9505f032185eb8ced6714","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/75aa600f539b42bb3fd9505f032185eb8ced6714","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/75aa600f539b42bb3fd9505f032185eb8ced6714"}],"stats":{"total":393,"additions":180,"deletions":213},"files":[{"sha":"598f33a4fda75407d5a9600d43a3c027452c2965","filename":"core/src/main/java/org/syncope/core/persistence/beans/AccountPolicy.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -33,7 +33,6 @@ public AccountPolicy() {\n     public AccountPolicy(boolean global) {\n         super();\n \n-        this.type = global\n-                ? PolicyType.GLOBAL_ACCOUNT : PolicyType.ACCOUNT;\n+        this.type = global ? PolicyType.GLOBAL_ACCOUNT : PolicyType.ACCOUNT;\n     }\n }"},{"sha":"daad476f07a16e0c66a1392d477d03888f0c56cb","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -75,21 +75,17 @@ public boolean isValid(final SyncopeUser object,\n                 // evaluate/enforce only during creation or password update\n                 if (password != null) {\n                     // evaluate policy\n-                    final PasswordPolicySpec passwordPolicy =\n-                            evaluator.evaluate(policy, object);\n+                    final PasswordPolicySpec passwordPolicy = evaluator.evaluate(policy, object);\n \n                     // enforce policy\n-                    ppEnforcer.enforce(\n-                            passwordPolicy, policy.getType(), password);\n+                    ppEnforcer.enforce(passwordPolicy, policy.getType(), password);\n                 }\n             }\n         } catch (Exception e) {\n             LOG.debug(\"Invalid password\");\n \n             context.buildConstraintViolationWithTemplate(\n-                    e.getMessage()).addNode(\n-                    EntityViolationType.InvalidPassword.toString()).\n-                    addConstraintViolation();\n+                    e.getMessage()).addNode(EntityViolationType.InvalidPassword.toString()).addConstraintViolation();\n \n             return false;\n         } finally {\n@@ -108,8 +104,7 @@ public boolean isValid(final SyncopeUser object,\n             // missing username\n             for (Policy policy : getAccountPolicies(object)) {\n                 // evaluate policy\n-                final AccountPolicySpec accountPolicy =\n-                        evaluator.evaluate(policy, object);\n+                final AccountPolicySpec accountPolicy = evaluator.evaluate(policy, object);\n \n                 // enforce policy\n                 apEnforcer.enforce(accountPolicy, policy.getType(), object);\n@@ -118,9 +113,7 @@ public boolean isValid(final SyncopeUser object,\n             LOG.debug(\"Invalid username\");\n \n             context.buildConstraintViolationWithTemplate(\n-                    e.getMessage()).addNode(\n-                    EntityViolationType.InvalidUsername.toString()).\n-                    addConstraintViolation();\n+                    e.getMessage()).addNode(EntityViolationType.InvalidUsername.toString()).addConstraintViolation();\n \n             return false;\n         }"},{"sha":"2490ef05e4e8934ae0cd1791e108e7240945223f","filename":"core/src/main/java/org/syncope/core/policy/AccountPolicyEnforcer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -45,11 +45,11 @@\n     @Autowired\n     private UserDataBinder userDataBinder;\n \n-    private static final Pattern PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@.]+\");\n+    private static final Pattern PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@. ]+\");\n \n-    private static final Pattern LCPATTERN = Pattern.compile(\"[a-z0-9-_@.]+\");\n+    private static final Pattern LCPATTERN = Pattern.compile(\"[a-z0-9-_@. ]+\");\n \n-    private static final Pattern UCPATTERN = Pattern.compile(\"[A-Z0-9-_@.]+\");\n+    private static final Pattern UCPATTERN = Pattern.compile(\"[A-Z0-9-_@. ]+\");\n \n     @Override\n     public void enforce("},{"sha":"59446a6d47873fe22d452bc4d10528af57f41e57","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -418,26 +418,23 @@ public void getAllObjects(\n             final SyncResultsHandler handler,\n             final OperationOptions options) {\n \n-        if (activeConnInstance.getCapabilities().contains(\n-                ConnectorCapability.SEARCH)) {\n-            connector.search(objectClass, null,\n-                    new ResultsHandler() {\n-\n-                        @Override\n-                        public boolean handle(final ConnectorObject obj) {\n-                            final SyncDeltaBuilder bld = new SyncDeltaBuilder();\n-                            bld.setObject(obj);\n-                            bld.setUid(obj.getUid());\n-                            bld.setDeltaType(SyncDeltaType.CREATE_OR_UPDATE);\n-                            bld.setToken(new SyncToken(\"\"));\n-\n-                            return handler.handle(bld.build());\n-                        }\n-                    }, options);\n+        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n+            connector.search(objectClass, null, new ResultsHandler() {\n+\n+                @Override\n+                public boolean handle(final ConnectorObject obj) {\n+                    final SyncDeltaBuilder bld = new SyncDeltaBuilder();\n+                    bld.setObject(obj);\n+                    bld.setUid(obj.getUid());\n+                    bld.setDeltaType(SyncDeltaType.CREATE_OR_UPDATE);\n+                    bld.setToken(new SyncToken(\"\"));\n+\n+                    return handler.handle(bld.build());\n+                }\n+            }, options);\n \n         } else {\n-            LOG.info(\"Search was attempted, although the \"\n-                    + \"connector only has these capabilities: {}. No action.\",\n+            LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n                     activeConnInstance.getCapabilities());\n         }\n     }"},{"sha":"505df83a7524fd408283d4d6532cb7f8c061890e","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":10,"deletions":20,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -194,12 +194,10 @@ public List<PropagationTask> getCreateTaskIds(\n         }\n \n         if (syncResourceNames != null) {\n-            propByRes.get(PropagationOperation.CREATE).\n-                    removeAll(syncResourceNames);\n+            propByRes.get(PropagationOperation.CREATE).removeAll(syncResourceNames);\n         }\n \n-        return provision(\n-                user, password, wfResult.getResult().getValue(), propByRes);\n+        return provision(user, password, wfResult.getResult().getValue(), propByRes);\n     }\n \n     /**\n@@ -241,8 +239,7 @@ public List<PropagationTask> getUpdateTaskIds(\n             final Boolean enable)\n             throws NotFoundException {\n \n-        return getUpdateTaskIds(\n-                wfResult, null, null, null, enable, null);\n+        return getUpdateTaskIds(wfResult, null, null, null, enable, null);\n     }\n \n     /**\n@@ -320,17 +317,13 @@ private List<PropagationTask> getUpdateTaskIds(\n         if (propByRes != null && !propByRes.isEmpty()) {\n             localPropByRes.merge(propByRes);\n         } else {\n-            localPropByRes.addAll(\n-                    PropagationOperation.UPDATE, user.getResourceNames());\n+            localPropByRes.addAll(PropagationOperation.UPDATE, user.getResourceNames());\n         }\n \n         if (syncResourceNames != null) {\n-            localPropByRes.get(\n-                    PropagationOperation.CREATE).removeAll(syncResourceNames);\n-            localPropByRes.get(\n-                    PropagationOperation.UPDATE).removeAll(syncResourceNames);\n-            localPropByRes.get(\n-                    PropagationOperation.DELETE).removeAll(syncResourceNames);\n+            localPropByRes.get(PropagationOperation.CREATE).removeAll(syncResourceNames);\n+            localPropByRes.get(PropagationOperation.UPDATE).removeAll(syncResourceNames);\n+            localPropByRes.get(PropagationOperation.DELETE).removeAll(syncResourceNames);\n         }\n \n         return provision(user, password, enable, localPropByRes);\n@@ -576,8 +569,7 @@ protected List<PropagationTask> provision(\n         List<PropagationTask> tasks = new ArrayList<PropagationTask>();\n \n         for (PropagationOperation operation : PropagationOperation.values()) {\n-            List<ExternalResource> resourcesByPriority =\n-                    new ArrayList<ExternalResource>();\n+            List<ExternalResource> resourcesByPriority = new ArrayList<ExternalResource>();\n             for (ExternalResource resource : resourceDAO.findAllByPriority()) {\n                 if (propByRes.get(operation).contains(resource.getName())) {\n                     resourcesByPriority.add(resource);\n@@ -591,11 +583,9 @@ protected List<PropagationTask> provision(\n                 task.setSyncopeUser(user);\n                 task.setPropagationOperation(operation);\n                 task.setPropagationMode(resource.getPropagationMode());\n-                task.setOldAccountId(\n-                        propByRes.getOldAccountId(resource.getName()));\n+                task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n-                Map.Entry<String, Set<Attribute>> preparedAttrs =\n-                        prepareAttributes(user, password, enable, resource);\n+                Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(user, password, enable, resource);\n \n                 task.setAccountId(preparedAttrs.getKey());\n                 task.setAttributes(preparedAttrs.getValue());"},{"sha":"2894ac6c3f560c908c951aaec0180acaab38f0bd","filename":"core/src/main/java/org/syncope/core/scheduling/DefaultSyncJobActions.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FDefaultSyncJobActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FDefaultSyncJobActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FDefaultSyncJobActions.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -38,24 +38,28 @@ public void beforeAll(final SyncTask task)\n     }\n \n     @Override\n-    public void beforeCreate(final SyncDelta delta, final UserTO user)\n+    public SyncDelta beforeCreate(final SyncDelta delta, final UserTO user)\n             throws JobExecutionException {\n+        return delta;\n     }\n \n     @Override\n-    public void beforeUpdate(SyncDelta delta, UserTO user, UserMod userMod)\n+    public SyncDelta beforeUpdate(final SyncDelta delta, final UserTO user, final UserMod userMod)\n             throws JobExecutionException {\n+        return delta;\n     }\n \n     @Override\n-    public void beforeDelete(SyncDelta delta, UserTO user)\n+    public SyncDelta beforeDelete(final SyncDelta delta, final UserTO user)\n             throws JobExecutionException {\n+        return delta;\n     }\n \n     @Override\n-    public void after(final SyncDelta delta, final UserTO user,\n+    public SyncDelta after(final SyncDelta delta, final UserTO user,\n             final SyncResult result)\n             throws JobExecutionException {\n+        return delta;\n     }\n \n     @Override"},{"sha":"5417415e3877bc59f6514deb459d45225805b05a","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":17,"deletions":25,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -154,30 +154,25 @@ public void setActions(final SyncJobActions actions) {\n     private List<Long> findExistingUsers(final SyncDelta delta) {\n         final SyncTask syncTask = (SyncTask) this.task;\n \n-        final String uid = delta.getPreviousUid() == null\n-                ? delta.getUid().getUidValue()\n-                : delta.getPreviousUid().getUidValue();\n+        final String uid =\n+                delta.getPreviousUid() == null ? delta.getUid().getUidValue() : delta.getPreviousUid().getUidValue();\n \n         // ---------------------------------\n         // Get sync policy specification\n         // ---------------------------------\n         final SyncPolicy policy = syncTask.getResource().getSyncPolicy();\n-\n-        final SyncPolicySpec policySpec = policy != null\n-                ? (SyncPolicySpec) policy.getSpecification() : null;\n+        final SyncPolicySpec policySpec = policy != null ? (SyncPolicySpec) policy.getSpecification() : null;\n         // ---------------------------------\n \n         final List<Long> result = new ArrayList<Long>();\n \n-        if (policySpec != null\n-                && !policySpec.getAlternativeSearchAttrs().isEmpty()) {\n+        if (policySpec != null && !policySpec.getAlternativeSearchAttrs().isEmpty()) {\n \n             // search external attribute name/value \n             // about each specified name\n             final ConnectorObject object = delta.getObject();\n \n-            final Map<String, Attribute> extValues =\n-                    new HashMap<String, Attribute>();\n+            final Map<String, Attribute> extValues = new HashMap<String, Attribute>();\n \n             for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n                 extValues.put(\n@@ -280,15 +275,15 @@ private List<Long> findExistingUsers(final SyncDelta delta) {\n         return result;\n     }\n \n-    private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n+    private SyncResult createUser(SyncDelta delta, final boolean dryRun)\n             throws JobExecutionException {\n \n         final SyncResult result = new SyncResult();\n         result.setOperation(Operation.CREATE);\n \n         UserTO userTO = connObjectUtil.getUserTO(delta.getObject(), (SyncTask) task);\n \n-        actions.beforeCreate(delta, userTO);\n+        delta = actions.beforeCreate(delta, userTO);\n \n         if (dryRun) {\n             result.setUserId(0L);\n@@ -333,14 +328,13 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n             }\n         }\n \n-        actions.after(delta, userTO, result);\n+        delta = actions.after(delta, userTO, result);\n \n         return result;\n     }\n \n-    private void updateUsers(final SyncDelta delta,\n-            final List<Long> users, final boolean dryRun,\n-            final List<SyncResult> results)\n+    private void updateUsers(\n+            SyncDelta delta, final List<Long> users, final boolean dryRun, final List<SyncResult> results)\n             throws JobExecutionException {\n \n         if (!((SyncTask) task).isPerformUpdate()) {\n@@ -359,15 +353,14 @@ private void updateUsers(final SyncDelta delta,\n                 try {\n \n                     final UserMod userMod = connObjectUtil.getUserMod(userId, delta.getObject(), (SyncTask) task);\n-                    actions.beforeUpdate(delta, userTO, userMod);\n+                    delta = actions.beforeUpdate(delta, userTO, userMod);\n \n                     result.setStatus(Status.SUCCESS);\n                     result.setUserId(userMod.getId());\n                     result.setUsername(userMod.getUsername());\n \n                     if (!dryRun) {\n-                        WorkflowResult<Long> updated =\n-                                wfAdapter.update(userMod);\n+                        WorkflowResult<Long> updated = wfAdapter.update(userMod);\n \n                         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n                                 updated, userMod.getPassword(), null, null, null,\n@@ -384,7 +377,7 @@ private void updateUsers(final SyncDelta delta,\n                     LOG.error(\"Could not update user \" + delta.getUid().getUidValue(), t);\n                 }\n \n-                actions.after(delta, userTO, result);\n+                delta = actions.after(delta, userTO, result);\n                 results.add(result);\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find user {}\", userId, e);\n@@ -394,9 +387,8 @@ private void updateUsers(final SyncDelta delta,\n         }\n     }\n \n-    private void deleteUsers(final SyncDelta delta,\n-            final List<Long> users, final boolean dryRun,\n-            final List<SyncResult> results)\n+    private void deleteUsers(\n+            SyncDelta delta, final List<Long> users, final boolean dryRun, final List<SyncResult> results)\n             throws JobExecutionException {\n \n         if (!((SyncTask) task).isPerformDelete()) {\n@@ -409,7 +401,7 @@ private void deleteUsers(final SyncDelta delta,\n         for (Long userId : users) {\n             try {\n                 UserTO userTO = userDataBinder.getUserTO(userId);\n-                actions.beforeDelete(delta, userTO);\n+                delta = actions.beforeDelete(delta, userTO);\n \n                 final SyncResult result = new SyncResult();\n                 result.setUserId(userId);\n@@ -435,7 +427,7 @@ private void deleteUsers(final SyncDelta delta,\n                     }\n                 }\n \n-                actions.after(delta, userTO, result);\n+                delta = actions.after(delta, userTO, result);\n                 results.add(result);\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find user {}\", userId, e);"},{"sha":"0a87c18c5bcacb5516948a144672ddb7edf88347","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJobActions.java","status":"modified","additions":53,"deletions":6,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJobActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJobActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJobActions.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -30,21 +30,68 @@\n  */\n public interface SyncJobActions {\n \n-    void beforeAll(SyncTask task)\n+    /**\n+     * Action to be executed before to start the synchronization task execution.\n+     *\n+     * @param task synchronization task to be executed.\n+     * @throws JobExecutionException in case of generic failure.\n+     */\n+    void beforeAll(final SyncTask task)\n             throws JobExecutionException;\n \n-    void beforeCreate(SyncDelta delta, UserTO user)\n+    /**\n+     * Action to be executed before to create a synchronized user locally.\n+     *\n+     * @param delta rerieved synchronization information.\n+     * @param user user to be created.\n+     * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure.\n+     */\n+    SyncDelta beforeCreate(final SyncDelta delta, final UserTO user)\n             throws JobExecutionException;\n \n-    void beforeUpdate(SyncDelta delta, UserTO user, UserMod userMod)\n+    /**\n+     * Action to be executed before to update a synchronized user locally.\n+     *\n+     * @param delta retrieved synchronization information.\n+     * @param user local user information.\n+     * @param userMod modification.\n+     * @return synchronization information used for logging and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure.\n+     */\n+    SyncDelta beforeUpdate(final SyncDelta delta, final UserTO user, final UserMod userMod)\n             throws JobExecutionException;\n \n-    void beforeDelete(SyncDelta delta, UserTO user)\n+    /**\n+     * Action to be executed before to delete a synchronized user locally.\n+     *\n+     * @param delta retrieved synchronization information.\n+     * @param userlocal user to be deleted.\n+     * @return synchronization information used for logging and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure.\n+     */\n+    SyncDelta beforeDelete(final SyncDelta delta, final UserTO user)\n             throws JobExecutionException;\n \n-    void after(SyncDelta delta, UserTO user, SyncResult result)\n+    /**\n+     * Action to be executed after each local user synchronization.\n+     *\n+     * @param delta retrieved synchronization information (may be modified by 'beforeCreate/beforeUpdate/beforeDelete').\n+     * @param user synchronizad local user.\n+     * @param result global synchronization results at the current synchronization step.\n+     * @return synchronization information.\n+     * @throws JobExecutionException in case of generic failure.\n+     */\n+    SyncDelta after(final SyncDelta delta, final UserTO user, final SyncResult result)\n             throws JobExecutionException;\n \n-    void afterAll(SyncTask task, List<SyncResult> results)\n+    /**\n+     * Action to be executed after the synchronization task completion.\n+     *\n+     * @param task executed synchronization task.\n+     * @param results synchronization result.\n+     * @throws JobExecutionException in case of generic failure.\n+     */\n+    void afterAll(final SyncTask task, final List<SyncResult> results)\n             throws JobExecutionException;\n }"},{"sha":"6e7aacef4e16a640217c2c1ad9bb2c0310f7f9bd","filename":"core/src/main/java/org/syncope/core/workflow/AbstractUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -54,20 +54,17 @@ protected abstract WorkflowResult<Long> doActivate(\n \n     @Override\n     public WorkflowResult<Long> activate(final Long userId, final String token)\n-            throws UnauthorizedRoleException, NotFoundException,\n-            WorkflowException {\n+            throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n \n         return doActivate(dataBinder.getUserFromId(userId), token);\n     }\n \n-    protected abstract WorkflowResult<Long> doUpdate(SyncopeUser user,\n-            UserMod userMod)\n+    protected abstract WorkflowResult<Long> doUpdate(SyncopeUser user, UserMod userMod)\n             throws WorkflowException;\n \n     @Override\n     public WorkflowResult<Long> update(final UserMod userMod)\n-            throws UnauthorizedRoleException, NotFoundException,\n-            WorkflowException {\n+            throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n \n         return doUpdate(dataBinder.getUserFromId(userMod.getId()), userMod);\n     }"},{"sha":"a43b2c50c7c4e8631d805b30f46ac61f046e4e8a","filename":"core/src/main/java/org/syncope/core/workflow/ActivitiUserWorkflowAdapter.java","status":"modified","additions":27,"deletions":45,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -83,8 +83,7 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG =\n-            LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n \n     private static final String[] PROPERTY_IGNORE_PROPS = {\"type\"};\n \n@@ -131,11 +130,9 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     private RepositoryService repositoryService;\n \n     private void updateStatus(final SyncopeUser user) {\n-        List<Task> tasks = taskService.createTaskQuery().processInstanceId(\n-                user.getWorkflowId()).list();\n+        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n-            LOG.warn(\"While setting user status: unexpected task number ({})\",\n-                    tasks.size());\n+            LOG.warn(\"While setting user status: unexpected task number ({})\", tasks.size());\n         } else {\n             user.setStatus(tasks.get(0).getTaskDefinitionKey());\n         }\n@@ -144,17 +141,13 @@ private void updateStatus(final SyncopeUser user) {\n     private boolean waitingForForm(final SyncopeUser user) {\n         boolean result = false;\n \n-        List<Task> tasks = taskService.createTaskQuery().processInstanceId(\n-                user.getWorkflowId()).list();\n+        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n-            LOG.warn(\"While checking if form task: unexpected task number ({})\",\n-                    tasks.size());\n+            LOG.warn(\"While checking if form task: unexpected task number ({})\", tasks.size());\n         } else {\n             try {\n-                TaskFormData formData =\n-                        formService.getTaskFormData(tasks.get(0).getId());\n-                result = formData != null\n-                        && !formData.getFormProperties().isEmpty();\n+                TaskFormData formData = formService.getTaskFormData(tasks.get(0).getId());\n+                result = formData != null && !formData.getFormProperties().isEmpty();\n             } catch (ActivitiException e) {\n                 LOG.warn(\"Could not get task form data\", e);\n             }\n@@ -167,8 +160,7 @@ private Set<String> getPerformedTasks(final SyncopeUser user) {\n         Set<String> result = new HashSet<String>();\n \n         List<HistoricActivityInstance> tasks =\n-                historyService.createHistoricActivityInstanceQuery().\n-                executionId(user.getWorkflowId()).list();\n+                historyService.createHistoricActivityInstanceQuery().executionId(user.getWorkflowId()).list();\n         for (HistoricActivityInstance task : tasks) {\n             result.add(task.getActivityId());\n         }\n@@ -215,14 +207,13 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(\n \n         final ProcessInstance processInstance;\n         try {\n-            processInstance = runtimeService.startProcessInstanceByKey(\n-                    \"userWorkflow\", variables);\n+            processInstance = runtimeService.startProcessInstanceByKey(\"userWorkflow\", variables);\n         } catch (ActivitiException e) {\n             throw new WorkflowException(e);\n         }\n \n-        SyncopeUser user = (SyncopeUser) runtimeService.getVariable(\n-                processInstance.getProcessInstanceId(), SYNCOPE_USER);\n+        SyncopeUser user =\n+                (SyncopeUser) runtimeService.getVariable(processInstance.getProcessInstanceId(), SYNCOPE_USER);\n \n         // this will make SyncopeUserValidator not to consider\n         // password policies at all\n@@ -233,8 +224,8 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(\n         updateStatus(user);\n         user = userDAO.save(user);\n \n-        Boolean propagate_enable = (Boolean) runtimeService.getVariable(\n-                processInstance.getProcessInstanceId(), PROPAGATE_ENABLE);\n+        Boolean propagate_enable =\n+                (Boolean) runtimeService.getVariable(processInstance.getProcessInstanceId(), PROPAGATE_ENABLE);\n \n         if (propagate_enable == null) {\n             propagate_enable = enabled;\n@@ -246,42 +237,38 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(\n         propByRes.set(PropagationOperation.CREATE, user.getResourceNames());\n \n         if (waitingForForm(user)) {\n-            runtimeService.setVariable(processInstance.getProcessInstanceId(),\n-                    PROP_BY_RESOURCE, propByRes);\n+            runtimeService.setVariable(processInstance.getProcessInstanceId(), PROP_BY_RESOURCE, propByRes);\n             propByRes = null;\n \n             if (StringUtils.isNotBlank(userTO.getPassword())) {\n                 runtimeService.setVariable(\n-                        processInstance.getProcessInstanceId(),\n-                        ENCRYPTED_PWD, encrypt(userTO.getPassword()));\n+                        processInstance.getProcessInstanceId(), ENCRYPTED_PWD, encrypt(userTO.getPassword()));\n             }\n         }\n \n         return new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new DefaultMapEntry(user.getId(), propagate_enable), propByRes,\n-                getPerformedTasks(user));\n+                new DefaultMapEntry(user.getId(), propagate_enable), propByRes, getPerformedTasks(user));\n     }\n \n-    private Set<String> doExecuteTask(final SyncopeUser user,\n-            final String task, final Map<String, Object> moreVariables)\n+    private Set<String> doExecuteTask(\n+            final SyncopeUser user, final String task, final Map<String, Object> moreVariables)\n             throws WorkflowException {\n \n         Set<String> preTasks = getPerformedTasks(user);\n \n         final Map<String, Object> variables = new HashMap<String, Object>();\n         variables.put(SYNCOPE_USER, user);\n         variables.put(TASK, task);\n+\n         if (moreVariables != null && !moreVariables.isEmpty()) {\n             variables.putAll(moreVariables);\n         }\n \n         if (StringUtils.isBlank(user.getWorkflowId())) {\n-            throw new WorkflowException(\n-                    new NotFoundException(\"Empty workflow id\"));\n+            throw new WorkflowException(new NotFoundException(\"Empty workflow id\"));\n         }\n \n-        List<Task> tasks = taskService.createTaskQuery().processInstanceId(\n-                user.getWorkflowId()).list();\n+        List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.size() != 1) {\n             LOG.warn(\"Expected a single task, found {}\", tasks.size());\n         } else {\n@@ -316,26 +303,21 @@ protected WorkflowResult<Long> doUpdate(\n             final SyncopeUser user, final UserMod userMod)\n             throws WorkflowException {\n \n-        Set<String> performedTasks = doExecuteTask(user, \"update\",\n-                Collections.singletonMap(USER_MOD, (Object) userMod));\n+        Set<String> task = doExecuteTask(user, \"update\", Collections.singletonMap(USER_MOD, (Object) userMod));\n+\n         updateStatus(user);\n         SyncopeUser updated = userDAO.save(user);\n \n         PropagationByResource propByRes =\n-                (PropagationByResource) runtimeService.getVariable(\n-                user.getWorkflowId(), PROP_BY_RESOURCE);\n+                (PropagationByResource) runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE);\n \n         // save resources to be propagated and password for later -\n         // after form submission - propagation\n-        if (waitingForForm(user)\n-                && StringUtils.isNotBlank(userMod.getPassword())) {\n-\n-            runtimeService.setVariable(user.getWorkflowId(),\n-                    ENCRYPTED_PWD, encrypt(userMod.getPassword()));\n+        if (waitingForForm(user) && StringUtils.isNotBlank(userMod.getPassword())) {\n+            runtimeService.setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(userMod.getPassword()));\n         }\n \n-        return new WorkflowResult<Long>(\n-                updated.getId(), propByRes, performedTasks);\n+        return new WorkflowResult<Long>(updated.getId(), propByRes, task);\n     }\n \n     @Override"},{"sha":"99fa7b3056ecdc403d3d21fd4acebe6de4c196d6","filename":"core/src/main/java/org/syncope/core/workflow/activiti/AutoActivate.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FAutoActivate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FAutoActivate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FAutoActivate.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -27,7 +27,6 @@ public class AutoActivate extends AbstractActivitiDelegate {\n     protected void doExecute(final DelegateExecution execution)\n             throws Exception {\n \n-        execution.setVariable(ActivitiUserWorkflowAdapter.PROPAGATE_ENABLE,\n-                Boolean.TRUE);\n+        execution.setVariable(ActivitiUserWorkflowAdapter.PROPAGATE_ENABLE, Boolean.TRUE);\n     }\n }"},{"sha":"9883bb68a2e952d30ac566a9fccfc471ce8ce62e","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":30,"deletions":65,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -259,18 +259,15 @@ public void sync() {\n         csvuseridTO.setSchema(\"csvuserid\");\n         userTO.addDerivedAttribute(csvuseridTO);\n \n-        userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n         //-----------------------------\n \n-        Integer usersPre = restTemplate.getForObject(\n-                BASE_URL + \"user/count.json\", Integer.class);\n+        Integer usersPre = restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPre);\n \n         // Update sync task\n-        SyncTaskTO task = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4);\n+        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4);\n         assertNotNull(task);\n \n         //  add custom SyncJob actions\n@@ -300,16 +297,12 @@ public void sync() {\n \n         task.setUserTemplate(template);\n \n-        SyncTaskTO actual = restTemplate.postForObject(\n-                BASE_URL + \"task/update/sync\",\n-                task, SyncTaskTO.class);\n+        SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n-        assertEquals(TestSyncJobActions.class.getName(),\n-                actual.getJobActionsClassName());\n+        assertEquals(TestSyncJobActions.class.getName(), actual.getJobActionsClassName());\n \n-        SyncTaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n+        SyncTaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n \n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n@@ -340,69 +333,51 @@ public void sync() {\n         } while (preSyncSize == taskTO.getExecutions().size() && i < maxit);\n \n         // check for sync policy\n-        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n-                UserTO.class, userTO.getId());\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n \n         assertNotNull(userTO);\n         assertEquals(\"test9\", userTO.getUsername());\n         assertEquals(\"active\", userTO.getStatus());\n-        assertEquals(\"test9@syncope.org\",\n-                userTO.getAttributeMap().get(\"email\").getValues().get(0));\n-        assertEquals(\"test9@syncope.org\",\n-                userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n-        assertTrue(Integer.valueOf(userTO.getAttributeMap().\n-                get(\"fullname\").getValues().get(0)) <= 10);\n+        assertEquals(\"test9@syncope.org\", userTO.getAttributeMap().get(\"email\").getValues().get(0));\n+        assertEquals(\"test9@syncope.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n+        assertTrue(Integer.valueOf(userTO.getAttributeMap().get(\"fullname\").getValues().get(0)) <= 10);\n \n         // check for user template\n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/read.json?username=test7\",\n-                UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/read.json?username=test7\", UserTO.class);\n         assertNotNull(userTO);\n-        assertEquals(\"TYPE_OTHER\",\n-                userTO.getAttributeMap().get(\"type\").getValues().get(0));\n+        assertEquals(\"TYPE_OTHER\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n         assertEquals(2, userTO.getResources().size());\n         assertTrue(userTO.getResources().contains(\"resource-testdb\"));\n         assertTrue(userTO.getResources().contains(\"ws-target-resource-2\"));\n         assertEquals(1, userTO.getMemberships().size());\n-        assertTrue(userTO.getMemberships().get(0).getAttributeMap().\n-                containsKey(\"subscriptionDate\"));\n+        assertTrue(userTO.getMemberships().get(0).getAttributeMap().containsKey(\"subscriptionDate\"));\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/read.json?username=test8\",\n-                UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/read.json?username=test8\", UserTO.class);\n         assertNotNull(userTO);\n-        assertEquals(\"TYPE_8\",\n-                userTO.getAttributeMap().get(\"type\").getValues().get(0));\n+        assertEquals(\"TYPE_8\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n \n         // check for sync results\n-        Integer usersPost = restTemplate.getForObject(\n-                BASE_URL + \"user/count.json\", Integer.class);\n+        Integer usersPost = restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPost);\n-        assertTrue(\"Expected \" + (usersPre + 9) + \", found \" + usersPost,\n-                usersPost == usersPre + 9);\n+        assertTrue(\"Expected \" + (usersPre + 9) + \", found \" + usersPost, usersPost == usersPre + 9);\n \n         // Check for issue 215: \n         // * expected disabled user test1\n         // * expected enabled user test2\n-\n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/read.json?username=test1\",\n-                UserTO.class);\n+        \n+        userTO = restTemplate.getForObject(BASE_URL + \"user/read.json?username=test1\", UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/read.json?username=test3\",\n-                UserTO.class);\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/read.json?username=test3\", UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n     }\n \n     @Test\n     public void reconcile() {\n         // Update sync task\n-        SyncTaskTO task = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 7);\n+        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 7);\n         assertNotNull(task);\n \n         //  add user template\n@@ -430,17 +405,15 @@ public void reconcile() {\n \n         task.setUserTemplate(template);\n \n-        SyncTaskTO actual = restTemplate.postForObject(\n-                BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n+        SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n \n         // read executions before sync (dryrun test could be executed before)\n         int preSyncSize = actual.getExecutions().size();\n \n         TaskExecTO execution = restTemplate.postForObject(\n-                BASE_URL + \"task/execute/{taskId}\", null,\n-                TaskExecTO.class, actual.getId());\n+                BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, actual.getId());\n         assertEquals(\"JOB_FIRED\", execution.getStatus());\n \n         int i = 0;\n@@ -453,8 +426,7 @@ public void reconcile() {\n             } catch (InterruptedException e) {\n             }\n \n-            actual = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\",\n-                    SyncTaskTO.class, actual.getId());\n+            actual = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, actual.getId());\n \n             assertNotNull(actual);\n             assertNotNull(actual.getExecutions());\n@@ -469,37 +441,32 @@ public void reconcile() {\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n-        final UserTO userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/read.json?username=testuser1\", UserTO.class);\n+        final UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read.json?username=testuser1\", UserTO.class);\n \n         assertNotNull(userTO);\n-        assertEquals(\"reconciled@syncope.org\",\n-                userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n+        assertEquals(\"reconciled@syncope.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n     }\n \n     @Test\n     public void issue196() {\n         TaskExecTO execution = restTemplate.postForObject(\n-                BASE_URL + \"task/execute/{taskId}\", null,\n-                TaskExecTO.class, 6);\n+                BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n         assertNotNull(execution);\n         assertEquals(0, execution.getId());\n         assertNotNull(execution.getTask());\n     }\n \n     @Test\n     public void dryRun() {\n-        SyncTaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n+        SyncTaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4L);\n \n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n         int preDryRunSize = taskTO.getExecutions().size();\n \n         TaskExecTO execution = restTemplate.postForObject(\n-                BASE_URL + \"task/execute/{taskId}?dryRun=true\", null,\n-                TaskExecTO.class, 4);\n+                BASE_URL + \"task/execute/{taskId}?dryRun=true\", null, TaskExecTO.class, 4);\n         assertNotNull(execution);\n \n         // wait for sync completion (executions incremented)\n@@ -509,9 +476,7 @@ public void dryRun() {\n             } catch (InterruptedException e) {\n             }\n \n-            taskTO = restTemplate.getForObject(\n-                    BASE_URL + \"task/read/{taskId}\",\n-                    SyncTaskTO.class, taskTO.getId());\n+            taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, taskTO.getId());\n \n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getExecutions());"},{"sha":"eb1a6a175b6d170cb75209bc08bca410f4b6f9b7","filename":"core/src/test/java/org/syncope/core/scheduling/TestSyncJobActions.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FTestSyncJobActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b04805a8eded18ee6c7d15eeda567a5e849186e0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FTestSyncJobActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FTestSyncJobActions.java?ref=b04805a8eded18ee6c7d15eeda567a5e849186e0","patch":"@@ -31,7 +31,7 @@ public class TestSyncJobActions extends DefaultSyncJobActions {\n     private int counter = 0;\n \n     @Override\n-    public void beforeCreate(final SyncDelta delta, final UserTO user)\n+    public SyncDelta beforeCreate(final SyncDelta delta, final UserTO user)\n             throws JobExecutionException {\n \n         AttributeTO attrTO = null;\n@@ -46,11 +46,12 @@ public void beforeCreate(final SyncDelta delta, final UserTO user)\n             user.addAttribute(attrTO);\n         }\n         attrTO.setValues(Collections.singletonList(String.valueOf(counter++)));\n+\n+        return delta;\n     }\n \n     @Override\n-    public void beforeUpdate(final SyncDelta delta, final UserTO user,\n-            final UserMod userMod)\n+    public SyncDelta beforeUpdate(final SyncDelta delta, final UserTO user, final UserMod userMod)\n             throws JobExecutionException {\n \n         userMod.addAttributeToBeRemoved(\"fullname\");\n@@ -67,7 +68,8 @@ public void beforeUpdate(final SyncDelta delta, final UserTO user,\n             userMod.addAttributeToBeUpdated(fullnameMod);\n         }\n \n-        fullnameMod.setValuesToBeAdded(\n-                Collections.singletonList(String.valueOf(counter++)));\n+        fullnameMod.setValuesToBeAdded(Collections.singletonList(String.valueOf(counter++)));\n+\n+        return delta;\n     }\n }"}]}