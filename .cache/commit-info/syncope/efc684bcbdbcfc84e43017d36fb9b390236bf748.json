{"sha":"efc684bcbdbcfc84e43017d36fb9b390236bf748","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVmYzY4NGJjYmRiY2ZjODRlNDMwMTdkMzZmYjliMzkwMjM2YmY3NDg=","commit":{"author":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-06-12T15:43:04Z"},"committer":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-06-12T15:43:04Z"},"message":"[SYNCOPE-313] - SyncActions implementation to sync passwords from a Database\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1602209 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b221cedebeb2cf8fa18d5a70c5fcc5a41966b36","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9b221cedebeb2cf8fa18d5a70c5fcc5a41966b36"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/efc684bcbdbcfc84e43017d36fb9b390236bf748","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/efc684bcbdbcfc84e43017d36fb9b390236bf748","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/efc684bcbdbcfc84e43017d36fb9b390236bf748","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/efc684bcbdbcfc84e43017d36fb9b390236bf748/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"56358f7b42b3990422731bd53067cdae82c64073","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/56358f7b42b3990422731bd53067cdae82c64073","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/56358f7b42b3990422731bd53067cdae82c64073"}],"stats":{"total":112,"additions":112,"deletions":0},"files":[{"sha":"4b80f4bf48d131d7fb8628a639db50088d157961","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/DBPasswordSyncActions.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/efc684bcbdbcfc84e43017d36fb9b390236bf748/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/efc684bcbdbcfc84e43017d36fb9b390236bf748/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FDBPasswordSyncActions.java?ref=efc684bcbdbcfc84e43017d36fb9b390236bf748","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.sync.impl;\n+\n+import java.util.Iterator;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.core.persistence.beans.ConnInstance;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.propagation.Connector;\n+import org.apache.syncope.core.sync.DefaultSyncActions;\n+import org.apache.syncope.core.sync.SyncResult;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * A SyncActions implementation which allows the ability to import passwords from a Database \n+ * backend, where the passwords are hashed according to the password cipher algorithm property\n+ * of the (DB) Connector and HEX-encoded.\n+ */\n+public class DBPasswordSyncActions extends DefaultSyncActions {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(DBPasswordSyncActions.class);\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    private String encodedPassword;\n+\n+    private CipherAlgorithm cipher;\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n+\n+        if (subject instanceof UserTO) {\n+            String password = ((UserTO) subject).getPassword();\n+            if (password != null) {\n+                Connector connector = handler.getConnector();\n+                \n+                ConnInstance connInstance = connector.getActiveConnInstance();\n+                Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n+                String cipherAlgorithm = \"CLEARTEXT\";\n+                while (propertyIterator.hasNext()) {\n+                    ConnConfProperty property = propertyIterator.next();\n+                    if (\"cipherAlgorithm\".equals(property.getSchema().getName())\n+                            && property.getValues() != null && !property.getValues().isEmpty()) {\n+                        cipherAlgorithm = (String) property.getValues().get(0);\n+                        break;\n+                    }\n+                }\n+                if (!\"CLEARTEXT\".equals(cipherAlgorithm)) {\n+                    try {\n+                        encodedPassword = password;\n+                        cipher = CipherAlgorithm.valueOf(cipherAlgorithm);\n+                    } catch (IllegalArgumentException e) {\n+                        LOG.error(\"Cipher algorithm not allowed: {}\", cipherAlgorithm, e);\n+                        encodedPassword = null;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return delta;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <T extends AbstractAttributableTO> void after(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject,\n+            final SyncResult result) throws JobExecutionException {\n+\n+        if (subject instanceof UserTO && encodedPassword != null && cipher != null) {\n+            SyncopeUser syncopeUser = userDAO.find(subject.getId());\n+            if (syncopeUser != null) {\n+                syncopeUser.setEncodedPassword(encodedPassword.toUpperCase(), cipher);\n+            }\n+            encodedPassword = null;\n+            cipher = null;\n+        }\n+    }\n+\n+}"}]}