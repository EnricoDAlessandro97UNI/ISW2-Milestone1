{"sha":"649ba7743fd5fa8921722595244585d442b7c668","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY0OWJhNzc0M2ZkNWZhODkyMTcyMjU5NTI0NDU4NWQ0NDJiN2M2Njg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-20T08:41:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-20T08:41:55Z"},"message":"[SYNCOPE-873] Cleanup","tree":{"sha":"2135da299c707bb181f892016956530986823ee8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2135da299c707bb181f892016956530986823ee8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/649ba7743fd5fa8921722595244585d442b7c668","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/649ba7743fd5fa8921722595244585d442b7c668","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/649ba7743fd5fa8921722595244585d442b7c668","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/649ba7743fd5fa8921722595244585d442b7c668/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bb0be0902e8a81d8c8896ef4aa55e1515bfc0559","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bb0be0902e8a81d8c8896ef4aa55e1515bfc0559","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bb0be0902e8a81d8c8896ef4aa55e1515bfc0559"}],"stats":{"total":623,"additions":180,"deletions":443},"files":[{"sha":"547fc9e59e26c03f12f632a02732458c051ea49b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/anyobject/AnyObjectSyncopeOperations.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fanyobject%2FAnyObjectSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fanyobject%2FAnyObjectSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fanyobject%2FAnyObjectSyncopeOperations.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -21,18 +21,21 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n \n public class AnyObjectSyncopeOperations {\n \n     private final AnyObjectService anyObjectService = SyncopeServices.get(AnyObjectService.class);\n \n     public List<AnyObjectTO> list(final String type) {\n-        return anyObjectService.list(type, new AnyListQuery()).getResult();\n+        return anyObjectService.search(\n+                new AnyQuery.Builder().fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(type).query()).build()).\n+                getResult();\n     }\n \n     public AnyObjectTO read(final String anyKey) {"},{"sha":"96e14cb49da8a7708ba684840a4307f3a7013089","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/group/GroupSyncopeOperations.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupSyncopeOperations.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -24,15 +24,15 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n \n public class GroupSyncopeOperations {\n \n     private final GroupService groupService = SyncopeServices.get(GroupService.class);\n \n     public List<GroupTO> list() {\n-        return groupService.list(new AnyListQuery()).getResult();\n+        return groupService.search(new AnyQuery()).getResult();\n     }\n \n     public GroupTO read(final String groupKey) {"},{"sha":"cc9101b7feef66a6a531330ea5dcf5be0fce2086","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -26,8 +26,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.UserService;\n \n public class UserSyncopeOperations {\n@@ -44,28 +43,23 @@ public boolean auth(final String username, final String password) {\n     }\n \n     public List<UserTO> searchByRole(final String realm, final String role) {\n-        return userService.search(\n-                new AnySearchQuery.Builder().realm(realm).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role)\n-                        .query()).build()).getResult();\n+        return userService.search(new AnyQuery.Builder().realm(realm).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role).query()).build()).getResult();\n     }\n \n     public List<UserTO> searchByResource(final String realm, final String resource) {\n-        return userService.search(\n-                new AnySearchQuery.Builder().realm(realm).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(resource)\n-                        .query()).build()).getResult();\n+        return userService.search(new AnyQuery.Builder().realm(realm).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(resource).query()).build()).getResult();\n     }\n \n     public List<UserTO> searchByAttribute(final String realm, final String attributeName, final String attributeValue) {\n-        return userService.search(\n-                new AnySearchQuery.Builder().realm(realm).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue)\n-                        .query()).build()).getResult();\n+        return userService.search(new AnyQuery.Builder().realm(realm).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue).query()).\n+                build()).getResult();\n     }\n \n     public PagedResult<UserTO> list() {\n-        return userService.list(new AnyListQuery());\n+        return userService.search(new AnyQuery());\n     }\n \n     public UserTO read(final String userKey) {\n@@ -78,15 +72,14 @@ public void delete(final String userKey) {\n \n     public Map<String, BulkActionResult.Status> deleteByAttribute(\n             final String realm, final String attributeName, final String attributeValue) {\n-        final List<UserTO> users = userService.search(\n-                new AnySearchQuery.Builder().realm(realm).\n+        final List<UserTO> users = userService.search(new AnyQuery.Builder().realm(realm).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue)\n                         .query()).build()).getResult();\n         return deleteBulk(users);\n     }\n \n     public Map<String, BulkActionResult.Status> deleteAll(final String realm) {\n-        return deleteBulk(userService.list(new AnyListQuery.Builder().realm(realm).details(false).build()).getResult());\n+        return deleteBulk(userService.search(new AnyQuery.Builder().realm(realm).details(false).build()).getResult());\n     }\n \n     private Map<String, BulkActionResult.Status> deleteBulk(final List<UserTO> users) {"},{"sha":"20ac7ff56af102e6074a418bd1119d3bc68b311f","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/AnyDataProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAnyDataProvider.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -87,7 +87,7 @@ public Iterator<A> iterator(final long first, final long count) {\n                     ? Collections.<A>emptyList()\n                     : restClient.search(realm, fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n         } else {\n-            result = restClient.list(realm, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n+            result = restClient.search(realm, null, (page < 0 ? 0 : page) + 1, paginatorRows, getSort(), type);\n         }\n \n         Collections.sort(result, comparator);\n@@ -101,7 +101,7 @@ public long size() {\n         if (filtered) {\n             result = fiql == null ? 0 : restClient.searchCount(realm, fiql, type);\n         } else {\n-            result = restClient.count(realm, type);\n+            result = restClient.searchCount(realm, null, type);\n         }\n \n         return result;"},{"sha":"caa3f8a4950f6974be5b66eb9aed9ddf6071a6b9","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -80,7 +80,7 @@ protected List<SearchClause.Type> load() {\n \n             @Override\n             protected Map<String, String> load() {\n-                List<GroupTO> groupTOs = groupRestClient.list(\"/\", -1, -1, new SortParam<>(\"name\", true), null);\n+                List<GroupTO> groupTOs = groupRestClient.search(\"/\", null, -1, -1, new SortParam<>(\"name\", true), null);\n \n                 final Map<String, String> result = new HashMap<>(groupTOs.size());\n                 for (GroupTO group : groupTOs) {"},{"sha":"b28702925177156fa5eaf46abd3c4ee4c75a0ebe","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -43,14 +43,9 @@\n \n     protected abstract Class<? extends AnyService<TO, P>> getAnyServiceClass();\n \n-    public abstract int count(String realm, String type);\n-\n-    public abstract List<TO> list(String realm, int page, int size, SortParam<String> sort, String type);\n-\n     public abstract int searchCount(String realm, String fiql, String type);\n \n-    public abstract List<TO> search(\n-            String realm, String fiql, int page, int size, SortParam<String> sort, String type);\n+    public abstract List<TO> search(String realm, String fiql, int page, int size, SortParam<String> sort, String type);\n \n     public TO read(final String key) {\n         return getService(getAnyServiceClass()).read(key);"},{"sha":"4e6092c8ce0cd5f58cbef7e0ec63e0cb0f42431a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":3,"deletions":23,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -21,9 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -40,28 +38,10 @@ protected Class<? extends AnyService<AnyObjectTO, AnyObjectPatch>> getAnyService\n         return AnyObjectService.class;\n     }\n \n-    @Override\n-    public int count(final String realm, final String type) {\n-        return getService(AnyObjectService.class).list(\n-                type, new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).getTotalCount();\n-    }\n-\n-    @Override\n-    public List<AnyObjectTO> list(\n-            final String realm, final int page, final int size, final SortParam<String> sort, final String type) {\n-\n-        return list(type, realm).getResult();\n-    }\n-\n-    public PagedResult<AnyObjectTO> list(final String type, final String realm) {\n-        return getService(AnyObjectService.class).\n-                list(type, new AnyListQuery.Builder().realm(realm).build());\n-    }\n-\n     @Override\n     public int searchCount(final String realm, final String fiql, final String type) {\n         return getService(AnyObjectService.class).\n-                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -71,7 +51,7 @@ public List<AnyObjectTO> search(final String realm, final String fiql, final int\n             final String type) {\n \n         return getService(AnyObjectService.class).search(\n-                new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n+                new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n                 orderBy(toOrderBy(sort)).details(false).build()).getResult();\n     }\n }"},{"sha":"36b2845cc78de06297d1a6679b16da90e29803eb","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":3,"deletions":21,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -22,8 +22,7 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -40,27 +39,10 @@ protected Class<? extends AnyService<GroupTO, GroupPatch>> getAnyServiceClass()\n         return GroupService.class;\n     }\n \n-    @Override\n-    public int count(final String realm, final String type) {\n-        return getService(GroupService.class).\n-                list(new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).\n-                getTotalCount();\n-    }\n-\n-    @Override\n-    public List<GroupTO> list(\n-            final String realm, final int page, final int size, final SortParam<String> sort, final String type) {\n-\n-        return getService(GroupService.class).\n-                list(new AnyListQuery.Builder().realm(realm).page(page).size(size).\n-                        orderBy(toOrderBy(sort)).details(false).build()).\n-                getResult();\n-    }\n-\n     @Override\n     public int searchCount(final String realm, final String fiql, final String type) {\n         return getService(GroupService.class).\n-                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -70,7 +52,7 @@ public List<GroupTO> search(\n             final String type) {\n \n         return getService(GroupService.class).\n-                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n+                search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n                         orderBy(toOrderBy(sort)).details(false).build()).\n                 getResult();\n     }"},{"sha":"7a4e559a7aa707aa1175b5ad1457cf6101e7e064","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":3,"deletions":20,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -29,8 +29,7 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -53,26 +52,10 @@ public ProvisioningResult<UserTO> create(final UserTO userTO, final boolean stor\n         });\n     }\n \n-    @Override\n-    public int count(final String realm, final String type) {\n-        return getService(UserService.class).\n-                list(new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).\n-                getTotalCount();\n-    }\n-\n-    @Override\n-    public List<UserTO> list(\n-            final String realm, final int page, final int size, final SortParam<String> sort, final String type) {\n-\n-        return getService(UserService.class).\n-                list(new AnyListQuery.Builder().realm(realm).page(page).size(size).\n-                        orderBy(toOrderBy(sort)).details(false).build()).getResult();\n-    }\n-\n     @Override\n     public int searchCount(final String realm, final String fiql, final String type) {\n         return getService(UserService.class).\n-                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n@@ -82,7 +65,7 @@ public List<UserTO> search(\n             final String type) {\n \n         return getService(UserService.class).\n-                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n+                search(new AnyQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n                         orderBy(toOrderBy(sort)).details(false).build()).getResult();\n     }\n "},{"sha":"5131ce64688e7bd1fbf66282175996aa75501053","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -111,7 +111,8 @@ public MembershipTO transform(final GroupTO input) {\n             }\n         }).hideLabel().setOutputMarkupId(true));\n \n-        List<GroupTO> allGroups = groupRestClient.list(anyTO.getRealm(), -1, -1, new SortParam<>(\"name\", true), null);\n+        List<GroupTO> allGroups = groupRestClient.search(\n+                anyTO.getRealm(), null, -1, -1, new SortParam<>(\"name\", true), null);\n         final Map<String, GroupTO> allGroupsByKey = new LinkedHashMap<>(allGroups.size());\n         for (GroupTO group : allGroups) {\n             allGroupsByKey.put(group.getKey(), group);"},{"sha":"7757532b5a1b7a50bf257376addfa8b55829f2be","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SyncopeGroupResource.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSyncopeGroupResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSyncopeGroupResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSyncopeGroupResource.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -25,18 +25,14 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.wicket.request.resource.AbstractResource;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public class SyncopeGroupResource extends AbstractBaseResource {\n \n     private static final long serialVersionUID = 7475706378304995200L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeGroupResource.class);\n-\n     private final GroupService groupService;\n \n     public SyncopeGroupResource() {\n@@ -61,7 +57,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n             String realm = java.net.URLDecoder.decode(attributes.getParameters().get(\"realm\").toString(\n                     SyncopeConstants.ROOT_REALM), \"UTF-8\");\n-            final List<GroupTO> groupTOs = groupService.list(new AnyListQuery.Builder().realm(realm).build()).\n+            final List<GroupTO> groupTOs = groupService.search(new AnyQuery.Builder().realm(realm).build()).\n                     getResult();\n \n             response.setWriteCallback(new AbstractResource.WriteCallback() {"},{"sha":"cc394c07ecd51459f7abc7966084d3c49e5cfb74","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyListQuery.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb0be0902e8a81d8c8896ef4aa55e1515bfc0559/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb0be0902e8a81d8c8896ef4aa55e1515bfc0559/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyListQuery.java?ref=bb0be0902e8a81d8c8896ef4aa55e1515bfc0559","patch":"@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.beans;\n-\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.MatrixParam;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-\n-public class AnyListQuery extends AnyQuery {\n-\n-    private static final long serialVersionUID = -5197167078435619636L;\n-\n-    public static class Builder extends AbstractQuery.Builder<AnyListQuery, Builder> {\n-\n-        @Override\n-        protected AnyListQuery newInstance() {\n-            return new AnyListQuery();\n-        }\n-\n-        public Builder details(final boolean details) {\n-            getInstance().setDetails(details);\n-            return this;\n-        }\n-\n-        public Builder realm(final String realm) {\n-            getInstance().setRealm(realm);\n-            return this;\n-        }\n-    }\n-\n-    private String realm;\n-\n-    public String getRealm() {\n-        return realm;\n-    }\n-\n-    @DefaultValue(SyncopeConstants.ROOT_REALM)\n-    @MatrixParam(\"realm\")\n-    public void setRealm(final String realm) {\n-        this.realm = realm;\n-    }\n-}"},{"sha":"5b5b79c31a819740f4de2f39df243bc30735ccd1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":37,"deletions":1,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -19,12 +19,14 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.MatrixParam;\n import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class AnyQuery extends AbstractQuery {\n \n-    private static final long serialVersionUID = -371488230250055359L;\n+    private static final long serialVersionUID = -6736562952418964707L;\n \n     public static class Builder extends AbstractQuery.Builder<AnyQuery, Builder> {\n \n@@ -38,10 +40,34 @@ public Builder details(final boolean details) {\n             return this;\n         }\n \n+        public Builder realm(final String realm) {\n+            getInstance().setRealm(realm);\n+            return this;\n+        }\n+\n+        public Builder fiql(final String fiql) {\n+            getInstance().setFiql(fiql);\n+\n+            return this;\n+        }\n     }\n \n+    private String realm;\n+\n     private Boolean details;\n \n+    private String fiql;\n+\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    @DefaultValue(SyncopeConstants.ROOT_REALM)\n+    @MatrixParam(\"realm\")\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n     public Boolean getDetails() {\n         return details == null ? true : details;\n     }\n@@ -51,4 +77,14 @@ public Boolean getDetails() {\n     public void setDetails(final Boolean details) {\n         this.details = details;\n     }\n+\n+    public String getFiql() {\n+        return fiql;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_FIQL)\n+    public void setFiql(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+\n }"},{"sha":"ae38801d3b4030bb14d59b3ae7b08f69a49252ff","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnySearchQuery.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb0be0902e8a81d8c8896ef4aa55e1515bfc0559/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb0be0902e8a81d8c8896ef4aa55e1515bfc0559/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnySearchQuery.java?ref=bb0be0902e8a81d8c8896ef4aa55e1515bfc0559","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.beans;\n-\n-import javax.ws.rs.QueryParam;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n-public class AnySearchQuery extends AnyListQuery {\n-\n-    private static final long serialVersionUID = -6736562952418964707L;\n-\n-    public static class Builder extends AbstractQuery.Builder<AnySearchQuery, Builder> {\n-\n-        @Override\n-        protected AnySearchQuery newInstance() {\n-            return new AnySearchQuery();\n-        }\n-\n-        public Builder details(final boolean details) {\n-            getInstance().setDetails(details);\n-            return this;\n-        }\n-\n-        public Builder realm(final String realm) {\n-            getInstance().setRealm(realm);\n-            return this;\n-        }\n-\n-        public Builder fiql(final String fiql) {\n-            getInstance().setFiql(fiql);\n-\n-            return this;\n-        }\n-    }\n-\n-    private String fiql;\n-\n-    public String getFiql() {\n-        return fiql;\n-    }\n-\n-    @QueryParam(JAXRSService.PARAM_FIQL)\n-    public void setFiql(final String fiql) {\n-        this.fiql = fiql;\n-    }\n-\n-}"},{"sha":"4127345089dba595500dcd11f3c32e179a3e336a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -18,33 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.BeanParam;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.MatrixParam;\n import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n \n /**\n  * REST operations for anyObjects.\n  */\n @Path(\"anyObjects\")\n public interface AnyObjectService extends AnyService<AnyObjectTO, AnyObjectPatch> {\n-\n-    /**\n-     * Returns a paged list of existing any objects matching the given query, for the given type.\n-     *\n-     * @param type any type\n-     * @param listQuery query conditions\n-     * @return paged list of existing any objects matching the given query, for the given type\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    PagedResult<AnyObjectTO> list(@NotNull @MatrixParam(\"type\") String type, @BeanParam AnyListQuery listQuery);\n-\n }"},{"sha":"ac958e10e9e5e2ac65bddf93d216a6e2bd718cd7","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n \n public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSService {\n \n@@ -86,13 +86,12 @@ AttrTO read(\n     /**\n      * Returns a paged list of any objects matching the given query.\n      *\n-     * @param searchQuery query conditions\n+     * @param anyQuery query conditions\n      * @return paged list of any objects matching the given query\n      */\n     @GET\n-    @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    PagedResult<TO> search(@BeanParam AnySearchQuery searchQuery);\n+    PagedResult<TO> search(@BeanParam AnyQuery anyQuery);\n \n     /**\n      * Creates a new any object."},{"sha":"549b41a993c8175b854592a38e806ddc26b4d701","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n-import javax.ws.rs.BeanParam;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n@@ -30,9 +29,7 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n \n /**\n  * REST operations for groups.\n@@ -51,16 +48,6 @@ public interface GroupService extends AnyService<GroupTO, GroupPatch> {\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     List<GroupTO> own();\n \n-    /**\n-     * Returns a paged list of existing groups matching the given query.\n-     *\n-     * @param listQuery query conditions\n-     * @return paged list of existing groups matching the given query\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    PagedResult<GroupTO> list(@BeanParam AnyListQuery listQuery);\n-\n     /**\n      * (De)provision all members of the given group from / onto all the resources associated to it.\n      *"},{"sha":"e595362497bf0d17dd48bf04450cc7beb29fa515","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.common.rest.api.service;\n \n import javax.validation.constraints.NotNull;\n-import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n@@ -31,26 +29,14 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n \n /**\n  * REST operations for users.\n  */\n @Path(\"users\")\n public interface UserService extends AnyService<UserTO, UserPatch> {\n \n-    /**\n-     * Returns a paged list of existing users matching the given query.\n-     *\n-     * @param listQuery query conditions\n-     * @return paged list of existing users matching the given query\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    PagedResult<UserTO> list(@BeanParam AnyListQuery listQuery);\n-\n     /**\n      * Creates a new user.\n      *"},{"sha":"d24f5220cae40dfc06e05b0ad7f21939d81d489a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":32,"deletions":37,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -44,8 +44,7 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.UserLogic;\n@@ -111,42 +110,38 @@ public TO read(final String key) {\n         return getAnyLogic().read(key);\n     }\n \n-    protected PagedResult<TO> list(final AnyListQuery listQuery) {\n-        String realm = StringUtils.prependIfMissing(listQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n-\n-        return buildPagedResult(\n-                getAnyLogic().list(\n-                        listQuery.getPage(),\n-                        listQuery.getSize(),\n-                        getOrderByClauses(listQuery.getOrderBy()),\n-                        realm,\n-                        listQuery.getDetails()),\n-                listQuery.getPage(),\n-                listQuery.getSize(),\n-                getAnyLogic().count(realm));\n-    }\n-\n     @Override\n-    public PagedResult<TO> search(final AnySearchQuery searchQuery) {\n-        String realm = StringUtils.prependIfMissing(searchQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n-\n-        // if an assignable query is provided in the FIQL string, start anyway from root realm\n-        boolean isAssignableCond = searchQuery.getFiql() == null\n-                ? false\n-                : -1 != searchQuery.getFiql().indexOf(SpecialAttr.ASSIGNABLE.toString());\n-\n-        SearchCond cond = getSearchCond(searchQuery.getFiql(), realm);\n-        return buildPagedResult(\n-                getAnyLogic().search(\n-                        cond,\n-                        searchQuery.getPage(),\n-                        searchQuery.getSize(),\n-                        getOrderByClauses(searchQuery.getOrderBy()),\n-                        isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n-                        searchQuery.getDetails()),\n-                searchQuery.getPage(),\n-                searchQuery.getSize(),\n-                getAnyLogic().searchCount(cond, isAssignableCond ? SyncopeConstants.ROOT_REALM : realm));\n+    public PagedResult<TO> search(final AnyQuery anyQuery) {\n+        String realm = StringUtils.prependIfMissing(anyQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n+\n+        if (StringUtils.isBlank(anyQuery.getFiql())) {\n+            return buildPagedResult(\n+                    getAnyLogic().list(\n+                            anyQuery.getPage(),\n+                            anyQuery.getSize(),\n+                            getOrderByClauses(anyQuery.getOrderBy()),\n+                            realm,\n+                            anyQuery.getDetails()),\n+                    anyQuery.getPage(),\n+                    anyQuery.getSize(),\n+                    getAnyLogic().count(realm));\n+        } else {\n+            // if an assignable query is provided in the FIQL string, start anyway from root realm\n+            boolean isAssignableCond = -1 != anyQuery.getFiql().indexOf(SpecialAttr.ASSIGNABLE.toString());\n+\n+            SearchCond cond = getSearchCond(anyQuery.getFiql(), realm);\n+            return buildPagedResult(\n+                    getAnyLogic().search(\n+                            cond,\n+                            anyQuery.getPage(),\n+                            anyQuery.getSize(),\n+                            getOrderByClauses(anyQuery.getOrderBy()),\n+                            isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n+                            anyQuery.getDetails()),\n+                    anyQuery.getPage(),\n+                    anyQuery.getSize(),\n+                    getAnyLogic().searchCount(cond, isAssignableCond ? SyncopeConstants.ROOT_REALM : realm));\n+        }\n     }\n \n     @Override"},{"sha":"c5ae33e64cdecc617cf36f82645d55d75eb63f48","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -18,17 +18,16 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import javax.ws.rs.BadRequestException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.AnyObjectLogic;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -51,25 +50,14 @@ protected AnyObjectPatch newPatch(final String key) {\n     }\n \n     @Override\n-    public PagedResult<AnyObjectTO> list(final AnyListQuery listQuery) {\n-        throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n-    }\n+    public PagedResult<AnyObjectTO> search(final AnyQuery anyQuery) {\n+        if (StringUtils.isBlank(anyQuery.getFiql())\n+                || -1 == anyQuery.getFiql().indexOf(SpecialAttr.TYPE.toString())) {\n \n-    @Override\n-    public PagedResult<AnyObjectTO> list(final String type, final AnyListQuery listQuery) {\n-        if (StringUtils.isBlank(type)) {\n-            return super.list(listQuery);\n+            throw new BadRequestException(SpecialAttr.TYPE.toString() + \" is required in the FIQL string\");\n         }\n \n-        AnySearchQuery searchQuery = new AnySearchQuery();\n-        searchQuery.setFiql(new AnyObjectFiqlSearchConditionBuilder(type).query());\n-        searchQuery.setDetails(listQuery.getDetails());\n-        searchQuery.setOrderBy(listQuery.getOrderBy());\n-        searchQuery.setPage(listQuery.getPage());\n-        searchQuery.setSize(listQuery.getSize());\n-        searchQuery.setRealm(listQuery.getRealm());\n-\n-        return search(searchQuery);\n+        return super.search(anyQuery);\n     }\n \n }"},{"sha":"50ef08191ea1a1157f5b728474786bac8fefe40f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -22,9 +22,7 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n@@ -54,11 +52,6 @@ public List<GroupTO> own() {\n         return logic.own();\n     }\n \n-    @Override\n-    public PagedResult<GroupTO> list(final AnyListQuery listQuery) {\n-        return super.list(listQuery);\n-    }\n-\n     @Override\n     public ExecTO bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n         return logic.bulkMembersAction(key, actionType);"},{"sha":"fe33390232258577a94cb7f092f8c09608a9a54c","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -21,10 +21,8 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.UserLogic;\n@@ -49,11 +47,6 @@ protected UserPatch newPatch(final String key) {\n         return patch;\n     }\n \n-    @Override\n-    public PagedResult<UserTO> list(final AnyListQuery listQuery) {\n-        return super.list(listQuery);\n-    }\n-\n     @Override\n     public Response create(final UserTO userTO, final boolean storePassword) {\n         ProvisioningResult<UserTO> created = logic.create(userTO, storePassword, isNullPriorityAsync());"},{"sha":"3e9c98d2e60d9359f042275942d2dba2125facc1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -27,6 +27,7 @@\n import java.util.Set;\n import java.util.UUID;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n@@ -39,7 +40,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -123,8 +124,10 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        PagedResult<AnyObjectTO> anyObjectTOs = anyObjectService.list(\n-                \"PRINTER\", new AnyListQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n+        PagedResult<AnyObjectTO> anyObjectTOs = anyObjectService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").query()).\n+                build());\n         assertNotNull(anyObjectTOs);\n         assertTrue(anyObjectTOs.getResult().size() >= 2);\n         for (AnyObjectTO anyObjectTO : anyObjectTOs.getResult()) {"},{"sha":"864c582b36e3c9312b5196f176348a222487a941","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -68,7 +68,7 @@\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -206,8 +206,7 @@ public void testUserSearch() {\n         UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n                 getService(UserService.class);\n \n-        PagedResult<UserTO> matchingUsers = userService2.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService2.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"key\").query()).build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -220,8 +219,7 @@ public void testUserSearch() {\n         // 2. user assigned to role 4, with search entitlement on realm /even/two\n         UserService userService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(UserService.class);\n \n-        matchingUsers = userService3.search(\n-                new AnySearchQuery.Builder().realm(\"/even/two\").\n+        matchingUsers = userService3.search(new AnyQuery.Builder().realm(\"/even/two\").\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query()).build());\n         assertNotNull(matchingUsers);\n         assertTrue(IterableUtils.matchesAll(matchingUsers.getResult(), new Predicate<UserTO>() {"},{"sha":"f870b454424f4ea9f4ea1bbbec373601fbc56b91","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -84,8 +84,7 @@\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -171,7 +170,7 @@ public void delete() {\n     @Test\n     public void list() {\n         PagedResult<GroupTO> groupTOs =\n-                groupService.list(new AnyListQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n+                groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(groupTOs);\n         assertTrue(groupTOs.getResult().size() >= 8);\n         for (GroupTO groupTO : groupTOs.getResult()) {\n@@ -615,14 +614,14 @@ public void createWithMandatorySchema() {\n     public void anonymous() {\n         GroupService unauthenticated = clientFactory.create().getService(GroupService.class);\n         try {\n-            unauthenticated.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n+            unauthenticated.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         GroupService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(GroupService.class);\n-        assertFalse(anonymous.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build()).\n+        assertFalse(anonymous.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build()).\n                 getResult().isEmpty());\n     }\n "},{"sha":"6b83e2a8c05e035bfcde5133673fdd6575527a2c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -52,7 +52,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.FixMethodOrder;\n@@ -297,7 +297,7 @@ public boolean evaluate(final MappingItemTO object) {\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             // 5. verify that pulled user has\n-            PagedResult<UserTO> users = userService.search(new AnySearchQuery.Builder().\n+            PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().\n                     realm(\"/\").\n                     fiql(SyncopeClient.getUserSearchConditionBuilder().\n                             is(\"username\").equalTo(user.getUsername()).query()).build());"},{"sha":"d0cc322b46aa59adaa4f41686c3765fae868309d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -49,7 +49,7 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.PullMode;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DomainService;\n@@ -212,8 +212,7 @@ public void createResourceAndPull() {\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(status));\n \n             // verify that pulled user is found\n-            PagedResult<UserTO> matchingUsers = adminClient.getService(UserService.class).search(\n-                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+            PagedResult<UserTO> matchingUsers = adminClient.getService(UserService.class).search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"pullFromLDAP\").query()).\n                     build());\n             assertNotNull(matchingUsers);"},{"sha":"0f155c726db2f9c18ae6539936ba6d25786dffe9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":13,"deletions":17,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -66,7 +66,7 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -172,8 +172,7 @@ public void pull() throws Exception {\n \n         // -----------------------------\n         try {\n-            int usersPre = userService.list(\n-                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+            int usersPre = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPre);\n \n@@ -228,8 +227,7 @@ public boolean evaluate(final AttrTO attrTO) {\n             }\n \n             // check for pull results\n-            int usersPost = userService.list(\n-                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+            int usersPost = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     page(1).size(1).build()).getTotalCount();\n             assertNotNull(usersPost);\n             assertEquals(usersPre + 8, usersPost);\n@@ -303,8 +301,8 @@ public void reconcileFromDB() {\n      * Clean Syncope and LDAP resource status.\n      */\n     private void ldapCleanup() {\n-        PagedResult<GroupTO> matchingGroups = groupService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<GroupTO> matchingGroups = groupService.search(new AnyQuery.Builder().realm(\n+                SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n                 build());\n         if (matchingGroups.getSize() > 0) {\n@@ -318,7 +316,7 @@ private void ldapCleanup() {\n             }\n         }\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"pullFromLDAP\").query()).\n                 build());\n         if (matchingUsers.getSize() > 0) {\n@@ -345,16 +343,16 @@ public void reconcileFromLDAP() {\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n         // 2. verify that pulled group is found\n-        PagedResult<GroupTO> matchingGroups = groupService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<GroupTO> matchingGroups = groupService.search(new AnyQuery.Builder().realm(\n+                SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n                 build());\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.getResult().size());\n \n         // 3. verify that pulled user is found\n         PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"pullFromLDAP\").query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -379,8 +377,7 @@ public void reconcileFromLDAP() {\n         execProvisioningTask(taskService, \"1e419ca4-ea81-4493-a14f-28b90113686d\", 50, false);\n \n         // 4. verify that LDAP group membership is propagated as Syncope membership\n-        PagedResult<UserTO> members = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> members = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(groupTO.getKey()).query()).\n                 build());\n         assertNotNull(members);\n@@ -429,8 +426,8 @@ public boolean evaluate(final MappingItemTO object) {\n                     startsWith(PrefixMappingItemTransformer.PREFIX));\n \n             // 3. unlink any existing printer and delete from Syncope (printer is now only on external resource)\n-            PagedResult<AnyObjectTO> matchingPrinters = anyObjectService.search(\n-                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+            PagedResult<AnyObjectTO> matchingPrinters = anyObjectService.search(new AnyQuery.Builder().realm(\n+                    SyncopeConstants.ROOT_REALM).\n                     fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                             is(\"location\").equalTo(\"pull*\").query()).build());\n             assertTrue(matchingPrinters.getSize() > 0);\n@@ -448,8 +445,7 @@ public boolean evaluate(final MappingItemTO object) {\n \n             // 5. verify that printer was re-created in Syncope (implies that location does not start with given prefix,\n             // hence PrefixMappingItemTransformer was applied during pull)\n-            matchingPrinters = anyObjectService.search(\n-                    new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+            matchingPrinters = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                     fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                             is(\"location\").equalTo(\"pull*\").query()).build());\n             assertTrue(matchingPrinters.getSize() > 0);"},{"sha":"eefcfb485d79a23978c1bf49a744f039086a6ecb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":28,"deletions":55,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.FixMethodOrder;\n@@ -48,8 +48,7 @@ public class SearchITCase extends AbstractITCase {\n     @Test\n     public void searchUser() {\n         // LIKE\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).build());\n         assertNotNull(matchingUsers);\n@@ -60,8 +59,7 @@ public void searchUser() {\n         }\n \n         // ISNULL\n-        matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query()).build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -79,8 +77,7 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchByUsernameAndKey() {\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"username\").equalTo(\"rossini\").and(\"key\").lessThan(2).query()).build());\n         assertNotNull(matchingUsers);\n@@ -91,8 +88,7 @@ public void searchByUsernameAndKey() {\n \n     @Test\n     public void searchByGroupNameAndKey() {\n-        PagedResult<GroupTO> groups = groupService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().\n                         is(\"name\").equalTo(\"root\").and(\"key\").equalTo(\"37d15e4c-cdc1-460b-a591-8505c8133806\").\n                         query()).build());\n@@ -104,8 +100,7 @@ public void searchByGroupNameAndKey() {\n \n     @Test\n     public void searchByGroup() {\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         inGroups(\"37d15e4c-cdc1-460b-a591-8505c8133806\").query()).\n                 build());\n@@ -128,8 +123,7 @@ public void searchByDynGroup() {\n         group = createGroup(group).getAny();\n         assertNotNull(group);\n \n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -146,8 +140,7 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchByRole() {\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(\"Other\").query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -170,8 +163,7 @@ public void searchByDynRole() {\n         role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n         assertNotNull(role);\n \n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role.getKey()).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -188,8 +180,7 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchUserByResourceName() {\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().hasResources(RESOURCE_NAME_MAPPINGS2).query()).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -207,8 +198,7 @@ public boolean evaluate(final UserTO user) {\n     @Test\n     public void paginatedSearch() {\n         // LIKE\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"fullname\").equalTo(\"*o*\").and(\"fullname\").equalTo(\"*i*\").query()).page(1).size(2).build());\n         assertNotNull(matchingUsers);\n@@ -219,8 +209,7 @@ public void paginatedSearch() {\n         }\n \n         // ISNULL\n-        matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().isNull(\"loginDate\").query()).page(2).size(2).\n                 build());\n         assertNotNull(matchingUsers);\n@@ -230,8 +219,7 @@ public void paginatedSearch() {\n \n     @Test\n     public void searchByBooleanAnyCond() {\n-        PagedResult<GroupTO> groups = groupService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"show\").equalTo(\"true\").query()).build());\n         assertNotNull(groups);\n         assertFalse(groups.getResult().isEmpty());\n@@ -241,8 +229,7 @@ public void searchByBooleanAnyCond() {\n     public void searchByDate() {\n         clientFactory.create(\"bellini\", \"password\").self();\n \n-        PagedResult<UserTO> users = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         is(\"lastLoginDate\").lexicalNotBefore(\"2016-03-02 15:21:22\").\n                         and(\"username\").equalTo(\"bellini\").query()).\n@@ -254,8 +241,7 @@ public void searchByDate() {\n \n     @Test\n     public void searchByRelationshipAnyCond() {\n-        PagedResult<GroupTO> groups = groupService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().\n                         is(\"userOwner\").equalTo(\"823074dc-d280-436d-a7dd-07399fae48ec\").query()).build());\n         assertNotNull(groups);\n@@ -267,8 +253,7 @@ public void searchByRelationshipAnyCond() {\n \n     @Test\n     public void nested() {\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(\"((fullname==*o*,fullname==*i*);$resources!=ws-target-resource-1)\").page(1).size(2).build());\n         assertNotNull(matchingUsers);\n \n@@ -280,8 +265,7 @@ public void nested() {\n \n     @Test\n     public void searchByType() {\n-        PagedResult<AnyObjectTO> matching = anyObjectService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").query()).build());\n         assertNotNull(matching);\n \n@@ -290,8 +274,7 @@ public void searchByType() {\n             assertNotNull(printer);\n         }\n \n-        matching = anyObjectService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        matching = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"UNEXISTING\").query()).build());\n         assertNotNull(matching);\n \n@@ -300,8 +283,7 @@ public void searchByType() {\n \n     @Test\n     public void searchByRelationship() {\n-        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                         inRelationships(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\").query()).\n                 build());\n@@ -314,8 +296,7 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n             }\n         }));\n \n-        PagedResult<UserTO> users = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().\n                         inRelationships(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").query()).\n                 build());\n@@ -331,8 +312,7 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void searchByRelationshipType() {\n-        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                         inRelationshipTypes(\"neighborhood\").query()).\n                 build());\n@@ -352,8 +332,7 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n             }\n         }));\n \n-        PagedResult<UserTO> users = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().inRelationshipTypes(\"neighborhood\").query()).\n                 build());\n         assertNotNull(users);\n@@ -368,8 +347,7 @@ public boolean evaluate(final UserTO user) {\n \n     @Test\n     public void assignable() {\n-        PagedResult<GroupTO> groups = groupService.search(\n-                new AnySearchQuery.Builder().realm(\"/even/two\").page(1).size(1000).\n+        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(\"/even/two\").page(1).size(1000).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().isAssignable().\n                         and(\"name\").equalTo(\"*\").query()).\n                 build());\n@@ -389,8 +367,7 @@ public boolean evaluate(final GroupTO group) {\n             }\n         }));\n \n-        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n-                new AnySearchQuery.Builder().realm(\"/odd\").\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(\"/odd\").\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").isAssignable().\n                         and(\"name\").equalTo(\"*\").query()).\n                 build());\n@@ -406,8 +383,7 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n \n     @Test\n     public void orderBy() {\n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        PagedResult<UserTO> matchingUsers = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query()).\n                 orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build()).build());\n         assertNotNull(matchingUsers);\n@@ -420,20 +396,17 @@ public void orderBy() {\n \n     @Test\n     public void issueSYNCOPE768() {\n-        int usersWithNullable = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        int usersWithNullable = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"ctype\").nullValue().query()).build()).\n                 getTotalCount();\n         assertTrue(usersWithNullable > 0);\n \n-        int nonOrdered = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        int nonOrdered = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").notNullValue().query()).build()).\n                 getTotalCount();\n         assertTrue(nonOrdered > 0);\n \n-        int orderedByNullable = userService.search(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        int orderedByNullable = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").notNullValue().query()).\n                 orderBy(SyncopeClient.getOrderByClauseBuilder().asc(\"ctype\").build()).build()).\n                 getTotalCount();"},{"sha":"68714fd1119f5bb92730810f3fa6ee6155e02c40","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/649ba7743fd5fa8921722595244585d442b7c668/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=649ba7743fd5fa8921722595244585d442b7c668","patch":"@@ -87,7 +87,7 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n@@ -522,8 +522,8 @@ public void deleteByUsername() {\n \n     @Test\n     public void list() {\n-        PagedResult<UserTO> users = userService.list(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n+        PagedResult<UserTO> users = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(users);\n         assertFalse(users.getResult().isEmpty());\n \n@@ -534,8 +534,8 @@ public void list() {\n \n     @Test\n     public void paginatedList() {\n-        PagedResult<UserTO> users = userService.list(\n-                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).page(1).size(2).build());\n+        PagedResult<UserTO> users = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).page(1).size(2).build());\n         assertNotNull(users);\n         assertFalse(users.getResult().isEmpty());\n         assertEquals(2, users.getResult().size());\n@@ -544,13 +544,13 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = userService.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 page(2).size(2).build());\n         assertNotNull(users);\n         assertEquals(2, users.getPage());\n         assertEquals(2, users.getResult().size());\n \n-        users = userService.list(new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 page(100).size(2).build());\n         assertNotNull(users);\n         assertTrue(users.getResult().isEmpty());"}]}