{"sha":"2e74f5a0a93f4f10a52b091d730d8e0a80723742","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJlNzRmNWEwYTkzZjRmMTBhNTJiMDkxZDczMGQ4ZTBhODA3MjM3NDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-15T15:50:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-15T15:50:44Z"},"message":"[SYNCOPE-216] New conf parameter 'notificationjob.cronExpression' added; when not existing, NotificationJob runs according to Notification.DEFAULT_CRON_EXP; when provided as empty string, NotificationJob disabled; provided as non-empty string: NotificationJob runs according to the given value\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1398347 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"890b45a5dfa5fd3bcb8dc2c0d1af57611e0621de","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/890b45a5dfa5fd3bcb8dc2c0d1af57611e0621de"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2e74f5a0a93f4f10a52b091d730d8e0a80723742","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2e74f5a0a93f4f10a52b091d730d8e0a80723742","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2e74f5a0a93f4f10a52b091d730d8e0a80723742","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2e74f5a0a93f4f10a52b091d730d8e0a80723742/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b0fd21042ddf1afe7b12b2af6e45eeacbba72e1f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b0fd21042ddf1afe7b12b2af6e45eeacbba72e1f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b0fd21042ddf1afe7b12b2af6e45eeacbba72e1f"}],"stats":{"total":139,"additions":83,"deletions":56},"files":[{"sha":"4db488677564e49ba601baada179d9bf23d36787","filename":"console/src/main/java/org/apache/syncope/console/pages/ConfigurationModalPage.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e74f5a0a93f4f10a52b091d730d8e0a80723742/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e74f5a0a93f4f10a52b091d730d8e0a80723742/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java?ref=2e74f5a0a93f4f10a52b091d730d8e0a80723742","patch":"@@ -69,7 +69,6 @@ public ConfigurationModalPage(final PageReference callPageRef, final ModalWindow\n         final AjaxTextFieldPanel value = new AjaxTextFieldPanel(\"value\", \"value\", new PropertyModel(configurationTO,\n                 \"value\"));\n         form.add(value);\n-        value.addRequiredLabel();\n \n         submit = new IndicatingAjaxButton(\"apply\", new Model<String>(getString(\"submit\"))) {\n             private static final long serialVersionUID = -958724007591692537L;"},{"sha":"1cd8328422205627293390543478fce2e093f200","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":24,"deletions":8,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=2e74f5a0a93f4f10a52b091d730d8e0a80723742","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.init;\n \n+import java.text.ParseException;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -28,6 +29,7 @@\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n+import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.scheduling.AbstractTaskJob;\n@@ -68,6 +70,9 @@ public class JobInstanceLoader {\n     @Autowired\n     private ReportDAO reportDAO;\n \n+    @Autowired\n+    private ConfDAO confDAO;\n+\n     private DefaultListableBeanFactory getBeanFactory() {\n         ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n \n@@ -111,7 +116,9 @@ public static String getTriggerName(final String jobName) {\n         return \"Trigger_\" + jobName;\n     }\n \n-    private void registerJob(final String jobName, final Job jobInstance, final String cronExpression) throws Exception {\n+    private void registerJob(final String jobName, final Job jobInstance, final String cronExpression)\n+            throws SchedulerException, ParseException {\n+\n         synchronized (scheduler.getScheduler()) {\n             boolean jobAlreadyRunning = false;\n             for (JobExecutionContext jobCtx : (List<JobExecutionContext>) scheduler.getScheduler().\n@@ -155,7 +162,8 @@ private void registerJob(final String jobName, final Job jobInstance, final Stri\n         }\n     }\n \n-    public void registerJob(final Task task, final String jobClassName, final String cronExpression) throws Exception {\n+    public void registerJob(final Task task, final String jobClassName, final String cronExpression)\n+            throws ClassNotFoundException, SchedulerException, ParseException {\n \n         Class jobClass = Class.forName(jobClassName);\n         Job jobInstance = (Job) getBeanFactory().createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n@@ -182,8 +190,7 @@ public void registerJob(final Task task, final String jobClassName, final String\n         registerJob(getJobName(task), jobInstance, cronExpression);\n     }\n \n-    public void registerJob(final Report report) throws Exception {\n-\n+    public void registerJob(final Report report) throws SchedulerException, ParseException {\n         Job jobInstance = (Job) getBeanFactory().createBean(ReportJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE,\n                 false);\n         ((ReportJob) jobInstance).setReportId(report.getId());\n@@ -226,10 +233,19 @@ public void load() {\n         }\n \n         // 2. NotificationJob\n-        try {\n-            registerJob(null, NotificationJob.class.getName(), \"0 0/2 * * * ?\");\n-        } catch (Exception e) {\n-            LOG.error(\"While loading NotificationJob instance\", e);\n+        final String notificationJobCronExp =\n+                confDAO.find(\"notificationjob.cronExpression\", NotificationJob.DEFAULT_CRON_EXP).getValue();\n+        if (StringUtils.isBlank(notificationJobCronExp)) {\n+            LOG.debug(\"Empty value provided for NotificationJob's cron, not registering anything on Quartz\");\n+        } else {\n+            LOG.debug(\"NotificationJob's cron expression: {} - registering Quartz job and trigger\",\n+                    notificationJobCronExp);\n+\n+            try {\n+                registerJob(null, NotificationJob.class.getName(), notificationJobCronExp);\n+            } catch (Exception e) {\n+                LOG.error(\"While loading NotificationJob instance\", e);\n+            }\n         }\n \n         // 3. ReportJobs"},{"sha":"8767fe2bd4cff92fadb019fd97a786d11e05ee3e","filename":"core/src/main/java/org/apache/syncope/core/scheduling/NotificationJob.java","status":"modified","additions":39,"deletions":37,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java?ref=2e74f5a0a93f4f10a52b091d730d8e0a80723742","patch":"@@ -48,22 +48,24 @@\n  * @see NotificationTask\n  */\n public class NotificationJob implements StatefulJob {\n-    \n+\n     enum Status {\n-        \n+\n         SENT,\n         NOT_SENT\n-        \n+\n     }\n \n+    public static String DEFAULT_CRON_EXP = \"0 0/5 * * * ?\";\n+\n     /**\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJob.class);\n-    \n+\n     @Autowired\n     private AuditManager auditManager;\n-    \n+\n     @Autowired\n     private NotificationManager notificationManager;\n \n@@ -78,15 +80,15 @@ enum Status {\n      */\n     @Autowired\n     private ConfDAO confDAO;\n-    \n+\n     private String smtpHost;\n-    \n+\n     private int smtpPort;\n-    \n+\n     private String smtpUsername;\n-    \n+\n     private String smtpPassword;\n-    \n+\n     private void init() {\n         smtpHost = confDAO.find(\"smtp.host\", \"\").getValue();\n         smtpPort = 25;\n@@ -97,31 +99,31 @@ private void init() {\n         }\n         smtpUsername = confDAO.find(\"smtp.username\", \"\").getValue();\n         smtpPassword = confDAO.find(\"smtp.password\", \"\").getValue();\n-        \n+\n         LOG.debug(\"SMTP details fetched: {}:{} / {}:[PASSWORD_NOT_SHOWN]\",\n                 new Object[]{smtpHost, smtpPort, smtpUsername});\n     }\n-    \n+\n     public TaskExec executeSingle(final NotificationTask task) {\n         init();\n-        \n+\n         TaskExec execution = new TaskExec();\n         execution.setTask(task);\n         execution.setStartDate(new Date());\n-        \n+\n         if (StringUtils.isBlank(smtpHost) || StringUtils.isBlank(task.getSender())\n                 || StringUtils.isBlank(task.getSubject()) || task.getRecipients().isEmpty()\n                 || StringUtils.isBlank(task.getHtmlBody()) || StringUtils.isBlank(task.getTextBody())) {\n-            \n+\n             String message = \"Could not fetch all required information for \" + \"sending e-mails:\\n\" + smtpHost + \":\"\n                     + smtpPort + \"\\n\" + task.getRecipients() + \"\\n\" + task.getSender() + \"\\n\" + task.getSubject()\n                     + \"\\n\" + task.getHtmlBody() + \"\\n\" + task.getTextBody();\n             LOG.error(message);\n-            \n+\n             execution.setStatus(Status.NOT_SENT.name());\n-            \n+\n             if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n-                \n+\n                 execution.setMessage(message);\n             }\n         } else {\n@@ -130,7 +132,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         + task.getSender() + \"\\n\" + task.getSubject() + \"\\n\" + task.getHtmlBody() + \"\\n\"\n                         + task.getTextBody() + \"\\n\");\n             }\n-            \n+\n             for (String to : task.getRecipients()) {\n                 try {\n                     JavaMailSenderImpl sender = new JavaMailSenderImpl();\n@@ -143,18 +145,18 @@ public TaskExec executeSingle(final NotificationTask task) {\n                     if (StringUtils.isNotBlank(smtpPassword)) {\n                         sender.setPassword(smtpPassword);\n                     }\n-                    \n+\n                     MimeMessage message = sender.createMimeMessage();\n                     MimeMessageHelper helper = new MimeMessageHelper(message, true);\n                     helper.setTo(to);\n                     helper.setFrom(task.getSender());\n                     helper.setSubject(task.getSubject());\n                     helper.setText(task.getTextBody(), task.getHtmlBody());\n-                    \n+\n                     sender.send(message);\n-                    \n+\n                     execution.setStatus(Status.SENT.name());\n-                    \n+\n                     StringBuilder report = new StringBuilder();\n                     switch (task.getTraceLevel()) {\n                         case ALL:\n@@ -164,65 +166,65 @@ public TaskExec executeSingle(final NotificationTask task) {\n                                     append(task.getTextBody()).append('\\n').append('\\n').\n                                     append(task.getHtmlBody()).append('\\n');\n                             break;\n-                        \n+\n                         case SUMMARY:\n                             report.append(\"E-mail sent to \").append(to).append('\\n');\n                             break;\n-                        \n+\n                         case FAILURES:\n                         case NONE:\n                         default:\n                     }\n                     if (report.length() > 0) {\n                         execution.setMessage(report.toString());\n                     }\n-                    \n+\n                     auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.success,\n                             \"Successfully sent notification to \" + to);\n                 } catch (Exception e) {\n                     LOG.error(\"Could not send e-mail\", e);\n-                    \n+\n                     execution.setStatus(Status.NOT_SENT.name());\n                     StringWriter exceptionWriter = new StringWriter();\n                     exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n                     e.printStackTrace(new PrintWriter(exceptionWriter));\n-                    \n+\n                     if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n                         execution.setMessage(exceptionWriter.toString());\n                     }\n-                    \n+\n                     auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.failure,\n                             \"Could not send notification to \" + to, e);\n                 }\n-                \n+\n                 execution.setEndDate(new Date());\n             }\n         }\n-        \n+\n         if (hasToBeRegistered(execution)) {\n             execution = notificationManager.storeExec(execution);\n         } else {\n             notificationManager.setTaskExecuted(execution.getTask().getId());\n         }\n-        \n+\n         return execution;\n     }\n-    \n+\n     @Override\n     public void execute(final JobExecutionContext context)\n             throws JobExecutionException {\n-        \n+\n         LOG.debug(\"Waking up...\");\n-        \n+\n         for (NotificationTask task : taskDAO.findToExec(NotificationTask.class)) {\n             LOG.debug(\"Found notification task {} to be executed: starting...\", task);\n             executeSingle(task);\n             LOG.debug(\"Notification task {} executed\", task);\n         }\n-        \n+\n         LOG.debug(\"Sleeping again...\");\n     }\n-    \n+\n     private boolean hasToBeRegistered(final TaskExec execution) {\n         NotificationTask task = (NotificationTask) execution.getTask();\n "},{"sha":"35f45dd2c4eebdcba46208c65e26d00e779522bb","filename":"core/src/main/resources/content.xml","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=2e74f5a0a93f4f10a52b091d730d8e0a80723742","patch":"@@ -19,13 +19,18 @@ under the License.\n \n -->\n <dataset>\n-  <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n-  <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n-  <SyncopeConf confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n-  <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n   <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n   <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"SHA1\"/>\n-  <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"false\"/>\n+  <SyncopeConf confKey=\"smtp.host\" confValue=\"not-existing\"/>\n+  <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n+  <!-- notificationjob.cronExpression:\n+  + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n+  + provided as empty string: NotificationJob disabled\n+  + provided as non-empty string: NotificationJob runs according to the given value -->\n+  <SyncopeConf confKey=\"notificationjob.cronExpression\" confValue=\"0 0/5 * * * ?\"/>\n+  <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n+  <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n+  <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n     \n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"Global Sync Policy\" type=\"GLOBAL_SYNC\"\n           specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%2F%3E\"/>\n@@ -48,7 +53,7 @@ under the License.\n            mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n            conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n \n-    <!-- Authentication and authorization -->\n+  <!-- Authentication and authorization -->\n   <Entitlement name=\"SCHEMA_CREATE\"/>\n   <Entitlement name=\"SCHEMA_READ\"/>\n   <Entitlement name=\"SCHEMA_UPDATE\"/>"},{"sha":"ad75d310f004b5a6e1b73e376120476cb69671c0","filename":"core/src/test/resources/content.xml","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2e74f5a0a93f4f10a52b091d730d8e0a80723742/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=2e74f5a0a93f4f10a52b091d730d8e0a80723742","patch":"@@ -19,12 +19,17 @@ under the License.\n \n -->\n <dataset>\n-  <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n-  <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n-  <SyncopeConf confKey=\"smtp.host\" confValue=\"not-existing\"/>\n-  <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n   <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n   <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"SHA1\"/>\n+  <SyncopeConf confKey=\"smtp.host\" confValue=\"not-existing\"/>\n+  <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n+  <!-- notificationjob.cronExpression:\n+       + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n+       + provided as empty string: NotificationJob disabled\n+       + provided as non-empty string: NotificationJob runs according to the given value -->\n+  <SyncopeConf confKey=\"notificationjob.cronExpression\" confValue=\"\"/>\n+  <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n+  <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n \n   <!-- sample policies -->"}]}