{"sha":"34b611c4bc7b815e26047253f5c77cf8fd0716b8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0YjYxMWM0YmM3YjgxNWUyNjA0NzI1M2Y1Yzc3Y2Y4ZmQwNzE2Yjg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-04T15:57:52Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-04T15:57:52Z"},"message":"Bugfixes, again\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246425 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44c4a4e7887769442ba3c78eb0cecf1ee081c8d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/44c4a4e7887769442ba3c78eb0cecf1ee081c8d8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/34b611c4bc7b815e26047253f5c77cf8fd0716b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34b611c4bc7b815e26047253f5c77cf8fd0716b8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34b611c4bc7b815e26047253f5c77cf8fd0716b8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34b611c4bc7b815e26047253f5c77cf8fd0716b8/comments","author":null,"committer":null,"parents":[{"sha":"530e431fab812ce0adc46162d42f0ec80411c6a7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/530e431fab812ce0adc46162d42f0ec80411c6a7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/530e431fab812ce0adc46162d42f0ec80411c6a7"}],"stats":{"total":183,"additions":138,"deletions":45},"files":[{"sha":"242caf78bd3e3fecb8bfeddd36ebbd57102ba0fa","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -45,9 +47,8 @@ public class SyncopeRole extends AbstractAttributable {\n     private String name;\n     @ManyToOne(optional = true)\n     private SyncopeRole parent;\n-    @OneToMany(cascade = CascadeType.MERGE,\n-    fetch = FetchType.EAGER, mappedBy = \"syncopeRole\")\n-    private Set<Membership> memberships;\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeRole\")\n+    private List<Membership> memberships;\n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n     @OneToMany(cascade = CascadeType.ALL,\n@@ -60,7 +61,7 @@ public class SyncopeRole extends AbstractAttributable {\n     private boolean inheritDerivedAttributes;\n \n     public SyncopeRole() {\n-        memberships = new HashSet<Membership>();\n+        memberships = new ArrayList<Membership>();\n         entitlements = new HashSet<Entitlement>();\n         attributes = new HashSet<RoleAttribute>();\n         derivedAttributes = new HashSet<RoleDerivedAttribute>();\n@@ -110,11 +111,11 @@ public boolean removeMembership(Membership membership) {\n         return memberships.remove(membership);\n     }\n \n-    public Set<Membership> getMemberships() {\n+    public List<Membership> getMemberships() {\n         return memberships;\n     }\n \n-    public void setMemberships(Set<Membership> memberships) {\n+    public void setMemberships(List<Membership> memberships) {\n         this.memberships = memberships;\n     }\n "},{"sha":"2dd4c43294d00e4525ab67a904f142f2d79e85c4","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -16,9 +16,11 @@\n \n import java.security.KeyPair;\n import java.security.Security;\n+import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n@@ -59,9 +61,8 @@ public class SyncopeUser extends AbstractAttributable {\n     @Basic\n     @Lob\n     private byte[] password;\n-    @OneToMany(cascade = CascadeType.MERGE,\n-    fetch = FetchType.EAGER, mappedBy = \"syncopeUser\")\n-    private Set<Membership> memberships;\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeUser\")\n+    private List<Membership> memberships;\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<UserAttribute> attributes;\n@@ -78,7 +79,7 @@ public class SyncopeUser extends AbstractAttributable {\n     private Date tokenExpireTime;\n \n     public SyncopeUser() {\n-        memberships = new HashSet<Membership>();\n+        memberships = new ArrayList<Membership>();\n         attributes = new HashSet<UserAttribute>();\n         derivedAttributes = new HashSet<UserDerivedAttribute>();\n     }\n@@ -95,11 +96,11 @@ public boolean removeMembership(Membership membership) {\n         return memberships.remove(membership);\n     }\n \n-    public Set<Membership> getMemberships() {\n+    public List<Membership> getMemberships() {\n         return memberships;\n     }\n \n-    public void setMemberships(Set<Membership> memberships) {\n+    public void setMemberships(List<Membership> memberships) {\n         this.memberships = memberships;\n     }\n "},{"sha":"e87417121b2b67c15159b1d7ea433f50ce542823","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -70,7 +70,7 @@ public Membership save(Membership membership) {\n     @Transactional\n     public void delete(Long id) {\n         Membership membership = find(id);\n-        if (id == null) {\n+        if (membership == null) {\n             return;\n         }\n "},{"sha":"b1ebc5c94caaec96119747e00f817f52c0451d8e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -174,7 +174,7 @@ public void delete(Long id) {\n \n             entityManager.remove(membership);\n         }\n-        role.setMemberships(Collections.EMPTY_SET);\n+        role.setMemberships(Collections.EMPTY_LIST);\n \n         for (Entitlement entitlement : role.getEntitlements()) {\n             entitlement.removeRole(role);"},{"sha":"c74b1cdf48a33e2fcbe78a4bc887e8559427060e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -106,7 +106,7 @@ public void delete(Long id) {\n \n             entityManager.remove(membership);\n         }\n-        user.setMemberships(Collections.EMPTY_SET);\n+        user.setMemberships(Collections.EMPTY_LIST);\n \n         entityManager.remove(user);\n     }"},{"sha":"456839730194cd7e4435c5286d56b451875e3190","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":32,"deletions":13,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -74,6 +74,26 @@ public class UserController extends AbstractController {\n     @Autowired\n     private PropagationManager propagationManager;\n \n+    private Integer findWorkflowAction(Long workflowEntryId,\n+            String actionName) {\n+\n+        WorkflowDescriptor workflowDescriptor =\n+                userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);\n+\n+        int[] actions = userWorkflow.getAvailableActions(workflowEntryId, null);\n+\n+        Integer actionId = null;\n+        for (int i = 0; i < actions.length && actionId == null; i++) {\n+            if (actionName.equals(\n+                    workflowDescriptor.getAction(actions[i]).getName())) {\n+\n+                actionId = actions[i];\n+            }\n+        }\n+\n+        return actionId;\n+    }\n+\n     public SyncopeUser doExecuteAction(String actionName, UserTO userTO,\n             Map<String, Object> moreInputs)\n             throws WorkflowException, NotFoundException {\n@@ -92,19 +112,8 @@ public SyncopeUser doExecuteAction(String actionName, UserTO userTO,\n         }\n         inputs.put(Constants.SYNCOPE_USER, syncopeUser);\n \n-        WorkflowDescriptor workflowDescriptor =\n-                userWorkflow.getWorkflowDescriptor(Constants.USER_WORKFLOW);\n-\n-        int[] actions = userWorkflow.getAvailableActions(\n-                syncopeUser.getWorkflowEntryId(), inputs);\n-        Integer actionId = null;\n-        for (int i = 0; i < actions.length && actionId == null; i++) {\n-            if (actionName.equals(\n-                    workflowDescriptor.getAction(actions[i]).getName())) {\n-\n-                actionId = actions[i];\n-            }\n-        }\n+        Integer actionId = findWorkflowAction(syncopeUser.getWorkflowEntryId(),\n+                actionName);\n         if (actionId == null) {\n             throw new NotFoundException(actionName);\n         }\n@@ -328,6 +337,16 @@ public UserTO create(HttpServletResponse response,\n         if (wie != null) {\n             switch (wie.getExceptionOperation()) {\n                 case OVERWRITE:\n+                    Integer resetActionId = findWorkflowAction(\n+                            wie.getWorkflowEntryId(), Constants.ACTION_RESET);\n+                    if (resetActionId != null) {\n+                        UserTO localUserTO = new UserTO();\n+                        localUserTO.setId(wie.getSyncopeUserId());\n+\n+                        doExecuteAction(Constants.ACTION_RESET,\n+                                localUserTO, null);\n+                    }\n+\n                     UserMod overwriteMod = userTO.buildUserMod();\n                     overwriteMod.setId(wie.getSyncopeUserId());\n "},{"sha":"505eba48db259e7c184813e91179ecf904db5b64","filename":"core/src/main/java/org/syncope/core/workflow/AbstractStoreAttributeValue.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -29,6 +29,8 @@\n abstract class AbstractStoreAttributeValue extends OSWorkflowComponent\n         implements FunctionProvider {\n \n+    protected AttributableUtil attributableUtil;\n+\n     protected AbstractAttribute getAttribute(Map transientVars, Map args)\n             throws WorkflowException {\n \n@@ -42,7 +44,6 @@ protected AbstractAttribute getAttribute(Map transientVars, Map args)\n             kind = Constants.SYNCOPE_USER;\n         }\n \n-        AttributableUtil attributableUtil = null;\n         AbstractAttributable attributable = null;\n         if (Constants.SYNCOPE_USER.equals(kind)) {\n             attributableUtil = AttributableUtil.USER;"},{"sha":"290ea37e9638346a74243d33efa0ebac82c0eb53","filename":"core/src/main/java/org/syncope/core/workflow/Constants.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -18,8 +18,9 @@ public class Constants {\n \n     final public static String ACTION_ACTIVATE = \"activate\";\n     final public static String ACTION_GENERATE_TOKEN = \"generateToken\";\n-    final public static String ACTION_VERIFY_TOKEN = \"verifyToken\";\n+    final public static String ACTION_RESET = \"reset\";\n     final public static String ACTION_UPDATE = \"update\";\n+    final public static String ACTION_VERIFY_TOKEN = \"verifyToken\";\n     final public static String ENTRY = \"entry\";\n     final public static String SYNCOPE_USER = \"syncopeUser\";\n     final public static String SYNCOPE_ROLE = \"syncopeRole\";"},{"sha":"a97e1f9f7760a1fb912d901a2f684abeac6f25db","filename":"core/src/main/java/org/syncope/core/workflow/StoreDate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -20,7 +20,7 @@\n import java.util.Date;\n import java.util.Map;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n public class StoreDate extends AbstractStoreAttributeValue {\n \n@@ -30,7 +30,7 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n \n         AbstractAttribute attribute = getAttribute(transientVars, args);\n \n-        UserAttributeValue date = new UserAttributeValue();\n+        AbstractAttributeValue date = attributableUtil.newAttributeValue();\n         date.setDateValue(new Date());\n         date.setAttribute(attribute);\n         if (attribute.getSchema().isMultivalue()) {"},{"sha":"0a1ff23c5edd3e088d4b548500d50bb962fae7b6","filename":"core/src/main/java/org/syncope/core/workflow/StoreText.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -19,7 +19,7 @@\n import java.util.Collections;\n import java.util.Map;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n public class StoreText extends AbstractStoreAttributeValue {\n \n@@ -34,7 +34,8 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n             throw new WorkflowException(\"Missing text\");\n         }\n \n-        UserAttributeValue textAttributeValue = new UserAttributeValue();\n+        AbstractAttributeValue textAttributeValue =\n+                attributableUtil.newAttributeValue();\n         textAttributeValue.setStringValue(text);\n         textAttributeValue.setAttribute(attribute);\n         if (attribute.getSchema().isMultivalue()) {"},{"sha":"0e731c2a360df13ecf75b82014c6681dc54c2e31","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeUserDAOTest.java","status":"modified","additions":27,"deletions":10,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -20,23 +20,16 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.to.LeafSearchCondition;\n+import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Transactional\n public class SyncopeUserDAOTest extends AbstractTest {\n \n     @Autowired\n-    SyncopeUserDAO syncopeUserDAO;\n-    @Autowired\n-    AttributeDAO attributeDAO;\n-    @Autowired\n-    SchemaDAO attributeSchemaDAO;\n-    @Autowired\n-    SyncopeRoleDAO syncopeRoleDAO;\n+    private SyncopeUserDAO syncopeUserDAO;\n \n     @Test\n     public final void findAll() {\n@@ -65,6 +58,30 @@ public final void save() {\n         assertNotNull(\"expected save to work\", actual);\n     }\n \n+    @Test\n+    public final void search() {\n+        LeafSearchCondition usernameLeafCond1 =\n+                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n+        usernameLeafCond1.setSchema(\"username\");\n+        usernameLeafCond1.setExpression(\"%o%\");\n+\n+        LeafSearchCondition usernameLeafCond2 =\n+                new LeafSearchCondition(LeafSearchCondition.Type.LIKE);\n+        usernameLeafCond2.setSchema(\"username\");\n+        usernameLeafCond2.setExpression(\"%i%\");\n+\n+        NodeSearchCondition searchCondition =\n+                NodeSearchCondition.getAndSearchCondition(\n+                NodeSearchCondition.getLeafCondition(usernameLeafCond1),\n+                NodeSearchCondition.getLeafCondition(usernameLeafCond2));\n+\n+        assertTrue(searchCondition.checkValidity());\n+\n+        List<SyncopeUser> users = syncopeUserDAO.search(searchCondition);\n+        assertNotNull(users);\n+        assertFalse(users.isEmpty());\n+    }\n+\n     @Test\n     public final void delete() {\n         SyncopeUser user = syncopeUserDAO.find(3L);"},{"sha":"35c6306d6c83d12c4921f6d9d98cc52612e6d3b4","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/MembershipTest.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -0,0 +1,51 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class MembershipTest extends AbstractTest {\n+\n+    @Autowired\n+    private MembershipDAO membershipDAO;\n+\n+    @Test\n+    public final void test() {\n+        Membership membership = membershipDAO.find(4L);\n+        SyncopeUser user = membership.getSyncopeUser();\n+        SyncopeRole role = membership.getSyncopeRole();\n+\n+        membershipDAO.delete(4L);\n+\n+        membershipDAO.flush();\n+\n+        for (Membership m : user.getMemberships()) {\n+            assertTrue(m.getId() != 4L);\n+        }\n+        for (Membership m : role.getMemberships()) {\n+            assertTrue(m.getId() != 4L);\n+        }\n+    }\n+}"},{"sha":"769d9f0e20de15668c6e6d8fe9edbc192f65f919","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34b611c4bc7b815e26047253f5c77cf8fd0716b8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=34b611c4bc7b815e26047253f5c77cf8fd0716b8","patch":"@@ -36,6 +36,7 @@\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.workflow.Constants;\n import org.syncope.types.SyncopeClientExceptionType;\n \n public class UserTestITCase extends AbstractTestITCase {\n@@ -113,7 +114,7 @@ public void create() {\n                 + \"user/actions/{userId}\", WorkflowActionsTO.class,\n                 newUserTO.getId());\n         assertTrue(workflowActions.getActions().equals(\n-                Collections.singleton(\"activate\")));\n+                Collections.singleton(Constants.ACTION_ACTIVATE)));\n \n         // 2. activate user\n         newUserTO = restTemplate.postForObject(BASE_URL + \"user/activate\","}]}