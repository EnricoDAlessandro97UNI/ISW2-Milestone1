{"sha":"d4ba6713168c4109ed02dca656bd8feae2c0b38c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ0YmE2NzEzMTY4YzQxMDllZDAyZGNhNjU2YmQ4ZmVhZTJjMGIzOGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-01T17:04:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-01T17:04:04Z"},"message":"Some refactoring and unification\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1295675 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f5ee94c0664459628eec272744426171e5e2b77","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1f5ee94c0664459628eec272744426171e5e2b77"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d4ba6713168c4109ed02dca656bd8feae2c0b38c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4ba6713168c4109ed02dca656bd8feae2c0b38c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4ba6713168c4109ed02dca656bd8feae2c0b38c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4ba6713168c4109ed02dca656bd8feae2c0b38c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3688df9e7278acdb08f8b098043163321e895630","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3688df9e7278acdb08f8b098043163321e895630","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3688df9e7278acdb08f8b098043163321e895630"}],"stats":{"total":447,"additions":246,"deletions":201},"files":[{"sha":"129a5860efc0b0c361a2444557e0678568d1a836","filename":"client/src/main/java/org/syncope/annotation/FormAttributeField.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fannotation%2FFormAttributeField.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.syncope.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.syncope.types.IntMappingType;\n+\n+@Target({ElementType.FIELD})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface FormAttributeField {\n+\n+    IntMappingType schema() default IntMappingType.UserSchema;\n+}"},{"sha":"5e6c6054ad05ad07a156057280307ccea8eb0cc0","filename":"client/src/main/java/org/syncope/annotation/SchemaList.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fannotation%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fannotation%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fannotation%2FSchemaList.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.syncope.client;\n+package org.syncope.annotation;\n \n import java.lang.annotation.Retention;\n import static java.lang.annotation.RetentionPolicy.RUNTIME;","previous_filename":"client/src/main/java/org/syncope/client/SchemaList.java"},{"sha":"ce306c3ec8e16fc2e40a714a51ca2b91015952c1","filename":"client/src/main/java/org/syncope/client/report/AbstractReportletConf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FAbstractReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FAbstractReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FAbstractReportletConf.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -20,8 +20,7 @@\n \n import org.syncope.client.AbstractBaseBean;\n \n-public abstract class AbstractReportletConf extends AbstractBaseBean\n-        implements ReportletConf {\n+public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n \n     private static final long serialVersionUID = -6130008602014516608L;\n "},{"sha":"be3f0c74409be93605f99dacc53dd75bd0f59b58","filename":"client/src/main/java/org/syncope/client/report/ReportletConf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FReportletConf.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -20,8 +20,7 @@\n \n import org.codehaus.jackson.annotate.JsonTypeInfo;\n \n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,\n-include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n public interface ReportletConf {\n \n     /**"},{"sha":"1a3595a9efc4811a74f3d2ea4f222061cbcc6dcb","filename":"client/src/main/java/org/syncope/client/report/UserReportletConf.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FUserReportletConf.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -21,7 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.codehaus.jackson.annotate.JsonIgnore;\n+import org.syncope.annotation.FormAttributeField;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.types.IntMappingType;\n \n public class UserReportletConf extends AbstractReportletConf {\n \n@@ -45,10 +47,13 @@ public enum Feature {\n \n     private NodeCond matchingCond;\n \n+    @FormAttributeField(schema = IntMappingType.UserSchema)\n     private List<String> attrs;\n \n+    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\n     private List<String> derAttrs;\n \n+    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n     private List<String> virAttrs;\n \n     private List<Feature> features;"},{"sha":"25243475e253aad87bf4a06d4ad4a1d3bc608e6d","filename":"client/src/main/java/org/syncope/types/AccountPolicySpec.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -20,7 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.syncope.client.SchemaList;\n+import org.syncope.annotation.SchemaList;\n \n public class AccountPolicySpec extends AbstractPolicySpec {\n "},{"sha":"2f405c49b8f68813de69a0f825e6053ff101d448","filename":"client/src/main/java/org/syncope/types/AttributableType.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributableType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributableType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributableType.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -18,10 +18,10 @@\n  */\n package org.syncope.types;\n \n-/**\n- * Mapping type.\n- */\n-public enum Entity {\n+public enum AttributableType {\n+\n+    USER,\n+    ROLE,\n+    MEMBERSHIP;\n \n-    USER, ROLE, MEMBERSHIP;\n }","previous_filename":"client/src/main/java/org/syncope/types/Entity.java"},{"sha":"5640f19ee34c70032c04a0ffb7afa7412f8cf634","filename":"client/src/main/java/org/syncope/types/IntMappingType.java","status":"modified","additions":29,"deletions":27,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -29,43 +29,43 @@ public enum IntMappingType {\n     // -------------------------\n     // User attribute types (the same in UserMappingType)\n     // -------------------------\n-    UserSchema(Entity.USER),\n-    UserDerivedSchema(Entity.USER),\n-    UserVirtualSchema(Entity.USER),\n-    SyncopeUserId(Entity.USER),\n-    Password(Entity.USER),\n-    Username(Entity.USER),\n+    UserSchema(AttributableType.USER),\n+    UserDerivedSchema(AttributableType.USER),\n+    UserVirtualSchema(AttributableType.USER),\n+    SyncopeUserId(AttributableType.USER),\n+    Password(AttributableType.USER),\n+    Username(AttributableType.USER),\n     // -------------------------\n     // Role attribute types (the same in RoleMappingType)\n     // -------------------------\n-    RoleSchema(Entity.ROLE),\n-    RoleDerivedSchema(Entity.ROLE),\n-    RoleVirtualSchema(Entity.ROLE),\n+    RoleSchema(AttributableType.ROLE),\n+    RoleDerivedSchema(AttributableType.ROLE),\n+    RoleVirtualSchema(AttributableType.ROLE),\n     // -------------------------\n     // Membership attribute types (the same in MembershipMappingType)\n     // -------------------------\n-    MembershipSchema(Entity.MEMBERSHIP),\n-    MembershipDerivedSchema(Entity.MEMBERSHIP),\n-    MembershipVirtualSchema(Entity.MEMBERSHIP);\n+    MembershipSchema(AttributableType.MEMBERSHIP),\n+    MembershipDerivedSchema(AttributableType.MEMBERSHIP),\n+    MembershipVirtualSchema(AttributableType.MEMBERSHIP);\n \n-    private Entity entity;\n+    private AttributableType attributableType;\n \n-    private IntMappingType(final Entity entity) {\n-        this.entity = entity;\n+    private IntMappingType(final AttributableType attributableType) {\n+        this.attributableType = attributableType;\n     }\n \n-    public Entity getEntity() {\n-        return entity;\n+    public AttributableType getAttributableType() {\n+        return attributableType;\n     }\n \n     /**\n-     * Get attribute types for a certain entity.\n+     * Get attribute types for a certain attributable type.\n      *\n-     * @param entity entity.\n+     * @param attributableType attributable type\n      * @return set of attribute types.\n      */\n-    public static EnumSet getAttributeTypes(final Entity entity) {\n-        switch (entity) {\n+    public static EnumSet getAttributeTypes(final AttributableType attributableType) {\n+        switch (attributableType) {\n             case ROLE:\n                 return EnumSet.allOf(RoleMappingType.class);\n             case MEMBERSHIP:\n@@ -76,16 +76,15 @@ public static EnumSet getAttributeTypes(final Entity entity) {\n     }\n \n     /**\n-     * Check if attribute type belongs to the specified entity set.\n+     * Check if attribute type belongs to the specified attributable type set.\n      *\n-     * @param entity entity.\n+     * @param attributableType attributable type.\n      * @param type attrybute type.\n-     * @return true if attribute type belongs to the specified entity set.\n+     * @return true if attribute type belongs to the specified attributable type set.\n      */\n-    public static boolean contains(\n-            final Entity entity, final String type) {\n+    public static boolean contains(final AttributableType attributableType, final String type) {\n \n-        switch (entity) {\n+        switch (attributableType) {\n             case ROLE:\n                 return RoleMappingType.valueOf(type) != null;\n             case MEMBERSHIP:\n@@ -106,6 +105,7 @@ enum UserMappingType {\n         SyncopeUserId,\n         Password,\n         Username;\n+\n     }\n \n     /**\n@@ -116,6 +116,7 @@ private enum RoleMappingType {\n         RoleSchema,\n         RoleDerivedSchema,\n         RoleVirtualSchema;\n+\n     }\n \n     /**\n@@ -126,5 +127,6 @@ private enum MembershipMappingType {\n         MembershipSchema,\n         MembershipDerivedSchema,\n         MembershipVirtualSchema;\n+\n     }\n }"},{"sha":"2a5011f047a2f0369a95c445e907b141044e79a1","filename":"client/src/main/java/org/syncope/types/PasswordPolicySpec.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -20,7 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.syncope.client.SchemaList;\n+import org.syncope.annotation.SchemaList;\n \n public class PasswordPolicySpec extends AbstractPolicySpec {\n "},{"sha":"854468a6b4cce6f8990efca78e119fe78684dc1a","filename":"client/src/main/java/org/syncope/types/SyncPolicySpec.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -20,7 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.syncope.client.SchemaList;\n+import org.syncope.annotation.SchemaList;\n \n public class SyncPolicySpec extends AbstractPolicySpec {\n "},{"sha":"b97819ba71af3179258f800f340fcb923e2cafec","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/ReportValidator.java","status":"modified","additions":21,"deletions":4,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -19,9 +19,12 @@\n package org.syncope.core.persistence.validation.entity;\n \n import java.text.ParseException;\n+import java.util.HashSet;\n+import java.util.Set;\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.quartz.CronExpression;\n+import org.syncope.client.report.ReportletConf;\n import org.syncope.core.persistence.beans.Report;\n import org.syncope.types.EntityViolationType;\n \n@@ -33,6 +36,7 @@ public void initialize(final ReportCheck constraintAnnotation) {\n     }\n \n     @Override\n+    @SuppressWarnings(\"ResultOfObjectAllocationIgnored\")\n     public boolean isValid(final Report object,\n             final ConstraintValidatorContext context) {\n \n@@ -47,13 +51,26 @@ public boolean isValid(final Report object,\n                 isValid = false;\n \n                 context.disableDefaultConstraintViolation();\n-                context.buildConstraintViolationWithTemplate(\n-                        EntityViolationType.InvalidReport.name()).\n-                        addNode(object + \".cronExpression==\"\n-                        + object.getCronExpression()).addConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidReport.name()).\n+                        addNode(object + \".cronExpression==\" + object.getCronExpression()).\n+                        addConstraintViolation();\n             }\n         }\n \n+        Set<String> reportletNames = new HashSet<String>();\n+        for (ReportletConf conf : object.getReportletConfs()) {\n+            reportletNames.add(conf.getName());\n+        }\n+        if (reportletNames.size() != object.getReportletConfs().size()) {\n+            LOG.error(\"Reportlet name must be unique\");\n+            isValid = false;\n+\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidReport.name()).\n+                    addNode(object + \".reportletConfs with duplicate names\").\n+                    addConstraintViolation();\n+        }\n+\n         return isValid;\n     }\n }"},{"sha":"5c066a0abfb855c8fed4fe0724ed1ae5aeaf3e3c","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -80,6 +80,7 @@\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.util.JexlUtil;\n import org.syncope.core.workflow.WorkflowResult;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.IntMappingType;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationOperation;\n@@ -196,7 +197,7 @@ public List<PropagationTask> getCreateTaskIds(\n \n         SyncopeUser user = getSyncopeUser(wfResult.getResult().getKey());\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            userDataBinder.fillVirtual(user, vAttrs, AttributableUtil.USER);\n+            userDataBinder.fillVirtual(user, vAttrs, AttributableUtil.getInstance(AttributableType.USER));\n         }\n \n         final PropagationByResource propByRes = wfResult.getPropByRes();\n@@ -326,7 +327,7 @@ private List<PropagationTask> getUpdateTaskIds(\n                 user,\n                 vAttrsToBeRemoved == null ? Collections.EMPTY_SET : vAttrsToBeRemoved,\n                 vAttrsToBeUpdated == null ? Collections.EMPTY_SET : vAttrsToBeUpdated,\n-                AttributableUtil.USER);\n+                AttributableUtil.getInstance(AttributableType.USER));\n \n         if (propByRes != null && !propByRes.isEmpty()) {\n             localPropByRes.merge(propByRes);\n@@ -453,7 +454,7 @@ private Map.Entry<String, Attribute> prepareAttribute(\n \n         final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n \n-        switch (mapping.getIntMappingType().getEntity()) {\n+        switch (mapping.getIntMappingType().getAttributableType()) {\n             case USER:\n                 attributables.addAll(Collections.singleton(user));\n                 break;"},{"sha":"a7311e5492dec6bd27857367e78c91de48769ca1","filename":"core/src/main/java/org/syncope/core/rest/controller/ReportController.java","status":"modified","additions":45,"deletions":100,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -98,11 +98,8 @@ public class ReportController extends AbstractController {\n     private ResourcePatternResolver resResolver;\n \n     @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/create\")\n-    public ReportTO create(final HttpServletResponse response,\n-            @RequestBody final ReportTO reportTO) {\n-\n+    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n+    public ReportTO create(final HttpServletResponse response, @RequestBody final ReportTO reportTO) {\n         LOG.debug(\"Creating report \" + reportTO);\n \n         Report report = new Report();\n@@ -112,14 +109,10 @@ public ReportTO create(final HttpServletResponse response,\n         try {\n             jobInstanceLoader.registerJob(report);\n         } catch (Exception e) {\n-            LOG.error(\"While registering quartz job for report \"\n-                    + report.getId(), e);\n+            LOG.error(\"While registering quartz job for report \" + report.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.Scheduling);\n+            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n             throw scce;\n@@ -130,8 +123,7 @@ public ReportTO create(final HttpServletResponse response,\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/update\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public ReportTO update(@RequestBody final ReportTO reportTO)\n             throws NotFoundException {\n \n@@ -151,11 +143,8 @@ public ReportTO update(@RequestBody final ReportTO reportTO)\n             LOG.error(\"While registering quartz job for report \"\n                     + report.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.Scheduling);\n+            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n             throw scce;\n@@ -165,15 +154,13 @@ public ReportTO update(@RequestBody final ReportTO reportTO)\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/count\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/count\")\n     public ModelAndView count() {\n         return new ModelAndView().addObject(reportDAO.count());\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/list\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     public List<ReportTO> list() {\n         List<Report> reports = reportDAO.findAll();\n         List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n@@ -185,11 +172,8 @@ public List<ReportTO> list() {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/list/{page}/{size}\")\n-    public List<ReportTO> list(@PathVariable(\"page\") final int page,\n-            @PathVariable(\"size\") final int size) {\n-\n+    @RequestMapping(method = RequestMethod.GET, value = \"/list/{page}/{size}\")\n+    public List<ReportTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"size\") final int size) {\n         List<Report> reports = reportDAO.findAll(page, size);\n         List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n         for (Report report : reports) {\n@@ -200,12 +184,10 @@ public List<ReportTO> list(@PathVariable(\"page\") final int page,\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/execution/list\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/list\")\n     public List<ReportExecTO> listExecutions() {\n         List<ReportExec> executions = reportExecDAO.findAll();\n-        List<ReportExecTO> executionTOs =\n-                new ArrayList<ReportExecTO>(executions.size());\n+        List<ReportExecTO> executionTOs = new ArrayList<ReportExecTO>(executions.size());\n         for (ReportExec execution : executions) {\n             executionTOs.add(binder.getReportExecTO(execution));\n         }\n@@ -214,40 +196,29 @@ public List<ReportExecTO> listExecutions() {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/reportletClasses\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/reportletClasses\")\n     public ModelAndView getReportletClasses() {\n-        CachingMetadataReaderFactory cachingMetadataReaderFactory =\n-                new CachingMetadataReaderFactory();\n+        CachingMetadataReaderFactory cachingMetadataReaderFactory = new CachingMetadataReaderFactory();\n \n         Set<String> reportletClasses = new HashSet<String>();\n         try {\n-            for (Resource resource : resResolver.getResources(\n-                    \"classpath*:**/*.class\")) {\n-\n-                ClassMetadata metadata =\n-                        cachingMetadataReaderFactory.getMetadataReader(\n-                        resource).getClassMetadata();\n-                if (ArrayUtils.contains(metadata.getInterfaceNames(),\n-                        Reportlet.class.getName())\n-                        || AbstractReportlet.class.getName().equals(\n-                        metadata.getSuperClassName())) {\n+            for (Resource resource : resResolver.getResources(\"classpath*:**/*.class\")) {\n+                ClassMetadata metadata = cachingMetadataReaderFactory.getMetadataReader(resource).getClassMetadata();\n+                if (ArrayUtils.contains(metadata.getInterfaceNames(), Reportlet.class.getName())\n+                        || AbstractReportlet.class.getName().equals(metadata.getSuperClassName())) {\n \n                     try {\n                         Class jobClass = Class.forName(metadata.getClassName());\n                         if (!Modifier.isAbstract(jobClass.getModifiers())) {\n-\n                             reportletClasses.add(jobClass.getName());\n                         }\n                     } catch (ClassNotFoundException e) {\n-                        LOG.error(\"Could not load class {}\",\n-                                metadata.getClassName(), e);\n+                        LOG.error(\"Could not load class {}\", metadata.getClassName(), e);\n                     }\n                 }\n             }\n         } catch (IOException e) {\n-            LOG.error(\"While searching for class implementing {}\",\n-                    Reportlet.class.getName(), e);\n+            LOG.error(\"While searching for class implementing {}\", Reportlet.class.getName(), e);\n         }\n \n         ModelAndView result = new ModelAndView();\n@@ -256,8 +227,7 @@ public ModelAndView getReportletClasses() {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/read/{reportId}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/{reportId}\")\n     public ReportTO read(@PathVariable(\"reportId\") final Long reportId)\n             throws NotFoundException {\n \n@@ -270,11 +240,9 @@ public ReportTO read(@PathVariable(\"reportId\") final Long reportId)\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/execution/read/{executionId}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\n     @Transactional(readOnly = true)\n-    public ReportExecTO readExecution(\n-            @PathVariable(\"executionId\") final Long executionId)\n+    public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long executionId)\n             throws NotFoundException {\n \n         ReportExec execution = reportExecDAO.find(executionId);\n@@ -286,28 +254,21 @@ public ReportExecTO readExecution(\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/execution/export/{executionId}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/export/{executionId}\")\n     @Transactional(readOnly = true)\n-    public void exportExecutionResult(\n-            final HttpServletResponse response,\n+    public void exportExecutionResult(final HttpServletResponse response,\n             @PathVariable(\"executionId\") final Long executionId,\n-            @RequestParam(value = \"fmt\",\n-            required = false) final ReportExecExportFormat fmt)\n+            @RequestParam(value = \"fmt\", required = false) final ReportExecExportFormat fmt)\n             throws NotFoundException {\n \n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n-        if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus())\n-                || reportExec.getExecResult() == null) {\n-\n+        if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus()) || reportExec.getExecResult() == null) {\n             SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidReportExec);\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidReportExec);\n             sce.addElement(reportExec.getExecResult() == null\n                     ? \"No report data produced\"\n                     : \"Report did not run successfully\");\n@@ -322,12 +283,10 @@ public void exportExecutionResult(\n \n         response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n         response.addHeader(\"Content-Disposition\",\n-                \"attachment; filename=\" + reportExec.getReport().getName()\n-                + \".\" + format.name().toLowerCase());\n+                \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().toLowerCase());\n \n         // streaming SAX handler from a compressed byte array stream\n-        ByteArrayInputStream bais =\n-                new ByteArrayInputStream(reportExec.getExecResult());\n+        ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());\n         ZipInputStream zis = new ZipInputStream(bais);\n         try {\n             // a single ZipEntry in the ZipInputStream (see ReportJob)\n@@ -345,30 +304,24 @@ public void exportExecutionResult(\n \n             switch (format) {\n                 case HTML:\n-                    XSLTTransformer xsl2html = new XSLTTransformer(\n-                            getClass().getResource(\"/report/report2html.xsl\"));\n+                    XSLTTransformer xsl2html = new XSLTTransformer(getClass().getResource(\"/report/report2html.xsl\"));\n                     xsl2html.setParameters(parameters);\n                     pipeline.addComponent(xsl2html);\n-                    pipeline.addComponent(\n-                            XMLSerializer.createXHTMLSerializer());\n+                    pipeline.addComponent(XMLSerializer.createXHTMLSerializer());\n                     break;\n \n                 case PDF:\n-                    XSLTTransformer xsl2pdf = new XSLTTransformer(\n-                            getClass().getResource(\"/report/report2fo.xsl\"));\n+                    XSLTTransformer xsl2pdf = new XSLTTransformer(getClass().getResource(\"/report/report2fo.xsl\"));\n                     xsl2pdf.setParameters(parameters);\n                     pipeline.addComponent(xsl2pdf);\n-                    pipeline.addComponent(\n-                            new FopSerializer(MimeConstants.MIME_PDF));\n+                    pipeline.addComponent(new FopSerializer(MimeConstants.MIME_PDF));\n                     break;\n \n                 case RTF:\n-                    XSLTTransformer xsl2rtf = new XSLTTransformer(\n-                            getClass().getResource(\"/report/report2fo.xsl\"));\n+                    XSLTTransformer xsl2rtf = new XSLTTransformer(getClass().getResource(\"/report/report2fo.xsl\"));\n                     xsl2rtf.setParameters(parameters);\n                     pipeline.addComponent(xsl2rtf);\n-                    pipeline.addComponent(\n-                            new FopSerializer(MimeConstants.MIME_RTF));\n+                    pipeline.addComponent(new FopSerializer(MimeConstants.MIME_RTF));\n                     break;\n \n                 case XML:\n@@ -394,8 +347,7 @@ public void exportExecutionResult(\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/execute/{reportId}\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/execute/{reportId}\")\n     public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId)\n             throws NotFoundException {\n \n@@ -408,17 +360,12 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId)\n             jobInstanceLoader.registerJob(report);\n \n             JobDataMap map = new JobDataMap();\n-            scheduler.getScheduler().triggerJob(\n-                    JobInstanceLoader.getJobName(report),\n-                    Scheduler.DEFAULT_GROUP, map);\n+            scheduler.getScheduler().triggerJob(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP, map);\n         } catch (Exception e) {\n             LOG.error(\"While executing report {}\", report, e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.Scheduling);\n+            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n             throw scce;\n@@ -434,8 +381,7 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId)\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE,\n-    value = \"/delete/{reportId}\")\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{reportId}\")\n     public void delete(@PathVariable(\"reportId\") Long reportId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n@@ -450,8 +396,7 @@ public void delete(@PathVariable(\"reportId\") Long reportId)\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE,\n-    value = \"/execution/delete/{executionId}\")\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/execution/delete/{executionId}\")\n     public void deleteExecution(@PathVariable(\"executionId\") Long executionId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n "},{"sha":"063b1471f18357189fdab1f06e1691db8a037207","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -64,6 +64,7 @@\n import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.util.JexlUtil;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.PropagationOperation;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -621,7 +622,7 @@ protected PropagationByResource fill(\n         LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n \n         // 7. virtual attributes: for users this is delegated to  PropagationManager\n-        if (AttributableUtil.USER != attributableUtil) {\n+        if (AttributableType.USER != attributableUtil.getType()) {\n             fillVirtual(attributable,\n                     attributableMod.getVirtualAttributesToBeRemoved(),\n                     attributableMod.getVirtualAttributesToBeUpdated(),\n@@ -731,7 +732,7 @@ protected void fill(\n         }\n \n         // 3. virtual attributes: for users this is delegated to PropagationManager\n-        if (AttributableUtil.USER != attributableUtil) {\n+        if (AttributableType.USER != attributableUtil.getType()) {\n             fillVirtual(attributable, attributableTO.getVirtualAttributes(), attributableUtil);\n         }\n "},{"sha":"151f485e9808c2206fa1afaa3af8e57225de32a1","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -36,6 +36,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.propagation.PropagationByResource;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -96,7 +97,7 @@ public SyncopeRole create(final RoleTO roleTO)\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        fill(role, roleTO, AttributableUtil.ROLE, scce);\n+        fill(role, roleTO, AttributableUtil.getInstance(AttributableType.ROLE), scce);\n \n         // entitlements\n         Entitlement entitlement;\n@@ -201,7 +202,7 @@ public PropagationByResource update(SyncopeRole role, RoleMod roleMod)\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        return fill(role, roleMod, AttributableUtil.ROLE, scce);\n+        return fill(role, roleMod, AttributableUtil.getInstance(AttributableType.ROLE), scce);\n     }\n \n     public RoleTO getRoleTO(SyncopeRole role) {"},{"sha":"85841efd15bc24427bee37442dd6ab5749d362dc","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -52,6 +52,7 @@\n import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.syncope.core.util.EntitlementUtil;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.CipherAlgorithm;\n import org.syncope.types.IntMappingType;\n import org.syncope.types.PasswordPolicySpec;\n@@ -172,13 +173,12 @@ public void create(final SyncopeUser user, final UserTO userTO)\n                     user.addMembership(membership);\n                 }\n \n-                fill(membership, membershipTO, AttributableUtil.MEMBERSHIP,\n-                        scce);\n+                fill(membership, membershipTO, AttributableUtil.getInstance(AttributableType.MEMBERSHIP), scce);\n             }\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        fill(user, userTO, AttributableUtil.USER, scce);\n+        fill(user, userTO, AttributableUtil.getInstance(AttributableType.USER), scce);\n \n         // set password\n         int passwordHistorySize = 0;\n@@ -268,7 +268,7 @@ public PropagationByResource update(final SyncopeUser user,\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(user, userMod, AttributableUtil.USER, scce));\n+        propByRes.merge(fill(user, userMod, AttributableUtil.getInstance(AttributableType.USER), scce));\n \n         // store the role ids of membership required to be added\n         Set<Long> membershipToBeAddedRoleIds = new HashSet<Long>();\n@@ -357,7 +357,8 @@ public PropagationByResource update(final SyncopeUser user,\n                     propByRes.addAll(PropagationOperation.UPDATE, role.getResourceNames());\n                 }\n \n-                propByRes.merge(fill(membership, membershipMod, AttributableUtil.MEMBERSHIP, scce));\n+                propByRes.merge(fill(membership, membershipMod,\n+                        AttributableUtil.getInstance(AttributableType.MEMBERSHIP), scce));\n             }\n         }\n "},{"sha":"82f3dedc8c3101fb0bf656505bbef4a18da25a18","filename":"core/src/main/java/org/syncope/core/util/AttributableUtil.java","status":"modified","additions":64,"deletions":25,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -49,42 +49,81 @@\n import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.beans.user.UVirAttr;\n import org.syncope.core.persistence.beans.user.UVirSchema;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.IntMappingType;\n \n-public enum AttributableUtil {\n+public class AttributableUtil {\n \n-    USER,\n-    ROLE,\n-    MEMBERSHIP;\n+    private final AttributableType type;\n+\n+    public static AttributableUtil getInstance(final AttributableType type) {\n+        return new AttributableUtil(type);\n+    }\n+\n+    public static AttributableUtil valueOf(final String name) {\n+        return new AttributableUtil(AttributableType.valueOf(name));\n+    }\n+\n+    private AttributableUtil(final AttributableType type) {\n+        this.type = type;\n+    }\n+\n+    public AttributableType getType() {\n+        return type;\n+    }\n \n     public IntMappingType intMappingType() {\n-        IntMappingType result = null;\n+        IntMappingType result;\n \n-        switch (this) {\n+        switch (type) {\n+            case ROLE:\n+                result = IntMappingType.RoleSchema;\n+                break;\n+            case MEMBERSHIP:\n+                result = IntMappingType.MembershipSchema;\n+                break;\n+            case USER:\n             default:\n                 result = IntMappingType.UserSchema;\n+                break;\n         }\n \n         return result;\n     }\n \n     public IntMappingType derivedIntMappingType() {\n-        IntMappingType result = null;\n+        IntMappingType result;\n \n-        switch (this) {\n+        switch (type) {\n+            case ROLE:\n+                result = IntMappingType.RoleDerivedSchema;\n+                break;\n+            case MEMBERSHIP:\n+                result = IntMappingType.MembershipDerivedSchema;\n+                break;\n+            case USER:\n             default:\n                 result = IntMappingType.UserDerivedSchema;\n+                break;\n         }\n \n         return result;\n     }\n \n     public IntMappingType virtualIntMappingType() {\n-        IntMappingType result = null;\n+        IntMappingType result;\n \n-        switch (this) {\n+        switch (type) {\n+            case ROLE:\n+                result = IntMappingType.RoleVirtualSchema;\n+                break;\n+            case MEMBERSHIP:\n+                result = IntMappingType.MembershipVirtualSchema;\n+                break;\n+            case USER:\n             default:\n                 result = IntMappingType.UserVirtualSchema;\n+                break;\n         }\n \n         return result;\n@@ -93,7 +132,7 @@ public IntMappingType virtualIntMappingType() {\n     public <T extends AbstractSchema> Class<T> schemaClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = USchema.class;\n                 break;\n@@ -111,7 +150,7 @@ public <T extends AbstractSchema> Class<T> schemaClass() {\n     public <T extends AbstractSchema> T newSchema() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new USchema();\n                 break;\n@@ -129,7 +168,7 @@ public <T extends AbstractSchema> T newSchema() {\n     public <T extends AbstractDerSchema> Class<T> derivedSchemaClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = UDerSchema.class;\n                 break;\n@@ -147,7 +186,7 @@ public <T extends AbstractDerSchema> Class<T> derivedSchemaClass() {\n     public <T extends AbstractVirSchema> Class<T> virtualSchemaClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = UVirSchema.class;\n                 break;\n@@ -165,7 +204,7 @@ public <T extends AbstractVirSchema> Class<T> virtualSchemaClass() {\n     public <T extends AbstractDerSchema> T newDerivedSchema() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new UDerSchema();\n                 break;\n@@ -183,7 +222,7 @@ public <T extends AbstractDerSchema> T newDerivedSchema() {\n     public <T extends AbstractAttr> Class<T> attributeClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = UAttr.class;\n                 break;\n@@ -201,7 +240,7 @@ public <T extends AbstractAttr> Class<T> attributeClass() {\n     public <T extends AbstractAttr> T newAttribute() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new UAttr();\n                 break;\n@@ -219,7 +258,7 @@ public <T extends AbstractAttr> T newAttribute() {\n     public <T extends AbstractDerAttr> Class<T> derivedAttributeClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = UDerAttr.class;\n                 break;\n@@ -237,7 +276,7 @@ public <T extends AbstractDerAttr> Class<T> derivedAttributeClass() {\n     public <T extends AbstractVirAttr> Class<T> virtualAttributeClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = UVirAttr.class;\n                 break;\n@@ -255,7 +294,7 @@ public <T extends AbstractVirAttr> Class<T> virtualAttributeClass() {\n     public <T extends AbstractDerAttr> T newDerivedAttribute() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new UDerAttr();\n                 break;\n@@ -273,7 +312,7 @@ public <T extends AbstractDerAttr> T newDerivedAttribute() {\n     public <T extends AbstractVirAttr> T newVirtualAttribute() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new UVirAttr();\n                 break;\n@@ -291,7 +330,7 @@ public <T extends AbstractVirAttr> T newVirtualAttribute() {\n     public <T extends AbstractVirSchema> T newVirtualSchema() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new UVirSchema();\n                 break;\n@@ -309,7 +348,7 @@ public <T extends AbstractVirSchema> T newVirtualSchema() {\n     public <T extends AbstractAttrValue> Class<T> attributeValueClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = UAttrValue.class;\n                 break;\n@@ -327,7 +366,7 @@ public <T extends AbstractAttrValue> Class<T> attributeValueClass() {\n     public <T extends AbstractAttrValue> T newAttributeValue() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new UAttrValue();\n                 break;\n@@ -345,7 +384,7 @@ public <T extends AbstractAttrValue> T newAttributeValue() {\n     public <T extends AbstractAttrValue> T newAttributeUniqueValue() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case USER:\n                 result = (T) new UAttrUniqueValue();\n                 break;"},{"sha":"29699bbd4a609aada55d44dbc3cdc89df850aa9f","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -32,6 +32,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.EntityViolationType;\n \n @Transactional\n@@ -87,16 +88,16 @@ public void save()\n \n         Exception thrown = null;\n         try {\n-            attribute.addValue(\"john.doe@gmail.com\", AttributableUtil.USER);\n-            attribute.addValue(\"mario.rossi@gmail.com\", AttributableUtil.USER);\n+            attribute.addValue(\"john.doe@gmail.com\", AttributableUtil.getInstance(AttributableType.USER));\n+            attribute.addValue(\"mario.rossi@gmail.com\", AttributableUtil.getInstance(AttributableType.USER));\n         } catch (ValidationException e) {\n             LOG.error(\"Unexpected exception\", e);\n             thrown = e;\n         }\n         assertNull(\"no validation exception expected here \", thrown);\n \n         try {\n-            attribute.addValue(\"http://www.apache.org\", AttributableUtil.USER);\n+            attribute.addValue(\"http://www.apache.org\", AttributableUtil.getInstance(AttributableType.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n@@ -135,13 +136,13 @@ public void checkForEnumType()\n         Exception thrown = null;\n \n         try {\n-            attribute.addValue(\"A\", AttributableUtil.USER);\n+            attribute.addValue(\"A\", AttributableUtil.getInstance(AttributableType.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n         assertNotNull(\"validation exception expected here \", thrown);\n \n-        attribute.addValue(\"M\", AttributableUtil.USER);\n+        attribute.addValue(\"M\", AttributableUtil.getInstance(AttributableType.USER));\n \n         InvalidEntityException iee = null;\n         try {\n@@ -180,7 +181,7 @@ public void validateAndSave() {\n \n         InvalidEntityException iee = null;\n         try {\n-            attribute = attrDAO.save(attribute);\n+            attrDAO.save(attribute);\n         } catch (InvalidEntityException e) {\n             iee = e;\n         }"},{"sha":"722b4262dde59bc30b6a47154f97d2bf8ecb8af1","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -27,6 +27,7 @@\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.AbstractTest;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.AttributableType;\n \n @Transactional\n public class DerSchemaTest extends AbstractTest {\n@@ -72,9 +73,7 @@ public void delete() {\n         UDerSchema attributeSchema =\n                 derSchemaDAO.find(\"cn\", UDerSchema.class);\n \n-        derSchemaDAO.delete(\n-                attributeSchema.getName(),\n-                AttributableUtil.USER);\n+        derSchemaDAO.delete(attributeSchema.getName(), AttributableUtil.getInstance(AttributableType.USER));\n \n         UDerSchema actual =\n                 derSchemaDAO.find(\"cn\", UDerSchema.class);"},{"sha":"a398a9923652590d5360e425758117a672dc3711","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -31,7 +31,7 @@\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.syncope.types.Entity;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.IntMappingType;\n \n @Transactional\n@@ -215,13 +215,13 @@ public void saveWithRoleMappingType() {\n \n             if (\"icon\".equals(schemaMapping.getIntAttrName())) {\n                 assertTrue(IntMappingType.contains(\n-                        Entity.ROLE,\n+                        AttributableType.ROLE,\n                         schemaMapping.getIntMappingType().toString()));\n             }\n \n             if (\"mderiveddata\".equals(schemaMapping.getIntAttrName())) {\n                 assertTrue(IntMappingType.contains(\n-                        Entity.MEMBERSHIP,\n+                        AttributableType.MEMBERSHIP,\n                         schemaMapping.getIntMappingType().toString()));\n             }\n         }"},{"sha":"77381b66a60057e79cb8086ca6c4266716d3676d","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -31,6 +31,7 @@\n import org.syncope.core.persistence.beans.role.RAttr;\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.SchemaType;\n \n @Transactional\n@@ -135,7 +136,7 @@ public void saveInvalidSchema() {\n     public void delete() {\n         USchema schema = schemaDAO.find(\"fullname\", USchema.class);\n \n-        schemaDAO.delete(schema.getName(), AttributableUtil.USER);\n+        schemaDAO.delete(schema.getName(), AttributableUtil.getInstance(AttributableType.USER));\n \n         USchema actual = schemaDAO.find(\"fullname\", USchema.class);\n         assertNull(\"delete did not work\", actual);"},{"sha":"840faccae259493fa97f20fb14d048e2648e1aa7","filename":"core/src/test/java/org/syncope/core/persistence/dao/VirSchemaTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -27,6 +27,7 @@\n import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.user.UVirSchema;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.AttributableType;\n \n @Transactional\n public class VirSchemaTest extends AbstractTest {\n@@ -71,9 +72,7 @@ public void delete() {\n         UVirSchema attributeSchema =\n                 virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n \n-        virSchemaDAO.delete(\n-                attributeSchema.getName(),\n-                AttributableUtil.USER);\n+        virSchemaDAO.delete(attributeSchema.getName(), AttributableUtil.getInstance(AttributableType.USER));\n \n         UVirSchema actual =\n                 virSchemaDAO.find(\"virtualdata\", UVirSchema.class);"},{"sha":"5985bd1bde3572bd1d5b1788b469434f60ac1b32","filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -41,6 +41,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.SchemaType;\n \n @Transactional\n@@ -112,7 +113,7 @@ public void checkForEnumType() {\n         MAttr attribute = new MAttr();\n         attribute.setSchema(actualSchema);\n         attribute.setOwner(membership);\n-        attribute.addValue(\"yellow\", AttributableUtil.MEMBERSHIP);\n+        attribute.addValue(\"yellow\", AttributableUtil.getInstance(AttributableType.MEMBERSHIP));\n         membership.addAttribute(attribute);\n \n         MAttr actualAttribute = attrDAO.save(attribute);"},{"sha":"69901729d0dea8ffbfffa2c580f033e17adc5371","filename":"core/src/test/java/org/syncope/core/persistence/relationships/DerSchemaTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -30,6 +30,7 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.AbstractTest;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.AttributableType;\n \n @Transactional\n public class DerSchemaTest extends AbstractTest {\n@@ -47,7 +48,7 @@ public class DerSchemaTest extends AbstractTest {\n     public void test() {\n         UDerSchema schema = derSchemaDAO.find(\"cn\", UDerSchema.class);\n \n-        derSchemaDAO.delete(schema.getName(), AttributableUtil.USER);\n+        derSchemaDAO.delete(schema.getName(), AttributableUtil.getInstance(AttributableType.USER));\n \n         derSchemaDAO.flush();\n "},{"sha":"60c239d6ba95bca7d87cd13c5021adc74b639742","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4ba6713168c4109ed02dca656bd8feae2c0b38c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=d4ba6713168c4109ed02dca656bd8feae2c0b38c","patch":"@@ -35,6 +35,7 @@\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.AbstractTest;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.AttributableType;\n import org.syncope.types.IntMappingType;\n \n @Transactional\n@@ -75,7 +76,7 @@ public void test1() {\n         assertFalse(mappings.isEmpty());\n \n         // delete user schema fullname\n-        schemaDAO.delete(\"fullname\", AttributableUtil.USER);\n+        schemaDAO.delete(\"fullname\", AttributableUtil.getInstance(AttributableType.USER));\n \n         schemaDAO.flush();\n \n@@ -123,7 +124,7 @@ public void test2() {\n         assertFalse(mappings.isEmpty());\n \n         // delete user schema fullname\n-        schemaDAO.delete(\"surname\", AttributableUtil.USER);\n+        schemaDAO.delete(\"surname\", AttributableUtil.getInstance(AttributableType.USER));\n \n         schemaDAO.flush();\n "}]}