{"sha":"7148df307784f5ee79539915bd7587631898eb69","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcxNDhkZjMwNzc4NGY1ZWU3OTUzOTkxNWJkNzU4NzYzMTg5OGViNjk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-14T15:38:23Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-14T15:38:23Z"},"message":"Compatibility with all supported DBMS verified\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247254 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9731a62ad9ef69bc70b991cd1d3ec3824c61b1ee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9731a62ad9ef69bc70b991cd1d3ec3824c61b1ee"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7148df307784f5ee79539915bd7587631898eb69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7148df307784f5ee79539915bd7587631898eb69","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7148df307784f5ee79539915bd7587631898eb69","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7148df307784f5ee79539915bd7587631898eb69/comments","author":null,"committer":null,"parents":[{"sha":"1168c47f168646e4abdd0d97bf5a5b7442627e71","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1168c47f168646e4abdd0d97bf5a5b7442627e71","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1168c47f168646e4abdd0d97bf5a5b7442627e71"}],"stats":{"total":463,"additions":232,"deletions":231},"files":[{"sha":"2ce8acd64c804ba9a62759b362a15886e4de5f15","filename":"client/src/main/java/org/syncope/client/search/AttributeCond.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -21,12 +21,25 @@\n  */\n public class AttributeCond extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = 3275277728404021417L;\n+\n     public enum Type {\n \n-        LIKE, EQ, GT, LT, GE, LE, ISNULL, ISNOTNULL\n+        LIKE,\n+        EQ,\n+        GT,\n+        LT,\n+        GE,\n+        LE,\n+        ISNULL,\n+        ISNOTNULL\n+\n     }\n+\n     private Type type;\n+\n     private String schema;\n+\n     private String expression;\n \n     public AttributeCond() {"},{"sha":"e58e7998101cea5f815b0dd6b798847cd964f0e9","filename":"client/src/main/java/org/syncope/client/search/SyncopeUserCond.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FSyncopeUserCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FSyncopeUserCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FSyncopeUserCond.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -19,6 +19,8 @@\n  */\n public class SyncopeUserCond extends AttributeCond {\n \n+    private static final long serialVersionUID = -1880319220462653955L;\n+\n     public SyncopeUserCond() {\n     }\n "},{"sha":"9959d5701e6bd610d21e6bd5289d4a7cd85671bd","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":27,"deletions":25,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -92,7 +92,7 @@ public String getName() {\n         return name;\n     }\n \n-    public void setName(String name) {\n+    public void setName(final String name) {\n         this.name = name;\n     }\n \n@@ -108,7 +108,7 @@ public String getMandatoryCondition() {\n         return mandatoryCondition;\n     }\n \n-    public void setMandatoryCondition(String mandatoryCondition) {\n+    public void setMandatoryCondition(final String mandatoryCondition) {\n         this.mandatoryCondition = mandatoryCondition;\n     }\n \n@@ -124,15 +124,15 @@ public boolean isUniqueConstraint() {\n         return isBooleanAsInteger(uniqueConstraint);\n     }\n \n-    public void setUniqueConstraint(boolean uniquevalue) {\n+    public void setUniqueConstraint(final boolean uniquevalue) {\n         this.uniqueConstraint = getBooleanAsInteger(uniquevalue);\n     }\n \n     public boolean isReadonly() {\n         return isBooleanAsInteger(readonly);\n     }\n \n-    public void setReadonly(boolean readonly) {\n+    public void setReadonly(final boolean readonly) {\n         this.readonly = getBooleanAsInteger(readonly);\n     }\n \n@@ -167,15 +167,15 @@ public String getValidatorClass() {\n         return validatorClass;\n     }\n \n-    public void setValidatorClass(String validatorClass) {\n+    public void setValidatorClass(final String validatorClass) {\n         this.validatorClass = validatorClass;\n     }\n \n     public String getEnumerationValues() {\n         return enumerationValues;\n     }\n \n-    public void setEnumerationValues(String enumerationValues) {\n+    public void setEnumerationValues(final String enumerationValues) {\n         this.enumerationValues = enumerationValues;\n     }\n \n@@ -188,7 +188,7 @@ public String getConversionPattern() {\n         return conversionPattern;\n     }\n \n-    public void setConversionPattern(String conversionPattern) {\n+    public void setConversionPattern(final String conversionPattern) {\n         if (!getType().isConversionPatternNeeded()) {\n             LOG.warn(\"Conversion pattern will be ignored: \"\n                     + \"this attribute type is \" + getType());\n@@ -200,30 +200,32 @@ public void setConversionPattern(String conversionPattern) {\n     public <T extends Format> T getFormatter() {\n         T result = null;\n \n-        switch (getType()) {\n-            case Long:\n-                DecimalFormat longFormatter = DECIMAL_FORMAT.get();\n-                longFormatter.applyPattern(getConversionPattern());\n+        if (getConversionPattern() != null) {\n+            switch (getType()) {\n+                case Long:\n+                    DecimalFormat longFormatter = DECIMAL_FORMAT.get();\n+                    longFormatter.applyPattern(getConversionPattern());\n \n-                result = (T) longFormatter;\n-                break;\n+                    result = (T) longFormatter;\n+                    break;\n \n-            case Double:\n-                DecimalFormat doubleFormatter = DECIMAL_FORMAT.get();\n-                doubleFormatter.applyPattern(getConversionPattern());\n+                case Double:\n+                    DecimalFormat doubleFormatter = DECIMAL_FORMAT.get();\n+                    doubleFormatter.applyPattern(getConversionPattern());\n \n-                result = (T) doubleFormatter;\n-                break;\n+                    result = (T) doubleFormatter;\n+                    break;\n \n-            case Date:\n-                SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n-                dateFormatter.applyPattern(getConversionPattern());\n-                dateFormatter.setLenient(false);\n+                case Date:\n+                    SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n+                    dateFormatter.applyPattern(getConversionPattern());\n+                    dateFormatter.setLenient(false);\n \n-                result = (T) dateFormatter;\n-                break;\n+                    result = (T) dateFormatter;\n+                    break;\n \n-            default:\n+                default:\n+            }\n         }\n \n         return result;"},{"sha":"5bffbb9da52cb3bb14a77baae32cc074a297ec80","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":135,"deletions":174,"changes":309,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -233,8 +233,13 @@ private List<SyncopeUser> doSearch(final Set<Long> adminRoles,\n         final StringBuilder queryString = getQuery(nodeCond, parameters);\n \n         // 2. take into account administrative roles\n-        queryString.insert(0, \"SELECT u.user_id FROM (\");\n-        queryString.append(\") u WHERE user_id NOT IN (\");\n+        if (queryString.charAt(0) == '(') {\n+            queryString.insert(0, \"SELECT u.user_id FROM \");\n+            queryString.append(\" u WHERE user_id NOT IN (\");\n+        } else {\n+            queryString.insert(0, \"SELECT u.user_id FROM (\");\n+            queryString.append(\") u WHERE user_id NOT IN (\");\n+        }\n         queryString.append(getAdminRolesFilter(adminRoles)).append(\")\");\n \n         // 3. prepare the search query\n@@ -393,267 +398,223 @@ private String getQuery(final ResourceCond cond,\n         return query.toString();\n     }\n \n-    private String getFieldName(final SchemaType type) {\n-        String result;\n-\n-        switch (type) {\n-            case Boolean:\n-                result = \"booleanvalue\";\n-                break;\n-\n-            case Date:\n-                result = \"datevalue\";\n-                break;\n-\n-            case Double:\n-                result = \"doublevalue\";\n-                break;\n-\n-            case Long:\n-                result = \"longvalue\";\n-                break;\n-\n-            case String:\n-            case Enum:\n-                result = \"stringvalue\";\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n-    private String getQuery(final AttributeCond cond,\n-            final boolean not, final Map<Integer, Object> parameters) {\n-\n-        USchema schema = schemaDAO.find(cond.getSchema(), USchema.class);\n-        if (schema == null) {\n-            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n-            return EMPTY_ATTR_QUERY;\n-        }\n-\n-        UAttrValue attrValue = new UAttrValue();\n-        try {\n-            if (cond.getType() != AttributeCond.Type.LIKE\n-                    && cond.getType() != AttributeCond.Type.ISNULL\n-                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n-\n-                attrValue = schema.getValidator().\n-                        getValue(cond.getExpression(), attrValue);\n-            }\n-        } catch (ValidationException e) {\n-            LOG.error(\"Could not validate expression '\"\n-                    + cond.getExpression() + \"'\", e);\n-            return EMPTY_ATTR_QUERY;\n-        }\n+    private void fillAttributeQuery(final StringBuilder query,\n+            final UAttrValue attrValue, final USchema schema,\n+            final AttributeCond cond, final boolean not,\n+            final Map<Integer, Object> parameters) {\n \n-        StringBuilder query = new StringBuilder(\n-                \"SELECT DISTINCT user_id FROM user_search_attr WHERE \").append(\n-                \"schema_name='\").append(schema.getName());\n+        String column = (cond instanceof SyncopeUserCond)\n+                ? cond.getSchema()\n+                : \"' AND \" + getFieldName(schema.getType());\n \n-        Integer paramKey;\n         switch (cond.getType()) {\n \n             case ISNULL:\n-                query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(not ? \" IS NOT NULL\" : \" IS NULL\");\n+                query.append(column).append(not ? \" IS NOT NULL\" : \" IS NULL\");\n                 break;\n \n             case ISNOTNULL:\n-                query.append(\"' AND \").append(getFieldName(schema.getType())).\n-                        append(not ? \" IS NULL\" : \" IS NOT NULL\");\n+                query.append(column).append(not ? \" IS NULL\" : \" IS NOT NULL\");\n                 break;\n \n             case LIKE:\n                 if (schema.getType() == SchemaType.String\n                         || schema.getType() == SchemaType.Enum) {\n-                    query.append(\"' AND \").\n-                            append(getFieldName(schema.getType()));\n+\n+                    query.append(column);\n                     if (not) {\n                         query.append(\" NOT \");\n                     }\n-                    query.append(\" LIKE '\").append(cond.getExpression()).\n-                            append(\"'\");\n+                    query.append(\" LIKE \");\n+                    if (!(cond instanceof SyncopeUserCond)) {\n+                        query.append('\\'');\n+                    }\n+                    query.append(cond.getExpression()).append(\"'\");\n                 } else {\n-                    query.append(\"' AND 1=2\");\n+                    if (!(cond instanceof SyncopeUserCond)) {\n+                        query.append(\"' AND\");\n+                    }\n+                    query.append(\" 1=2\");\n                     LOG.error(\"LIKE is only compatible with string schemas\");\n                 }\n                 break;\n \n             case EQ:\n-                paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                query.append(column);\n                 if (not) {\n                     query.append(\"<>\");\n                 } else {\n                     query.append(\"=\");\n                 }\n-                query.append(\":param\").append(paramKey);\n+                query.append(\":param\").append(\n+                        setParameter(parameters, attrValue.getValue()));\n                 break;\n \n             case GE:\n-                paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                query.append(column);\n                 if (not) {\n                     query.append(\"<\");\n                 } else {\n                     query.append(\">=\");\n                 }\n-                query.append(\":param\").append(paramKey);\n+                query.append(\":param\").append(\n+                        setParameter(parameters, attrValue.getValue()));\n                 break;\n \n             case GT:\n-                paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                query.append(column);\n                 if (not) {\n                     query.append(\"<=\");\n                 } else {\n                     query.append(\">\");\n                 }\n-                query.append(\":param\").append(paramKey);\n+                query.append(\":param\").append(\n+                        setParameter(parameters, attrValue.getValue()));\n                 break;\n \n             case LE:\n-                paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                query.append(column);\n                 if (not) {\n                     query.append(\">\");\n                 } else {\n                     query.append(\"<=\");\n                 }\n-                query.append(\":param\").append(paramKey);\n+                query.append(\":param\").append(\n+                        setParameter(parameters, attrValue.getValue()));\n                 break;\n \n             case LT:\n-                paramKey = setParameter(parameters, attrValue.getValue());\n-                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                query.append(column);\n                 if (not) {\n                     query.append(\">=\");\n                 } else {\n                     query.append(\"<\");\n                 }\n-                query.append(\":param\").append(paramKey);\n+                query.append(\":param\").append(\n+                        setParameter(parameters, attrValue.getValue()));\n                 break;\n \n             default:\n         }\n+    }\n+\n+    private String getFieldName(final SchemaType type) {\n+        String result;\n+\n+        switch (type) {\n+            case Boolean:\n+                result = \"booleanvalue\";\n+                break;\n+\n+            case Date:\n+                result = \"datevalue\";\n+                break;\n+\n+            case Double:\n+                result = \"doublevalue\";\n+                break;\n+\n+            case Long:\n+                result = \"longvalue\";\n+                break;\n+\n+            case String:\n+            case Enum:\n+                result = \"stringvalue\";\n+                break;\n+\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n+\n+    private String getQuery(final AttributeCond cond,\n+            final boolean not, final Map<Integer, Object> parameters) {\n+\n+        USchema schema = schemaDAO.find(cond.getSchema(), USchema.class);\n+        if (schema == null) {\n+            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        UAttrValue attrValue = new UAttrValue();\n+        try {\n+            if (cond.getType() != AttributeCond.Type.LIKE\n+                    && cond.getType() != AttributeCond.Type.ISNULL\n+                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+\n+                attrValue = schema.getValidator().\n+                        getValue(cond.getExpression(), attrValue);\n+            }\n+        } catch (ValidationException e) {\n+            LOG.error(\"Could not validate expression '\"\n+                    + cond.getExpression() + \"'\", e);\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        StringBuilder query = new StringBuilder(\n+                \"SELECT DISTINCT user_id FROM user_search_attr WHERE \").append(\n+                \"schema_name='\").append(schema.getName());\n+        fillAttributeQuery(query, attrValue, schema, cond, not, parameters);\n \n         return query.toString();\n     }\n \n     private String getQuery(final SyncopeUserCond cond,\n             final boolean not, final Map<Integer, Object> parameters) {\n \n-        final String schema = cond.getSchema();\n-\n-        Field field = null;\n-        // loop over class and all superclasses searching for field\n+        Field syncopeUserClassField = null;\n+        // loop over SyncopeUser class and all superclasses searching for field\n         for (Class<?> i = SyncopeUser.class;\n-                field == null && i != Object.class;) {\n+                syncopeUserClassField == null && i != Object.class;) {\n \n             try {\n-                field = i.getDeclaredField(schema);\n+                syncopeUserClassField = i.getDeclaredField(cond.getSchema());\n             } catch (Exception ignore) {\n                 // ignore exception\n                 LOG.debug(\"Field '{}' not found on class '{}'\",\n-                        new String[]{schema, i.getSimpleName()}, ignore);\n+                        new String[]{cond.getSchema(), i.getSimpleName()},\n+                        ignore);\n             } finally {\n                 i = i.getSuperclass();\n             }\n         }\n-        if (field == null) {\n+        if (syncopeUserClassField == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_ATTR_QUERY;\n         }\n \n-        final StringBuilder query = new StringBuilder(\n-                \"SELECT DISTINCT user_id FROM user_search WHERE \");\n-\n-        Integer paramKey;\n-        switch (cond.getType()) {\n-\n-            case ISNULL:\n-                query.append(schema).append(not ? \" IS NOT NULL\" : \" IS NULL\");\n-                break;\n-\n-            case ISNOTNULL:\n-                query.append(schema).append(not ? \" IS NULL\" : \" IS NOT NULL\");\n-                break;\n-\n-            case LIKE:\n-                if (field.getType() == String.class\n-                        || field.getType() == Enum.class) {\n-                    query.append(schema);\n-                    if (not) {\n-                        query.append(\" NOT \");\n-                    }\n-                    query.append(\" LIKE '\").append(cond.getExpression()).\n-                            append(\"'\");\n-                } else {\n-                    query.append(\" 1=2\");\n-                    LOG.error(\"LIKE is only compatible with string schemas\");\n-                }\n-                break;\n-\n-            case EQ:\n-                paramKey = setParameter(parameters, cond.getExpression());\n-                query.append(schema);\n-                if (not) {\n-                    query.append(\"<>\");\n-                } else {\n-                    query.append(\"=\");\n-                }\n-                query.append(\":param\").append(paramKey);\n-                break;\n+        USchema schema = new USchema();\n+        schema.setName(syncopeUserClassField.getName());\n+        for (SchemaType type : SchemaType.values()) {\n+            if (syncopeUserClassField.getType().\n+                    getName().equals(type.getClassName())) {\n \n-            case GE:\n-                paramKey = setParameter(parameters, cond.getExpression());\n-                query.append(schema);\n-                if (not) {\n-                    query.append(\"<\");\n-                } else {\n-                    query.append(\">=\");\n-                }\n-                query.append(\":param\").append(paramKey);\n-                break;\n+                schema.setType(type);\n+            }\n+        }\n \n-            case GT:\n-                paramKey = setParameter(parameters, cond.getExpression());\n-                query.append(schema);\n-                if (not) {\n-                    query.append(\"<=\");\n-                } else {\n-                    query.append(\">\");\n-                }\n-                query.append(\":param\").append(paramKey);\n-                break;\n+        UAttrValue attrValue = new UAttrValue();\n+        try {\n+            if (cond.getType() != AttributeCond.Type.LIKE\n+                    && cond.getType() != AttributeCond.Type.ISNULL\n+                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n \n-            case LE:\n-                paramKey = setParameter(parameters, cond.getExpression());\n-                query.append(schema);\n-                if (not) {\n-                    query.append(\">\");\n-                } else {\n-                    query.append(\"<=\");\n-                }\n-                query.append(\":param\").append(paramKey);\n-                break;\n+                attrValue = schema.getValidator().\n+                        getValue(cond.getExpression(), attrValue);\n+            }\n+        } catch (ValidationException e) {\n+            LOG.error(\"Could not validate expression '\"\n+                    + cond.getExpression() + \"'\", e);\n+            return EMPTY_ATTR_QUERY;\n+        }\n \n-            case LT:\n-                paramKey = setParameter(parameters, cond.getExpression());\n-                query.append(schema);\n-                if (not) {\n-                    query.append(\">=\");\n-                } else {\n-                    query.append(\"<\");\n-                }\n-                query.append(\":param\").append(paramKey);\n-                break;\n+        final StringBuilder query = new StringBuilder(\n+                \"SELECT DISTINCT user_id FROM user_search WHERE \");\n \n-            default:\n-        }\n+        fillAttributeQuery(query, attrValue, schema, cond, not, parameters);\n \n         return query.toString();\n     }"},{"sha":"5eb48d83fc26331f89c20a32e3d24c80a7ec3fcd","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/AbstractValidator.java","status":"modified","additions":27,"deletions":10,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FAbstractValidator.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -15,9 +15,10 @@\n package org.syncope.core.persistence.validation.attrvalue;\n \n import java.io.Serializable;\n+import java.text.DateFormat;\n import java.text.DecimalFormat;\n-import java.text.SimpleDateFormat;\n import java.util.Date;\n+import org.apache.commons.lang.time.DateUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -69,29 +70,45 @@ private <T extends AbstractAttrValue> T parseValue(final String value,\n \n             case Long:\n                 try {\n-                    attributeValue.setLongValue(Long.valueOf(\n-                            ((DecimalFormat) schema.getFormatter()).parse(\n-                            value).longValue()));\n+                    if (schema.getFormatter() == null) {\n+                        attributeValue.setLongValue(Long.valueOf(value));\n+                    } else {\n+                        attributeValue.setLongValue(Long.valueOf(\n+                                ((DecimalFormat) schema.getFormatter()).parse(\n+                                value).longValue()));\n+                    }\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n                 }\n                 break;\n \n             case Double:\n                 try {\n-                    attributeValue.setDoubleValue(Double.valueOf(\n-                            ((DecimalFormat) schema.getFormatter()).parse(\n-                            value).doubleValue()));\n+                    if (schema.getFormatter() == null) {\n+                        attributeValue.setDoubleValue(Double.valueOf(value));\n+                    } else {\n+                        attributeValue.setDoubleValue(Double.valueOf(\n+                                ((DecimalFormat) schema.getFormatter()).parse(\n+                                value).doubleValue()));\n+                    }\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n                 }\n                 break;\n \n             case Date:\n                 try {\n-                    attributeValue.setDateValue(new Date(\n-                            ((SimpleDateFormat) schema.getFormatter()).parse(\n-                            value).getTime()));\n+                    if (schema.getFormatter() == null) {\n+                        attributeValue.setDateValue(DateUtils.parseDate(value,\n+                                new String[]{\n+                                    \"EEE, dd MMM yyyy HH:mm:ss z\",\n+                                    \"yyyy-MM-dd'T'HH:mm:ssz\",\n+                                    \"yyyy-MM-dd HH:mm:ss\"}));\n+                    } else {\n+                        attributeValue.setDateValue(new Date(\n+                                ((DateFormat) schema.getFormatter()).parse(\n+                                value).getTime()));\n+                    }\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n                 }"},{"sha":"3c09cfa20d83c879b39238425705509d737a6bd8","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/BasicValidator.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -22,8 +22,7 @@ public class BasicValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = -2606728447694223607L;\n \n-    public BasicValidator(AbstractSchema schema) {\n-\n+    public BasicValidator(final AbstractSchema schema) {\n         super(schema);\n     }\n "},{"sha":"f19290a15046609b936e539207b3558a76e9229f","filename":"core/src/main/java/org/syncope/core/scheduling/AbstractJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractJob.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -39,7 +39,7 @@ public abstract class AbstractJob implements StatefulJob {\n     /**\n      * Task execution status.\n      */\n-    protected enum Status {\n+    public enum Status {\n \n         SUCCESS,\n         FAILURE"},{"sha":"eb53ee954c771859dacd862e48a4231680c8b8a9","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -614,7 +614,7 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n         if (dryRun) {\n             result.setUserId(0L);\n             result.setUsername(userTO.getUsername());\n-            result.setStatus(SyncResult.Status.SUCCESS);\n+            result.setStatus(Status.SUCCESS);\n         } else {\n             try {\n                 WorkflowResult<Map.Entry<Long, Boolean>> created =\n@@ -630,12 +630,12 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n \n                 result.setUserId(created.getResult().getKey());\n                 result.setUsername(userTO.getUsername());\n-                result.setStatus(SyncResult.Status.SUCCESS);\n+                result.setStatus(Status.SUCCESS);\n             } catch (PropagationException e) {\n                 LOG.error(\"Could not propagate user \"\n                         + delta.getUid().getUidValue(), e);\n             } catch (Throwable t) {\n-                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setStatus(Status.FAILURE);\n                 result.setMessage(t.getMessage());\n                 LOG.error(\"Could not create user \"\n                         + delta.getUid().getUidValue(), t);\n@@ -670,7 +670,7 @@ private void updateUsers(final SyncDelta delta,\n                             getUserMod(userId, delta.getObject());\n                     actions.beforeUpdate(delta, userTO, userMod);\n \n-                    result.setStatus(SyncResult.Status.SUCCESS);\n+                    result.setStatus(Status.SUCCESS);\n                     result.setUserId(userMod.getId());\n                     result.setUsername(userMod.getUsername());\n \n@@ -692,7 +692,7 @@ private void updateUsers(final SyncDelta delta,\n                     LOG.error(\"Could not propagate user \"\n                             + delta.getUid().getUidValue(), e);\n                 } catch (Throwable t) {\n-                    result.setStatus(SyncResult.Status.FAILURE);\n+                    result.setStatus(Status.FAILURE);\n                     result.setMessage(t.getMessage());\n                     LOG.error(\"Could not update user \"\n                             + delta.getUid().getUidValue(), t);\n@@ -729,7 +729,7 @@ private void deleteUsers(final SyncDelta delta,\n                 result.setUserId(userId);\n                 result.setUsername(userTO.getUsername());\n                 result.setOperation(Operation.DELETE);\n-                result.setStatus(SyncResult.Status.SUCCESS);\n+                result.setStatus(Status.SUCCESS);\n \n                 if (!dryRun) {\n                     try {\n@@ -744,7 +744,7 @@ private void deleteUsers(final SyncDelta delta,\n                     try {\n                         wfAdapter.delete(userId);\n                     } catch (Throwable t) {\n-                        result.setStatus(SyncResult.Status.FAILURE);\n+                        result.setStatus(Status.FAILURE);\n                         result.setMessage(t.getMessage());\n                         LOG.error(\"Could not delete user \" + userId, t);\n                     }"},{"sha":"946541217678329392564d2dfde91d3dcc770414","filename":"core/src/main/java/org/syncope/core/scheduling/SyncResult.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -19,6 +19,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n+import org.syncope.core.scheduling.AbstractJob.Status;\n import org.syncope.types.TraceLevel;\n \n public class SyncResult {\n@@ -31,13 +32,6 @@ static enum Operation {\n \n     }\n \n-    static enum Status {\n-\n-        SUCCESS,\n-        FAILURE\n-\n-    }\n-\n     private String message;\n \n     private Status status;"},{"sha":"47594d79806dddb303b6bf42f8639465aec44c6a","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -303,6 +303,7 @@ public void searchById() {\n         idLeafCond.setExpression(\"2\");\n \n         NodeCond searchCondition = NodeCond.getLeafCond(idLeafCond);\n+        assertTrue(searchCondition.checkValidity());\n \n         List<SyncopeUser> matchingUsers = searchDAO.search(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n@@ -317,6 +318,7 @@ public void searchById() {\n         idLeafCond.setExpression(\"4\");\n \n         searchCondition = NodeCond.getNotLeafCond(idLeafCond);\n+        assertTrue(searchCondition.checkValidity());\n \n         matchingUsers = searchDAO.search(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()),"},{"sha":"ebf22ffb69049c31f32d93c7755e15a41db231a0","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -292,9 +292,20 @@ public void sync() {\n                 TaskExecTO.class, 4);\n         assertEquals(\"JOB_FIRED\", execution.getStatus());\n \n-        try {\n-            Thread.sleep(10000);\n-        } catch (InterruptedException e) {\n+        List<TaskExecTO> executions = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"task/sync/execution/list\",\n+                TaskExecTO[].class));\n+        assertNotNull(executions);\n+        assertTrue(executions.isEmpty());\n+        while (executions.isEmpty()) {\n+            executions = Arrays.asList(restTemplate.getForObject(\n+                    BASE_URL + \"task/sync/execution/list\",\n+                    TaskExecTO[].class));\n+            try {\n+                Thread.sleep(5000);\n+            } catch (InterruptedException e) {\n+            }\n         }\n \n         // check for sync policy"},{"sha":"253eb203a2c9fe3d4b6361bc50860a7326c501c4","filename":"core/src/test/resources/oracle/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7148df307784f5ee79539915bd7587631898eb69/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties?ref=7148df307784f5ee79539915bd7587631898eb69","patch":"@@ -10,7 +10,7 @@\n #  See the License for the specific language governing permissions and\n #  limitations under the License.\n jpa.driverClassName=oracle.jdbc.driver.OracleDriver\n-jpa.url=jdbc:oracle:thin:@localhost:1521:orcl\n+jpa.url=jdbc:oracle:thin:@pioppo:1521:orcl\n jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.hibernate.dialect.Oracle10gDialect"}]}