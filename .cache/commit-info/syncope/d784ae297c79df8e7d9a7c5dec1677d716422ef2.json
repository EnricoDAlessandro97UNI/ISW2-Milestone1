{"sha":"d784ae297c79df8e7d9a7c5dec1677d716422ef2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ3ODRhZTI5N2M3OWRmOGU3ZDlhN2M1ZGVjMTY3N2Q3MTY0MjJlZjI=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-12-11T11:07:35Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-12-11T11:07:35Z"},"message":"SYNCOPE-1243 - Add information to GroupTO about user and AnyObject membership counts. Thanks to Francesco for reviewing.","tree":{"sha":"98e776079a2cd316d2bd773b150611274a5d30df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/98e776079a2cd316d2bd773b150611274a5d30df"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d784ae297c79df8e7d9a7c5dec1677d716422ef2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d784ae297c79df8e7d9a7c5dec1677d716422ef2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d784ae297c79df8e7d9a7c5dec1677d716422ef2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d784ae297c79df8e7d9a7c5dec1677d716422ef2/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"003982086477f7258d60becf72ecdd12424a6789","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/003982086477f7258d60becf72ecdd12424a6789","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/003982086477f7258d60becf72ecdd12424a6789"}],"stats":{"total":147,"additions":147,"deletions":0},"files":[{"sha":"e4bf304a66a16e4a01126d11bcaec5f77cbc5f13","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d784ae297c79df8e7d9a7c5dec1677d716422ef2/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d784ae297c79df8e7d9a7c5dec1677d716422ef2/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=d784ae297c79df8e7d9a7c5dec1677d716422ef2","patch":"@@ -47,6 +47,14 @@ public class GroupTO extends AnyTO {\n \n     private String udynMembershipCond;\n \n+    private int staticUserMembershipCount;\n+\n+    private int dynamicUserMembershipCount;\n+\n+    private int staticAnyObjectMembershipCount;\n+\n+    private int dynamicAnyObjectMembershipCount;\n+\n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n     @JsonIgnore\n     private final Map<String, String> adynMembershipConds = new HashMap<>();\n@@ -95,6 +103,38 @@ public void setUDynMembershipCond(final String uDynMembershipCond) {\n         this.udynMembershipCond = uDynMembershipCond;\n     }\n \n+    public int getStaticUserMembershipCount() {\n+        return staticUserMembershipCount;\n+    }\n+\n+    public void setStaticUserMembershipCount(final int staticUserMembershipCount) {\n+        this.staticUserMembershipCount = staticUserMembershipCount;\n+    }\n+\n+    public int getDynamicUserMembershipCount() {\n+        return dynamicUserMembershipCount;\n+    }\n+\n+    public void setDynamicUserMembershipCount(final int dynamicUserMembershipCount) {\n+        this.dynamicUserMembershipCount = dynamicUserMembershipCount;\n+    }\n+\n+    public int getStaticAnyObjectMembershipCount() {\n+        return staticAnyObjectMembershipCount;\n+    }\n+\n+    public void setStaticAnyObjectMembershipCount(final int staticAnyObjectMembershipCount) {\n+        this.staticAnyObjectMembershipCount = staticAnyObjectMembershipCount;\n+    }\n+\n+    public int getDynamicAnyObjectMembershipCount() {\n+        return dynamicAnyObjectMembershipCount;\n+    }\n+\n+    public void setDynamicAnyObjectMembershipCount(final int dynamicAnyObjectMembershipCount) {\n+        this.dynamicAnyObjectMembershipCount = dynamicAnyObjectMembershipCount;\n+    }\n+\n     @JsonProperty\n     public Map<String, String> getADynMembershipConds() {\n         return adynMembershipConds;"},{"sha":"11b61e8faa7bec9b0848c970b0d07530d6fc5f37","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d784ae297c79df8e7d9a7c5dec1677d716422ef2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d784ae297c79df8e7d9a7c5dec1677d716422ef2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=d784ae297c79df8e7d9a7c5dec1677d716422ef2","patch":"@@ -49,6 +49,14 @@ public interface GroupDAO extends AnyDAO<Group> {\n \n     List<String> findADynMembers(Group group);\n \n+    int countAMembers(Group group);\n+\n+    int countUMembers(Group group);\n+\n+    int countADynMembers(Group group);\n+\n+    int countUDynMembers(Group group);\n+\n     Collection<String> findAllResourceKeys(final String key);\n \n     void clearADynMembers(Group group);"},{"sha":"df792daf4e68683fbce6f58d030172605e8eb954","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d784ae297c79df8e7d9a7c5dec1677d716422ef2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d784ae297c79df8e7d9a7c5dec1677d716422ef2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=d784ae297c79df8e7d9a7c5dec1677d716422ef2","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n@@ -394,6 +395,46 @@ public List<String> findADynMembers(final Group group) {\n         return result;\n     }\n \n+    @Override\n+    public int countAMembers(final Group group) {\n+        Query query = entityManager().createNativeQuery(\n+            \"SELECT COUNT(anyObject_id) FROM \" + JPAAMembership.TABLE + \" WHERE group_id=?\");\n+        query.setParameter(1, group.getKey());\n+\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public int countUMembers(final Group group) {\n+        Query query = entityManager().createNativeQuery(\n+            \"SELECT COUNT(user_id) FROM \" + JPAUMembership.TABLE + \" WHERE group_id=?\");\n+        query.setParameter(1, group.getKey());\n+\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public int countADynMembers(final Group group) {\n+        Query query = entityManager().createNativeQuery(\n+            \"SELECT COUNT(any_id) FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=?\");\n+        query.setParameter(1, group.getKey());\n+\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public int countUDynMembers(final Group group) {\n+        if (group.getUDynMembership() == null) {\n+            return 0;\n+        }\n+\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT COUNT(any_id) FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=?\");\n+        query.setParameter(1, group.getKey());\n+\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n     @Override\n     public void clearADynMembers(final Group group) {\n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=?\");"},{"sha":"f797fd432c8414a21f5faa22e5ab6ab1a1c3c910","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d784ae297c79df8e7d9a7c5dec1677d716422ef2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d784ae297c79df8e7d9a7c5dec1677d716422ef2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=d784ae297c79df8e7d9a7c5dec1677d716422ef2","patch":"@@ -362,6 +362,14 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n             groupTO.getDynRealms().addAll(groupDAO.findDynRealms(group.getKey()));\n         }\n \n+        // Static user and AnyType membership counts\n+        groupTO.setStaticUserMembershipCount(groupDAO.countUMembers(group));\n+        groupTO.setStaticAnyObjectMembershipCount(groupDAO.countAMembers(group));\n+\n+        // Dynamic user and AnyType membership counts\n+        groupTO.setDynamicUserMembershipCount(groupDAO.countUDynMembers(group));\n+        groupTO.setDynamicAnyObjectMembershipCount(groupDAO.countADynMembers(group));\n+\n         if (group.getUDynMembership() != null) {\n             groupTO.setUDynMembershipCond(group.getUDynMembership().getFIQLCond());\n         }"},{"sha":"a5bad8f8572a8e696f884824a282001753ed24f1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d784ae297c79df8e7d9a7c5dec1677d716422ef2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d784ae297c79df8e7d9a7c5dec1677d716422ef2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=d784ae297c79df8e7d9a7c5dec1677d716422ef2","patch":"@@ -189,6 +189,7 @@ public void read() {\n         assertNotNull(groupTO);\n         assertNotNull(groupTO.getPlainAttrs());\n         assertFalse(groupTO.getPlainAttrs().isEmpty());\n+        assertEquals(2, groupTO.getStaticUserMembershipCount());\n     }\n \n     @Test\n@@ -629,13 +630,15 @@ public void uDynMembership() {\n         List<MembershipTO> memberships = userService.read(\n                 \"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships();\n         assertTrue(memberships.stream().anyMatch(m -> m.getGroupKey().equals(groupKey)));\n+        assertEquals(1, groupService.read(group.getKey()).getDynamicUserMembershipCount());\n \n         GroupPatch patch = new GroupPatch();\n         patch.setKey(group.getKey());\n         patch.setUDynMembershipCond(\"cool==false\");\n         groupService.update(patch);\n \n         assertTrue(userService.read(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships().isEmpty());\n+        assertEquals(0, groupService.read(group.getKey()).getDynamicUserMembershipCount());\n     }\n \n     @Test\n@@ -701,6 +704,53 @@ public void aDynMembership() {\n         assertTrue(memberships.stream().anyMatch(m -> m.getGroupKey().equals(groupKey)));\n     }\n \n+    @Test\n+    public void aDynMembershipCount() {\n+        // Create a new printer as a dynamic member of a new group\n+        GroupTO group = getBasicSampleTO(\"aDynamicMembership\");\n+        String fiql = SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").is(\"location\").equalTo(\"home\").query();\n+        group.getADynMembershipConds().put(\"PRINTER\", fiql);\n+        group = createGroup(group).getEntity();\n+\n+        AnyObjectTO printer = new AnyObjectTO();\n+        printer.setRealm(SyncopeConstants.ROOT_REALM);\n+        printer.setName(\"Printer_\" + getUUIDString());\n+        printer.setType(\"PRINTER\");\n+        AttrTO location = new AttrTO.Builder().schema(\"location\").value(\"home\").build();\n+        printer.getPlainAttrs().add(location);\n+        printer = createAnyObject(printer).getEntity();\n+\n+        group = groupService.read(group.getKey());\n+        assertEquals(0, group.getStaticAnyObjectMembershipCount());\n+        assertEquals(1, group.getDynamicAnyObjectMembershipCount());\n+\n+        anyObjectService.delete(printer.getKey());\n+        groupService.delete(group.getKey());\n+    }\n+\n+    @Test\n+    public void aStaticMembershipCount() {\n+        // Create a new printer as a static member of a new group\n+        GroupTO group = getBasicSampleTO(\"aStaticMembership\");\n+        group = createGroup(group).getEntity();\n+\n+        AnyObjectTO printer = new AnyObjectTO();\n+        printer.setRealm(SyncopeConstants.ROOT_REALM);\n+        printer.setName(\"Printer_\" + getUUIDString());\n+        printer.setType(\"PRINTER\");\n+        MembershipTO membership = new MembershipTO();\n+        membership.setGroupKey(group.getKey());\n+        printer.getMemberships().add(membership);\n+        printer = createAnyObject(printer).getEntity();\n+\n+        group = groupService.read(group.getKey());\n+        assertEquals(0, group.getDynamicAnyObjectMembershipCount());\n+        assertEquals(1, group.getStaticAnyObjectMembershipCount());\n+\n+        anyObjectService.delete(printer.getKey());\n+        groupService.delete(group.getKey());\n+    }\n+\n     @Test\n     public void capabilitiesOverride() {\n         // resource with no capability override"}]}