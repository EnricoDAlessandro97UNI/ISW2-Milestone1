{"sha":"39d5371b37884e910e5a14653076be9aed597f61","node_id":"C_kwDOJfYA1toAKDM5ZDUzNzFiMzc4ODRlOTEwZTVhMTQ2NTMwNzZiZTlhZWQ1OTdmNjE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-10T10:25:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-10T10:25:55Z"},"message":"[SYNCOPE-1720] Switching to time-based epoch generator","tree":{"sha":"a5775340e23b7ec22b559ea47923ec286c6aa0f9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a5775340e23b7ec22b559ea47923ec286c6aa0f9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/39d5371b37884e910e5a14653076be9aed597f61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39d5371b37884e910e5a14653076be9aed597f61","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39d5371b37884e910e5a14653076be9aed597f61","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39d5371b37884e910e5a14653076be9aed597f61/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"259c3c83d1ecc804b7fd2bc4a4587eb68288841f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/259c3c83d1ecc804b7fd2bc4a4587eb68288841f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/259c3c83d1ecc804b7fd2bc4a4587eb68288841f"}],"stats":{"total":143,"additions":110,"deletions":33},"files":[{"sha":"0ebb47b1753dbad68229ce87b6d9284a36d446a5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39d5371b37884e910e5a14653076be9aed597f61/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39d5371b37884e910e5a14653076be9aed597f61/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=39d5371b37884e910e5a14653076be9aed597f61","patch":"@@ -59,11 +59,19 @@ public interface GroupDAO extends AnyDAO<Group> {\n \n     List<TypeExtension> findTypeExtensions(AnyTypeClass anyTypeClass);\n \n+    boolean existsAMembership(String anyObjectKey, String groupKey);\n+\n+    boolean existsUMembership(String userKey, String groupKey);\n+\n+    List<String> findAMembers(String groupKey);\n+\n+    List<String> findUMembers(String groupKey);\n+\n     List<String> findADynMembers(Group group);\n \n-    int countAMembers(Group group);\n+    int countAMembers(String groupKey);\n \n-    int countUMembers(Group group);\n+    int countUMembers(String groupKey);\n \n     int countADynMembers(Group group);\n "},{"sha":"c0dd75f70a8d66c7c2176d64c9e26191778399fa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":58,"deletions":4,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39d5371b37884e910e5a14653076be9aed597f61/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39d5371b37884e910e5a14653076be9aed597f61/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=39d5371b37884e910e5a14653076be9aed597f61","patch":"@@ -402,6 +402,60 @@ public List<TypeExtension> findTypeExtensions(final AnyTypeClass anyTypeClass) {\n         return query.getResultList();\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public boolean existsAMembership(final String anyObjectKey, final String groupKey) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT COUNT(*) FROM \" + JPAAMembership.TABLE + \" WHERE group_id=? AND anyobject_it=?\");\n+        query.setParameter(1, groupKey);\n+        query.setParameter(2, anyObjectKey);\n+\n+        return ((Number) query.getSingleResult()).intValue() > 0;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public boolean existsUMembership(final String userKey, final String groupKey) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT COUNT(*) FROM \" + JPAUMembership.TABLE + \" WHERE group_id=? AND user_id=?\");\n+        query.setParameter(1, groupKey);\n+        query.setParameter(2, userKey);\n+\n+        return ((Number) query.getSingleResult()).intValue() > 0;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> findAMembers(final String groupKey) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT anyObject_id FROM \" + JPAAMembership.TABLE + \" WHERE group_id=?\");\n+        query.setParameter(1, groupKey);\n+\n+        List<String> result = new ArrayList<>();\n+        query.getResultList().stream().map(key -> key instanceof Object[]\n+                ? (String) ((Object[]) key)[0]\n+                : ((String) key)).\n+                forEach(item -> result.add((String) item));\n+        return result;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> findUMembers(final String groupKey) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT user_id FROM \" + JPAUMembership.TABLE + \" WHERE group_id=?\");\n+        query.setParameter(1, groupKey);\n+\n+        List<String> result = new ArrayList<>();\n+        query.getResultList().stream().map(key -> key instanceof Object[]\n+                ? (String) ((Object[]) key)[0]\n+                : ((String) key)).\n+                forEach(item -> result.add((String) item));\n+        return result;\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<String> findADynMembers(final Group group) {\n@@ -424,19 +478,19 @@ public List<String> findADynMembers(final Group group) {\n     }\n \n     @Override\n-    public int countAMembers(final Group group) {\n+    public int countAMembers(final String groupKey) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT COUNT(anyObject_id) FROM \" + JPAAMembership.TABLE + \" WHERE group_id=?\");\n-        query.setParameter(1, group.getKey());\n+        query.setParameter(1, groupKey);\n \n         return ((Number) query.getSingleResult()).intValue();\n     }\n \n     @Override\n-    public int countUMembers(final Group group) {\n+    public int countUMembers(final String groupKey) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT COUNT(user_id) FROM \" + JPAUMembership.TABLE + \" WHERE group_id=?\");\n-        query.setParameter(1, group.getKey());\n+        query.setParameter(1, groupKey);\n \n         return ((Number) query.getSingleResult()).intValue();\n     }"},{"sha":"af42b2ab3bb7d990d85fb1ac6c709543c11fb563","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39d5371b37884e910e5a14653076be9aed597f61/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39d5371b37884e910e5a14653076be9aed597f61/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=39d5371b37884e910e5a14653076be9aed597f61","patch":"@@ -289,10 +289,12 @@ protected StringBuilder buildFindAllQuery(\n                     append(taskTable).\n                     append(\".notification_id=?\").append(setParameter(parameters, notification.getKey()));\n         }\n-        if (anyTypeKind != null && entityKey != null) {\n+        if (anyTypeKind != null) {\n+            queryString.append(\" AND \").\n+                    append(taskTable).append(\".anyTypeKind=?\").append(setParameter(parameters, anyTypeKind.name()));\n+        }\n+        if (entityKey != null) {\n             queryString.append(\" AND \").\n-                    append(taskTable).append(\".anyTypeKind=?\").append(setParameter(parameters, anyTypeKind.name())).\n-                    append(\" AND \").\n                     append(taskTable).append(\".entityKey=?\").append(setParameter(parameters, entityKey));\n         }\n         if (type == TaskType.MACRO"},{"sha":"ef72c7baaf8fd657b7a6c553687e306b7f65c609","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39d5371b37884e910e5a14653076be9aed597f61/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39d5371b37884e910e5a14653076be9aed597f61/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=39d5371b37884e910e5a14653076be9aed597f61","patch":"@@ -435,8 +435,8 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n         groupTO.getDynRealms().addAll(groupDAO.findDynRealms(group.getKey()));\n \n         // Static user and AnyType membership counts\n-        groupTO.setStaticUserMembershipCount(groupDAO.countUMembers(group));\n-        groupTO.setStaticAnyObjectMembershipCount(groupDAO.countAMembers(group));\n+        groupTO.setStaticUserMembershipCount(groupDAO.countUMembers(group.getKey()));\n+        groupTO.setStaticAnyObjectMembershipCount(groupDAO.countAMembers(group.getKey()));\n \n         // Dynamic user and AnyType membership counts\n         groupTO.setDynamicUserMembershipCount(groupDAO.countUDynMembers(group));"},{"sha":"ceb4fbcaa37de89a3a025b7c293c2dda402f9677","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39d5371b37884e910e5a14653076be9aed597f61/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39d5371b37884e910e5a14653076be9aed597f61/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java?ref=39d5371b37884e910e5a14653076be9aed597f61","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.spring.security;\n \n import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n+import com.fasterxml.uuid.NoArgGenerator;\n import java.security.SecureRandom;\n import java.util.UUID;\n import org.apache.commons.text.RandomStringGenerator;\n@@ -47,7 +47,7 @@ public final class SecureRandomUtils {\n             withinRange('0', '9').\n             build();\n \n-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator(RANDOM);\n+    private static final NoArgGenerator UUID_GENERATOR = Generators.timeBasedEpochGenerator(RANDOM);\n \n     public static String generateRandomPassword(final int tokenLength) {\n         return FOR_PASSWORD.generate(tokenLength);"},{"sha":"f9411e51bdc295047d8fa55b1efc2032d89afc93","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":30,"deletions":17,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39d5371b37884e910e5a14653076be9aed597f61/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39d5371b37884e910e5a14653076be9aed597f61/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=39d5371b37884e910e5a14653076be9aed597f61","patch":"@@ -32,6 +32,7 @@\n import java.time.OffsetDateTime;\n import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -629,12 +630,14 @@ public void updatePasswordOnly() {\n     @Test\n     public void verifyTaskRegistration() {\n         // get task list\n-        PagedResult<PropagationTaskTO> tasks = TASK_SERVICE.search(\n-                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n-        assertNotNull(tasks);\n-        assertFalse(tasks.getResult().isEmpty());\n+        List<PropagationTaskTO> tasks = TASK_SERVICE.<PropagationTaskTO>search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1000).build()).getResult();\n+        assertFalse(tasks.isEmpty());\n \n-        String maxKey = tasks.getResult().iterator().next().getKey();\n+        String maxKey = tasks.stream().\n+                max(Comparator.comparing(PropagationTaskTO::getStart, Comparator.nullsLast(Comparator.naturalOrder()))).\n+                map(PropagationTaskTO::getKey).orElse(null);\n+        assertNotNull(maxKey);\n \n         // --------------------------------------\n         // Create operation\n@@ -649,11 +652,14 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n-        assertNotNull(tasks);\n-        assertFalse(tasks.getResult().isEmpty());\n+        tasks = TASK_SERVICE.<PropagationTaskTO>search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1000).build()).getResult();\n+        assertFalse(tasks.isEmpty());\n \n-        String newMaxKey = tasks.getResult().iterator().next().getKey();\n+        String newMaxKey = tasks.stream().\n+                max(Comparator.comparing(PropagationTaskTO::getStart, Comparator.nullsLast(Comparator.naturalOrder()))).\n+                map(PropagationTaskTO::getKey).orElse(null);\n+        assertNotNull(newMaxKey);\n \n         // default configuration for ws-target-resource2 during create:\n         // only failed executions have to be registered\n@@ -673,27 +679,34 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = TASK_SERVICE.<PropagationTaskTO>search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1000).build()).getResult();\n+        assertFalse(tasks.isEmpty());\n \n         // default configuration for ws-target-resource2 during update:\n         // all update executions have to be registered\n-        newMaxKey = tasks.getResult().iterator().next().getKey();\n+        newMaxKey = tasks.stream().\n+                max(Comparator.comparing(PropagationTaskTO::getStart, Comparator.nullsLast(Comparator.naturalOrder()))).\n+                map(PropagationTaskTO::getKey).orElse(null);\n+        assertNotNull(newMaxKey);\n \n-        PropagationTaskTO taskTO = TASK_SERVICE.read(TaskType.PROPAGATION, newMaxKey, true);\n-\n-        assertNotNull(taskTO);\n-        assertEquals(1, taskTO.getExecutions().size());\n+        assertNotNull(TASK_SERVICE.read(TaskType.PROPAGATION, newMaxKey, false));\n \n         // --------------------------------------\n         // Delete operation\n         // --------------------------------------\n         USER_SERVICE.delete(userTO.getKey());\n \n         // get the new task list\n-        tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1).build());\n+        tasks = TASK_SERVICE.<PropagationTaskTO>search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(1000).build()).getResult();\n+        assertFalse(tasks.isEmpty());\n \n         maxKey = newMaxKey;\n-        newMaxKey = tasks.getResult().iterator().next().getKey();\n+        newMaxKey = tasks.stream().\n+                max(Comparator.comparing(PropagationTaskTO::getStart, Comparator.nullsLast(Comparator.naturalOrder()))).\n+                map(PropagationTaskTO::getKey).orElse(null);\n+        assertNotNull(newMaxKey);\n \n         // default configuration for ws-target-resource2: no delete executions have to be registered\n         // --> no more tasks/executions should be added"},{"sha":"8cf6dda3548ec526622741d14def61aec072ba51","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/39d5371b37884e910e5a14653076be9aed597f61/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/39d5371b37884e910e5a14653076be9aed597f61/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=39d5371b37884e910e5a14653076be9aed597f61","patch":"@@ -32,7 +32,7 @@ under the License.\n   <parent>\n     <groupId>org.apache</groupId>\n     <artifactId>apache</artifactId>\n-    <version>28</version>\n+    <version>29</version>\n     <relativePath />\n   </parent>\n \n@@ -452,7 +452,7 @@ under the License.\n \n     <h2.version>2.1.214</h2.version>\n \n-    <swagger-core.version>2.2.7</swagger-core.version>\n+    <swagger-core.version>2.2.8</swagger-core.version>\n     <swagger-ui.version>4.15.5</swagger-ui.version>\n \n     <jquery-slimscroll.version>1.3.8</jquery-slimscroll.version>\n@@ -675,7 +675,7 @@ under the License.\n       <dependency>\n         <groupId>com.fasterxml.uuid</groupId>\n         <artifactId>java-uuid-generator</artifactId>\n-        <version>4.0.1</version>\n+        <version>4.1.0</version>\n       </dependency>\n \n       <dependency>"}]}