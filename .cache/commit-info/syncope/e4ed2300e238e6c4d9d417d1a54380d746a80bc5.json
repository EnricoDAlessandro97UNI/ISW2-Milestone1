{"sha":"e4ed2300e238e6c4d9d417d1a54380d746a80bc5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU0ZWQyMzAwZTIzOGU2YzRkOWQ0MTdkMWE1NDM4MGQ3NDZhODBiYzU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-03-11T14:04:30Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-03-11T14:04:30Z"},"message":"(Fix issue #84)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246812 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e47613f4df514ad426c6daf308a583bdae627a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5e47613f4df514ad426c6daf308a583bdae627a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e4ed2300e238e6c4d9d417d1a54380d746a80bc5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e4ed2300e238e6c4d9d417d1a54380d746a80bc5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e4ed2300e238e6c4d9d417d1a54380d746a80bc5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/comments","author":null,"committer":null,"parents":[{"sha":"b4c3181b46fe3adfc2685883a66c9ad6a16cacf3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4c3181b46fe3adfc2685883a66c9ad6a16cacf3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b4c3181b46fe3adfc2685883a66c9ad6a16cacf3"}],"stats":{"total":446,"additions":279,"deletions":167},"files":[{"sha":"93509cc81ca0c40a535a432d7c63a4bf90eab75e","filename":"client/src/main/java/org/syncope/client/to/PaginatedUserContainer.java","status":"renamed","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPaginatedUserContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPaginatedUserContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPaginatedUserContainer.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -12,15 +12,12 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.client.search;\n+package org.syncope.client.to;\n \n import java.util.List;\n-import org.syncope.client.AbstractBaseBean;\n import org.syncope.client.to.UserTO;\n \n-public class PaginatedUserContainer extends AbstractBaseBean {\n-\n-    private List<UserTO> records;\n+public class PaginatedUserContainer {\n \n     private int totalRecords;\n \n@@ -30,6 +27,8 @@ public class PaginatedUserContainer extends AbstractBaseBean {\n \n     private int pageSize;\n \n+    private List<UserTO> records;\n+\n     public int getPageNumber() {\n         return pageNumber;\n     }\n@@ -46,14 +45,6 @@ public void setPageSize(int pageSize) {\n         this.pageSize = pageSize;\n     }\n \n-    public List<UserTO> getRecords() {\n-        return records;\n-    }\n-\n-    public void setRecords(List<UserTO> records) {\n-        this.records = records;\n-    }\n-\n     public int getRecordsInPage() {\n         return recordsInPage;\n     }\n@@ -69,4 +60,12 @@ public int getTotalRecords() {\n     public void setTotalRecords(int totalRecords) {\n         this.totalRecords = totalRecords;\n     }\n+\n+    public List<UserTO> getRecords() {\n+        return records;\n+    }\n+\n+    public void setRecords(final List<UserTO> records) {\n+        this.records = records;\n+    }\n }","previous_filename":"client/src/main/java/org/syncope/client/search/PaginatedUserContainer.java"},{"sha":"bd2f8afa28cda3a0447332e8f03f0fe68069b9d5","filename":"client/src/main/java/org/syncope/client/to/TaskTO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskTO.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -23,12 +23,19 @@\n public class TaskTO extends AbstractBaseBean {\n \n     private long id;\n+\n     private PropagationMode propagationMode;\n+\n     private ResourceOperationType resourceOperationType;\n+\n     private String accountId;\n+\n     private String oldAccountId;\n+\n     private String xmlAttributes;\n+\n     private String resource;\n+\n     private List<TaskExecutionTO> executions;\n \n     public TaskTO() {"},{"sha":"3cbb200b696f77cae7da7de81897636ce973b874","filename":"client/src/main/java/org/syncope/client/to/WorkflowActionsTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FWorkflowActionsTO.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"5d9ea14f98936651a0faf96721b730ac09024d56","filename":"client/src/test/java/org/syncope/client/test/JSONTest.java","status":"modified","additions":39,"deletions":2,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -20,18 +20,23 @@\n import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.junit.Test;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.SchemaTO;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.client.to.PaginatedUserContainer;\n \n public class JSONTest {\n \n     @Test\n-    public void testSearchCondition() throws IOException {\n+    public void testSearchCondition()\n+            throws IOException {\n+\n         final AttributeCond usernameCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n         usernameCond.setSchema(\"username\");\n@@ -56,7 +61,9 @@ public void testSearchCondition() throws IOException {\n     }\n \n     @Test\n-    public void testLists() throws IOException {\n+    public void testLists()\n+            throws IOException {\n+\n         List<SchemaTO> schemas = new ArrayList<SchemaTO>();\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"name1\");\n@@ -76,4 +83,34 @@ public void testLists() throws IOException {\n             assertNotNull(unserializedSchema);\n         }\n     }\n+\n+    @Test\n+    public void testPaginatedUserContainer()\n+            throws IOException {\n+\n+        PaginatedUserContainer puc = new PaginatedUserContainer();\n+        puc.setPageNumber(11);\n+        puc.setPageSize(12);\n+        puc.setRecordsInPage(13);\n+        puc.setTotalRecords(14);\n+        UserTO userTO = new UserTO();\n+        userTO.setId(15);\n+        puc.setRecords(Collections.singletonList(userTO));\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, puc);\n+\n+        PaginatedUserContainer unserialized = mapper.readValue(\n+                writer.toString(), PaginatedUserContainer.class);\n+        assertNotNull(unserialized);\n+        assertNotNull(unserialized.getRecords());\n+        assertEquals(1, unserialized.getRecords().size());\n+        assertNotNull(unserialized.getRecords().iterator().next());\n+\n+        for (UserTO user : unserialized.getRecords()) {\n+            assertNotNull(user);\n+        }\n+    }\n }"},{"sha":"c8d3a3b22fc3f68f36d679ba4bfbe8cca154fe19","filename":"console/src/main/java/org/syncope/console/pages/TaskModalPage.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -166,21 +166,15 @@ public void populateItem(\n                 AjaxLink deleteLink = new IndicatingAjaxLink(\"deleteLink\") {\n \n                     @Override\n-                    public void onClick(AjaxRequestTarget target) {\n-\n-                        boolean res = false;\n-\n+                    public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            res = taskRestClient.deleteTaskExecution(\n+                            taskRestClient.deleteTaskExecution(\n                                     taskExecutionTO.getId());\n+                            info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());\n                         }\n \n-                        if (res) {\n-                            info(getString(\"operation_succeded\"));\n-                        }\n-\n                         target.addComponent(feedbackPanel);\n                         target.addComponent(container);\n                     }"},{"sha":"ece44abc7455f84f95849ceef23c7a09621ba9e3","filename":"console/src/main/java/org/syncope/console/pages/Tasks.java","status":"modified","additions":33,"deletions":38,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -41,7 +41,7 @@\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.repeater.Item;\n-import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n@@ -60,9 +60,9 @@\n  */\n public class Tasks extends BasePage {\n \n-    private static final int WIN_HEIGHT = 500;\n+    private static final int WIN_HEIGHT = 400;\n \n-    private static final int WIN_WIDTH = 500;\n+    private static final int WIN_WIDTH = 600;\n \n     @SpringBean\n     private TaskRestClient restClient;\n@@ -91,13 +91,24 @@ public Tasks(final PageParameters parameters) {\n                 getWebRequestCycle().getWebRequest(),\n                 Constants.PREF_TASKS_PAGINATOR_ROWS);\n \n-        List<IColumn> columns = new ArrayList<IColumn>();\n+        List<IColumn<TaskTO>> columns = new ArrayList<IColumn<TaskTO>>();\n \n-        columns.add(new PropertyColumn(new Model(getString(\"id\")),\n-                \"id\", \"id\"));\n+        columns.add(new PropertyColumn(\n+                new Model(getString(\"id\")), \"id\", \"id\"));\n \n-        columns.add(new PropertyColumn(new Model(getString(\"accountId\")),\n-                \"accountId\", \"accountId\"));\n+        columns.add(new PropertyColumn(\n+                new Model(getString(\"resource\")), \"resource\", \"resource\"));\n+\n+        columns.add(new PropertyColumn(\n+                new Model(getString(\"accountId\")), \"accountId\", \"accountId\"));\n+\n+        columns.add(new PropertyColumn(\n+                new Model(getString(\"propagationMode\")),\n+                \"propagationMode\", \"propagationMode\"));\n+\n+        columns.add(new PropertyColumn(\n+                new Model(getString(\"resourceOperationType\")),\n+                \"resourceOperationType\", \"resourceOperationType\"));\n \n         columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(\n                 \"detail\"))) {\n@@ -155,18 +166,13 @@ public void populateItem(\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n-                        boolean res = false;\n-\n                         try {\n-                            res = restClient.startTaskExecution(taskTO.getId());\n+                            restClient.startTaskExecution(taskTO.getId());\n+                            getSession().info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());\n                         }\n \n-                        if (res) {\n-                            getSession().info(getString(\"operation_succeded\"));\n-                        }\n-\n                         target.addComponent(getPage().get(\"feedback\"));\n                         target.addComponent(container);\n                     }\n@@ -190,6 +196,7 @@ public void onClick(final AjaxRequestTarget target) {\n         columns.add(new AbstractColumn<TaskTO>(new Model<String>(getString(\n                 \"delete\"))) {\n \n+            @Override\n             public void populateItem(\n                     final Item<ICellPopulator<TaskTO>> cellItem,\n                     final String componentId,\n@@ -241,8 +248,8 @@ public CharSequence preDecorateScript(\n         });\n \n \n-        final AjaxFallbackDefaultDataTable table =\n-                new AjaxFallbackDefaultDataTable(\"datatable\", columns,\n+        final AjaxFallbackDefaultDataTable<TaskTO> table =\n+                new AjaxFallbackDefaultDataTable<TaskTO>(\"datatable\", columns,\n                 new TasksProvider(), paginatorRows);\n \n         container = new WebMarkupContainer(\"container\");\n@@ -296,7 +303,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         add(paginatorForm);\n     }\n \n-    class TasksProvider extends SortableDataProvider<TaskTO> {\n+    private class TasksProvider extends SortableDataProvider<TaskTO> {\n \n         private SortableDataProviderComparator comparator =\n                 new SortableDataProviderComparator();\n@@ -309,38 +316,26 @@ public TasksProvider() {\n \n         @Override\n         public Iterator<TaskTO> iterator(int first, int count) {\n-            List<TaskTO> list = getTasksListDB();\n-\n-            Collections.sort(list, comparator);\n-\n-            return list.subList(first, first + count).iterator();\n+            List<TaskTO> tasks = restClient.list(first, count);\n+            Collections.sort(tasks, comparator);\n+            return tasks.iterator();\n         }\n \n         @Override\n         public int size() {\n-            return getTasksListDB().size();\n+            return restClient.count();\n         }\n \n         @Override\n-        public IModel<TaskTO> model(final TaskTO task) {\n-            return new AbstractReadOnlyModel<TaskTO>() {\n-\n-                @Override\n-                public TaskTO getObject() {\n-                    return task;\n-                }\n-            };\n-        }\n-\n-        public List<TaskTO> getTasksListDB() {\n-            return restClient.getAllTasks();\n+        public IModel<TaskTO> model(final TaskTO object) {\n+            return new CompoundPropertyModel<TaskTO>(object);\n         }\n \n         class SortableDataProviderComparator implements\n                 Comparator<TaskTO>, Serializable {\n \n-            public int compare(final TaskTO o1,\n-                    final TaskTO o2) {\n+            @Override\n+            public int compare(final TaskTO o1, final TaskTO o2) {\n                 PropertyModel<Comparable> model1 =\n                         new PropertyModel<Comparable>(o1,\n                         getSort().getProperty());"},{"sha":"a36019d8a9280a8329f23cdf37c7e2d78f7ca4c4","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -49,7 +49,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedUserContainer;\n+import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.UserTO;"},{"sha":"c069fe4e0a5dc3838e1c9546159c00dd4da06b84","filename":"console/src/main/java/org/syncope/console/rest/TaskRestClient.java","status":"modified","additions":30,"deletions":53,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -20,35 +20,36 @@\n import org.syncope.client.to.TaskExecutionTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.types.TaskExecutionStatus;\n \n /**\n  * Console client for invoking Rest Tasks services.\n  */\n @Component\n public class TaskRestClient extends AbstractBaseRestClient {\n \n+    public Integer count() {\n+        return restTemplate.getForObject(baseURL + \"task/count.json\",\n+                Integer.class);\n+    }\n+\n     /**\n      * Get all stored tasks.\n+     * @param first index to start from\n+     * @param count maximum number to fetch\n      * @return list of TaskTO objects\n      */\n-    public List<TaskTO> getAllTasks() {\n-\n-        List<TaskTO> tasks = Arrays.asList(\n-                restTemplate.getForObject(\n-                baseURL + \"task/list.json\",\n-                TaskTO[].class));\n-\n-        return tasks;\n-\n+    public List<TaskTO> list(final int first, final int count) {\n+        return Arrays.asList(restTemplate.getForObject(\n+                baseURL + \"task/list/{page}/{size}.json\",\n+                TaskTO[].class, first, count));\n     }\n \n     /**\n-     * Load an existent task.\n+     * Load an existing task.\n+     * @param taskId task to read\n      * @return TaskTO object if the configuration exists, null otherwise\n      */\n-    public TaskTO readTask(String taskId) {\n-\n+    public TaskTO readTask(final String taskId) {\n         TaskTO taskTO = null;\n         try {\n             taskTO = restTemplate.getForObject(\n@@ -66,61 +67,37 @@ public TaskTO readTask(String taskId) {\n      * @return list of all executions\n      */\n     public List<TaskExecutionTO> listExecutions() {\n-        List<TaskExecutionTO> executions = Arrays.asList(\n+        return Arrays.asList(\n                 restTemplate.getForObject(\n                 baseURL + \"task/execution/list\",\n                 TaskExecutionTO[].class));\n-\n-        return executions;\n     }\n \n     /**\n      * Delete specified task.\n-     * @param task to delete id\n+     * @param taskId task to delete\n      */\n-    public void deleteTask(Long taskId) {\n-\n-        try {\n-            restTemplate.delete(\n-                    baseURL + \"task/delete/{taskId}\", taskId);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While deleting a task\", e);\n-        }\n+    public void deleteTask(final Long taskId) {\n+        restTemplate.delete(\n+                baseURL + \"task/delete/{taskId}\", taskId);\n     }\n \n     /**\n      * Start execution for the specified TaskTO.\n-     * @param taskTO's id\n-     * @return boolean: TRUE the operation is executed succesfully,\n-     *                  FALSE otherwise\n+     * @param taskId task id\n      */\n-    public boolean startTaskExecution(Long taskId) {\n-        boolean result = false;\n-        try {\n-            TaskExecutionTO execution = restTemplate.getForObject(\n-                    baseURL + \"task/execute/{taskId}\",\n-                    TaskExecutionTO.class, taskId);\n-            result = (execution.getStatus() == TaskExecutionStatus.SUBMITTED);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While starting a task\", e);\n-        }\n-\n-        return result;\n+    public void startTaskExecution(final Long taskId) {\n+        restTemplate.getForObject(\n+                baseURL + \"task/execute/{taskId}\",\n+                TaskExecutionTO.class, taskId);\n     }\n \n     /**\n      * Delete specified task's execution.\n-     * @param task to delete id\n+     * @param taskExecId task execution id\n      */\n-    public boolean deleteTaskExecution(Long execId) {\n-\n-        try {\n-            restTemplate.delete(baseURL\n-                    + \"task/execution/delete/{execId}\", execId);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While deletring a task execution\", e);\n-        }\n-\n-        return true;\n+    public void deleteTaskExecution(final Long taskExecId) {\n+        restTemplate.delete(baseURL\n+                + \"task/execution/delete/{execId}\", taskExecId);\n     }\n }"},{"sha":"1ad106800c9667aa892ddbc65c22de09e5ca839d","filename":"console/src/main/java/org/syncope/console/rest/UserRestClient.java","status":"modified","additions":3,"deletions":20,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -19,7 +19,7 @@\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedUserContainer;\n+import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n@@ -99,37 +99,20 @@ public List<UserTO> searchUsers(NodeCond nodeSearchCondition)\n                 nodeSearchCondition, UserTO[].class));\n     }\n \n-    /**\n-     * Search an user by its schema values.\n-     * @param userTO\n-     * @return UserTOs\n-     */\n-    public List<UserTO> paginatedSearchUsers(NodeCond nodeSearchCond,\n-            int page, int size)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        final PaginatedUserContainer paginatedResult =\n-                restTemplate.postForObject(\n-                baseURL + \"user/paginatedSearch/{page}/{size}\",\n-                nodeSearchCond, PaginatedUserContainer.class, page, size);\n-\n-        return paginatedResult.getRecords();\n-    }\n-\n     public PaginatedUserContainer paginatedSearchUser(NodeCond nodeSearchCond,\n             int page, int size)\n             throws SyncopeClientCompositeErrorException {\n \n         return restTemplate.postForObject(\n-                baseURL + \"user/paginatedSearch/{page}/{size}\",\n+                baseURL + \"user/search/{page}/{size}\",\n                 nodeSearchCond, PaginatedUserContainer.class, page, size);\n     }\n \n     public PaginatedUserContainer getPaginatedUser(int page, int size)\n             throws SyncopeClientCompositeErrorException {\n \n         return restTemplate.getForObject(\n-                baseURL + \"user/paginatedList/{page}/{size}\",\n+                baseURL + \"user/list/{page}/{size}\",\n                 PaginatedUserContainer.class, page, size);\n     }\n }"},{"sha":"8c4ed92c094db1e8a29cc482442c549dd44d43d2","filename":"console/src/main/resources/org/syncope/console/pages/Tasks.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.html?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -44,7 +44,7 @@\n             </li>\n         </ul>\n         <div id=\"tabs-1\">\n-            <div id=\"users-contain\" class=\"ui-widget\">\n+            <div id=\"users-contain\" class=\"ui-widget\" style=\"width:auto\">\n                 <span wicket:id=\"container\">\n                     <table class=\"ui-widget ui-widget-content table-hover\"\n                            wicket:id=\"datatable\"/>"},{"sha":"cebe64a9e38d9d4f9b52bbf5f1e8fa92e048a54f","filename":"console/src/main/resources/org/syncope/console/pages/Tasks.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.properties?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -5,4 +5,6 @@ resource=Resource\n execute=Execute\n detail=Detail\n delete=Delete\n-edit=Detail\n\\ No newline at end of file\n+edit=Edit\n+propagationMode=Propagation Mode\n+resourceOperationType=Resource operation\n\\ No newline at end of file"},{"sha":"eee3e17d0c2b07ae91ea3553e13b920e05da37ea","filename":"console/src/main/resources/org/syncope/console/pages/Tasks_it.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks_it.properties?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -5,4 +5,5 @@ resource=Risorsa\n execute=Esegui\n detail=Dettaglio\n delete=Elimina\n-edit=Dettaglio\n+edit=Modifica\n+resourceOperationType=Operazione sulla risorsa\n\\ No newline at end of file"},{"sha":"b60d538f672de7f78fdd8168968680be8f0253a9","filename":"console/src/test/resources/content.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -282,6 +282,12 @@\n                  resource_name=\"ws-target-resource-2\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n     <TaskExecution id=\"1\" task_id=\"1\" workflowId=\"0\"/>\n+    <Task id=\"2\" propagationMode=\"SYNC\" resourceOperationType=\"CREATE\"\n+                 resource_name=\"ws-target-resource-2\"\n+                 xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n+    <Task id=\"3\" propagationMode=\"ASYNC\" resourceOperationType=\"DELETE\"\n+                 resource_name=\"ws-target-resource-2\"\n+                 xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n \n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n "},{"sha":"6e611d37ff605d3ff33a23198e8dbb1155543193","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -24,6 +24,10 @@ public interface TaskDAO extends DAO {\n \n     List<Task> findAll();\n \n+    List<Task> findAll(int page, int itemsPerPage);\n+\n+    Integer count();\n+\n     Task save(Task task)\n             throws InvalidEntityException;\n "},{"sha":"45f97b91a6f2c4ea1f0b921bc9799cf030c8bdbe","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserSearchDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -16,8 +16,8 @@\n \n import java.util.List;\n import java.util.Set;\n+import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n public interface UserSearchDAO extends DAO {\n@@ -37,6 +37,8 @@ public interface UserSearchDAO extends DAO {\n      * @param paginatedResult result to be sent to the REST caller\n      * @return the list of users matchin the given search condition\n      */\n-    List<SyncopeUser> search(Set<Long> adminRoles, NodeCond searchCondition,\n-            int page, int itemsPerPage, PaginatedUserContainer paginatedResult);\n+    List<SyncopeUser> search(Set<Long> adminRoles,\n+            NodeCond searchCondition,\n+            int page, int itemsPerPage,\n+            PaginatedUserContainer paginatedResult);\n }"},{"sha":"bed2bcb74f6c758bcf0a5c064ac80148acfb3304","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -31,10 +31,30 @@ public Task find(final Long id) {\n \n     @Override\n     public List<Task> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM Task e\");\n+        return findAll(-1, -1);\n+    }\n+\n+    @Override\n+    public List<Task> findAll(final int page, final int itemsPerPage) {\n+        final Query query = entityManager.createQuery(\"SELECT e FROM Task e\");\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n         return query.getResultList();\n     }\n \n+    @Override\n+    public final Integer count() {\n+        Query countQuery =\n+                entityManager.createNativeQuery(\"SELECT COUNT(id) FROM Task\");\n+\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n     @Override\n     public Task save(final Task task) {\n         return entityManager.merge(task);"},{"sha":"1320ea4a17a3b09996eda5848c9d3cb0c4f01e4a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -32,7 +32,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedUserContainer;\n+import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.USchema;"},{"sha":"0a6b4148947ef683d60231b83857eaaff638c4c0","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -29,6 +29,7 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.TaskExecutionTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -67,6 +68,13 @@ public class TaskController extends AbstractController {\n     @Autowired\n     private JPAWorkflowEntryDAO workflowEntryDAO;\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/count\")\n+    public ModelAndView count() {\n+        return new ModelAndView().addObject(taskDAO.count());\n+    }\n+\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n@@ -80,6 +88,22 @@ public List<TaskTO> list() {\n         return taskTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list/{page}/{size}\")\n+    public List<TaskTO> list(\n+            @PathVariable(\"page\") final int page,\n+            @PathVariable(\"size\") final int size) {\n+\n+        List<Task> tasks = taskDAO.findAll(page, size);\n+        List<TaskTO> taskTOs = new ArrayList<TaskTO>(tasks.size());\n+        for (Task task : tasks) {\n+            taskTOs.add(taskDataBinder.getTaskTO(workflow, task));\n+        }\n+\n+        return taskTOs;\n+    }\n+\n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execution/list\")"},{"sha":"24a7de4c10a5a8fac3c93bf6628222c6c23fb48d","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -46,7 +46,7 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedUserContainer;\n+import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -186,6 +186,16 @@ public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n                 equalsIgnoreCase(passwordUser.getPassword()));\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/count\")\n+    public ModelAndView count() {\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+\n+        return new ModelAndView().addObject(userDAO.count(adminRoleIds));\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n@@ -203,9 +213,9 @@ public List<UserTO> list() {\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/paginatedList/{page}/{size}\")\n+    value = \"/list/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public PaginatedUserContainer paginatedList(\n+    public PaginatedUserContainer list(\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size) {\n \n@@ -291,25 +301,25 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST,\n-    value = \"/paginatedSearch/{page}/{size}\")\n+    value = \"/search/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public PaginatedUserContainer paginatedSearch(\n+    public PaginatedUserContainer search(\n             @RequestBody final NodeCond searchCondition,\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n \n         LOG.debug(\"User search called with condition {}\", searchCondition);\n \n-        PaginatedUserContainer paginatedResult = new PaginatedUserContainer();\n-        paginatedResult.setPageNumber(page);\n-        paginatedResult.setPageSize(size);\n-\n         if (!searchCondition.checkValidity()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n \n+        PaginatedUserContainer paginatedResult = new PaginatedUserContainer();\n+        paginatedResult.setPageNumber(page);\n+        paginatedResult.setPageSize(size);\n+\n         final List<SyncopeUser> matchingUsers = userSearchDAO.search(\n                 EntitlementUtil.getRoleIds(\n                 EntitlementUtil.getOwnedEntitlementNames()),"},{"sha":"95aefb048d4b7881df0a4458cf77f2bc155bcb78","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -15,7 +15,6 @@\n package org.syncope.core.rest.data;\n \n import com.opensymphony.workflow.Workflow;\n-import javax.annotation.Resource;\n import org.springframework.beans.BeanUtils;\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.TaskExecutionTO;\n@@ -33,9 +32,6 @@ public class TaskDataBinder {\n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\n         \"task\"};\n \n-    @Resource(name = \"taskExecutionWorkflow\")\n-    private Workflow workflow;\n-\n     public TaskExecutionTO getTaskExecutionTO(final Workflow workflow,\n             final TaskExecution execution) {\n "},{"sha":"d95b559904be266ff66646b8750f9132e7c4c0dc","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -41,7 +41,7 @@ public class TaskTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<Task> list = taskDAO.findAll();\n-        assertEquals(1, list.size());\n+        assertEquals(3, list.size());\n     }\n \n     @Test"},{"sha":"63401b1eb6b6fa01a066cf74d2c791051b0d4b23","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -29,6 +29,14 @@\n \n public class TaskTestITCase extends AbstractTest {\n \n+    @Test\n+    public final void count() {\n+        Integer count = restTemplate.getForObject(\n+                BASE_URL + \"task/count.json\", Integer.class);\n+        assertNotNull(count);\n+        assertTrue(count > 0);\n+    }\n+\n     @Test\n     public final void list() {\n         List<TaskTO> tasks = Arrays.asList(\n@@ -41,6 +49,40 @@ public final void list() {\n         }\n     }\n \n+    @Test\n+    public final void paginatedList() {\n+        List<TaskTO> tasks = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"task/list/{page}/{size}.json\",\n+                TaskTO[].class, 1, 2));\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+        assertEquals(2, tasks.size());\n+\n+        for (TaskTO task : tasks) {\n+            assertNotNull(task);\n+        }\n+\n+        tasks = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"task/list/{page}/{size}.json\",\n+                TaskTO[].class, 2, 2));\n+\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+        assertEquals(2, tasks.size());\n+\n+        for (TaskTO task : tasks) {\n+            assertNotNull(task);\n+        }\n+\n+        tasks = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"task/list/{page}/{size}.json\",\n+                TaskTO[].class, 100, 2));\n+\n+        assertNotNull(tasks);\n+        assertTrue(tasks.isEmpty());\n+    }\n+\n     @Test\n     public final void listExecutions() {\n         List<TaskExecutionTO> executions = Arrays.asList("},{"sha":"80907f57d74b2c4c4da423c5b44e19463894dc6a","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -31,11 +31,11 @@\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.MembershipMod;\n import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.PaginatedUserContainer;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n@@ -380,6 +380,14 @@ public final void delete() {\n         }\n     }\n \n+    @Test\n+    public final void count() {\n+        Integer count = restTemplate.getForObject(\n+                BASE_URL + \"user/count.json\", Integer.class);\n+        assertNotNull(count);\n+        assertTrue(count > 0);\n+    }\n+\n     @Test\n     public final void list() {\n         List<UserTO> users = Arrays.asList(\n@@ -394,9 +402,8 @@ public final void list() {\n \n     @Test\n     public final void paginatedList() {\n-\n         PaginatedUserContainer paginatedResult = restTemplate.getForObject(\n-                BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n+                BASE_URL + \"user/list/{page}/{size}.json\",\n                 PaginatedUserContainer.class, 1, 2);\n \n         List<UserTO> users = paginatedResult.getRecords();\n@@ -410,7 +417,7 @@ public final void paginatedList() {\n         }\n \n         paginatedResult = restTemplate.getForObject(\n-                BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n+                BASE_URL + \"user/list/{page}/{size}.json\",\n                 PaginatedUserContainer.class, 2, 2);\n \n         users = paginatedResult.getRecords();\n@@ -420,7 +427,7 @@ public final void paginatedList() {\n         assertEquals(2, users.size());\n \n         PaginatedUserContainer result = restTemplate.getForObject(\n-                BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n+                BASE_URL + \"user/list/{page}/{size}.json\",\n                 PaginatedUserContainer.class, 100, 2);\n \n         users = result.getRecords();\n@@ -527,7 +534,7 @@ public final void paginatedSearch() {\n         assertTrue(searchCondition.checkValidity());\n \n         PaginatedUserContainer result = restTemplate.postForObject(\n-                BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n+                BASE_URL + \"user/search/{page}/{size}\",\n                 searchCondition, PaginatedUserContainer.class, 1, 2);\n \n         List<UserTO> matchedUsers = result.getRecords();\n@@ -544,7 +551,7 @@ public final void paginatedSearch() {\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n         PaginatedUserContainer paginatedResult = restTemplate.postForObject(\n-                BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n+                BASE_URL + \"user/search/{page}/{size}\",\n                 searchCondition, PaginatedUserContainer.class, 1, 2);\n \n         matchedUsers = paginatedResult.getRecords();"},{"sha":"b60d538f672de7f78fdd8168968680be8f0253a9","filename":"core/src/test/resources/content.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e4ed2300e238e6c4d9d417d1a54380d746a80bc5/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e4ed2300e238e6c4d9d417d1a54380d746a80bc5","patch":"@@ -282,6 +282,12 @@\n                  resource_name=\"ws-target-resource-2\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n     <TaskExecution id=\"1\" task_id=\"1\" workflowId=\"0\"/>\n+    <Task id=\"2\" propagationMode=\"SYNC\" resourceOperationType=\"CREATE\"\n+                 resource_name=\"ws-target-resource-2\"\n+                 xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n+    <Task id=\"3\" propagationMode=\"ASYNC\" resourceOperationType=\"DELETE\"\n+                 resource_name=\"ws-target-resource-2\"\n+                 xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n \n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n "}]}