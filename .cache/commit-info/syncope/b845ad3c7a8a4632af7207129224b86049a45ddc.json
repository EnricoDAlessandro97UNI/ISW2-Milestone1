{"sha":"b845ad3c7a8a4632af7207129224b86049a45ddc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI4NDVhZDNjN2E4YTQ2MzJhZjcyMDcxMjkyMjRiODYwNDlhNDVkZGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-08-29T15:07:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-08-29T15:07:36Z"},"message":"Merge from 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1378602 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4929e6da09ffa06bdda3b9d88d442af79706670f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4929e6da09ffa06bdda3b9d88d442af79706670f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b845ad3c7a8a4632af7207129224b86049a45ddc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b845ad3c7a8a4632af7207129224b86049a45ddc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b845ad3c7a8a4632af7207129224b86049a45ddc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b845ad3c7a8a4632af7207129224b86049a45ddc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04"}],"stats":{"total":220,"additions":128,"deletions":92},"files":[{"sha":"e46d62a12458e4cecf9261d59457c0011c63211c","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/PropagationTaskValidator.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=b845ad3c7a8a4632af7207129224b86049a45ddc","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.types.EntityViolationType;\n-import org.apache.syncope.types.PropagationOperation;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n \n public class PropagationTaskValidator extends AbstractValidator implements\n@@ -45,8 +44,7 @@ public boolean isValid(final PropagationTask object, final ConstraintValidatorCo\n             isValid = object.getPropagationMode() != null\n                     && object.getPropagationOperation() != null\n                     && !object.getAttributes().isEmpty()\n-                    && object.getResource() != null\n-                    && (PropagationOperation.DELETE == object.getPropagationOperation() || object.getSyncopeUser() != null);\n+                    && object.getResource() != null;\n \n             if (isValid) {\n                 List<TaskExec> executions = object.getExecs();"},{"sha":"26b6ecc8f639831ea1c1497503210a34c5a17360","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationByResource.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationByResource.java?ref=b845ad3c7a8a4632af7207129224b86049a45ddc","patch":"@@ -27,8 +27,7 @@\n import org.apache.syncope.types.PropagationOperation;\n \n /**\n- * Utility class for encapsulating operations to be performed on various\n- * resources.\n+ * Utility class for encapsulating operations to be performed on various resources.\n  */\n public class PropagationByResource implements Serializable {\n \n@@ -66,9 +65,8 @@ public PropagationByResource() {\n     }\n \n     /**\n-     * Avoid potential conflicts by not doing create or update on any\n-     * resource for which a delete is requested, and by not doing any create\n-     * on any resource for which an update is requested.\n+     * Avoid potential conflicts by not doing create or update on any resource for which a delete is requested, and by\n+     * not doing any create on any resource for which an update is requested.\n      */\n     public final void purge() {\n         toBeCreated.removeAll(toBeDeleted);\n@@ -85,7 +83,6 @@ public final void purge() {\n      * @return whether the operation was successful or not\n      */\n     public final boolean add(final PropagationOperation type, final String resourceName) {\n-\n         Set<String> set;\n         switch (type) {\n             case CREATE:\n@@ -113,7 +110,6 @@ public final boolean add(final PropagationOperation type, final String resourceN\n      * @return whether the operation was successful or not\n      */\n     public boolean addAll(final PropagationOperation type, final Set<String> resourceNames) {\n-\n         Set<String> set;\n         switch (type) {\n             case CREATE:\n@@ -141,7 +137,6 @@ public boolean addAll(final PropagationOperation type, final Set<String> resourc\n      * @return whether the operation was successful or not\n      */\n     public final boolean remove(final PropagationOperation type, final String resourceName) {\n-\n         boolean result = false;\n \n         switch (type) {\n@@ -200,7 +195,6 @@ public final Set<String> get(final PropagationOperation type) {\n     public final void set(final PropagationOperation type, final Set<String> resourceNames) {\n \n         switch (type) {\n-\n             case CREATE:\n                 toBeCreated.clear();\n                 toBeCreated.addAll(resourceNames);\n@@ -235,8 +229,7 @@ public final void merge(final PropagationByResource propByRes) {\n     /**\n      * whether no operations are present.\n      *\n-     * @return true if no operations (create / update / delete) and no\n-     * old account ids are present\n+     * @return true if no operations (create / update / delete) and no old account ids are present\n      */\n     public final boolean isEmpty() {\n         return toBeCreated.isEmpty() && toBeUpdated.isEmpty() && toBeDeleted.isEmpty() && oldAccountIds.isEmpty();\n@@ -268,15 +261,16 @@ public String getOldAccountId(final String resourceName) {\n      * @param oldAccountId old account id\n      */\n     public void addOldAccountId(final String resourceName, final String oldAccountId) {\n-\n         if (resourceName != null && oldAccountId != null) {\n             oldAccountIds.put(resourceName, oldAccountId);\n         }\n     }\n \n     @Override\n     public String toString() {\n-        return \"To be Created: \" + toBeCreated + \";\\n\" + \"To be Updated: \" + toBeUpdated + \";\\n\" + \"To be Deleted: \"\n-                + toBeDeleted + \";\\n\" + \"Old account Ids: \" + oldAccountIds;\n+        return \"To be Created: \" + toBeCreated + \";\\n\"\n+                + \"To be Updated: \" + toBeUpdated + \";\\n\"\n+                + \"To be Deleted: \" + toBeDeleted + \";\\n\"\n+                + \"Old account Ids: \" + oldAccountIds;\n     }\n }"},{"sha":"04eed3809c143e6ff0f9147b44c02b334d4e27c1","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":75,"deletions":65,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=b845ad3c7a8a4632af7207129224b86049a45ddc","patch":"@@ -35,7 +35,6 @@\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n-import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SchemaMapping;\n@@ -183,7 +182,7 @@ public List<PropagationTask> getCreateTaskIds(final WorkflowResult<Map.Entry<Lon\n             propByRes.get(PropagationOperation.CREATE).removeAll(syncResourceNames);\n         }\n \n-        return provision(user, password, wfResult.getResult().getValue(), propByRes);\n+        return provision(user, password, wfResult.getResult().getValue(), false, propByRes);\n     }\n \n     /**\n@@ -285,7 +284,7 @@ private List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final Pro\n             localPropByRes.get(PropagationOperation.DELETE).removeAll(syncResourceNames);\n         }\n \n-        return provision(user, password, enable, localPropByRes);\n+        return provision(user, password, enable, false, localPropByRes);\n     }\n \n     /**\n@@ -324,7 +323,7 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId, final String sy\n             propByRes.get(PropagationOperation.DELETE).remove(syncResourceName);\n         }\n \n-        return provision(user, null, false, propByRes);\n+        return provision(user, null, false, true, propByRes);\n     }\n \n     /**\n@@ -367,12 +366,16 @@ private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mappin\n \n         final String extAttrName = SchemaMappingUtil.getExtAttrName(mapping);\n \n-        LOG.debug(\"Define mapping for: \" + \"\\n* ExtAttrName \" + extAttrName + \"\\n* is accountId \"\n-                + mapping.isAccountid() + \"\\n* is password \"\n-                + (mapping.isPassword() || mapping.getIntMappingType().equals(IntMappingType.Password))\n-                + \"\\n* mandatory condition \" + mapping.getMandatoryCondition() + \"\\n* Schema \"\n-                + mapping.getIntAttrName() + \"\\n* IntMappingType \" + mapping.getIntMappingType().toString()\n-                + \"\\n* ClassType \" + schemaType.getClassName() + \"\\n* Values \" + values);\n+        LOG.debug(\"Define mapping for: \"\n+                + \"\\n* ExtAttrName \" + extAttrName\n+                + \"\\n* is accountId \" + mapping.isAccountid()\n+                + \"\\n* is password \" + (mapping.isPassword() || mapping.getIntMappingType().equals(\n+                IntMappingType.Password))\n+                + \"\\n* mandatory condition \" + mapping.getMandatoryCondition()\n+                + \"\\n* Schema \" + mapping.getIntAttrName()\n+                + \"\\n* IntMappingType \" + mapping.getIntMappingType().toString()\n+                + \"\\n* ClassType \" + schemaType.getClassName()\n+                + \"\\n* Values \" + values);\n \n         List<Object> objValues = new ArrayList<Object>();\n \n@@ -387,18 +390,13 @@ private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mappin\n         Map.Entry<String, Attribute> res;\n \n         if (mapping.isAccountid()) {\n-\n             res = new DefaultMapEntry(objValues.iterator().next().toString(), null);\n-\n         } else if (mapping.isPassword()) {\n-\n-            res = new DefaultMapEntry(null, AttributeBuilder.buildPassword(objValues.iterator().next().toString().\n-                    toCharArray()));\n-\n+            res = new DefaultMapEntry(null,\n+                    AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));\n         } else {\n             if (schema != null && schema.isMultivalue()) {\n                 res = new DefaultMapEntry(null, AttributeBuilder.build(extAttrName, objValues));\n-\n             } else {\n                 res = new DefaultMapEntry(null, objValues.isEmpty()\n                         ? AttributeBuilder.build(extAttrName)\n@@ -421,8 +419,8 @@ private Map.Entry<String, Attribute> prepareAttribute(final SchemaMapping mappin\n     private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser user, final String password,\n             final Boolean enable, final ExternalResource resource) {\n \n-        LOG.debug(\"Preparing resource attributes for {}\" + \" on resource {}\" + \" with attributes {}\", new Object[]{\n-                    user, resource, user.getAttributes()});\n+        LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n+                new Object[]{user, resource, user.getAttributes()});\n \n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n@@ -496,11 +494,12 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n      * @param user user to be provisioned\n      * @param password cleartext password to be provisioned\n      * @param enable whether user must be enabled or not\n+     * @param deleteOnResource whether user must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n      * @return list of propagation tasks created\n      */\n     protected List<PropagationTask> provision(final SyncopeUser user, final String password, final Boolean enable,\n-            final PropagationByResource propByRes) {\n+            final boolean deleteOnResource, final PropagationByResource propByRes) {\n \n         LOG.debug(\"Provisioning with user {}:\\n{}\", user, propByRes);\n \n@@ -519,16 +518,16 @@ protected List<PropagationTask> provision(final SyncopeUser user, final String p\n             }\n \n             for (ExternalResource resource : resourcesByPriority) {\n-\n                 PropagationTask task = new PropagationTask();\n                 task.setResource(resource);\n-                task.setSyncopeUser(user);\n+                if (!deleteOnResource) {\n+                    task.setSyncopeUser(user);\n+                }\n                 task.setPropagationOperation(operation);\n                 task.setPropagationMode(resource.getPropagationMode());\n                 task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n                 Map.Entry<String, Set<Attribute>> preparedAttrs = prepareAttributes(user, password, enable, resource);\n-\n                 task.setAccountId(preparedAttrs.getKey());\n                 task.setAttributes(preparedAttrs.getValue());\n \n@@ -550,6 +549,7 @@ public void execute(final List<PropagationTask> tasks)\n      * Execute a list of PropagationTask, in given order.\n      *\n      * @param tasks to be execute, in given order\n+     * @param handler propagation handler\n      * @throws PropagationException if propagation goes wrong: propagation is interrupted as soon as the result of the\n      * communication with a primary resource is in error\n      */\n@@ -573,7 +573,6 @@ public void execute(final List<PropagationTask> tasks, final PropagationHandler\n                 execStatus = PropagationTaskExecStatus.FAILURE;\n             }\n             if (task.getResource().isPropagationPrimary() && !execStatus.isSuccessful()) {\n-\n                 throw new PropagationException(task.getResource().getName(), execution.getMessage());\n             }\n         }\n@@ -648,15 +647,10 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n         ConnectorObject after = null;\n \n         try {\n-            final ConnInstance connInstance = task.getResource().getConnector();\n-\n             final ConnectorFacadeProxy connector = connLoader.getConnector(task.getResource());\n-\n             if (connector == null) {\n-                final String msg = String.format(\"Connector instance bean for resource %s and \"\n-                        + \"connInstance %s not found\", task.getResource(), connInstance);\n-\n-                throw new NoSuchBeanDefinitionException(msg);\n+                throw new NoSuchBeanDefinitionException(String.format(\n+                        \"Connector instance bean for resource %s not found\", task.getResource()));\n             }\n \n             // Try to read user BEFORE any actual operation\n@@ -669,26 +663,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                         // set of attributes to be propagated\n                         final Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n \n-                        if (before != null) {\n-\n-                            // 1. check if rename is really required\n-                            final Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n-\n-                            LOG.debug(\"Rename required with value {}\", newName);\n-\n-                            if (newName != null && newName.equals(before.getName())\n-                                    && !before.getUid().getUidValue().equals(newName.getNameValue())) {\n-\n-                                LOG.debug(\"Remote object name unchanged\");\n-                                attributes.remove(newName);\n-                            }\n-\n-                            LOG.debug(\"Attributes to be replaced {}\", attributes);\n-\n-                            // 2. update with a new \"normalized\" attribute set\n-                            connector.update(task.getPropagationMode(), ObjectClass.ACCOUNT, before.getUid(),\n-                                    attributes, null, propagationAttempted);\n-                        } else {\n+                        if (before == null) {\n                             // 1. get accountId\n                             final String accountId = task.getAccountId();\n \n@@ -713,17 +688,59 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                             // 4. provision entry\n                             connector.create(task.getPropagationMode(), ObjectClass.ACCOUNT, attributes, null,\n                                     propagationAttempted);\n+                        } else {\n+\n+                            // 1. check if rename is really required\n+                            final Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n+\n+                            LOG.debug(\"Rename required with value {}\", newName);\n+\n+                            if (newName != null && newName.equals(before.getName())\n+                                    && !before.getUid().getUidValue().equals(newName.getNameValue())) {\n+\n+                                LOG.debug(\"Remote object name unchanged\");\n+                                attributes.remove(newName);\n+                            }\n+\n+                            LOG.debug(\"Attributes to be replaced {}\", attributes);\n+\n+                            // 2. update with a new \"normalized\" attribute set\n+                            connector.update(task.getPropagationMode(), ObjectClass.ACCOUNT, before.getUid(),\n+                                    attributes, null, propagationAttempted);\n                         }\n                         break;\n \n                     case DELETE:\n                         if (before == null) {\n-                            LOG.debug(\"{} not found on external resource:\" + \" ignoring delete\", task.getAccountId());\n+                            LOG.debug(\"{} not found on external resource: ignoring delete\", task.getAccountId());\n                         } else {\n-                            final SyncopeUser user = getSyncopeUser(task.getSyncopeUser().getId());\n+                            /*\n+                             * We must choose here whether to\n+                             *  a. actually delete the provided user from the external resource\n+                             *  b. just update the provided user data onto the external resource\n+                             *\n+                             * (a) happens when either there is no user associated with the PropagationTask (this takes\n+                             * place when the task is generated via UserController.delete()) or the provided updated\n+                             * user hasn't the current resource assigned (when the task is generated via\n+                             * UserController.update()).\n+                             *\n+                             * (b) happens when the provided updated user does have the current resource assigned\n+                             * (when the task is generated via UserController.update()): this basically means that\n+                             * before such update, this user used to have the current resource assigned by more than\n+                             * one mean (for example, two different memberships with the same resource).\n+                             */\n+\n+                            SyncopeUser user = null;\n+                            if (task.getSyncopeUser() != null) {\n+                                try {\n+                                    user = getSyncopeUser(task.getSyncopeUser().getId());\n+                                } catch (NotFoundException e) {\n+                                    LOG.warn(\"Requesting to delete a non-existing user from {}\",\n+                                            task.getResource().getName(), e);\n+                                }\n+                            }\n \n                             if (user == null || !user.getResourceNames().contains(task.getResource().getName())) {\n-                                // perform de-provisioning\n                                 LOG.debug(\"Perform deprovisioning on {}\", task.getResource().getName());\n \n                                 connector.delete(\n@@ -733,10 +750,6 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                                         null,\n                                         propagationAttempted);\n                             } else {\n-                                // Update remote profile.\n-                                // This is absolutely needed because otherwise the resource won't be updated: \n-                                // resources to be deleted won't be considered by UserDataBinder.update() for the update\n-                                // but, often, this have to be done.\n                                 LOG.debug(\"Update remote object on {}\", task.getResource().getName());\n \n                                 connector.update(\n@@ -762,12 +775,10 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n \n                 // Try to read user AFTER any actual operation\n                 after = getRemoteObject(connector, task, true);\n-\n             } catch (Exception e) {\n                 after = getRemoteObject(connector, task, false);\n                 throw e;\n             }\n-\n         } catch (Exception e) {\n             LOG.error(\"Exception during provision on resource \" + task.getResource().getName(), e);\n \n@@ -808,12 +819,11 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n \n                 taskDAO.save(task);\n \n-                // Flush call is needed to value the id field of execution (used by deal test of TaskTestITCase).\n+                // This flush call is needed to generate a value for the execution id\n+                // An alternative to this would be the following statement that might cause troubles with\n+                // concurrent calls.\n+                // taskExecDAO.findLatestStarted(task);\n                 taskDAO.flush();\n-\n-                // An alternative to the flush call could be the following statement but we should accept the risk to  \n-                // have a not so probable trouble coming from concurrent calls.\n-                //final TaskExec latestExec = taskExecDAO.findLatestStarted(taskDAO.save(task));\n             }\n         }\n "},{"sha":"b6bcbaa7ac68d10e177f91b4c9a49a4301f8e0b2","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":44,"deletions":10,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845ad3c7a8a4632af7207129224b86049a45ddc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=b845ad3c7a8a4632af7207129224b86049a45ddc","patch":"@@ -308,13 +308,13 @@ public void issue186() {\n         }\n         assertNull(sce);\n     }\n-    \n+\n     @Test\n     public void testMandatoryContraintsUserCreation() {\n         UserTO userTO = getSampleTO(\"issue183@apache.org\");\n         userTO.addResource(\"ws-target-resource-2\");\n         userTO.setPassword(\"newPassword\");\n-        \n+\n         AttributeTO type = null;\n         for (AttributeTO attr : userTO.getAttributes()) {\n             if (\"type\".equals(attr.getSchema())) {\n@@ -331,9 +331,9 @@ public void testMandatoryContraintsUserCreation() {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n         assertNotNull(sce);\n-        \n+\n         userTO.addAttribute(type);\n-        \n+\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n     }\n@@ -552,7 +552,8 @@ public void create() {\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n-        Boolean verify = restTemplate.getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=password123\",\n+        Boolean verify = restTemplate.\n+                getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password=password123\",\n                 Boolean.class, newUserTO.getUsername());\n         assertTrue(verify);\n \n@@ -868,7 +869,8 @@ public void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n+        users = Arrays.\n+                asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\", UserTO[].class, 2, 2));\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n@@ -1435,7 +1437,8 @@ public void suspendReactivateOnResource() {\n         ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n                 + \"/resource/{resourceName}/read/{objectId}.json\", ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n+                getValues().\n                 get(0)));\n \n         String ldapUID = userTO.getUsername();\n@@ -1456,7 +1459,8 @@ public void suspendReactivateOnResource() {\n         connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n                 ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n+                getValues().\n                 get(0)));\n \n         query = \"?resourceNames=\" + dbTable.getName() + \"&performLocally=true\"; // check also performLocally\n@@ -1469,7 +1473,8 @@ public void suspendReactivateOnResource() {\n         connObjectTO = restTemplate.getForObject(BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n                 ConnObjectTO.class, dbTable.getName(), dbTableUID);\n \n-        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).getValues().\n+        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME).\n+                getValues().\n                 get(0)));\n     }\n \n@@ -1911,7 +1916,6 @@ public void issueSYNCOPE111() {\n         userTO.addResource(\"resource-ldap\");\n \n         UserTO actual = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n-\n         assertNotNull(actual);\n         assertEquals(2, actual.getMemberships().size());\n \n@@ -1966,4 +1970,34 @@ public void issueSYNCOPE111() {\n         assertTrue(title.getValues().contains(\"r13\"));\n         // -----------------------------------\n     }\n+\n+    @Test\n+    public void issueSYNCOPE185() {\n+        // 1. create user with LDAP resource, succesfully propagated\n+        UserTO userTO = getSampleTO(\"syncope185@syncope.apache.org\");\n+        userTO.getVirtualAttributes().clear();\n+        userTO.addResource(\"resource-ldap\");\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(userTO);\n+        assertFalse(userTO.getPropagationTOs().isEmpty());\n+        assertEquals(\"resource-ldap\", userTO.getPropagationTOs().get(0).getResourceName());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, userTO.getPropagationTOs().get(0).getStatus());\n+\n+        // 2. delete this user\n+        restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userTO.getId());\n+\n+        // 3. try (and fail) to find this user on the external LDAP resource\n+        SyncopeClientException sce = null;\n+        try {\n+            ConnObjectTO connObjectTO = restTemplate.getForObject(\n+                    BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+                    ConnObjectTO.class, \"resource-ldap\", userTO.getUsername());\n+            fail(\"This entry should not be present on this resource\");\n+        } catch (SyncopeClientCompositeErrorException sccee) {\n+            sce = sccee.getException(SyncopeClientExceptionType.NotFound);\n+\n+        }\n+        assertNotNull(sce);\n+    }\n }"}]}