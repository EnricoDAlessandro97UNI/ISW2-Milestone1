{"sha":"f40236adf4c68abd10776a0a9890028901c8f8a1","node_id":"C_kwDOJfYA1toAKGY0MDIzNmFkZjRjNjhhYmQxMDc3NmEwYTk4OTAwMjg5MDFjOGY4YTE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-09-28T06:43:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-09-28T09:04:34Z"},"message":"Various upgrades","tree":{"sha":"34cdfc73b51715ef96566ad261cfb4e8515c338a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/34cdfc73b51715ef96566ad261cfb4e8515c338a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f40236adf4c68abd10776a0a9890028901c8f8a1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f40236adf4c68abd10776a0a9890028901c8f8a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f40236adf4c68abd10776a0a9890028901c8f8a1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f40236adf4c68abd10776a0a9890028901c8f8a1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"01b8e28879760f9f30778678c688d3b822db40ce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/01b8e28879760f9f30778678c688d3b822db40ce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/01b8e28879760f9f30778678c688d3b822db40ce"}],"stats":{"total":167,"additions":94,"deletions":73},"files":[{"sha":"b313dca022a2f46001dfe362aeee266a8f509862","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":25,"deletions":7,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=f40236adf4c68abd10776a0a9890028901c8f8a1","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.ext.elasticsearch.client;\n \n import java.io.IOException;\n-import java.util.concurrent.ExecutionException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.elasticsearch.ElasticsearchStatusException;\n import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n import org.elasticsearch.action.delete.DeleteRequest;\n import org.elasticsearch.action.delete.DeleteResponse;\n@@ -109,19 +109,37 @@ public XContentBuilder defaultMapping() throws IOException {\n                 endObject();\n     }\n \n-    public void createIndex(\n+    protected CreateIndexResponse doCreateIndex(\n             final String domain,\n             final AnyTypeKind kind,\n             final XContentBuilder settings,\n-            final XContentBuilder mapping)\n-            throws InterruptedException, ExecutionException, IOException {\n+            final XContentBuilder mapping) throws IOException {\n \n-        CreateIndexResponse response = client.indices().create(\n+        return client.indices().create(\n                 new CreateIndexRequest(ElasticsearchUtils.getContextDomainName(domain, kind)).\n                         settings(settings).\n                         mapping(mapping), RequestOptions.DEFAULT);\n-        LOG.debug(\"Successfully created {} for {}: {}\",\n-                ElasticsearchUtils.getContextDomainName(domain, kind), kind.name(), response);\n+    }\n+\n+    public void createIndex(\n+            final String domain,\n+            final AnyTypeKind kind,\n+            final XContentBuilder settings,\n+            final XContentBuilder mapping)\n+            throws IOException {\n+\n+        try {\n+            CreateIndexResponse response = doCreateIndex(domain, kind, settings, mapping);\n+\n+            LOG.debug(\"Successfully created {} for {}: {}\",\n+                    ElasticsearchUtils.getContextDomainName(domain, kind), kind.name(), response);\n+        } catch (ElasticsearchStatusException e) {\n+            LOG.debug(\"Could not create index {} because it already exists\",\n+                    ElasticsearchUtils.getContextDomainName(domain, kind), e);\n+\n+            removeIndex(domain, kind);\n+            doCreateIndex(domain, kind, settings, mapping);\n+        }\n     }\n \n     public void removeIndex(final String domain, final AnyTypeKind kind) throws IOException {"},{"sha":"7b3377529f808da58e86cf008ac5832deec7a797","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":18,"deletions":23,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=f40236adf4c68abd10776a0a9890028901c8f8a1","patch":"@@ -70,6 +70,7 @@\n import org.elasticsearch.action.search.SearchType;\n import org.elasticsearch.client.RequestOptions;\n import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.core.CountRequest;\n import org.elasticsearch.index.query.DisMaxQueryBuilder;\n import org.elasticsearch.index.query.MatchAllQueryBuilder;\n import org.elasticsearch.index.query.MatchNoneQueryBuilder;\n@@ -165,13 +166,10 @@ protected Triple<Optional<QueryBuilder>, Set<String>, Set<String>> getAdminRealm\n                 groupOwners);\n     }\n \n-    protected SearchRequest searchRequest(\n+    protected QueryBuilder getQueryBuilder(\n             final Set<String> adminRealms,\n             final SearchCond cond,\n-            final AnyTypeKind kind,\n-            final int from,\n-            final int size,\n-            final List<SortBuilder<?>> sortBuilders) {\n+            final AnyTypeKind kind) {\n \n         Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = getAdminRealmsFilter(kind, adminRealms);\n         QueryBuilder queryBuilder;\n@@ -187,22 +185,16 @@ protected SearchRequest searchRequest(\n             }\n         }\n \n-        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().\n-                query(queryBuilder).\n-                from(from).\n-                size(size);\n-        sortBuilders.forEach(sourceBuilder::sort);\n-\n-        return new SearchRequest(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n-                searchType(SearchType.QUERY_THEN_FETCH).\n-                source(sourceBuilder);\n+        return queryBuilder;\n     }\n \n     @Override\n     protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n-        SearchRequest request = searchRequest(adminRealms, cond, kind, 0, 0, List.of());\n+        CountRequest request = new CountRequest(\n+                ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n+                query(getQueryBuilder(adminRealms, cond, kind));\n         try {\n-            return (int) client.search(request, RequestOptions.DEFAULT).getHits().getTotalHits().value;\n+            return (int) client.count(request, RequestOptions.DEFAULT).getCount();\n         } catch (IOException e) {\n             LOG.error(\"Search error\", e);\n             return 0;\n@@ -250,13 +242,16 @@ protected <T extends Any<?>> List<T> doSearch(\n             final List<OrderByClause> orderBy,\n             final AnyTypeKind kind) {\n \n-        SearchRequest request = searchRequest(\n-                adminRealms,\n-                cond,\n-                kind,\n-                (itemsPerPage * (page <= 0 ? 0 : page - 1)),\n-                (itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage),\n-                sortBuilders(kind, orderBy));\n+        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().\n+                query(getQueryBuilder(adminRealms, cond, kind)).\n+                from(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n+                size(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage);\n+        sortBuilders(kind, orderBy).forEach(sourceBuilder::sort);\n+\n+        SearchRequest request = new SearchRequest(\n+                ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n+                searchType(SearchType.QUERY_THEN_FETCH).\n+                source(sourceBuilder);\n \n         SearchHit[] esResult = null;\n         try {"},{"sha":"2fa9a54506af9f66ae8782325ec1b9a3e46dcd3c","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=f40236adf4c68abd10776a0a9890028901c8f8a1","patch":"@@ -46,10 +46,13 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.action.search.SearchType;\n import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n@@ -153,14 +156,22 @@ public void searchRequest_groupOwner() throws IOException {\n             AnyCond anyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n             anyCond.setSchema(\"id\");\n \n-            SearchRequest searchRequest = searchDAO.searchRequest(\n-                    adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER, 1, 10, List.of());\n+            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().\n+                    query(searchDAO.getQueryBuilder(adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER)).\n+                    from(1).\n+                    size(10);\n+            searchDAO.sortBuilders(AnyTypeKind.USER, List.of()).forEach(sourceBuilder::sort);\n+\n+            SearchRequest request = new SearchRequest(\n+                    ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n+                    searchType(SearchType.QUERY_THEN_FETCH).\n+                    source(sourceBuilder);\n \n             assertEquals(\n                     QueryBuilders.boolQuery().\n                             must(QueryBuilders.existsQuery(\"id\")).\n                             must(QueryBuilders.termQuery(\"memberships\", \"groupKey\")),\n-                    searchRequest.source().query());\n+                    request.source().query());\n         }\n     }\n }"},{"sha":"6ae2d34bb539523551d8042d6201ac4b5d9d1a75","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":18,"deletions":15,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f40236adf4c68abd10776a0a9890028901c8f8a1/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=f40236adf4c68abd10776a0a9890028901c8f8a1","patch":"@@ -92,21 +92,12 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n             LOG.debug(\"Start rebuilding indexes\");\n \n             try {\n-                if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER)) {\n-                    indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER);\n-                }\n                 indexManager.createIndex(\n                         AuthContextUtils.getDomain(), AnyTypeKind.USER, userSettings(), userMapping());\n \n-                if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP)) {\n-                    indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP);\n-                }\n                 indexManager.createIndex(\n                         AuthContextUtils.getDomain(), AnyTypeKind.GROUP, groupSettings(), groupMapping());\n \n-                if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)) {\n-                    indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT);\n-                }\n                 indexManager.createIndex(\n                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT, anyObjectSettings(), anyObjectMapping());\n \n@@ -118,8 +109,12 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                                         AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n                                 id(user).\n                                 source(utils.builder(userDAO.find(user), AuthContextUtils.getDomain()));\n-                        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n-                        LOG.debug(\"Index successfully created for {}: {}\", user, response);\n+                        try {\n+                            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n+                            LOG.debug(\"Index successfully created for {}: {}\", user, response);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.USER, user);\n+                        }\n                     }\n                 }\n \n@@ -131,8 +126,12 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                                         AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n                                 id(group).\n                                 source(utils.builder(groupDAO.find(group), AuthContextUtils.getDomain()));\n-                        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n-                        LOG.debug(\"Index successfully created for {}: {}\", group, response);\n+                        try {\n+                            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n+                            LOG.debug(\"Index successfully created for {}: {}\", group, response);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.GROUP, group);\n+                        }\n                     }\n                 }\n \n@@ -144,8 +143,12 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n                                         AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)).\n                                 id(anyObject).\n                                 source(utils.builder(anyObjectDAO.find(anyObject), AuthContextUtils.getDomain()));\n-                        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n-                        LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n+                        try {\n+                            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n+                            LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Could not create index for {} {}\", AnyTypeKind.ANY_OBJECT, anyObject);\n+                        }\n                     }\n                 }\n "},{"sha":"1eb83dc8142fc6b69f16e1d78d88a3e1093cd4db","filename":"pom.xml","status":"modified","additions":19,"deletions":25,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f40236adf4c68abd10776a0a9890028901c8f8a1/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f40236adf4c68abd10776a0a9890028901c8f8a1/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=f40236adf4c68abd10776a0a9890028901c8f8a1","patch":"@@ -407,12 +407,12 @@ under the License.\n \n     <cxf.version>3.4.4</cxf.version>\n     <bouncycastle.version>1.69</bouncycastle.version>\n-    <nimbus-jose-jwt.version>9.13</nimbus-jose-jwt.version>\n+    <nimbus-jose-jwt.version>9.15.1</nimbus-jose-jwt.version>\n \n     <jackson.version>2.12.5</jackson.version>\n \n     <spring-boot.version>2.5.5</spring-boot.version>\n-    <spring-cloud-gateway.version>3.0.3</spring-cloud-gateway.version>\n+    <spring-cloud-gateway.version>3.0.4</spring-cloud-gateway.version>\n \n     <openjpa.version>3.2.0</openjpa.version>\n     <hikaricp.version>5.0.0</hikaricp.version>\n@@ -432,7 +432,7 @@ under the License.\n \n     <slf4j.version>2.0.0-alpha5</slf4j.version>\n \n-    <elasticsearch.version>7.14.0</elasticsearch.version>\n+    <elasticsearch.version>7.15.0</elasticsearch.version>\n \n     <apacheds.version>2.0.0.AM26</apacheds.version>\n     <apachedirapi.version>2.0.0</apachedirapi.version>\n@@ -456,13 +456,13 @@ under the License.\n     <h2.version>1.4.200</h2.version>\n \n     <swagger-core.version>2.1.10</swagger-core.version>\n-    <swagger-ui.version>3.51.2</swagger-ui.version>\n+    <swagger-ui.version>3.52.1</swagger-ui.version>\n \n     <jquery-slimscroll.version>1.3.8</jquery-slimscroll.version>\n     <jquery-cookie.version>1.4.1-1</jquery-cookie.version>\n \n     <bootbox.version>5.5.2</bootbox.version>\n-    <font-awesome.version>5.15.3</font-awesome.version>\n+    <font-awesome.version>5.15.4</font-awesome.version>\n     <ionicons.version>2.0.1</ionicons.version>\n     <highlightjs.version>10.1.2</highlightjs.version>\n     <codemirror.version>5.62.2</codemirror.version>\n@@ -471,7 +471,7 @@ under the License.\n     <chartjs.version>1.0.2</chartjs.version>\n \n     <wicket.version>9.5.0</wicket.version>\n-    <wicketstuff.version>9.4.0</wicketstuff.version>\n+    <wicketstuff.version>9.5.0</wicketstuff.version>\n     <wicket-jqueryui.version>9.3.2</wicket-jqueryui.version>\n     <wicket-bootstrap.version>5.0.5</wicket-bootstrap.version>\n     <wicket-spring-boot.version>3.0.4</wicket-spring-boot.version>\n@@ -513,11 +513,11 @@ under the License.\n     <docker.mysql.version>8.0</docker.mysql.version>\n     <docker.mariadb.version>10.6</docker.mariadb.version>\n \n-    <jdbc.postgresql.version>42.2.23</jdbc.postgresql.version>\n+    <jdbc.postgresql.version>42.2.24</jdbc.postgresql.version>\n     <jdbc.mysql.version>8.0.22</jdbc.mysql.version>\n     <jdbc.mariadb.version>2.7.3</jdbc.mariadb.version>\n-    <jdbc.mssql.version>9.2.1.jre</jdbc.mssql.version>\n-    <jdbc.oracle.version>21.1.0.0</jdbc.oracle.version>\n+    <jdbc.mssql.version>9.4.0.jre</jdbc.mssql.version>\n+    <jdbc.oracle.version>21.3.0.0</jdbc.oracle.version>\n \n     <conf.directory>${project.build.directory}/test-classes</conf.directory>\n     <bundles.directory>${project.build.directory}/bundles</bundles.directory>\n@@ -1893,12 +1893,6 @@ under the License.\n         <version>${spring-cloud-gateway.version}</version>\n         <scope>test</scope>\n       </dependency>\n-      <dependency>\n-        <groupId>org.eclipse.jetty</groupId>\n-        <artifactId>jetty-client</artifactId>\n-        <version>9.4.20.v20190813</version>\n-        <scope>test</scope>\n-      </dependency>\n \n       <dependency>\n         <groupId>org.slf4j</groupId>\n@@ -2207,7 +2201,7 @@ under the License.\n             <dependency>\n               <groupId>com.puppycrawl.tools</groupId>\n               <artifactId>checkstyle</artifactId>\n-              <version>8.45.1</version>\n+              <version>9.0</version>\n             </dependency>\n           </dependencies>\n           <configuration>\n@@ -2554,24 +2548,24 @@ under the License.\n             <link>http://www.slf4j.org/api/</link>\n             <link>http://connid.tirasa.net/apidocs/1.5/</link>\n             <link>http://cxf.apache.org/javadoc/latest/</link>\n-            <link>http://fasterxml.github.io/jackson-core/javadoc/2.11/</link>\n-            <link>http://fasterxml.github.io/jackson-databind/javadoc/2.11/</link>\n-            <link>http://fasterxml.github.io/jackson-annotations/javadoc/2.11/</link>\n-            <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.11/</link>\n-            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/yaml/2.11/</link>\n-            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/csv/2.11/</link>\n+            <link>http://fasterxml.github.io/jackson-core/javadoc/2.12/</link>\n+            <link>http://fasterxml.github.io/jackson-databind/javadoc/2.12/</link>\n+            <link>http://fasterxml.github.io/jackson-annotations/javadoc/2.12/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.12/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/yaml/2.12/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/csv/2.12/</link>\n             <link>https://www.javadoc.io/doc/org.apache.camel/camel-core/latest/</link>\n             <link>https://www.javadoc.io/doc/org.apache.camel/camel-spring/latest/</link>\n             <link>https://ci.apache.org/projects/wicket/apidocs/9.x/</link>\n             <link>https://commons.apache.org/proper/commons-lang/javadocs/api-release/</link>\n             <link>https://commons.apache.org/proper/commons-jexl/apidocs/</link>\n-            <link>https://tika.apache.org/1.25/api/</link>\n+            <link>https://tika.apache.org/2.1.0/api/</link>\n             <link>https://docs.spring.io/spring-boot/docs/current/api/</link>\n             <link>https://docs.spring.io/spring/docs/current/javadoc-api/</link>\n             <link>https://docs.spring.io/spring-security/site/docs/current/api/</link>\n             <link>http://www.flowable.org/docs/javadocs/</link>\n-            <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/4.0.1/apidocs/</link>\n-            <link>http://docs.swagger.io/swagger-core/v2.1.6/apidocs/</link>\n+            <link>https://build.shibboleth.net/nexus/content/sites/site/java-opensaml/4.1.1/apidocs/</link>\n+            <link>http://docs.swagger.io/swagger-core/v2.1.10/apidocs/</link>\n           </links>\n         </configuration>\n         <reportSets>"}]}