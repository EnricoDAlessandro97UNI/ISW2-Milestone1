{"sha":"fc0b8595d889682fcb56652a124ba959e505207e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZjMGI4NTk1ZDg4OTY4MmZjYjU2NjUyYTEyNGJhOTU5ZTUwNTIwN2U=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-06T11:30:32Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-06T11:30:32Z"},"message":"Fixes issue 237\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247235 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed2c53c6b9fd65dffc43978d347cf0f41e43840a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ed2c53c6b9fd65dffc43978d347cf0f41e43840a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fc0b8595d889682fcb56652a124ba959e505207e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc0b8595d889682fcb56652a124ba959e505207e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fc0b8595d889682fcb56652a124ba959e505207e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc0b8595d889682fcb56652a124ba959e505207e/comments","author":null,"committer":null,"parents":[{"sha":"a2c4c603527c76b1a723b19dfca9d29424c50506","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a2c4c603527c76b1a723b19dfca9d29424c50506","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a2c4c603527c76b1a723b19dfca9d29424c50506"}],"stats":{"total":155,"additions":74,"deletions":81},"files":[{"sha":"4613306e35e6696484a4ea97188671713952332a","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=fc0b8595d889682fcb56652a124ba959e505207e","patch":"@@ -48,49 +48,44 @@ public abstract class AbstractAttrValue extends AbstractBaseBean {\n     public abstract Long getId();\n \n     public Boolean getBooleanValue() {\n-        if (booleanValue == null) {\n-            return null;\n-        }\n-        return isBooleanAsInteger(booleanValue);\n+        return booleanValue == null ? null : isBooleanAsInteger(booleanValue);\n     }\n \n-    public void setBooleanValue(Boolean booleanValue) {\n-        if (booleanValue == null) {\n-            this.booleanValue = null;\n-        } else {\n-            this.booleanValue = getBooleanAsInteger(booleanValue);\n-        }\n+    public void setBooleanValue(final Boolean booleanValue) {\n+        this.booleanValue = booleanValue == null\n+                ? null : getBooleanAsInteger(booleanValue);\n     }\n \n     public Date getDateValue() {\n-        return dateValue;\n+        return dateValue == null ? null : new Date(dateValue.getTime());\n     }\n \n-    public void setDateValue(Date dateValue) {\n-        this.dateValue = dateValue;\n+    public void setDateValue(final Date dateValue) {\n+        this.dateValue = dateValue == null\n+                ? null : new Date(dateValue.getTime());\n     }\n \n     public Double getDoubleValue() {\n         return doubleValue;\n     }\n \n-    public void setDoubleValue(Double doubleValue) {\n+    public void setDoubleValue(final Double doubleValue) {\n         this.doubleValue = doubleValue;\n     }\n \n     public Long getLongValue() {\n         return longValue;\n     }\n \n-    public void setLongValue(Long longValue) {\n+    public void setLongValue(final Long longValue) {\n         this.longValue = longValue;\n     }\n \n     public String getStringValue() {\n         return stringValue;\n     }\n \n-    public void setStringValue(String stringValue) {\n+    public void setStringValue(final String stringValue) {\n         this.stringValue = stringValue;\n     }\n "},{"sha":"147d28a61b872dc368924d2a9c47e5d7606c8108","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExec.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java?ref=fc0b8595d889682fcb56652a124ba959e505207e","patch":"@@ -75,10 +75,8 @@ public Date getEndDate() {\n         return endDate == null ? null : new Date(endDate.getTime());\n     }\n \n-    public void setEndDate(Date endDate) {\n-        if (endDate != null) {\n-            this.endDate = new Date(endDate.getTime());\n-        }\n+    public void setEndDate(final Date endDate) {\n+        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n     }\n \n     public String getMessage() {\n@@ -93,10 +91,9 @@ public Date getStartDate() {\n         return startDate == null ? null : new Date(startDate.getTime());\n     }\n \n-    public void setStartDate(Date startDate) {\n-        if (startDate != null) {\n-            this.startDate = new Date(startDate.getTime());\n-        }\n+    public void setStartDate(final Date startDate) {\n+        this.startDate = startDate == null\n+                ? null : new Date(startDate.getTime());\n     }\n \n     public Task getTask() {"},{"sha":"1f43a4493e2e26d4062bd59ec652bebe346e3cdb","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":44,"deletions":46,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=fc0b8595d889682fcb56652a124ba959e505207e","patch":"@@ -48,6 +48,7 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.RandomStringUtils;\n import org.hibernate.annotations.Type;\n import org.springframework.security.core.codec.Base64;\n@@ -72,8 +73,8 @@ public class SyncopeUser extends AbstractAttributable {\n \n     static {\n         try {\n-            keySpec = new SecretKeySpec(\n-                    \"1abcdefghilmnopqrstuvz2!\".getBytes(\"UTF8\"), \"AES\");\n+            keySpec = new SecretKeySpec(ArrayUtils.subarray(\n+                    \"1abcdefghilmnopqrstuvz2!\".getBytes(\"UTF8\"), 0, 16), \"AES\");\n         } catch (Exception e) {\n             LOG.error(\"Error during key specification\", e);\n         }\n@@ -171,23 +172,23 @@ public SyncopeUser() {\n         virtualAttributes = new ArrayList<UVirAttr>();\n         passwordHistory = new ArrayList<String>();\n         failedLogins = 0;\n-        suspended = 0;\n+        suspended = getBooleanAsInteger(Boolean.FALSE);\n     }\n \n     @Override\n     public Long getId() {\n         return id;\n     }\n \n-    public boolean addMembership(Membership membership) {\n+    public boolean addMembership(final Membership membership) {\n         return memberships.contains(membership) || memberships.add(membership);\n     }\n \n-    public boolean removeMembership(Membership membership) {\n-        return memberships == null || memberships.remove(membership);\n+    public boolean removeMembership(final Membership membership) {\n+        return memberships.remove(membership);\n     }\n \n-    public Membership getMembership(Long syncopeRoleId) {\n+    public Membership getMembership(final Long syncopeRoleId) {\n         Membership result = null;\n         Membership membership;\n         for (Iterator<Membership> itor = getMemberships().iterator();\n@@ -208,7 +209,7 @@ public List<Membership> getMemberships() {\n         return memberships;\n     }\n \n-    public void setMemberships(List<Membership> memberships) {\n+    public void setMemberships(final List<Membership> memberships) {\n         this.memberships.clear();\n         if (memberships != null && !memberships.isEmpty()) {\n             this.memberships.addAll(memberships);\n@@ -273,9 +274,6 @@ public void removeClearPassword() {\n         clearPassword = null;\n     }\n \n-    /**\n-     * @param password the password to be set\n-     */\n     public void setPassword(\n             final String password,\n             final CipherAlgorithm cipherAlgoritm,\n@@ -294,12 +292,12 @@ public void setPassword(\n     }\n \n     @Override\n-    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+    public <T extends AbstractAttr> boolean addAttribute(final T attribute) {\n         return attributes.add((UAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+    public <T extends AbstractAttr> boolean removeAttribute(final T attribute) {\n         return attributes.remove((UAttr) attribute);\n     }\n \n@@ -309,13 +307,13 @@ public List<? extends AbstractAttr> getAttributes() {\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttr> attributes) {\n+    public void setAttributes(final List<? extends AbstractAttr> attributes) {\n         this.attributes = (List<UAttr>) attributes;\n     }\n \n     @Override\n     public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n-            T derivedAttribute) {\n+            final T derivedAttribute) {\n \n         return derivedAttributes.add((UDerAttr) derivedAttribute);\n     }\n@@ -334,21 +332,21 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n \n     @Override\n     public void setDerivedAttributes(\n-            List<? extends AbstractDerAttr> derivedAttributes) {\n+            final List<? extends AbstractDerAttr> derivedAttributes) {\n \n         this.derivedAttributes = (List<UDerAttr>) derivedAttributes;\n     }\n \n     @Override\n     public <T extends AbstractVirAttr> boolean addVirtualAttribute(\n-            T virtualAttribute) {\n+            final T virtualAttribute) {\n \n         return virtualAttributes.add((UVirAttr) virtualAttribute);\n     }\n \n     @Override\n     public <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n-            T virtualAttribute) {\n+            final T virtualAttribute) {\n \n         return virtualAttributes.remove((UVirAttr) virtualAttribute);\n     }\n@@ -360,7 +358,7 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n \n     @Override\n     public void setVirtualAttributes(\n-            List<? extends AbstractVirAttr> virtualAttributes) {\n+            final List<? extends AbstractVirAttr> virtualAttributes) {\n \n         this.virtualAttributes = (List<UVirAttr>) virtualAttributes;\n     }\n@@ -399,7 +397,8 @@ public String getToken() {\n     }\n \n     public Date getTokenExpireTime() {\n-        return tokenExpireTime;\n+        return tokenExpireTime == null\n+                ? null : new Date(tokenExpireTime.getTime());\n     }\n \n     public boolean checkToken(final String token) {\n@@ -420,19 +419,21 @@ public List<String> getPasswordHistory() {\n     }\n \n     public Date getChangePwdDate() {\n-        return changePwdDate;\n+        return changePwdDate == null ? null : new Date(changePwdDate.getTime());\n     }\n \n     public void setChangePwdDate(final Date changePwdDate) {\n-        this.changePwdDate = changePwdDate;\n+        this.changePwdDate = changePwdDate == null\n+                ? null : new Date(changePwdDate.getTime());\n     }\n \n     public Date getCreationDate() {\n-        return creationDate;\n+        return creationDate == null ? null : new Date(creationDate.getTime());\n     }\n \n     public void setCreationDate(final Date creationDate) {\n-        this.creationDate = creationDate;\n+        this.creationDate = creationDate == null\n+                ? null : new Date(creationDate.getTime());\n     }\n \n     public Integer getFailedLogins() {\n@@ -444,11 +445,12 @@ public void setFailedLogins(final Integer failedLogins) {\n     }\n \n     public Date getLastLoginDate() {\n-        return lastLoginDate;\n+        return lastLoginDate == null ? null : new Date(lastLoginDate.getTime());\n     }\n \n     public void setLastLoginDate(final Date lastLoginDate) {\n-        this.lastLoginDate = lastLoginDate;\n+        this.lastLoginDate = lastLoginDate == null\n+                ? null : new Date(lastLoginDate.getTime());\n     }\n \n     public String getUsername() {\n@@ -469,12 +471,9 @@ public Boolean getSuspended() {\n \n     private String encodePassword(\n             final String password, final CipherAlgorithm cipherAlgoritm)\n-            throws NoSuchAlgorithmException,\n-            IllegalBlockSizeException,\n-            InvalidKeyException,\n-            BadPaddingException,\n-            NoSuchPaddingException,\n-            UnsupportedEncodingException {\n+            throws UnsupportedEncodingException, NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException,\n+            IllegalBlockSizeException, BadPaddingException {\n \n         String encodedPassword = null;\n \n@@ -492,7 +491,6 @@ private String encodePassword(\n                 byte[] encoded = cipher.doFinal(cleartext);\n \n                 encodedPassword = new String(Base64.encode(encoded));\n-\n             } else {\n                 MessageDigest algorithm = MessageDigest.getInstance(\n                         cipherAlgoritm.getAlgorithm());\n@@ -518,23 +516,23 @@ private String encodePassword(\n         return encodedPassword;\n     }\n \n-    public boolean verifyPasswordHistory(final String password, final int size) {\n-        try {\n+    public boolean verifyPasswordHistory(final String password,\n+            final int size) {\n \n-            boolean res = false;\n+        boolean res = false;\n \n-            if (size != 0) {\n-                res = passwordHistory.subList(size >= passwordHistory.size() ? 0\n-                        : passwordHistory.size() - size, passwordHistory.size()).\n-                        contains(cipherAlgorithm != null\n+        if (size > 0) {\n+            try {\n+                res = passwordHistory.subList(\n+                        size >= passwordHistory.size() ? 0\n+                        : passwordHistory.size() - size,\n+                        passwordHistory.size()).contains(cipherAlgorithm != null\n                         ? encodePassword(password, cipherAlgorithm) : password);\n+            } catch (Throwable t) {\n+                LOG.error(\"Error evaluating password history\", t);\n             }\n-\n-            return res;\n-\n-        } catch (Throwable t) {\n-            LOG.error(\"Error evaluating password history\", t);\n-            return false;\n         }\n+\n+        return res;\n     }\n }"},{"sha":"3220f74c67ec41216fe80ac6324a763fc2c50b56","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=fc0b8595d889682fcb56652a124ba959e505207e","patch":"@@ -136,17 +136,8 @@ public SyncopeUser getUserFromUsername(final String username)\n     }\n \n     private CipherAlgorithm getCipherAlgoritm() {\n-        CipherAlgorithm cipherAlgoritm;\n-\n-        try {\n-            cipherAlgoritm = CipherAlgorithm.valueOf(\n-                    confDAO.find(\"password.cipher.algorithm\").getValue());\n-        } catch (Exception e) {\n-            LOG.error(\"Cipher algorithm nof found. Let's use AES\", e);\n-            cipherAlgoritm = CipherAlgorithm.AES;\n-        }\n-\n-        return cipherAlgoritm;\n+        return CipherAlgorithm.valueOf(\n+                confDAO.find(\"password.cipher.algorithm\", \"AES\").getValue());\n     }\n \n     public void create(final SyncopeUser user, final UserTO userTO)"},{"sha":"77ee1bb7d009d4289d667ad23627eac231401d5e","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fc0b8595d889682fcb56652a124ba959e505207e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=fc0b8595d889682fcb56652a124ba959e505207e","patch":"@@ -183,4 +183,16 @@ public void delete() {\n         SyncopeUser actual = userDAO.find(3L);\n         assertNull(\"delete did not work\", actual);\n     }\n+\n+    @Test\n+    public void issue237() {\n+        SyncopeUser user = new SyncopeUser();\n+        user.setUsername(\"username\");\n+        user.setCreationDate(new Date());\n+\n+        user.setPassword(\"password\", CipherAlgorithm.AES, 0);\n+\n+        SyncopeUser actual = userDAO.save(user);\n+        assertNotNull(actual);\n+    }\n }"}]}