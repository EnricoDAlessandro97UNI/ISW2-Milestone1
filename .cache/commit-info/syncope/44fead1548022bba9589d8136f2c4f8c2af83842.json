{"sha":"44fead1548022bba9589d8136f2c4f8c2af83842","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ0ZmVhZDE1NDgwMjJiYmE5NTg5ZDgxMzZmMmM0ZjhjMmFmODM4NDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-18T07:38:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-11-18T07:40:47Z"},"message":"Swagger docs improvements","tree":{"sha":"a71f407a94d0312589732df31f186dc9adee5e9f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a71f407a94d0312589732df31f186dc9adee5e9f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/44fead1548022bba9589d8136f2c4f8c2af83842","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44fead1548022bba9589d8136f2c4f8c2af83842","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/44fead1548022bba9589d8136f2c4f8c2af83842","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44fead1548022bba9589d8136f2c4f8c2af83842/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c1b01ffca10908e4fbbe21edde6c6e0a87935498","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1b01ffca10908e4fbbe21edde6c6e0a87935498","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1b01ffca10908e4fbbe21edde6c6e0a87935498"}],"stats":{"total":88,"additions":72,"deletions":16},"files":[{"sha":"892bf0d7dd31ae4c1c7220eb46b0ff33ec8cd5e5","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractQuery.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.io.Serializable;\n import javax.validation.constraints.Min;\n import javax.ws.rs.DefaultValue;\n@@ -70,6 +72,8 @@ public Q build() {\n \n     private String orderBy;\n \n+    @Parameter(name = JAXRSService.PARAM_PAGE, description = \"page\", schema =\n+            @Schema(minimum = \"1\", implementation = Integer.class, defaultValue = \"1\"))\n     public Integer getPage() {\n         return page;\n     }\n@@ -81,6 +85,8 @@ public void setPage(final Integer page) {\n         this.page = page;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_SIZE, description = \"items per page\", schema =\n+            @Schema(minimum = \"1\", implementation = Integer.class, defaultValue = \"25\"))\n     public Integer getSize() {\n         return size;\n     }\n@@ -92,6 +98,8 @@ public void setSize(final Integer size) {\n         this.size = size;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_ORDERBY, description = \"sorting conditions\", schema =\n+            @Schema(implementation = String.class, example = \"key DESC\"))\n     public String getOrderBy() {\n         return orderBy;\n     }"},{"sha":"1a9d772abca36c537c270db82612cd5b0042d513","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import io.swagger.v3.oas.annotations.ExternalDocumentation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -59,16 +62,25 @@ public Builder fiql(final String fiql) {\n \n     private String fiql;\n \n+    @Parameter(name = JAXRSService.PARAM_REALM, description = \"realms define a hierarchical security domain tree, \"\n+            + \"primarily meant for containing Users, Groups and Any Objects\", schema =\n+            @Schema(implementation = String.class, defaultValue = SyncopeConstants.ROOT_REALM, externalDocs =\n+                    @ExternalDocumentation(description = \"Apache Syncope Reference Guide\",\n+                            url = \"http://syncope.apache.org/docs/2.1/reference-guide.html#realms\")))\n     public String getRealm() {\n         return realm;\n     }\n \n     @DefaultValue(SyncopeConstants.ROOT_REALM)\n-    @QueryParam(\"realm\")\n+    @QueryParam(JAXRSService.PARAM_REALM)\n     public void setRealm(final String realm) {\n         this.realm = realm;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_DETAILS, description = \"whether detailed information is to be included, \"\n+            + \"if applicable, about virtual attributes, (dynamic) roles, privileges, relationships, \"\n+            + \"(dynamic) memberships or linked accounts\", schema =\n+            @Schema(implementation = Boolean.class))\n     public Boolean getDetails() {\n         return Optional.ofNullable(details).orElse(Boolean.TRUE);\n     }\n@@ -83,9 +95,14 @@ public String getFiql() {\n         return fiql;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_FIQL, description = \"Feed Item Query Language (FIQL, pronounced “fickle”) is \"\n+            + \"a simple but flexible, URI-friendly syntax for expressing filters across the entries in a syndicated \"\n+            + \"feed.\", example = \"username==rossini\", schema =\n+            @Schema(implementation = String.class, externalDocs =\n+                    @ExternalDocumentation(description = \"Apache Syncope Reference Guide\",\n+                            url = \"http://syncope.apache.org/docs/2.1/reference-guide.html#search\")))\n     @QueryParam(JAXRSService.PARAM_FIQL)\n     public void setFiql(final String fiql) {\n         this.fiql = fiql;\n     }\n-\n }"},{"sha":"22e9e97027aac157c183eeaedfcef62a3dffec84","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/TaskQuery.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FTaskQuery.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n-import javax.validation.constraints.Min;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.PathParam;\n@@ -93,6 +94,8 @@ public void setType(final TaskType type) {\n         this.type = type;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_RESOURCE, description = \"resource key to match\", schema =\n+            @Schema(implementation = String.class, example = \"resource-ldap\"))\n     public String getResource() {\n         return resource;\n     }\n@@ -102,6 +105,8 @@ public void setResource(final String resource) {\n         this.resource = resource;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_NOTIFICATION, description = \"notification key to match\", schema =\n+            @Schema(implementation = String.class, example = \"4bf255f1-85a0-43d6-8988-128dad646f08\"))\n     public String getNotification() {\n         return notification;\n     }\n@@ -111,6 +116,8 @@ public void setNotification(final String notification) {\n         this.notification = notification;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_ANYTYPE_KIND, description = \"entity type to match\", schema =\n+            @Schema(implementation = AnyTypeKind.class))\n     public AnyTypeKind getAnyTypeKind() {\n         return anyTypeKind;\n     }\n@@ -120,16 +127,22 @@ public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_ENTITY_KEY, description = \"entity key to match\", schema =\n+            @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n     public String getEntityKey() {\n         return entityKey;\n     }\n \n-    @Min(1)\n+    @Parameter(name = JAXRSService.PARAM_RESOURCE, description = \" key\", schema =\n+            @Schema(implementation = String.class, example = \"resource-ldap\"))\n     @QueryParam(JAXRSService.PARAM_ENTITY_KEY)\n     public void setEntityKey(final String entityKey) {\n         this.entityKey = entityKey;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_DETAILS, description = \"whether detailed information about executions is to \"\n+            + \"be included\", schema =\n+            @Schema(implementation = Boolean.class))\n     public Boolean getDetails() {\n         return Optional.ofNullable(details).orElse(Boolean.TRUE);\n     }"},{"sha":"455e2086d01c78ebebd8f39074db1ca9e109d5fc","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -36,6 +36,10 @@ public interface JAXRSService {\n \n     String PARAM_ENTITY_KEY = \"entityKey\";\n \n+    String PARAM_USER = \"user\";\n+\n+    String PARAM_REALM = \"realm\";\n+\n     String PARAM_DETAILS = \"details\";\n \n     String PARAM_CONNID_PAGED_RESULTS_COOKIE = \"connIdPagedResultsCookie\";"},{"sha":"aeca8c9b4170f2688510b7bc697b751a515e4f43","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.rest.cxf;\n \n import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;\n+import io.swagger.v3.oas.models.ExternalDocumentation;\n import io.swagger.v3.oas.models.Operation;\n import io.swagger.v3.oas.models.headers.Header;\n import io.swagger.v3.oas.models.media.ArraySchema;\n@@ -123,8 +124,13 @@ protected void addParameters(final List<Parameter> parameters) {\n             parameter.setName(RESTHeaders.DOMAIN);\n             parameter.setRequired(true);\n \n+            ExternalDocumentation extDoc = new ExternalDocumentation();\n+            extDoc.setDescription(\"Apache Syncope Reference Guide\");\n+            extDoc.setUrl(\"http://syncope.apache.org/docs/2.1/reference-guide.html#domains\");\n+\n             Schema<String> schema = new Schema<>();\n-            schema.setType(\"string\");\n+            schema.setDescription(\"Domains are built to facilitate multitenancy.\");\n+            schema.setExternalDocs(extDoc);\n             schema.setEnum(domains);\n             schema.setDefault(SyncopeConstants.MASTER_DOMAIN);\n             parameter.setSchema(schema);"},{"sha":"d1692ed8b2b67035a13c9ed1e761fada08fdc136","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -421,7 +421,7 @@ public void setSecurityAnswer(final String securityAnswer) {\n     @Override\n     public boolean add(final AnyTypeClass auxClass) {\n         checkType(auxClass, JPAAnyTypeClass.class);\n-        return auxClasses.contains((JPAAnyTypeClass) auxClass) || this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+        return auxClasses.contains((JPAAnyTypeClass) auxClass) || auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n     @Override"},{"sha":"dd1ef8815897e2db6017eefcd4c10bd7c7fadebb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -96,10 +96,10 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n                 anyObjectDAO.findAllResources(anyObject),\n                 details);\n \n-        if (details) {\n-            // dynamic realms\n-            anyObjectTO.getDynRealms().addAll(anyObjectDAO.findDynRealms(anyObject.getKey()));\n+        // dynamic realms\n+        anyObjectTO.getDynRealms().addAll(anyObjectDAO.findDynRealms(anyObject.getKey()));\n \n+        if (details) {\n             // relationships\n             anyObjectTO.getRelationships().addAll(\n                     anyObjectDAO.findAllRelationships(anyObject).stream()."},{"sha":"14732473d67fe95e6de1eb96126b7b3f34a412e7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -355,10 +355,8 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n                 group.getResources(),\n                 details);\n \n-        if (details) {\n-            // dynamic realms\n-            groupTO.getDynRealms().addAll(groupDAO.findDynRealms(group.getKey()));\n-        }\n+        // dynamic realms\n+        groupTO.getDynRealms().addAll(groupDAO.findDynRealms(group.getKey()));\n \n         // Static user and AnyType membership counts\n         groupTO.setStaticUserMembershipCount(groupDAO.countUMembers(group));"},{"sha":"f5a507b13ae0dcb9d2d5f73025ddffc4c296ba1b","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestFormQuery.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestFormQuery.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class UserRequestFormQuery extends AbstractQuery {\n \n@@ -39,11 +42,13 @@ public Builder user(final String user) {\n \n     private String user;\n \n+    @Parameter(name = JAXRSService.PARAM_USER, description = \"user to match either by key or username\", schema =\n+            @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n     public String getUser() {\n         return user;\n     }\n \n-    @QueryParam(\"user\")\n+    @QueryParam(JAXRSService.PARAM_USER)\n     public void setUser(final String user) {\n         this.user = user;\n     }"},{"sha":"19e5b72d893c013dfdb264389b350d432a482f80","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/UserRequestQuery.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FUserRequestQuery.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class UserRequestQuery extends AbstractQuery {\n \n@@ -39,11 +42,13 @@ public Builder user(final String user) {\n \n     private String user;\n \n+    @Parameter(name = JAXRSService.PARAM_USER, description = \"user to match either by key or username\", schema =\n+            @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n     public String getUser() {\n         return user;\n     }\n \n-    @QueryParam(\"user\")\n+    @QueryParam(JAXRSService.PARAM_USER)\n     public void setUser(final String user) {\n         this.user = user;\n     }"},{"sha":"b38cd613b37eac3c02c900844c05500241f4c2e2","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44fead1548022bba9589d8136f2c4f8c2af83842/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44fead1548022bba9589d8136f2c4f8c2af83842/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java?ref=44fead1548022bba9589d8136f2c4f8c2af83842","patch":"@@ -74,7 +74,7 @@ public interface UserRequestService extends JAXRSService {\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     UserRequest start(\n             @NotNull @PathParam(\"bpmnProcess\") String bpmnProcess,\n-            @QueryParam(\"user\") String user);\n+            @QueryParam(JAXRSService.PARAM_USER) String user);\n \n     /**\n      * Cancel a running user request."}]}