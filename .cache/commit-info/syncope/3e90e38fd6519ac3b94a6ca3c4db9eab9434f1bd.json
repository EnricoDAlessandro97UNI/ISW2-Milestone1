{"sha":"3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNlOTBlMzhmZDY1MTlhYzNiOTRhNmNhM2M0ZGI5ZWFiOTQzNGYxYmQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-12T13:42:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-12T13:42:46Z"},"message":"[SYNCOPE-1158][SYNCOPE-1153] Better PushTask reports","tree":{"sha":"a10eae9e8cee38f6c454fa1440d3fdc036912497","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a10eae9e8cee38f6c454fa1440d3fdc036912497"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f9c61fbc6d9a1760bdcc777f3427e49b9349c5b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f9c61fbc6d9a1760bdcc777f3427e49b9349c5b6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f9c61fbc6d9a1760bdcc777f3427e49b9349c5b6"}],"stats":{"total":380,"additions":216,"deletions":164},"files":[{"sha":"433e94312132aa010a4c8bcad4d69f6805155b49","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -76,7 +76,7 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n                         new ImmutablePair<UserPatch, Boolean>(userPatch, null),\n                         updated.getPropByRes(), updated.getPerformedTasks()));\n \n-        taskExecutor.execute(tasks);\n+        taskExecutor.execute(tasks, false);\n \n         return binder.getUserTO(updated.getResult());\n     }\n@@ -111,7 +111,7 @@ public UserTO submitForm(final WorkflowFormTO form) {\n                             updated.getPropByRes(),\n                             updated.getPerformedTasks()));\n \n-            taskExecutor.execute(tasks);\n+            taskExecutor.execute(tasks, false);\n         }\n \n         return binder.getUserTO(updated.getResult().getKey());"},{"sha":"2ecc44ee648245a46a46285c158a55f6a22d34f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAccessTokenDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -100,9 +100,7 @@ public List<AccessToken> findAll(final int page, final int itemsPerPage, final L\n \n         TypedQuery<AccessToken> query = entityManager().createQuery(queryString.toString(), AccessToken.class);\n \n-        query.setFirstResult(itemsPerPage * (page <= 0\n-                ? 0\n-                : page - 1));\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n \n         if (itemsPerPage > 0) {\n             query.setMaxResults(itemsPerPage);"},{"sha":"457944b5bd74b5c39114a2a6b85993d991cd79fc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -204,7 +204,7 @@ public int count() {\n     @Override\n     public List<AnyObject> findAll(final int page, final int itemsPerPage) {\n         TypedQuery<AnyObject> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAAnyObject.class.getSimpleName() + \" e\", AnyObject.class);\n+                \"SELECT e FROM  \" + JPAAnyObject.class.getSimpleName() + \" e ORDER BY e.id\", AnyObject.class);\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n         query.setMaxResults(itemsPerPage);\n "},{"sha":"9d833eafe10659f3363901300726b2eaa7abe8ab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -277,7 +277,7 @@ public List<UMembership> findUMemberships(final Group group) {\n     @Override\n     public List<Group> findAll(final int page, final int itemsPerPage) {\n         TypedQuery<Group> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e\", Group.class);\n+                \"SELECT e FROM  \" + JPAGroup.class.getSimpleName() + \" e ORDER BY e.id\", Group.class);\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n         query.setMaxResults(itemsPerPage);\n "},{"sha":"dfb75361b3ebb04ce2a5178ac4100119ac70d548","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -206,9 +206,7 @@ public <T extends Task> List<T> findAll(\n             query.setParameter(\"entityKey\", entityKey);\n         }\n \n-        query.setFirstResult(itemsPerPage * (page <= 0\n-                ? 0\n-                : page - 1));\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n \n         if (itemsPerPage > 0) {\n             query.setMaxResults(itemsPerPage);"},{"sha":"560ad44d3382dec10a487bd9353562da59cd817e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -281,7 +281,7 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n     @Override\n     public List<User> findAll(final int page, final int itemsPerPage) {\n         TypedQuery<User> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAUser.class.getSimpleName() + \" e\", User.class);\n+                \"SELECT e FROM  \" + JPAUser.class.getSimpleName() + \" e ORDER BY e.id\", User.class);\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n         query.setMaxResults(itemsPerPage);\n "},{"sha":"af661898dae6fbce92948cbf84377900e9d5bf69","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -49,14 +49,6 @@ public interface PropagationTaskExecutor {\n      */\n     TaskExec execute(PropagationTask task);\n \n-    /**\n-     * Execute a collection of PropagationTask objects.\n-     * The process is interrupted as soon as the result of the communication with a primary resource is in error.\n-     *\n-     * @param tasks to be executed\n-     */\n-    void execute(Collection<PropagationTask> tasks);\n-\n     /**\n      * Execute a collection of PropagationTask objects.\n      * The process is interrupted as soon as the result of the communication with a resource with non-null priority is"},{"sha":"d59af7b0eb24f43b8cb5a8bd3ebd75146674495d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -290,7 +290,7 @@ public void internalSuspend(final String key) {\n                     new WorkflowResult<Pair<UserPatch, Boolean>>(\n                             new ImmutablePair<>(userPatch, Boolean.FALSE),\n                             updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n-            taskExecutor.execute(tasks);\n+            taskExecutor.execute(tasks, false);\n         }\n     }\n "},{"sha":"ff91c413b3d6a6b7bc47673b2ca1341542ba4b39","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -536,11 +536,6 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n         return execution;\n     }\n \n-    @Override\n-    public void execute(final Collection<PropagationTask> tasks) {\n-        execute(tasks, false);\n-    }\n-\n     protected abstract void doExecute(\n             Collection<PropagationTask> tasks, PropagationReporter reporter, boolean nullPriorityAsync);\n "},{"sha":"af8466cbd07f18132b4b2052cd43dd0b67679040","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -102,7 +102,8 @@ protected void doDelete(final AnyTypeKind kind, final String key) {\n                     kind,\n                     key,\n                     propByRes,\n-                    null));\n+                    null),\n+                    false);\n         } catch (Exception e) {\n             // A propagation failure doesn't imply a pull failure.\n             // The propagation exception status will be reported into the propagation task execution.\n@@ -441,7 +442,8 @@ protected List<ProvisioningReport> deprovision(\n                                 provision.getAnyType().getKind(),\n                                 key,\n                                 propByRes,\n-                                null));\n+                                null),\n+                                false);\n \n                         AnyPatch anyPatch = null;\n                         if (unlink) {"},{"sha":"66595ac84c1489b075ea5618903bd10c6a0295d0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":97,"deletions":68,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -25,14 +25,14 @@\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -51,6 +51,7 @@\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n@@ -88,20 +89,63 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract String getName(Any<?> any);\n \n-    protected void deprovision(final Any<?> any) {\n+    protected void reportPropagation(final ProvisioningReport result, final PropagationReporter reporter) {\n+        if (!reporter.getStatuses().isEmpty()) {\n+            result.setStatus(toProvisioningReportStatus(reporter.getStatuses().get(0).getStatus()));\n+            result.setMessage(reporter.getStatuses().get(0).getFailureReason());\n+        }\n+    }\n+\n+    private void update(final Any<?> any, final ProvisioningReport result) {\n+        boolean changepwd;\n+        Collection<String> resourceKeys;\n+        if (any instanceof User) {\n+            changepwd = true;\n+            resourceKeys = CollectionUtils.collect(\n+                    userDAO.findAllResources((User) any), EntityUtils.keyTransformer());\n+        } else if (any instanceof AnyObject) {\n+            changepwd = false;\n+            resourceKeys = CollectionUtils.collect(\n+                    anyObjectDAO.findAllResources((AnyObject) any), EntityUtils.keyTransformer());\n+        } else {\n+            changepwd = false;\n+            resourceKeys = ((Group) any).getResourceKeys();\n+        }\n+\n+        List<String> noPropResources = new ArrayList<>(resourceKeys);\n+        noPropResources.remove(profile.getTask().getResource().getKey());\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n+\n+        PropagationReporter reporter = taskExecutor.execute(propagationManager.getUpdateTasks(\n+                any.getType().getKind(),\n+                any.getKey(),\n+                changepwd,\n+                null,\n+                propByRes,\n+                null,\n+                noPropResources),\n+                false);\n+        reportPropagation(result, reporter);\n+    }\n+\n+    protected void deprovision(final Any<?> any, final ProvisioningReport result) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getDeleteTasks(\n+        PropagationReporter reporter = taskExecutor.execute(propagationManager.getDeleteTasks(\n                 any.getType().getKind(),\n                 any.getKey(),\n                 null,\n-                noPropResources));\n+                noPropResources),\n+                false);\n+        reportPropagation(result, reporter);\n     }\n \n-    protected void provision(final Any<?> any, final Boolean enabled) {\n+    protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -110,43 +154,47 @@ protected void provision(final Any<?> any, final Boolean enabled) {\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getCreateTasks(\n+        PropagationReporter reporter = taskExecutor.execute(propagationManager.getCreateTasks(\n                 any.getType().getKind(),\n                 any.getKey(),\n                 propByRes,\n                 before.getVirAttrs(),\n-                noPropResources));\n+                noPropResources),\n+                false);\n+        reportPropagation(result, reporter);\n     }\n \n-    protected void link(final Any<?> any, final Boolean unlink) {\n+    protected void link(final Any<?> any, final boolean unlink, final ProvisioningReport result) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n                 value(profile.getTask().getResource().getKey()).build());\n \n         update(patch);\n+\n+        result.setStatus(ProvisioningReport.Status.SUCCESS);\n     }\n \n-    protected void unassign(final Any<?> any) {\n+    protected void unassign(final Any<?> any, final ProvisioningReport result) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.DELETE).\n                 value(profile.getTask().getResource().getKey()).build());\n \n         update(patch);\n \n-        deprovision(any);\n+        deprovision(any, result);\n     }\n \n-    protected void assign(final Any<?> any, final Boolean enabled) {\n+    protected void assign(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n                 value(profile.getTask().getResource().getKey()).build());\n \n         update(patch);\n \n-        provision(any, enabled);\n+        provision(any, enabled, result);\n     }\n \n     protected ConnectorObject getRemoteObject(final String connObjectKey, final ObjectClass objectClass) {\n@@ -221,9 +269,9 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n         if (profile.isDryRun()) {\n             if (beforeObj == null) {\n-                result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n+                result.setOperation(toResourceOperation(profile.getTask().getUnmatchingRule()));\n             } else {\n-                result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n+                result.setOperation(toResourceOperation(profile.getTask().getMatchingRule()));\n             }\n             result.setStatus(ProvisioningReport.Status.SUCCESS);\n         } else {\n@@ -243,7 +291,7 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n                     operation);\n             try {\n                 if (beforeObj == null) {\n-                    result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n+                    result.setOperation(toResourceOperation(profile.getTask().getUnmatchingRule()));\n \n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n@@ -253,10 +301,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformCreate()) {\n                                 LOG.debug(\"PushTask not configured for create\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                assign(any, status);\n+                                assign(any, status, result);\n                             }\n-\n                             break;\n \n                         case PROVISION:\n@@ -266,10 +314,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformCreate()) {\n                                 LOG.debug(\"PushTask not configured for create\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                provision(any, status);\n+                                provision(any, status, result);\n                             }\n-\n                             break;\n \n                         case UNLINK:\n@@ -279,20 +327,22 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                link(any, true);\n+                                link(any, true, result);\n                             }\n-\n                             break;\n \n                         case IGNORE:\n                             LOG.debug(\"Ignored any: {}\", any);\n+                            result.setStatus(ProvisioningReport.Status.IGNORE);\n                             break;\n+\n                         default:\n                         // do nothing\n                     }\n                 } else {\n-                    result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n+                    result.setOperation(toResourceOperation(profile.getTask().getMatchingRule()));\n \n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n@@ -301,10 +351,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n                             }\n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                update(any);\n+                                update(any, result);\n                             }\n-\n                             break;\n \n                         case DEPROVISION:\n@@ -314,10 +364,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformDelete()) {\n                                 LOG.debug(\"PushTask not configured for delete\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                deprovision(any);\n+                                deprovision(any, result);\n                             }\n-\n                             break;\n \n                         case UNASSIGN:\n@@ -327,10 +377,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformDelete()) {\n                                 LOG.debug(\"PushTask not configured for delete\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                unassign(any);\n+                                unassign(any, result);\n                             }\n-\n                             break;\n \n                         case LINK:\n@@ -340,10 +390,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                link(any, false);\n+                                link(any, false, result);\n                             }\n-\n                             break;\n \n                         case UNLINK:\n@@ -353,15 +403,18 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                link(any, true);\n+                                link(any, true, result);\n                             }\n \n                             break;\n \n                         case IGNORE:\n                             LOG.debug(\"Ignored any: {}\", any);\n+                            result.setStatus(ProvisioningReport.Status.IGNORE);\n                             break;\n+\n                         default:\n                         // do nothing\n                     }\n@@ -371,15 +424,10 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n                     action.after(profile, any, result);\n                 }\n \n-                result.setStatus(ProvisioningReport.Status.SUCCESS);\n-                resultStatus = AuditElements.Result.SUCCESS;\n                 output = getRemoteObject(connObjecKey, provision.getObjectClass());\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {\n-                result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                resultStatus = AuditElements.Result.FAILURE;\n                 output = e;\n \n                 LOG.warn(\"Error pushing {} towards {}\", any, profile.getTask().getResource(), e);\n@@ -407,7 +455,7 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n         }\n     }\n \n-    private ResourceOperation getResourceOperation(final UnmatchingRule rule) {\n+    private ResourceOperation toResourceOperation(final UnmatchingRule rule) {\n         switch (rule) {\n             case ASSIGN:\n             case PROVISION:\n@@ -417,7 +465,7 @@ private ResourceOperation getResourceOperation(final UnmatchingRule rule) {\n         }\n     }\n \n-    private ResourceOperation getResourceOperation(final MatchingRule rule) {\n+    private ResourceOperation toResourceOperation(final MatchingRule rule) {\n         switch (rule) {\n             case UPDATE:\n                 return ResourceOperation.UPDATE;\n@@ -429,37 +477,18 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    private Any<?> update(final Any<?> any) {\n-        boolean changepwd;\n-        Collection<String> resourceKeys;\n-        if (any instanceof User) {\n-            changepwd = true;\n-            resourceKeys = CollectionUtils.collect(\n-                    userDAO.findAllResources((User) any), EntityUtils.keyTransformer());\n-        } else if (any instanceof AnyObject) {\n-            changepwd = false;\n-            resourceKeys = CollectionUtils.collect(\n-                    anyObjectDAO.findAllResources((AnyObject) any), EntityUtils.keyTransformer());\n-        } else {\n-            changepwd = false;\n-            resourceKeys = ((Group) any).getResourceKeys();\n-        }\n+    private ProvisioningReport.Status toProvisioningReportStatus(final PropagationTaskExecStatus status) {\n+        switch (status) {\n+            case FAILURE:\n+                return ProvisioningReport.Status.FAILURE;\n \n-        List<String> noPropResources = new ArrayList<>(resourceKeys);\n-        noPropResources.remove(profile.getTask().getResource().getKey());\n+            case SUCCESS:\n+                return ProvisioningReport.Status.SUCCESS;\n \n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n-\n-        taskExecutor.execute(propagationManager.getUpdateTasks(\n-                any.getType().getKind(),\n-                any.getKey(),\n-                changepwd,\n-                null,\n-                propByRes,\n-                null,\n-                noPropResources));\n-\n-        return getAny(any.getKey());\n+            case CREATED:\n+            case NOT_ATTEMPTED:\n+            default:\n+                return ProvisioningReport.Status.IGNORE;\n+        }\n     }\n }"},{"sha":"fc711ca0d285ad332738ed39a374de9d15aa943d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPullResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -347,7 +347,7 @@ private ProvisioningReport deprovision(final SyncDelta delta, final Realm realm,\n \n                 PropagationByResource propByRes = new PropagationByResource();\n                 propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n-                taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null));\n+                taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null), false);\n \n                 if (unlink) {\n                     realm.getResources().remove(profile.getTask().getResource());"},{"sha":"9cd574a018f28c5307e02b3e7f42d44b06bc9beb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPushResultHandlerImpl.java","status":"modified","additions":98,"deletions":64,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -22,21 +22,21 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n@@ -84,60 +84,107 @@ public boolean handle(final String realmKey) {\n         }\n     }\n \n-    private Realm update(final RealmTO realmTO) {\n+    private void reportPropagation(final ProvisioningReport result, final PropagationReporter reporter) {\n+        if (!reporter.getStatuses().isEmpty()) {\n+            result.setStatus(toProvisioningReportStatus(reporter.getStatuses().get(0).getStatus()));\n+            result.setMessage(reporter.getStatuses().get(0).getFailureReason());\n+        }\n+    }\n+\n+    private Realm update(final RealmTO realmTO, final ProvisioningReport result) {\n         Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n         PropagationByResource propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n-        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n-        taskExecutor.execute(tasks, false);\n+        PropagationReporter reporter = taskExecutor.execute(\n+                propagationManager.createTasks(realm, propByRes, null), false);\n+        reportPropagation(result, reporter);\n \n         return realm;\n     }\n \n-    private void deprovision(final Realm realm) {\n+    private void deprovision(final Realm realm, final ProvisioningReport result) {\n         List<String> noPropResources = new ArrayList<>(realm.getResourceKeys());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n \n-        taskExecutor.execute(propagationManager.createTasks(realm, propByRes, noPropResources));\n+        PropagationReporter reporter = taskExecutor.execute(\n+                propagationManager.createTasks(realm, propByRes, noPropResources), false);\n+        reportPropagation(result, reporter);\n     }\n \n-    private void provision(final Realm realm) {\n+    private void provision(final Realm realm, final ProvisioningReport result) {\n         List<String> noPropResources = new ArrayList<>(realm.getResourceKeys());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.createTasks(realm, propByRes, noPropResources));\n+        PropagationReporter reporter = taskExecutor.execute(\n+                propagationManager.createTasks(realm, propByRes, noPropResources), false);\n+        reportPropagation(result, reporter);\n     }\n \n-    private void link(final Realm realm, final Boolean unlink) {\n+    private void link(final Realm realm, final boolean unlink, final ProvisioningReport result) {\n         RealmTO realmTO = binder.getRealmTO(realm, true);\n         if (unlink) {\n             realmTO.getResources().remove(profile.getTask().getResource().getKey());\n         } else {\n             realmTO.getResources().add(profile.getTask().getResource().getKey());\n         }\n \n-        update(realmTO);\n+        update(realmTO, result);\n     }\n \n-    private void unassign(final Realm realm) {\n+    private void unassign(final Realm realm, final ProvisioningReport result) {\n         RealmTO realmTO = binder.getRealmTO(realm, true);\n         realmTO.getResources().remove(profile.getTask().getResource().getKey());\n \n-        deprovision(update(realmTO));\n+        deprovision(update(realmTO, result), result);\n     }\n \n-    private void assign(final Realm realm) {\n+    private void assign(final Realm realm, final ProvisioningReport result) {\n         RealmTO realmTO = binder.getRealmTO(realm, true);\n         realmTO.getResources().add(profile.getTask().getResource().getKey());\n \n-        provision(update(realmTO));\n+        provision(update(realmTO, result), result);\n+    }\n+\n+    /**\n+     * Get remote object for given realm .\n+     *\n+     * @param connector connector facade proxy.\n+     * @param task current propagation task.\n+     * @param orgUnit orgUnit\n+     * @return remote connector object.\n+     */\n+    private ConnectorObject getRemoteObject(\n+            final String realmName,\n+            final Connector connector,\n+            final OrgUnit orgUnit) {\n+\n+        final ConnectorObject[] obj = new ConnectorObject[1];\n+        try {\n+            connector.search(orgUnit.getObjectClass(),\n+                    new EqualsFilter(AttributeBuilder.build(orgUnit.getExtAttrName(), realmName)),\n+                    new ResultsHandler() {\n+\n+                @Override\n+                public boolean handle(final ConnectorObject connectorObject) {\n+                    obj[0] = connectorObject;\n+                    return false;\n+                }\n+            }, MappingUtils.buildOperationOptions(orgUnit));\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", realmName, ignore);\n+        }\n+\n+        return obj[0];\n     }\n \n     private void doHandle(final Realm realm) throws JobExecutionException {\n@@ -161,9 +208,9 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n         if (profile.isDryRun()) {\n             if (beforeObj == null) {\n-                result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n+                result.setOperation(toResourceOperation(profile.getTask().getUnmatchingRule()));\n             } else {\n-                result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n+                result.setOperation(toResourceOperation(profile.getTask().getMatchingRule()));\n             }\n             result.setStatus(ProvisioningReport.Status.SUCCESS);\n         } else {\n@@ -183,7 +230,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                     operation);\n             try {\n                 if (beforeObj == null) {\n-                    result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n+                    result.setOperation(toResourceOperation(profile.getTask().getUnmatchingRule()));\n \n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n@@ -193,8 +240,9 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformCreate()) {\n                                 LOG.debug(\"PushTask not configured for create\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                assign(realm);\n+                                assign(realm, result);\n                             }\n \n                             break;\n@@ -206,8 +254,9 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformCreate()) {\n                                 LOG.debug(\"PushTask not configured for create\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                provision(realm);\n+                                provision(realm, result);\n                             }\n \n                             break;\n@@ -219,20 +268,23 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                link(realm, true);\n+                                link(realm, true, result);\n                             }\n \n                             break;\n \n                         case IGNORE:\n                             LOG.debug(\"Ignored any: {}\", realm);\n+                            result.setStatus(ProvisioningReport.Status.IGNORE);\n                             break;\n+\n                         default:\n                         // do nothing\n                     }\n                 } else {\n-                    result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n+                    result.setOperation(toResourceOperation(profile.getTask().getMatchingRule()));\n \n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n@@ -241,8 +293,9 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                             }\n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                update(binder.getRealmTO(realm, true));\n+                                update(binder.getRealmTO(realm, true), result);\n                             }\n \n                             break;\n@@ -254,8 +307,9 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformDelete()) {\n                                 LOG.debug(\"PushTask not configured for delete\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                deprovision(realm);\n+                                deprovision(realm, result);\n                             }\n \n                             break;\n@@ -267,8 +321,9 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformDelete()) {\n                                 LOG.debug(\"PushTask not configured for delete\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                unassign(realm);\n+                                unassign(realm, result);\n                             }\n \n                             break;\n@@ -280,8 +335,9 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                link(realm, false);\n+                                link(realm, false, result);\n                             }\n \n                             break;\n@@ -293,15 +349,18 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                             if (!profile.getTask().isPerformUpdate()) {\n                                 LOG.debug(\"PushTask not configured for update\");\n+                                result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                link(realm, true);\n+                                link(realm, true, result);\n                             }\n \n                             break;\n \n                         case IGNORE:\n                             LOG.debug(\"Ignored any: {}\", realm);\n+                            result.setStatus(ProvisioningReport.Status.IGNORE);\n                             break;\n+\n                         default:\n                         // do nothing\n                     }\n@@ -311,18 +370,13 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                     action.after(profile, realm, result);\n                 }\n \n-                result.setStatus(ProvisioningReport.Status.SUCCESS);\n-                resultStatus = AuditElements.Result.SUCCESS;\n                 output = getRemoteObject(\n                         realm.getName(),\n                         profile.getConnector(),\n                         profile.getTask().getResource().getOrgUnit());\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {\n-                result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                resultStatus = AuditElements.Result.FAILURE;\n                 output = e;\n \n                 LOG.warn(\"Error pushing {} towards {}\", realm, profile.getTask().getResource(), e);\n@@ -350,7 +404,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n         }\n     }\n \n-    private ResourceOperation getResourceOperation(final UnmatchingRule rule) {\n+    private ResourceOperation toResourceOperation(final UnmatchingRule rule) {\n         switch (rule) {\n             case ASSIGN:\n             case PROVISION:\n@@ -360,7 +414,7 @@ private ResourceOperation getResourceOperation(final UnmatchingRule rule) {\n         }\n     }\n \n-    private ResourceOperation getResourceOperation(final MatchingRule rule) {\n+    private ResourceOperation toResourceOperation(final MatchingRule rule) {\n         switch (rule) {\n             case UPDATE:\n                 return ResourceOperation.UPDATE;\n@@ -372,38 +426,18 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    /**\n-     * Get remote object for given realm .\n-     *\n-     * @param connector connector facade proxy.\n-     * @param task current propagation task.\n-     * @param orgUnit orgUnit\n-     * @return remote connector object.\n-     */\n-    private ConnectorObject getRemoteObject(\n-            final String realmName,\n-            final Connector connector,\n-            final OrgUnit orgUnit) {\n+    private ProvisioningReport.Status toProvisioningReportStatus(final PropagationTaskExecStatus status) {\n+        switch (status) {\n+            case FAILURE:\n+                return ProvisioningReport.Status.FAILURE;\n \n-        final ConnectorObject[] obj = new ConnectorObject[1];\n-        try {\n-            connector.search(orgUnit.getObjectClass(),\n-                    new EqualsFilter(AttributeBuilder.build(orgUnit.getExtAttrName(), realmName)),\n-                    new ResultsHandler() {\n+            case SUCCESS:\n+                return ProvisioningReport.Status.SUCCESS;\n \n-                @Override\n-                public boolean handle(final ConnectorObject connectorObject) {\n-                    obj[0] = connectorObject;\n-                    return false;\n-                }\n-            }, MappingUtils.buildOperationOptions(orgUnit));\n-        } catch (TimeoutException toe) {\n-            LOG.debug(\"Request timeout\", toe);\n-            throw toe;\n-        } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", realmName, ignore);\n+            case CREATED:\n+            case NOT_ATTEMPTED:\n+            default:\n+                return ProvisioningReport.Status.IGNORE;\n         }\n-\n-        return obj[0];\n     }\n }"},{"sha":"60dd98b6eb0eec4e1ff305f609edffb32f13fe85","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/UserPushResultHandlerImpl.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FUserPushResultHandlerImpl.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -31,6 +31,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n \n public class UserPushResultHandlerImpl extends AbstractPushResultHandler implements UserPushResultHandler {\n@@ -41,7 +43,7 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected void provision(final Any<?> any, final Boolean enabled) {\n+    protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -50,13 +52,15 @@ protected void provision(final Any<?> any, final Boolean enabled) {\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getUserCreateTasks(\n+        PropagationReporter reporter = taskExecutor.execute(propagationManager.getUserCreateTasks(\n                 before.getKey(),\n                 null,\n                 enabled,\n                 propByRes,\n                 before.getVirAttrs(),\n-                noPropResources));\n+                noPropResources),\n+                false);\n+        reportPropagation(result, reporter);\n     }\n \n     @Override"},{"sha":"235faea843fe9cde1ace7de82bead64605b49962","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=3e90e38fd6519ac3b94a6ca3c4db9eab9434f1bd","patch":"@@ -51,7 +51,7 @@ public void process(final Exchange exchange) throws Exception {\n                         new WorkflowResult<Pair<UserPatch, Boolean>>(\n                                 new ImmutablePair<>(userPatch, Boolean.FALSE),\n                                 updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n-                getPropagationTaskExecutor().execute(tasks);\n+                getPropagationTaskExecutor().execute(tasks, false);\n             }\n         }\n     }"}]}