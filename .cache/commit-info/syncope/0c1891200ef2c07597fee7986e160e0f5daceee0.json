{"sha":"0c1891200ef2c07597fee7986e160e0f5daceee0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBjMTg5MTIwMGVmMmMwNzU5N2ZlZTc5ODZlMTYwZTBmNWRhY2VlZTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-13T11:23:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-13T11:37:13Z"},"message":"[SYNCOPE-1542] Cleanup and refactoring","tree":{"sha":"e1cd1bbf2ba110059628548e4b3865ca9734edaa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e1cd1bbf2ba110059628548e4b3865ca9734edaa"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0c1891200ef2c07597fee7986e160e0f5daceee0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0c1891200ef2c07597fee7986e160e0f5daceee0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0c1891200ef2c07597fee7986e160e0f5daceee0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0c1891200ef2c07597fee7986e160e0f5daceee0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4ae39ce664b27bdcc9df39490f37592f8c8069d1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ae39ce664b27bdcc9df39490f37592f8c8069d1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ae39ce664b27bdcc9df39490f37592f8c8069d1"}],"stats":{"total":366,"additions":175,"deletions":191},"files":[{"sha":"bb8b52fe282d6b752bb328d61849a7573bd64524","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/Constants.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -57,6 +57,8 @@ public final class Constants {\n \n     public static final String ON_CHANGE = \"change\";\n \n+    public static final String ON_KEYUP = \"keyup\";\n+\n     public static final String ON_KEYDOWN = \"keydown\";\n \n     public static final String ON_BLUR = \"blur\";\n@@ -105,6 +107,10 @@ public final class Constants {\n \n     public static final String NOT_FOUND_ICON = \"glyphicon glyphicon-remove-circle\";\n \n+    public static final int MAX_GROUP_LIST_SIZE = 30;\n+\n+    public static final int MAX_ROLE_LIST_SIZE = 30;\n+\n     public static final String NOTIFICATION_MSG_PARAM = \"notificationMessage\";\n \n     public static final String NOTIFICATION_LEVEL_PARAM = \"notificationLevel\";"},{"sha":"663d2a550d2111512c8a8daaed5b7ff641577935","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/FieldPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -236,7 +236,7 @@ public FieldPanel<T> clone() {\n \n     protected PageReference getPageReference() {\n         // SYNCOPE-1213\n-        // default implementation does not requier to pass page reference, override this method of want otherwise\n+        // default implementation does not require to pass page reference, override this method of want otherwise\n         return null;\n     }\n }"},{"sha":"bf0d26c43559edc892b562e6b762938462e488be","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -57,7 +57,7 @@\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.util.ListModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -206,19 +206,19 @@ public AnyPanel(\n         // ------------------------\n         // Accordion\n         // ------------------------\n-        final Model<Integer> model = Model.of(-1);\n-        final StringResourceModel searchResult = new StringResourceModel(\"search.result\", this, new Model<>(anyTypeTO));\n-        final Accordion accordion = new Accordion(\"accordionPanel\", List.of(new AbstractTab(searchResult) {\n+        Model<Integer> model = Model.of(-1);\n+        Accordion accordion = new Accordion(\"accordionPanel\",\n+                List.of(new AbstractTab(new ResourceModel(\"search.result\")) {\n \n-            protected static final long serialVersionUID = 1037272333056449377L;\n+                    protected static final long serialVersionUID = 1037272333056449377L;\n \n-            @Override\n-            public WebMarkupContainer getPanel(final String panelId) {\n-                searchPanel = getSearchPanel(panelId);\n-                return searchPanel;\n-            }\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        searchPanel = getSearchPanel(panelId);\n+                        return searchPanel;\n+                    }\n \n-        }), model) {\n+                }), model) {\n \n             protected static final long serialVersionUID = -3056452800492734900L;\n \n@@ -238,7 +238,7 @@ protected void onComponentTag(final ComponentTag tag) {\n                     public void onClick(final AjaxRequestTarget target) {\n                         model.setObject(model.getObject() == 0 ? -1 : 0);\n                     }\n-                }.setBody(searchResult);\n+                }.setBody(tab.getTitle()).setEscapeModelStrings(false);\n             }\n         };\n         accordion.setOutputMarkupId(true);\n@@ -319,7 +319,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n                 clause.setProperty(\"username\");\n \n                 panel = new UserSearchPanel.Builder(\n-                        new ListModel<>(clauses)).required(true).enableSearch().build(id);\n+                        new ListModel<>(clauses)).realm(realmTO.getFullPath()).required(true).enableSearch().build(id);\n                 break;\n \n             case GROUP:\n@@ -328,7 +328,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n                 clause.setProperty(\"name\");\n \n                 panel = new GroupSearchPanel.Builder(\n-                        new ListModel<>(clauses)).required(true).enableSearch().build(id);\n+                        new ListModel<>(clauses)).realm(realmTO.getFullPath()).required(true).enableSearch().build(id);\n                 break;\n \n             case ANY_OBJECT:\n@@ -337,7 +337,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n                 clause.setProperty(\"name\");\n \n                 panel = new AnyObjectSearchPanel.Builder(anyTypeTO.getKey(),\n-                        new ListModel<>(clauses)).required(true).enableSearch().build(id);\n+                        new ListModel<>(clauses)).realm(realmTO.getFullPath()).required(true).enableSearch().build(id);\n                 break;\n \n             default:"},{"sha":"b3cc3d2b8dc7cb2b400885f2f84424041d59a846","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -54,7 +54,7 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected IModel<List<SearchClause.Type>> types;\n \n-    protected IModel<Map<String, String>> groupNames;\n+    protected IModel<List<String>> groupNames;\n \n     protected IModel<List<String>> roleNames;\n \n@@ -64,6 +64,8 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected WebMarkupContainer searchFormContainer;\n \n+    protected final String realm;\n+\n     protected final AnyTypeKind typeKind;\n \n     protected final String type;\n@@ -80,6 +82,8 @@ public abstract class AbstractSearchPanel extends Panel {\n \n         protected final IModel<List<SearchClause>> model;\n \n+        protected String realm = SyncopeConstants.ROOT_REALM;\n+\n         protected boolean required = true;\n \n         protected boolean enableSearch = false;\n@@ -96,6 +100,11 @@ public Builder(final IModel<List<SearchClause>> model) {\n             this.model = model;\n         }\n \n+        public Builder<T> realm(final String realm) {\n+            this.realm = realm;\n+            return this;\n+        }\n+\n         public Builder<T> enableSearch(final IEventSink resultContainer) {\n             this.resultContainer = resultContainer;\n             return enableSearch();\n@@ -128,12 +137,13 @@ protected AbstractSearchPanel(\n \n         super(id);\n         populate();\n-        Pair<IModel<Map<String, String>>, Integer> groupInfo =\n+        Pair<IModel<List<String>>, Integer> groupInfo =\n                 SyncopeConsoleSession.get().owns(IdRepoEntitlement.GROUP_SEARCH)\n                 ? Pair.of(groupNames, groupRestClient.count(SyncopeConstants.ROOT_REALM, null, null))\n                 : Pair.of(groupNames, 0);\n \n         this.model = builder.model;\n+        this.realm = builder.realm;\n         this.typeKind = kind;\n         this.type = type;\n         this.required = builder.required;\n@@ -147,6 +157,7 @@ protected AbstractSearchPanel(\n \n         SearchClausePanel searchClausePanel = new SearchClausePanel(\"panel\", \"panel\",\n                 Model.of(new SearchClause()),\n+                realm,\n                 required,\n                 types,\n                 builder.customizer,\n@@ -156,7 +167,7 @@ protected AbstractSearchPanel(\n             searchClausePanel.enableSearch(builder.resultContainer);\n         }\n \n-        final MultiFieldPanel.Builder<SearchClause> searchView = new MultiFieldPanel.Builder<SearchClause>(model) {\n+        MultiFieldPanel.Builder<SearchClause> searchView = new MultiFieldPanel.Builder<SearchClause>(model) {\n \n             private static final long serialVersionUID = 1343431509987473047L;\n "},{"sha":"e371ca7ca4de43d990482527d408ad191775903b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -25,7 +25,7 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -38,8 +38,6 @@ public class AnyObjectSearchPanel extends AbstractSearchPanel {\n \n     private static final long serialVersionUID = -1769527800450203738L;\n \n-    public static final int MAX_GROUP_LIST_CARDINALITY = 30;\n-\n     public static class Builder extends AbstractSearchPanel.Builder<AnyObjectSearchPanel> {\n \n         private static final long serialVersionUID = 6308997285778809578L;\n@@ -79,18 +77,19 @@ protected List<SearchClause.Type> load() {\n             }\n         };\n \n-        this.groupNames = new LoadableDetachableModel<Map<String, String>>() {\n+        this.groupNames = new LoadableDetachableModel<List<String>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected Map<String, String> load() {\n-                return groupRestClient.search(SyncopeConstants.ROOT_REALM,\n+            protected List<String> load() {\n+                return groupRestClient.search(\n+                        realm,\n                         null,\n                         1,\n-                        MAX_GROUP_LIST_CARDINALITY,\n+                        Constants.MAX_GROUP_LIST_SIZE,\n                         new SortParam<>(\"name\", true),\n-                        null).stream().collect(Collectors.toMap(GroupTO::getKey, GroupTO::getName));\n+                        null).stream().map(GroupTO::getName).collect(Collectors.toList());\n             }\n         };\n "},{"sha":"1dfeb5e3f31dcd8d23c8ce47cb4f06ee950b4989","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -71,13 +71,13 @@ protected List<SearchClause.Type> load() {\n             }\n         };\n \n-        this.groupNames = new LoadableDetachableModel<Map<String, String>>() {\n+        this.groupNames = new LoadableDetachableModel<List<String>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected Map<String, String> load() {\n-                return Map.of();\n+            protected List<String> load() {\n+                return List.of();\n             }\n         };\n "},{"sha":"1153467f5e896a78b41924008e39b62181322837","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":76,"deletions":126,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -25,7 +25,9 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -40,7 +42,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n@@ -71,6 +72,21 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {\n \n     private static final long serialVersionUID = -527351923968737757L;\n \n+    protected static final AttributeModifier PREVENT_DEFAULT_RETURN = AttributeModifier.replace(\n+            \"onkeydown\",\n+            Model.of(\"if (event.keyCode == 13) { event.preventDefault(); }\"));\n+\n+    protected static final Consumer<AjaxRequestAttributes> AJAX_SUBMIT_ON_RETURN =\n+            attributes -> attributes.getAjaxCallListeners().add(new AjaxCallListener() {\n+\n+                private static final long serialVersionUID = 7160235486520935153L;\n+\n+                @Override\n+                public CharSequence getPrecondition(final Component component) {\n+                    return \"return (Wicket.Event.keyCode(attrs.event) == 13);\";\n+                }\n+            });\n+\n     public interface Customizer extends Serializable {\n \n         default IChoiceRenderer<SearchClause.Type> typeRenderer() {\n@@ -108,6 +124,8 @@ default void setFieldAccess(\n         }\n     }\n \n+    private final String realm;\n+\n     private final boolean required;\n \n     private final IModel<List<SearchClause.Type>> types;\n@@ -118,7 +136,7 @@ default void setFieldAccess(\n \n     private final IModel<List<String>> dnames;\n \n-    private final Pair<IModel<Map<String, String>>, Integer> groupInfo;\n+    private final Pair<IModel<List<String>>, Integer> groupInfo;\n \n     private final IModel<List<String>> roleNames;\n \n@@ -146,12 +164,13 @@ public SearchClausePanel(\n             final String id,\n             final String name,\n             final Model<SearchClause> clause,\n+            final String realm,\n             final boolean required,\n             final IModel<List<SearchClause.Type>> types,\n             final Customizer customizer,\n             final IModel<Map<String, PlainSchemaTO>> anames,\n             final IModel<List<String>> dnames,\n-            final Pair<IModel<Map<String, String>>, Integer> groupInfo,\n+            final Pair<IModel<List<String>>, Integer> groupInfo,\n             final IModel<List<String>> roleNames,\n             final IModel<List<String>> privilegeNames,\n             final IModel<List<String>> resourceNames) {\n@@ -160,6 +179,7 @@ public SearchClausePanel(\n \n         this.clause = clause == null ? new Model<>(null) : clause;\n \n+        this.realm = realm;\n         this.required = required;\n         this.types = types;\n         this.customizer = customizer;\n@@ -255,8 +275,7 @@ protected List<String> load() {\n                         return names.stream().sorted().collect(Collectors.toList());\n \n                     case GROUP_MEMBERSHIP:\n-                        return groupInfo.getLeft().getObject().values().stream().\n-                                sorted().collect(Collectors.toList());\n+                        return groupInfo.getLeft().getObject();\n \n                     case ROLE_MEMBERSHIP:\n                         return roleNames.getObject().stream().\n@@ -289,11 +308,8 @@ public void enableSearch(final IEventSink resultContainer) {\n         this.searchButton.setEnabled(true);\n         this.searchButton.setVisible(true);\n \n-        field.add(AttributeModifier.replace(\n-                \"onkeydown\",\n-                Model.of(\"if(event.keyCode == 13) {event.preventDefault();}\")));\n-\n-        field.add(new AjaxEventBehavior(\"keydown\") {\n+        field.add(PREVENT_DEFAULT_RETURN);\n+        field.add(new AjaxEventBehavior(Constants.ON_KEYDOWN) {\n \n             private static final long serialVersionUID = -7133385027739964990L;\n \n@@ -309,16 +325,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n             @Override\n             protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n                 super.updateAjaxAttributes(attributes);\n-\n-                attributes.getAjaxCallListeners().add(new AjaxCallListener() {\n-\n-                    private static final long serialVersionUID = 7160235486520935153L;\n-\n-                    @Override\n-                    public CharSequence getPrecondition(final Component component) {\n-                        return \"if (Wicket.Event.keyCode(attrs.event)  == 13) { return true; } else { return false; }\";\n-                    }\n-                });\n+                AJAX_SUBMIT_ON_RETURN.accept(attributes);\n             }\n         });\n     }\n@@ -354,13 +361,13 @@ public final MarkupContainer add(final Component... childs) {\n \n     @Override\n     public FieldPanel<SearchClause> settingsDependingComponents() {\n-        final SearchClause searchClause = this.clause.getObject();\n+        SearchClause searchClause = this.clause.getObject();\n \n-        final WebMarkupContainer operatorContainer = new WebMarkupContainer(\"operatorContainer\");\n+        WebMarkupContainer operatorContainer = new WebMarkupContainer(\"operatorContainer\");\n         operatorContainer.setOutputMarkupId(true);\n         field.add(operatorContainer);\n \n-        final BootstrapToggleConfig config = new BootstrapToggleConfig().\n+        BootstrapToggleConfig config = new BootstrapToggleConfig().\n                 withOnStyle(BootstrapToggleConfig.Style.info).\n                 withOffStyle(BootstrapToggleConfig.Style.warning).\n                 withSize(BootstrapToggleConfig.Size.mini);\n@@ -394,7 +401,7 @@ protected IModel<String> getOnLabel() {\n \n             @Override\n             protected CheckBox newCheckBox(final String id, final IModel<Boolean> model) {\n-                final CheckBox checkBox = super.newCheckBox(id, model);\n+                CheckBox checkBox = super.newCheckBox(id, model);\n                 checkBox.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n                     private static final long serialVersionUID = 1L;\n@@ -413,93 +420,85 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             operatorContainer.add(searchButtonFragment);\n         }\n \n-        final AjaxTextFieldPanel property = new AjaxTextFieldPanel(\n-                \"property\",\n-                \"property\",\n-                new PropertyModel<>(searchClause, \"property\"),\n-                false);\n+        AjaxTextFieldPanel property = new AjaxTextFieldPanel(\n+                \"property\", \"property\", new PropertyModel<>(searchClause, \"property\"), false);\n         property.hideLabel().setOutputMarkupId(true).setEnabled(true);\n         property.setChoices(properties.getObject());\n         field.add(property);\n \n-        property.getField().add(AttributeModifier.replace(\n-                \"onkeydown\",\n-                Model.of(\"if(event.keyCode == 13) { event.preventDefault(); }\")));\n-\n-        property.getField().add(new IndicatorAjaxEventBehavior(\"onkeyup\") {\n+        property.getField().add(PREVENT_DEFAULT_RETURN);\n+        property.getField().add(new IndicatorAjaxEventBehavior(Constants.ON_KEYUP) {\n \n-            private static final long serialVersionUID = -7866120562087857309L;\n+            private static final long serialVersionUID = -957948639666058749L;\n \n             @Override\n             protected void onEvent(final AjaxRequestTarget target) {\n-                if (field.getModel().getObject() == null || field.getModel().getObject().getType() == null) {\n-                    return;\n-                }\n+                if (field.getModel().getObject() != null\n+                        && field.getModel().getObject().getType() == Type.GROUP_MEMBERSHIP) {\n \n-                if (field.getModel().getObject().getType() == Type.GROUP_MEMBERSHIP) {\n                     String[] inputAsArray = property.getField().getInputAsArray();\n-\n-                    if (StringUtils.isBlank(property.getField().getInput()) || inputAsArray.length == 0) {\n+                    if (ArrayUtils.isEmpty(inputAsArray)) {\n                         property.setChoices(properties.getObject());\n-                    } else {\n-                        String inputValue = (inputAsArray.length > 1 && inputAsArray[1] != null)\n+                    } else if (groupInfo.getRight() > Constants.MAX_GROUP_LIST_SIZE) {\n+                        String inputValue = inputAsArray.length > 1 && inputAsArray[1] != null\n                                 ? inputAsArray[1]\n                                 : property.getField().getInput();\n-                        inputValue = (inputValue.startsWith(\"*\") && !inputValue.endsWith(\"*\"))\n-                                ? inputValue + '*'\n-                                : (!inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\"))\n-                                ? '*' + inputValue\n-                                : (inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\")\n-                                ? inputValue : '*' + inputValue + '*');\n-\n-                        if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {\n-                            property.setChoices(groupRestClient.search(\n-                                    SyncopeConstants.ROOT_REALM,\n-                                    SyncopeClient.getGroupSearchConditionBuilder().\n-                                            is(\"name\").equalToIgnoreCase(inputValue).\n-                                            query(),\n-                                    1,\n-                                    AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY,\n-                                    new SortParam<>(\"name\", true),\n-                                    null).stream().map(GroupTO::getName).collect(Collectors.toList()));\n+                        if (!inputValue.startsWith(\"*\")) {\n+                            inputValue = \"*\" + inputValue;\n                         }\n+                        if (!inputValue.endsWith(\"*\")) {\n+                            inputValue = inputValue + \"*\";\n+                        }\n+                        property.setChoices(groupRestClient.search(\n+                                realm,\n+                                SyncopeClient.getGroupSearchConditionBuilder().\n+                                        is(\"name\").equalToIgnoreCase(inputValue).\n+                                        query(),\n+                                1,\n+                                Constants.MAX_GROUP_LIST_SIZE,\n+                                new SortParam<>(\"name\", true),\n+                                null).stream().map(GroupTO::getName).collect(Collectors.toList()));\n                     }\n                 }\n             }\n+        });\n+        property.getField().add(new IndicatorAjaxEventBehavior(Constants.ON_KEYDOWN) {\n+\n+            private static final long serialVersionUID = -7133385027739964990L;\n \n             @Override\n-            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n-                super.updateAjaxAttributes(attributes);\n-                attributes.getAjaxCallListeners().clear();\n+            protected void onEvent(final AjaxRequestTarget target) {\n+                target.focusComponent(null);\n+                property.getField().inputChanged();\n+                property.getField().validate();\n+                if (property.getField().isValid()) {\n+                    property.getField().valid();\n+                    property.getField().updateModel();\n+                }\n             }\n-        }, new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-\n+            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+                super.updateAjaxAttributes(attributes);\n+                AJAX_SUBMIT_ON_RETURN.accept(attributes);\n             }\n         });\n \n-        final AjaxDropDownChoicePanel<SearchClause.Comparator> comparator = new AjaxDropDownChoicePanel<>(\n+        AjaxDropDownChoicePanel<SearchClause.Comparator> comparator = new AjaxDropDownChoicePanel<>(\n                 \"comparator\", \"comparator\", new PropertyModel<>(searchClause, \"comparator\"));\n         comparator.setChoices(comparators);\n         comparator.setNullValid(false).hideLabel().setOutputMarkupId(true);\n         comparator.setRequired(required);\n         comparator.setChoiceRenderer(getComparatorRender(field.getModel()));\n         field.add(comparator);\n \n-        final AjaxTextFieldPanel value = new AjaxTextFieldPanel(\n+        AjaxTextFieldPanel value = new AjaxTextFieldPanel(\n                 \"value\", \"value\", new PropertyModel<>(searchClause, \"value\"), false);\n         value.hideLabel().setOutputMarkupId(true);\n         field.add(value);\n \n-        value.getField().add(AttributeModifier.replace(\n-                \"onkeydown\",\n-                Model.of(\"if(event.keyCode == 13) {event.preventDefault();}\")));\n-\n-        value.getField().add(new IndicatorAjaxEventBehavior(\"keydown\") {\n+        value.getField().add(PREVENT_DEFAULT_RETURN);\n+        value.getField().add(new IndicatorAjaxEventBehavior(Constants.ON_KEYDOWN) {\n \n             private static final long serialVersionUID = -7133385027739964990L;\n \n@@ -517,16 +516,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n             @Override\n             protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n                 super.updateAjaxAttributes(attributes);\n-\n-                attributes.getAjaxCallListeners().add(new AjaxCallListener() {\n-\n-                    private static final long serialVersionUID = 7160235486520935153L;\n-\n-                    @Override\n-                    public CharSequence getPrecondition(final Component component) {\n-                        return \"if (Wicket.Event.keyCode(attrs.event)  == 13) { return true; } else { return false; }\";\n-                    }\n-                });\n+                AJAX_SUBMIT_ON_RETURN.accept(attributes);\n             }\n         });\n \n@@ -896,7 +886,7 @@ public SearchClause.Comparator getObject(\n     @Override\n     public FieldPanel<SearchClause> clone() {\n         SearchClausePanel panel = new SearchClausePanel(\n-                getId(), name, null, required, types, customizer, anames, dnames, groupInfo,\n+                getId(), name, null, realm, required, types, customizer, anames, dnames, groupInfo,\n                 roleNames, privilegeNames, resourceNames);\n         panel.setReadOnly(this.isReadOnly());\n         panel.setRequired(this.isRequired());\n@@ -906,46 +896,6 @@ public FieldPanel<SearchClause> clone() {\n         return panel;\n     }\n \n-    private static class DefaultChoiceRender implements IChoiceRenderer<String> {\n-\n-        private static final long serialVersionUID = -8034248752951761058L;\n-\n-        @Override\n-        public Object getDisplayValue(final String object) {\n-            return object;\n-        }\n-\n-        @Override\n-        public String getIdValue(final String object, final int index) {\n-            return object;\n-        }\n-\n-        @Override\n-        public String getObject(final String id, final IModel<? extends List<? extends String>> choices) {\n-            return id;\n-        }\n-    }\n-\n-    private class GroupChoiceRender extends DefaultChoiceRender {\n-\n-        private static final long serialVersionUID = -8034248752951761058L;\n-\n-        @Override\n-        public String getIdValue(final String object, final int index) {\n-            return object;\n-        }\n-\n-        @Override\n-        public String getObject(final String id, final IModel<? extends List<? extends String>> choices) {\n-            return id;\n-        }\n-\n-        @Override\n-        public Object getDisplayValue(final String object) {\n-            return groupInfo.getLeft().getObject().get(object);\n-        }\n-    }\n-\n     public static class SearchEvent implements Serializable {\n \n         private static final long serialVersionUID = 2693338614198749301L;"},{"sha":"7aec7e9e5d94f22d16301679340c9dd1f134d139","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -155,7 +155,7 @@ public List<MembershipTO> execute(final String filter) {\n                                     anyTO.getRealm(),\n                                     SyncopeClient.getGroupSearchConditionBuilder().\n                                             isAssignable().and().is(\"name\").equalTo(filter).query(),\n-                                    1, MAX_GROUP_LIST_CARDINALITY,\n+                                    1, Constants.MAX_GROUP_LIST_SIZE,\n                                     new SortParam<>(\"name\", true),\n                                     null)).stream().map(input -> new MembershipTO.Builder(input.getKey())\n                             .groupName(input.getName()).build()).collect(Collectors.toList());\n@@ -215,15 +215,15 @@ public List<GroupTO> getObject() {\n         }\n \n         /**\n-         * Retrieve the first MAX_GROUP_LIST_CARDINALITY assignable.\n+         * Retrieve the first MAX_GROUP_LIST_SIZE assignable.\n          */\n         @Override\n         protected void reloadObject() {\n             groups = groupRestClient.search(\n                     realm,\n                     SyncopeClient.getGroupSearchConditionBuilder().isAssignable().query(),\n                     1,\n-                    MAX_GROUP_LIST_CARDINALITY,\n+                    Constants.MAX_GROUP_LIST_SIZE,\n                     new SortParam<>(\"name\", true),\n                     null);\n         }"},{"sha":"ceda3a0cc610f0ef12a37e4a3d842b8285a58901","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Roles.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -46,8 +47,6 @@ public class Roles extends WizardStep implements ICondition {\n \n     private static final long serialVersionUID = 552437609667518888L;\n \n-    private static final int MAX_ROLE_LIST_SIZE = 30;\n-\n     private final List<String> allRoles;\n \n     protected WebMarkupContainer dynrolesContainer;\n@@ -96,8 +95,8 @@ public <T extends AnyTO> Roles(final AnyWrapper<?> modelObject) {\n                     @Override\n                     public List<String> execute(final String filter) {\n                         if (StringUtils.isEmpty(filter) || \"*\".equals(filter)) {\n-                            return allRoles.size() > MAX_ROLE_LIST_SIZE\n-                                    ? allRoles.subList(0, MAX_ROLE_LIST_SIZE)\n+                            return allRoles.size() > Constants.MAX_ROLE_LIST_SIZE\n+                                    ? allRoles.subList(0, Constants.MAX_ROLE_LIST_SIZE)\n                                     : allRoles;\n \n                         }"},{"sha":"62834fb96e4185d93ee105f52b4144833d6b541b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.properties?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=${key} Search\n+search.result=<i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i> Search"},{"sha":"8907de40ef004a22d790884a344b3a554be18110","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_fr_CA.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_fr_CA.properties?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=Recherche ${key} \n+search.result=<i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i> Recherche"},{"sha":"6cbb1c6226df61978ba84b9b7425d94e8a489adc","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_it.properties?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=Ricerca ${key}\n+search.result=<i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i> Ricerca"},{"sha":"fa7f13c7e2c13bb241e0e9018314bbaab203b736","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_ja.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ja.properties?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=${key} \\u691c\\u7d22\n+search.result=<i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i> \\u691c\\u7d22"},{"sha":"05fd98870946094ea70793fe19be2e6b289bf056","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_pt_BR.properties?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-search.result=${key} Search\n+search.result=<i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i> Procurar"},{"sha":"91220925a23f73b191bc573c2c359ad5fdbc463f","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/AnyPanel_ru.properties","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel_ru.properties?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -14,5 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-#\n-search.result=\\u041f\\u043e\\u0438\\u0441\\u043a \\u0434\\u043b\\u044f ${key}\n+search.result=<i class=\"fa fa-caret-down\" aria-hidden=\"true\"></i> \\u041f\\u043e\\u0438\\u0441\\u043a \\u0434\\u043b\\u044f"},{"sha":"47aeb212bbfebc13d1f31e3b1fa6a4b217d3f255","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/PropagationByResourceTest.java","status":"modified","additions":41,"deletions":21,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0c1891200ef2c07597fee7986e160e0f5daceee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0c1891200ef2c07597fee7986e160e0f5daceee0/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResourceTest.java?ref=0c1891200ef2c07597fee7986e160e0f5daceee0","patch":"@@ -30,14 +30,15 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n import org.springframework.test.util.ReflectionTestUtils;\n \n public class PropagationByResourceTest extends AbstractTest {\n \n-    private final String key = \"testKey\";\n+    private static final String KEY = \"testKey\";\n \n     private final PropagationByResource<String> propagationByResource = new PropagationByResource<>();\n \n@@ -48,6 +49,7 @@ public void voidMethods(\n             @Mock Set<String> toBeDeleted,\n             @Mock Map<String, String> oldConnObjectKeys,\n             @Mock PropagationByResource<String> propByRes) {\n+\n         ReflectionTestUtils.setField(propagationByResource, \"toBeCreated\", toBeCreated);\n         ReflectionTestUtils.setField(propagationByResource, \"toBeUpdated\", toBeUpdated);\n         ReflectionTestUtils.setField(propagationByResource, \"toBeDeleted\", toBeDeleted);\n@@ -75,20 +77,20 @@ public void voidMethods(\n         verify(toBeDeleted).addAll(any());\n \n         String oldConnObjectKey = \"oldConnObjectKey\";\n-        propagationByResource.addOldConnObjectKey(key, oldConnObjectKey);\n-        verify(oldConnObjectKeys).put(key, oldConnObjectKey);\n-        propagationByResource.addOldConnObjectKey(key, null);\n-        verify(oldConnObjectKeys, times(0)).put(key, null);\n+        propagationByResource.addOldConnObjectKey(KEY, oldConnObjectKey);\n+        verify(oldConnObjectKeys).put(KEY, oldConnObjectKey);\n+        propagationByResource.addOldConnObjectKey(KEY, null);\n+        verify(oldConnObjectKeys, times(0)).put(KEY, null);\n         propagationByResource.addOldConnObjectKey(null, null);\n         verify(oldConnObjectKeys, times(0)).put(null, null);\n     }\n \n     @Test\n     public void add() {\n-        assertTrue(propagationByResource.add(ResourceOperation.CREATE, key));\n-        assertTrue(propagationByResource.add(ResourceOperation.UPDATE, key));\n-        assertTrue(propagationByResource.add(ResourceOperation.DELETE, key));\n-        assertFalse(propagationByResource.add(ResourceOperation.NONE, key));\n+        assertTrue(propagationByResource.add(ResourceOperation.CREATE, KEY));\n+        assertTrue(propagationByResource.add(ResourceOperation.UPDATE, KEY));\n+        assertTrue(propagationByResource.add(ResourceOperation.DELETE, KEY));\n+        assertFalse(propagationByResource.add(ResourceOperation.NONE, KEY));\n     }\n \n     @Test\n@@ -105,10 +107,10 @@ public void addAll() {\n \n     @Test\n     public void remove() {\n-        assertFalse(propagationByResource.remove(ResourceOperation.CREATE, key));\n-        assertFalse(propagationByResource.remove(ResourceOperation.UPDATE, key));\n-        assertFalse(propagationByResource.remove(ResourceOperation.DELETE, key));\n-        assertFalse(propagationByResource.remove(ResourceOperation.NONE, key));\n+        assertFalse(propagationByResource.remove(ResourceOperation.CREATE, KEY));\n+        assertFalse(propagationByResource.remove(ResourceOperation.UPDATE, KEY));\n+        assertFalse(propagationByResource.remove(ResourceOperation.DELETE, KEY));\n+        assertFalse(propagationByResource.remove(ResourceOperation.NONE, KEY));\n     }\n \n     @Test\n@@ -135,23 +137,23 @@ public void removeAndRetainAll() {\n \n     @Test\n     public void contains() {\n-        assertFalse(propagationByResource.contains(ResourceOperation.CREATE, key));\n-        assertFalse(propagationByResource.contains(ResourceOperation.UPDATE, key));\n-        assertFalse(propagationByResource.contains(ResourceOperation.DELETE, key));\n-        assertFalse(propagationByResource.contains(ResourceOperation.NONE, key));\n+        assertFalse(propagationByResource.contains(ResourceOperation.CREATE, KEY));\n+        assertFalse(propagationByResource.contains(ResourceOperation.UPDATE, KEY));\n+        assertFalse(propagationByResource.contains(ResourceOperation.DELETE, KEY));\n+        assertFalse(propagationByResource.contains(ResourceOperation.NONE, KEY));\n \n         Set<String> matchingList = new HashSet<>();\n-        matchingList.add(key);\n-        assertFalse(propagationByResource.contains(key));\n+        matchingList.add(KEY);\n+        assertFalse(propagationByResource.contains(KEY));\n \n         ReflectionTestUtils.setField(propagationByResource, \"toBeDeleted\", matchingList);\n-        assertTrue(propagationByResource.contains(key));\n+        assertTrue(propagationByResource.contains(KEY));\n     }\n \n     @Test\n     public void get() {\n         Set<String> matchingList = new HashSet<>();\n-        matchingList.add(key);\n+        matchingList.add(KEY);\n \n         ReflectionTestUtils.setField(propagationByResource, \"toBeDeleted\", matchingList);\n         assertEquals(matchingList, propagationByResource.get(ResourceOperation.DELETE));\n@@ -181,4 +183,22 @@ public void set() {\n         propagationByResource.set(ResourceOperation.DELETE, keys);\n         assertEquals(keys, ReflectionTestUtils.getField(propagationByResource, \"toBeDeleted\"));\n     }\n+\n+    @Test\n+    public void byLinkedAccount() {\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        propByLinkedAccount.add(ResourceOperation.CREATE, Pair.of(\"resource1\", \"connObjectKey1\"));\n+        propByLinkedAccount.add(ResourceOperation.CREATE, Pair.of(\"resource2\", \"connObjectKey2\"));\n+\n+        assertEquals(2, propByLinkedAccount.asMap().size());\n+        assertEquals(ResourceOperation.CREATE, propByLinkedAccount.asMap().get(Pair.of(\"resource1\", \"connObjectKey1\")));\n+        assertEquals(ResourceOperation.CREATE, propByLinkedAccount.asMap().get(Pair.of(\"resource2\", \"connObjectKey2\")));\n+\n+        Set<String> noPropResourceKeys = Set.of(\"resource2\");\n+        propByLinkedAccount.get(ResourceOperation.CREATE).\n+                removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+\n+        assertEquals(1, propByLinkedAccount.asMap().size());\n+        assertEquals(ResourceOperation.CREATE, propByLinkedAccount.asMap().get(Pair.of(\"resource1\", \"connObjectKey1\")));\n+    }\n }"}]}