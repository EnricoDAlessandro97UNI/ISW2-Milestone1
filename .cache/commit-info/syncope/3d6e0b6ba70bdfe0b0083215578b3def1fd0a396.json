{"sha":"3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNkNmUwYjZiYTcwYmRmZTBiMDA4MzIxNTU3OGIzZGVmMWZkMGEzOTY=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"marco.disabatino@tirasa.net","date":"2019-05-31T13:25:22Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"marco.disabatino@tirasa.net","date":"2019-05-31T15:33:31Z"},"message":"[SYNCOPE-1473] conservative membership policy management","tree":{"sha":"fae1c65fbee54eb42723e3929cbc2cdada77a722","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fae1c65fbee54eb42723e3929cbc2cdada77a722"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"54b6c5093e43535997be4e9d297e6081512b5bff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54b6c5093e43535997be4e9d297e6081512b5bff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/54b6c5093e43535997be4e9d297e6081512b5bff"}],"stats":{"total":163,"additions":153,"deletions":10},"files":[{"sha":"d1817ae18608c7c5dd9aeb761da69f1a8e0395d3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":46,"deletions":10,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.TreeSet;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n@@ -34,6 +35,7 @@\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -87,16 +89,14 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                 userDAO.findAllGroupKeys(user).forEach(groupKey -> {\n                     Group group = groupDAO.find(groupKey);\n                     if (group != null && groupDAO.findAllResourceKeys(groupKey).contains(task.getResource().getKey())) {\n-                        LOG.debug(\"Evaluating connObjectLink for {}\", group);\n-                        JexlContext jexlContext = new MapContext();\n-                        JexlUtils.addFieldsToContext(group, jexlContext);\n-                        JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n-                        JexlUtils.addDerAttrsToContext(group, jexlContext);\n-                        String groupConnObjectLinkLink =\n-                                JexlUtils.evaluate(provision.get().getMapping().getConnObjectLink(), jexlContext);\n-                        LOG.debug(\"ConnObjectLink for {} is '{}'\", group, groupConnObjectLinkLink);\n-                        if (StringUtils.isNotBlank(groupConnObjectLinkLink)) {\n-                            groupConnObjectLinks.add(groupConnObjectLinkLink);\n+\n+                        String groupConnObjectLink = evaluateGroupConnObjectLink(\n+                                provision.get().getMapping().getConnObjectLink(), group);\n+\n+                        LOG.debug(\"ConnObjectLink for {} is '{}'\", group, groupConnObjectLink);\n+                        if (StringUtils.isNotBlank(groupConnObjectLink)) {\n+                            groupConnObjectLinks.add(groupConnObjectLink);\n+\n                         }\n                     }\n                 });\n@@ -111,7 +111,24 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                         groups.add(obj.toString());\n                     });\n                     attributes.remove(ldapGroups);\n+\n+                    if (beforeObj != null && beforeObj.getAttributeByName(getGroupMembershipAttrName()) != null) {\n+                        Set<String> connObjectLinks = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+                        buildManagedGroupConnObjectLinks(\n+                                provision.get().getResource(),\n+                                provision.get().getMapping().getConnObjectLink(),\n+                                connObjectLinks);\n+\n+                        Attribute beforeLdapGroups = beforeObj.getAttributeByName(getGroupMembershipAttrName());\n+                        LOG.debug(\"Memberships not managed by Syncope: {}\", beforeLdapGroups);\n+                        for (Object value : beforeLdapGroups.getValue()) {\n+                            if (!connObjectLinks.contains(String.valueOf(value))) {\n+                                groups.add(String.valueOf(value));\n+                            }\n+                        }\n+                    }\n                 }\n+                LOG.debug(\"Add ldapGroups to attributes: {}\" + groups);\n                 attributes.add(AttributeBuilder.build(getGroupMembershipAttrName(), groups));\n \n                 task.setAttributes(attributes);\n@@ -120,4 +137,23 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n             LOG.debug(\"Not about user, or group mapping missing for resource: not doing anything\");\n         }\n     }\n+\n+    private String evaluateGroupConnObjectLink(final String connObjectLinkTemplate, final Group group) {\n+        LOG.debug(\"Evaluating connObjectLink for {}\", group);\n+\n+        JexlContext jexlContext = new MapContext();\n+        JexlUtils.addFieldsToContext(group, jexlContext);\n+        JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n+        JexlUtils.addDerAttrsToContext(group, jexlContext);\n+\n+        return JexlUtils.evaluate(connObjectLinkTemplate, jexlContext);\n+    }\n+\n+    private void buildManagedGroupConnObjectLinks(final ExternalResource externalResource,\n+            final String connObjectLinkTemplate, final Set<String> connObjectLinks) {\n+        List<Group> managedGroups = groupDAO.findByResource(externalResource);\n+        managedGroups.forEach(group -> {\n+            connObjectLinks.add(evaluateGroupConnObjectLink(connObjectLinkTemplate, group));\n+        });\n+    }\n }"},{"sha":"63ec15e208e57ed1c3fb5488d0d635f253d42acc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","patch":"@@ -46,21 +46,30 @@\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -462,4 +471,102 @@ public void issueSYNCOPE1430() throws ParseException {\n             }\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1473() throws ParseException {\n+        // create a new group schema\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(\"ldapGroups\" + getUUIDString());\n+        schemaTO.setType(AttrSchemaType.String);\n+        schemaTO.setMultivalue(true);\n+        schemaTO.setReadonly(true);\n+        schemaTO.setAnyTypeClass(\"minimal user\");\n+\n+        schemaTO = createSchema(SchemaType.PLAIN, schemaTO);\n+        assertNotNull(schemaTO);\n+\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        try {\n+            // 1. clone the LDAP resource and add some sensible mappings\n+            ProvisionTO provisionGroup =\n+                    SerializationUtils.clone(ldap.getProvision(AnyTypeKind.GROUP.name()).orElse(null));\n+            assertNotNull(provisionGroup);\n+            provisionGroup.getVirSchemas().clear();\n+\n+            ProvisionTO provisionUser =\n+                    SerializationUtils.clone(ldap.getProvision(AnyTypeKind.USER.name()).orElse(null));\n+            assertNotNull(provisionUser);\n+            provisionUser.getMapping().getItems().removeIf(item -> \"mail\".equals(item.getExtAttrName()));\n+            provisionUser.getVirSchemas().clear();\n+\n+            ItemTO ldapGroups = new ItemTO();\n+            ldapGroups.setPurpose(MappingPurpose.PROPAGATION);\n+            ldapGroups.setIntAttrName(schemaTO.getKey());\n+            ldapGroups.setExtAttrName(\"ldapGroups\");\n+            provisionUser.getMapping().add(ldapGroups);\n+\n+            ldap.getProvisions().clear();\n+            ldap.getProvisions().add(provisionUser);\n+            ldap.getProvisions().add(provisionGroup);\n+            ldap.setKey(RESOURCE_NAME_LDAP + \"1473\" + getUUIDString());\n+            resourceService.create(ldap);\n+\n+            // 1. create group with the new resource assigned\n+            GroupCR groupCR = new GroupCR();\n+            groupCR.setName(\"SYNCOPEGROUP1473-\" + getUUIDString());\n+            groupCR.setRealm(\"/\");\n+            groupCR.getResources().add(ldap.getKey());\n+\n+            GroupTO groupTO = createGroup(groupCR).getEntity();\n+            assertNotNull(groupCR);\n+\n+            // 2. create user with the new resource assigned\n+            UserCR userCR = UserITCase.getUniqueSample(\"syncope1473@syncope.apache.org\");\n+            userCR.getResources().clear();\n+            userCR.getResources().add(ldap.getKey());\n+            userCR.getMemberships().add(new MembershipTO.Builder(groupTO.getKey()).build());\n+\n+            UserTO userTO = createUser(userCR).getEntity();\n+            assertNotNull(userTO);\n+\n+            // 3. check attributes prepared for propagation\n+            PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(userTO.getResources().iterator().next()).\n+                    anyTypeKind(AnyTypeKind.USER).entityKey(userTO.getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            ResourceDR resourceDR = new ResourceDR.Builder().key(groupTO.getKey()).\n+                    action(ResourceDeassociationAction.UNLINK).resource(ldap.getKey()).build();\n+\n+            groupService.deassociate(resourceDR);\n+            groupService.delete(groupTO.getKey());\n+\n+            GroupCR newGroupCR = new GroupCR();\n+            newGroupCR.setName(\"NEWSYNCOPEGROUP1473-\" + getUUIDString());\n+            newGroupCR.setRealm(\"/\");\n+            newGroupCR.getResources().add(ldap.getKey());\n+\n+            GroupTO newGroupTO = createGroup(newGroupCR).getEntity();\n+            assertNotNull(newGroupTO);\n+\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userTO.getKey());\n+            userUR.getMemberships().add(\n+                    new MembershipUR.Builder(newGroupTO.getKey()).operation(PatchOperation.ADD_REPLACE).build());\n+            userService.update(userUR);\n+\n+            ConnObjectTO connObject =\n+                    resourceService.readConnObject(ldap.getKey(), AnyTypeKind.USER.name(), userTO.getKey());\n+            assertNotNull(connObject);\n+            assertNotNull(connObject.getAttr(\"ldapGroups\"));\n+            assertTrue(connObject.getAttr(\"ldapGroups\").get().getValues().size() == 2);\n+\n+        } finally {\n+            try {\n+                resourceService.delete(ldap.getKey());\n+            } catch (Exception ignore) {\n+                // ignore\n+            }\n+        }\n+    }\n }"}]}