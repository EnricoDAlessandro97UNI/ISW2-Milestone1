{"sha":"8a30a9e77f4840dc8514e4d9d80cd4e173007783","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhhMzBhOWU3N2Y0ODQwZGM4NTE0ZTRkOWQ4MGNkNGUxNzMwMDc3ODM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-24T11:52:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-24T11:52:55Z"},"message":"Using new PasswordGenerator from SYNCOPE-121 for generating policy-compliant random passwords during synchronization from external resources (if needed)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1401636 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e09c8bfe01ee61f4eba15804bac609169e585df2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e09c8bfe01ee61f4eba15804bac609169e585df2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8a30a9e77f4840dc8514e4d9d80cd4e173007783","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a30a9e77f4840dc8514e4d9d80cd4e173007783","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a30a9e77f4840dc8514e4d9d80cd4e173007783","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a30a9e77f4840dc8514e4d9d80cd4e173007783/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"675ec17796c4752d8ab7cbd535ab4b8505b8a0bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/675ec17796c4752d8ab7cbd535ab4b8505b8a0bb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/675ec17796c4752d8ab7cbd535ab4b8505b8a0bb"}],"stats":{"total":61,"additions":55,"deletions":6},"files":[{"sha":"66735b9d736a22c8cb0cd54a55c02d3c791a9925","filename":"core/src/main/java/org/apache/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":49,"deletions":2,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a30a9e77f4840dc8514e4d9d80cd4e173007783/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a30a9e77f4840dc8514e4d9d80cd4e173007783/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=8a30a9e77f4840dc8514e4d9d80cd4e173007783","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.core.util;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang.RandomStringUtils;\n@@ -39,10 +41,15 @@\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.SchemaMapping;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.types.PasswordPolicySpec;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -77,6 +84,18 @@ public class ConnObjectUtil {\n     @Autowired\n     private UserDataBinder userDataBinder;\n \n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private PasswordGenerator pwdGen;\n+\n     /**\n      * Build an UserTO out of connector object attributes and schema mapping.\n      *\n@@ -88,9 +107,37 @@ public class ConnObjectUtil {\n     public UserTO getUserTO(final ConnectorObject obj, final SyncTask syncTask) {\n         UserTO userTO = getUserTOFromConnObject(obj, syncTask);\n \n-        // if password was not set above, generate a random string\n+        // if password was not set above, generate\n         if (StringUtils.isBlank(userTO.getPassword())) {\n-            userTO.setPassword(RandomStringUtils.randomAlphanumeric(16));\n+            List<PasswordPolicySpec> ppSpecs = new ArrayList<PasswordPolicySpec>();\n+            ppSpecs.add((PasswordPolicySpec) policyDAO.getGlobalPasswordPolicy().getSpecification());\n+\n+            for (MembershipTO memb : userTO.getMemberships()) {\n+                SyncopeRole role = roleDAO.find(memb.getRoleId());\n+                if (role != null && role.getPasswordPolicy() != null\n+                        && role.getPasswordPolicy().getSpecification() != null) {\n+\n+                    ppSpecs.add((PasswordPolicySpec) role.getPasswordPolicy().getSpecification());\n+                }\n+            }\n+            for (String resName : userTO.getResources()) {\n+                ExternalResource resource = resourceDAO.find(resName);\n+                if (resource != null && resource.getPasswordPolicy() != null\n+                        && resource.getPasswordPolicy().getSpecification() != null) {\n+\n+                    ppSpecs.add((PasswordPolicySpec) resource.getPasswordPolicy().getSpecification());\n+                }\n+            }\n+\n+            String password;\n+            try {\n+                password = pwdGen.generatePasswordFromPwdSpec(ppSpecs);\n+            } catch (IncompatiblePolicyException e) {\n+                LOG.error(\"Could not generate policy-compliant random password for {}\", userTO, e);\n+\n+                password = RandomStringUtils.randomAlphanumeric(16);\n+            }\n+            userTO.setPassword(password);\n         }\n \n         return userTO;"},{"sha":"af8a592f46c37478dc35dde000cb866459c4de51","filename":"core/src/main/java/org/apache/syncope/core/util/PasswordGenerator.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a30a9e77f4840dc8514e4d9d80cd4e173007783/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a30a9e77f4840dc8514e4d9d80cd4e173007783/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordGenerator.java?ref=8a30a9e77f4840dc8514e4d9d80cd4e173007783","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang.RandomStringUtils;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -45,6 +45,7 @@ public class PasswordGenerator {\n \n     public String generatePasswordFromPwdSpec(final List<PasswordPolicySpec> passwordPolicySpecs)\n             throws IncompatiblePolicyException {\n+\n         PasswordPolicySpec policySpec = mergePolicySpecs(passwordPolicySpecs);\n \n         evaluateFinalPolicySpec(policySpec);\n@@ -53,6 +54,7 @@ public String generatePasswordFromPwdSpec(final List<PasswordPolicySpec> passwor\n \n     public String generateUserPassword(final SyncopeUser user)\n             throws IncompatiblePolicyException {\n+\n         List<PasswordPolicySpec> userPasswordPolicies = new ArrayList<PasswordPolicySpec>();\n         PasswordPolicySpec passwordPolicySpec = policyDAO.getGlobalPasswordPolicy().getSpecification();\n \n@@ -86,8 +88,7 @@ public String generateUserPassword(final SyncopeUser user)\n         return generatePassword(policySpec);\n     }\n \n-    private PasswordPolicySpec mergePolicySpecs(List<PasswordPolicySpec> userPasswordPolicies) {\n-\n+    private PasswordPolicySpec mergePolicySpecs(final List<PasswordPolicySpec> userPasswordPolicies) {\n         PasswordPolicySpec fpps = new PasswordPolicySpec();\n         fpps.setMinLength(0);\n         fpps.setMaxLength(1000);\n@@ -163,6 +164,7 @@ private PasswordPolicySpec mergePolicySpecs(List<PasswordPolicySpec> userPasswor\n \n     private void evaluateFinalPolicySpec(final PasswordPolicySpec policySpec)\n             throws IncompatiblePolicyException {\n+        \n         if (policySpec.getMinLength() == 0) {\n             LOG.error(\"Minimum lenght given is zero\");\n             throw new IncompatiblePolicyException(\"Minimum lenght given is zero\");\n@@ -280,7 +282,7 @@ private String generatePassword(final PasswordPolicySpec policySpec) {\n         return generatedPassword.toString();\n     }\n \n-    private int randomNumber(int range) {\n+    private int randomNumber(final int range) {\n         int randomNumber = (int) (Math.random() * (range - 1));\n         return randomNumber == 0 ? 1 : randomNumber;\n     }"}]}