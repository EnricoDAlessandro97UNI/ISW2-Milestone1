{"sha":"0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","node_id":"C_kwDOJfYA1toAKDBmNWExZWRhYmU1ODNiNjE2MGZlNjNlM2YzODExYmQ4YTRhYjdlMDk","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-04-12T04:45:49Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2023-04-12T04:45:49Z"},"message":"[SYNCOPE-1750] Reactoring Account and Password policy enforcement (#437) (#439)","tree":{"sha":"bc05c801b71d16c1891e41f53aae43e80f9396c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bc05c801b71d16c1891e41f53aae43e80f9396c3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNjd9CRBK7hj4Ov3rIwAAwy0IAGc8F0I1q+y+FXwoso3ppEu6\nmeRvbV0Z3pi2/9U+eb7ncCj/UVvifBHkfONPgMwAPSQQTNnUL4VHNTbGDVtXANxn\nfZT5M7OpiF8R30Enx5BmJF1NwY7SNTTljFtmSHVpi/pKML14nnxNJ76vs8xnT0W+\nz7ZrG7Q+mCjuvNfWQ77dXHTOhOLudlUOQFtRQwY5oRd+a4g77nVKLVkkdR+EX7Uj\nZc5mjB82BXkThABFrci5A1IYu0sEDjWQiD/M9bIo60SFo4ofkS1S45+lHmxUCmxQ\ns+dky1Bw4jW3dKSrUjzPThs75gMZ3I+CGHxuTiQW62TudUatoqlYzW0E2PUOCjM=\n=uJnJ\n-----END PGP SIGNATURE-----\n","payload":"tree bc05c801b71d16c1891e41f53aae43e80f9396c3\nparent 0b62f3ca0e9c72f4178b3567f3be2b30072547d8\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1681274749 +0200\ncommitter GitHub <noreply@github.com> 1681274749 +0200\n\n[SYNCOPE-1750] Reactoring Account and Password policy enforcement (#437) (#439)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"0b62f3ca0e9c72f4178b3567f3be2b30072547d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b62f3ca0e9c72f4178b3567f3be2b30072547d8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b62f3ca0e9c72f4178b3567f3be2b30072547d8"}],"stats":{"total":1542,"additions":1046,"deletions":496},"files":[{"sha":"03a1595a9ab0ba82195f520d7fbfe90fec0ee8cf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPasswordRule.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPasswordRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPasswordRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPasswordRule.groovy?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -24,7 +24,7 @@ import org.apache.syncope.core.persistence.api.entity.user.User\n @CompileStatic\n class MyPasswordRule implements PasswordRule {\n   \n-  void enforce(User user) {\n+  void enforce(User user, String clearPassword) {\n   }\n \n   void enforce(LinkedAccount account) {"},{"sha":"c0873e0b92110292561dc451733bfbcff96eae72","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/UserUR.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.request;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n@@ -208,14 +209,24 @@ public List<LinkedAccountUR> getLinkedAccounts() {\n         return linkedAccounts;\n     }\n \n-    @Override\n-    public boolean isEmpty() {\n+    @JsonIgnore\n+    protected boolean isEmptyNotConsideringPassword() {\n         return super.isEmpty()\n-                && username == null && password == null && securityQuestion == null && securityAnswer == null\n+                && username == null && securityQuestion == null && securityAnswer == null\n                 && mustChangePassword == null && relationships.isEmpty() && memberships.isEmpty() && roles.isEmpty()\n                 && linkedAccounts.isEmpty();\n     }\n \n+    @JsonIgnore\n+    public boolean isEmptyButPassword() {\n+        return isEmptyNotConsideringPassword() && password != null;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return isEmptyNotConsideringPassword() && password == null;\n+    }\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()."},{"sha":"b5c53af215d14dab7629b463ffe4fef55b683ffa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -84,7 +84,5 @@ public interface UserDAO extends AnyDAO<User> {\n \n     List<LinkedAccount> findLinkedAccountsByPrivilege(Privilege privilege);\n \n-    Pair<Boolean, Boolean> enforcePolicies(User user);\n-\n     Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(User user);\n }"},{"sha":"352afd92a3f6836515ab4189255ce925a03ef39d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -39,10 +39,6 @@ public interface User extends Account, GroupableRelatable<User, UMembership, UPl\n \n     boolean hasTokenExpired();\n \n-    String getClearPassword();\n-\n-    void removeClearPassword();\n-\n     OffsetDateTime getChangePwdDate();\n \n     void setChangePwdDate(OffsetDateTime changePwdDate);\n@@ -59,10 +55,6 @@ public interface User extends Account, GroupableRelatable<User, UMembership, UPl\n \n     String getSecurityAnswer();\n \n-    String getClearSecurityAnswer();\n-\n-    void setEncodedSecurityAnswer(String securityAnswer);\n-\n     void setSecurityAnswer(String securityAnswer);\n \n     Integer getFailedLogins();"},{"sha":"d7d22ffc8f26e2dbfaa32d770637a00de2b25056","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/JPAJSONPersistenceContext.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n@@ -128,7 +127,6 @@ public UserDAO userDAO(\n             final @Lazy DynRealmDAO dynRealmDAO,\n             final @Lazy RoleDAO roleDAO,\n             final @Lazy AccessTokenDAO accessTokenDAO,\n-            final @Lazy RealmDAO realmDAO,\n             final @Lazy GroupDAO groupDAO,\n             final @Lazy DelegationDAO delegationDAO,\n             final @Lazy FIQLQueryDAO fiqlQueryDAO,\n@@ -141,7 +139,6 @@ public UserDAO userDAO(\n                 dynRealmDAO,\n                 roleDAO,\n                 accessTokenDAO,\n-                realmDAO,\n                 groupDAO,\n                 delegationDAO,\n                 fiqlQueryDAO,"},{"sha":"0e514159ae10e51198e4e59db93d2f3a1310f7d6","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONUserDAO.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -22,7 +22,6 @@\n import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -31,7 +30,6 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -40,7 +38,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n \n public class JPAJSONUserDAO extends JPAUserDAO {\n@@ -54,7 +51,6 @@ public JPAJSONUserDAO(\n             final DynRealmDAO dynRealmDAO,\n             final RoleDAO roleDAO,\n             final AccessTokenDAO accessTokenDAO,\n-            final RealmDAO realmDAO,\n             final GroupDAO groupDAO,\n             final DelegationDAO delegationDAO,\n             final FIQLQueryDAO fiqlQueryDAO,\n@@ -67,7 +63,6 @@ public JPAJSONUserDAO(\n                 dynRealmDAO,\n                 roleDAO,\n                 accessTokenDAO,\n-                realmDAO,\n                 groupDAO,\n                 delegationDAO,\n                 fiqlQueryDAO,\n@@ -106,24 +101,9 @@ public List<User> findByDerAttrValue(\n \n     @Override\n     protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n-        // 1. save clear password value before save\n-        String clearPwd = user.getClearPassword();\n-\n-        // 2. save\n         entityManager().flush();\n         User merged = entityManager().merge(user);\n \n-        // 3. set back the sole clear password value\n-        JPAUser.class.cast(merged).setClearPassword(clearPwd);\n-\n-        // 4. enforce password and account policies\n-        try {\n-            enforcePolicies(merged);\n-        } catch (InvalidEntityException e) {\n-            entityManager().remove(merged);\n-            throw e;\n-        }\n-\n         // ensure that entity listeners are invoked at this point\n         entityManager().flush();\n "},{"sha":"f78917d1806541c57bbb7d19970c841a0214f9e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -708,7 +708,6 @@ public UserDAO userDAO(\n             final @Lazy DynRealmDAO dynRealmDAO,\n             final RoleDAO roleDAO,\n             final AccessTokenDAO accessTokenDAO,\n-            final RealmDAO realmDAO,\n             final @Lazy GroupDAO groupDAO,\n             final DelegationDAO delegationDAO,\n             final FIQLQueryDAO fiqlQueryDAO) {\n@@ -720,7 +719,6 @@ public UserDAO userDAO(\n                 dynRealmDAO,\n                 roleDAO,\n                 accessTokenDAO,\n-                realmDAO,\n                 groupDAO,\n                 delegationDAO,\n                 fiqlQueryDAO,"},{"sha":"3ca97362d7a69afdeebd707786a58d7cfd9c2b79","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":0,"deletions":229,"changes":229,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import jakarta.persistence.NoResultException;\n-import jakarta.persistence.PersistenceException;\n import jakarta.persistence.Query;\n import jakarta.persistence.TypedQuery;\n import java.time.OffsetDateTime;\n@@ -31,51 +30,37 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPALinkedAccount;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.provisioning.api.rules.AccountRule;\n-import org.apache.syncope.core.provisioning.api.rules.PasswordRule;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n-import org.apache.syncope.core.spring.implementation.ImplementationManager;\n-import org.apache.syncope.core.spring.policy.AccountPolicyException;\n-import org.apache.syncope.core.spring.policy.PasswordPolicyException;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -86,8 +71,6 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     protected final AccessTokenDAO accessTokenDAO;\n \n-    protected final RealmDAO realmDAO;\n-\n     protected final GroupDAO groupDAO;\n \n     protected final DelegationDAO delegationDAO;\n@@ -96,18 +79,13 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     protected final SecurityProperties securityProperties;\n \n-    protected final Map<String, AccountRule> perContextAccountRules = new ConcurrentHashMap<>();\n-\n-    protected final Map<String, PasswordRule> perContextPasswordRules = new ConcurrentHashMap<>();\n-\n     public JPAUserDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n             final DynRealmDAO dynRealmDAO,\n             final RoleDAO roleDAO,\n             final AccessTokenDAO accessTokenDAO,\n-            final RealmDAO realmDAO,\n             final GroupDAO groupDAO,\n             final DelegationDAO delegationDAO,\n             final FIQLQueryDAO fiqlQueryDAO,\n@@ -116,7 +94,6 @@ public JPAUserDAO(\n         super(anyUtilsFactory, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n         this.roleDAO = roleDAO;\n         this.accessTokenDAO = accessTokenDAO;\n-        this.realmDAO = realmDAO;\n         this.groupDAO = groupDAO;\n         this.delegationDAO = delegationDAO;\n         this.fiqlQueryDAO = fiqlQueryDAO;\n@@ -279,24 +256,6 @@ public UMembership findMembership(final String key) {\n         return entityManager().find(JPAUMembership.class, key);\n     }\n \n-    protected List<PasswordPolicy> getPasswordPolicies(final User user) {\n-        List<PasswordPolicy> policies = new ArrayList<>();\n-\n-        // add resource policies\n-        findAllResources(user).\n-                forEach(resource -> Optional.ofNullable(resource.getPasswordPolicy()).\n-                filter(p -> !policies.contains(p)).\n-                ifPresent(policies::add));\n-\n-        // add realm policies\n-        realmDAO.findAncestors(user.getRealm()).\n-                forEach(realm -> Optional.ofNullable(realm.getPasswordPolicy()).\n-                filter(p -> !policies.contains(p)).\n-                ifPresent(policies::add));\n-\n-        return policies;\n-    }\n-\n     @Override\n     public List<User> findAll(final int page, final int itemsPerPage) {\n         TypedQuery<User> query = entityManager().createQuery(\n@@ -312,196 +271,8 @@ public List<String> findAllKeys(final int page, final int itemsPerPage) {\n         return findAllKeys(JPAUser.TABLE, page, itemsPerPage);\n     }\n \n-    protected List<AccountPolicy> getAccountPolicies(final User user) {\n-        List<AccountPolicy> policies = new ArrayList<>();\n-\n-        // add resource policies\n-        findAllResources(user).stream().\n-                map(ExternalResource::getAccountPolicy).\n-                filter(Objects::nonNull).\n-                forEach(policies::add);\n-\n-        // add realm policies\n-        realmDAO.findAncestors(user.getRealm()).stream().\n-                map(Realm::getAccountPolicy).\n-                filter(Objects::nonNull).\n-                forEach(policies::add);\n-\n-        return policies;\n-    }\n-\n-    protected List<AccountRule> getAccountRules(final AccountPolicy policy) {\n-        List<AccountRule> result = new ArrayList<>();\n-\n-        for (Implementation impl : policy.getRules()) {\n-            try {\n-                ImplementationManager.buildAccountRule(\n-                        impl,\n-                        () -> perContextAccountRules.get(impl.getKey()),\n-                        instance -> perContextAccountRules.put(impl.getKey(), instance)).\n-                        ifPresent(result::add);\n-            } catch (Exception e) {\n-                LOG.warn(\"While building {}\", impl, e);\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    protected List<PasswordRule> getPasswordRules(final PasswordPolicy policy) {\n-        List<PasswordRule> result = new ArrayList<>();\n-\n-        for (Implementation impl : policy.getRules()) {\n-            try {\n-                ImplementationManager.buildPasswordRule(\n-                        impl,\n-                        () -> perContextPasswordRules.get(impl.getKey()),\n-                        instance -> perContextPasswordRules.put(impl.getKey(), instance)).\n-                        ifPresent(result::add);\n-            } catch (Exception e) {\n-                LOG.warn(\"While building {}\", impl, e);\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n-        // ------------------------------\n-        // Verify password policies\n-        // ------------------------------\n-        LOG.debug(\"Password Policy enforcement\");\n-\n-        try {\n-            int maxPPSpecHistory = 0;\n-            for (PasswordPolicy policy : getPasswordPolicies(user)) {\n-                if (user.getPassword() == null && !policy.isAllowNullPassword()) {\n-                    throw new PasswordPolicyException(\"Password mandatory\");\n-                }\n-\n-                getPasswordRules(policy).forEach(rule -> {\n-                    rule.enforce(user);\n-\n-                    user.getLinkedAccounts().stream().\n-                            filter(account -> account.getPassword() != null).\n-                            forEach(rule::enforce);\n-                });\n-\n-                boolean matching = false;\n-                if (policy.getHistoryLength() > 0) {\n-                    List<String> pwdHistory = user.getPasswordHistory();\n-                    matching = pwdHistory.subList(policy.getHistoryLength() >= pwdHistory.size()\n-                            ? 0\n-                            : pwdHistory.size() - policy.getHistoryLength(), pwdHistory.size()).stream().\n-                            map(old -> Encryptor.getInstance().verify(\n-                            user.getClearPassword(), user.getCipherAlgorithm(), old)).\n-                            reduce(matching, (accumulator, item) -> accumulator | item);\n-                }\n-                if (matching) {\n-                    throw new PasswordPolicyException(\"Password value was used in the past: not allowed\");\n-                }\n-\n-                if (policy.getHistoryLength() > maxPPSpecHistory) {\n-                    maxPPSpecHistory = policy.getHistoryLength();\n-                }\n-            }\n-\n-            // update user's password history with encrypted password\n-            if (maxPPSpecHistory > 0\n-                    && user.getPassword() != null\n-                    && !user.getPasswordHistory().contains(user.getPassword())) {\n-\n-                user.addToPasswordHistory(user.getPassword());\n-            }\n-            // keep only the last maxPPSpecHistory items in user's password history\n-            if (maxPPSpecHistory < user.getPasswordHistory().size()) {\n-                user.removeOldestEntriesFromPasswordHistory(user.getPasswordHistory().size() - maxPPSpecHistory);\n-            }\n-        } catch (PersistenceException | InvalidEntityException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            LOG.error(\"Invalid password for {}\", user, e);\n-            throw new InvalidEntityException(User.class, EntityViolationType.InvalidPassword, e.getMessage());\n-        } finally {\n-            // password has been validated, let's remove its clear version\n-            user.removeClearPassword();\n-        }\n-\n-        // ------------------------------\n-        // Verify account policies\n-        // ------------------------------\n-        LOG.debug(\"Account Policy enforcement\");\n-\n-        boolean suspend = false;\n-        boolean propagateSuspension = false;\n-        try {\n-            if (user.getUsername() == null) {\n-                throw new AccountPolicyException(\"Null username\");\n-            }\n-\n-            if (securityProperties.getAdminUser().equals(user.getUsername())\n-                    || securityProperties.getAnonymousUser().equals(user.getUsername())) {\n-\n-                throw new AccountPolicyException(\"Not allowed: \" + user.getUsername());\n-            }\n-\n-            List<AccountPolicy> accountPolicies = getAccountPolicies(user);\n-            if (accountPolicies.isEmpty()) {\n-                if (!Entity.ID_PATTERN.matcher(user.getUsername()).matches()) {\n-                    throw new AccountPolicyException(\"Character(s) not allowed: \" + user.getUsername());\n-                }\n-                user.getLinkedAccounts().stream().\n-                        filter(account -> account.getUsername() != null).\n-                        forEach(account -> {\n-                            if (!Entity.ID_PATTERN.matcher(account.getUsername()).matches()) {\n-                                throw new AccountPolicyException(\"Character(s) not allowed: \" + account.getUsername());\n-                            }\n-                        });\n-            } else {\n-                for (AccountPolicy policy : accountPolicies) {\n-                    getAccountRules(policy).forEach(rule -> {\n-                        rule.enforce(user);\n-\n-                        user.getLinkedAccounts().stream().\n-                                filter(account -> account.getUsername() != null).\n-                                forEach(rule::enforce);\n-                    });\n-\n-                    suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n-                            && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n-                    propagateSuspension |= policy.isPropagateSuspension();\n-                }\n-            }\n-        } catch (PersistenceException | InvalidEntityException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            LOG.error(\"Invalid username for {}\", user, e);\n-            throw new InvalidEntityException(User.class, EntityViolationType.InvalidUsername, e.getMessage());\n-        }\n-\n-        return Pair.of(suspend, propagateSuspension);\n-    }\n-\n     protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n-        // 1. save clear password value before save\n-        String clearPwd = user.getClearPassword();\n-\n-        // 2. save\n         User merged = super.save(user);\n-\n-        // 3. set back the sole clear password value\n-        JPAUser.class.cast(merged).setClearPassword(clearPwd);\n-\n-        // 4. enforce password and account policies\n-        try {\n-            enforcePolicies(merged);\n-        } catch (InvalidEntityException e) {\n-            entityManager().remove(merged);\n-            throw e;\n-        }\n-\n         roleDAO.refreshDynMemberships(merged);\n         Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n         dynRealmDAO.refreshDynMemberships(merged);"},{"sha":"84aa70bf1b881af1a687b6203506ecb87b9539ec","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -33,7 +33,6 @@\n import jakarta.persistence.ManyToOne;\n import jakarta.persistence.OneToMany;\n import jakarta.persistence.Table;\n-import jakarta.persistence.Transient;\n import jakarta.persistence.UniqueConstraint;\n import jakarta.validation.Valid;\n import jakarta.validation.constraints.NotNull;\n@@ -86,9 +85,6 @@\n     @Column(nullable = true)\n     protected String password;\n \n-    @Transient\n-    protected String clearPassword;\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"user_id\"),\n@@ -179,9 +175,6 @@\n     @Column(nullable = true)\n     protected String securityAnswer;\n \n-    @Transient\n-    protected String clearSecurityAnswer;\n-\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n     @Valid\n     protected List<JPALinkedAccount> linkedAccounts = new ArrayList<>();\n@@ -223,33 +216,15 @@ public String getPassword() {\n         return password;\n     }\n \n-    @Override\n-    public String getClearPassword() {\n-        return clearPassword;\n-    }\n-\n-    public void setClearPassword(final String clearPassword) {\n-        this.clearPassword = clearPassword;\n-    }\n-\n-    @Override\n-    public void removeClearPassword() {\n-        setClearPassword(null);\n-    }\n-\n     @Override\n     public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgorithm) {\n-        this.clearPassword = null;\n-\n         this.password = password;\n         this.cipherAlgorithm = cipherAlgorithm;\n         setMustChangePassword(false);\n     }\n \n     @Override\n     public void setPassword(final String password) {\n-        this.clearPassword = password;\n-\n         try {\n             this.password = ENCRYPTOR.encode(password, cipherAlgorithm == null\n                     ? CipherAlgorithm.valueOf(ApplicationContextProvider.getBeanFactory().getBean(ConfParamOps.class).\n@@ -436,22 +411,8 @@ public String getSecurityAnswer() {\n         return securityAnswer;\n     }\n \n-    @Override\n-    public String getClearSecurityAnswer() {\n-        return clearSecurityAnswer;\n-    }\n-\n-    @Override\n-    public void setEncodedSecurityAnswer(final String securityAnswer) {\n-        this.clearSecurityAnswer = null;\n-\n-        this.securityAnswer = securityAnswer;\n-    }\n-\n     @Override\n     public void setSecurityAnswer(final String securityAnswer) {\n-        this.securityAnswer = securityAnswer;\n-\n         try {\n             this.securityAnswer = ENCRYPTOR.encode(securityAnswer, cipherAlgorithm == null\n                     ? CipherAlgorithm.valueOf(ApplicationContextProvider.getBeanFactory().getBean(ConfParamOps.class)."},{"sha":"4d1467d22dafdc35dbf5a6949205143cbd3a6cc8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":3,"deletions":39,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -24,14 +24,12 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n import java.time.OffsetDateTime;\n import java.time.temporal.ChronoUnit;\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -201,42 +199,6 @@ public void findMembership() {\n         assertEquals(\"1417acbe-cbf6-4277-9372-e75e04f97000\", memb.getLeftEnd().getKey());\n     }\n \n-    @Test\n-    public void saveInvalidPassword() {\n-        User user = entityFactory.newEntity(User.class);\n-        user.setUsername(\"username\");\n-        user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n-        user.setCreator(\"admin\");\n-        user.setCreationDate(OffsetDateTime.now());\n-        user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n-        user.setPassword(\"pass\");\n-\n-        try {\n-            userDAO.save(user);\n-            fail(\"This should not happen\");\n-        } catch (InvalidEntityException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    @Test\n-    public void saveInvalidUsername() {\n-        User user = entityFactory.newEntity(User.class);\n-        user.setUsername(\"username!\");\n-        user.setRealm(realmDAO.findByFullPath(\"/even/two\"));\n-        user.setCreator(\"admin\");\n-        user.setCreationDate(OffsetDateTime.now());\n-        user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n-        user.setPassword(\"password123\");\n-\n-        try {\n-            userDAO.save(user);\n-            fail(\"This should not happen\");\n-        } catch (InvalidEntityException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n     @Test\n     public void save() {\n         User user = entityFactory.newEntity(User.class);\n@@ -249,7 +211,9 @@ public void save() {\n \n         User actual = userDAO.save(user);\n         assertNotNull(actual);\n-        assertEquals(1, actual.getPasswordHistory().size());\n+\n+        entityManager().flush();\n+\n         assertNotNull(userDAO.findLastChange(actual.getKey()));\n         assertTrue(actual.getLastChangeDate().truncatedTo(ChronoUnit.SECONDS).\n                 isEqual(userDAO.findLastChange(actual.getKey()).truncatedTo(ChronoUnit.SECONDS)));"},{"sha":"d8d423e8a0f94a251498ca0d8f702b7581a7c4e3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -23,15 +23,12 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n import java.time.OffsetDateTime;\n import java.util.List;\n import java.util.Objects;\n import java.util.UUID;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n@@ -163,83 +160,6 @@ public void ships() {\n         assertEquals(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\", user.getRelationships().get(0).getRightEnd().getKey());\n     }\n \n-    @Test\n-    public void membershipWithAttrNotAllowed() {\n-        User user = userDAO.findByUsername(\"vivaldi\");\n-        assertNotNull(user);\n-        user.getMemberships().clear();\n-\n-        // add 'obscure' to user (no membership): works because 'obscure' is from 'other', default class for USER\n-        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n-        attr.setOwner(user);\n-        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(validator, \"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-        user.add(attr);\n-\n-        // add 'obscure' to user (via 'artDirector' membership): does not work because 'obscure' is from 'other'\n-        // but 'artDirector' defines no type extension\n-        UMembership membership = entityFactory.newEntity(UMembership.class);\n-        membership.setLeftEnd(user);\n-        membership.setRightEnd(groupDAO.findByName(\"artDirector\"));\n-        user.add(membership);\n-\n-        attr = entityFactory.newEntity(UPlainAttr.class);\n-        attr.setOwner(user);\n-        attr.setMembership(membership);\n-        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(validator, \"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-        user.add(attr);\n-\n-        try {\n-            userDAO.save(user);\n-            fail(\"This should not happen\");\n-        } catch (InvalidEntityException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    @Test\n-    public void membershipWithAttr() {\n-        User user = userDAO.findByUsername(\"vivaldi\");\n-        assertNotNull(user);\n-        user.getMemberships().clear();\n-\n-        // add 'obscure' (no membership): works because 'obscure' is from 'other', default class for USER\n-        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n-        attr.setOwner(user);\n-        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(validator, \"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-        user.add(attr);\n-\n-        // add 'obscure' (via 'additional' membership): that group defines type extension with classes 'other' and 'csv'\n-        UMembership membership = entityFactory.newEntity(UMembership.class);\n-        membership.setLeftEnd(user);\n-        membership.setRightEnd(groupDAO.findByName(\"additional\"));\n-        user.add(membership);\n-\n-        attr = entityFactory.newEntity(UPlainAttr.class);\n-        attr.setOwner(user);\n-        attr.setMembership(membership);\n-        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(validator, \"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-        user.add(attr);\n-\n-        userDAO.save(user);\n-        entityManager().flush();\n-\n-        user = userDAO.findByUsername(\"vivaldi\");\n-        assertEquals(1, user.getMemberships().size());\n-\n-        UMembership newM = user.getMembership(groupDAO.findByName(\"additional\").getKey()).get();\n-        assertEquals(1, user.getPlainAttrs(newM).size());\n-\n-        assertNull(user.getPlainAttr(\"obscure\").get().getMembership());\n-        assertEquals(2, user.getPlainAttrs(\"obscure\").size());\n-        assertTrue(user.getPlainAttrs(\"obscure\").contains(user.getPlainAttr(\"obscure\").get()));\n-        assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(a -> a.getMembership() == null));\n-        assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(a -> newM.equals(a.getMembership())));\n-    }\n-\n     private LinkedAccount newLinkedAccount(final String connObjectKeyValue) {\n         User user = userDAO.findByUsername(\"vivaldi\");\n         user.getLinkedAccounts().stream().filter(Objects::nonNull).forEach(account -> account.setOwner(null));"},{"sha":"19ef16e79cd31c78b1c053c3fc5f69d60864ac8a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/rules/PasswordRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Frules%2FPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Frules%2FPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Frules%2FPasswordRule.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -34,7 +34,7 @@ default PasswordRuleConf getConf() {\n     default void setConf(PasswordRuleConf conf) {\n     }\n \n-    void enforce(User user);\n+    void enforce(User user, String clearPassword);\n \n     void enforce(LinkedAccount account);\n }"},{"sha":"70aa116e7729bbb7d609bab8153be655bcb4e3fc","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -55,18 +54,6 @@\n @Transactional(\"Master\")\n public class ResourceDataBinderTest extends AbstractTest {\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private ResourceDataBinder resourceDataBinder;\n-\n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n     @BeforeAll\n     public static void setAuthContext() {\n         List<GrantedAuthority> authorities = IdMEntitlement.values().stream().\n@@ -85,6 +72,15 @@ public static void unsetAuthContext() {\n         SecurityContextHolder.getContext().setAuthentication(null);\n     }\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ResourceDataBinder resourceDataBinder;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n     @Test\n     public void issue42() {\n         PlainSchema userId = plainSchemaDAO.find(\"userId\");"},{"sha":"bebb7bdc2786def268085f2c20878313694d9578","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderTest.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderTest.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class UserDataBinderTest extends AbstractTest {\n+\n+    @BeforeAll\n+    public static void setAuthContext() {\n+        List<GrantedAuthority> authorities = IdRepoEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(SyncopeConstants.MASTER_DOMAIN, null));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    @AfterAll\n+    public static void unsetAuthContext() {\n+        SecurityContextHolder.getContext().setAuthentication(null);\n+    }\n+\n+    @Autowired\n+    private UserDataBinder dataBinder;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void membershipWithAttrNotAllowed() {\n+        UserUR userUR = new UserUR.Builder(\"1417acbe-cbf6-4277-9372-e75e04f97000\").build();\n+\n+        // add 'obscure' to user (no membership): works because 'obscure' is from 'other', default class for USER\n+        userUR.getPlainAttrs().\n+                add(new AttrPatch.Builder(new Attr.Builder(\"obscure\").value(\"testvalue\").build()).build());\n+\n+        // add 'obscure' to user (via 'artDirector' membership): does not work because 'obscure' is from 'other'\n+        // but 'artDirector' defines no type extension\n+        userUR.getMemberships().add(new MembershipUR.Builder(\"ece66293-8f31-4a84-8e8d-23da36e70846\").\n+                plainAttr(new Attr.Builder(\"obscure\").value(\"testvalue2\").build()).build());\n+\n+        assertThrows(InvalidEntityException.class, () -> dataBinder.update(userDAO.find(userUR.getKey()), userUR));\n+    }\n+\n+    @Test\n+    public void membershipWithAttr() {\n+        UserUR userUR = new UserUR.Builder(\"1417acbe-cbf6-4277-9372-e75e04f97000\").build();\n+\n+        // add 'obscure' (no membership): works because 'obscure' is from 'other', default class for USER\n+        userUR.getPlainAttrs().\n+                add(new AttrPatch.Builder(new Attr.Builder(\"obscure\").value(\"testvalue\").build()).build());\n+\n+        // add 'obscure' (via 'additional' membership): that group defines type extension with classes 'other' and 'csv'\n+        userUR.getMemberships().add(new MembershipUR.Builder(\"034740a9-fa10-453b-af37-dc7897e98fb1\").\n+                plainAttr(new Attr.Builder(\"obscure\").value(\"testvalue2\").build()).build());\n+\n+        dataBinder.update(userDAO.find(userUR.getKey()), userUR);\n+\n+        User user = userDAO.find(userUR.getKey());\n+        UMembership newM = user.getMembership(\"034740a9-fa10-453b-af37-dc7897e98fb1\").get();\n+        assertEquals(1, user.getPlainAttrs(newM).size());\n+\n+        assertNull(user.getPlainAttr(\"obscure\").get().getMembership());\n+        assertEquals(2, user.getPlainAttrs(\"obscure\").size());\n+        assertTrue(user.getPlainAttrs(\"obscure\").contains(user.getPlainAttr(\"obscure\").get()));\n+        assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(a -> a.getMembership() == null));\n+        assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(a -> newM.equals(a.getMembership())));\n+    }\n+}"},{"sha":"ae63f4df25ca783d9791b4c7832c8d4105607000","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultPasswordRule.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -165,8 +165,8 @@ protected void enforce(final String clear, final String username, final Set<Stri\n \n     @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final User user) {\n-        if (user.getPassword() != null && user.getClearPassword() != null) {\n+    public void enforce(final User user, final String clearPassword) {\n+        if (clearPassword != null) {\n             Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n             wordsNotPermitted.addAll(\n                     conf.getSchemasNotPermitted().stream().\n@@ -177,7 +177,7 @@ public void enforce(final User user) {\n                             flatMap(Collection::stream).\n                             collect(Collectors.toSet()));\n \n-            enforce(user.getClearPassword(), user.getUsername(), wordsNotPermitted);\n+            enforce(clearPassword, user.getUsername(), wordsNotPermitted);\n         }\n     }\n "},{"sha":"e66eb215e272e239a4b5b394f26c89b02ccf177e","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/HaveIBeenPwnedPasswordRule.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -22,6 +22,7 @@\n import java.net.URI;\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n+import java.util.Optional;\n import java.util.stream.Stream;\n import javax.crypto.BadPaddingException;\n import javax.crypto.IllegalBlockSizeException;\n@@ -69,9 +70,9 @@ public void setConf(final PasswordRuleConf conf) {\n         }\n     }\n \n-    protected void enforce(final String clear) {\n+    protected void enforce(final String clearPassword) {\n         try {\n-            String sha1 = ENCRYPTOR.encode(clear, CipherAlgorithm.SHA1);\n+            String sha1 = ENCRYPTOR.encode(clearPassword, CipherAlgorithm.SHA1);\n \n             HttpHeaders headers = new HttpHeaders();\n             headers.set(HttpHeaders.USER_AGENT, \"Apache Syncope\");\n@@ -98,27 +99,25 @@ protected void enforce(final String clear) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final User user) {\n-        if (user.getPassword() != null && user.getClearPassword() != null) {\n-            enforce(user.getClearPassword());\n-        }\n+    public void enforce(final User user, final String clearPassword) {\n+        Optional.ofNullable(clearPassword).ifPresent(this::enforce);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public void enforce(final LinkedAccount account) {\n         if (account.getPassword() != null) {\n-            String clear = null;\n+            String clearPassword = null;\n             if (account.canDecodeSecrets()) {\n                 try {\n-                    clear = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n+                    clearPassword = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n                 } catch (Exception e) {\n                     LOG.error(\"Could not decode password for {}\", account, e);\n                 }\n             }\n \n-            if (clear != null) {\n-                enforce(clear);\n+            if (clearPassword != null) {\n+                enforce(clearPassword);\n             }\n         }\n     }"},{"sha":"61448f0e0ea4e9d940bba0af7cc9861d1a80e29b","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestPasswordRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -46,7 +46,7 @@ public void setConf(final PasswordRuleConf conf) {\n     }\n \n     @Override\n-    public void enforce(final User user) {\n+    public void enforce(final User user, final String clearPassword) {\n         // nothing to do\n     }\n "},{"sha":"976b8f2f886b5153365c45b2146be0aebf6bdf86","filename":"core/workflow-java/pom.xml","status":"modified","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fpom.xml?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -57,6 +57,44 @@ under the License.\n       <artifactId>syncope-core-spring</artifactId>\n       <version>${project.version}</version>\n     </dependency>    \n+\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-validation</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>\n@@ -66,5 +104,29 @@ under the License.\n         <artifactId>maven-checkstyle-plugin</artifactId>\n       </plugin>\n     </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+    <testResources>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../persistence-jpa/src/main/resources</directory>\n+        <includes>\n+          <include>persistence.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../persistence-jpa/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n   </build>\n </project>"},{"sha":"129adb5ec2cc82656ef1bd4e85b8781d2206406c","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":275,"deletions":7,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -18,18 +18,43 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.provisioning.api.rules.AccountRule;\n+import org.apache.syncope.core.provisioning.api.rules.PasswordRule;\n+import org.apache.syncope.core.spring.implementation.ImplementationManager;\n+import org.apache.syncope.core.spring.policy.AccountPolicyException;\n+import org.apache.syncope.core.spring.policy.PasswordPolicyException;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -45,23 +70,226 @@ public abstract class AbstractUserWorkflowAdapter extends AbstractWorkflowAdapte\n \n     protected final UserDAO userDAO;\n \n+    protected final RealmDAO realmDAO;\n+\n     protected final EntityFactory entityFactory;\n \n+    protected final SecurityProperties securityProperties;\n+\n+    protected final Map<String, AccountRule> perContextAccountRules = new ConcurrentHashMap<>();\n+\n+    protected final Map<String, PasswordRule> perContextPasswordRules = new ConcurrentHashMap<>();\n+\n     public AbstractUserWorkflowAdapter(\n             final UserDataBinder dataBinder,\n             final UserDAO userDAO,\n-            final EntityFactory entityFactory) {\n+            final RealmDAO realmDAO,\n+            final EntityFactory entityFactory,\n+            final SecurityProperties securityProperties) {\n \n         this.dataBinder = dataBinder;\n         this.userDAO = userDAO;\n+        this.realmDAO = realmDAO;\n         this.entityFactory = entityFactory;\n+        this.securityProperties = securityProperties;\n     }\n \n     @Override\n     public String getPrefix() {\n         return null;\n     }\n \n+    protected List<AccountPolicy> getAccountPolicies(final User user) {\n+        List<AccountPolicy> policies = new ArrayList<>();\n+\n+        // add resource policies\n+        userDAO.findAllResources(user).stream().\n+                map(ExternalResource::getAccountPolicy).\n+                filter(Objects::nonNull).\n+                forEach(policies::add);\n+\n+        // add realm policies\n+        realmDAO.findAncestors(user.getRealm()).stream().\n+                map(Realm::getAccountPolicy).\n+                filter(Objects::nonNull).\n+                forEach(policies::add);\n+\n+        return policies;\n+    }\n+\n+    protected List<AccountRule> getAccountRules(final AccountPolicy policy) {\n+        List<AccountRule> result = new ArrayList<>();\n+\n+        for (Implementation impl : policy.getRules()) {\n+            try {\n+                ImplementationManager.buildAccountRule(\n+                        impl,\n+                        () -> perContextAccountRules.get(impl.getKey()),\n+                        instance -> perContextAccountRules.put(impl.getKey(), instance)).\n+                        ifPresent(result::add);\n+            } catch (Exception e) {\n+                LOG.warn(\"While building {}\", impl, e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    protected List<PasswordPolicy> getPasswordPolicies(final User user) {\n+        List<PasswordPolicy> policies = new ArrayList<>();\n+\n+        // add resource policies\n+        userDAO.findAllResources(user).\n+                forEach(resource -> Optional.ofNullable(resource.getPasswordPolicy()).\n+                filter(p -> !policies.contains(p)).\n+                ifPresent(policies::add));\n+\n+        // add realm policies\n+        realmDAO.findAncestors(user.getRealm()).\n+                forEach(realm -> Optional.ofNullable(realm.getPasswordPolicy()).\n+                filter(p -> !policies.contains(p)).\n+                ifPresent(policies::add));\n+\n+        return policies;\n+    }\n+\n+    protected List<PasswordRule> getPasswordRules(final PasswordPolicy policy) {\n+        List<PasswordRule> result = new ArrayList<>();\n+\n+        for (Implementation impl : policy.getRules()) {\n+            try {\n+                ImplementationManager.buildPasswordRule(\n+                        impl,\n+                        () -> perContextPasswordRules.get(impl.getKey()),\n+                        instance -> perContextPasswordRules.put(impl.getKey(), instance)).\n+                        ifPresent(result::add);\n+            } catch (Exception e) {\n+                LOG.warn(\"While building {}\", impl, e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    protected Pair<Boolean, Boolean> enforcePolicies(\n+            final User user,\n+            final boolean disablePwdPolicyCheck,\n+            final String clearPassword) {\n+\n+        if (!disablePwdPolicyCheck) {\n+            // ------------------------------\n+            // Verify password policies\n+            // ------------------------------\n+            LOG.debug(\"Password Policy enforcement\");\n+\n+            try {\n+                int maxPPSpecHistory = 0;\n+                for (PasswordPolicy policy : getPasswordPolicies(user)) {\n+                    if (clearPassword == null && !policy.isAllowNullPassword()) {\n+                        throw new PasswordPolicyException(\"Password mandatory\");\n+                    }\n+\n+                    getPasswordRules(policy).forEach(rule -> {\n+                        rule.enforce(user, clearPassword);\n+\n+                        user.getLinkedAccounts().stream().\n+                                filter(account -> account.getPassword() != null).\n+                                forEach(rule::enforce);\n+                    });\n+\n+                    boolean matching = false;\n+                    if (policy.getHistoryLength() > 0) {\n+                        List<String> pwdHistory = user.getPasswordHistory();\n+                        matching = pwdHistory.subList(policy.getHistoryLength() >= pwdHistory.size()\n+                                ? 0\n+                                : pwdHistory.size() - policy.getHistoryLength(), pwdHistory.size()).stream().\n+                                map(old -> Encryptor.getInstance().verify(\n+                                clearPassword, user.getCipherAlgorithm(), old)).\n+                                reduce(matching, (accumulator, item) -> accumulator | item);\n+                    }\n+                    if (matching) {\n+                        throw new PasswordPolicyException(\"Password value was used in the past: not allowed\");\n+                    }\n+\n+                    if (policy.getHistoryLength() > maxPPSpecHistory) {\n+                        maxPPSpecHistory = policy.getHistoryLength();\n+                    }\n+                }\n+\n+                // update user's password history with encrypted password\n+                if (maxPPSpecHistory > 0\n+                        && user.getPassword() != null\n+                        && !user.getPasswordHistory().contains(user.getPassword())) {\n+\n+                    user.addToPasswordHistory(user.getPassword());\n+                }\n+                // keep only the last maxPPSpecHistory items in user's password history\n+                if (maxPPSpecHistory < user.getPasswordHistory().size()) {\n+                    user.removeOldestEntriesFromPasswordHistory(user.getPasswordHistory().size() - maxPPSpecHistory);\n+                }\n+            } catch (InvalidEntityException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                LOG.error(\"Invalid password for {}\", user, e);\n+                throw new InvalidEntityException(User.class, EntityViolationType.InvalidPassword, e.getMessage());\n+            }\n+        }\n+\n+        // ------------------------------\n+        // Verify account policies\n+        // ------------------------------\n+        LOG.debug(\"Account Policy enforcement\");\n+\n+        boolean suspend = false;\n+        boolean propagateSuspension = false;\n+        try {\n+            if (user.getUsername() == null) {\n+                throw new AccountPolicyException(\"Null username\");\n+            }\n+\n+            if (securityProperties.getAdminUser().equals(user.getUsername())\n+                    || securityProperties.getAnonymousUser().equals(user.getUsername())) {\n+\n+                throw new AccountPolicyException(\"Not allowed: \" + user.getUsername());\n+            }\n+\n+            List<AccountPolicy> accountPolicies = getAccountPolicies(user);\n+            if (accountPolicies.isEmpty()) {\n+                if (!Entity.ID_PATTERN.matcher(user.getUsername()).matches()) {\n+                    throw new AccountPolicyException(\"Character(s) not allowed: \" + user.getUsername());\n+                }\n+                user.getLinkedAccounts().stream().\n+                        filter(account -> account.getUsername() != null).\n+                        forEach(account -> {\n+                            if (!Entity.ID_PATTERN.matcher(account.getUsername()).matches()) {\n+                                throw new AccountPolicyException(\"Character(s) not allowed: \" + account.getUsername());\n+                            }\n+                        });\n+            } else {\n+                for (AccountPolicy policy : accountPolicies) {\n+                    getAccountRules(policy).forEach(rule -> {\n+                        rule.enforce(user);\n+\n+                        user.getLinkedAccounts().stream().\n+                                filter(account -> account.getUsername() != null).\n+                                forEach(rule::enforce);\n+                    });\n+\n+                    suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n+                            && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();\n+                    propagateSuspension |= policy.isPropagateSuspension();\n+                }\n+            }\n+        } catch (InvalidEntityException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            LOG.error(\"Invalid username for {}\", user, e);\n+            throw new InvalidEntityException(User.class, EntityViolationType.InvalidUsername, e.getMessage());\n+        }\n+\n+        return Pair.of(suspend, propagateSuspension);\n+    }\n+\n     @Override\n     public UserWorkflowResult<Pair<String, Boolean>> create(\n             final UserCR userCR, final String creator, final String context) {\n@@ -80,7 +308,15 @@ public UserWorkflowResult<Pair<String, Boolean>> create(\n             final String creator,\n             final String context) {\n \n-        return doCreate(userCR, disablePwdPolicyCheck, enabled, creator, context);\n+        UserWorkflowResult<Pair<String, Boolean>> result =\n+                doCreate(userCR, disablePwdPolicyCheck, enabled, creator, context);\n+\n+        // enforce password and account policies\n+        User user = userDAO.find(result.getResult().getKey());\n+        enforcePolicies(user, disablePwdPolicyCheck, disablePwdPolicyCheck ? null : userCR.getPassword());\n+        userDAO.save(user);\n+\n+        return result;\n     }\n \n     protected abstract UserWorkflowResult<String> doActivate(User user, String token, String updater, String context);\n@@ -99,10 +335,36 @@ protected abstract UserWorkflowResult<Pair<UserUR, Boolean>> doUpdate(\n     public UserWorkflowResult<Pair<UserUR, Boolean>> update(\n             final UserUR userUR, final String updater, final String context) {\n \n-        UserWorkflowResult<Pair<UserUR, Boolean>> result = doUpdate(\n-                userDAO.authFind(userUR.getKey()), userUR, updater, context);\n-\n         User user = userDAO.find(userUR.getKey());\n+\n+        UserWorkflowResult<Pair<UserUR, Boolean>> result;\n+        // skip actual workflow operations in case only password change on resources was requested\n+        if (userUR.isEmptyButPassword() && !userUR.getPassword().isOnSyncope()) {\n+            PropagationByResource<String> propByRes = new PropagationByResource<>();\n+            userDAO.findAllResources(user).stream().\n+                    filter(resource -> userUR.getPassword().getResources().contains(resource.getKey())).\n+                    forEach(resource -> propByRes.add(ResourceOperation.UPDATE, resource.getKey()));\n+\n+            PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+            user.getLinkedAccounts().stream().\n+                    filter(account -> userUR.getPassword().getResources().contains(account.getResource().getKey())).\n+                    forEach(account -> propByLinkedAccount.add(\n+                    ResourceOperation.UPDATE,\n+                    Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue())));\n+\n+            result = new UserWorkflowResult<>(\n+                    Pair.of(userUR, !user.isSuspended()), propByRes, propByLinkedAccount, \"update\");\n+        } else {\n+            result = doUpdate(userDAO.authFind(userUR.getKey()), userUR, updater, context);\n+        }\n+\n+        // enforce password and account policies\n+        enforcePolicies(\n+                user,\n+                userUR.getPassword() == null,\n+                Optional.ofNullable(userUR.getPassword()).map(PasswordPatch::getValue).orElse(null));\n+        user = userDAO.save(user);\n+\n         if (!AuthContextUtils.getUsername().equals(user.getUsername())) {\n             // ensure that requester's administration rights are still valid\n             Set<String> authRealms = new HashSet<>();\n@@ -140,7 +402,7 @@ public Pair<UserWorkflowResult<String>, Boolean> internalSuspend(\n \n         Pair<UserWorkflowResult<String>, Boolean> result = null;\n \n-        Pair<Boolean, Boolean> enforce = userDAO.enforcePolicies(user);\n+        Pair<Boolean, Boolean> enforce = enforcePolicies(user, true, null);\n         if (enforce.getKey()) {\n             LOG.debug(\"User {} {} is over the max failed logins\", user.getKey(), user.getUsername());\n \n@@ -185,7 +447,13 @@ protected abstract UserWorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordRe\n     public UserWorkflowResult<Pair<UserUR, Boolean>> confirmPasswordReset(\n             final String key, final String token, final String password, final String updater, final String context) {\n \n-        return doConfirmPasswordReset(userDAO.authFind(key), token, password, updater, context);\n+        User user = userDAO.authFind(key);\n+\n+        // enforce password and account policies\n+        enforcePolicies(user, false, password);\n+        user = userDAO.save(user);\n+\n+        return doConfirmPasswordReset(user, token, password, updater, context);\n     }\n \n     protected abstract void doDelete(User user, String eraser, String context);"},{"sha":"a61664026359e531f8c3b079e505787e53b20e71","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -32,6 +33,7 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -48,11 +50,13 @@ public class DefaultUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     public DefaultUserWorkflowAdapter(\n             final UserDataBinder dataBinder,\n             final UserDAO userDAO,\n+            final RealmDAO realmDAO,\n             final EntityFactory entityFactory,\n+            final SecurityProperties securityProperties,\n             final ConfParamOps confParamOps,\n             final ApplicationEventPublisher publisher) {\n \n-        super(dataBinder, userDAO, entityFactory);\n+        super(dataBinder, userDAO, realmDAO, entityFactory, securityProperties);\n         this.confParamOps = confParamOps;\n         this.publisher = publisher;\n     }\n@@ -68,11 +72,6 @@ protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n         User user = entityFactory.newEntity(User.class);\n         dataBinder.create(user, userCR);\n \n-        // this will make UserValidator not to consider password policies at all\n-        if (disablePwdPolicyCheck) {\n-            user.removeClearPassword();\n-        }\n-\n         String status;\n         boolean propagateEnable;\n         if (enabled == null) {"},{"sha":"bd4de35dc7c7be6e45c2f117ecde5182bc0286c1","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/WorkflowContext.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowContext.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -21,11 +21,13 @@\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n@@ -42,11 +44,20 @@ public class WorkflowContext {\n     public UserWorkflowAdapter uwfAdapter(\n             final UserDataBinder userDataBinder,\n             final UserDAO userDAO,\n+            final RealmDAO realmDAO,\n             final EntityFactory entityFactory,\n+            final SecurityProperties securityProperties,\n             final ConfParamOps confParamOps,\n             final ApplicationEventPublisher publisher) {\n \n-        return new DefaultUserWorkflowAdapter(userDataBinder, userDAO, entityFactory, confParamOps, publisher);\n+        return new DefaultUserWorkflowAdapter(\n+                userDataBinder,\n+                userDAO,\n+                realmDAO,\n+                entityFactory,\n+                securityProperties,\n+                confParamOps,\n+                publisher);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"bbf990c3768ac79180b9f9a503bf530d336ab39b","filename":"core/workflow-java/src/test/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapterTest.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapterTest.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@SpringJUnitConfig(classes = { WorkflowTestContext.class })\n+@Transactional(\"Master\")\n+public class DefaultUserWorkflowAdapterTest {\n+\n+    @BeforeAll\n+    public static void setAuthContext() {\n+        List<GrantedAuthority> authorities = IdRepoEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(SyncopeConstants.MASTER_DOMAIN, null));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    @AfterAll\n+    public static void unsetAuthContext() {\n+        SecurityContextHolder.getContext().setAuthentication(null);\n+    }\n+\n+    @Autowired\n+    private UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void createInvalidPassword() {\n+        UserCR userCR = new UserCR();\n+        userCR.setUsername(\"username\");\n+        userCR.setRealm(\"/even/two\");\n+        userCR.setPassword(\"pass\");\n+\n+        assertThrows(InvalidEntityException.class, () -> uwfAdapter.create(userCR, \"admin\", \"test\"));\n+    }\n+\n+    @Test\n+    public void createInvalidUsername() {\n+        UserCR userCR = new UserCR();\n+        userCR.setUsername(\"username!\");\n+        userCR.setRealm(\"/even/two\");\n+        userCR.setPassword(\"password123\");\n+\n+        assertThrows(InvalidEntityException.class, () -> uwfAdapter.create(userCR, \"admin\", \"test\"));\n+    }\n+\n+    @Test\n+    public void passwordHistory() {\n+        UserCR userCR = new UserCR();\n+        userCR.setUsername(\"username\");\n+        userCR.setRealm(\"/even/two\");\n+        userCR.setPassword(\"password123\");\n+\n+        UserWorkflowResult<Pair<String, Boolean>> result = uwfAdapter.create(userCR, \"admin\", \"test\");\n+\n+        User user = userDAO.find(result.getResult().getLeft());\n+        assertNotNull(user);\n+        assertEquals(1, user.getPasswordHistory().size());\n+    }\n+}"},{"sha":"ce2e40bcd6ebb149da6292aa696725be0712af47","filename":"core/workflow-java/src/test/java/org/apache/syncope/core/workflow/java/DummyConfParamOps.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyConfParamOps.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import java.util.Map;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+\n+public class DummyConfParamOps implements ConfParamOps {\n+\n+    @Override\n+    public Map<String, Object> list(final String domain) {\n+        return Map.of();\n+    }\n+\n+    @Override\n+    public <T> T get(final String domain, final String key, final T defaultValue, final Class<T> reference) {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public <T> void set(final String domain, final String key, final T value) {\n+    }\n+\n+    @Override\n+    public void remove(final String domain, final String key) {\n+    }\n+}"},{"sha":"759518b0007a9438e87b8612d92098d8285b7c85","filename":"core/workflow-java/src/test/java/org/apache/syncope/core/workflow/java/DummyDomainOps.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyDomainOps.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+\n+public class DummyDomainOps implements DomainOps {\n+\n+    private final DomainRegistry domainRegistry;\n+\n+    public DummyDomainOps(final DomainRegistry domainRegistry) {\n+        this.domainRegistry = domainRegistry;\n+    }\n+\n+    @Override\n+    public List<Domain> list() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        return new Domain.Builder(key).build();\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        domainRegistry.register(domain);\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        // nothing to do\n+    }\n+}"},{"sha":"fc82c8ef1efc97e6e0b9648d7bed40fa0a904758","filename":"core/workflow-java/src/test/java/org/apache/syncope/core/workflow/java/DummyImplementationLookup.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDummyImplementationLookup.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.report.ReportConf;\n+import org.apache.syncope.core.provisioning.api.ImplementationLookup;\n+import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n+import org.apache.syncope.core.provisioning.api.rules.AccountRule;\n+import org.apache.syncope.core.provisioning.api.rules.PasswordRule;\n+import org.apache.syncope.core.provisioning.api.rules.PullCorrelationRule;\n+import org.apache.syncope.core.provisioning.api.rules.PushCorrelationRule;\n+import org.apache.syncope.core.spring.policy.DefaultAccountRule;\n+import org.apache.syncope.core.spring.policy.DefaultPasswordRule;\n+\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public int getOrder() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final String type) {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public Class<? extends ReportJobDelegate> getReportClass(final Class<? extends ReportConf> reportConfClass) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return DefaultAccountRule.class;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return DefaultPasswordRule.class;\n+    }\n+\n+    @Override\n+    public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n+            final Class<? extends PullCorrelationRuleConf> pullCorrelationRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass) {\n+\n+        return null;\n+    }\n+}"},{"sha":"808c0bc2324b77ff854e383d0a835b9ef2c58a72","filename":"core/workflow-java/src/test/java/org/apache/syncope/core/workflow/java/TestInitializer.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FTestInitializer.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.transaction.support.TransactionSynchronizationManager;\n+\n+public class TestInitializer implements InitializingBean {\n+\n+    private final StartupDomainLoader domainLoader;\n+\n+    private final DomainHolder domainHolder;\n+\n+    private final ContentLoader contentLoader;\n+\n+    private final ConfigurableApplicationContext ctx;\n+\n+    public TestInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        this.domainLoader = domainLoader;\n+        this.domainHolder = domainHolder;\n+        this.contentLoader = contentLoader;\n+        this.ctx = ctx;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        ApplicationContextProvider.setApplicationContext(ctx);\n+        ApplicationContextProvider.setBeanFactory((DefaultListableBeanFactory) ctx.getBeanFactory());\n+\n+        if (!TransactionSynchronizationManager.isSynchronizationActive()) {\n+            TransactionSynchronizationManager.initSynchronization();\n+        }\n+\n+        domainLoader.load();\n+\n+        contentLoader.load(\n+                SyncopeConstants.MASTER_DOMAIN,\n+                domainHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n+    }\n+}"},{"sha":"538c594027e0bd4a3050360a8fbbc947fd03e937","filename":"core/workflow-java/src/test/java/org/apache/syncope/core/workflow/java/WorkflowTestContext.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FWorkflowTestContext.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.java;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+import java.time.OffsetDateTime;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.MasterDomain;\n+import org.apache.syncope.core.persistence.jpa.PersistenceContext;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n+import org.apache.syncope.core.provisioning.api.ImplementationLookup;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.spring.security.SecurityContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@PropertySource(\"classpath:core-test.properties\")\n+@Import({ SecurityContext.class, PersistenceContext.class, MasterDomain.class, WorkflowContext.class })\n+@Configuration(proxyBeanMethods = false)\n+public class WorkflowTestContext {\n+\n+    @Bean\n+    public TestInitializer testInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n+    }\n+\n+    @Bean\n+    public UserDataBinder userDataBinder(final RealmDAO realmDAO) {\n+        UserDataBinder dataBinder = mock(UserDataBinder.class);\n+\n+        doAnswer(ic -> {\n+            User user = ic.getArgument(0);\n+            UserCR userCR = ic.getArgument(1);\n+\n+            user.setUsername(userCR.getUsername());\n+            user.setRealm(realmDAO.findByFullPath(userCR.getRealm()));\n+            user.setCreator(\"admin\");\n+            user.setCreationDate(OffsetDateTime.now());\n+            user.setCipherAlgorithm(CipherAlgorithm.SHA256);\n+            user.setPassword(userCR.getPassword());\n+\n+            return null;\n+        }).when(dataBinder).create(any(User.class), any(UserCR.class));\n+\n+        return dataBinder;\n+    }\n+\n+    @Bean\n+    public GroupDataBinder groupDataBinder() {\n+        GroupDataBinder dataBinder = mock(GroupDataBinder.class);\n+        return dataBinder;\n+    }\n+\n+    @Bean\n+    public AnyObjectDataBinder anyObjectDataBinder() {\n+        AnyObjectDataBinder dataBinder = mock(AnyObjectDataBinder.class);\n+        return dataBinder;\n+    }\n+\n+    @Bean\n+    public ImplementationLookup implementationLookup() {\n+        return new DummyImplementationLookup();\n+    }\n+\n+    @Bean\n+    public ConfParamOps confParamOps() {\n+        return new DummyConfParamOps();\n+    }\n+\n+    @Bean\n+    public DomainOps domainOps(final DomainRegistry domainRegistry) {\n+        return new DummyDomainOps(domainRegistry);\n+    }\n+}"},{"sha":"4882119fe5986343a789988decf9494c28e65259","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/FlowableWorkflowContext.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2FFlowableWorkflowContext.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.core.flowable.task.Reactivate;\n import org.apache.syncope.core.flowable.task.Suspend;\n import org.apache.syncope.core.flowable.task.Update;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n@@ -169,15 +170,19 @@ public Resource userWorkflowDef(final WorkflowFlowableProperties props,\n     public UserWorkflowAdapter uwfAdapter(\n             final UserDataBinder userDataBinder,\n             final UserDAO userDAO,\n+            final RealmDAO realmDAO,\n             final EntityFactory entityFactory,\n+            final SecurityProperties securityProperties,\n             final DomainProcessEngine engine,\n             final UserRequestHandler userRequestHandler,\n             final ApplicationEventPublisher publisher) {\n \n         return new FlowableUserWorkflowAdapter(\n                 userDataBinder,\n                 userDAO,\n+                realmDAO,\n                 entityFactory,\n+                securityProperties,\n                 engine,\n                 userRequestHandler,\n                 publisher);"},{"sha":"81777294ec44b10f81ba58d58a623484fe50b29b","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.flowable.api.UserRequestHandler;\n import org.apache.syncope.core.flowable.api.WorkflowTaskManager;\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -43,6 +44,7 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.event.AnyLifecycleEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.apache.syncope.core.workflow.java.AbstractUserWorkflowAdapter;\n import org.flowable.bpmn.model.FlowElement;\n@@ -67,12 +69,14 @@ public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter imp\n     public FlowableUserWorkflowAdapter(\n             final UserDataBinder dataBinder,\n             final UserDAO userDAO,\n+            final RealmDAO realmDAO,\n             final EntityFactory entityFactory,\n+            final SecurityProperties securityProperties,\n             final DomainProcessEngine engine,\n             final UserRequestHandler userRequestHandler,\n             final ApplicationEventPublisher publisher) {\n \n-        super(dataBinder, userDAO, entityFactory);\n+        super(dataBinder, userDAO, realmDAO, entityFactory, securityProperties);\n         this.engine = engine;\n         this.userRequestHandler = userRequestHandler;\n         this.publisher = publisher;\n@@ -142,11 +146,6 @@ protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n             user.setSuspended(!updatedEnabled);\n         }\n \n-        // this will make UserValidator not to consider password policies at all\n-        if (disablePwdPolicyCheck) {\n-            user.removeClearPassword();\n-        }\n-\n         metadata(user, creator, context);\n         FlowableRuntimeUtils.updateStatus(engine, procInst.getProcessInstanceId(), user);\n         User created = userDAO.save(user);"},{"sha":"0e05439e1beb62792594c078e70742d4db124bf0","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -89,6 +89,12 @@ public class SCIMDataBinder {\n \n     protected static final List<String> GROUP_SCHEMAS = List.of(Resource.Group.schema());\n \n+    /**\n+     * Translates the given SCIM filter into the equivalent JEXL expression.\n+     *\n+     * @param filter SCIM filter according to https://www.rfc-editor.org/rfc/rfc7644#section-3.4.2.2\n+     * @return translated JEXL expression; see https://commons.apache.org/proper/commons-jexl/reference/syntax.html\n+     * */\n     public static String filter2JexlExpression(final String filter) {\n         String jexlExpression = filter.\n                 replace(\" co \", \" =~ \")."},{"sha":"866a28df8e917201c9758a7a55d6bf5730bf4d70","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -55,8 +55,8 @@ public void setConf(final PasswordRuleConf conf) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public void enforce(final User user) {\n-        if (user.getClearPassword() != null && !user.getClearPassword().endsWith(conf.getMustEndWith())) {\n+    public void enforce(final User user, final String clearPassword) {\n+        if (clearPassword != null && !clearPassword.endsWith(conf.getMustEndWith())) {\n             throw new PasswordPolicyException(\"Password not ending with \" + conf.getMustEndWith());\n         }\n     }"},{"sha":"bed307f1213d3c105a6e01f3217de569b63ca6ca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -24,6 +24,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n@@ -45,7 +46,6 @@\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n-import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n import org.apache.syncope.fit.AbstractITCase;\n \n public abstract class AbstractTaskITCase extends AbstractITCase {\n@@ -100,7 +100,7 @@ protected static ExecTO execTask(\n         AtomicReference<TaskTO> taskTO = new AtomicReference<>(taskService.read(type, taskKey, true));\n         int preSyncSize = taskTO.get().getExecutions().size();\n         ExecTO execution = taskService.execute(new ExecSpecs.Builder().key(taskKey).dryRun(dryRun).build());\n-        assertEquals(initialStatus, execution.getStatus());\n+        Optional.ofNullable(initialStatus).ifPresent(status -> assertEquals(status, execution.getStatus()));\n         assertNotNull(execution.getExecutor());\n \n         await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n@@ -125,8 +125,7 @@ public static ExecTO execProvisioningTask(\n     protected static ExecTO execNotificationTask(\n             final TaskService taskService, final String taskKey, final int maxWaitSeconds) {\n \n-        return execTask(taskService, TaskType.NOTIFICATION, taskKey,\n-                NotificationJob.Status.SENT.name(), maxWaitSeconds, false);\n+        return execTask(taskService, TaskType.NOTIFICATION, taskKey, null, maxWaitSeconds, false);\n     }\n \n     protected void execProvisioningTasks("},{"sha":"02b7bb043cf0c8422fb3e9412d0a9d47c05eb585","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -1188,7 +1188,7 @@ public void assign() throws IOException {\n         }\n \n         ResourceAR resourceAR = new ResourceAR.Builder().key(actual.getKey()).\n-                value(\"password\").action(ResourceAssociationAction.ASSIGN).resource(RESOURCE_NAME_CSV).build();\n+                value(\"password123\").action(ResourceAssociationAction.ASSIGN).resource(RESOURCE_NAME_CSV).build();\n \n         assertNotNull(parseBatchResponse(USER_SERVICE.associate(resourceAR)));\n "},{"sha":"f1b4ec73f23bad6e7a27742387ca21f34bec630c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":26,"deletions":9,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -27,6 +27,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeFalse;\n \n+import jakarta.ws.rs.HttpMethod;\n import jakarta.ws.rs.core.GenericType;\n import jakarta.ws.rs.core.MediaType;\n import jakarta.ws.rs.core.Response;\n@@ -475,7 +476,7 @@ public void issueSYNCOPE122() {\n         // 2. request to change password only on testdb (no Syncope, no testdb2)\n         UserUR userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n-        userUR.setPassword(new PasswordPatch.Builder().value(getUUIDString()).onSyncope(false).\n+        userUR.setPassword(new PasswordPatch.Builder().value(UUID.randomUUID().toString()).onSyncope(false).\n                 resource(RESOURCE_NAME_TESTDB).build());\n \n         ProvisioningResult<UserTO> result = updateUser(userUR);\n@@ -1528,9 +1529,8 @@ public void issueSYNCOPE1472() {\n                 .value(\"Other\")\n                 .build());\n \n-        for (int i = 0; i < 2; i++) {\n-            updateUser(userUR);\n-        }\n+        updateUser(userUR);\n+        updateUser(userUR);\n \n         // 2. remove resources, auxiliary classes and roles\n         userUR.getResources().clear();\n@@ -1567,17 +1567,34 @@ public void issueSYNCOPE1699() throws Exception {\n                 accept(MediaType.APPLICATION_JSON_TYPE).\n                 type(MediaType.APPLICATION_JSON_TYPE);\n \n-        Response response = webClient.invoke(\"PATCH\", JSON_MAPPER.writeValueAsString(req));\n+        Response response = webClient.invoke(HttpMethod.PATCH, JSON_MAPPER.writeValueAsString(req));\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n         // Key is mismatched in the path parameter and the request body.\n         req.setKey(UUID.randomUUID().toString());\n-        response = webClient.invoke(\"PATCH\", JSON_MAPPER.writeValueAsString(req));\n+        response = webClient.invoke(HttpMethod.PATCH, JSON_MAPPER.writeValueAsString(req));\n         assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n-        \n+\n         // reading user by its username still works\n-        userTO = USER_SERVICE.read(userTO.getKey());\n-        userTO = USER_SERVICE.read(userTO.getUsername());\n+        userTO = USER_SERVICE.read(req.getUsername().getValue());\n         assertNotNull(userTO);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1750() {\n+        UserCR userCR = UserITCase.getUniqueSample(\"syncope1750@apache.org\");\n+        userCR.getResources().add(RESOURCE_NAME_NOPROPAGATION);\n+        UserTO userTO = createUser(userCR).getEntity();\n+\n+        UserUR req = new UserUR.Builder(userTO.getKey()).password(new PasswordPatch.Builder().\n+                onSyncope(false).resource(RESOURCE_NAME_NOPROPAGATION).value(\"short\").build()).build();\n+\n+        try {\n+            USER_SERVICE.update(req);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+            assertTrue(e.getMessage().contains(\"InvalidPassword: Password must be 10 or more characters in length.\"));\n+        }\n+    }\n }"},{"sha":"387de1761c73fc87cb37f9f8672e485608bf7bdb","filename":"pom.xml","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=0f5a1edabe583b6160fe63e3f3811bd8a4ab7e09","patch":"@@ -956,12 +956,12 @@ under the License.\n         <version>2.0.0</version>\n         <exclusions>\n           <exclusion>\n-            <groupId>junit</groupId>\n-            <artifactId>junit</artifactId>\n+            <groupId>com.sun.mail</groupId>\n+            <artifactId>jakarta.mail</artifactId>\n           </exclusion>\n           <exclusion>\n-            <groupId>com.sun.activation</groupId>\n-            <artifactId>jakarta.activation</artifactId>\n+            <groupId>jakarta.activation</groupId>\n+            <artifactId>jakarta.activation-api</artifactId>\n           </exclusion>\n         </exclusions>\n       </dependency>\n@@ -2139,12 +2139,11 @@ under the License.\n               <dependency>\n                 <groupId>org.asciidoctor</groupId>\n                 <artifactId>asciidoctorj-pdf</artifactId>\n-                <version>2.3.4</version>\n+                <version>2.3.6</version>\n               </dependency>\n             </dependencies>\n             <configuration>\n               <doctype>book</doctype>\n-              <sourceHighlighter>highlightjs</sourceHighlighter>\n               <attributes>\n                 <docVersion>${project.version}</docVersion>\n                 <snapshotOrRelease>${snapshotOrRelease}</snapshotOrRelease>"}]}