{"sha":"8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhiMDBlYjVhM2E3OWNhZDg1M2ZjNDM0YzRjN2QwZmZlMDI2MTM5Y2M=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-10-07T15:17:18Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-10-07T15:17:18Z"},"message":"Addressing some CodeQL alerts (#219)","tree":{"sha":"0fd0a3ed1eff7c5d80ce88e077bc430272d2e8a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0fd0a3ed1eff7c5d80ce88e077bc430272d2e8a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffdv+CRBK7hj4Ov3rIwAAdHIIAASEF2BAWq7uGk6QD3IW3O/3\na4qOVLomGWcsnqBXYuBOtKCVDBF/y6zby2atJ/XLDLmgxvNqmYvf0q9/jPVexklq\n5kgLxSXmCshFKyjGBjtAGDpchTU49P0H7gaoAsnyd4QmYzrRPyA7237efdupVmK7\nvqo5WuYRYkegTltZDGpPljglv/kXYLoBwTKmd1cb9TTan3yIzj+G9u226obNsaZE\nf/R4sQjbny0O42y24vJ5qb2wxRElOvYC3phgq4vyoyFWBlS18GXoSVAdVQwUy28t\n5MrqH2NMz2YeObEZLW2QTKXAhd8ZNCsS5uMa4Amk4uOLc8C1Qx4UqPoLjy6GQ5Q=\n=neap\n-----END PGP SIGNATURE-----\n","payload":"tree 0fd0a3ed1eff7c5d80ce88e077bc430272d2e8a8\nparent dfdfa2c82126797213161046eb2337cb5d150c0b\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1602083838 +0200\ncommitter GitHub <noreply@github.com> 1602083838 +0200\n\nAddressing some CodeQL alerts (#219)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"dfdfa2c82126797213161046eb2337cb5d150c0b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dfdfa2c82126797213161046eb2337cb5d150c0b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dfdfa2c82126797213161046eb2337cb5d150c0b"}],"stats":{"total":229,"additions":113,"deletions":116},"files":[{"sha":"9d7f182da91099962827ea27bd3fcd064ec509d9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -177,7 +177,7 @@ public IModel<PrivilegeTO> model(final PrivilegeTO object) {\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n-        if (event.getPayload() instanceof ExitEvent && modal != null) {\n+        if (event.getPayload() instanceof ExitEvent) {\n             final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n             baseModal.show(false);\n             baseModal.close(target);"},{"sha":"f67f1d5c94a283f956e70ea0e712e91af2bc66c8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -278,7 +278,7 @@ public IModel<PolicyRuleWrapper> model(final PolicyRuleWrapper object) {\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n-        if (event.getPayload() instanceof ExitEvent && modal != null) {\n+        if (event.getPayload() instanceof ExitEvent) {\n             final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n             baseModal.show(false);\n             baseModal.close(target);"},{"sha":"7d854f0011650b8041e6f4b17e265398dfbf3830","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -260,7 +260,7 @@ public IModel<ReportletWrapper> model(final ReportletWrapper object) {\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n-        if (event.getPayload() instanceof ExitEvent && modal != null) {\n+        if (event.getPayload() instanceof ExitEvent) {\n             final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n             baseModal.show(false);\n             baseModal.close(target);"},{"sha":"1486ab62d3f4ab7fbc035fd1fba7a1fddad627b8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -93,7 +93,7 @@ public IModel<T> model(final T object) {\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n-        if (event.getPayload() instanceof ExitEvent && modal != null) {\n+        if (event.getPayload() instanceof ExitEvent) {\n             final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n             baseModal.show(false);\n             baseModal.close(target);"},{"sha":"c4894ab7364214c56e60ff6dbd1728e006c1016f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -103,8 +103,6 @@ public void updateHeader(final AjaxRequestTarget target, final Serializable mode\n             header = ((StatusBean) modelObject).getResource();\n         } else if (modelObject instanceof PolicyRuleWrapper) {\n             header = ((PolicyRuleWrapper) modelObject).getImplementationKey();\n-        } else if (modelObject instanceof PolicyRuleWrapper) {\n-            header = ((PolicyRuleWrapper) modelObject).getImplementationKey();\n         } else if (modelObject instanceof ReportletWrapper) {\n             header = ((ReportletWrapper) modelObject).getImplementationKey();\n         } else if (modelObject instanceof JobTO) {"},{"sha":"1653600a59b04a3e96bcaae530935bcc5f5625d4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/WizardMgtPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -171,7 +171,7 @@ public String getActualId() {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof ExitEvent && modal != null) {\n+        if (event.getPayload() instanceof ExitEvent) {\n             final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n             // default behaviour: change it catching the event if needed\n             modal.close(target);"},{"sha":"cf74da00e50bc9fa7890f5377b995ae6f5dce1ca","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -248,7 +248,7 @@ protected void reloadMemberships() {\n \n                 List<CompleteCondition> conditions = GroupableRelatableTO.class.cast(anyTO).getMemberships().\n                         stream().\n-                        skip((page - 1) * Constants.MAX_GROUP_LIST_SIZE).\n+                        skip(((long) page - 1L) * (long) Constants.MAX_GROUP_LIST_SIZE).\n                         limit(Constants.MAX_GROUP_LIST_SIZE).\n                         map(m -> builder.is(Constants.KEY_FIELD_NAME).equalTo(m.getGroupKey()).wrap()).\n                         collect(Collectors.toList());"},{"sha":"a3e1fc6d00b7f4c55b3b280d57ee833782488a06","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -58,7 +59,7 @@ public final class AnyOperations {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AnyOperations.class);\n \n-    private static final Set<String> NULL_SINGLETON = Collections.singleton(null);\n+    private static final List<String> NULL_SINGLETON_LIST = Collections.singletonList(null);\n \n     private AnyOperations() {\n         // empty constructor for static utility classes\n@@ -631,6 +632,6 @@ public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyUR anyUR) {\n     }\n \n     private static boolean isEmpty(final Attr attr) {\n-        return attr.getValues().isEmpty() || NULL_SINGLETON.equals(attr.getValues());\n+        return attr.getValues().isEmpty() || NULL_SINGLETON_LIST.equals(attr.getValues());\n     }\n }"},{"sha":"8d0d8de01a1412e9a638be2c41ce10bcab1d29ad","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/U2FRegistrationLogic.java","status":"modified","additions":99,"deletions":97,"changes":196,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FU2FRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FU2FRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FU2FRegistrationLogic.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -16,9 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.logic;\n \n+import java.lang.reflect.Method;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.CompareToBuilder;\n@@ -39,15 +44,9 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.lang.reflect.Method;\n-import java.util.Comparator;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n @Component\n public class U2FRegistrationLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n+\n     @Autowired\n     private AuthProfileDAO authProfileDAO;\n \n@@ -59,7 +58,7 @@ public class U2FRegistrationLogic extends AbstractTransactionalLogic<AuthProfile\n \n     @Override\n     protected AuthProfileTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n+            throws UnresolvedReferenceException {\n         String key = null;\n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; key == null && i < args.length; i++) {\n@@ -74,8 +73,8 @@ protected AuthProfileTO resolveReference(final Method method, final Object... ar\n         if (key != null) {\n             try {\n                 return authProfileDAO.findByKey(key).\n-                    map(authProfileDataBinder::getAuthProfileTO).\n-                    orElseThrow();\n+                        map(authProfileDataBinder::getAuthProfileTO).\n+                        orElseThrow();\n             } catch (final Throwable e) {\n                 LOG.debug(\"Unresolved reference\", e);\n                 throw new UnresolvedReferenceException(e);\n@@ -85,44 +84,44 @@ protected AuthProfileTO resolveReference(final Method method, final Object... ar\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SAVE_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public U2FRegisteredDevice save(final U2FRegisteredDevice acct) {\n         AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n-            orElseGet(() -> {\n-                final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n-                authProfile.setOwner(acct.getOwner());\n-                return authProfile;\n-            });\n+                orElseGet(() -> {\n+                    final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+                    authProfile.setOwner(acct.getOwner());\n+                    return authProfile;\n+                });\n \n         if (acct.getKey() == null) {\n             acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n         }\n         profile.add(acct);\n         profile = authProfileDAO.save(profile);\n         return profile.getU2FRegisteredDevices().\n-            stream().\n-            filter(Objects::nonNull).\n-            filter(t -> t.getKey().equals(acct.getKey())).\n-            findFirst().\n-            orElse(null);\n+                stream().\n+                filter(Objects::nonNull).\n+                filter(t -> t.getKey().equals(acct.getKey())).\n+                findFirst().\n+                orElse(null);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_READ_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public U2FRegisteredDevice read(final String key) {\n         return authProfileDAO.findAll().\n-            stream().\n-            map(AuthProfile::getU2FRegisteredDevices).\n-            filter(Objects::nonNull).\n-            flatMap(List::stream).\n-            filter(record -> record.getKey().equals(key)).\n-            findFirst().\n-            orElse(null);\n+                stream().\n+                map(AuthProfile::getU2FRegisteredDevices).\n+                filter(Objects::nonNull).\n+                flatMap(List::stream).\n+                filter(record -> record.getKey().equals(key)).\n+                findFirst().\n+                orElse(null);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_DELETE_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void delete(final String entityKey, final Long id, final Date expirationDate) {\n         List<AuthProfile> profiles = authProfileDAO.findAll();\n         profiles.forEach(profile -> {\n@@ -144,84 +143,87 @@ public void delete(final String entityKey, final Long id, final Date expirationD\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SEARCH + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public Pair<Integer, List<U2FRegisteredDevice>> search(final String entityKey, final Integer page,\n-                                                           final Integer itemsPerPage, final Long id,\n-                                                           final Date expirationDate,\n-                                                           final List<OrderByClause> orderByClauses) {\n+            final Integer itemsPerPage, final Long id,\n+            final Date expirationDate,\n+            final List<OrderByClause> orderByClauses) {\n         List<Comparator<U2FRegisteredDevice>> comparatorList = orderByClauses.\n-            stream().\n-            map(orderByClause -> {\n-                Comparator<U2FRegisteredDevice> comparator = null;\n-                if (orderByClause.getField().equals(\"id\")) {\n-                    comparator = (o1, o2) -> new CompareToBuilder().append(o1.getId(), o2.getId()).toComparison();\n-                }\n-                if (orderByClause.getField().equals(\"owner\")) {\n-                    comparator = (o1, o2) -> new CompareToBuilder().append(o1.getOwner(), o2.getOwner()).toComparison();\n-                }\n-                if (orderByClause.getField().equals(\"key\")) {\n-                    comparator = (o1, o2) -> new CompareToBuilder().append(o1.getKey(), o2.getKey()).toComparison();\n-                }\n-                if (orderByClause.getField().equals(\"issueDate\")) {\n-                    comparator = (o1, o2) ->\n-                        new CompareToBuilder().append(o1.getIssueDate(), o2.getIssueDate()).toComparison();\n-                }\n-                if (orderByClause.getField().equals(\"record\")) {\n-                    comparator = (o1, o2) ->\n-                        new CompareToBuilder().append(o1.getRecord(), o2.getRecord()).toComparison();\n-                }\n-                if (comparator != null) {\n-                    if (orderByClause.getDirection() == OrderByClause.Direction.DESC) {\n-                        return comparator.reversed();\n+                stream().\n+                map(orderByClause -> {\n+                    Comparator<U2FRegisteredDevice> comparator = null;\n+                    if (orderByClause.getField().equals(\"id\")) {\n+                        comparator = (o1, o2) -> new CompareToBuilder().\n+                                append(o1.getId(), o2.getId()).toComparison();\n                     }\n-                    return comparator;\n-                }\n-                return null;\n-            }).\n-            filter(Objects::nonNull).\n-            collect(Collectors.toList());\n+                    if (orderByClause.getField().equals(\"owner\")) {\n+                        comparator = (o1, o2) -> new CompareToBuilder().\n+                                append(o1.getOwner(), o2.getOwner()).toComparison();\n+                    }\n+                    if (orderByClause.getField().equals(\"key\")) {\n+                        comparator = (o1, o2) -> new CompareToBuilder().\n+                                append(o1.getKey(), o2.getKey()).toComparison();\n+                    }\n+                    if (orderByClause.getField().equals(\"issueDate\")) {\n+                        comparator = (o1, o2) -> new CompareToBuilder().\n+                                append(o1.getIssueDate(), o2.getIssueDate()).toComparison();\n+                    }\n+                    if (orderByClause.getField().equals(\"record\")) {\n+                        comparator = (o1, o2) -> new CompareToBuilder().\n+                                append(o1.getRecord(), o2.getRecord()).toComparison();\n+                    }\n+                    if (comparator != null) {\n+                        if (orderByClause.getDirection() == OrderByClause.Direction.DESC) {\n+                            return comparator.reversed();\n+                        }\n+                        return comparator;\n+                    }\n+                    return null;\n+                }).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n \n         List<U2FRegisteredDevice> devices = authProfileDAO.findAll().\n-            stream().\n-            map(AuthProfile::getU2FRegisteredDevices).\n-            filter(Objects::nonNull).\n-            flatMap(List::stream).\n-            filter(device -> {\n-                EqualsBuilder builder = new EqualsBuilder();\n-                if (StringUtils.isNotBlank(entityKey)) {\n-                    builder.append(entityKey, device.getKey());\n-                }\n-                if (id != null) {\n-                    builder.append(id, (Long) device.getId());\n-                }\n-                if (expirationDate != null) {\n-                    builder.appendSuper(device.getIssueDate().compareTo(expirationDate) >= 0);\n-                }\n-                return true;\n-            }).\n-            filter(Objects::nonNull).\n-            collect(Collectors.toList());\n+                stream().\n+                map(AuthProfile::getU2FRegisteredDevices).\n+                filter(Objects::nonNull).\n+                flatMap(List::stream).\n+                filter(device -> {\n+                    EqualsBuilder builder = new EqualsBuilder();\n+                    if (StringUtils.isNotBlank(entityKey)) {\n+                        builder.append(entityKey, device.getKey());\n+                    }\n+                    if (id != null) {\n+                        builder.append(id, (Long) device.getId());\n+                    }\n+                    if (expirationDate != null) {\n+                        builder.appendSuper(device.getIssueDate().compareTo(expirationDate) >= 0);\n+                    }\n+                    return true;\n+                }).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n \n         List<U2FRegisteredDevice> pagedResults = devices.\n-            stream().\n-            limit(itemsPerPage).\n-            skip(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n-            sorted((o1, o2) -> {\n-                int result;\n-                for (Comparator<U2FRegisteredDevice> comparator : comparatorList) {\n-                    result = comparator.compare(o1, o2);\n-                    if (result != 0) {\n-                        return result;\n+                stream().\n+                limit(itemsPerPage).\n+                skip(itemsPerPage * (page <= 0 ? 0L : page.longValue() - 1L)).\n+                sorted((o1, o2) -> {\n+                    int result;\n+                    for (Comparator<U2FRegisteredDevice> comparator : comparatorList) {\n+                        result = comparator.compare(o1, o2);\n+                        if (result != 0) {\n+                            return result;\n+                        }\n                     }\n-                }\n-                return 0;\n-            })\n-            .collect(Collectors.toList());\n+                    return 0;\n+                })\n+                .collect(Collectors.toList());\n         return Pair.of(devices.size(), pagedResults);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_UPDATE_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void update(final U2FRegisteredDevice acct) {\n         List<AuthProfile> profiles = authProfileDAO.findAll();\n         profiles.forEach(profile -> {"},{"sha":"60ae3a384757cd597296eb9547eaa02a4f4c2c85","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -440,7 +440,7 @@ public NumbersInfo numbers() {\n                 numbersInfo.setAnyType1(entry.getKey().getKey());\n                 numbersInfo.setTotalAny1(entry.getValue());\n                 numbersInfo.getAny1ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));\n-            } else if (i == 1) {\n+            } else {\n                 numbersInfo.setAnyType2(entry.getKey().getKey());\n                 numbersInfo.setTotalAny2(entry.getValue());\n                 numbersInfo.getAny2ByRealm().putAll(anyObjectDAO.countByRealm(entry.getKey()));"},{"sha":"a789fc563427076f8d8ff60f5caea2e8ff065d56","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -773,11 +773,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                     case PLAIN:\n                         PlainAttr<?> attr;\n                         if (membership == null) {\n-                            if (ref instanceof Attributable) {\n-                                attr = plainAttrGetter.apply((Attributable) ref, intAttrName.getSchema().getKey());\n-                            } else {\n-                                attr = ref.getPlainAttr(intAttrName.getSchema().getKey()).orElse(null);\n-                            }\n+                            attr = plainAttrGetter.apply((Attributable) ref, intAttrName.getSchema().getKey());\n                         } else {\n                             attr = ((GroupableRelatable<?, ?, ?, ?, ?>) ref).getPlainAttr(\n                                     intAttrName.getSchema().getKey(), membership).orElse(null);"},{"sha":"77d17512809aa7b147e6ab9b0b9c6ab1f1a442d0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/cache/MemoryVirAttrCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FMemoryVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FMemoryVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FMemoryVirAttrCache.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -126,7 +126,7 @@ private void free() {\n      */\n     @Override\n     public boolean isValidEntry(final VirAttrCacheValue value) {\n-        final Date expiringDate = new Date(value == null ? 0 : value.getCreationDate().getTime() + ttl * 1000);\n+        Date expiringDate = new Date(value == null ? 0 : value.getCreationDate().getTime() + ttl * 1000L);\n         return expiringDate.after(new Date());\n     }\n }"},{"sha":"5af16d18f3041249c13c943c6ef54306e2d1d56e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -125,7 +125,7 @@ protected void doExecute(\n                                 taskInfo, ExecStatus.CREATED, null, null, null);\n                     }\n                 } catch (Exception e) {\n-                    LOG.error(\"While submitting task for async execution\", taskInfo, e);\n+                    LOG.error(\"While submitting task for async execution: {}\", taskInfo, e);\n                     rejected(taskInfo, e.getMessage(), reporter, executor);\n                 }\n             });"},{"sha":"90c0d4b5b6666b0e9b58cc88b6790826befb487e","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8b00eb5a3a79cad853fc434c4c7d0ffe026139cc/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=8b00eb5a3a79cad853fc434c4c7d0ffe026139cc","patch":"@@ -40,7 +40,7 @@ public Authentication authenticate(final Authentication authentication) throws A\n         JWTAuthentication jwtAuthentication = (JWTAuthentication) authentication;\n \n         JWTClaimsSet claims = jwtAuthentication.getClaims();\n-        Long referenceTime = System.currentTimeMillis();\n+        long referenceTime = System.currentTimeMillis();\n \n         Date expiryTime = claims.getExpirationTime();\n         if (expiryTime == null || expiryTime.getTime() < referenceTime) {"}]}