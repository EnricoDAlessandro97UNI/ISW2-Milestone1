{"sha":"c86fb4e637120f7c3b71d9f70d29935eb55807e8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM4NmZiNGU2MzcxMjBmN2MzYjcxZDlmNzBkMjk5MzVlYjU1ODA3ZTg=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-07-04T12:03:27Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-07-04T12:03:55Z"},"message":"[SYNCOPE-1139] fixes StackOverflow while auditing propagation","tree":{"sha":"1bedc7d7d2933e163a46810785121bff7ca32366","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1bedc7d7d2933e163a46810785121bff7ca32366"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c86fb4e637120f7c3b71d9f70d29935eb55807e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c86fb4e637120f7c3b71d9f70d29935eb55807e8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c86fb4e637120f7c3b71d9f70d29935eb55807e8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c86fb4e637120f7c3b71d9f70d29935eb55807e8/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"bbcfc41e012796023b4920151529abffaa942812","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbcfc41e012796023b4920151529abffaa942812","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bbcfc41e012796023b4920151529abffaa942812"}],"stats":{"total":61,"additions":40,"deletions":21},"files":[{"sha":"f43e66209bc2fa2790cad17aa649fcd0137ae3a3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":40,"deletions":21,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c86fb4e637120f7c3b71d9f70d29935eb55807e8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c86fb4e637120f7c3b71d9f70d29935eb55807e8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=c86fb4e637120f7c3b71d9f70d29935eb55807e8","patch":"@@ -28,6 +28,8 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -57,9 +59,11 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n+import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n@@ -142,6 +146,15 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected AuditManager auditManager;\n \n+    /**\n+     * Task data binder.\n+     */\n+    @Autowired\n+    protected TaskDataBinder taskDataBinder;\n+\n+    @Autowired\n+    private TaskUtilsFactory taskUtilsFactory;\n+\n     @Autowired\n     protected EntityFactory entityFactory;\n \n@@ -371,6 +384,7 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n         Uid uid = null;\n         Connector connector = null;\n         Result result;\n+        String resource = task.getResource().getKey();\n         try {\n             provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName()));\n             orgUnit = task.getResource().getOrgUnit();\n@@ -408,7 +422,7 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n             result = Result.SUCCESS;\n         } catch (Exception e) {\n             result = Result.FAILURE;\n-            LOG.error(\"Exception during provision on resource \" + task.getResource().getKey(), e);\n+            LOG.error(\"Exception during provision on resource \" + resource, e);\n \n             if (e instanceof ConnectorException && e.getCause() != null) {\n                 taskExecutionMessage = e.getCause().getMessage();\n@@ -493,26 +507,31 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n         for (PropagationActions action : actions) {\n             action.after(task, execution, afterObj);\n         }\n-\n-        notificationManager.createTasks(\n-                AuditElements.EventCategoryType.PROPAGATION,\n-                task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase(),\n-                task.getResource().getKey(),\n-                task.getOperation().name().toLowerCase(),\n-                result,\n-                beforeObj,\n-                new Object[] { execution, afterObj },\n-                task);\n-\n-        auditManager.audit(\n-                AuditElements.EventCategoryType.PROPAGATION,\n-                task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase(),\n-                task.getResource().getKey(),\n-                task.getOperation().name().toLowerCase(),\n-                result,\n-                beforeObj,\n-                new Object[] { execution, afterObj },\n-                task);\n+        \n+        String anyTypeKind = task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase();\n+        String operation = task.getOperation().name().toLowerCase();\n+        // SYNCOPE-1139, check if notification or audit are requested and use TOs instead of persistence objects\n+        boolean notificationsAvailable = notificationManager.notificationsAvailable(\n+                AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource, operation);\n+        boolean auditRequested = auditManager.auditRequested(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind,\n+                resource, operation);\n+\n+        if (notificationsAvailable || auditRequested) {\n+            ExecTO execTO = taskDataBinder.getExecTO(execution);\n+            PropagationTaskTO taskTO = taskDataBinder.getTaskTO(task, taskUtilsFactory.getInstance(task), false);\n+            notificationManager.createTasks(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource,\n+                    operation,\n+                    result,\n+                    beforeObj,\n+                    new Object[] { execTO, afterObj },\n+                    taskTO);\n+\n+            auditManager.audit(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource, operation,\n+                    result,\n+                    beforeObj,\n+                    new Object[] { execTO, afterObj },\n+                    taskTO);\n+        }\n \n         return execution;\n     }"}]}