{"sha":"d5b371fa13c3a70fdd408facb13e7eae1495eb46","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ1YjM3MWZhMTNjM2E3MGZkZDQwOGZhY2IxM2U3ZWFlMTQ5NWViNDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-09-19T10:21:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-09-19T10:21:46Z"},"message":"Workaround for WICKET-6588","tree":{"sha":"f8d8b5f16d9c47201d9ab60eefb7e8d387dc037f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f8d8b5f16d9c47201d9ab60eefb7e8d387dc037f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d5b371fa13c3a70fdd408facb13e7eae1495eb46","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b371fa13c3a70fdd408facb13e7eae1495eb46","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d5b371fa13c3a70fdd408facb13e7eae1495eb46","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b371fa13c3a70fdd408facb13e7eae1495eb46/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"aebb4460fa7304dd412ea9ad9949c010e345516b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aebb4460fa7304dd412ea9ad9949c010e345516b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aebb4460fa7304dd412ea9ad9949c010e345516b"}],"stats":{"total":40,"additions":36,"deletions":4},"files":[{"sha":"7ad0f08c83c62600377f54660c759c5a6ff33ece","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"modified","additions":36,"deletions":4,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b371fa13c3a70fdd408facb13e7eae1495eb46/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b371fa13c3a70fdd408facb13e7eae1495eb46/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=d5b371fa13c3a70fdd408facb13e7eae1495eb46","patch":"@@ -27,17 +27,23 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import javax.servlet.SessionTrackingMode;\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.wicket.Application;\n+import org.apache.wicket.Component;\n import org.apache.wicket.Session;\n import org.apache.wicket.ThreadContext;\n+import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n import org.apache.wicket.protocol.ws.api.WebSocketRequestHandler;\n import org.apache.wicket.protocol.ws.api.message.TextMessage;\n+import org.apache.wicket.util.cookies.CookieUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -50,19 +56,45 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {\n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n     private final Map<String, String> resources =\n-            Collections.<String, String>synchronizedMap(new HashMap<String, String>());\n+            Collections.<String, String>synchronizedMap(new HashMap<>());\n \n-    private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<String>());\n+    private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<>());\n \n     private final Map<String, String> connectors =\n-            Collections.<String, String>synchronizedMap(new HashMap<String, String>());\n+            Collections.<String, String>synchronizedMap(new HashMap<>());\n \n-    private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<String>());\n+    private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<>());\n \n     private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n \n     private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n \n+    @Override\n+    protected CharSequence getSessionId(final Component component) {\n+        String sessionId = \"\";\n+        WebApplication application = (WebApplication) component.getApplication();\n+        Set<SessionTrackingMode> effectiveSessionTrackingModes =\n+                application.getServletContext().getEffectiveSessionTrackingModes();\n+        Object containerRequest = component.getRequest().getContainerRequest();\n+        if (effectiveSessionTrackingModes.size() == 1\n+                && SessionTrackingMode.URL.equals(effectiveSessionTrackingModes.iterator().next())) {\n+\n+            sessionId = component.getSession().getId();\n+        } else if (containerRequest instanceof HttpServletRequest) {\n+            CookieUtils cookieUtils = new CookieUtils();\n+            String jsessionCookieName = application.getServletContext().getSessionCookieConfig().getName();\n+            if (jsessionCookieName == null) {\n+                jsessionCookieName = \"JSESSIONID\";\n+            }\n+            Cookie jsessionid = cookieUtils.getCookie(jsessionCookieName);\n+            HttpServletRequest httpServletRequest = (HttpServletRequest) containerRequest;\n+            if (jsessionid == null || httpServletRequest.isRequestedSessionIdValid() == false) {\n+                sessionId = component.getSession().getId();\n+            }\n+        }\n+        return sessionId;\n+    }\n+\n     @Override\n     protected void onMessage(final WebSocketRequestHandler handler, final TextMessage message) {\n         try {"}]}