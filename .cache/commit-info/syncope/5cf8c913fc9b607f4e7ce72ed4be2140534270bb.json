{"sha":"5cf8c913fc9b607f4e7ce72ed4be2140534270bb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVjZjhjOTEzZmM5YjYwN2Y0ZTdjZTcyZWQ0YmUyMTQwNTM0MjcwYmI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T15:04:17Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-21T15:04:17Z"},"message":"Fixes issue 195\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247160 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"043dc703cf05803a229615fc04516fc1ca887bd5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/043dc703cf05803a229615fc04516fc1ca887bd5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5cf8c913fc9b607f4e7ce72ed4be2140534270bb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cf8c913fc9b607f4e7ce72ed4be2140534270bb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5cf8c913fc9b607f4e7ce72ed4be2140534270bb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/comments","author":null,"committer":null,"parents":[{"sha":"12fce01860c698c52b00efdf1effeedfafebdfae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/12fce01860c698c52b00efdf1effeedfafebdfae","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/12fce01860c698c52b00efdf1effeedfafebdfae"}],"stats":{"total":2037,"additions":1648,"deletions":389},"files":[{"sha":"c06e32ff079c254cca4759f025624626ea951e15","filename":"client/src/main/java/org/syncope/client/mod/UserMod.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -23,6 +23,8 @@ public class UserMod extends AbstractAttributableMod {\n \n     private String password;\n \n+    private String username;\n+\n     private Set<MembershipMod> membershipsToBeAddeded;\n \n     private Set<Long> membershipsToBeRemoved;\n@@ -50,6 +52,14 @@ public void setMembershipsToBeAdded(Set<MembershipMod> membershipMods) {\n         this.membershipsToBeAddeded = membershipMods;\n     }\n \n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n     public String getPassword() {\n         return password;\n     }"},{"sha":"b22aff22a63e34138b6df4eb871c7ae7e7de504a","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -35,6 +35,16 @@ public class UserTO extends AbstractAttributableTO {\n \n     private Date tokenExpireTime;\n \n+    private String username;\n+\n+    private Date lastLoginDate;\n+\n+    private Date creationDate;\n+\n+    private Date changePwdDate;\n+\n+    private Integer failedLogins;\n+\n     public UserTO() {\n         super();\n \n@@ -92,6 +102,46 @@ public void setTokenExpireTime(Date tokenExpireTime) {\n         }\n     }\n \n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public Date getChangePwdDate() {\n+        return changePwdDate;\n+    }\n+\n+    public Date getCreationDate() {\n+        return creationDate;\n+    }\n+\n+    public Integer getFailedLogins() {\n+        return failedLogins;\n+    }\n+\n+    public Date getLastLoginDate() {\n+        return lastLoginDate;\n+    }\n+\n+    public void setChangePwdDate(Date changePwdDate) {\n+        this.changePwdDate = changePwdDate;\n+    }\n+\n+    public void setCreationDate(Date creationDate) {\n+        this.creationDate = creationDate;\n+    }\n+\n+    public void setFailedLogins(Integer failedLogins) {\n+        this.failedLogins = failedLogins;\n+    }\n+\n+    public void setLastLoginDate(Date lastLoginDate) {\n+        this.lastLoginDate = lastLoginDate;\n+    }\n+\n     @Override\n     public String toString() {\n         return new ReflectionToStringBuilder(this,"},{"sha":"a7d566bd8e6b2cd8c1975f7112d23debd8c2f5b0","filename":"client/src/main/java/org/syncope/types/AccountPolicySpec.java","status":"modified","additions":131,"deletions":7,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -14,18 +14,142 @@\n  */\n package org.syncope.types;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class AccountPolicySpec extends AbstractPolicySpec {\n \n-    private static final long serialVersionUID = -6325902340423910118L;\n-    // TODO: To be defined\n+    private static final long serialVersionUID = 3259256974414758406L;\n+\n+    /**\n+     * Minimum length.\n+     */\n+    private int maxLength;\n+\n+    /**\n+     * Maximum length.\n+     */\n+    private int minLength;\n+\n+    /**\n+     * Substrings not permitted.\n+     */\n+    private List<String> wordsNotPermitted;\n+\n+    /**\n+     * User attribute values not permitted.\n+     */\n+    private List<String> schemasNotPermitted;\n+\n+    /**\n+     * Substrings not permitted as prefix.\n+     */\n+    private List<String> prefixesNotPermitted;\n \n-    private String fake;\n+    /**\n+     * Substrings not permitted as suffix.\n+     */\n+    private List<String> suffixesNotPermitted;\n+\n+    /**\n+     * Specify if one or more lowercase characters are permitted.\n+     */\n+    private boolean allUpperCase;\n+\n+    /**\n+     * Specify if one or more uppercase characters are permitted.\n+     */\n+    private boolean allLowerCase;\n+\n+    /**\n+     * Number of permitted login retries.\n+     * 0 disabled; >0 enabled.\n+     * If the number of subsequent failed logins will be greater then this value\n+     * the account will be suspended (lock-out).\n+     */\n+    private int permittedLoginRetries;\n+\n+    public boolean isAllLowerCase() {\n+        return allLowerCase;\n+    }\n+\n+    public void setAllLowerCase(boolean allLowerCase) {\n+        this.allLowerCase = allLowerCase;\n+    }\n+\n+    public boolean isAllUpperCase() {\n+        return allUpperCase;\n+    }\n+\n+    public void setAllUpperCase(boolean allUpperCase) {\n+        this.allUpperCase = allUpperCase;\n+    }\n+\n+    public int getMaxLength() {\n+        return maxLength;\n+    }\n+\n+    public void setMaxLength(int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+    public int getMinLength() {\n+        return minLength;\n+    }\n+\n+    public void setMinLength(int minLength) {\n+        this.minLength = minLength;\n+    }\n+\n+    public List<String> getPrefixesNotPermitted() {\n+        if (prefixesNotPermitted == null) {\n+            prefixesNotPermitted = new ArrayList<String>();\n+        }\n+        return prefixesNotPermitted;\n+    }\n+\n+    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\n+        this.prefixesNotPermitted = prefixesNotPermitted;\n+    }\n+\n+    public List<String> getSchemasNotPermitted() {\n+        if (schemasNotPermitted == null) {\n+            schemasNotPermitted = new ArrayList<String>();\n+        }\n+        return schemasNotPermitted;\n+    }\n+\n+    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\n+        this.schemasNotPermitted = schemasNotPermitted;\n+    }\n+\n+    public List<String> getSuffixesNotPermitted() {\n+        if (suffixesNotPermitted == null) {\n+            suffixesNotPermitted = new ArrayList<String>();\n+        }\n+        return suffixesNotPermitted;\n+    }\n+\n+    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\n+        this.suffixesNotPermitted = suffixesNotPermitted;\n+    }\n+\n+    public List<String> getWordsNotPermitted() {\n+        if (wordsNotPermitted == null) {\n+            wordsNotPermitted = new ArrayList<String>();\n+        }\n+        return wordsNotPermitted;\n+    }\n+\n+    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\n+        this.wordsNotPermitted = wordsNotPermitted;\n+    }\n \n-    public String getFake() {\n-        return fake;\n+    public int getPermittedLoginRetries() {\n+        return permittedLoginRetries;\n     }\n \n-    public void setFake(String fake) {\n-        this.fake = fake;\n+    public void setPermittedLoginRetries(int permittedLoginRetries) {\n+        this.permittedLoginRetries = permittedLoginRetries;\n     }\n }"},{"sha":"9f25f96f40a336878fa20c3d0f6a97d10fc502e2","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -23,8 +23,24 @@ public enum EntityViolationType {\n     \"org.syncope.core.validation.externalresource.invalidAccountIdCount\"),\n     MoreThanOneNonNull(\n     \"org.syncope.core.validation.attrvalue.moreThanOneNonNull\"),\n-    InvalidSchema(\n-    \"org.syncope.core.validation.attrvalue.invalidSchema\"),\n+    InvalidUSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidUSchema\"),\n+    InvalidUDerSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidUDerSchema\"),\n+    InvalidUVirSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidUVirSchema\"),\n+    InvalidRSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidRSchema\"),\n+    InvalidRDerSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidRDerSchema\"),\n+    InvalidRVirSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidRVirSchema\"),\n+    InvalidMSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidMSchema\"),\n+    InvalidMDerSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidMDerSchema\"),\n+    InvalidMVirSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidMVirSchema\"),\n     InvalidSchemaTypeSpecification(\n     \"org.syncope.core.validation.attrvalue.invalidSchemaTypeSpecification\"),\n     InvalidValueList("},{"sha":"fea8b84b088815fcfe1104b36acbf862b49a70bd","filename":"client/src/main/java/org/syncope/types/IntMappingType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FIntMappingType.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -20,6 +20,6 @@ public enum IntMappingType {\n     UserDerivedSchema,\n     UserVirtualSchema,\n     SyncopeUserId,\n-    Password;\n-\n+    Password,\n+    Username;\n }"},{"sha":"2a7e72b56ebfa21aaaeb9293d3a8b81a7873f38e","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -52,9 +52,33 @@ public enum SyncopeClientExceptionType {\n     InvalidPropagationTaskExecReport(\n     \"Syncope.InvalidPropagationTaskExecReport\",\n     \"Syncope.InvalidPropagationTaskExecReport.element\"),\n-    InvalidSchema(\n-    \"Syncope.InvalidUpdate\",\n-    \"Syncope.InvalidUpdate.name\"),\n+    InvalidUSchema(\n+    \"Syncope.InvalidUSchemaUpdate\",\n+    \"Syncope.InvalidUSchemaUpdate.name\"),\n+    InvalidUDerSchema(\n+    \"Syncope.InvalidUDerSchemaUpdate\",\n+    \"Syncope.InvalidUDerSchemaUpdate.name\"),\n+    InvalidUVirSchema(\n+    \"Syncope.InvalidUVirSchemaUpdate\",\n+    \"Syncope.InvalidUVirSchemaUpdate.name\"),\n+    InvalidRSchema(\n+    \"Syncope.InvalidRSchemaUpdate\",\n+    \"Syncope.InvalidRSchemaUpdate.name\"),\n+    InvalidRDerSchema(\n+    \"Syncope.InvalidRDerSchemaUpdate\",\n+    \"Syncope.InvalidRDerSchemaUpdate.name\"),\n+    InvalidRVirSchema(\n+    \"Syncope.InvalidRVirSchemaUpdate\",\n+    \"Syncope.InvalidRVirSchemaUpdate.name\"),\n+    InvalidMSchema(\n+    \"Syncope.InvalidMSchemaUpdate\",\n+    \"Syncope.InvalidMSchemaUpdate.name\"),\n+    InvalidMDerSchema(\n+    \"Syncope.InvalidMDerSchemaUpdate\",\n+    \"Syncope.InvalidMDerSchemaUpdate.name\"),\n+    InvalidMVirSchema(\n+    \"Syncope.InvalidMVirSchemaUpdate\",\n+    \"Syncope.InvalidMVirSchemaUpdate.name\"),\n     InvalidSchemaMapping(\n     \"Syncope.InvalidSchemaMapping\",\n     \"\"),"},{"sha":"7dcdf45a7f131cfa54bc7075c9593d64825a08c3","filename":"console/src/main/java/org/syncope/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -36,12 +36,15 @@\n  */\n public class DisplayAttributesModalPage extends BaseModalPage {\n \n+    private static final long serialVersionUID = -4274117450918385110L;\n+\n     @SpringBean\n     private PreferenceManager prefMan;\n \n     private final List<String> selectedSchemas;\n \n-    public DisplayAttributesModalPage(final PageReference callerPageRef,\n+    public DisplayAttributesModalPage(\n+            final PageReference callerPageRef,\n             final IModel<List<String>> schemaNames,\n             final ModalWindow window) {\n "},{"sha":"2a7f292a5a07b253da32c120a5a0c428e4af186b","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -48,6 +48,7 @@\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.console.pages.panels.ResourceSecurityPanel;\n import org.syncope.console.rest.ConnectorRestClient;\n import org.syncope.console.rest.ResourceRestClient;\n import org.syncope.console.rest.SchemaRestClient;\n@@ -378,6 +379,14 @@ public CharSequence preDecorateScript(\n                                     mappingTO.setIntAttrName(\"Password\");\n                                     break;\n \n+                                case Username:\n+                                    intAttrNames.setEnabled(false);\n+                                    intAttrNames.setRequired(false);\n+                                    intAttrNames.setChoices(\n+                                            Collections.EMPTY_LIST);\n+                                    mappingTO.setIntAttrName(\"Username\");\n+                                    break;\n+\n                                 default:\n                                     intAttrNames.setChoices(\n                                             Collections.EMPTY_LIST);\n@@ -618,6 +627,12 @@ protected void onUpdate(AjaxRequestTarget target) {\n                     }\n                 });\n \n+        //--------------------------------\n+        // Security container\n+        //--------------------------------\n+        form.add(new ResourceSecurityPanel(\"security\", resourceTO));\n+        //--------------------------------\n+\n         AjaxButton submit = new IndicatingAjaxButton(\n                 \"apply\", new ResourceModel(\"submit\")) {\n \n@@ -721,6 +736,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                         case SyncopeUserId:\n                         case Password:\n+                        case Username:\n                         default:\n                             chooserToPopulate.setRequired(false);\n                             chooserToPopulate.setEnabled(false);"},{"sha":"ed6ecd0a8d4788112f03944570b26805dc5ff63e","filename":"console/src/main/java/org/syncope/console/pages/RoleModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -43,7 +43,7 @@\n import org.syncope.console.rest.RoleRestClient;\n import org.syncope.console.pages.panels.DerivedAttributesPanel;\n import org.syncope.console.pages.panels.ResourcesPanel;\n-import org.syncope.console.pages.panels.SecurityPanel;\n+import org.syncope.console.pages.panels.RoleSecurityPanel;\n import org.syncope.console.pages.panels.VirtualAttributesPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -142,7 +142,7 @@ public RoleModalPage(final PageReference callerPageRef,\n         //--------------------------------\n         // Security container\n         //--------------------------------\n-        form.add(new SecurityPanel(\"security\", roleTO));\n+        form.add(new RoleSecurityPanel(\"security\", roleTO));\n         //--------------------------------\n \n         form.add(new ResourcesPanel(\"resources\", roleTO));"},{"sha":"53be33febb8f82c9e755f5e7dd92de2da4b3949a","filename":"console/src/main/java/org/syncope/console/pages/UserModalPage.java","status":"modified","additions":20,"deletions":5,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -34,6 +34,7 @@\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.PasswordTextField;\n import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.syncope.client.mod.AttributeMod;\n@@ -50,6 +51,8 @@\n import org.syncope.console.pages.panels.RolesPanel;\n import org.syncope.console.pages.panels.VirtualAttributesPanel;\n import org.syncope.console.rest.UserRestClient;\n+import org.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n \n /**\n  * Modal window with User form.\n@@ -87,9 +90,20 @@ public UserModalPage(final PageReference callerPageRef,\n         //--------------------------------\n         form.add(new AttributesPanel(\"attributes\", userTO, form));\n \n-        final PasswordTextField password = new PasswordTextField(\"password\");\n+        final AjaxTextFieldPanel username = new AjaxTextFieldPanel(\"username\",\n+                \"username\", new PropertyModel<String>(userTO, \"username\"), true);\n+\n+        username.addRequiredLabel();\n+        form.add(username);\n+\n+        final AjaxPasswordFieldPanel password = new AjaxPasswordFieldPanel(\n+                \"password\",\n+                \"password\",\n+                new PropertyModel<String>(userTO, \"password\"),\n+                true);\n+\n         password.setRequired(userTO.getId() == 0);\n-        password.setResetPassword(true);\n+        ((PasswordTextField) password.getField()).setResetPassword(true);\n         form.add(password);\n \n         final WebMarkupContainer mandatoryPassword =\n@@ -99,8 +113,8 @@ public UserModalPage(final PageReference callerPageRef,\n             private static final long serialVersionUID = 1469628524240283489L;\n \n             @Override\n-            public void onComponentTag(final Component component,\n-                    final ComponentTag tag) {\n+            public void onComponentTag(\n+                    final Component component, final ComponentTag tag) {\n \n                 if (userTO.getId() > 0) {\n                     tag.put(\"style\", \"display:none;\");\n@@ -348,7 +362,8 @@ private void searchAndUpdateAttribute(AttributeTO attributeTO) {\n         for (AttributeTO oldAttribute : oldUser.getAttributes()) {\n             if (attributeTO.getSchema().equals(oldAttribute.getSchema())) {\n \n-                if (!attributeTO.equals(oldAttribute) && !oldAttribute.isReadonly()) {\n+                if (!attributeTO.equals(oldAttribute) && !oldAttribute.\n+                        isReadonly()) {\n \n                     if (attributeTO.getValues().size() > 1) {\n                         attributeMod.setValuesToBeAdded("},{"sha":"16fe1025fd576fc08461100c10649761be679052","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -591,7 +591,10 @@ public void onClose(final AjaxRequestTarget target) {\n \n     private List<IColumn<UserTO>> getColumns(final ModalWindow editModalWin) {\n         List<IColumn<UserTO>> columns = new ArrayList<IColumn<UserTO>>();\n-        columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n+        columns.add(new PropertyColumn(\n+                new ResourceModel(\"id\"), \"id\", \"id\"));\n+        columns.add(new PropertyColumn(\n+                new ResourceModel(\"username\"), \"username\", \"username\"));\n         columns.add(new PropertyColumn(\n                 new ResourceModel(\"status\"), \"status\", \"status\"));\n         columns.add(new TokenColumn(new ResourceModel(\"token\"), \"token\"));\n@@ -898,8 +901,8 @@ private static class UserAttrColumn extends AbstractColumn<UserTO> {\n \n         private final String schemaName;\n \n-        public UserAttrColumn(final IModel<String> displayModel,\n-                final String schemaName) {\n+        public UserAttrColumn(\n+                final IModel<String> displayModel, final String schemaName) {\n \n             super(displayModel,\n                     schemaName.startsWith(DERIVED_ATTRIBUTE_PREFIX)\n@@ -976,8 +979,7 @@ protected void populateItem(\n             }\n \n             final CheckBox notOperator = new CheckBox(\"notOperator\",\n-                    new PropertyModel(searchCondition,\n-                    \"notOperator\"));\n+                    new PropertyModel(searchCondition,\"notOperator\"));\n             notOperator.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n                 private static final long serialVersionUID ="},{"sha":"f2ce3d769f6814fa459adcfed634403f428087fd","filename":"console/src/main/java/org/syncope/console/pages/panels/ResourceSecurityPanel.java","status":"added","additions":169,"deletions":0,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -0,0 +1,169 @@\n+/*\n+ *  Copyright 2011 fabio.\n+ * \n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.pages.panels;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.client.to.AccountPolicyTO;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.ResourceTO;\n+import org.syncope.console.rest.PolicyRestClient;\n+import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.syncope.types.PolicyType;\n+\n+public class ResourceSecurityPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(ResourceSecurityPanel.class);\n+\n+    private static final long serialVersionUID = -7982691107029848579L;\n+\n+    @SpringBean\n+    private PolicyRestClient policyRestClient;\n+\n+    IModel<Map<Long, String>> passwordPolicies = null;\n+\n+    IModel<Map<Long, String>> accountPolicies = null;\n+\n+    public ResourceSecurityPanel(final String id, final ResourceTO resourceTO) {\n+\n+        super(id);\n+\n+        setOutputMarkupId(true);\n+\n+        passwordPolicies = new LoadableDetachableModel<Map<Long, String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected Map<Long, String> load() {\n+                Map<Long, String> res = new HashMap<Long, String>();\n+                for (PasswordPolicyTO policyTO :\n+                        policyRestClient.getPasswordPolicies()) {\n+                    res.put(policyTO.getId(), policyTO.getDescription());\n+                }\n+                return res;\n+            }\n+        };\n+\n+        accountPolicies = new LoadableDetachableModel<Map<Long, String>>() {\n+\n+            private static final long serialVersionUID = -2012833443695917883L;\n+\n+            @Override\n+            protected Map<Long, String> load() {\n+                Map<Long, String> res = new HashMap<Long, String>();\n+                for (AccountPolicyTO policyTO :\n+                        policyRestClient.getAccountPolicies()) {\n+                    res.put(policyTO.getId(), policyTO.getDescription());\n+                }\n+                return res;\n+            }\n+        };\n+\n+        final WebMarkupContainer securityContainer =\n+                new WebMarkupContainer(\"security\");\n+\n+        securityContainer.setOutputMarkupId(true);\n+        add(securityContainer);\n+\n+        // -------------------------------\n+        // Password policy specification\n+        // -------------------------------\n+        final AjaxDropDownChoicePanel<Long> passwordPolicy =\n+                new AjaxDropDownChoicePanel<Long>(\n+                \"passwordPolicy\",\n+                getString(\"passwordPolicy\"),\n+                new PropertyModel(resourceTO, \"passwordPolicy\"),\n+                false);\n+\n+        passwordPolicy.setChoiceRenderer(\n+                new PolicyRenderer(PolicyType.PASSWORD));\n+\n+        passwordPolicy.setChoices(\n+                new ArrayList<Long>(passwordPolicies.getObject().keySet()));\n+\n+        ((DropDownChoice) passwordPolicy.getField()).setNullValid(true);\n+\n+        securityContainer.add(passwordPolicy);\n+        // -------------------------------\n+\n+        // -------------------------------\n+        // Account policy specification\n+        // -------------------------------\n+        final AjaxDropDownChoicePanel<Long> accountPolicy =\n+                new AjaxDropDownChoicePanel<Long>(\n+                \"accountPolicy\",\n+                getString(\"accountPolicy\"),\n+                new PropertyModel(resourceTO, \"accountPolicy\"),\n+                false);\n+\n+        accountPolicy.setChoiceRenderer(\n+                new PolicyRenderer(PolicyType.ACCOUNT));\n+\n+        accountPolicy.setChoices(\n+                new ArrayList<Long>(accountPolicies.getObject().keySet()));\n+\n+        ((DropDownChoice) accountPolicy.getField()).setNullValid(true);\n+\n+        securityContainer.add(accountPolicy);\n+        // -------------------------------\n+    }\n+\n+    private class PolicyRenderer extends ChoiceRenderer<Long> {\n+\n+        private static final long serialVersionUID = 8060500161321947000L;\n+\n+        private PolicyType type;\n+\n+        public PolicyRenderer(final PolicyType type) {\n+            super();\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public Object getDisplayValue(final Long object) {\n+            switch (type) {\n+                case ACCOUNT:\n+                    return accountPolicies.getObject().get(object);\n+                case PASSWORD:\n+                    return passwordPolicies.getObject().get(object);\n+                default:\n+                    return \"\";\n+            }\n+        }\n+\n+        @Override\n+        public String getIdValue(Long object, int index) {\n+            return String.valueOf(object != null ? object : 0L);\n+        }\n+    };\n+}"},{"sha":"8f9122bdd383e8855cb0939896bd647aef4d50e1","filename":"console/src/main/java/org/syncope/console/pages/panels/RoleSecurityPanel.java","status":"renamed","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -23,6 +23,7 @@\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.ChoiceRenderer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -38,13 +39,13 @@\n import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.types.PolicyType;\n \n-public class SecurityPanel extends Panel {\n+public class RoleSecurityPanel extends Panel {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG =\n-            LoggerFactory.getLogger(SecurityPanel.class);\n+            LoggerFactory.getLogger(RoleSecurityPanel.class);\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n@@ -55,7 +56,7 @@ public class SecurityPanel extends Panel {\n \n     IModel<Map<Long, String>> accountPolicies = null;\n \n-    public <T extends AbstractAttributableTO> SecurityPanel(\n+    public <T extends AbstractAttributableTO> RoleSecurityPanel(\n             final String id, final T entityTO) {\n \n         super(id);\n@@ -114,6 +115,8 @@ protected Map<Long, String> load() {\n         passwordPolicy.setChoices(\n                 new ArrayList<Long>(passwordPolicies.getObject().keySet()));\n \n+        ((DropDownChoice) passwordPolicy.getField()).setNullValid(true);\n+\n         securityContainer.add(passwordPolicy);\n \n         final AjaxCheckBoxPanel inhPasswordPolicy = new AjaxCheckBoxPanel(\n@@ -158,6 +161,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         accountPolicy.setChoices(\n                 new ArrayList<Long>(accountPolicies.getObject().keySet()));\n \n+        ((DropDownChoice) accountPolicy.getField()).setNullValid(true);\n+\n         securityContainer.add(accountPolicy);\n \n         final AjaxCheckBoxPanel inhAccountPolicy = new AjaxCheckBoxPanel(","previous_filename":"console/src/main/java/org/syncope/console/pages/panels/SecurityPanel.java"},{"sha":"3c4512a97b525682afd3b96a5b0e9704e056ce52","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxPasswordFieldPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -32,8 +32,8 @@ public AjaxPasswordFieldPanel(\n \n         super(id, name, model, active);\n \n-        field = new PasswordTextField(\"passwordField\",\n-                model).setResetPassword(false);\n+        field = new PasswordTextField(\n+                \"passwordField\", model).setResetPassword(false);\n \n         add(field.setLabel(new Model(name)).setOutputMarkupId(true));\n "},{"sha":"48acea1f92d7bd05b396eab1665e5383511031df","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.html","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.html?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -47,6 +47,7 @@\n                     <li  class=\"tabs-selected\"><a href=\"#resource\"><span><wicket:message key=\"resource\"/></span></a></li>\n                     <li><a href=\"#mappings\"><span><wicket:message key=\"mappings\"/></span></a></li>\n                     <li><a href=\"#connectorProperties\"><span><wicket:message key=\"connectorProperties\"/></span></a></li>\n+                    <li><a href=\"#security\"><span><wicket:message key=\"security\"/></span></a></li>\n                 </ul>\n                 <div id=\"resource\">\n                     <div id=\"formtable\">\n@@ -201,12 +202,14 @@\n                             </div>\n                         </div>\n                     </div>\n+\n                     <script type=\"text/javascript\">\n                         $(function() {\n                             $('div#mappings div#formtable div.tablerow:even').addClass(\"alt\");\n                         });\n                     </script>\n                 </div>\n+\n                 <div id=\"connectorProperties\">\n                     <span wicket:id=\"connectorPropertiesContainer\">\n                         <div id=\"formtable\">\n@@ -227,7 +230,18 @@\n                         </script>\n                     </span>\n                 </div>\n+\n+                <div id=\"security\">\n+                    <span wicket:id=\"security\">[security]</span>\n+                </div>\n+\n+                <script type=\"text/javascript\">\n+                    $(function() {\n+                        $('div#security div#formtable div.tablerow:even').addClass(\"alt\");\n+                    });\n+                </script>\n             </div>\n+\n             <div style=\"margin: 20px 10px 0\">\n                 <input type=\"submit\"\n                        class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\""},{"sha":"68b1e827542a6a0942462eb2471fc44cfa66ac35","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -1,6 +1,7 @@\n resource=Resource Details\n mappings=Schema Mappings\n connectorProperties=Connector properties\n+security=Security\n create_attribute=Create new resource\n required_alert=All form fields are required\n name=Name"},{"sha":"3e11acfbaaf0d0b01703e77a6d815bcc3b3cf8ca","filename":"console/src/main/resources/org/syncope/console/pages/ResourceModalPage_it.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -1,7 +1,8 @@\n resource=Dettagli Risorsa\n mappings=Schema Mapping\n+connectorProperties=Propriet\\u00e0\\u00a0 Connettore\n+security=Sicurezza\n \n-connectorProperties=Propriet\\u00c3\\u00a0 Connettore\n create_attribute=Crea nuova risorsa\n required_alert=Tutti i campi sono richiesti\n name=Nome"},{"sha":"b4aa76d294e7d3a786b7cc17ef8a062060d83d8e","filename":"console/src/main/resources/org/syncope/console/pages/UserModalPage.html","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.html?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -70,14 +70,19 @@\n \n                         <div class=\"tablerow\">\n                             <div class=\"tablecolumn_label short_dynamicsize\">\n-                                <wicket:message key=\"password\"/>\n+                                <wicket:message key=\"username\"/>\n                             </div>\n                             <div class=\"tablecolumn_field medium_dynamicsize\">\n-                                <input type=\"password\"\n-                                       class=\"ui-widget-content ui-corner-all\"\n-                                       size=\"40px\"\n-                                       wicket:id=\"password\"/>\n+                                <span wicket:id=\"username\" />\n+                            </div>\n+                        </div>\n \n+                        <div class=\"tablerow\">\n+                            <div class=\"tablecolumn_label short_dynamicsize\">\n+                                <wicket:message key=\"password\"/>\n+                            </div>\n+                            <div class=\"tablecolumn_field medium_dynamicsize\">\n+                                <span wicket:id=\"password\" />\n                                 <span wicket:id=\"mandatory_pwd\">*</span>\n                             </div>\n                         </div>"},{"sha":"64d8c538dea9f8be300999a4e7584258620380d4","filename":"console/src/main/resources/org/syncope/console/pages/UserModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -1,6 +1,7 @@\n required_alert=All form fields are required.\n title=User\n password=password\n+username=username\n firstname=Firstname\n surname=Surname\n tab1=Attributes"},{"sha":"b74703494fb4256efbd876bbab59023890f9e259","filename":"console/src/main/resources/org/syncope/console/pages/UserModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage_it.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -1,6 +1,7 @@\n required_alert=Tutti i campi sono obbligatori.\n title=Utente\n password=password\n+username=username\n firstname=Nome\n surname=Cognome\n tab1=Attributi"},{"sha":"564e6f565d58835214cc8cb3b471da6af0abfca8","filename":"console/src/main/resources/org/syncope/console/pages/Users.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -11,6 +11,7 @@ delete=Delete\n id=Id\n status=Status\n token=Token\n+username=Username\n change_attributes=Change display attributes\n tokenValued=Valued\n tokenNotValued=Not valued"},{"sha":"60d28d56d67b8ec97def7654d6f0d8b293a010f5","filename":"console/src/main/resources/org/syncope/console/pages/Users_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers_it.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -12,6 +12,7 @@ id=Id\n change_attributes=Gestisci attributi da visualizzare\n status=Stato\n token=Token\n+username=Username\n tokenValued=Impostato\n tokenNotValued=Non impostato\n search_title=Impostare i criteri di ricerca"},{"sha":"e3589ffbd4a9c1596712917bed0145ee8ae910d8","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResourceSecurityPanel.html","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.html?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -0,0 +1,41 @@\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ under the License.\n+-->\n+<html>\n+    <wicket:panel>\n+        <div id=\"formtable\" wicket:id=\"security\">\n+            <div class=\"tablerow\">\n+                <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <label for=\"passwordPolicy\"><wicket:message key=\"passwordPolicy\"/></label>\n+                </div>\n+                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"passwordPolicy\">\n+                        [panel for dynamic input type markup]\n+                    </span>\n+                </div>\n+            </div>\n+\n+            <div class=\"tablerow\">\n+                <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <label for=\"accountPolicy\"><wicket:message key=\"accountPolicy\"/></label>\n+                </div>\n+                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"accountPolicy\">\n+                        [panel for dynamic input type markup]\n+                    </span>\n+                </div>\n+            </div>\n+        </div>\n+    </wicket:panel>\n+</html>"},{"sha":"a613c7570f3e5489409c1aec6d9dd2bed6322892","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResourceSecurityPanel.properties","status":"added","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -0,0 +1,2 @@\n+passwordPolicy = Password Policy\n+accountPolicy = Account Policy\n\\ No newline at end of file"},{"sha":"7fb3b8922e27efb26c048c0c4d6b615fc12e064e","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResourceSecurityPanel_it.properties","status":"added","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel_it.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -0,0 +1,2 @@\n+passwordPolicy = Password Policy\n+accountPolicy = Account Policy"},{"sha":"199bd72bf8f9580bc55345f95af23897736ac907","filename":"console/src/main/resources/org/syncope/console/pages/panels/RoleSecurityPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.html?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","previous_filename":"console/src/main/resources/org/syncope/console/pages/panels/SecurityPanel.html"},{"sha":"f57845be10667bfab77d909e7dd1777818542d11","filename":"console/src/main/resources/org/syncope/console/pages/panels/RoleSecurityPanel.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","previous_filename":"console/src/main/resources/org/syncope/console/pages/panels/SecurityPanel.properties"},{"sha":"0057c02da57bc8261cab68885018fd779a47f5ad","filename":"console/src/main/resources/org/syncope/console/pages/panels/RoleSecurityPanel_it.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel_it.properties?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","previous_filename":"console/src/main/resources/org/syncope/console/pages/panels/SecurityPanel_it.properties"},{"sha":"b33561f45b2430b63ec90249347ece4b25ee6ec7","filename":"console/src/test/java/org/syncope/console/ResourceTestITCase.java","status":"modified","additions":38,"deletions":2,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FResourceTestITCase.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -52,7 +52,7 @@ public void browseEditModal() {\n \n         selenium.click(\"css=img[alt=\\\"Resources\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//td[2]/span/a\");\n+        selenium.click(\"//td[4]/span/a\");\n         for (int second = 0;; second++) {\n             if (second >= 60) {\n                 fail(\"timeout\");\n@@ -98,8 +98,44 @@ public void delete() {\n \n         selenium.click(\"css=img[alt=\\\"Resources\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//tr[4]/td[3]/span/a\");\n+        selenium.click(\"//tr[3]/td[5]/span/a\");\n         assertTrue(selenium.getConfirmation().matches(\n                 \"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n     }\n+\n+    @Test\n+    @SuppressWarnings(\"SleepWhileHoldingLock\")\n+    public void checkSecurityTab() {\n+        selenium.setSpeed(\"1000\");\n+\n+        selenium.click(\"css=img[alt=\\\"Resources\\\"]\");\n+        selenium.waitForPageToLoad(\"30000\");\n+        selenium.click(\"//td[4]/span/a\");\n+        for (int second = 0;; second++) {\n+            if (second >= 60) {\n+                fail(\"timeout\");\n+            }\n+            try {\n+                if (selenium.isElementPresent(\n+                        \"//form/div[2]/div/div/div/div/label[text()='Name']\")) {\n+                    break;\n+                }\n+            } catch (Exception e) {\n+            }\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+        }\n+\n+        selenium.click(\"//li[4]/a\");\n+\n+        assertTrue(selenium.isElementPresent(\"//label[@for='passwordPolicy']\"));\n+\n+        selenium.click(\"//li[1]/a\");\n+        selenium.click(\"//li[2]/a\");\n+        selenium.click(\"//li[3]/a\");\n+        \n+        selenium.click(\"css=a.w_close\");\n+    }\n }"},{"sha":"4ac5210ea4036d11cdbc58772e1d9924f199cfea","filename":"console/src/test/java/org/syncope/console/RoleTestITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FRoleTestITCase.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -104,7 +104,7 @@ public void checkSecurityTab() {\n \n         selenium.click(\"css=img[alt=\\\"Roles\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//div[9]/span/span/span/a[2]/span[2]\");\n+        selenium.click(\"//div[5]/span/span/span/a[2]/span[2]\");\n         selenium.click(\"//span[2]/span/span/span/a[2]\");\n \n         for (int second = 0;; second++) {\n@@ -131,13 +131,14 @@ public void checkSecurityTab() {\n         } catch (InterruptedException e) {\n         }\n \n-        assertTrue(selenium.isElementPresent(\"//div[@id='formtable']\"));\n+        assertTrue(selenium.isElementPresent(\"//label[@for='passwordPolicy']\"));\n \n         selenium.click(\"//div[@id='tabs']/ul/li[1]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[5]/a/span\");\n+\n         selenium.click(\"css=a.w_close\");\n         selenium.waitForPageToLoad(\"30000\");\n     }"},{"sha":"6b199b67cb831cffc17f00951784393f9813296b","filename":"console/src/test/java/org/syncope/console/UserTestITCase.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -56,7 +56,7 @@ public void browseEditModal() {\n \n         selenium.click(\"css=img[alt=\\\"Users\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//tr[3]/td[4]/span/a\");\n+        selenium.click(\"//tr[3]/td[5]/span/a\");\n \n         for (int second = 0;; second++) {\n             if (second >= 60) {\n@@ -75,12 +75,9 @@ public void browseEditModal() {\n             }\n         }\n \n-        assertEquals(\"testUsername\",\n-                selenium.getAttribute(\n-                \"//form/div[2]/div/div/span/div[3]/div[2]/span/input@value\"));\n-        assertEquals(\"Doe\",\n-                selenium.getAttribute(\n-                \"//form/div[2]/div/div/span/div[7]/div[2]/span/input@value\"));\n+        assertTrue(selenium.isElementPresent(\"//input[@value='testUsername']\"));\n+        assertTrue(selenium.isElementPresent(\"//input[@value='Doe']\"));\n+\n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");\n@@ -108,7 +105,7 @@ public void search() {\n     public void delete() {\n         selenium.click(\"css=img[alt=\\\"Users\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//tr[4]/td[5]/span/a\");\n+        selenium.click(\"//tr[4]/td[6]/span/a\");\n         assertTrue(selenium.getConfirmation().matches(\n                 \"^Do you really want to delete the selected item[\\\\s\\\\S]$\"));\n         try {"},{"sha":"b63e2d3c3d23d689eecb0df4096bba63d9c6a26d","filename":"core/pom.xml","status":"modified","additions":55,"deletions":8,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -81,7 +81,7 @@\n         </dependency>\n         <dependency>\n             <groupId>org.activiti</groupId>\n-            <artifactId>activiti-spring</artifactId>            \n+            <artifactId>activiti-spring</artifactId>\n         </dependency>\n \n         <dependency>\n@@ -478,9 +478,9 @@\n                             </executableDependency>\n                             <mainClass>org.h2.tools.Server</mainClass>\n                             <arguments>\n-                                <argument>-tcp</argument>    \n+                                <argument>-tcp</argument>\n                                 <argument>-tcpDaemon</argument>\n-                                <argument>-web</argument>    \n+                                <argument>-web</argument>\n                                 <argument>-webDaemon</argument>\n                                 <argument>-webPort</argument>\n                                 <argument>9082</argument>\n@@ -635,19 +635,66 @@\n         <profile>\n             <id>dev</id>\n             <properties>\n-                <maven.test.skip>true</maven.test.skip>\n+                <maven.test.skip>false</maven.test.skip>\n+                <waitForCheck>true</waitForCheck>\n+                <sureExcludes>nothingToExclude</sureExcludes>\n             </properties>\n             <dependencies>\n                 <dependency>\n                     <groupId>com.h2database</groupId>\n                     <artifactId>h2</artifactId>\n                     <scope>compile</scope>\n-                </dependency>    \n+                </dependency>\n             </dependencies>\n             <build>\n                 <defaultGoal>clean verify</defaultGoal>\n                 \n                 <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <inherited>true</inherited>\n+                        <configuration>\n+                            <skip>true</skip>\n+                        </configuration>\n+                        <executions>\n+                            <execution>\n+                                <id>test-phase-execution</id>\n+                                <phase>test</phase>\n+                                <goals>\n+                                    <goal>test</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <skip>false</skip>\n+                                    <includes>\n+                                        <include>**/dao/**Test.java</include>\n+                                    </includes>\n+                                    <excludes>\n+                                        <exclude>**/relationships/**Test.java</exclude>\n+                                        <exclude>${sureExcludes}</exclude>\n+                                    </excludes>\n+                                </configuration>\n+                            </execution>\n+                            <execution>\n+                                <id>relationship-test-execution</id>\n+                                <phase>test</phase>\n+                                <goals>\n+                                    <goal>test</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <skip>false</skip>\n+                                    <includes>\n+                                        <include>**/relationships/**Test.java</include>\n+                                    </includes>\n+                                    <excludes>\n+                                        <exclude>**/dao/**Test.java</exclude>\n+                                        <exclude>${sureExcludes}</exclude>\n+                                    </excludes>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+\n                     <plugin>\n                         <groupId>org.codehaus.mojo</groupId>\n                         <artifactId>build-helper-maven-plugin</artifactId>\n@@ -666,7 +713,7 @@\n                                 </configuration>\n                             </execution>\n                         </executions>\n-                    </plugin> \n+                    </plugin>\n                     <plugin>\n                         <groupId>org.codehaus.mojo</groupId>\n                         <artifactId>xml-maven-plugin</artifactId>\n@@ -685,7 +732,7 @@\n                                 <transformationSet>\n                                     <dir>src/main/webapp/WEB-INF</dir>\n                                     <includes>\n-                                        <include>web.xml</include>    \n+                                        <include>web.xml</include>\n                                     </includes>\n                                     <stylesheet>src/test/resources/webxml4dev.xsl</stylesheet>\n                                 </transformationSet>\n@@ -714,7 +761,7 @@\n                         <artifactId>cargo-maven2-plugin</artifactId>\n                         <inherited>true</inherited>\n                         <configuration>\n-                            <wait>true</wait>\n+                            <wait>${waitForCheck}</wait>\n                         </configuration>\n                     </plugin>\n                 </plugins>"},{"sha":"3e224be338007eecbad875d4c840cb1c8a432847","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -24,10 +24,9 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.MappedSuperclass;\n-import org.syncope.core.persistence.validation.entity.AttributableCheck;\n+import org.syncope.core.persistence.validation.entity.SyncopeUserCheck;\n \n @MappedSuperclass\n-@AttributableCheck\n public abstract class AbstractAttributable extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -4801685541488201119L;"},{"sha":"97983b443eb42bb9f83f420510456654f12b2143","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -21,13 +21,15 @@\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.jexl2.JexlContext;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.core.util.JexlUtil;\n \n @MappedSuperclass\n public abstract class AbstractDerAttr extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 4740924251090424771L;\n+\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n@@ -45,14 +47,36 @@ public Long getId() {\n     public String getValue(\n             final Collection<? extends AbstractAttr> attributes) {\n \n-        ConfigurableApplicationContext context =\n+        final ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n-        JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n+        final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n \n         // Prepare context using user attributes\n-        JexlContext jexlContext = jexlUtil.addAttributesToContext(\n+        final JexlContext jexlContext = jexlUtil.addAttributesToContext(\n                 attributes, null);\n \n+        final AbstractAttributable owner = getOwner();\n+        if (owner instanceof SyncopeUser) {\n+            jexlContext.set(\"username\",\n+                    ((SyncopeUser) owner).getUsername() != null\n+                    ? ((SyncopeUser) owner).getUsername() : \"\");\n+            jexlContext.set(\"creationDate\",\n+                    ((SyncopeUser) owner).getCreationDate() != null\n+                    ? ((SyncopeUser) owner).getDateFormatter().\n+                    format(((SyncopeUser) owner).getCreationDate()) : \"\");\n+            jexlContext.set(\"lastLoginDate\",\n+                    ((SyncopeUser) owner).getLastLoginDate() != null\n+                    ? ((SyncopeUser) owner).getDateFormatter().\n+                    format(((SyncopeUser) owner).getLastLoginDate()) : \"\");\n+            jexlContext.set(\"failedLogins\",\n+                    ((SyncopeUser) owner).getFailedLogins() != null\n+                    ? ((SyncopeUser) owner).getFailedLogins() : \"\");\n+            jexlContext.set(\"changePwdDate\",\n+                    ((SyncopeUser) owner).getChangePwdDate() != null\n+                    ? ((SyncopeUser) owner).getDateFormatter().\n+                    format(((SyncopeUser) owner).getChangePwdDate()) : \"\");\n+        }\n+\n         // Evaluate expression using the context prepared before\n         return jexlUtil.evaluate(\n                 getDerivedSchema().getExpression(), jexlContext);"},{"sha":"bfca7e2ce595736f6690839d6c510fbc138172dd","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":89,"deletions":1,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -21,13 +21,16 @@\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n import java.security.MessageDigest;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n+import java.util.TimeZone;\n import javax.crypto.Cipher;\n import javax.crypto.spec.SecretKeySpec;\n import javax.persistence.Cacheable;\n@@ -55,16 +58,21 @@\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.validation.entity.SyncopeUserCheck;\n import org.syncope.types.CipherAlgorithm;\n \n @Entity\n @Cacheable\n+@SyncopeUserCheck\n public class SyncopeUser extends AbstractAttributable {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n \n     private static SecretKeySpec keySpec;\n \n+    @Transient\n+    public static String FORMAT_DATE_ISO = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n+\n     static {\n         try {\n             keySpec = new SecretKeySpec(\n@@ -118,6 +126,40 @@ public class SyncopeUser extends AbstractAttributable {\n     @ElementCollection\n     private List<String> passwordHistory;\n \n+    /**\n+     * Subsequent failed logins.\n+     */\n+    @Column(nullable = true)\n+    private Integer failedLogins;\n+\n+    /**\n+     * Username/Login.\n+     */\n+    @Column(unique = true)\n+    @NotNull\n+    private String username;\n+\n+    /**\n+     * Last successful login date.\n+     */\n+    @Column(nullable = true)\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date lastLoginDate;\n+\n+    /**\n+     * Creation date.\n+     */\n+    @NotNull\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date creationDate;\n+\n+    /**\n+     * Change password date.\n+     */\n+    @Column(nullable = true)\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date changePwdDate;\n+\n     public SyncopeUser() {\n         super();\n \n@@ -365,14 +407,54 @@ public CipherAlgorithm getCipherAlgoritm() {\n         return cipherAlgorithm;\n     }\n \n-    public void setCipherAlgoritm(CipherAlgorithm cipherAlgoritm) {\n+    public void setCipherAlgoritm(final CipherAlgorithm cipherAlgoritm) {\n         this.cipherAlgorithm = cipherAlgoritm;\n     }\n \n     public List<String> getPasswordHistory() {\n         return passwordHistory;\n     }\n \n+    public Date getChangePwdDate() {\n+        return changePwdDate;\n+    }\n+\n+    public void setChangePwdDate(final Date changePwdDate) {\n+        this.changePwdDate = changePwdDate;\n+    }\n+\n+    public Date getCreationDate() {\n+        return creationDate;\n+    }\n+\n+    public void setCreationDate(final Date creationDate) {\n+        this.creationDate = creationDate;\n+    }\n+\n+    public Integer getFailedLogins() {\n+        return failedLogins;\n+    }\n+\n+    public void setFailedLogins(final Integer failedLogins) {\n+        this.failedLogins = failedLogins;\n+    }\n+\n+    public Date getLastLoginDate() {\n+        return lastLoginDate;\n+    }\n+\n+    public void setLastLoginDate(final Date lastLoginDate) {\n+        this.lastLoginDate = lastLoginDate;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n     private String encodePassword(\n             final String password, final CipherAlgorithm cipherAlgoritm)\n             throws NoSuchAlgorithmException,\n@@ -441,4 +523,10 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n             return false;\n         }\n     }\n+\n+    public DateFormat getDateFormatter() {\n+        final DateFormat format = new SimpleDateFormat(FORMAT_DATE_ISO);\n+        format.setTimeZone(TimeZone.getDefault());\n+        return format;\n+    }\n }"},{"sha":"c7fbb26639e9af6ca923e5850c04d1bebf9a6932","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -24,6 +24,8 @@\n @Entity\n public class UDerAttr extends AbstractDerAttr {\n \n+    private static final long serialVersionUID = 4723044452807292060L;\n+\n     @ManyToOne\n     private SyncopeUser owner;\n "},{"sha":"fd34a1e7b8c71a3c4e3895e861072c4aa0bef4fc","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerSchema.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -19,10 +19,14 @@\n import javax.persistence.Entity;\n import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n+import org.syncope.core.persistence.validation.entity.USchemaCheck;\n \n @Entity\n+@USchemaCheck\n public class UDerSchema extends AbstractDerSchema {\n \n+    private static final long serialVersionUID = 6244467775394201229L;\n+\n     @OneToMany(mappedBy = \"derivedSchema\")\n     private List<UDerAttr> derivedAttributes;\n "},{"sha":"263ccf803ac8f02ac7b06b28e4e59eea53bbf580","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/USchema.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -17,8 +17,12 @@\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.validation.entity.USchemaCheck;\n \n @Entity\n @Cacheable\n+@USchemaCheck\n public class USchema extends AbstractSchema {\n+\n+    private static final long serialVersionUID = -2776513645999914610L;\n }"},{"sha":"91823c9ad02419fd429f6d851bbe78c0ff5cbd5b","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UVirSchema.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -18,8 +18,12 @@\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.syncope.core.persistence.validation.entity.USchemaCheck;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@USchemaCheck\n public class UVirSchema extends AbstractVirSchema {\n+\n+    private static final long serialVersionUID = 1089308700791426201L;\n }"},{"sha":"6f6f8d9cd25c2baf20050016d61a38a37c7392d7","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -25,6 +25,8 @@ public interface UserDAO extends DAO {\n \n     SyncopeUser find(Long id);\n \n+    SyncopeUser find(String username);\n+\n     SyncopeUser findByWorkflowId(String workflowId);\n \n     List<SyncopeUser> findByDerAttrValue(String schemaName, String value)"},{"sha":"98019be5b6fda6efe97913be3406d4c5d09d6634","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -114,7 +114,8 @@ public void deleteMappings(final String intAttrName,\n             final IntMappingType intMappingType) {\n \n         if (intMappingType == IntMappingType.SyncopeUserId\n-                || intMappingType == IntMappingType.Password) {\n+                || intMappingType == IntMappingType.Password\n+                || intMappingType == IntMappingType.Username) {\n \n             return;\n         }"},{"sha":"919b2cb6b375bac70a2254d83a13983114b6828c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -75,6 +75,22 @@ public SyncopeUser find(final Long id) {\n         }\n     }\n \n+    @Override\n+    public SyncopeUser find(final String username) {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + SyncopeUser.class.getSimpleName() + \" e \"\n+                + \"WHERE e.username = :username\");\n+        query.setHint(\"javax.persistence.cache.retrieveMode\",\n+                CacheRetrieveMode.USE);\n+        query.setParameter(\"username\", username);\n+\n+        try {\n+            return (SyncopeUser) query.getSingleResult();\n+        } catch (NoResultException e) {\n+            return null;\n+        }\n+    }\n+\n     @Override\n     public SyncopeUser findByWorkflowId(final String workflowId) {\n         Query query = entityManager.createQuery("},{"sha":"8fe6502ad17ca5e9ad94bb4f0f2c028572c34c7f","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":19,"deletions":8,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -427,20 +427,31 @@ private Map.Entry<String, Attribute> prepareAttribute(\n                             mapping.getIntMappingType(), values});\n                 break;\n \n-            case SyncopeUserId:\n-            case Password:\n+\n+            case Username:\n                 schema = null;\n                 schemaType = SchemaType.String;\n \n                 attrValue = new UAttrValue();\n-                if (IntMappingType.SyncopeUserId\n-                        == mapping.getIntMappingType()) {\n+                attrValue.setStringValue(user.getUsername());\n \n-                    attrValue.setStringValue(user.getId().toString());\n-                }\n-                if (IntMappingType.Password\n-                        == mapping.getIntMappingType() && password != null) {\n+                values = Collections.singletonList(attrValue);\n+                break;\n+\n+            case SyncopeUserId:\n+                schema = null;\n+                schemaType = SchemaType.String;\n+                attrValue = new UAttrValue();\n+                attrValue.setStringValue(user.getId().toString());\n+                values = Collections.singletonList(attrValue);\n+                break;\n+\n+            case Password:\n+                schema = null;\n+                schemaType = SchemaType.String;\n+                attrValue = new UAttrValue();\n \n+                if (password != null) {\n                     attrValue.setStringValue(password);\n                 }\n "},{"sha":"f949f1432d6fb13ebf350ef6c40fbd22c960a00a","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrValueValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -79,7 +79,8 @@ public boolean isValid(final AbstractAttrValue object,\n \n                     context.disableDefaultConstraintViolation();\n                     context.buildConstraintViolationWithTemplate(\n-                            EntityViolationType.InvalidSchema.toString()).\n+                            EntityViolationType.valueOf(\"Invalid\"\n+                            + attrSchema.getClass().getSimpleName()).toString()).\n                             addNode(object.getClass().getSimpleName()\n                             + \"[\" + object.getId() + \"].schema=\"\n                             + uniqueValueSchema"},{"sha":"639d34814fa3f80d4fadf6fb72094d2f4f690b2f","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableValidator.java","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/12fce01860c698c52b00efdf1effeedfafebdfae/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/12fce01860c698c52b00efdf1effeedfafebdfae/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java?ref=12fce01860c698c52b00efdf1effeedfafebdfae","patch":"@@ -1,131 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.persistence.validation.entity;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.validation.ConstraintValidator;\n-import javax.validation.ConstraintValidatorContext;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.Policy;\n-import org.syncope.core.persistence.beans.ExternalResource;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.PolicyDAO;\n-import org.syncope.core.policy.PasswordPolicyEnforcer;\n-import org.syncope.core.policy.PolicyEvaluator;\n-import org.syncope.types.EntityViolationType;\n-import org.syncope.types.PasswordPolicySpec;\n-\n-public class AttributableValidator extends AbstractValidator\n-        implements ConstraintValidator<AttributableCheck, AbstractAttributable> {\n-\n-    @Autowired\n-    private PolicyDAO policyDAO;\n-\n-    @Autowired\n-    private PolicyEvaluator evaluator;\n-\n-    @Autowired\n-    private PasswordPolicyEnforcer enforcer;\n-\n-    @Override\n-    public void initialize(final AttributableCheck constraintAnnotation) {\n-    }\n-\n-    @Override\n-    public boolean isValid(\n-            final AbstractAttributable object,\n-            final ConstraintValidatorContext context) {\n-\n-        boolean isValid = true;\n-        context.disableDefaultConstraintViolation();\n-\n-        if (object instanceof SyncopeUser) {\n-            // ------------------------------\n-            // Verify password policy\n-            // ------------------------------\n-            LOG.debug(\"Password Policy enforcement\");\n-\n-            final List<Policy> policies =\n-                    getPasswordPolicies((SyncopeUser) object);\n-\n-            try {\n-                for (Policy policy : policies) {\n-                    // clearPassword must exist during creation/password update\n-                    final String password =\n-                            ((SyncopeUser) object).getClearPassword();\n-\n-                    // evaluate/enforce only during creation or password update\n-                    if (password != null) {\n-                        // evaluate policy\n-                        final PasswordPolicySpec passwordPolicy =\n-                                evaluator.evaluate(policy, object);\n-\n-                        // enforce policy\n-                        enforcer.enforce(\n-                                passwordPolicy, policy.getType(), password);\n-                    }\n-                }\n-            } catch (Exception e) {\n-                LOG.debug(\"Invalid password\");\n-\n-                context.buildConstraintViolationWithTemplate(\n-                        e.getMessage()).addNode(\n-                        EntityViolationType.InvalidPassword.toString()).\n-                        addConstraintViolation();\n-                isValid = false;\n-            } finally {\n-                // password has been validated, let's remove its\n-                // clear version\n-                ((SyncopeUser) object).removeClearPassword();\n-            }\n-            // ------------------------------\n-        }\n-\n-        // Let's verify other policies ....\n-        return isValid;\n-    }\n-\n-    private List<Policy> getPasswordPolicies(final SyncopeUser user) {\n-        final List<Policy> policies = new ArrayList<Policy>();\n-\n-        // Add global policy\n-        Policy policy = policyDAO.getGlobalPasswordPolicy();\n-\n-        if (policy != null) {\n-            policies.add(policy);\n-        }\n-\n-        // add resource policies\n-        for (ExternalResource resource : user.getExternalResources()) {\n-            policy = resource.getPasswordPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n-\n-        // add role policies\n-        for (SyncopeRole role : user.getRoles()) {\n-            policy = role.getPasswordPolicy();\n-            if (policy != null) {\n-                policies.add(policy);\n-            }\n-        }\n-\n-        return policies;\n-    }\n-}"},{"sha":"c60987fb292898a41f42ea5622e4c1d8523af3a7","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchemaMappingValidator.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -49,6 +49,8 @@ public boolean isValid(\n                 && IntMappingType.SyncopeUserId\n                 != object.getIntMappingType()\n                 && IntMappingType.Password\n+                != object.getIntMappingType()\n+                && IntMappingType.Username\n                 != object.getIntMappingType()) {\n             context.buildConstraintViolationWithTemplate(\n                     \"Missing source attribute name\").addNode("},{"sha":"907869214444adb18916863840f569ab470e7b64","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchemaValidator.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -38,7 +38,8 @@ public boolean isValid(final AbstractSchema object,\n             if (object == null) {\n                 isValid = true;\n             } else {\n-                isValid = !object.getType().equals(SchemaType.Enum)\n+                isValid = object.getType() == null\n+                        || !object.getType().equals(SchemaType.Enum)\n                         || object.getEnumerationValues() != null;\n \n                 if (!isValid) {\n@@ -64,7 +65,7 @@ public boolean isValid(final AbstractSchema object,\n \n             return isValid;\n         } catch (Exception e) {\n-            LOG.error(e.getMessage());\n+            LOG.error(\"Error saving schema\", e);\n \n             context.disableDefaultConstraintViolation();\n             context.buildConstraintViolationWithTemplate("},{"sha":"8d7fadb16535aa1b8173c3178ffd11bfbec4f004","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncopeUserCheck.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -26,9 +26,9 @@\n     ElementType.TYPE\n })\n @Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = AttributableValidator.class)\n+@Constraint(validatedBy = SyncopeUserValidator.class)\n @Documented\n-public @interface AttributableCheck {\n+public @interface SyncopeUserCheck {\n \n     String message() default \"{org.syncope.core.validation.attributable}\";\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableCheck.java"},{"sha":"dc01a21febd8e6067f8c3dc6f592d52c8a9bb477","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"added","additions":196,"deletions":0,"changes":196,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -0,0 +1,196 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.ExternalResource;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n+import org.syncope.core.policy.PasswordPolicyEnforcer;\n+import org.syncope.core.policy.PolicyEvaluator;\n+import org.syncope.types.EntityViolationType;\n+import org.syncope.types.PasswordPolicySpec;\n+\n+public class SyncopeUserValidator extends AbstractValidator\n+        implements ConstraintValidator<SyncopeUserCheck, AbstractAttributable> {\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private PolicyEvaluator evaluator;\n+\n+    @Autowired\n+    private PasswordPolicyEnforcer enforcer;\n+\n+    @Override\n+    public void initialize(final SyncopeUserCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(\n+            final AbstractAttributable object,\n+            final ConstraintValidatorContext context) {\n+\n+        context.disableDefaultConstraintViolation();\n+        // ------------------------------\n+        // Verify password policies\n+        // ------------------------------\n+        LOG.debug(\"Password Policy enforcement\");\n+\n+        final List<PasswordPolicy> passwordPolicies =\n+                getPasswordPolicies((SyncopeUser) object);\n+\n+        try {\n+            for (Policy policy : passwordPolicies) {\n+                // clearPassword must exist during creation/password update\n+                final String password =\n+                        ((SyncopeUser) object).getClearPassword();\n+\n+                // evaluate/enforce only during creation or password update\n+                if (password != null) {\n+                    // evaluate policy\n+                    final PasswordPolicySpec passwordPolicy =\n+                            evaluator.evaluate(policy, object);\n+\n+                    // enforce policy\n+                    enforcer.enforce(\n+                            passwordPolicy, policy.getType(), password);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(\"Invalid password\");\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    e.getMessage()).addNode(\n+                    EntityViolationType.InvalidPassword.toString()).\n+                    addConstraintViolation();\n+\n+            return false;\n+        } finally {\n+            // password has been validated, let's remove its\n+            // clear version\n+            ((SyncopeUser) object).removeClearPassword();\n+        }\n+        // ------------------------------\n+\n+        // ------------------------------\n+        // Verify account policies\n+        // ------------------------------\n+        LOG.debug(\"Password Policy enforcement\");\n+\n+        final List<AccountPolicy> accountPolicies =\n+                getAccountPolicies((SyncopeUser) object);\n+\n+        try {\n+            // username missed\n+//                for (Policy policy : accountPolicies) {\n+//                        // evaluate policy\n+//                        final PasswordPolicySpec passwordPolicy =\n+//                                evaluator.evaluate(policy, object);\n+//\n+//                        // enforce policy\n+//                        enforcer.enforce(\n+//                                passwordPolicy, policy.getType(), password);\n+//                }\n+        } catch (Exception e) {\n+            LOG.debug(\"Invalid username\");\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    e.getMessage()).addNode(\n+                    EntityViolationType.InvalidPassword.toString()).\n+                    addConstraintViolation();\n+\n+            return false;\n+        } finally {\n+            // password has been validated, let's remove its\n+            // clear version\n+            ((SyncopeUser) object).removeClearPassword();\n+        }\n+        // ------------------------------\n+\n+        // Let's verify other policies ....\n+        return true;\n+    }\n+\n+    private List<PasswordPolicy> getPasswordPolicies(final SyncopeUser user) {\n+        final List<PasswordPolicy> policies = new ArrayList<PasswordPolicy>();\n+\n+        // Add global policy\n+        PasswordPolicy policy =\n+                (PasswordPolicy) policyDAO.getGlobalPasswordPolicy();\n+\n+        if (policy != null) {\n+            policies.add(policy);\n+        }\n+\n+        // add resource policies\n+        for (ExternalResource resource : user.getExternalResources()) {\n+            policy = (PasswordPolicy) resource.getPasswordPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        // add role policies\n+        for (SyncopeRole role : user.getRoles()) {\n+            policy = (PasswordPolicy) role.getPasswordPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        return policies;\n+    }\n+\n+    private List<AccountPolicy> getAccountPolicies(final SyncopeUser user) {\n+        final List<AccountPolicy> policies = new ArrayList<AccountPolicy>();\n+\n+        // Add global policy\n+        AccountPolicy policy =\n+                (AccountPolicy) policyDAO.getGlobalAccountPolicy();\n+\n+        if (policy != null) {\n+            policies.add(policy);\n+        }\n+\n+        // add resource policies\n+        for (ExternalResource resource : user.getExternalResources()) {\n+            policy = (AccountPolicy) resource.getAccountPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        // add role policies\n+        for (SyncopeRole role : user.getRoles()) {\n+            policy = (AccountPolicy) role.getAccountPolicy();\n+            if (policy != null) {\n+                policies.add(policy);\n+            }\n+        }\n+\n+        return policies;\n+    }\n+}"},{"sha":"820d8c807a89ff02dcec4d66675692ecc8096db7","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/USchemaCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaCheck.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = USchemaValidator.class)\n+@Documented\n+public @interface USchemaCheck {\n+\n+    String message() default \"{org.syncope.core.validation.schema}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"958a35aaf7a04fde824708024ebc19b46d119d82","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/USchemaValidator.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FUSchemaValidator.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.persistence.Transient;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n+import org.syncope.core.persistence.beans.user.UVirSchema;\n+import org.syncope.types.EntityViolationType;\n+\n+public class USchemaValidator extends AbstractValidator\n+        implements ConstraintValidator<USchemaCheck, Object> {\n+\n+    @Transient\n+    private static List<String> PERMITTED_USCHEMA_NAMES =\n+            Arrays.asList(new String[]{\n+                \"failedLogins\",\n+                \"username\",\n+                \"password\",\n+                \"lastLoginDate\",\n+                \"creationDate\",\n+                \"changePwdDate\"});\n+\n+    @Override\n+    public void initialize(final USchemaCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final Object object,\n+            final ConstraintValidatorContext context) {\n+\n+        EntityViolationType violation = null;\n+\n+        try {\n+            if (object != null) {\n+                final String schemaName;\n+\n+                if (object instanceof USchema) {\n+                    schemaName = ((USchema) object).getName();\n+                    violation = EntityViolationType.InvalidUSchema;\n+                } else if (object instanceof UDerSchema) {\n+                    schemaName = ((UDerSchema) object).getName();\n+                    violation = EntityViolationType.InvalidUDerSchema;\n+                } else if (object instanceof UVirSchema) {\n+                    schemaName = ((UVirSchema) object).getName();\n+                    violation = EntityViolationType.InvalidUVirSchema;\n+                } else {\n+                    schemaName = null;\n+                }\n+\n+                if (PERMITTED_USCHEMA_NAMES.contains(schemaName)) {\n+                    throw new Exception(\"Schema name not permitted\");\n+                }\n+            }\n+\n+            return true;\n+        } catch (Exception e) {\n+            LOG.error(\"Error saving schema\", e);\n+\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    violation.toString()).\n+                    addNode(object.toString()).\n+                    addConstraintViolation();\n+\n+            return false;\n+        }\n+    }\n+}"},{"sha":"a71b85d19ffe2303e99e6407fd3e668cc070b2c6","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -50,9 +50,8 @@ public SchemaTO create(final HttpServletResponse response,\n             @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException {\n \n-        AbstractSchema schema = schemaDataBinder.create(schemaTO,\n-                getAttributableUtil(kind).newSchema(),\n-                getAttributableUtil(kind).derivedSchemaClass());\n+        AbstractSchema schema = schemaDataBinder.create(\n+                schemaTO, getAttributableUtil(kind).newSchema());\n \n         schema = schemaDAO.save(schema);\n "},{"sha":"f6728e4e401dd06fab12f428235c974c2e8106fa","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -236,6 +236,11 @@ private SchemaMapping getSchemaMapping(ExternalResource resource,\n                             IntMappingType.Password.toString());\n                     break;\n \n+                case Username:\n+                    mappingTO.setIntAttrName(\n+                            IntMappingType.Username.toString());\n+                    break;\n+\n                 default:\n                     requiredValuesMissing.addElement(\"intAttrName\");\n             }"},{"sha":"28d5b434e8614bad9df89210af98aeb4910e24cf","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -54,7 +54,6 @@ public class SchemaDataBinder {\n     private <T extends AbstractDerSchema> AbstractSchema populate(\n             final AbstractSchema schema,\n             final SchemaTO schemaTO,\n-            final Class<T> derivedReference,\n             final SyncopeClientCompositeErrorException scce)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -88,11 +87,10 @@ private <T extends AbstractDerSchema> AbstractSchema populate(\n \n     public <T extends AbstractDerSchema> AbstractSchema create(\n             final SchemaTO schemaTO,\n-            AbstractSchema schema,\n-            final Class<T> derivedReference)\n+            AbstractSchema schema)\n             throws SyncopeClientCompositeErrorException {\n \n-        return populate(schema, schemaTO, derivedReference,\n+        return populate(schema, schemaTO,\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST));\n     }\n@@ -107,8 +105,7 @@ public <T extends AbstractDerSchema> AbstractSchema update(\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n-        schema = populate(schema, schemaTO,\n-                attributableUtil.derivedSchemaClass(), scce);\n+        schema = populate(schema, schemaTO, scce);\n \n         boolean validationExceptionFound = false;\n         AbstractAttr attribute;\n@@ -135,7 +132,8 @@ public <T extends AbstractDerSchema> AbstractSchema update(\n \n         if (validationExceptionFound) {\n             SyncopeClientException e = new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidSchema);\n+                    SyncopeClientExceptionType.valueOf(\n+                    \"Invalid\" + schema.getClass().getSimpleName()));\n             e.addElement(schema.getName());\n \n             scce.addException(e);"},{"sha":"3ef288e0f63e08266e9516ed142d398676b16fe0","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":47,"deletions":25,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -14,11 +14,13 @@\n  */\n package org.syncope.core.rest.data;\n \n+import java.util.Date;\n import org.syncope.core.util.AttributableUtil;\n import java.util.HashSet;\n import java.util.Set;\n import javassist.NotFoundException;\n import org.apache.commons.lang.StringUtils;\n+import org.springframework.beans.BeanUtils;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -53,6 +55,13 @@\n })\n public class UserDataBinder extends AbstractAttributableDataBinder {\n \n+    private static final String[] IGNORE_USER_PROPERTIES = {\n+        \"memberships\",\n+        \"attributes\",\n+        \"derivedAttributes\",\n+        \"virtualAttributes\",\n+        \"resources\"};\n+\n     @Transactional(readOnly = true)\n     public SyncopeUser getUserFromId(final Long userId)\n             throws NotFoundException, UnauthorizedRoleException {\n@@ -80,24 +89,6 @@ public void create(final SyncopeUser user, final UserTO userTO)\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n-        // password\n-        int passwordHistorySize = 0;\n-\n-        try {\n-            Policy policy = policyDAO.getGlobalPasswordPolicy();\n-            PasswordPolicySpec passwordPolicy = policy.getSpecification();\n-            passwordHistorySize = passwordPolicy.getHistoryLength();\n-        } catch (Throwable ignore) {\n-            // ignore exceptions\n-        }\n-\n-        if (userTO.getPassword() == null || userTO.getPassword().isEmpty()) {\n-            LOG.error(\"No password provided\");\n-        } else {\n-            user.setPassword(userTO.getPassword(), getCipherAlgoritm(),\n-                    passwordHistorySize);\n-        }\n-\n         // memberships\n         SyncopeRole role;\n         for (MembershipTO membershipTO : userTO.getMemberships()) {\n@@ -130,6 +121,30 @@ public void create(final SyncopeUser user, final UserTO userTO)\n \n         // attributes, derived attributes, virtual attributes and resources\n         fill(user, userTO, AttributableUtil.USER, scce);\n+\n+        // set password\n+        int passwordHistorySize = 0;\n+\n+        try {\n+            Policy policy = policyDAO.getGlobalPasswordPolicy();\n+            PasswordPolicySpec passwordPolicy = policy.getSpecification();\n+            passwordHistorySize = passwordPolicy.getHistoryLength();\n+        } catch (Throwable ignore) {\n+            // ignore exceptions\n+        }\n+\n+        if (userTO.getPassword() == null || userTO.getPassword().isEmpty()) {\n+            LOG.error(\"No password provided\");\n+        } else {\n+            user.setPassword(userTO.getPassword(), getCipherAlgoritm(),\n+                    passwordHistorySize);\n+        }\n+\n+        // set username\n+        user.setUsername(userTO.getUsername());\n+\n+        // set creation date (at execution time)\n+        user.setCreationDate(new Date());\n     }\n \n     /**\n@@ -169,8 +184,18 @@ public PropagationByResource update(final SyncopeUser user,\n \n             user.setPassword(userMod.getPassword(), getCipherAlgoritm(),\n                     passwordHistorySize);\n-            propByRes.addAll(PropagationOperation.UPDATE,\n-                    user.getExternalResources());\n+\n+            user.setChangePwdDate(new Date());\n+\n+            propByRes.addAll(\n+                    PropagationOperation.UPDATE, user.getExternalResources());\n+        }\n+\n+        // username\n+        if (userMod.getUsername() != null) {\n+            user.setUsername(userMod.getUsername());\n+            propByRes.addAll(\n+                    PropagationOperation.UPDATE, user.getExternalResources());\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n@@ -309,11 +334,8 @@ public UserTO getUserTO(final Long userId) {\n         SyncopeUser user = userDAO.find(userId);\n \n         UserTO userTO = new UserTO();\n-        userTO.setId(user.getId());\n-        userTO.setToken(user.getToken());\n-        userTO.setTokenExpireTime(user.getTokenExpireTime());\n-        userTO.setPassword(user.getPassword());\n-        userTO.setStatus(user.getStatus());\n+\n+        BeanUtils.copyProperties(user, userTO, IGNORE_USER_PROPERTIES);\n \n         fillTO(userTO,\n                 user.getAttributes(),"},{"sha":"56bb7027041afdb68fe175af34128296bc13e00b","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -196,6 +196,12 @@ private UserTO getUserTO(final ConnectorObject obj,\n                             ? Collections.EMPTY_LIST : attribute.getValue()));\n                     break;\n \n+                case Username:\n+                    userTO.setUsername(\n+                            attribute == null || attribute.getValue().isEmpty()\n+                            ? null : attribute.getValue().get(0).toString());\n+                    break;\n+\n                 case UserSchema:\n                     attributeTO = new AttributeTO();\n                     attributeTO.setSchema(mapping.getIntAttrName());\n@@ -265,6 +271,12 @@ private UserMod getUserMod(final Long userId, final ConnectorObject obj,\n                             ? Collections.EMPTY_LIST : attribute.getValue()));\n                     break;\n \n+                case Username:\n+                    if (values != null && !values.isEmpty()) {\n+                        userMod.setUsername(values.get(0).toString());\n+                    }\n+                    break;\n+\n                 case UserSchema:\n                     userMod.addAttributeToBeRemoved(\n                             mapping.getIntAttrName());"},{"sha":"099832181b6dac41f237f151a83bc3b646bedaa1","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.security;\n \n+import java.util.Date;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -23,6 +24,7 @@\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.types.CipherAlgorithm;\n@@ -72,11 +74,13 @@ public void setSyncopeUserDetailsService(\n     }\n \n     @Override\n+    @Transactional(rollbackFor = {Throwable.class})\n     public Authentication authenticate(final Authentication authentication)\n             throws AuthenticationException {\n \n         boolean authenticated;\n         SyncopeUser passwordUser = new SyncopeUser();\n+        SyncopeUser user = null;\n \n         if (adminUser.equals(authentication.getPrincipal())) {\n             passwordUser.setPassword(\n@@ -86,18 +90,19 @@ public Authentication authenticate(final Authentication authentication)\n             authenticated = adminMD5Password.equalsIgnoreCase(\n                     passwordUser.getPassword());\n         } else {\n-            Long id;\n+            String username;\n             try {\n-                id = Long.valueOf(authentication.getPrincipal().toString());\n+                username = authentication.getPrincipal().toString();\n             } catch (NumberFormatException e) {\n                 throw new UsernameNotFoundException(\n-                        \"Invalid user id: \" + authentication.getName(), e);\n+                        \"Invalid username: \" + authentication.getName(), e);\n             }\n \n-            SyncopeUser user = userDAO.find(id);\n+            user = userDAO.find(username);\n+\n             if (user == null) {\n                 throw new UsernameNotFoundException(\n-                        \"Could not find any user with id \" + id);\n+                        \"Could not find user \" + username);\n             }\n \n             passwordUser.setPassword(\n@@ -122,9 +127,21 @@ public Authentication authenticate(final Authentication authentication)\n \n             LOG.debug(\"User {} authenticated with roles {}\",\n                     authentication.getPrincipal(), token.getAuthorities());\n+\n+            if (user != null) {\n+                user.setLastLoginDate(new Date());\n+                user.setFailedLogins(0);\n+                userDAO.save(user);\n+            }\n+\n         } else {\n             result = authentication;\n \n+            if (user != null) {\n+                user.setFailedLogins(user.getFailedLogins() + 1);\n+                userDAO.save(user);\n+            }\n+\n             LOG.debug(\"User {} not authenticated\",\n                     authentication.getPrincipal());\n         }"},{"sha":"136a0664d9b51ce380b1b0fa5f033434811e9c6a","filename":"core/src/main/java/org/syncope/core/security/SyncopeUserDetailsService.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -65,18 +65,11 @@ public UserDetails loadUserByUsername(final String username)\n                         new GrantedAuthorityImpl(entitlement.getName()));\n             }\n         } else {\n-            Long id;\n-            try {\n-                id = Long.valueOf(username);\n-            } catch (NumberFormatException e) {\n-                throw new UsernameNotFoundException(\n-                        \"Invalid user id: \" + username, e);\n-            }\n+            final SyncopeUser user = userDAO.find(username);\n \n-            SyncopeUser user = userDAO.find(id);\n             if (user == null) {\n                 throw new UsernameNotFoundException(\n-                        \"Could not find any user with id \" + id);\n+                        \"Could not find any user with id \" + username);\n             }\n \n             // Give entitlements based on roles owned by user,"},{"sha":"ba7058ff7b63c6d4b7a5a5b42cb97af58a11b29b","filename":"core/src/main/java/org/syncope/core/util/JexlUtil.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -29,6 +29,7 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n /**\n  * @see http://commons.apache.org/jexl/reference/index.html\n@@ -86,6 +87,30 @@ public String evaluate(final String expression,\n \n         final JexlContext jexlContext = new MapContext();\n \n+        if (attributable instanceof SyncopeUser) {\n+            jexlContext.set(\"username\",\n+                    ((SyncopeUser) attributable).getUsername() != null\n+                    ? ((SyncopeUser) attributable).getUsername() : \"\");\n+            jexlContext.set(\"creationDate\",\n+                    ((SyncopeUser) attributable).getCreationDate() != null\n+                    ? ((SyncopeUser) attributable).getDateFormatter().\n+                    format(((SyncopeUser) attributable).getCreationDate())\n+                    : \"\");\n+            jexlContext.set(\"lastLoginDate\",\n+                    ((SyncopeUser) attributable).getLastLoginDate() != null\n+                    ? ((SyncopeUser) attributable).getDateFormatter().\n+                    format(((SyncopeUser) attributable).getLastLoginDate())\n+                    : \"\");\n+            jexlContext.set(\"failedLogins\",\n+                    ((SyncopeUser) attributable).getFailedLogins() != null\n+                    ? ((SyncopeUser) attributable).getFailedLogins() : \"\");\n+            jexlContext.set(\"changePwdDate\",\n+                    ((SyncopeUser) attributable).getChangePwdDate() != null\n+                    ? ((SyncopeUser) attributable).getDateFormatter().\n+                    format(((SyncopeUser) attributable).getChangePwdDate())\n+                    : \"\");\n+        }\n+\n         addAttributesToContext(\n                 attributable.getAttributes(),\n                 jexlContext);"},{"sha":"b6ea058f27576ab9ee6bd37ea6e44385db3188bb","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -30,7 +30,7 @@\n                 mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>\n                \n-    <UDerSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n+    <UDerSchema name=\"fullname\" expression=\"firstname + '.' + surname\"/>\n \n     <SyncopeRole id=\"0\" name=\"/\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\" inheritVirtualAttributes=\"0\"/>\n "},{"sha":"0dec3d2316676b963c3c9e2ab3faa2f539348c41","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -160,16 +160,16 @@ public final void validateAndSave() {\n                 userSchemaDAO.find(\"email\", USchema.class);\n         assertNotNull(emailSchema);\n \n-        final USchema usernameSchema =\n-                userSchemaDAO.find(\"username\", USchema.class);\n-        assertNotNull(usernameSchema);\n+        final USchema fullnameSchema =\n+                userSchemaDAO.find(\"fullname\", USchema.class);\n+        assertNotNull(fullnameSchema);\n \n         UAttr attribute = new UAttr();\n         attribute.setSchema(emailSchema);\n \n         UAttrUniqueValue uauv = new UAttrUniqueValue();\n         uauv.setAttribute(attribute);\n-        uauv.setSchema(usernameSchema);\n+        uauv.setSchema(fullnameSchema);\n         uauv.setStringValue(\"a value\");\n \n         attribute.setUniqueValue(uauv);\n@@ -184,7 +184,7 @@ public final void validateAndSave() {\n         // for attribute\n         assertTrue(iee.hasViolation(EntityViolationType.InvalidValueList));\n         // for uauv\n-        assertTrue(iee.hasViolation(EntityViolationType.InvalidSchema));\n+        assertTrue(iee.hasViolation(EntityViolationType.InvalidUSchema));\n     }\n \n     @Test"},{"sha":"f4ead46526badd3bdf243ae8a059f5e8ab3d6cb0","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -82,7 +82,7 @@ public final void findAllByPriority() {\n     public final void getAccountId() {\n         SchemaMapping mapping = resourceDAO.getMappingForAccountId(\n                 \"ws-target-resource-2\");\n-        assertEquals(\"username\", mapping.getIntAttrName());\n+        assertEquals(\"fullname\", mapping.getIntAttrName());\n     }\n \n     @Test\n@@ -96,7 +96,7 @@ public final void save() {\n         accountId.setResource(resource);\n         accountId.setAccountid(true);\n         accountId.setExtAttrName(\"username\");\n-        accountId.setIntAttrName(\"username\");\n+        accountId.setIntAttrName(\"fullname\");\n         accountId.setIntMappingType(IntMappingType.SyncopeUserId);\n \n         resource.addMapping(accountId);\n@@ -145,14 +145,14 @@ public final void saveInvalidMappingExtAttr() {\n         SchemaMapping mapping = new SchemaMapping();\n         mapping.setResource(resource);\n         mapping.setAccountid(true);\n-        mapping.setIntAttrName(\"username\");\n+        mapping.setIntAttrName(\"fullname\");\n         mapping.setIntMappingType(IntMappingType.UserSchema);\n \n         resource.addMapping(mapping);\n \n         mapping = new SchemaMapping();\n         mapping.setResource(resource);\n-        mapping.setIntAttrName(\"username\");\n+        mapping.setIntAttrName(\"fullname\");\n         mapping.setIntMappingType(IntMappingType.UserSchema);\n \n         resource.addMapping(mapping);"},{"sha":"68b745591cd8992c2093d4d93eb5fe60addb5678","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -48,7 +48,7 @@ public final void findAll() {\n     @Test\n     public final void findByName() {\n         USchema attributeSchema =\n-                schemaDAO.find(\"username\", USchema.class);\n+                schemaDAO.find(\"fullname\", USchema.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attributeSchema);\n     }\n@@ -122,13 +122,21 @@ public final void checkForEnumType() {\n         assertNotNull(actual);\n     }\n \n+    @Test\n+    @ExpectedException(value = InvalidEntityException.class)\n+    public final void saveInvalidSchema() {\n+        USchema schema = new USchema();\n+        schema.setName(\"username\");\n+        schemaDAO.save(schema);\n+    }\n+\n     @Test\n     public final void delete() {\n-        USchema schema = schemaDAO.find(\"username\", USchema.class);\n+        USchema schema = schemaDAO.find(\"fullname\", USchema.class);\n \n         schemaDAO.delete(schema.getName(), AttributableUtil.USER);\n \n-        USchema actual = schemaDAO.find(\"username\", USchema.class);\n+        USchema actual = schemaDAO.find(\"fullname\", USchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n }"},{"sha":"b94be7edf581f7f38829327b20aaf90d4803e187","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -50,10 +50,10 @@ public class UserSearchTest {\n \n     @Test\n     public final void searchWithLikeCondition() {\n-        AttributeCond usernameLeafCond =\n+        AttributeCond fullnameLeafCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"%o%\");\n+        fullnameLeafCond.setSchema(\"fullname\");\n+        fullnameLeafCond.setExpression(\"%o%\");\n \n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(1L);\n@@ -63,7 +63,7 @@ public final void searchWithLikeCondition() {\n         loginDateCond.setExpression(\"2009-05-26\");\n \n         NodeCond subCond = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(fullnameLeafCond),\n                 NodeCond.getLeafCond(membershipCond));\n \n         assertTrue(subCond.checkValidity());\n@@ -81,12 +81,12 @@ public final void searchWithLikeCondition() {\n \n     @Test\n     public final void searchWithNotCondition() {\n-        final AttributeCond usernameLeafCond =\n+        final AttributeCond fullnameLeafCond =\n                 new AttributeCond(AttributeCond.Type.EQ);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"fabio.martelli\");\n+        fullnameLeafCond.setSchema(\"fullname\");\n+        fullnameLeafCond.setExpression(\"fabio.martelli\");\n \n-        final NodeCond cond = NodeCond.getNotLeafCond(usernameLeafCond);\n+        final NodeCond cond = NodeCond.getNotLeafCond(fullnameLeafCond);\n         assertTrue(cond.checkValidity());\n \n         final List<SyncopeUser> users = searchDAO.search(\n@@ -121,10 +121,10 @@ public final void searchByBoolean() {\n \n     @Test\n     public final void searchByPageAndSize() {\n-        AttributeCond usernameLeafCond =\n+        AttributeCond fullnameLeafCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"%o%\");\n+        fullnameLeafCond.setSchema(\"fullname\");\n+        fullnameLeafCond.setExpression(\"%o%\");\n \n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(1L);\n@@ -134,7 +134,7 @@ public final void searchByPageAndSize() {\n         loginDateCond.setExpression(\"2009-05-26\");\n \n         NodeCond subCond = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(fullnameLeafCond),\n                 NodeCond.getLeafCond(membershipCond));\n \n         assertTrue(subCond.checkValidity());"},{"sha":"d25ec0b1055f83da45903e5218743937dee4086e","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.dao;\n \n+import java.util.Date;\n import static org.junit.Assert.*;\n \n import java.util.List;\n@@ -100,11 +101,11 @@ public final void findByInvalidDerAttrExpression()\n \n     @Test\n     public final void findByAttributeValue() {\n-        final UAttrValue usernameValue = new UAttrValue();\n-        usernameValue.setStringValue(\"chicchiricco\");\n+        final UAttrValue fullnameValue = new UAttrValue();\n+        fullnameValue.setStringValue(\"chicchiricco\");\n \n         final List<SyncopeUser> list = userDAO.findByAttrValue(\n-                \"username\", usernameValue);\n+                \"fullname\", fullnameValue);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n \n@@ -128,9 +129,21 @@ public final void findById() {\n         assertNull(\"found user but did not expect it\", user);\n     }\n \n+    @Test\n+    public final void findByUsername() {\n+        SyncopeUser user = userDAO.find(\"user1\");\n+        assertNotNull(\"did not find expected user\", user);\n+        user = userDAO.find(\"user3\");\n+        assertNotNull(\"did not find expected user\", user);\n+        user = userDAO.find(\"user5\");\n+        assertNull(\"found user but did not expect it\", user);\n+    }\n+\n     @Test\n     public final void save() {\n         SyncopeUser user = new SyncopeUser();\n+        user.setUsername(\"username\");\n+        user.setCreationDate(new Date());\n \n         user.setPassword(\"pass\", CipherAlgorithm.SHA256, 0);\n "},{"sha":"d276546d6991897d9450d48c15331021edbc573d","filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":59,"deletions":12,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -28,50 +28,65 @@\n import org.syncope.core.persistence.beans.membership.MAttr;\n import org.syncope.core.persistence.beans.membership.MSchema;\n import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UDerAttr;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.dao.DerAttrDAO;\n+import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.util.AttributableUtil;\n import org.syncope.types.SchemaType;\n \n @Transactional\n public class AttrTest extends AbstractTest {\n \n     @Autowired\n-    private AttrDAO attributeDAO;\n+    private AttrDAO attrDAO;\n \n     @Autowired\n-    private AttrValueDAO attributeValueDAO;\n+    private DerAttrDAO derAttrDAO;\n+\n+    @Autowired\n+    private AttrValueDAO attrValueDAO;\n \n     @Autowired\n     private SchemaDAO schemaDAO;\n \n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n     @Autowired\n     private MembershipDAO membershipDAO;\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n     @Test\n     public final void deleteAttribute() {\n-        attributeDAO.delete(550L, UAttr.class);\n+        attrDAO.delete(550L, UAttr.class);\n \n-        attributeDAO.flush();\n+        attrDAO.flush();\n \n-        assertNull(attributeDAO.find(550L, UAttr.class));\n-        assertNull(attributeValueDAO.find(22L, UAttrValue.class));\n+        assertNull(attrDAO.find(550L, UAttr.class));\n+        assertNull(attrValueDAO.find(22L, UAttrValue.class));\n     }\n \n     @Test\n     public final void deleteAttributeValue() {\n         UAttrValue value =\n-                attributeValueDAO.find(20L, UAttrValue.class);\n+                attrValueDAO.find(20L, UAttrValue.class);\n         int attributeValueNumber =\n                 value.getAttribute().getValues().size();\n \n-        attributeValueDAO.delete(20L, UAttrValue.class);\n+        attrValueDAO.delete(20L, UAttrValue.class);\n \n-        attributeValueDAO.flush();\n+        attrValueDAO.flush();\n \n-        assertNull(attributeValueDAO.find(20L, UAttrValue.class));\n+        assertNull(attrValueDAO.find(20L, UAttrValue.class));\n \n-        UAttr attribute = attributeDAO.find(200L, UAttr.class);\n+        UAttr attribute = attrDAO.find(200L, UAttr.class);\n         assertEquals(attribute.getValues().size(),\n                 attributeValueNumber - 1);\n     }\n@@ -96,7 +111,7 @@ public final void checkForEnumType() {\n         attribute.addValue(\"yellow\", AttributableUtil.MEMBERSHIP);\n         membership.addAttribute(attribute);\n \n-        MAttr actualAttribute = attributeDAO.save(attribute);\n+        MAttr actualAttribute = attrDAO.save(attribute);\n         assertNotNull(actualAttribute);\n \n         membership = membershipDAO.find(1L);\n@@ -108,4 +123,36 @@ public final void checkForEnumType() {\n                 membership.getAttribute(schema.getName()).getValues().size(),\n                 1);\n     }\n+\n+    public void derAttrFromSpecialAttrs() {\n+        UDerSchema sderived = new UDerSchema();\n+        sderived.setName(\"sderived\");\n+        sderived.setExpression(\"username - creationDate[failedLogins]\");\n+\n+        derSchemaDAO.save(sderived);\n+        derSchemaDAO.flush();\n+\n+        UDerSchema actual = derSchemaDAO.find(\"sderived\", UDerSchema.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(sderived, actual);\n+\n+        SyncopeUser owner = userDAO.find(3L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        UDerAttr derAttr = new UDerAttr();\n+        derAttr.setOwner(owner);\n+        derAttr.setDerivedSchema(sderived);\n+\n+        derAttr = derAttrDAO.save(derAttr);\n+        derAttrDAO.flush();\n+\n+        derAttr = derAttrDAO.find(derAttr.getId(), UDerAttr.class);\n+        assertNotNull(\"expected save to work\", derAttr);\n+\n+        String value = derAttr.getValue(owner.getAttributes());\n+        assertNotNull(value);\n+        assertFalse(value.isEmpty());\n+        assertTrue(value.startsWith(\"user3 - 2010-10-20T11:00:00\"));\n+        assertTrue(value.endsWith(\"[]\"));\n+    }\n }"},{"sha":"456264d9996560e8ab4a99af5515a85878984bb0","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -76,7 +76,7 @@ public class ResourceTest extends AbstractTest {\n     public final void createWithPasswordPolicy() {\n         final String RESOURCE_NAME = \"resourceWithPasswordPolicy\";\n \n-        PasswordPolicy policy = (PasswordPolicy)policyDAO.find(4L);\n+        PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n         ExternalResource resource = new ExternalResource();\n         resource.setName(RESOURCE_NAME);\n         resource.setPasswordPolicy(policy);\n@@ -168,8 +168,7 @@ public final void save()\n         connector.addResource(resource);\n \n         // search for the user schema\n-        USchema userSchema =\n-                schemaDAO.find(\"username\", USchema.class);\n+        final USchema userSchema = schemaDAO.find(\"fullname\", USchema.class);\n \n         SchemaMapping mapping = null;\n "},{"sha":"b72f94eae90d80e3e660860c81481a0f6cbb9311","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -53,8 +53,8 @@ public class SchemaTest extends AbstractTest {\n \n     @Test\n     public final void test1() {\n-        // search for user schema username\n-        USchema schema = schemaDAO.find(\"username\", USchema.class);\n+        // search for user schema fullname\n+        USchema schema = schemaDAO.find(\"fullname\", USchema.class);\n \n         assertNotNull(schema);\n \n@@ -70,20 +70,20 @@ public final void test1() {\n         }\n         assertFalse(mappings.isEmpty());\n \n-        // delete user schema username\n-        schemaDAO.delete(\"username\", AttributableUtil.USER);\n+        // delete user schema fullname\n+        schemaDAO.delete(\"fullname\", AttributableUtil.USER);\n \n         schemaDAO.flush();\n \n         // check for schema deletion\n-        schema = schemaDAO.find(\"username\", USchema.class);\n+        schema = schemaDAO.find(\"fullname\", USchema.class);\n \n         assertNull(schema);\n \n         // check for mappings deletion\n         mappings = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : resourceDAO.findAllMappings()) {\n-            if (\"username\".equals(mapping.getIntAttrName())\n+            if (\"fullname\".equals(mapping.getIntAttrName())\n                     && mapping.getIntMappingType()\n                     == IntMappingType.UserSchema) {\n \n@@ -94,14 +94,14 @@ public final void test1() {\n \n         assertNull(attrDAO.find(100L, UAttr.class));\n         assertNull(attrDAO.find(300L, UAttr.class));\n-        assertNull(userDAO.find(1L).getAttribute(\"username\"));\n-        assertNull(userDAO.find(3L).getAttribute(\"username\"));\n+        assertNull(userDAO.find(1L).getAttribute(\"fullname\"));\n+        assertNull(userDAO.find(3L).getAttribute(\"fullname\"));\n     }\n \n     @Test\n     public void test2() {\n \n-        // search for user schema username\n+        // search for user schema fullname\n         USchema schema = schemaDAO.find(\"surname\", USchema.class);\n \n         assertNotNull(schema);\n@@ -118,7 +118,7 @@ public void test2() {\n         }\n         assertFalse(mappings.isEmpty());\n \n-        // delete user schema username\n+        // delete user schema fullname\n         schemaDAO.delete(\"surname\", AttributableUtil.USER);\n \n         schemaDAO.flush();"},{"sha":"aba58907318d93ccd23bced12d3ea1fa1e907f60","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":105,"deletions":12,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -42,7 +42,7 @@ public class AuthenticationTestITCase extends AbstractTest {\n     public void testEntitlements() {\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n-                new UsernamePasswordCredentials(\"1\", \"password\"));\n+                new UsernamePasswordCredentials(\"user1\", \"password\"));\n \n         String[] entsArray = restTemplate.getForObject(BASE_URL\n                 + \"auth/entitlements.json\", String[].class);\n@@ -80,8 +80,7 @@ public void testUserSchemaAuthorization() {\n         authRoleTO.setParent(8L);\n         authRoleTO.addEntitlement(\"SCHEMA_READ\");\n \n-        authRoleTO = restTemplate.postForObject(\n-                BASE_URL + \"role/create\",\n+        authRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n                 authRoleTO, RoleTO.class);\n         assertNotNull(authRoleTO);\n \n@@ -97,6 +96,7 @@ public void testUserSchemaAuthorization() {\n \n         // 2. create an user with the role created above (as admin)\n         UserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n+\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(authRoleTO.getId());\n         AttributeTO testAttributeTO = new AttributeTO();\n@@ -106,8 +106,7 @@ public void testUserSchemaAuthorization() {\n         userTO.addMembership(membershipTO);\n \n         userTO = restTemplate.postForObject(\n-                BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         // 3. read the schema created above (as admin) - success\n@@ -119,7 +118,7 @@ public void testUserSchemaAuthorization() {\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n-                String.valueOf(userTO.getId()), \"password123\"));\n+                userTO.getUsername(), \"password123\"));\n \n         schemaTO = restTemplate.getForObject(BASE_URL\n                 + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n@@ -138,6 +137,13 @@ public void testUserSchemaAuthorization() {\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n+\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getLastLoginDate());\n+        assertEquals(new Integer(0), userTO.getFailedLogins());\n     }\n \n     @Test\n@@ -152,22 +158,22 @@ public void testUserRead() {\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n-                Long.valueOf(userTO.getId()).toString(), \"password123\"));\n+                userTO.getUsername(), \"password123\"));\n \n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n         assertNotNull(readUserTO);\n \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n-                new UsernamePasswordCredentials(\"2\", \"password\"));\n+                new UsernamePasswordCredentials(\"user2\", \"password\"));\n \n         HttpClientErrorException exception = null;\n         try {\n@@ -202,7 +208,7 @@ public void testUserSearch() {\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n-                Long.valueOf(userTO.getId()).toString(), \"password123\"));\n+                userTO.getUsername(), \"password123\"));\n \n         AttributeCond isNullCond = new AttributeCond(\n                 AttributeCond.Type.ISNOTNULL);\n@@ -222,7 +228,7 @@ public void testUserSearch() {\n \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n-                new UsernamePasswordCredentials(\"2\", \"password\"));\n+                new UsernamePasswordCredentials(\"user2\", \"password\"));\n \n         matchedUsers = Arrays.asList(\n                 restTemplate.postForObject(BASE_URL + \"user/search\",\n@@ -237,4 +243,91 @@ public void testUserSearch() {\n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n     }\n+\n+    @Test\n+    public void checkFailedLogins() {\n+        UserTO userTO = UserTestITCase.getSampleTO(\"checkFailedLogin@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"password123\"));\n+\n+        UserTO readUserTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        assertEquals(new Integer(0), readUserTO.getFailedLogins());\n+\n+        // authentications failed ...\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"wrongpwd1\"));\n+\n+        Throwable t = null;\n+\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+            assertNotNull(readUserTO);\n+        } catch (Exception e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+        t = null;\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"wrongpwd2\"));\n+\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+            assertNotNull(readUserTO);\n+        } catch (Exception e) {\n+            t = e;\n+        }\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+\n+        readUserTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        assertEquals(new Integer(2), readUserTO.getFailedLogins());\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"password123\"));\n+\n+        readUserTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        assertEquals(new Integer(0), readUserTO.getFailedLogins());\n+    }\n }"},{"sha":"ad9ce77fd573c67669fb2a575968700b00432e07","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -65,7 +65,7 @@ public void create() {\n \n         schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setExtAttrName(\"username\");\n-        schemaMappingTO.setIntAttrName(\"username\");\n+        schemaMappingTO.setIntAttrName(\"fullname\");\n         schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n         schemaMappingTO.setAccountid(true);\n         resourceTO.addMapping(schemaMappingTO);\n@@ -106,7 +106,7 @@ public void createOverridingProps() {\n \n         schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setExtAttrName(\"username\");\n-        schemaMappingTO.setIntAttrName(\"username\");\n+        schemaMappingTO.setIntAttrName(\"fullname\");\n         schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n         schemaMappingTO.setAccountid(true);\n         resourceTO.addMapping(schemaMappingTO);\n@@ -299,21 +299,21 @@ public void update() {\n         SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setId(112L);\n         schemaMappingTO.setExtAttrName(\"test3\");\n-        schemaMappingTO.setIntAttrName(\"username\");\n+        schemaMappingTO.setIntAttrName(\"fullname\");\n         schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n         schemaMappingTOs.add(schemaMappingTO);\n \n         // Update defining new mappings\n         for (int i = 4; i < 6; i++) {\n             schemaMappingTO = new SchemaMappingTO();\n             schemaMappingTO.setExtAttrName(\"test\" + i);\n-            schemaMappingTO.setIntAttrName(\"username\");\n+            schemaMappingTO.setIntAttrName(\"fullname\");\n             schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n             schemaMappingTOs.add(schemaMappingTO);\n         }\n         schemaMappingTO = new SchemaMappingTO();\n         schemaMappingTO.setExtAttrName(\"username\");\n-        schemaMappingTO.setIntAttrName(\"username\");\n+        schemaMappingTO.setIntAttrName(\"fullname\");\n         schemaMappingTO.setIntMappingType(IntMappingType.SyncopeUserId);\n         schemaMappingTO.setAccountid(true);\n         schemaMappingTOs.add(schemaMappingTO);"},{"sha":"3dbd051572a52efef6f62e8b8443d0aa6765aefc","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":79,"deletions":1,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest;\n \n+import org.syncope.types.EntityViolationType;\n import java.util.Arrays;\n import java.util.List;\n import org.junit.Test;\n@@ -44,6 +45,81 @@ public void create() {\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n+    @Test\n+    public final void createWithNotPermittedName() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"failedLogins\");\n+        schemaTO.setType(SchemaType.String);\n+\n+        SyncopeClientException syncopeClientException = null;\n+\n+        try {\n+            restTemplate.postForObject(BASE_URL\n+                    + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            syncopeClientException = scce.getException(\n+                    SyncopeClientExceptionType.InvalidUSchema);\n+\n+            assertNotNull(syncopeClientException.getElements());\n+            assertEquals(1, syncopeClientException.getElements().size());\n+            assertTrue(syncopeClientException.getElements().iterator().next().\n+                    contains(\n+                    EntityViolationType.InvalidUSchema.toString()));\n+        }\n+\n+        assertNotNull(syncopeClientException);\n+    }\n+\n+    @Test\n+    public final void createREnumWithoutEnumeration() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"enumcheck\");\n+        schemaTO.setType(SchemaType.Enum);\n+\n+        SyncopeClientException syncopeClientException = null;\n+\n+        try {\n+            restTemplate.postForObject(BASE_URL\n+                    + \"schema/role/create\", schemaTO, SchemaTO.class);\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            syncopeClientException = scce.getException(\n+                    SyncopeClientExceptionType.InvalidRSchema);\n+\n+            assertNotNull(syncopeClientException.getElements());\n+            assertEquals(1, syncopeClientException.getElements().size());\n+            assertTrue(syncopeClientException.getElements().iterator().next().\n+                    contains(\n+                    EntityViolationType.InvalidSchemaTypeSpecification.toString()));\n+        }\n+\n+        assertNotNull(syncopeClientException);\n+    }\n+\n+    @Test\n+    public final void createUEnumWithoutEnumeration() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"enumcheck\");\n+        schemaTO.setType(SchemaType.Enum);\n+\n+        SyncopeClientException syncopeClientException = null;\n+\n+        try {\n+            restTemplate.postForObject(BASE_URL\n+                    + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            syncopeClientException = scce.getException(\n+                    SyncopeClientExceptionType.InvalidUSchema);\n+\n+            assertNotNull(syncopeClientException.getElements());\n+            assertEquals(1, syncopeClientException.getElements().size());\n+            assertTrue(syncopeClientException.getElements().iterator().next().\n+                    contains(\n+                    EntityViolationType.InvalidSchemaTypeSpecification.toString()));\n+        }\n+\n+        assertNotNull(syncopeClientException);\n+    }\n+\n     @Test\n     public void delete() {\n         restTemplate.delete(BASE_URL + \"schema/user/delete/firstname.json\");\n@@ -96,13 +172,15 @@ public void update() {\n \n         updatedTO.setType(SchemaType.Date);\n         SyncopeClientException syncopeClientException = null;\n+\n         try {\n             restTemplate.postForObject(BASE_URL\n                     + \"schema/role/update\", updatedTO, SchemaTO.class);\n         } catch (SyncopeClientCompositeErrorException scce) {\n             syncopeClientException = scce.getException(\n-                    SyncopeClientExceptionType.InvalidSchema);\n+                    SyncopeClientExceptionType.InvalidRSchema);\n         }\n+\n         assertNotNull(syncopeClientException);\n     }\n }"},{"sha":"7e6b830b701a9270905f5c4f6e84f926e1c669f0","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":49,"deletions":39,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -51,11 +51,12 @@ public class UserTestITCase extends AbstractTest {\n     public static UserTO getSampleTO(final String email) {\n         UserTO userTO = new UserTO();\n         userTO.setPassword(\"password123\");\n+        userTO.setUsername(email);\n \n-        AttributeTO usernameTO = new AttributeTO();\n-        usernameTO.setSchema(\"username\");\n-        usernameTO.addValue(email);\n-        userTO.addAttribute(usernameTO);\n+        AttributeTO fullnameTO = new AttributeTO();\n+        fullnameTO.setSchema(\"fullname\");\n+        fullnameTO.addValue(email);\n+        userTO.addAttribute(fullnameTO);\n \n         AttributeTO firstnameTO = new AttributeTO();\n         firstnameTO.setSchema(\"firstname\");\n@@ -122,6 +123,7 @@ public final void createUserWithNoPropagation() {\n \n         // create a new user\n         UserTO userTO = new UserTO();\n+        userTO.setUsername(\"xxx@xxx.xxx\");\n \n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"firstname\");\n@@ -139,7 +141,7 @@ public final void createUserWithNoPropagation() {\n         userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"username\");\n+        attributeTO.setSchema(\"fullname\");\n         attributeTO.addValue(\"xxx\");\n         userTO.addAttribute(attributeTO);\n \n@@ -192,29 +194,29 @@ public final void issue172() {\n         restTemplate.delete(BASE_URL + \"policy/delete/{id}\", 2L);\n \n         UserTO userTO = new UserTO();\n+        userTO.setUsername(\"issue172@syncope-idm.org\");\n+        userTO.setPassword(\"password\");\n \n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"firstname\");\n-        attributeTO.addValue(\"ppp\");\n+        attributeTO.addValue(\"issue172\");\n         userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"surname\");\n-        attributeTO.addValue(\"ppp\");\n+        attributeTO.addValue(\"issue172\");\n         userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"userId\");\n-        attributeTO.addValue(\"ppp@ppp.ppp\");\n+        attributeTO.addValue(\"issue172@syncope-idm.org\");\n         userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"username\");\n-        attributeTO.addValue(\"ppp\");\n+        attributeTO.setSchema(\"fullname\");\n+        attributeTO.addValue(\"issue172\");\n         userTO.addAttribute(attributeTO);\n \n-        userTO.setPassword(\"password\");\n-\n         restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n \n@@ -229,6 +231,7 @@ public final void issue172() {\n     public final void issue186() {\n         // 1. create an user with strict mandatory attributes only\n         UserTO userTO = new UserTO();\n+        userTO.setUsername(\"issue186@syncope-idm.org\");\n         userTO.setPassword(\"password\");\n \n         AttributeTO attributeTO = new AttributeTO();\n@@ -237,7 +240,7 @@ public final void issue186() {\n         userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"username\");\n+        attributeTO.setSchema(\"fullname\");\n         attributeTO.addValue(\"issue186\");\n         userTO.addAttribute(attributeTO);\n \n@@ -337,6 +340,8 @@ public final void issue147() {\n     @Test\n     public final void createUserWithDbPropagation() {\n         UserTO userTO = new UserTO();\n+        userTO.setPassword(\"password\");\n+        userTO.setUsername(\"yyy@yyy.yyy\");\n \n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"firstname\");\n@@ -354,11 +359,10 @@ public final void createUserWithDbPropagation() {\n         userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"username\");\n+        attributeTO.setSchema(\"fullname\");\n         attributeTO.addValue(\"yyy\");\n         userTO.addAttribute(attributeTO);\n \n-        userTO.setPassword(\"password\");\n         userTO.addResource(\"resource-testdb\");\n \n         restTemplate.postForObject(BASE_URL + \"user/create\",\n@@ -470,13 +474,16 @@ public final void create() {\n         userTO.addAttribute(nullValueAttributeTO);\n \n         // 1. create user\n-        UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n-                userTO, UserTO.class);\n+        UserTO newUserTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(newUserTO);\n         assertFalse(newUserTO.getAttributes().contains(\n                 attrWithInvalidSchemaTO));\n \n+        // check for changePwdDate\n+        assertNotNull(newUserTO.getCreationDate());\n+\n         // 2. check for virtual attribute value\n         newUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n@@ -704,19 +711,19 @@ public final void read() {\n     @Test\n     public final void search() {\n         // LIKE\n-        AttributeCond usernameLeafCond1 =\n+        AttributeCond fullnameLeafCond1 =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond1.setSchema(\"username\");\n-        usernameLeafCond1.setExpression(\"%o%\");\n+        fullnameLeafCond1.setSchema(\"fullname\");\n+        fullnameLeafCond1.setExpression(\"%o%\");\n \n-        AttributeCond usernameLeafCond2 =\n+        AttributeCond fullnameLeafCond2 =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond2.setSchema(\"username\");\n-        usernameLeafCond2.setExpression(\"%i%\");\n+        fullnameLeafCond2.setSchema(\"fullname\");\n+        fullnameLeafCond2.setExpression(\"%i%\");\n \n         NodeCond searchCondition = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(usernameLeafCond1),\n-                NodeCond.getLeafCond(usernameLeafCond2));\n+                NodeCond.getLeafCond(fullnameLeafCond1),\n+                NodeCond.getLeafCond(fullnameLeafCond2));\n \n         assertTrue(searchCondition.checkValidity());\n \n@@ -781,19 +788,19 @@ public final void searchUserByResourceName() {\n     @Test\n     public final void paginatedSearch() {\n         // LIKE\n-        AttributeCond usernameLeafCond1 =\n+        AttributeCond fullnameLeafCond1 =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond1.setSchema(\"username\");\n-        usernameLeafCond1.setExpression(\"%o%\");\n+        fullnameLeafCond1.setSchema(\"fullname\");\n+        fullnameLeafCond1.setExpression(\"%o%\");\n \n-        AttributeCond usernameLeafCond2 =\n+        AttributeCond fullnameLeafCond2 =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond2.setSchema(\"username\");\n-        usernameLeafCond2.setExpression(\"%i%\");\n+        fullnameLeafCond2.setSchema(\"fullname\");\n+        fullnameLeafCond2.setExpression(\"%i%\");\n \n         NodeCond searchCondition = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(usernameLeafCond1),\n-                NodeCond.getLeafCond(usernameLeafCond2));\n+                NodeCond.getLeafCond(fullnameLeafCond1),\n+                NodeCond.getLeafCond(fullnameLeafCond2));\n \n         assertTrue(searchCondition.checkValidity());\n \n@@ -916,9 +923,9 @@ public final void update() {\n         attributeMod.addValueToBeAdded(\"t.w@spre.net\");\n         userMod.addAttributeToBeUpdated(attributeMod);\n \n-        userMod.addAttributeToBeRemoved(\"username\");\n+        userMod.addAttributeToBeRemoved(\"fullname\");\n         attributeMod = new AttributeMod();\n-        attributeMod.setSchema(\"username\");\n+        attributeMod.setSchema(\"fullname\");\n         attributeMod.addValueToBeAdded(\"g.h@t.com\");\n         userMod.addAttributeToBeUpdated(attributeMod);\n \n@@ -939,23 +946,23 @@ public final void update() {\n                 getAttributes().size());\n         assertFalse(userTO.getDerivedAttributes().isEmpty());\n         boolean userIdFound = false;\n-        boolean usernameFound = false;\n+        boolean fullnameFound = false;\n         for (AttributeTO attributeTO : userTO.getAttributes()) {\n             if (\"userId\".equals(attributeTO.getSchema())) {\n                 userIdFound = true;\n \n                 assertEquals(Collections.singletonList(\"t.w@spre.net\"),\n                         attributeTO.getValues());\n             }\n-            if (\"username\".equals(attributeTO.getSchema())) {\n-                usernameFound = true;\n+            if (\"fullname\".equals(attributeTO.getSchema())) {\n+                fullnameFound = true;\n \n                 assertEquals(Collections.singletonList(\"g.h@t.com\"),\n                         attributeTO.getValues());\n             }\n         }\n         assertTrue(userIdFound);\n-        assertTrue(usernameFound);\n+        assertTrue(fullnameFound);\n     }\n \n     @Test\n@@ -985,6 +992,9 @@ public void updatePasswordOnly() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 userMod, UserTO.class);\n \n+        // check for changePwdDate\n+        assertNotNull(userTO.getChangePwdDate());\n+\n         SyncopeUser passwordTestUser = new SyncopeUser();\n         passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());"},{"sha":"6030c6bcd1bad82c31d4396749e5cde62b72e134","filename":"core/src/test/resources/content.xml","status":"modified","additions":29,"deletions":21,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf8c913fc9b607f4e7ce72ed4be2140534270bb/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=5cf8c913fc9b607f4e7ce72ed4be2140534270bb","patch":"@@ -29,11 +29,14 @@\n     <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E0%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E10%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n     <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n     <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n-                          \n-    <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n-    <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n-    <SyncopeUser id=\"3\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n-    <SyncopeUser id=\"4\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"/>\n+    <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+                 username=\"user1\" creationDate=\"2010-10-20 11:00:00\"/>\n+    <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+                 username=\"user2\" creationDate=\"2010-10-20 11:00:00\"/>\n+    <SyncopeUser id=\"3\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+                 username=\"user3\" creationDate=\"2010-10-20 11:00:00\"/>\n+    <SyncopeUser id=\"4\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n+                 username=\"user4\" creationDate=\"2010-10-20 11:00:00\"/>\n \n     <SyncopeRole id=\"1\" name=\"root\"/>\n     <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\"/>\n@@ -64,7 +67,7 @@\n     <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n     <Membership id=\"6\" syncopeUser_id=\"2\" syncopeRole_id=\"3\"/>\n \n-    <USchema name=\"username\" type=\"String\"\n+    <USchema name=\"fullname\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n     <USchema name=\"userId\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n@@ -116,21 +119,21 @@\n     <MSchema name=\"mderived_dx\" type=\"String\"\n                       mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-    <UAttr id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n-    <UAttrUniqueValue id=\"10\" attribute_id=\"100\" schema_name=\"username\" stringValue=\"chicchiricco\"/>\n+    <UAttr id=\"100\" owner_id=\"1\" schema_name=\"fullname\"/>\n+    <UAttrUniqueValue id=\"10\" attribute_id=\"100\" schema_name=\"fullname\" stringValue=\"chicchiricco\"/>\n     <UAttr id=\"200\" owner_id=\"1\" schema_name=\"loginDate\"/>\n     <UAttrValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n     <UAttrValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>\n \n-    <UAttr id=\"300\" owner_id=\"2\" schema_name=\"username\"/>\n-    <UAttrUniqueValue id=\"11\" attribute_id=\"300\" schema_name=\"username\" stringValue=\"fabio.martelli\"/>\n+    <UAttr id=\"300\" owner_id=\"2\" schema_name=\"fullname\"/>\n+    <UAttrUniqueValue id=\"11\" attribute_id=\"300\" schema_name=\"fullname\" stringValue=\"fabio.martelli\"/>\n \n     <UAttr id=\"400\" owner_id=\"3\" schema_name=\"firstname\"/>\n     <UAttrValue attribute_id=\"400\" id=\"30\" stringValue=\"John\"/>\n     <UAttr id=\"500\" owner_id=\"3\" schema_name=\"surname\"/>\n     <UAttrValue attribute_id=\"500\" id=\"31\" stringValue=\"Doe\"/>\n-    <UAttr id=\"540\" owner_id=\"3\" schema_name=\"username\"/>\n-    <UAttrUniqueValue id=\"12\" attribute_id=\"540\" schema_name=\"username\" stringValue=\"testUsername\"/>\n+    <UAttr id=\"540\" owner_id=\"3\" schema_name=\"fullname\"/>\n+    <UAttrUniqueValue id=\"12\" attribute_id=\"540\" schema_name=\"fullname\" stringValue=\"testUsername\"/>\n \n     <UAttr id=\"550\" owner_id=\"4\" schema_name=\"loginDate\"/>\n     <UAttrValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n@@ -279,7 +282,7 @@\n \n     <SchemaMapping id=\"101\" extAttrName=\"userId\"\n                    resource_name=\"ws-target-resource-2\"\n-                   intAttrName=\"username\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"1\" password=\"0\"/>\n \n     <SchemaMapping id=\"102\" extAttrName=\"email\"\n@@ -334,7 +337,7 @@\n     \n     <SchemaMapping id=\"112\" extAttrName=\"test3\"\n                    resource_name=\"ws-target-resource-update\"\n-                   intAttrName=\"username\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n+                   intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n                    accountid=\"0\" password=\"0\"/>\n \n     <SchemaMapping id=\"113\" extAttrName=\"name\"\n@@ -349,7 +352,7 @@\n \n     <SchemaMapping id=\"115\" extAttrName=\"name\"\n                    resource_name=\"ws-target-resource-nopropagation\"\n-                   intAttrName=\"username\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"1\" password=\"0\"/>\n                    \n     <SchemaMapping id=\"116\" extAttrName=\"id\"\n@@ -364,25 +367,29 @@\n \n     <SchemaMapping id=\"200\" extAttrName=\"id\"\n                    resource_name=\"resource-csv\"\n-                   intAttrName=\"username\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   intMappingType=\"Username\" mandatoryCondition=\"true\"\n                    accountid=\"0\" password=\"0\"/>\n-    <SchemaMapping id=\"201\" extAttrName=\"password\"\n+    <SchemaMapping id=\"201\" extAttrName=\"id\"\n+                   resource_name=\"resource-csv\"\n+                   intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   accountid=\"0\" password=\"0\"/>\n+    <SchemaMapping id=\"202\" extAttrName=\"password\"\n                    resource_name=\"resource-csv\"\n                    intMappingType=\"Password\" mandatoryCondition=\"true\"\n                    accountid=\"0\" password=\"1\"/>\n-    <SchemaMapping id=\"202\" extAttrName=\"name\"\n+    <SchemaMapping id=\"203\" extAttrName=\"name\"\n                    resource_name=\"resource-csv\"\n                    intAttrName=\"firstname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n                    accountid=\"0\" password=\"0\"/>\n-    <SchemaMapping id=\"203\" extAttrName=\"surname\"\n+    <SchemaMapping id=\"204\" extAttrName=\"surname\"\n                    resource_name=\"resource-csv\"\n                    intAttrName=\"surname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n                    accountid=\"0\" password=\"0\"/>\n-    <SchemaMapping id=\"204\" extAttrName=\"email\"\n+    <SchemaMapping id=\"205\" extAttrName=\"email\"\n                    resource_name=\"resource-csv\"\n                    intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"0\" password=\"0\"/>\n-    <SchemaMapping id=\"205\" extAttrName=\"IGNORE\"\n+    <SchemaMapping id=\"206\" extAttrName=\"IGNORE\"\n                    resource_name=\"resource-csv\"\n                    intAttrName=\"csvuserid\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n                    accountid=\"1\" password=\"0\"/>\n@@ -475,5 +482,6 @@\n     <SyncopeRole_Entitlement entitlements_name=\"USER_READ\" roles_id=\"7\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"USER_LIST\" roles_id=\"7\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"ROLE_8\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_7\" roles_id=\"7\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"ROLE_1\" roles_id=\"7\"/>\n </dataset>"}]}