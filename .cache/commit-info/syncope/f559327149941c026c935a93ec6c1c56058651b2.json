{"sha":"f559327149941c026c935a93ec6c1c56058651b2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY1NTkzMjcxNDk5NDFjMDI2YzkzNWE5M2VjNmMxYzU2MDU4NjUxYjI=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-07T12:47:16Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-07T12:47:16Z"},"message":"[SYNCOPE-259]\nIntroduces Task Service\nMinor updates to other REST Services.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1429781 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"475edc42750c17bde2d1280b64d9363ac9766d5c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/475edc42750c17bde2d1280b64d9363ac9766d5c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f559327149941c026c935a93ec6c1c56058651b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f559327149941c026c935a93ec6c1c56058651b2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f559327149941c026c935a93ec6c1c56058651b2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f559327149941c026c935a93ec6c1c56058651b2/comments","author":null,"committer":null,"parents":[{"sha":"3e5d2f3306a662560c970435cf7d11b8adf0b2a5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3e5d2f3306a662560c970435cf7d11b8adf0b2a5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3e5d2f3306a662560c970435cf7d11b8adf0b2a5"}],"stats":{"total":1530,"additions":883,"deletions":647},"files":[{"sha":"6ee6fd3f9ed299779ed94551babc862bc9ff39e9","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationService.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -39,10 +39,22 @@ public interface ConfigurationService {\n \t@POST\r\n \tConfigurationTO create(final ConfigurationTO configurationTO);\r\n \r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n+\tResponse dbExport();\r\n+\r\n \t@DELETE\r\n \t@Path(\"{key}\")\r\n \tConfigurationTO delete(@PathParam(\"key\") final String key);\r\n \r\n+\t@GET\r\n+\t@Path(\"mailTemplates\")\r\n+\tSet<String> getMailTemplates();\r\n+\r\n+\t@GET\r\n+\t@Path(\"validators\")\r\n+\tSet<String> getValidators();\r\n+\r\n \t@GET\r\n \tList<ConfigurationTO> list();\r\n \r\n@@ -54,16 +66,4 @@ public interface ConfigurationService {\n \t@Path(\"{key}\")\r\n \tConfigurationTO update(@PathParam(\"key\") final String key, final ConfigurationTO configurationTO);\r\n \r\n-\t@GET\r\n-\t@Path(\"validators\")\r\n-\tSet<String> getValidators();\r\n-\r\n-\t@GET\r\n-\t@Path(\"mailTemplates\")\r\n-\tSet<String> getMailTemplates();\r\n-\r\n-\t@GET\r\n-\t@Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n-\tResponse dbExport();\r\n-\r\n }\n\\ No newline at end of file"},{"sha":"a7c8e58092bbda3c6eb87472235277159bf1a0b8","filename":"client/src/main/java/org/apache/syncope/services/ConnectorService.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -42,26 +42,19 @@ public interface ConnectorService {\n \t@POST\r\n \tConnInstanceTO create(final ConnInstanceTO connectorTO);\r\n \r\n-\t@PUT\r\n-\t@Path(\"{connectorId}\")\r\n-\tConnInstanceTO update(@PathParam(\"connectorId\") final Long connectorId,\r\n-\t\t\tfinal ConnInstanceTO connectorTO);\r\n-\r\n \t@DELETE\r\n \t@Path(\"{connectorId}\")\r\n \tConnInstanceTO delete(@PathParam(\"connectorId\") final Long connectorId);\r\n \r\n-\t@GET\r\n-\tList<ConnInstanceTO> list(@QueryParam(\"lang\") final String lang);\r\n-\r\n-\t@GET\r\n-\t@Path(\"{connectorId}\")\r\n-\tConnInstanceTO read(@PathParam(\"connectorId\") final Long connectorId);\r\n-\r\n \t@GET\r\n \t@Path(\"bundles\")\r\n \tList<ConnBundleTO> getBundles(@QueryParam(\"lang\") final String lang);\r\n \r\n+\t@GET\r\n+\t@Path(\"{connectorId}/configuration\")\r\n+\tList<ConnConfProperty> getConfigurationProperties(\r\n+\t\t\t@PathParam(\"connectorId\") final Long connectorId);\r\n+\r\n \t@GET\r\n \t@POST\r\n \t@Path(\"{connectorId}/schemas\")\r\n@@ -71,17 +64,24 @@ List<String> getSchemaNames(\n \t\t\t@QueryParam(\"showall\") @DefaultValue(\"false\") final boolean showall);\r\n \r\n \t@GET\r\n-\t@Path(\"{connectorId}/configuration\")\r\n-\tList<ConnConfProperty> getConfigurationProperties(\r\n-\t\t\t@PathParam(\"connectorId\") final Long connectorId);\r\n+\tList<ConnInstanceTO> list(@QueryParam(\"lang\") final String lang);\r\n \r\n-\t@POST\r\n-\t@Path(\"validate\")\r\n-\t@RequestMapping(method = RequestMethod.POST, value = \"/check\")\r\n-\tboolean validate(final ConnInstanceTO connectorTO);\r\n+\t@GET\r\n+\t@Path(\"{connectorId}\")\r\n+\tConnInstanceTO read(@PathParam(\"connectorId\") final Long connectorId);\r\n \r\n \t@GET\r\n \t@RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/connectorBean\")\r\n \tConnInstanceTO readConnectorBean(\r\n \t\t\t@MatrixParam(\"resourceName\") String resourceName);\r\n+\r\n+\t@PUT\r\n+\t@Path(\"{connectorId}\")\r\n+\tConnInstanceTO update(@PathParam(\"connectorId\") final Long connectorId,\r\n+\t\t\tfinal ConnInstanceTO connectorTO);\r\n+\r\n+\t@POST\r\n+\t@Path(\"validate\")\r\n+\t@RequestMapping(method = RequestMethod.POST, value = \"/check\")\r\n+\tboolean validate(final ConnInstanceTO connectorTO);\r\n }\n\\ No newline at end of file"},{"sha":"cecbc1bd4c0b41f9f85e41f77f15dd7accf75ae9","filename":"client/src/main/java/org/apache/syncope/services/ReportService.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n-import java.util.Set;\r\n \r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r"},{"sha":"e92b48b338576dba6bf88d41f04667be347bea0d","filename":"client/src/main/java/org/apache/syncope/services/TaskService.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -0,0 +1,124 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.HeaderParam;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.QueryParam;\r\n+\r\n+import org.apache.syncope.client.to.TaskExecTO;\r\n+import org.apache.syncope.client.to.TaskTO;\r\n+import org.apache.syncope.types.PropagationTaskExecStatus;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RequestMethod;\r\n+\r\n+@Path(\"tasks\")\r\n+public interface TaskService {\r\n+\r\n+    @GET\r\n+    @Path(\"{kind}/count\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/count\")\r\n+    int count(@PathParam(\"kind\") final String kind);\r\n+\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/create/sync\")\r\n+    //    TaskTO createSyncTask(  final SyncTaskTO taskTO);\r\n+    //\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/create/sched\")\r\n+    //    TaskTO createSchedTask( final SchedTaskTO taskTO);\r\n+\r\n+    @POST\r\n+    <T extends TaskTO> T create(T taskTO);\r\n+\r\n+    @DELETE\r\n+    @Path(\"{taskId}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{taskId}\")\r\n+    <T extends TaskTO> T delete(@PathParam(\"taskId\") final Long taskId, Class<T> type);\r\n+\r\n+    @DELETE\r\n+    @Path(\"executions/{executionId}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\r\n+    TaskExecTO deleteExecution(@PathParam(\"executionId\") final Long executionId);\r\n+\r\n+    @POST\r\n+    @Path(\"{taskId}/execute\")\r\n+    @RequestMapping(method = RequestMethod.POST, value = \"/execute/{taskId}\")\r\n+    TaskExecTO execute(@PathParam(\"taskId\") final Long taskId,\r\n+            @QueryParam(\"dryRun\") @DefaultValue(\"false\") final boolean dryRun);\r\n+\r\n+    @GET\r\n+    @Path(\"jobClasses\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/jobClasses\")\r\n+    Set<String> getJobClasses();\r\n+\r\n+    @GET\r\n+    @Path(\"syncActionsClasses\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/syncActionsClasses\")\r\n+    Set<String> getSyncActionsClasses();\r\n+\r\n+    @GET\r\n+    @Path(\"{kind}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\r\n+    <T extends TaskTO> List<T> list(@PathParam(\"kind\") final String kind, Class<T[]> type);\r\n+\r\n+    @GET\r\n+    @Path(\"{kind}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list/{page}/{size}\")\r\n+    <T extends TaskTO> List<T> list(@PathParam(\"kind\") final String kind, @QueryParam(\"page\") final int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") final int size, Class<T[]> type);\r\n+\r\n+    @GET\r\n+    @Path(\"{kind}/executions\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/execution/list\")\r\n+    List<TaskExecTO> listExecutions(@PathParam(\"kind\") final String kind);\r\n+\r\n+    @GET\r\n+    @Path(\"{taskId}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/{taskId}\")\r\n+    <T extends TaskTO> T read(@PathParam(\"taskId\") final Long taskId, Class<T> type);\r\n+\r\n+    @GET\r\n+    @Path(\"executions/{executionId}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\r\n+    TaskExecTO readExecution(@PathParam(\"executionId\") final Long executionId);\r\n+\r\n+    @POST\r\n+    @Path(\"executions/{executionId}/report\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/report/{executionId}\")\r\n+    TaskExecTO report(@PathParam(\"executionId\") final Long executionId,\r\n+            @HeaderParam(\"Execution-Status\") final PropagationTaskExecStatus status, final String message);\r\n+\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/update/sync\")\r\n+    //    TaskTO updateSync(final SyncTaskTO taskTO);\r\n+    //\r\n+    //    @RequestMapping(method = RequestMethod.POST, value = \"/update/sched\")\r\n+    //    TaskTO updateSched(final SchedTaskTO taskTO);\r\n+\r\n+    @PUT\r\n+    @Path(\"{taskId}\")\r\n+    <T extends TaskTO> T update(@PathParam(\"taskId\") final Long taskId, T taskTO);\r\n+}\n\\ No newline at end of file"},{"sha":"87d336b25d0ff91237c3184d519be4c660a4ed0a","filename":"client/src/main/java/org/apache/syncope/services/TaskServiceProxy.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskServiceProxy.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -0,0 +1,139 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.client.to.SchedTaskTO;\r\n+import org.apache.syncope.client.to.SyncTaskTO;\r\n+import org.apache.syncope.client.to.TaskExecTO;\r\n+import org.apache.syncope.client.to.TaskTO;\r\n+import org.apache.syncope.types.PropagationTaskExecStatus;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class TaskServiceProxy extends SpringServiceProxy implements TaskService {\r\n+\r\n+    public TaskServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int count(String kind) {\r\n+        return restTemplate.getForObject(BASE_URL + \"task/{kind}/count.json\", Integer.class, kind);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends TaskTO> T create(T taskTO) {\r\n+        String subTypeString = (taskTO instanceof SyncTaskTO)\r\n+                ? \"sync\"\r\n+                : (taskTO instanceof SchedTaskTO)\r\n+                        ? \"sched\"\r\n+                        : \"\";\r\n+\r\n+        return (T) restTemplate.postForObject(BASE_URL + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n+                subTypeString);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends TaskTO> T delete(Long taskId, Class<T> type) {\r\n+        return restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", type, taskId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public TaskExecTO deleteExecution(Long executionId) {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public TaskExecTO execute(Long taskId, boolean dryRun) {\r\n+        String param = (dryRun)\r\n+                ? \"?dryRun=true\"\r\n+                : \"\";\r\n+        return restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\" + param, null, TaskExecTO.class,\r\n+                taskId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<String> getJobClasses() {\r\n+        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/jobClasses.json\",\r\n+                String[].class)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<String> getSyncActionsClasses() {\r\n+        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+                + \"task/syncActionsClasses.json\", String[].class)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends TaskTO> List<T> list(String kind, Class<T[]> type) {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/{kind}/list\", type, kind));\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends TaskTO> List<T> list(String kind, int page, int size, Class<T[]> type) {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/{kind}/list/{page}/{size}.json\",\r\n+                type, kind, page, size));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<TaskExecTO> listExecutions(String kind) {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/{kind}/execution/list\",\r\n+                TaskExecTO[].class, kind));\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends TaskTO> T read(Long taskId, Class<T> type) {\r\n+        return restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", type, taskId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public TaskExecTO readExecution(Long executionId) {\r\n+        return restTemplate.getForObject(BASE_URL + \"task/execution/read/{taskId}\", TaskExecTO.class,\r\n+                executionId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public TaskExecTO report(Long executionId, PropagationTaskExecStatus status, String message) {\r\n+        return restTemplate.getForObject(BASE_URL + \"task/execution/report/{executionId}\"\r\n+                + \"?executionStatus={status}&message={message}\", TaskExecTO.class, executionId, status,\r\n+                message);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends TaskTO> T update(Long taskId, T taskTO) {\r\n+        String path = (taskTO instanceof SyncTaskTO)\r\n+                ? \"sync\"\r\n+                : (taskTO instanceof SchedTaskTO)\r\n+                        ? \"sched\"\r\n+\r\n+                        : null;\r\n+        if (path == null)\r\n+            throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r\n+\r\n+        return (T) restTemplate.postForObject(BASE_URL + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n+    }\r\n+\r\n+}\r"},{"sha":"73a38e50793a781e2d8223a9b6609bcade05bbad","filename":"client/src/main/java/org/apache/syncope/services/UserServiceProxy.java","status":"modified","additions":142,"deletions":148,"changes":290,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -21,14 +21,6 @@\n import java.util.Arrays;\n import java.util.List;\n \n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.MatrixParam;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.QueryParam;\n-\n import org.apache.syncope.client.mod.StatusMod;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.search.NodeCond;\n@@ -38,155 +30,157 @@\n \n public class UserServiceProxy extends SpringServiceProxy implements UserService {\n \n-\tpublic UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n-\t\tsuper(baseUrl, restTemplate);\n-\t}\n-\n-\t@Override\n-\tpublic Boolean verifyPassword(@MatrixParam(\"uname\") String username,\n-\t\t\t@MatrixParam(\"pwd\") String password) {\n-\t\treturn restTemplate.\n-                getForObject(BASE_URL + \"user/verifyPassword/{username}.json?password={password}\",\n-                Boolean.class, username, password);\n-\t}\n-\n-\t@Override\n-\tpublic int count() {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserTO> list() {\n-\t\treturn  Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list.json\", UserTO[].class));\n-\t}\n-\n-\t@Override\n-\tpublic List<UserTO> list(@QueryParam(\"page\") int page,\n-\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") int size) {\n-\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\",\n+    public UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n+        super(baseUrl, restTemplate);\n+    }\n+\n+    @Override\n+    public Boolean verifyPassword(String username, String password) {\n+        return restTemplate.getForObject(\n+                BASE_URL + \"user/verifyPassword/{username}.json?password={password}\", Boolean.class,\n+                username, password);\n+    }\n+\n+    @Override\n+    public int count() {\n+        return restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n+    }\n+\n+    @Override\n+    public List<UserTO> list() {\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list.json\", UserTO[].class));\n+    }\n+\n+    @Override\n+    public List<UserTO> list(int page, int size) {\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\",\n                 UserTO[].class, page, size));\n-\t}\n-\n-\t@Override\n-\tpublic UserTO read(@PathParam(\"userId\") Long userId) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userId);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO read(@MatrixParam(\"uname\") String username) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\t@POST\n-\t@Path(\"/\")\n-\tpublic UserTO create(UserTO userTO) {\n-\t\treturn restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO update(@PathParam(\"userId\") Long userId, UserMod userMod) {\n-\t\treturn restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO delete(@PathParam(\"userId\") Long userId) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userId);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO executeWorkflow(@PathParam(\"taskId\") String taskId, UserTO userTO) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\t@GET\n-\t@Path(\"/workflow/form\")\n-\tpublic List<WorkflowFormTO> getForms() {\n-\t\treturn  Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/workflow/form/list\", WorkflowFormTO[].class));\n-\t}\n-\n-\t@Override\n-\tpublic WorkflowFormTO getFormForUser(@PathParam(\"userId\") Long userId) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class, userId);\n-\t}\n-\n-\t@Override\n-\tpublic WorkflowFormTO claimForm(@PathParam(\"taskId\") String taskId) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\", WorkflowFormTO.class, taskId);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO submitForm(WorkflowFormTO form) {\n-\t\treturn restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO activate(long userId, String token) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/activate/{userId}?token=\" + token, UserTO.class, userId);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO activateByUsername(String username, String token) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/activateByUsername/{username}.json?token=\" + token,\n+    }\n+\n+    @Override\n+    public UserTO read(Long userId) {\n+        return restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO read(String username) {\n+        return restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class,\n+                username);\n+    }\n+\n+    @Override\n+    public UserTO create(UserTO userTO) {\n+        return restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+    }\n+\n+    @Override\n+    public UserTO update(Long userId, UserMod userMod) {\n+        return restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+    }\n+\n+    @Override\n+    public UserTO delete(Long userId) {\n+        return restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO executeWorkflow(String taskId, UserTO userTO) {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms() {\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/workflow/form/list\",\n+                WorkflowFormTO[].class));\n+    }\n+\n+    @Override\n+    public WorkflowFormTO getFormForUser(Long userId) {\n+        return restTemplate.getForObject(BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n+                userId);\n+    }\n+\n+    @Override\n+    public WorkflowFormTO claimForm(String taskId) {\n+        return restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\",\n+                WorkflowFormTO.class, taskId);\n+    }\n+\n+    @Override\n+    public UserTO submitForm(WorkflowFormTO form) {\n+        return restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n+    }\n+\n+    @Override\n+    public UserTO activate(long userId, String token) {\n+        return restTemplate.getForObject(BASE_URL + \"user/activate/{userId}?token=\" + token, UserTO.class,\n+                userId);\n+    }\n+\n+    @Override\n+    public UserTO activateByUsername(String username, String token) {\n+        return restTemplate.getForObject(BASE_URL + \"user/activateByUsername/{username}.json?token=\" + token,\n+                UserTO.class, username);\n+    }\n+\n+    @Override\n+    public UserTO suspend(long userId) {\n+        return restTemplate.getForObject(BASE_URL + \"user/suspend/{userId}\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(long userId) {\n+        return restTemplate.getForObject(BASE_URL + \"user/reactivate/{userId}\", UserTO.class, userId);\n+    }\n+\n+    @Override\n+    public UserTO reactivate(long userId, String query) {\n+        return restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userId + query, UserTO.class);\n+    }\n+\n+    @Override\n+    public UserTO suspendByUsername(String username) {\n+        return restTemplate.getForObject(BASE_URL + \"user/suspendByUsername/{username}.json\", UserTO.class,\n+                username);\n+    }\n+\n+    @Override\n+    public UserTO reactivateByUsername(String username) {\n+        return restTemplate.getForObject(BASE_URL + \"user/reactivateByUsername/{username}.json\",\n                 UserTO.class, username);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO suspend(long userId) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/suspend/{userId}\", UserTO.class, userId);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO reactivate(long userId) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivate/{userId}\", UserTO.class, userId);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO reactivate(long userId, String query) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userId + query, UserTO.class);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO suspendByUsername(String username) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/suspendByUsername/{username}.json\", UserTO.class, username);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO reactivateByUsername(String username) {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivateByUsername/{username}.json\", UserTO.class, username);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO suspend(long userId, String query) {\n-\t\treturn  restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userId + query, UserTO.class);\n-\t}\n-\n-\t@Override\n-\tpublic UserTO readSelf() {\n-\t\treturn restTemplate.getForObject(BASE_URL + \"user/read/self\", UserTO.class);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserTO> search(NodeCond searchCondition) {\n-\t\treturn Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n+    }\n+\n+    @Override\n+    public UserTO suspend(long userId, String query) {\n+        return restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userId + query, UserTO.class);\n+    }\n+\n+    @Override\n+    public UserTO readSelf() {\n+        return restTemplate.getForObject(BASE_URL + \"user/read/self\", UserTO.class);\n+    }\n+\n+    @Override\n+    public List<UserTO> search(NodeCond searchCondition) {\n+        return Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n                 UserTO[].class));\n-\t}\n+    }\n \n-\t@Override\n-\tpublic List<UserTO> search(NodeCond searchCondition, int page, int size) {\n-\t\treturn Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search/{page}/{size}\",\n+    @Override\n+    public List<UserTO> search(NodeCond searchCondition, int page, int size) {\n+        return Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search/{page}/{size}\",\n                 searchCondition, UserTO[].class, page, size));\n-\t}\n+    }\n \n-\t@Override\n-\tpublic int searchCount(NodeCond searchCondition) {\n-\t\treturn restTemplate.postForObject(BASE_URL + \"user/search/count.json\", searchCondition, Integer.class);\n-\t}\n+    @Override\n+    public int searchCount(NodeCond searchCondition) {\n+        return restTemplate\n+                .postForObject(BASE_URL + \"user/search/count.json\", searchCondition, Integer.class);\n+    }\n \n     @Override\n     public UserTO setStatus(Long userId, StatusMod statusUpdate) {\n-        return null;\n+        return null; // Not used in old REST API\n     }\n \n }"},{"sha":"bdb2bdfde99b2b047b3710c0f808240cd8c43129","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.services.ReportServiceProxy;\n import org.apache.syncope.services.ResourceServiceProxy;\n import org.apache.syncope.services.RoleServiceProxy;\n+import org.apache.syncope.services.TaskServiceProxy;\n import org.apache.syncope.services.UserServiceProxy;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n@@ -94,6 +95,8 @@ protected static AttributeMod attributeMod(final String schema,\n \n \tprotected ReportServiceProxy reportService;\n \n+\tprotected TaskServiceProxy taskService;\n+\n \t@Autowired\n \tprotected DataSource testDataSource;\n \n@@ -122,5 +125,6 @@ public void resetRestTemplate() {\n \t\tconnectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n \t\tloggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n \t\treportService = new ReportServiceProxy(BASE_URL, restTemplate);\n+\t\ttaskService = new TaskServiceProxy(BASE_URL, restTemplate);\n \t}\n }"},{"sha":"50c3f4709acb873d7b0450a6f05a7c21cbc4f71a","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -374,7 +374,7 @@ public void list() {\n \n     @Test\n     public void listByType() {\n-        List<ResourceTO> actuals = resourceService.list(Long.valueOf(105));\n+        List<ResourceTO> actuals = resourceService.list(105L);\n \n         assertNotNull(actuals);\n         assertEquals(1, actuals.size());\n@@ -384,7 +384,7 @@ public void listByType() {\n     @Test\n     public void read() {\n         ResourceTO actual = resourceService.read(\"resource-testdb\");\n-        \n+\n         assertNotNull(actual);\n     }\n }"},{"sha":"d9a3ba4e307330cc01ad9cbfe3ca07b95da2527d","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":356,"deletions":366,"changes":722,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -48,370 +48,360 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class RoleTestITCase extends AbstractTest {\n \n-\t@Test\n-\tpublic void createWithException() {\n-\t\tRoleTO newRoleTO = new RoleTO();\n-\t\tnewRoleTO.addAttribute(attributeTO(\"attr1\", \"value1\"));\n-\n-\t\tThrowable t = null;\n-\t\ttry {\n-\t\t\troleService.create(newRoleTO);\n-\t\t\tfail();\n-\t\t} catch (SyncopeClientCompositeErrorException sccee) {\n-\t\t\tt = sccee\n-\t\t\t\t\t.getException(SyncopeClientExceptionType.InvalidSyncopeRole);\n-\t\t}\n-\t\tassertNotNull(t);\n-\t}\n-\n-\t@Test\n-\tpublic void create() {\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"lastRole\");\n-\t\troleTO.setParent(8L);\n-\n-\t\t// verify inheritance password and account policies\n-\t\troleTO.setInheritAccountPolicy(false);\n-\t\t// not inherited so setter execution shouldn't be ignored\n-\t\troleTO.setAccountPolicy(6L);\n-\n-\t\troleTO.setInheritPasswordPolicy(true);\n-\t\t// inherited so setter execution should be ignored\n-\t\troleTO.setPasswordPolicy(2L);\n-\n-\t\troleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\n-\t\troleTO.addDerivedAttribute(attributeTO(\"ownerDN\", null));\n-\n-\t\troleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", \"rvirtualvalue\"));\n-\n-\t\troleTO.setRoleOwner(8L);\n-\n-\t\troleTO.addResource(\"resource-ldap\");\n-\n-\t\troleTO = roleService.create(roleTO);\n-\t\tassertNotNull(roleTO);\n-\n-\t\tassertNotNull(roleTO.getVirtualAttributeMap());\n-\t\tassertNotNull(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\")\n-\t\t\t\t.getValues());\n-\t\tassertFalse(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\")\n-\t\t\t\t.getValues().isEmpty());\n-\t\tassertEquals(\"rvirtualvalue\",\n-\t\t\t\troleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues()\n-\t\t\t\t\t\t.get(0));\n-\n-\t\tassertNotNull(roleTO.getAccountPolicy());\n-\t\tassertEquals(6L, (long) roleTO.getAccountPolicy());\n-\n-\t\tassertNotNull(roleTO.getPasswordPolicy());\n-\t\tassertEquals(4L, (long) roleTO.getPasswordPolicy());\n-\n-\t\tassertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n-\n-\t\tConnObjectTO connObjectTO = resourceService.getConnector(\"resource-ldap\", AttributableType.ROLE, \"lastRole\");\n-\t\tassertNotNull(connObjectTO);\n-\t\tassertNotNull(connObjectTO.getAttributeMap().get(\"owner\"));\n-\t}\n-\n-\t@Test\n-\tpublic void createWithPasswordPolicy() {\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"roleWithPassword\");\n-\t\troleTO.setParent(8L);\n-\t\troleTO.setPasswordPolicy(4L);\n-\n-\t\tRoleTO actual = roleService.create(roleTO);\n-\t\tassertNotNull(actual);\n-\n-\t\tactual = roleService.read(actual.getId());\n-\t\tassertNotNull(actual);\n-\t\tassertNotNull(actual.getPasswordPolicy());\n-\t\tassertEquals(4L, (long) actual.getPasswordPolicy());\n-\t}\n-\n-\t@Test\n-\tpublic void delete() {\n-\t\ttry {\n-\t\t\troleService.delete(0L);\n-\t\t} catch (HttpStatusCodeException e) {\n-\t\t\tassertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-\t\t}\n-\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"toBeDeleted\");\n-\t\troleTO.setParent(8L);\n-\n-\t\troleTO.addResource(\"resource-ldap\");\n-\n-\t\troleTO = roleService.create(roleTO);\n-\t\tassertNotNull(roleTO);\n-\n-\t\tRoleTO deletedRole = roleService.delete(roleTO.getId());\n-\t\tassertNotNull(deletedRole);\n-\n-\t\ttry {\n-\t\t\troleService.read(deletedRole.getId());\n-\t\t} catch (HttpStatusCodeException e) {\n-\t\t\tassertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void list() {\n-\t\tList<RoleTO> roleTOs = roleService.list();\n-\t\tassertNotNull(roleTOs);\n-\t\tassertTrue(roleTOs.size() >= 8);\n-\t\tfor (RoleTO roleTO : roleTOs) {\n-\t\t\tassertNotNull(roleTO);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void parent() {\n-\t\tRoleTO roleTO = roleService.parent(7L);\n-\n-\t\tassertNotNull(roleTO);\n-\t\tassertEquals(roleTO.getId(), 6L);\n-\t}\n-\n-\t@Test\n-\tpublic void read() {\n-\t\tRoleTO roleTO = roleService.read(1L);\n-\n-\t\tassertNotNull(roleTO);\n-\t\tassertNotNull(roleTO.getAttributes());\n-\t\tassertFalse(roleTO.getAttributes().isEmpty());\n-\t}\n-\n-\t@Test\n-\tpublic void selfRead() {\n-\t\tUserTO userTO = userService.read(1L);\n-\t\tassertNotNull(userTO);\n-\n-\t\tassertTrue(userTO.getMembershipMap().containsKey(1L));\n-\t\tassertFalse(userTO.getMembershipMap().containsKey(3L));\n-\n-\t\tPreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n-\t\t\t\t.getRequestFactory();\n-\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n-\t\t\t\t.getCredentialsProvider().setCredentials(\n-\t\t\t\t\t\trequestFactory.getAuthScope(),\n-\t\t\t\t\t\tnew UsernamePasswordCredentials(\"user1\", \"password\"));\n-\n-\t\tSyncopeClientException exception = null;\n-\t\ttry {\n-\t\t\troleService.selfRead(3L);\n-\t\t\tfail();\n-\t\t} catch (SyncopeClientCompositeErrorException e) {\n-\t\t\texception = e\n-\t\t\t\t\t.getException(SyncopeClientExceptionType.UnauthorizedRole);\n-\t\t}\n-\t\tassertNotNull(exception);\n-\n-\t\tRoleTO roleTO = roleService.selfRead(1L);\n-\t\tassertNotNull(roleTO);\n-\t\tassertNotNull(roleTO.getAttributes());\n-\t\tassertFalse(roleTO.getAttributes().isEmpty());\n-\n-\t\t// restore admin authentication\n-\t\tsuper.resetRestTemplate();\n-\t}\n-\n-\t@Test\n-\tpublic void update() {\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"latestRole\");\n-\t\troleTO.setParent(8L);\n-\n-\t\t// verify inheritance password and account policies\n-\t\troleTO.setInheritAccountPolicy(false);\n-\t\t// not inherited so setter execution shouldn't be ignored\n-\t\troleTO.setAccountPolicy(6L);\n-\n-\t\troleTO.setInheritPasswordPolicy(true);\n-\t\t// inherited so setter execution should be ignored\n-\t\troleTO.setPasswordPolicy(2L);\n-\n-\t\troleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\n-\t\troleTO.addResource(\"resource-ldap\");\n-\n-\t\troleTO = roleService.create(roleTO);\n-\n-\t\tassertEquals(1, roleTO.getAttributes().size());\n-\n-\t\tassertNotNull(roleTO.getAccountPolicy());\n-\t\tassertEquals(Long.valueOf(6), roleTO.getAccountPolicy());\n-\n-\t\tassertNotNull(roleTO.getPasswordPolicy());\n-\t\tassertEquals(Long.valueOf(4), roleTO.getPasswordPolicy());\n-\n-\t\tRoleMod roleMod = new RoleMod();\n-\t\troleMod.setId(roleTO.getId());\n-\t\troleMod.setName(\"finalRole\");\n-\t\troleMod.addAttributeToBeUpdated(attributeMod(\"show\", \"FALSE\"));\n-\n-\t\t// change password policy inheritance\n-\t\troleMod.setInheritPasswordPolicy(Boolean.FALSE);\n-\n-\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n-\n-\t\tassertEquals(\"finalRole\", roleTO.getName());\n-\t\tassertEquals(2, roleTO.getAttributes().size());\n-\n-\t\t// changes ignored because not requested (null ReferenceMod)\n-\t\tassertNotNull(roleTO.getAccountPolicy());\n-\t\tassertEquals(6L, (long) roleTO.getAccountPolicy());\n-\n-\t\t// password policy null because not inherited\n-\t\tassertNull(roleTO.getPasswordPolicy());\n-\t}\n-\n-\t@Test\n-\tpublic void updateRemovingVirAttribute() {\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"withvirtual\");\n-\t\troleTO.setParent(8L);\n-\t\troleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", null));\n-\n-\t\troleTO = roleService.create(roleTO);\n-\n-\t\tassertNotNull(roleTO);\n-\t\tassertEquals(1, roleTO.getVirtualAttributes().size());\n-\n-\t\tfinal RoleMod roleMod = new RoleMod();\n-\t\troleMod.setId(roleTO.getId());\n-\t\troleMod.addVirtualAttributeToBeRemoved(\"rvirtualdata\");\n-\n-\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n-\n-\t\tassertNotNull(roleTO);\n-\t\tassertTrue(roleTO.getVirtualAttributes().isEmpty());\n-\t}\n-\n-\t@Test\n-\tpublic void updateRemovingDerAttribute() {\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"withderived\");\n-\t\troleTO.setParent(8L);\n-\t\troleTO.addDerivedAttribute(attributeTO(\"rderivedschema\", null));\n-\n-\t\troleTO = roleService.create(roleTO);\n-\n-\t\tassertNotNull(roleTO);\n-\t\tassertEquals(1, roleTO.getDerivedAttributes().size());\n-\n-\t\tfinal RoleMod roleMod = new RoleMod();\n-\t\troleMod.setId(roleTO.getId());\n-\t\troleMod.addDerivedAttributeToBeRemoved(\"rderivedschema\");\n-\n-\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n-\n-\t\tassertNotNull(roleTO);\n-\t\tassertTrue(roleTO.getDerivedAttributes().isEmpty());\n-\t}\n-\n-\t@Test\n-\tpublic void updateAsRoleOwner() {\n-\t\t// 1. read role as admin\n-\t\tRoleTO roleTO = roleService.read(7L);\n-\n-\t\t// 2. prepare update\n-\t\tRoleMod roleMod = new RoleMod();\n-\t\troleMod.setId(roleTO.getId());\n-\t\troleMod.setName(\"Managing Director\");\n-\n-\t\t// 3. try to update as user3, not owner of role 7 - fail\n-\t\tPreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n-\t\t\t\t.getRequestFactory();\n-\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n-\t\t\t\t.getCredentialsProvider().setCredentials(\n-\t\t\t\t\t\trequestFactory.getAuthScope(),\n-\t\t\t\t\t\tnew UsernamePasswordCredentials(\"user2\", \"password\"));\n-\n-\t\ttry {\n-\t\t\troleService.update(roleMod.getId(), roleMod);\n-\t\t\tfail();\n-\t\t} catch (HttpStatusCodeException e) {\n-\t\t\tassertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n-\t\t}\n-\n-\t\t// 4. update as user5, owner of role 7 because owner of role 6 with\n-\t\t// inheritance - success\n-\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n-\t\t\t\t.getCredentialsProvider().setCredentials(\n-\t\t\t\t\t\trequestFactory.getAuthScope(),\n-\t\t\t\t\t\tnew UsernamePasswordCredentials(\"user5\", \"password\"));\n-\n-\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n-\t\tassertEquals(\"Managing Director\", roleTO.getName());\n-\n-\t\t// restore admin authentication\n-\t\tsuper.resetRestTemplate();\n-\t}\n-\n-\t/**\n-\t * Role rename used to fail in case of parent null.\n-\t * \n-\t * http://code.google.com/p/syncope/issues/detail?id=178\n-\t */\n-\t@Test\n-\tpublic void issue178() {\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"torename\");\n-\n-\t\tRoleTO actual = roleService.create(roleTO);\n-\n-\t\tassertNotNull(actual);\n-\t\tassertEquals(\"torename\", actual.getName());\n-\t\tassertEquals(0L, actual.getParent());\n-\n-\t\tRoleMod roleMod = new RoleMod();\n-\t\troleMod.setId(actual.getId());\n-\t\troleMod.setName(\"renamed\");\n-\n-\t\tactual = roleService.update(roleMod.getId(), roleMod);;\n-\n-\t\tassertNotNull(actual);\n-\t\tassertEquals(\"renamed\", actual.getName());\n-\t\tassertEquals(0L, actual.getParent());\n-\t}\n-\n-\t@Test\n-\tpublic void issueSYNCOPE228() {\n-\t\tRoleTO roleTO = new RoleTO();\n-\t\troleTO.setName(\"issueSYNCOPE228\");\n-\t\troleTO.setParent(8L);\n-\t\troleTO.setInheritAccountPolicy(false);\n-\t\troleTO.setAccountPolicy(6L);\n-\t\troleTO.setInheritPasswordPolicy(true);\n-\t\troleTO.setPasswordPolicy(2L);\n-\t\troleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\t\troleTO.addEntitlement(\"USER_READ\");\n-\t\troleTO.addEntitlement(\"SCHEMA_READ\");\n-\n-\t\troleTO = roleService.create(roleTO);\n-\t\tassertNotNull(roleTO);\n-\t\tassertNotNull(roleTO.getEntitlements());\n-\t\tassertFalse(roleTO.getEntitlements().isEmpty());\n-\n-\t\tList<String> entitlements = roleTO.getEntitlements();\n-\n-\t\tRoleMod roleMod = new RoleMod();\n-\t\troleMod.setId(roleTO.getId());\n-\t\troleMod.setInheritDerivedAttributes(Boolean.TRUE);\n-\n-\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n-\t\tassertNotNull(roleTO);\n-\t\tassertEquals(entitlements, roleTO.getEntitlements());\n-\n-\t\troleMod = new RoleMod();\n-\t\troleMod.setId(roleTO.getId());\n-\t\troleMod.setEntitlements(new ArrayList<String>());\n-\n-\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n-\t\tassertNotNull(roleTO);\n-\t\tassertTrue(roleTO.getEntitlements().isEmpty());\n-\t}\n+    @Test\n+    public void createWithException() {\n+        RoleTO newRoleTO = new RoleTO();\n+        newRoleTO.addAttribute(attributeTO(\"attr1\", \"value1\"));\n+\n+        Throwable t = null;\n+        try {\n+            roleService.create(newRoleTO);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException sccee) {\n+            t = sccee.getException(SyncopeClientExceptionType.InvalidSyncopeRole);\n+        }\n+        assertNotNull(t);\n+    }\n+\n+    @Test\n+    public void create() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"lastRole\");\n+        roleTO.setParent(8L);\n+\n+        // verify inheritance password and account policies\n+        roleTO.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        roleTO.setAccountPolicy(6L);\n+\n+        roleTO.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        roleTO.setPasswordPolicy(2L);\n+\n+        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+\n+        roleTO.addDerivedAttribute(attributeTO(\"ownerDN\", null));\n+\n+        roleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", \"rvirtualvalue\"));\n+\n+        roleTO.setRoleOwner(8L);\n+\n+        roleTO.addResource(\"resource-ldap\");\n+\n+        roleTO = roleService.create(roleTO);\n+        assertNotNull(roleTO);\n+\n+        assertNotNull(roleTO.getVirtualAttributeMap());\n+        assertNotNull(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues());\n+        assertFalse(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues().isEmpty());\n+        assertEquals(\"rvirtualvalue\", roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues().get(0));\n+\n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        assertNotNull(roleTO.getPasswordPolicy());\n+        assertEquals(4L, (long) roleTO.getPasswordPolicy());\n+\n+        assertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n+\n+        ConnObjectTO connObjectTO = resourceService.getConnector(\"resource-ldap\", AttributableType.ROLE,\n+                \"lastRole\");\n+        assertNotNull(connObjectTO);\n+        assertNotNull(connObjectTO.getAttributeMap().get(\"owner\"));\n+    }\n+\n+    @Test\n+    public void createWithPasswordPolicy() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"roleWithPassword\");\n+        roleTO.setParent(8L);\n+        roleTO.setPasswordPolicy(4L);\n+\n+        RoleTO actual = roleService.create(roleTO);\n+        assertNotNull(actual);\n+\n+        actual = roleService.read(actual.getId());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+        assertEquals(4L, (long) actual.getPasswordPolicy());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        try {\n+            roleService.delete(0L);\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"toBeDeleted\");\n+        roleTO.setParent(8L);\n+\n+        roleTO.addResource(\"resource-ldap\");\n+\n+        roleTO = roleService.create(roleTO);\n+        assertNotNull(roleTO);\n+\n+        RoleTO deletedRole = roleService.delete(roleTO.getId());\n+        assertNotNull(deletedRole);\n+\n+        try {\n+            roleService.read(deletedRole.getId());\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<RoleTO> roleTOs = roleService.list();\n+        assertNotNull(roleTOs);\n+        assertTrue(roleTOs.size() >= 8);\n+        for (RoleTO roleTO : roleTOs) {\n+            assertNotNull(roleTO);\n+        }\n+    }\n+\n+    @Test\n+    public void parent() {\n+        RoleTO roleTO = roleService.parent(7L);\n+\n+        assertNotNull(roleTO);\n+        assertEquals(roleTO.getId(), 6L);\n+    }\n+\n+    @Test\n+    public void read() {\n+        RoleTO roleTO = roleService.read(1L);\n+\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getAttributes());\n+        assertFalse(roleTO.getAttributes().isEmpty());\n+    }\n+\n+    @Test\n+    public void selfRead() {\n+        UserTO userTO = userService.read(1L);\n+        assertNotNull(userTO);\n+\n+        assertTrue(userTO.getMembershipMap().containsKey(1L));\n+        assertFalse(userTO.getMembershipMap().containsKey(3L));\n+\n+        PreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n+                .getRequestFactory();\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n+\n+        SyncopeClientException exception = null;\n+        try {\n+            roleService.selfRead(3L);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n+        }\n+        assertNotNull(exception);\n+\n+        RoleTO roleTO = roleService.selfRead(1L);\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getAttributes());\n+        assertFalse(roleTO.getAttributes().isEmpty());\n+\n+        // restore admin authentication\n+        super.resetRestTemplate();\n+    }\n+\n+    @Test\n+    public void update() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"latestRole\");\n+        roleTO.setParent(8L);\n+\n+        // verify inheritance password and account policies\n+        roleTO.setInheritAccountPolicy(false);\n+        // not inherited so setter execution shouldn't be ignored\n+        roleTO.setAccountPolicy(6L);\n+\n+        roleTO.setInheritPasswordPolicy(true);\n+        // inherited so setter execution should be ignored\n+        roleTO.setPasswordPolicy(2L);\n+\n+        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+\n+        roleTO.addResource(\"resource-ldap\");\n+\n+        roleTO = roleService.create(roleTO);\n+\n+        assertEquals(1, roleTO.getAttributes().size());\n+\n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        assertNotNull(roleTO.getPasswordPolicy());\n+        assertEquals(4L, (long) roleTO.getPasswordPolicy());\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setName(\"finalRole\");\n+        roleMod.addAttributeToBeUpdated(attributeMod(\"show\", \"FALSE\"));\n+\n+        // change password policy inheritance\n+        roleMod.setInheritPasswordPolicy(Boolean.FALSE);\n+\n+        roleTO = roleService.update(roleMod.getId(), roleMod);\n+\n+        assertEquals(\"finalRole\", roleTO.getName());\n+        assertEquals(2, roleTO.getAttributes().size());\n+\n+        // changes ignored because not requested (null ReferenceMod)\n+        assertNotNull(roleTO.getAccountPolicy());\n+        assertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+        // password policy null because not inherited\n+        assertNull(roleTO.getPasswordPolicy());\n+    }\n+\n+    @Test\n+    public void updateRemovingVirAttribute() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"withvirtual\");\n+        roleTO.setParent(8L);\n+        roleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", null));\n+\n+        roleTO = roleService.create(roleTO);\n+\n+        assertNotNull(roleTO);\n+        assertEquals(1, roleTO.getVirtualAttributes().size());\n+\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.addVirtualAttributeToBeRemoved(\"rvirtualdata\");\n+\n+        roleTO = roleService.update(roleMod.getId(), roleMod);\n+\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getVirtualAttributes().isEmpty());\n+    }\n+\n+    @Test\n+    public void updateRemovingDerAttribute() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"withderived\");\n+        roleTO.setParent(8L);\n+        roleTO.addDerivedAttribute(attributeTO(\"rderivedschema\", null));\n+\n+        roleTO = roleService.create(roleTO);\n+\n+        assertNotNull(roleTO);\n+        assertEquals(1, roleTO.getDerivedAttributes().size());\n+\n+        final RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.addDerivedAttributeToBeRemoved(\"rderivedschema\");\n+\n+        roleTO = roleService.update(roleMod.getId(), roleMod);\n+\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getDerivedAttributes().isEmpty());\n+    }\n+\n+    @Test\n+    public void updateAsRoleOwner() {\n+        // 1. read role as admin\n+        RoleTO roleTO = roleService.read(7L);\n+\n+        // 2. prepare update\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setName(\"Managing Director\");\n+\n+        // 3. try to update as user3, not owner of role 7 - fail\n+        PreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n+                .getRequestFactory();\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user2\", \"password\"));\n+\n+        try {\n+            roleService.update(roleMod.getId(), roleMod);\n+            fail();\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+        }\n+\n+        // 4. update as user5, owner of role 7 because owner of role 6 with\n+        // inheritance - success\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user5\", \"password\"));\n+\n+        roleTO = roleService.update(roleMod.getId(), roleMod);\n+        assertEquals(\"Managing Director\", roleTO.getName());\n+\n+        // restore admin authentication\n+        super.resetRestTemplate();\n+    }\n+\n+    /**\n+     * Role rename used to fail in case of parent null.\n+     *\n+     * http://code.google.com/p/syncope/issues/detail?id=178\n+     */\n+    @Test\n+    public void issue178() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"torename\");\n+\n+        RoleTO actual = roleService.create(roleTO);\n+\n+        assertNotNull(actual);\n+        assertEquals(\"torename\", actual.getName());\n+        assertEquals(0L, actual.getParent());\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setId(actual.getId());\n+        roleMod.setName(\"renamed\");\n+\n+        actual = roleService.update(roleMod.getId(), roleMod);\n+        ;\n+\n+        assertNotNull(actual);\n+        assertEquals(\"renamed\", actual.getName());\n+        assertEquals(0L, actual.getParent());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE228() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"issueSYNCOPE228\");\n+        roleTO.setParent(8L);\n+        roleTO.setInheritAccountPolicy(false);\n+        roleTO.setAccountPolicy(6L);\n+        roleTO.setInheritPasswordPolicy(true);\n+        roleTO.setPasswordPolicy(2L);\n+        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+        roleTO.addEntitlement(\"USER_READ\");\n+        roleTO.addEntitlement(\"SCHEMA_READ\");\n+\n+        roleTO = roleService.create(roleTO);\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getEntitlements());\n+        assertFalse(roleTO.getEntitlements().isEmpty());\n+\n+        List<String> entitlements = roleTO.getEntitlements();\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setInheritDerivedAttributes(Boolean.TRUE);\n+\n+        roleTO = roleService.update(roleMod.getId(), roleMod);\n+        assertNotNull(roleTO);\n+        assertEquals(entitlements, roleTO.getEntitlements());\n+\n+        roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setEntitlements(new ArrayList<String>());\n+\n+        roleTO = roleService.update(roleMod.getId(), roleMod);\n+        assertNotNull(roleTO);\n+        assertTrue(roleTO.getEntitlements().isEmpty());\n+    }\n }"},{"sha":"f7b76a5896172ec73deea748aa313ae92a8496e6","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":85,"deletions":99,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f559327149941c026c935a93ec6c1c56058651b2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f559327149941c026c935a93ec6c1c56058651b2","patch":"@@ -18,9 +18,15 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import java.util.Arrays;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.util.List;\n import java.util.Set;\n+\n import org.apache.syncope.client.search.AttributableCond;\n import org.apache.syncope.client.search.MembershipCond;\n import org.apache.syncope.client.search.NodeCond;\n@@ -40,11 +46,6 @@\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.TraceLevel;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -55,22 +56,20 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class TaskTestITCase extends AbstractTest {\n \n-    private static final int SCHED_TASK_ID = 5;\n+    private static final Long SCHED_TASK_ID = 5L;\n \n-    private static final int SYNC_TASK_ID = 4;\n+    private static final Long SYNC_TASK_ID = 4L;\n \n     @Test\n-    @SuppressWarnings(\"unchecked\")\n     public void getJobClasses() {\n-        Set<String> jobClasses = restTemplate.getForObject(BASE_URL + \"task/jobClasses.json\", Set.class);\n+        Set<String> jobClasses = taskService.getJobClasses();\n         assertNotNull(jobClasses);\n         assertFalse(jobClasses.isEmpty());\n     }\n \n     @Test\n-    @SuppressWarnings(\"unchecked\")\n     public void getSyncActionsClasses() {\n-        Set<String> actions = restTemplate.getForObject(BASE_URL + \"task/syncActionsClasses.json\", Set.class);\n+        Set<String> actions = taskService.getSyncActionsClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }\n@@ -92,10 +91,10 @@ public void create() {\n         roleTemplate.addResource(\"resource-ldap\");\n         task.setRoleTemplate(roleTemplate);\n \n-        SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/create/sync\", task, SyncTaskTO.class);\n+        SyncTaskTO actual = taskService.create(task);\n         assertNotNull(actual);\n \n-        task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, actual.getId());\n+        task = taskService.read(actual.getId(), SyncTaskTO.class);\n         assertNotNull(task);\n         assertEquals(actual.getId(), task.getId());\n         assertEquals(actual.getJobClassName(), task.getJobClassName());\n@@ -105,30 +104,30 @@ public void create() {\n \n     @Test\n     public void update() {\n-        SchedTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SchedTaskTO.class, SCHED_TASK_ID);\n+        SchedTaskTO task = taskService.read(SCHED_TASK_ID, SchedTaskTO.class);\n         assertNotNull(task);\n \n         SchedTaskTO taskMod = new SchedTaskTO();\n         taskMod.setId(5);\n         taskMod.setCronExpression(null);\n \n-        SchedTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sched\", taskMod, SchedTaskTO.class);\n+        SchedTaskTO actual = taskService.update(taskMod.getId(), taskMod);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertNull(actual.getCronExpression());\n     }\n \n     @Test\n     public void count() {\n-        Integer count = restTemplate.getForObject(BASE_URL + \"task/propagation/count.json\", Integer.class);\n+        Integer count = taskService.count(\"propagation\");\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n     public void list() {\n-        List<PropagationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list\",\n-                PropagationTaskTO[].class));\n+        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n         for (TaskTO task : tasks) {\n@@ -138,8 +137,7 @@ public void list() {\n \n     @Test\n     public void paginatedList() {\n-        List<PropagationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"task/propagation/list/{page}/{size}.json\", PropagationTaskTO[].class, 1, 2));\n+        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", 1, 2, PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -149,8 +147,7 @@ public void paginatedList() {\n             assertNotNull(task);\n         }\n \n-        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list/{page}/{size}.json\",\n-                PropagationTaskTO[].class, 2, 2));\n+        tasks = taskService.list(\"propagation\", 2, 2, PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -159,17 +156,15 @@ public void paginatedList() {\n             assertNotNull(task);\n         }\n \n-        tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/propagation/list/{page}/{size}.json\",\n-                PropagationTaskTO[].class, 100, 2));\n+        tasks = taskService.list(\"propagation\", 100, 2, PropagationTaskTO[].class);\n \n         assertNotNull(tasks);\n         assertTrue(tasks.isEmpty());\n     }\n \n     @Test\n     public void listExecutions() {\n-        List<TaskExecTO> executions = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"task/propagation/execution/list\", TaskExecTO[].class));\n+        List<TaskExecTO> executions = taskService.listExecutions(\"propagation\");\n         assertNotNull(executions);\n         assertFalse(executions.isEmpty());\n         for (TaskExecTO execution : executions) {\n@@ -179,8 +174,7 @@ public void listExecutions() {\n \n     @Test\n     public void read() {\n-        PropagationTaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class,\n-                3);\n+        PropagationTaskTO taskTO = taskService.read(3L, PropagationTaskTO.class);\n \n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n@@ -189,28 +183,27 @@ public void read() {\n \n     @Test\n     public void readExecution() {\n-        TaskExecTO taskTO = restTemplate.getForObject(BASE_URL + \"task/execution/read/{taskId}\", TaskExecTO.class, 1);\n+        TaskExecTO taskTO = taskService.readExecution(1L);\n         assertNotNull(taskTO);\n     }\n \n     @Test\n     public void deal() {\n         try {\n-            restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", TaskTO.class, 0);\n+            taskService.delete(0L, TaskTO.class);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n-        TaskExecTO exec = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 1);\n+        TaskExecTO exec = taskService.execute(1L, false);\n         assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), exec.getStatus());\n \n-        exec = restTemplate.getForObject(BASE_URL + \"task/execution/report/{executionId}\"\n-                + \"?executionStatus=SUCCESS&message=OK\", TaskExecTO.class, exec.getId());\n+        exec = taskService.report(exec.getId(), PropagationTaskExecStatus.SUCCESS, \"OK\");\n         assertEquals(PropagationTaskExecStatus.SUCCESS.name(), exec.getStatus());\n         assertEquals(\"OK\", exec.getMessage());\n \n-        restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", PropagationTaskTO.class, 1);\n+        taskService.delete(1L, PropagationTaskTO.class);\n         try {\n-            restTemplate.getForObject(BASE_URL + \"task/execution/read/{executionId}\", TaskExecTO.class, exec.getId());\n+            taskService.readExecution(exec.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -232,23 +225,24 @@ public void sync() {\n         userTO.addAttribute(attributeTO(\"email\", \"user5@syncope.apache.org\"));\n         userTO.addDerivedAttribute(attributeTO(\"csvuserid\", null));\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         //-----------------------------\n \n-        Integer usersPre = restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n+        int usersPre = userService.count();\n         assertNotNull(usersPre);\n \n         // Update sync task\n-        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, SYNC_TASK_ID);\n+        SyncTaskTO task = taskService.read(SYNC_TASK_ID, SyncTaskTO.class);\n         assertNotNull(task);\n \n         //  add custom SyncJob actions\n         task.setActionsClassName(TestSyncActions.class.getName());\n \n         //  add user template\n         UserTO template = new UserTO();\n-        template.addAttribute(attributeTO(\"type\", \"email == 'test8@syncope.apache.org'? 'TYPE_8': 'TYPE_OTHER'\"));\n+        template.addAttribute(attributeTO(\"type\",\n+                \"email == 'test8@syncope.apache.org'? 'TYPE_8': 'TYPE_OTHER'\"));\n         template.addDerivedAttribute(attributeTO(\"cn\", null));\n         template.addResource(\"resource-testdb\");\n \n@@ -259,25 +253,27 @@ public void sync() {\n \n         task.setUserTemplate(template);\n \n-        SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n+        SyncTaskTO actual = taskService.update(task.getId(), task);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertEquals(TestSyncActions.class.getName(), actual.getActionsClassName());\n \n         execTask(SyncTaskTO.class, SYNC_TASK_ID, 50, false);\n \n-        // after execution of the sync task the user data should be synced from \n+        // after execution of the sync task the user data should be synced from\n         // csv datasource and processed by user template\n-        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+        userTO = userService.read(userTO.getId());\n         assertNotNull(userTO);\n         assertEquals(\"test9\", userTO.getUsername());\n-        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers()\n+                ? \"active\"\n+                : \"created\", userTO.getStatus());\n         assertEquals(\"test9@syncope.apache.org\", userTO.getAttributeMap().get(\"email\").getValues().get(0));\n         assertEquals(\"test9@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n         assertTrue(Integer.valueOf(userTO.getAttributeMap().get(\"fullname\").getValues().get(0)) <= 10);\n \n         // check for user template\n-        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test7\");\n+        userTO = userService.read(\"test7\");\n         assertNotNull(userTO);\n         assertEquals(\"TYPE_OTHER\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n         assertEquals(2, userTO.getResources().size());\n@@ -286,32 +282,32 @@ public void sync() {\n         assertEquals(1, userTO.getMemberships().size());\n         assertTrue(userTO.getMemberships().get(0).getAttributeMap().containsKey(\"subscriptionDate\"));\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test8\");\n+        userTO = userService.read(\"test8\");\n         assertNotNull(userTO);\n         assertEquals(\"TYPE_8\", userTO.getAttributeMap().get(\"type\").getValues().get(0));\n \n         // check for sync results\n-        Integer usersPost = restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n+        int usersPost = userService.count();\n         assertNotNull(usersPost);\n-        assertEquals(usersPre.intValue() + 9, usersPost.intValue());\n+        assertEquals(usersPre + 9, usersPost);\n \n         // Check for issue 215:\n         // * expected disabled user test1\n         // * expected enabled user test2\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test1\");\n+        userTO = userService.read(\"test1\");\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"test3\");\n+        userTO = userService.read(\"test3\");\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n     }\n \n     @Test\n     public void reconcileUsers() {\n         // Update sync task\n-        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 7);\n+        SyncTaskTO task = taskService.read(7L, SyncTaskTO.class);\n         assertNotNull(task);\n \n         //  add user template\n@@ -323,7 +319,7 @@ public void reconcileUsers() {\n \n         task.setUserTemplate(template);\n \n-        SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n+        SyncTaskTO actual = taskService.update(task.getId(), task);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertEquals(template, actual.getUserTemplate());\n@@ -335,16 +331,16 @@ public void reconcileUsers() {\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n-        final UserTO userTO =\n-                restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"testuser1\");\n+        final UserTO userTO = userService.read(\"testuser1\");\n         assertNotNull(userTO);\n-        assertEquals(\"reconciled@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n+        assertEquals(\"reconciled@syncope.apache.org\",\n+                userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n     }\n \n     @Test\n     public void reconcileRoles() {\n         // Update sync task\n-        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 11);\n+        SyncTaskTO task = taskService.read(11L, SyncTaskTO.class);\n         assertNotNull(task);\n \n         //  add user template\n@@ -354,7 +350,7 @@ public void reconcileRoles() {\n \n         task.setRoleTemplate(template);\n \n-        SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n+        SyncTaskTO actual = taskService.update(task.getId(), task);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertEquals(template, actual.getRoleTemplate());\n@@ -371,8 +367,7 @@ public void reconcileRoles() {\n         final AttributableCond rolenameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n         rolenameLeafCond.setSchema(\"name\");\n         rolenameLeafCond.setExpression(\"testLDAPGroup\");\n-        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n-                NodeCond.getLeafCond(rolenameLeafCond), RoleTO[].class));\n+        final List<RoleTO> matchingRoles = roleService.search(NodeCond.getLeafCond(rolenameLeafCond));\n         assertNotNull(matchingRoles);\n         assertEquals(1, matchingRoles.size());\n \n@@ -385,15 +380,14 @@ public void reconcileRoles() {\n         // 3. verify that LDAP group membership is propagated as Syncope role membership\n         final MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(roleTO.getId());\n-        final List<UserTO> members = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\",\n-                NodeCond.getLeafCond(membershipCond), UserTO[].class));\n+        final List<UserTO> members = userService.search(NodeCond.getLeafCond(membershipCond));\n         assertNotNull(members);\n         assertEquals(1, members.size());\n     }\n \n     @Test\n     public void issue196() {\n-        TaskExecTO exec = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n+        TaskExecTO exec = taskService.execute(6L, false);\n         assertNotNull(exec);\n         assertEquals(0, exec.getId());\n         assertNotNull(exec.getTask());\n@@ -402,23 +396,22 @@ public void issue196() {\n     @Test\n     public void dryRun() {\n         TaskExecTO execution = execTask(SyncTaskTO.class, SYNC_TASK_ID, 50, true);\n-        assertEquals(\"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n+        assertEquals(\n+                \"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n                 \"SUCCESS\", execution.getStatus());\n     }\n \n     @Test\n     public void issueSYNCOPE81() {\n-        NotificationTaskTO taskTO = restTemplate.getForObject(\n-                BASE_URL + \"task/read/{taskId}\", NotificationTaskTO.class, 8L);\n+        NotificationTaskTO taskTO = taskService.read(8L, NotificationTaskTO.class);\n         assertNotNull(taskTO);\n \n         int executions = taskTO.getExecutions().size();\n \n         if (executions == 0) {\n             // generate an execution in order to verify the deletion of a notification task with one or more executions\n \n-            TaskExecTO execution = restTemplate.postForObject(\n-                    BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, taskTO.getId());\n+            TaskExecTO execution = taskService.execute(taskTO.getId(), false);\n             assertEquals(\"NOT_SENT\", execution.getStatus());\n \n             int i = 0;\n@@ -431,8 +424,7 @@ public void issueSYNCOPE81() {\n                 } catch (InterruptedException e) {\n                 }\n \n-                taskTO = restTemplate.getForObject(\n-                        BASE_URL + \"task/read/{taskId}\", NotificationTaskTO.class, taskTO.getId());\n+                taskTO = taskService.read(taskTO.getId(), NotificationTaskTO.class);\n \n                 assertNotNull(taskTO);\n                 assertNotNull(taskTO.getExecutions());\n@@ -443,7 +435,7 @@ public void issueSYNCOPE81() {\n             assertFalse(taskTO.getExecutions().isEmpty());\n         }\n \n-        taskTO = restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", NotificationTaskTO.class, taskTO.getId());\n+        taskTO = taskService.delete(taskTO.getId(), NotificationTaskTO.class);\n         assertNotNull(taskTO);\n     }\n \n@@ -472,8 +464,8 @@ public void issueSYNCOPE86() {\n         notification.setSubject(subject);\n         notification.setTemplate(\"optin\");\n \n-        notification = restTemplate.postForObject(BASE_URL + \"notification/create.json\",\n-                notification, NotificationTO.class);\n+        notification = restTemplate.postForObject(BASE_URL + \"notification/create.json\", notification,\n+                NotificationTO.class);\n         assertNotNull(notification);\n \n         // 2. create user\n@@ -482,12 +474,11 @@ public void issueSYNCOPE86() {\n         membershipTO.setRoleId(7);\n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n \n         // 3. get NotificationTaskTO for user just created\n-        List<NotificationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/notification/list\",\n-                NotificationTaskTO[].class));\n+        List<NotificationTaskTO> tasks = taskService.list(\"notification\", NotificationTaskTO[].class);\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n@@ -501,13 +492,11 @@ public void issueSYNCOPE86() {\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n         // 4. execute the generated NotificationTask\n-        TaskExecTO execution = restTemplate.postForObject(\n-                BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, taskTO.getId());\n+        TaskExecTO execution = taskService.execute(taskTO.getId(), false);\n         assertNotNull(execution);\n \n         // 5. verify\n-        taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", NotificationTaskTO.class,\n-                taskTO.getId());\n+        taskTO = taskService.read(taskTO.getId(), NotificationTaskTO.class);\n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());\n     }\n@@ -536,7 +525,7 @@ public void issueSYNCOPE68() {\n \n         userTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        userTO = userService.create(userTO);\n         assertNotNull(userTO);\n         assertEquals(\"testuser2\", userTO.getUsername());\n         assertEquals(1, userTO.getMemberships().size());\n@@ -557,12 +546,12 @@ public void issueSYNCOPE68() {\n         //-----------------------------\n \n         // Update sync task\n-        SyncTaskTO task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 9);\n+        SyncTaskTO task = taskService.read(9L, SyncTaskTO.class);\n         assertNotNull(task);\n \n         task.setUserTemplate(template);\n \n-        SyncTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/update/sync\", task, SyncTaskTO.class);\n+        SyncTaskTO actual = taskService.update(task.getId(), task);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n         assertFalse(actual.getUserTemplate().getResources().isEmpty());\n@@ -573,9 +562,10 @@ public void issueSYNCOPE68() {\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"testuser2\");\n+        userTO = userService.read(\"testuser2\");\n         assertNotNull(userTO);\n-        assertEquals(\"testuser2@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n+        assertEquals(\"testuser2@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues()\n+                .get(0));\n         assertEquals(2, userTO.getMemberships().size());\n         assertEquals(4, userTO.getResources().size());\n     }\n@@ -587,20 +577,20 @@ public void issueSYNCOPE144() {\n         task.setDescription(\"issueSYNCOPE144 Description\");\n         task.setJobClassName(SyncJob.class.getName());\n \n-        SchedTaskTO actual = restTemplate.postForObject(BASE_URL + \"task/create/sched\", task, SchedTaskTO.class);\n+        SchedTaskTO actual = taskService.create(task);\n         assertNotNull(actual);\n         assertEquals(\"issueSYNCOPE144\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n \n-        task = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", SchedTaskTO.class, actual.getId());\n+        task = taskService.read(actual.getId(), SchedTaskTO.class);\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144\", task.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n \n         task.setName(\"issueSYNCOPE144_2\");\n         task.setDescription(\"issueSYNCOPE144 Description_2\");\n \n-        actual = restTemplate.postForObject(BASE_URL + \"task/create/sched\", task, SchedTaskTO.class);\n+        actual = taskService.create(task);\n         assertNotNull(actual);\n         assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n@@ -609,11 +599,10 @@ public void issueSYNCOPE144() {\n     @Test\n     public void issueSYNCOPE230() {\n         // 1. read SyncTask for resource-db-sync (table TESTSYNC on external H2)\n-        execTask(SyncTaskTO.class, 10, 20, false);\n+        execTask(SyncTaskTO.class, 10L, 20, false);\n \n         // 3. read e-mail address for user created by the SyncTask first execution\n-        UserTO userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"issuesyncope230\");\n+        UserTO userTO = userService.read(\"issuesyncope230\");\n         assertNotNull(userTO);\n         String email = userTO.getAttributeMap().get(\"email\").getValues().iterator().next();\n         assertNotNull(email);\n@@ -623,28 +612,25 @@ public void issueSYNCOPE230() {\n         jdbcTemplate.execute(\"UPDATE TESTSYNC SET email='updatedSYNCOPE230@syncope.apache.org'\");\n \n         // 5. re-execute the SyncTask\n-        execTask(SyncTaskTO.class, 10, 20, false);\n+        execTask(SyncTaskTO.class, 10L, 20, false);\n \n         // 6. verify that the e-mail was updated\n-        userTO = restTemplate.getForObject(\n-                BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class, \"issuesyncope230\");\n+        userTO = userService.read(\"issuesyncope230\");\n         assertNotNull(userTO);\n         email = userTO.getAttributeMap().get(\"email\").getValues().iterator().next();\n         assertNotNull(email);\n         assertEquals(\"updatedSYNCOPE230@syncope.apache.org\", email);\n     }\n \n-    private TaskExecTO execTask(final Class<? extends TaskTO> taskClass, final long taskId,\n+    private TaskExecTO execTask(final Class<? extends TaskTO> taskClass, final Long taskId,\n             final int maxWaitSeconds, final boolean dryRun) {\n \n-        TaskTO taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", taskClass, taskId);\n+        TaskTO taskTO = taskService.read(taskId, taskClass);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n         int preSyncSize = taskTO.getExecutions().size();\n-        TaskExecTO execution = restTemplate.postForObject(\n-                BASE_URL + \"task/execute/{taskId}\" + (dryRun ? \"?dryRun=true\" : \"\"), null,\n-                TaskExecTO.class, taskTO.getId());\n+        TaskExecTO execution = taskService.execute(taskTO.getId(), dryRun);\n         assertEquals(\"JOB_FIRED\", execution.getStatus());\n \n         int i = 0;\n@@ -657,7 +643,7 @@ private TaskExecTO execTask(final Class<? extends TaskTO> taskClass, final long\n             } catch (InterruptedException e) {\n             }\n \n-            taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", taskClass, taskTO.getId());\n+            taskTO = taskService.read(taskTO.getId(), taskClass);\n \n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getExecutions());"}]}