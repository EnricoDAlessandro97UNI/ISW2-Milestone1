{"sha":"f292d86ab845a7d0a50327a4eaf1179352ce2f95","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyOTJkODZhYjg0NWE3ZDBhNTAzMjdhNGVhZjExNzkzNTJjZTJmOTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-20T11:03:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-20T11:12:08Z"},"message":"[SYNCOPE-1210] Random password generation during propagation is now correctly resource-based","tree":{"sha":"2639e1646b09972280582d720405a1285f1b1862","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2639e1646b09972280582d720405a1285f1b1862"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f292d86ab845a7d0a50327a4eaf1179352ce2f95","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f292d86ab845a7d0a50327a4eaf1179352ce2f95","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f292d86ab845a7d0a50327a4eaf1179352ce2f95","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f292d86ab845a7d0a50327a4eaf1179352ce2f95/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"220a9464233cd9872ba6763fdf6f4fdf867d2581","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/220a9464233cd9872ba6763fdf6f4fdf867d2581","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/220a9464233cd9872ba6763fdf6f4fdf867d2581"}],"stats":{"total":87,"additions":27,"deletions":60},"files":[{"sha":"5400c31636885b46a4728c56c0fb1e53b0418169","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":9,"deletions":23,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=f292d86ab845a7d0a50327a4eaf1179352ce2f95","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -50,6 +51,9 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Test\n     public void findAll() {\n         List<User> list = userDAO.findAll(1, 100);\n@@ -205,35 +209,17 @@ public void issueSYNCOPE391() {\n         assertNotNull(actual);\n     }\n \n-    @Test\n-    public void issueSYNCOPE226() {\n-        User user = userDAO.find(\"823074dc-d280-436d-a7dd-07399fae48ec\");\n-        String password = \"\";\n-        try {\n-            password = passwordGenerator.generate(user);\n-        } catch (InvalidPasswordRuleConf ex) {\n-            fail(ex.getMessage());\n-        }\n-        assertNotNull(password);\n-\n-        user.setPassword(password, CipherAlgorithm.AES);\n-\n-        User actual = userDAO.save(user);\n-        assertNotNull(actual);\n-    }\n-\n     @Test\n     public void testPasswordGenerator() {\n-        User user = userDAO.find(\"823074dc-d280-436d-a7dd-07399fae48ec\");\n-\n         String password = \"\";\n         try {\n-            password = passwordGenerator.generate(user);\n-\n-        } catch (InvalidPasswordRuleConf ex) {\n-            fail(ex.getMessage());\n+            password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n+        } catch (InvalidPasswordRuleConf e) {\n+            fail(e.getMessage());\n         }\n         assertNotNull(password);\n+\n+        User user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n         user.setPassword(password, CipherAlgorithm.SHA);\n         userDAO.save(user);\n     }"},{"sha":"f6e5af194c1db029c7c2516f83edfa37322df705","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=f292d86ab845a7d0a50327a4eaf1179352ce2f95","patch":"@@ -152,15 +152,15 @@ default SyncDelta beforeLink(\n      * @param <P> any object modifications\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param entityTO entity\n+     * @param entity entity\n      * @param anyPatch modification\n      * @return pull information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure.\n      */\n     default <P extends AnyPatch> SyncDelta beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            EntityTO entityTO,\n+            EntityTO entity,\n             P anyPatch) throws JobExecutionException {\n \n         return delta;"},{"sha":"640aaba1bb8109ba00466462031b6c2049bdbe1b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=f292d86ab845a7d0a50327a4eaf1179352ce2f95","patch":"@@ -359,7 +359,7 @@ private Pair<String, Attribute> prepareAttr(\n                         }\n                     } else if (provision.getResource().isRandomPwdIfNotProvided()) {\n                         try {\n-                            passwordAttrValue = passwordGenerator.generate(user);\n+                            passwordAttrValue = passwordGenerator.generate(provision.getResource());\n                         } catch (InvalidPasswordRuleConf e) {\n                             LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n                         }"},{"sha":"93c750ce8059ff04cfbeda6ebfdf805933e0346b","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultPasswordGenerator.java","status":"modified","additions":13,"deletions":30,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java?ref=f292d86ab845a7d0a50327a4eaf1179352ce2f95","patch":"@@ -24,13 +24,9 @@\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.PolicyPattern;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * Generate random passwords according to given policies.\n@@ -46,28 +42,15 @@ public class DefaultPasswordGenerator implements PasswordGenerator {\n \n     private static final int VERY_MAX_LENGTH = 64;\n \n-    private static final int MIN_LENGTH_IF_ZERO = 6;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n+    private static final int MIN_LENGTH_IF_ZERO = 8;\n \n+    @Transactional(readOnly = true)\n     @Override\n-    public String generate(final User user) throws InvalidPasswordRuleConf {\n+    public String generate(final ExternalResource resource) throws InvalidPasswordRuleConf {\n         List<PasswordRuleConf> ruleConfs = new ArrayList<>();\n \n-        for (Realm ancestor : realmDAO.findAncestors(user.getRealm())) {\n-            if (ancestor.getPasswordPolicy() != null) {\n-                ruleConfs.addAll(ancestor.getPasswordPolicy().getRuleConfs());\n-            }\n-        }\n-\n-        for (ExternalResource resource : userDAO.findAllResources(user)) {\n-            if (resource.getPasswordPolicy() != null) {\n-                ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n-            }\n+        if (resource.getPasswordPolicy() != null) {\n+            ruleConfs.addAll(resource.getPasswordPolicy().getRuleConfs());\n         }\n \n         return generate(ruleConfs);\n@@ -76,11 +59,11 @@ public String generate(final User user) throws InvalidPasswordRuleConf {\n     @Override\n     public String generate(final List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf {\n         List<DefaultPasswordRuleConf> defaultRuleConfs = new ArrayList<>();\n-        for (PasswordRuleConf ruleConf : ruleConfs) {\n-            if (ruleConf instanceof DefaultPasswordRuleConf) {\n-                defaultRuleConfs.add((DefaultPasswordRuleConf) ruleConf);\n-            }\n-        }\n+        ruleConfs.stream().\n+                filter(ruleConf -> (ruleConf instanceof DefaultPasswordRuleConf)).\n+                forEachOrdered(ruleConf -> {\n+                    defaultRuleConfs.add((DefaultPasswordRuleConf) ruleConf);\n+                });\n \n         DefaultPasswordRuleConf ruleConf = merge(defaultRuleConfs);\n         check(ruleConf);\n@@ -92,7 +75,7 @@ private DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleConf> defaul\n         result.setMinLength(VERY_MIN_LENGTH);\n         result.setMaxLength(VERY_MAX_LENGTH);\n \n-        for (DefaultPasswordRuleConf ruleConf : defaultRuleConfs) {\n+        defaultRuleConfs.forEach(ruleConf -> {\n             if (ruleConf.getMinLength() > result.getMinLength()) {\n                 result.setMinLength(ruleConf.getMinLength());\n             }\n@@ -159,7 +142,7 @@ private DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleConf> defaul\n             if (!result.isUsernameAllowed()) {\n                 result.setUsernameAllowed(ruleConf.isUsernameAllowed());\n             }\n-        }\n+        });\n \n         if (result.getMinLength() == 0) {\n             result.setMinLength("},{"sha":"06b73e46abdc1f1df43bcd602af3eedd5deb92cf","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/PasswordGenerator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java?ref=f292d86ab845a7d0a50327a4eaf1179352ce2f95","patch":"@@ -20,12 +20,12 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n \n public interface PasswordGenerator {\n \n-    String generate(User user) throws InvalidPasswordRuleConf;\n+    String generate(ExternalResource resource) throws InvalidPasswordRuleConf;\n \n     String generate(List<PasswordRuleConf> ruleConfs) throws InvalidPasswordRuleConf;\n "},{"sha":"a18ef159672aafcfdc9b8960b086428cb1176efe","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/PasswordGeneratorTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f292d86ab845a7d0a50327a4eaf1179352ce2f95/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java?ref=f292d86ab845a7d0a50327a4eaf1179352ce2f95","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import org.apache.syncope.core.spring.security.DefaultPasswordGenerator;\n-\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;"}]}