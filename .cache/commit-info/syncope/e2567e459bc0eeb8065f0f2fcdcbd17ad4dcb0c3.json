{"sha":"e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUyNTY3ZTQ1OWJjMGVlYjgwNjVmMGYyZmNkY2JkMTdhZDRkY2IwYzM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-20T17:04:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-01-20T17:06:07Z"},"message":"[SYNCOPE-999] Adjusting Spring Security configuration and REST exception mapping","tree":{"sha":"977cfb832ccb58f8edb0919605ff3f0bf6045431","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/977cfb832ccb58f8edb0919605ff3f0bf6045431"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ef65d83cf867044f0b859e8691728cefcd3f651f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ef65d83cf867044f0b859e8691728cefcd3f651f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ef65d83cf867044f0b859e8691728cefcd3f651f"}],"stats":{"total":84,"additions":36,"deletions":48},"files":[{"sha":"2818c7b628e8e67b099d10747bb2b9b9e611d2a8","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","patch":"@@ -24,9 +24,9 @@\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n-import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n@@ -40,43 +40,39 @@\n import org.slf4j.LoggerFactory;\n \n @Provider\n-public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n+public class RestClientExceptionMapper implements ResponseExceptionMapper<Exception> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\n \n-    @Override\n-    public Response toResponse(final Exception exception) {\n-        throw new UnsupportedOperationException(\n-                \"Call of toResponse() method is not expected in \" + RestClientExceptionMapper.class.getSimpleName());\n-    }\n-\n     @Override\n     public Exception fromResponse(final Response response) {\n-        final int statusCode = response.getStatus();\n-        Exception ex;\n+        int statusCode = response.getStatus();\n+        String message = response.getHeaderString(RESTHeaders.ERROR_INFO);\n \n+        Exception ex;\n         SyncopeClientCompositeException scce = checkSyncopeClientCompositeException(response);\n         if (scce != null) {\n             // 1. Check for client (possibly composite) exception in HTTP header\n             ex = scce.getExceptions().size() == 1\n                     ? scce.getExceptions().iterator().next()\n                     : scce;\n-        } else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()\n-                || statusCode == Response.Status.FORBIDDEN.getStatusCode()) {\n-\n-            // 2. Map SC_UNAUTHORIZED and SC_FORBIDDEN\n-            String message = response.getHeaderString(RESTHeaders.ERROR_INFO);\n+        } else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\n+            // 2. Map SC_UNAUTHORIZED\n             ex = new AccessControlException(StringUtils.isBlank(message)\n-                    ? \"Remote authorization exception\"\n+                    ? \"Remote unauthorized exception\"\n+                    : message);\n+        } else if (statusCode == Response.Status.FORBIDDEN.getStatusCode()) {\n+            // 3. Map SC_FORBIDDEN\n+            ex = new ForbiddenException(StringUtils.isBlank(message)\n+                    ? \"Remote forbidden exception\"\n                     : message);\n         } else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n-            // 3. Map SC_BAD_REQUEST\n-            String message = response.getHeaderString(RESTHeaders.ERROR_INFO);\n+            // 4. Map SC_BAD_REQUEST\n             ex = StringUtils.isBlank(message)\n                     ? new BadRequestException()\n                     : new BadRequestException(message);\n         } else {\n-            // 4. All other codes are mapped to runtime exception with HTTP code information\n+            // 5. All other codes are mapped to runtime exception with HTTP code information\n             ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\n                     Response.Status.fromStatusCode(statusCode).name()));\n         }"},{"sha":"1ff733b64818b17e47fa56af56f57cf5d9197eab","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","patch":"@@ -34,7 +34,6 @@\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n-import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.cxf.jaxrs.validation.ValidationExceptionMapper;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n@@ -67,7 +66,7 @@\n @Configuration\n @PropertySource(\"classpath:errorMessages.properties\")\n @Provider\n-public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n+public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(RestServiceExceptionMapper.class);\n \n@@ -92,15 +91,14 @@ public Response toResponse(final Exception ex) {\n \n         ResponseBuilder builder;\n \n-        if (ex instanceof SyncopeClientException) {\n+        if (ex instanceof AccessDeniedException) {\n+            // leaves the default exception processing to Spring Security\n+            builder = null;\n+        } else if (ex instanceof SyncopeClientException) {\n             SyncopeClientException sce = (SyncopeClientException) ex;\n             builder = sce.isComposite()\n                     ? getSyncopeClientCompositeExceptionResponse(sce.asComposite())\n                     : getSyncopeClientExceptionResponse(sce);\n-        } else if (ex instanceof AccessDeniedException) {\n-            builder = Response.status(Response.Status.UNAUTHORIZED).\n-                    header(RESTHeaders.ERROR_CODE, Response.Status.UNAUTHORIZED.getReasonPhrase()).\n-                    header(RESTHeaders.ERROR_INFO, ex.getMessage());\n         } else if (ex instanceof DelegatedAdministrationException) {\n             builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException\n@@ -148,13 +146,7 @@ public Response toResponse(final Exception ex) {\n             }\n         }\n \n-        return builder.build();\n-    }\n-\n-    @Override\n-    public Exception fromResponse(final Response response) {\n-        throw new UnsupportedOperationException(\n-                \"Call of fromResponse() method is not expected in RestServiceExceptionMapper\");\n+        return builder == null ? null : builder.build();\n     }\n \n     private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {"},{"sha":"a038e8f2dde51291665c102e779c63d22e1336bb","filename":"core/spring/src/main/resources/securityContext.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","patch":"@@ -59,7 +59,7 @@ under the License.\n         class=\"org.apache.syncope.core.spring.security.SyncopeAuthenticationEntryPoint\">\n     <property name=\"realmName\" value=\"Apache Syncope authentication\"/>\n   </bean>\n-\n+  \n   <bean id=\"syncopeAccessDeniedHandler\" class=\"org.apache.syncope.core.spring.security.SyncopeAccessDeniedHandler\"/>\n   \n   <bean id=\"firewall\" class=\"org.springframework.security.web.firewall.DefaultHttpFirewall\">\n@@ -68,10 +68,10 @@ under the License.\n   <security:http-firewall ref=\"firewall\"/>\n \n   <security:http security-context-repository-ref=\"securityContextRepository\"\n+                 entry-point-ref=\"syncopeAuthenticationEntryPoint\"\n                  use-expressions=\"false\" disable-url-rewriting=\"false\">\n \n-    <security:http-basic entry-point-ref=\"syncopeAuthenticationEntryPoint\"\n-                         authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n+    <security:http-basic authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n     <security:anonymous username=\"${anonymousUser}\"/>\n     <security:intercept-url pattern=\"/**\"/>\n     "},{"sha":"05a48ba327e66afc5a42e11c0b2e9ccd28b983bb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","patch":"@@ -31,6 +31,7 @@\n import java.util.Map;\n import java.util.Set;\n import javax.sql.DataSource;\n+import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -166,9 +167,8 @@ public void testUserSchemaAuthorization() {\n         // 5. update the schema create above (as user) - failure\n         try {\n             schemaService2.update(SchemaType.PLAIN, schemaTO);\n-            fail(\"Schemaupdate as user should not work\");\n-        } catch (AccessControlException e) {\n-            // CXF Service will throw this exception\n+            fail(\"Schema update as user should not work\");\n+        } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n "},{"sha":"0e94b58a540a070ad4cbb37740422699206803f7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","patch":"@@ -35,6 +35,7 @@\n import javax.naming.directory.DirContext;\n import javax.naming.directory.SearchControls;\n import javax.naming.directory.SearchResult;\n+import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.IterableUtils;\n@@ -297,9 +298,7 @@ public void updateAsGroupOwner() {\n         try {\n             groupService2.update(groupPatch);\n             fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(Response.Status.UNAUTHORIZED, e.getType().getResponseStatus());\n-        } catch (AccessControlException e) {\n+        } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n "},{"sha":"dcacbeb22cfa67d2e72142aae921dd933ac0534a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","patch":"@@ -23,9 +23,9 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.security.AccessControlException;\n import java.util.List;\n import java.util.Locale;\n+import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n@@ -84,14 +84,14 @@ public void masterOnly() {\n         try {\n             adminClient.getService(DomainService.class).read(\"Two\");\n             fail();\n-        } catch (AccessControlException e) {\n+        } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n \n         try {\n             adminClient.getService(LoggerService.class).list(LoggerType.LOG);\n             fail();\n-        } catch (AccessControlException e) {\n+        } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n "},{"sha":"b0225d8caa278b91dbec00be18dd29d8197d6c36","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=e2567e459bc0eeb8065f0f2fcdcbd17ad4dcb0c3","patch":"@@ -32,6 +32,7 @@\n import java.util.Map;\n import java.util.Set;\n import javax.sql.DataSource;\n+import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.GenericType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -83,7 +84,7 @@ public void create() {\n         try {\n             userSelfService.create(UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\"), true);\n             fail();\n-        } catch (AccessControlException e) {\n+        } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n \n@@ -144,7 +145,7 @@ public void read() {\n         try {\n             userService2.read(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n             fail();\n-        } catch (AccessControlException e) {\n+        } catch (ForbiddenException e) {\n             assertNotNull(e);\n         }\n \n@@ -378,7 +379,7 @@ public void mustChangePassword() {\n         try {\n             vivaldiClient.getService(ResourceService.class).list();\n             fail();\n-        } catch (AccessControlException e) {\n+        } catch (ForbiddenException e) {\n             assertNotNull(e);\n             assertEquals(\"Please change your password first\", e.getMessage());\n         }"}]}