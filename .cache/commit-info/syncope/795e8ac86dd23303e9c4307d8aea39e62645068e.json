{"sha":"795e8ac86dd23303e9c4307d8aea39e62645068e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc5NWU4YWM4NmRkMjMzMDNlOWM0MzA3ZDhhZWEzOWU2MjY0NTA2OGU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-06T10:56:32Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-06T10:56:32Z"},"message":"Re-injecting the 'user' variable into Velocity model (when available) for compatibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1539306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ac5f6dce599ae8e3c4027335915d36ccc7ac63d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0ac5f6dce599ae8e3c4027335915d36ccc7ac63d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/795e8ac86dd23303e9c4307d8aea39e62645068e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/795e8ac86dd23303e9c4307d8aea39e62645068e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/795e8ac86dd23303e9c4307d8aea39e62645068e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/795e8ac86dd23303e9c4307d8aea39e62645068e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8494fc73f911d4e3f18c8d00bc15a1f40ae06450","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8494fc73f911d4e3f18c8d00bc15a1f40ae06450","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8494fc73f911d4e3f18c8d00bc15a1f40ae06450"}],"stats":{"total":32,"additions":16,"deletions":16},"files":[{"sha":"8f5b51c5c480ad5ea2ad9cad55393fd3dd741f33","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/795e8ac86dd23303e9c4307d8aea39e62645068e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/795e8ac86dd23303e9c4307d8aea39e62645068e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=795e8ac86dd23303e9c4307d8aea39e62645068e","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n@@ -69,7 +68,7 @@\n  *\n  * @see NotificationTask\n  */\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public class NotificationManager {\n \n     /**\n@@ -136,12 +135,14 @@ public class NotificationManager {\n      *\n      * @param notification notification to take as model\n      * @param attributable the user this task is about\n+     * @param model Velocity model\n      * @return notification task, fully populated\n      */\n     private NotificationTask getNotificationTask(\n             final Notification notification,\n             final AbstractAttributable attributable,\n             final Map<String, Object> model) {\n+\n         if (attributable != null) {\n             connObjectUtil.retrieveVirAttrValues(attributable, AttributableUtil.getInstance(AttributableType.USER));\n         }\n@@ -203,10 +204,6 @@ private NotificationTask getNotificationTask(\n \n     /**\n      * Create notification tasks for each notification matching the given user id and (some of) tasks performed.\n-     *\n-     * @param userId user id\n-     * @param performedTasks set of actions performed on given user id\n-     * @throws NotFoundException if user contained in the workflow result cannot be found\n      */\n     public void createTasks(\n             final AuditElements.EventCategoryType type,\n@@ -217,6 +214,7 @@ public void createTasks(\n             final Object before,\n             final Object output,\n             final Object... input) {\n+\n         AttributableType attributableType = null;\n         AbstractAttributable attributable = null;\n \n@@ -249,20 +247,22 @@ public void createTasks(\n \n             if (events.isEmpty()) {\n                 LOG.debug(\"No events found about {}\", attributable);\n-            } else {\n-                if (attributableType == null || attributable == null || notification.getAbout() == null\n-                        || searchDAO.matches(\n-                        attributable, notification.getAbout(), AttributableUtil.getInstance(attributableType))) {\n+            } else if (attributableType == null || attributable == null || notification.getAbout() == null\n+                    || searchDAO.matches(attributable, notification.getAbout(),\n+                            AttributableUtil.getInstance(attributableType))) {\n \n-                    LOG.debug(\"Creating notification task for events {} about {}\", events, attributable);\n+                LOG.debug(\"Creating notification task for events {} about {}\", events, attributable);\n \n-                    final Map<String, Object> model = new HashMap<String, Object>();\n-                    model.put(\"before\", before);\n-                    model.put(\"output\", output);\n-                    model.put(\"input\", input);\n+                final Map<String, Object> model = new HashMap<String, Object>();\n+                model.put(\"before\", before);\n+                model.put(\"output\", output);\n+                model.put(\"input\", input);\n \n-                    taskDAO.save(getNotificationTask(notification, attributable, model));\n+                if (attributable instanceof SyncopeUser) {\n+                    model.put(\"user\", userDataBinder.getUserTO((SyncopeUser) attributable));\n                 }\n+\n+                taskDAO.save(getNotificationTask(notification, attributable, model));\n             }\n         }\n     }"}]}