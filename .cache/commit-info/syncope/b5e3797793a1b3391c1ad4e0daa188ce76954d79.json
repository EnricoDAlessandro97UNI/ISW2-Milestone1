{"sha":"b5e3797793a1b3391c1ad4e0daa188ce76954d79","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI1ZTM3OTc3OTNhMWIzMzkxYzFhZDRlMGRhYTE4OGNlNzY5NTRkNzk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-01T14:46:17Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-01T14:46:17Z"},"message":"(Fixes #70)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246665 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"03127e3032f925c421d480cc7e408826e770e0b8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/03127e3032f925c421d480cc7e408826e770e0b8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b5e3797793a1b3391c1ad4e0daa188ce76954d79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b5e3797793a1b3391c1ad4e0daa188ce76954d79","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b5e3797793a1b3391c1ad4e0daa188ce76954d79","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b5e3797793a1b3391c1ad4e0daa188ce76954d79/comments","author":null,"committer":null,"parents":[{"sha":"c033a43733079669b9df5ac95dba45713efc53a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c033a43733079669b9df5ac95dba45713efc53a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c033a43733079669b9df5ac95dba45713efc53a1"}],"stats":{"total":1867,"additions":1121,"deletions":746},"files":[{"sha":"b2aead43b053d27ff7d21f869caa010eaa994604","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -19,10 +19,14 @@ public enum EntityViolationType {\n     Standard(\"\"),\n     MultivalueAndUniqueConstraint(\n     \"org.syncope.core.validation.schema.multivalueAndUniqueConstraint\"),\n+    MoreThanOneAccountId(\n+    \"org.syncope.core.validation.targetresource.moreThanOneAccountId\"),\n     MoreThanOneNonNull(\n     \"org.syncope.core.validation.attrvalue.moreThanOneNonNull\"),\n-    InvalidValues(\n-    \"org.syncope.core.validation.attr.invalidValues\");\n+    InvalidSchema(\n+    \"org.syncope.core.validation.attrvalue.invalidSchema\"),\n+    InvalidValueList(\n+    \"org.syncope.core.validation.attr.invalidValueList\");\n \n     private String message;\n "},{"sha":"87bbe564a975b6304939175257efa79899f5f19e","filename":"client/src/main/java/org/syncope/types/SchemaType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -4,9 +4,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"48146a2431bad23fb7e36648fa897a1f3c5784d6","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -16,9 +16,6 @@\n \n public enum SyncopeClientExceptionType {\n \n-    AlreadyExists(\n-    \"Syncope.AlreadyExists\",\n-    \"Syncope.AlreadyExists.name\"),\n     Deadlock(\n     \"Syncope.Deadlock\",\n     \"\"),\n@@ -40,9 +37,15 @@ public enum SyncopeClientExceptionType {\n     InvalidTaskExecutionReport(\n     \"Syncope.InvalidTaskExecutionReport\",\n     \"Syncope.InvalidTaskExecutionReport.element\"),\n-    InvalidUniques(\n-    \"Syncope.InvalidUniques\",\n-    \"Syncope.InvalidUniques.attributeName\"),\n+    DuplicateUniqueValue(\n+    \"Syncope.DuplicateUniqueValue\",\n+    \"Syncope.DuplicateUniqueValue.name\"),\n+    GenericPersistence(\n+    \"Syncope.GenericPersistence\",\n+    \"Syncope.GenericPersistence.cause\"),\n+    InvalidSchemaMapping(\n+    \"Syncope.InvalidSchemaMapping\",\n+    \"\"),\n     InvalidUpdate(\n     \"Syncope.InvalidUpdate\",\n     \"Syncope.InvalidUpdate.name\"),"},{"sha":"d5623fe14b8d3357c415c147d0537cefea7ffe5e","filename":"core/pom.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -29,7 +29,7 @@\n     <packaging>war</packaging>\n \n     <properties>\n-        <hsqldb.version>1.8.0.10</hsqldb.version>\n+        <hsqldb.version>2.0.0</hsqldb.version>\n \n         <jetty.port>8888</jetty.port>\n \n@@ -241,7 +241,8 @@\n         <dependency>\n             <groupId>org.hsqldb</groupId>\n             <artifactId>hsqldb</artifactId>\n-            <version>${hsqldb.version}</version>\n+            <!-- Putting here 2.0.0 will cause unit tests to hang -->\n+            <version>1.8.0.10</version>\n             <scope>test</scope>\n         </dependency>\n         <dependency>"},{"sha":"d05fd1117f8bb720ee17cf921386626c0fbc07a6","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":20,"deletions":16,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,10 +15,9 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.MappedSuperclass;\n-import javax.validation.Valid;\n-import javax.validation.constraints.NotNull;\n import org.syncope.core.persistence.validation.attrvalue.ParseException;\n import org.syncope.core.persistence.validation.attrvalue.InvalidAttrValueException;\n import org.syncope.core.persistence.validation.entity.AttrCheck;\n@@ -45,22 +44,22 @@ public <T extends AbstractAttrValue> T addValue(final String value,\n         attrValue = getSchema().getValidator().getValue(value, attrValue);\n         attrValue.setAttribute(this);\n \n-        if (!getSchema().isMultivalue()) {\n-            getValues().clear();\n+        if (getSchema().isUniqueConstraint()) {\n+            setUniqueValue(attrValue);\n+        } else {\n+            if (!getSchema().isMultivalue()) {\n+                getValues().clear();\n+            }\n+            addValue(attrValue);\n         }\n \n-        addValue(attrValue);\n         return attrValue;\n     }\n \n-    @NotNull\n-    @Valid\n     public abstract <T extends AbstractAttributable> T getOwner();\n \n     public abstract <T extends AbstractAttributable> void setOwner(T owner);\n \n-    @NotNull\n-    @Valid\n     public abstract <T extends AbstractSchema> T getSchema();\n \n     public abstract <T extends AbstractSchema> void setSchema(T schema);\n@@ -72,18 +71,23 @@ public abstract <T extends AbstractAttrValue> boolean removeValue(\n             T attrValue);\n \n     public <T extends AbstractAttrValue> List<String> getValuesAsStrings() {\n-        List<T> values = getValues();\n-\n-        List<String> result = new ArrayList<String>(values.size());\n-        for (T attributeValue : values) {\n-            result.add(attributeValue.getValueAsString());\n+        List<String> result;\n+        if (getUniqueValue() != null) {\n+            result = Collections.singletonList(\n+                    getUniqueValue().getValueAsString());\n+        } else {\n+            result = new ArrayList<String>(getValues().size());\n+            for (AbstractAttrValue attributeValue : getValues()) {\n+                result.add(attributeValue.getValueAsString());\n+            }\n+            if (getUniqueValue() != null) {\n+                result.add(getUniqueValue().getValueAsString());\n+            }\n         }\n \n         return result;\n     }\n \n-    @NotNull\n-    @Valid\n     public abstract <T extends AbstractAttrValue> List<T> getValues();\n \n     public abstract <T extends AbstractAttrValue> void setValues("},{"sha":"99a95c37485a863a9bdb33ea39112bd5fd6e9fe9","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,7 +18,6 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.NoSuchElementException;\n import java.util.Set;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n@@ -33,9 +32,9 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n     @ManyToMany(fetch = FetchType.EAGER)\n     protected Set<TargetResource> targetResources;\n \n-    public <T extends AbstractAttr> T getAttribute(String schemaName) {\n+    public <T extends AbstractAttr> T getAttribute(final String schemaName) {\n         T result = null;\n-        T attribute = null;\n+        T attribute;\n         for (Iterator<? extends AbstractAttr> itor =\n                 getAttributes().iterator();\n                 result == null && itor.hasNext();) {\n@@ -52,10 +51,10 @@ public <T extends AbstractAttr> T getAttribute(String schemaName) {\n     }\n \n     public <T extends AbstractDerAttr> T getDerivedAttribute(\n-            String derivedSchemaName) throws NoSuchElementException {\n+            final String derivedSchemaName) {\n \n         T result = null;\n-        T derivedAttribute = null;\n+        T derivedAttribute;\n         for (Iterator<? extends AbstractDerAttr> itor =\n                 getDerivedAttributes().iterator();\n                 result == null && itor.hasNext();) {\n@@ -72,14 +71,14 @@ public <T extends AbstractDerAttr> T getDerivedAttribute(\n         return result;\n     }\n \n-    public boolean addTargetResource(TargetResource targetResource) {\n-        if (this.targetResources == null) {\n-            this.targetResources = new HashSet<TargetResource>();\n+    public boolean addTargetResource(final TargetResource targetResource) {\n+        if (targetResources == null) {\n+            targetResources = new HashSet<TargetResource>();\n         }\n-        return this.targetResources.add(targetResource);\n+        return targetResources.add(targetResource);\n     }\n \n-    public boolean removeTargetResource(TargetResource targetResource) {\n+    public boolean removeTargetResource(final TargetResource targetResource) {\n         return targetResources == null\n                 ? true\n                 : targetResources.remove(targetResource);"},{"sha":"c252c46a2f0b4729f61d1a6dce8949357d5d1ea2","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -38,16 +38,16 @@ public abstract class AbstractBaseBean implements Serializable {\n      * @param property the integer representing a boolean value\n      * @return the boolean value corresponding to the property param\n      */\n-    protected final boolean isBooleanAsInteger(final Integer property) {\n+    public final Boolean isBooleanAsInteger(final Integer property) {\n         return property != null && property == 1;\n     }\n \n     /**\n      * @param value the boolean value to be represented as integer\n      * @return the integer corresponding to the property param\n      */\n-    protected final Integer getBooleanAsInteger(final boolean value) {\n-        return value ? 1 : 0;\n+    public final Integer getBooleanAsInteger(final Boolean value) {\n+        return value.equals(Boolean.TRUE) ? 1 : 0;\n     }\n \n     /**"},{"sha":"5254f33419d3ae3145ca55d33c9f4657cdde261d","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -31,27 +31,17 @@\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n-import javax.persistence.TableGenerator;\n import org.hibernate.annotations.CollectionOfElements;\n import org.syncope.client.to.PropertyTO;\n import org.syncope.types.ConnectorCapability;\n \n @Entity\n public class ConnectorInstance extends AbstractBaseBean {\n \n-    /**\n-     * This autogenerated id leads to strange behavior with PostgreSQL, when\n-     * using GenerationType.AUTO.\n-     */\n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_ConnectorInstance\")\n-    @TableGenerator(name = \"SEQ_ConnectorInstance\", allocationSize = 20)\n     private Long id;\n \n     /**"},{"sha":"ea9c2b3b6f2f585b7a64d00dbc257d38b4280efd","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -20,11 +20,8 @@\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Enumerated;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n-import javax.persistence.TableGenerator;\n import org.hibernate.validator.constraints.Range;\n import org.syncope.types.SchemaType;\n \n@@ -36,9 +33,6 @@ public class SchemaMapping extends AbstractBaseBean {\n      * using GenerationType.AUTO.\n      */\n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_SchemaMapping\")\n-    @TableGenerator(name = \"SEQ_SchemaMapping\", allocationSize = 20)\n     private Long id;\n \n     @Column(nullable = false)"},{"sha":"ceef69bb69719a3009ba368afb1240b18d37bf62","filename":"core/src/main/java/org/syncope/core/persistence/beans/TargetResource.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTargetResource.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -30,12 +30,14 @@\n import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n import javax.persistence.QueryHint;\n+import javax.validation.Valid;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.hibernate.annotations.Cascade;\n import org.hibernate.validator.constraints.Range;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.validation.entity.TargetResourceCheck;\n \n /**\n  * A resource to which propagation occurs.\n@@ -63,6 +65,7 @@\n         @QueryHint(name = \"org.hibernate.cacheMode\", value = \"refresh\")\n     })\n })\n+@TargetResourceCheck\n public class TargetResource extends AbstractBaseBean {\n \n     /**\n@@ -102,13 +105,15 @@ public class TargetResource extends AbstractBaseBean {\n      */\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"resource\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @Valid\n     private List<SchemaMapping> mappings;\n \n     /**\n      * Tasks associated to this resource.\n      */\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"resource\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @Valid\n     private List<Task> tasks;\n \n     /**"},{"sha":"5d85d51c0673cf9cf940f46f9d11ba69882e0fbe","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -19,13 +19,11 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n-import javax.persistence.TableGenerator;\n+import javax.validation.Valid;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n@@ -36,9 +34,6 @@\n public class MAttr extends AbstractAttr {\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_MAttr\")\n-    @TableGenerator(name = \"SEQ_MAttr\", allocationSize = 20)\n     private Long id;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n@@ -49,10 +44,11 @@ public class MAttr extends AbstractAttr {\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @Valid\n     private List<MAttrValue> values;\n \n-    @OneToOne(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n-    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n     private MAttrUniqueValue uniqueValue;\n \n     public MAttr() {"},{"sha":"ff545fec2d26d89c8fe1c92e7a81e0eb9cb8ae6e","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrUniqueValue.java","status":"modified","additions":26,"deletions":14,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,30 +15,42 @@\n package org.syncope.core.persistence.beans.membership;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import javax.validation.Valid;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.IAttrUniqueValue;\n \n @Entity\n-@Table(uniqueConstraints =\n-@UniqueConstraint(columnNames = {\n-    \"booleanValue\",\n-    \"dateValue\",\n-    \"doubleValue\",\n-    \"longValue\",\n-    \"StringValue\",\n-    \"schema_name\"\n-}))\n-public class MAttrUniqueValue extends MAttrValue\n+public class MAttrUniqueValue extends AbstractAttrValue\n         implements IAttrUniqueValue {\n \n+    @Id\n+    private Long id;\n+\n     @OneToOne(optional = false)\n-    @Valid\n+    private MAttr attribute;\n+\n+    @ManyToOne(optional = false)\n     private MSchema schema;\n \n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttr> T getAttribute() {\n+        return (T) attribute;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttr> void setAttribute(final T attribute) {\n+        this.attribute = (MAttr) attribute;\n+    }\n+\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;"},{"sha":"c440701b98bca39a159ed0b1f13f732e69674e02","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrValue.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,13 +15,10 @@\n package org.syncope.core.persistence.beans.membership;\n \n import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n-import javax.persistence.TableGenerator;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n@@ -30,9 +27,6 @@\n public class MAttrValue extends AbstractAttrValue {\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_MAttrValue\")\n-    @TableGenerator(name = \"SEQ_MAttrValue\", allocationSize = 200)\n     private Long id;\n \n     @ManyToOne(optional = false)"},{"sha":"37c2d5540eccd3cdc4cbee9bb9b9af7f8a83d89d","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n+import javax.validation.Valid;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -53,9 +54,11 @@ public class Membership extends AbstractAttributable {\n     private SyncopeRole syncopeRole;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n     private List<MAttr> attributes;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n     private List<MDerAttr> derivedAttributes;\n \n     public Membership() {"},{"sha":"fcf3786ad62aedd962194f28c2c2ea0dc961f1ad","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttr.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -19,13 +19,11 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n-import javax.persistence.TableGenerator;\n+import javax.validation.Valid;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n@@ -36,9 +34,6 @@\n public class RAttr extends AbstractAttr {\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_RAttr\")\n-    @TableGenerator(name = \"SEQ_RAttr\", allocationSize = 20)\n     private Long id;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n@@ -49,10 +44,11 @@ public class RAttr extends AbstractAttr {\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @Valid\n     private List<RAttrValue> values;\n \n-    @OneToOne(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n-    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n     private RAttrUniqueValue uniqueValue;\n \n     public RAttr() {"},{"sha":"e884ebc23c5dbd90dc3f9102b864ce1544f6ec27","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrUniqueValue.java","status":"modified","additions":26,"deletions":14,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,30 +15,42 @@\n package org.syncope.core.persistence.beans.role;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-import javax.validation.Valid;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.IAttrUniqueValue;\n \n @Entity\n-@Table(uniqueConstraints =\n-@UniqueConstraint(columnNames = {\n-    \"booleanValue\",\n-    \"dateValue\",\n-    \"doubleValue\",\n-    \"longValue\",\n-    \"StringValue\",\n-    \"schema_name\"\n-}))\n-public class RAttrUniqueValue extends RAttrValue\n+public class RAttrUniqueValue extends AbstractAttrValue\n         implements IAttrUniqueValue {\n \n+    @Id\n+    private Long id;\n+\n     @OneToOne(optional = false)\n-    @Valid\n+    private RAttr attribute;\n+\n+    @ManyToOne(optional = false)\n     private RSchema schema;\n \n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttr> T getAttribute() {\n+        return (T) attribute;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttr> void setAttribute(final T attribute) {\n+        this.attribute = (RAttr) attribute;\n+    }\n+\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;"},{"sha":"21e084844a927423b39bc63b3a4cdd9b4ec6fee1","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrValue.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,13 +15,10 @@\n package org.syncope.core.persistence.beans.role;\n \n import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n-import javax.persistence.TableGenerator;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n@@ -30,9 +27,6 @@\n public class RAttrValue extends AbstractAttrValue {\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_RAttrValue\")\n-    @TableGenerator(name = \"SEQ_RAttrValue\", allocationSize = 200)\n     private Long id;\n \n     @ManyToOne(optional = false)"},{"sha":"b433212126c870625a3353e838c415bb7531e33b","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -30,6 +30,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n+import javax.validation.Valid;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -56,15 +57,18 @@ public class SyncopeRole extends AbstractAttributable {\n     private SyncopeRole parent;\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeRole\")\n+    @Valid\n     private List<Membership> memberships;\n \n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n     private List<RAttr> attributes;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n     private List<RDerAttr> derivedAttributes;\n \n     @Basic\n@@ -95,8 +99,7 @@ public String getName() {\n         return name;\n     }\n \n-    public void setName(String name)\n-            throws IllegalArgumentException {\n+    public void setName(String name) {\n         this.name = name;\n     }\n "},{"sha":"32f180a6e755bf145598088ce99a0479164f2ab8","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -26,17 +26,15 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;\n import javax.persistence.OneToMany;\n import javax.persistence.QueryHint;\n-import javax.persistence.TableGenerator;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n+import javax.validation.Valid;\n import org.apache.commons.lang.RandomStringUtils;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n@@ -64,20 +62,20 @@\n public class SyncopeUser extends AbstractAttributable {\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_SyncopeUser\")\n-    @TableGenerator(name = \"SEQ_SyncopeUser\", allocationSize = 100)\n     private Long id;\n \n     private String password;\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"syncopeUser\")\n+    @Valid\n     private List<Membership> memberships;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n     private List<UAttr> attributes;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n     private List<UDerAttr> derivedAttributes;\n \n     @Column(nullable = true)\n@@ -281,8 +279,7 @@ public Date getTokenExpireTime() {\n     }\n \n     public boolean checkToken(final String token) {\n-\n-        return this.token.equals(token)\n+        return this.token != null && this.token.equals(token)\n                 && tokenExpireTime.after(new Date());\n     }\n }"},{"sha":"48697a4c8d93d6e87165d883e978043877300792","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -19,13 +19,11 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n-import javax.persistence.TableGenerator;\n+import javax.validation.Valid;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n@@ -42,9 +40,6 @@ public class UAttr extends AbstractAttr {\n      * Auto-generated id for this table.\n      */\n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_UAttr\")\n-    @TableGenerator(name = \"SEQ_UAttr\", allocationSize = 200)\n     private Long id;\n \n     /**\n@@ -64,13 +59,14 @@ public class UAttr extends AbstractAttr {\n      */\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @Valid\n     private List<UAttrValue> values;\n \n     /**\n      * Value of this attribute (if schema is UNIQUE).\n      */\n-    @OneToOne(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n-    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n     private UAttrUniqueValue uniqueValue;\n \n     /**"},{"sha":"922a52622ac881a75dd88c7e126ba9399cd07b12","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrUniqueValue.java","status":"modified","additions":26,"deletions":12,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,28 +15,42 @@\n package org.syncope.core.persistence.beans.user;\n \n import javax.persistence.Entity;\n+import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n+import javax.persistence.OneToOne;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.IAttrUniqueValue;\n \n @Entity\n-@Table(uniqueConstraints =\n-@UniqueConstraint(columnNames = {\n-    \"booleanValue\",\n-    \"dateValue\",\n-    \"doubleValue\",\n-    \"longValue\",\n-    \"StringValue\",\n-    \"schema_name\"\n-}))\n-public class UAttrUniqueValue extends UAttrValue\n+public class UAttrUniqueValue extends AbstractAttrValue\n         implements IAttrUniqueValue {\n \n+    @Id\n+    private Long id;\n+\n+    @OneToOne(optional = false)\n+    private UAttr attribute;\n+\n     @ManyToOne(optional = false)\n     private USchema schema;\n \n+    @Override\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttr> T getAttribute() {\n+        return (T) attribute;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttr> void setAttribute(final T attribute) {\n+        this.attribute = (UAttr) attribute;\n+    }\n+\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;"},{"sha":"82922692f2e06068b908c9b1210800c2dcb9d1fd","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrValue.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,13 +15,10 @@\n package org.syncope.core.persistence.beans.user;\n \n import javax.persistence.Entity;\n-import javax.persistence.GeneratedValue;\n-import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Inheritance;\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n-import javax.persistence.TableGenerator;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n@@ -30,9 +27,6 @@\n public class UAttrValue extends AbstractAttrValue {\n \n     @Id\n-    @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_UAttrValue\")\n-    @TableGenerator(name = \"SEQ_UAttrValue\", allocationSize = 200)\n     private Long id;\n \n     @ManyToOne(optional = false)"},{"sha":"3cad05c632a5885e94618a9616bb2d912b46e010","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -28,9 +28,6 @@ public interface SyncopeUserDAO extends DAO {\n \n     List<SyncopeUser> findByAttributeValue(UAttrValue attributeValue);\n \n-    List<SyncopeUser> findByAttributeValue(UAttrValue attributeValue,\n-            int page, int itemsPerPage);\n-\n     List<SyncopeUser> findAll();\n \n     List<SyncopeUser> findAll(int page, int itemsPerPage);"},{"sha":"ca7e0c170b2950bb849b9a7791d328be5875c979","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -50,17 +50,6 @@ public List<TargetResource> findAll() {\n \n     @Override\n     public TargetResource save(final TargetResource resource) {\n-        int accountIds = 0;\n-        for (SchemaMapping mapping : resource.getMappings()) {\n-            if (mapping.isAccountid()) {\n-                accountIds++;\n-            }\n-        }\n-        if (accountIds == 0 || accountIds > 1) {\n-            throw new IllegalArgumentException(\"Found '\" + accountIds\n-                    + \"' mappings for account id\");\n-        }\n-\n         return entityManager.merge(resource);\n     }\n "},{"sha":"163fc5449d4fd2f0b355943908a7392694558e6f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":155,"deletions":170,"changes":325,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -69,43 +69,55 @@ public SyncopeUser findByWorkflowId(final Long workflowId) {\n \n     @Override\n     public List<SyncopeUser> findByAttributeValue(\n-            final UAttrValue attributeValue) {\n-\n-        return findByAttributeValue(attributeValue, -1, -1);\n-    }\n-\n-    @Override\n-    public final List<SyncopeUser> findByAttributeValue(\n-            final UAttrValue attributeValue,\n-            final int page, final int itemsPerPage) {\n-\n-        final Query query = entityManager.createQuery(\n-                \"SELECT u\"\n-                + \" FROM SyncopeUser u, UserAttribute ua, UserAttributeValue e \"\n-                + \" WHERE e.attribute = ua AND ua.owner = u\"\n-                + \" AND ((e.stringValue IS NOT NULL\"\n-                + \" AND e.stringValue = :stringValue)\"\n-                + \" OR (e.booleanValue IS NOT NULL\"\n-                + \" AND e.booleanValue = :booleanValue)\"\n-                + \" OR (e.dateValue IS NOT NULL\"\n-                + \" AND e.dateValue = :dateValue)\"\n-                + \" OR (e.longValue IS NOT NULL\"\n-                + \" AND e.longValue = :longValue)\"\n-                + \" OR (e.doubleValue IS NOT NULL\"\n-                + \" AND e.doubleValue = :doubleValue)) ORDER BY u.id\");\n-        query.setParameter(\"stringValue\", attributeValue.getStringValue());\n-        query.setParameter(\"booleanValue\", attributeValue.getBooleanValue());\n-        query.setParameter(\"dateValue\", attributeValue.getDateValue());\n-        query.setParameter(\"longValue\", attributeValue.getLongValue());\n-        query.setParameter(\"doubleValue\", attributeValue.getDoubleValue());\n-\n-        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n-\n-        if (itemsPerPage > 0) {\n-            query.setMaxResults(itemsPerPage);\n-        }\n-\n-        return query.getResultList();\n+            final UAttrValue attrValue) {\n+\n+        StringBuilder queryHead1 = new StringBuilder(\"SELECT u\").append(\n+                \" FROM SyncopeUser u, UAttr ua, UAttrValue e\");\n+        StringBuilder queryHead2 = new StringBuilder(\" SELECT u\").append(\n+                \" FROM SyncopeUser u, UAttr ua, UAttrUniqueValue e\");\n+\n+        StringBuilder whereCondition = new StringBuilder().append(\n+                \" WHERE e.attribute = ua AND ua.owner = u\").\n+                append(\" AND ((e.stringValue IS NOT NULL\").\n+                append(\" AND e.stringValue = :stringValue)\").\n+                append(\" OR (e.booleanValue IS NOT NULL\").\n+                append(\" AND e.booleanValue = :booleanValue)\").\n+                append(\" OR (e.dateValue IS NOT NULL\").\n+                append(\" AND e.dateValue = :dateValue)\").\n+                append(\" OR (e.longValue IS NOT NULL\").\n+                append(\" AND e.longValue = :longValue)\").\n+                append(\" OR (e.doubleValue IS NOT NULL\").\n+                append(\" AND e.doubleValue = :doubleValue))\").\n+                append(\" ORDER BY u.id\");\n+\n+        Query query = entityManager.createQuery(\n+                queryHead1.append(whereCondition).toString());\n+\n+        query.setParameter(\"stringValue\", attrValue.getStringValue());\n+        query.setParameter(\"booleanValue\", attrValue.getBooleanValue() == null\n+                ? null\n+                : attrValue.getBooleanAsInteger(attrValue.getBooleanValue()));\n+        query.setParameter(\"dateValue\", attrValue.getDateValue());\n+        query.setParameter(\"longValue\", attrValue.getLongValue());\n+        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n+\n+        List<SyncopeUser> result1 = query.getResultList();\n+\n+        query = entityManager.createQuery(\n+                queryHead2.append(whereCondition).toString());\n+\n+        query.setParameter(\"stringValue\", attrValue.getStringValue());\n+        query.setParameter(\"booleanValue\", attrValue.getBooleanValue() == null\n+                ? null\n+                : attrValue.getBooleanAsInteger(attrValue.getBooleanValue()));\n+        query.setParameter(\"dateValue\", attrValue.getDateValue());\n+        query.setParameter(\"longValue\", attrValue.getLongValue());\n+        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n+\n+        List<SyncopeUser> result2 = query.getResultList();\n+        result2.addAll(result1);\n+\n+        return result2;\n     }\n \n     @Override\n@@ -166,9 +178,8 @@ public List<SyncopeUser> search(final NodeCond searchCondition) {\n     @Override\n     public List<SyncopeUser> search(final NodeCond searchCondition,\n             final int page, final int itemsPerPage) {\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Search condition:\\n\" + searchCondition);\n-        }\n+\n+        LOG.debug(\"Search condition:\\n{}\", searchCondition);\n \n         List<SyncopeUser> result;\n         try {\n@@ -214,13 +225,13 @@ private List<SyncopeUser> doSearch(\n                                 + \"WHERE ua.schema.name = :schemaName)\");\n                         query.setParameter(\"schemaName\",\n                                 nodeCond.getAttributeCond().getSchema());\n-                        LOG.debug(\"Search query to be performed: {}\", query);\n+                        LOG.debug(\"[ISNOTULL] \"\n+                                + \"Search query to be performed: {}\", query);\n \n                         result = query.getResultList();\n                     }\n                 } else {\n-                    Criteria criteria = getBaseCriteria().\n-                            add(getCriterion(nodeCond));\n+                    Criteria criteria = getCriteria(nodeCond);\n                     LOG.debug(\"Criteria to be performed: {}\", criteria);\n \n                     result = criteria.list();\n@@ -268,20 +279,42 @@ private List<SyncopeUser> doSearch(\n         return result;\n     }\n \n-    private Criteria getBaseCriteria() {\n+    private Criteria getCriteria(final NodeCond leafCond) {\n         Session hibernateSess = (Session) entityManager.getDelegate();\n-        Criteria baseCriteria = hibernateSess.createCriteria(SyncopeUser.class).\n-                createAlias(\"memberships\", \"m\").\n-                createAlias(\"m.syncopeRole\", \"r\").\n-                createAlias(\"attributes\", \"a\").\n-                createAlias(\"a.values\", \"av\");\n+        Criteria baseCriteria = hibernateSess.createCriteria(SyncopeUser.class);\n+\n+        if (leafCond.getMembershipCond() != null) {\n+            baseCriteria = baseCriteria.createAlias(\"memberships\", \"m\").\n+                    createAlias(\"m.syncopeRole\", \"r\");\n+        }\n+        USchema schema = null;\n+        if (leafCond.getAttributeCond() != null) {\n+            schema = schemaDAO.find(\n+                    leafCond.getAttributeCond().getSchema(),\n+                    USchema.class);\n+            if (schema == null) {\n+                LOG.warn(\"Ignoring invalid schema '{}'\",\n+                        leafCond.getAttributeCond().getSchema());\n+            } else {\n+                baseCriteria = baseCriteria.createAlias(\"attributes\", \"a\");\n+                if (schema.isUniqueConstraint()) {\n+                    baseCriteria =\n+                            baseCriteria.createAlias(\"a.uniqueValue\", \"av\");\n+                } else {\n+                    baseCriteria =\n+                            baseCriteria.createAlias(\"a.values\", \"av\");\n+                }\n+            }\n+        }\n \n         baseCriteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n \n-        return baseCriteria;\n+        return baseCriteria.add(getCriterion(schema, leafCond));\n     }\n \n-    private Criterion getCriterion(final NodeCond leafCond) {\n+    private Criterion getCriterion(final USchema schema,\n+            final NodeCond leafCond) {\n+\n         Criterion criterion = null;\n \n         switch (leafCond.getType()) {\n@@ -295,101 +328,43 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                         criterion = Restrictions.eq(\"r.name\",\n                                 leafCond.getMembershipCond().getRoleName());\n                     }\n-                } else if (leafCond.getAttributeCond() != null) {\n-                    USchema userSchema = schemaDAO.find(\n-                            leafCond.getAttributeCond().getSchema(),\n-                            USchema.class);\n-                    if (userSchema == null) {\n-                        LOG.warn(\"Ignoring invalid schema '\"\n-                                + leafCond.getAttributeCond().getSchema()\n-                                + \"'\");\n-                    } else {\n-                        UAttrValue attributeValue =\n-                                new UAttrValue();\n-                        try {\n-                            if (leafCond.getAttributeCond().getType()\n-                                    == AttributeCond.Type.LIKE) {\n-\n-                                attributeValue.setStringValue(\n-                                        leafCond.getAttributeCond().\n-                                        getExpression());\n-                            } else {\n-                                attributeValue =\n-                                        userSchema.getValidator().\n-                                        getValue(\n-                                        leafCond.getAttributeCond().\n-                                        getExpression(),\n-                                        attributeValue);\n-                            }\n-\n-                            criterion = Restrictions.and(\n-                                    Restrictions.eq(\"a.schema.name\",\n-                                    leafCond.getAttributeCond().getSchema()),\n-                                    getCriterion(\n-                                    leafCond.getAttributeCond().getType(),\n-                                    attributeValue));\n-                        } catch (ValidationException e) {\n-                            LOG.error(\"Could not validate expression '\"\n-                                    + leafCond.getAttributeCond().\n-                                    getExpression() + \"'\", e);\n+                }\n+                if (leafCond.getAttributeCond() != null && schema != null) {\n+                    UAttrValue attrValue = new UAttrValue();\n+                    try {\n+                        if (leafCond.getAttributeCond().getType()\n+                                == AttributeCond.Type.LIKE) {\n+\n+                            attrValue.setStringValue(\n+                                    leafCond.getAttributeCond().\n+                                    getExpression());\n+                        } else {\n+                            attrValue =\n+                                    schema.getValidator().\n+                                    getValue(\n+                                    leafCond.getAttributeCond().\n+                                    getExpression(),\n+                                    attrValue);\n                         }\n+\n+                        criterion = Restrictions.and(\n+                                Restrictions.eq(\"a.schema.name\",\n+                                schema.getName()),\n+                                getCriterion(\n+                                leafCond.getAttributeCond().getType(),\n+                                attrValue));\n+                    } catch (ValidationException e) {\n+                        LOG.error(\"Could not validate expression '\"\n+                                + leafCond.getAttributeCond().\n+                                getExpression() + \"'\", e);\n                     }\n                 }\n \n                 break;\n \n             case NOT_LEAF:\n                 leafCond.setType(NodeCond.Type.LEAF);\n-\n-                final AttributeCond attributeCondition =\n-                        leafCond.getAttributeCond();\n-\n-                if (attributeCondition != null) {\n-                    USchema userSchema = schemaDAO.find(\n-                            leafCond.getAttributeCond().getSchema(),\n-                            USchema.class);\n-                    if (userSchema == null) {\n-                        LOG.warn(\"Ignoring invalid schema '\"\n-                                + leafCond.getAttributeCond().getSchema()\n-                                + \"'\");\n-                    } else {\n-                        UAttrValue attributeValue =\n-                                new UAttrValue();\n-                        try {\n-                            if (leafCond.getAttributeCond().getType()\n-                                    == AttributeCond.Type.LIKE) {\n-\n-                                attributeValue.setStringValue(\n-                                        leafCond.getAttributeCond().\n-                                        getExpression());\n-                            } else {\n-                                attributeValue =\n-                                        userSchema.getValidator().\n-                                        getValue(\n-                                        leafCond.getAttributeCond().\n-                                        getExpression(),\n-                                        attributeValue);\n-                            }\n-\n-                            criterion = Restrictions.and(\n-                                    Restrictions.eq(\"a.schema.name\",\n-                                    leafCond.getAttributeCond().getSchema()),\n-                                    Restrictions.not(getCriterion(\n-                                    leafCond.getAttributeCond().getType(),\n-                                    attributeValue)));\n-\n-                            // if user doesn't have the attribute\n-                            // it won't be returned\n-                        } catch (ValidationException e) {\n-                            LOG.error(\"Could not validate expression '\"\n-                                    + leafCond.getAttributeCond().\n-                                    getExpression() + \"'\", e);\n-                        }\n-                    }\n-                } else {\n-                    leafCond.setType(NodeCond.Type.LEAF);\n-                    criterion = Restrictions.not(getCriterion(leafCond));\n-                }\n+                criterion = Restrictions.not(getCriterion(schema, leafCond));\n                 break;\n \n             default:\n@@ -399,50 +374,56 @@ private Criterion getCriterion(final NodeCond leafCond) {\n     }\n \n     private Criterion getCriterion(final AttributeCond.Type type,\n-            final AbstractAttrValue attributeValue) {\n+            final AbstractAttrValue attrValue) {\n \n         Criterion result = null;\n         switch (type) {\n             case EQ:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.eq(\"av.stringValue\",\n-                        attributeValue.getStringValue())).\n+                        attrValue.getStringValue())).\n                         add(Restrictions.eq(\"av.booleanValue\",\n-                        attributeValue.getBooleanValue())).\n+                        attrValue.getBooleanValue() == null\n+                        ? null : attrValue.getBooleanAsInteger(\n+                        attrValue.getBooleanValue()))).\n                         add(Restrictions.eq(\"av.longValue\",\n-                        attributeValue.getLongValue())).\n+                        attrValue.getLongValue())).\n                         add(Restrictions.eq(\"av.doubleValue\",\n-                        attributeValue.getDoubleValue())).\n+                        attrValue.getDoubleValue())).\n                         add(Restrictions.eq(\"av.dateValue\",\n-                        attributeValue.getDateValue()));\n+                        attrValue.getDateValue()));\n                 break;\n \n             case GE:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.ge(\"av.stringValue\",\n-                        attributeValue.getStringValue())).\n+                        attrValue.getStringValue())).\n                         add(Restrictions.ge(\"av.booleanValue\",\n-                        attributeValue.getBooleanValue())).\n+                        attrValue.getBooleanValue() == null\n+                        ? null : attrValue.getBooleanAsInteger(\n+                        attrValue.getBooleanValue()))).\n                         add(Restrictions.ge(\"av.longValue\",\n-                        attributeValue.getLongValue())).\n+                        attrValue.getLongValue())).\n                         add(Restrictions.ge(\"av.doubleValue\",\n-                        attributeValue.getDoubleValue())).\n+                        attrValue.getDoubleValue())).\n                         add(Restrictions.ge(\"av.dateValue\",\n-                        attributeValue.getDateValue()));\n+                        attrValue.getDateValue()));\n                 break;\n \n             case GT:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.gt(\"av.stringValue\",\n-                        attributeValue.getStringValue())).\n+                        attrValue.getStringValue())).\n                         add(Restrictions.gt(\"av.booleanValue\",\n-                        attributeValue.getBooleanValue())).\n+                        attrValue.getBooleanValue() == null\n+                        ? null : attrValue.getBooleanAsInteger(\n+                        attrValue.getBooleanValue()))).\n                         add(Restrictions.gt(\"av.longValue\",\n-                        attributeValue.getLongValue())).\n+                        attrValue.getLongValue())).\n                         add(Restrictions.gt(\"av.doubleValue\",\n-                        attributeValue.getDoubleValue())).\n+                        attrValue.getDoubleValue())).\n                         add(Restrictions.gt(\"av.dateValue\",\n-                        attributeValue.getDateValue()));\n+                        attrValue.getDateValue()));\n                 break;\n \n             case ISNOTNULL:\n@@ -457,35 +438,39 @@ private Criterion getCriterion(final AttributeCond.Type type,\n             case LE:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.le(\"av.stringValue\",\n-                        attributeValue.getStringValue())).\n+                        attrValue.getStringValue())).\n                         add(Restrictions.le(\"av.booleanValue\",\n-                        attributeValue.getBooleanValue())).\n+                        attrValue.getBooleanValue() == null\n+                        ? null : attrValue.getBooleanAsInteger(\n+                        attrValue.getBooleanValue()))).\n                         add(Restrictions.le(\"av.longValue\",\n-                        attributeValue.getLongValue())).\n+                        attrValue.getLongValue())).\n                         add(Restrictions.le(\"av.doubleValue\",\n-                        attributeValue.getDoubleValue())).\n+                        attrValue.getDoubleValue())).\n                         add(Restrictions.le(\"av.dateValue\",\n-                        attributeValue.getDateValue()));\n-                break;\n-\n-            case LIKE:\n-                // LIKE operator is meaningful for strings only\n-                result = Restrictions.like(\"av.stringValue\",\n-                        attributeValue.getStringValue());\n+                        attrValue.getDateValue()));\n                 break;\n \n             case LT:\n                 result = Restrictions.disjunction().\n                         add(Restrictions.lt(\"av.stringValue\",\n-                        attributeValue.getStringValue())).\n+                        attrValue.getStringValue())).\n                         add(Restrictions.lt(\"av.booleanValue\",\n-                        attributeValue.getBooleanValue())).\n+                        attrValue.getBooleanValue() == null\n+                        ? null : attrValue.getBooleanAsInteger(\n+                        attrValue.getBooleanValue()))).\n                         add(Restrictions.lt(\"av.longValue\",\n-                        attributeValue.getLongValue())).\n+                        attrValue.getLongValue())).\n                         add(Restrictions.lt(\"av.doubleValue\",\n-                        attributeValue.getDoubleValue())).\n+                        attrValue.getDoubleValue())).\n                         add(Restrictions.lt(\"av.dateValue\",\n-                        attributeValue.getDateValue()));\n+                        attrValue.getDateValue()));\n+                break;\n+\n+            case LIKE:\n+                // LIKE operator is meaningful for strings only\n+                result = Restrictions.like(\"av.stringValue\",\n+                        attrValue.getStringValue());\n                 break;\n \n             default:"},{"sha":"5d3ade52630dbf017bceb0a4889c2dcb54254d60","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -187,8 +187,7 @@ private void provision(\n             final Set<String> syncResourceNames)\n             throws PropagationException {\n \n-        LOG.debug(\"Provisioning with user {}:\\n{}\",\n-                user, resourceOperations);\n+        LOG.debug(\"Provisioning with user {}:\\n{}\", user, resourceOperations);\n \n         // Avoid duplicates - see javadoc\n         resourceOperations.purge();\n@@ -218,31 +217,31 @@ private void provision(\n \n                 task = taskDAO.save(task);\n \n-                TaskExecution taskExecution = new TaskExecution();\n-                taskExecution.setTask(task);\n+                execution = new TaskExecution();\n+                execution.setTask(task);\n \n                 if (PropagationMode.SYNC.equals(task.getPropagationMode())) {\n-                    syncPropagate(taskExecution);\n+                    syncPropagate(execution);\n \n                     // read execution after saving\n-                    taskExecution =\n+                    execution =\n                             task.getExecutions() != null\n                             && !task.getExecutions().isEmpty()\n-                            ? task.getExecutions().get(0) : null;\n+                            ? task.getExecutions().iterator().next() : null;\n \n                 } else {\n-                    asyncPropagate(taskExecution);\n+                    asyncPropagate(execution);\n                 }\n \n                 LOG.debug(\"Execution finished for {}\", task);\n \n-                if (taskExecution != null\n+                if (execution != null\n                         && syncResourceNames.contains(resource.getName())\n-                        && taskExecution.getStatus()\n+                        && execution.getStatus()\n                         != TaskExecutionStatus.SUCCESS) {\n \n                     throw new PropagationException(resource.getName(),\n-                            taskExecution.getMessage());\n+                            execution.getMessage());\n                 }\n             }\n         }\n@@ -510,9 +509,7 @@ public void propagate(final TaskExecution execution) {\n         } finally {\n             LOG.debug(\"Update execution for {}\", task);\n \n-            if (!triedPropagationRequests.isEmpty()\n-                    || execution.getId() != null) {\n-\n+            if (!triedPropagationRequests.isEmpty()) {\n                 execution.setStartDate(startDate);\n                 execution.setMessage(taskExecutionMessage);\n                 execution.setStatus(taskExecutionStatus);"},{"sha":"7bd8d5a8c4fe1a498a900d494abae69d7d0085b6","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrValidator.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValidator.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -41,16 +41,17 @@ public boolean isValid(final AbstractAttr object,\n             } else {\n                 isValid = !object.getValues().isEmpty()\n                         && object.getUniqueValue() == null;\n-            }\n-            if (!object.getSchema().isMultivalue()) {\n-                isValid &= object.getValues().size() == 1\n-                        && object.getUniqueValue() == null;\n+\n+                if (!object.getSchema().isMultivalue()) {\n+                    isValid &= object.getValues().size() == 1\n+                            && object.getUniqueValue() == null;\n+                }\n             }\n \n             if (!isValid) {\n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n-                        EntityViolationType.InvalidValues.toString()).\n+                        EntityViolationType.InvalidValueList.toString()).\n                         addConstraintViolation();\n             }\n         }"},{"sha":"1eaa97ad7c8b5f6609ad14e47b94e0e26c6d0a34","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttrValueValidator.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttrValueValidator.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -17,6 +17,7 @@\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.IAttrUniqueValue;\n import org.syncope.types.EntityViolationType;\n \n public class AttrValueValidator\n@@ -30,7 +31,7 @@ public void initialize(final AttrValueCheck constraintAnnotation) {\n     public boolean isValid(final AbstractAttrValue object,\n             final ConstraintValidatorContext context) {\n \n-        boolean isValid = false;\n+        boolean isValid;\n \n         if (object == null) {\n             isValid = true;\n@@ -58,6 +59,16 @@ public boolean isValid(final AbstractAttrValue object,\n                 context.buildConstraintViolationWithTemplate(\n                         EntityViolationType.MoreThanOneNonNull.toString()).\n                         addConstraintViolation();\n+            } else if (object instanceof IAttrUniqueValue) {\n+                isValid = ((IAttrUniqueValue) object).getSchema().equals(\n+                        object.getAttribute().getSchema());\n+\n+                if (!isValid) {\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            EntityViolationType.InvalidSchema.toString()).\n+                            addConstraintViolation();\n+                }\n             }\n         }\n "},{"sha":"78bcfeffdf2a63ead6da8aa384c92efd2a4524cc","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/EntityValidationInterceptor.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationInterceptor.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -59,8 +59,7 @@ public final Object save(final ProceedingJoinPoint pjp)\n                 validator.validate(pjp.getArgs()[0]);\n         if (!violations.isEmpty()) {\n             LOG.error(\"Bean validation errors found: {}\", violations);\n-            throw new InvalidEntityException(\n-                    pjp.getArgs()[0].getClass(), violations);\n+            throw new InvalidEntityException(violations);\n         }\n \n         return pjp.proceed();"},{"sha":"26e908627a54866340898fbdd79d80317b527a07","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/InvalidEntityException.java","status":"modified","additions":39,"deletions":9,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -15,25 +15,23 @@\n package org.syncope.core.persistence.validation.entity;\n \n import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n import javax.validation.ValidationException;\n import org.syncope.types.EntityViolationType;\n \n public class InvalidEntityException extends ValidationException {\n \n-    final private Class entityClass;\n+    private final Map<Class, Set<EntityViolationType>> violations;\n \n-    final private Set<EntityViolationType> violations;\n-\n-    public InvalidEntityException(final Class entityClass,\n+    public InvalidEntityException(\n             final Set<ConstraintViolation<Object>> violations) {\n \n         super();\n \n-        this.entityClass = entityClass;\n-\n-        this.violations = EnumSet.noneOf(EntityViolationType.class);\n+        this.violations = new HashMap<Class, Set<EntityViolationType>>();\n         EntityViolationType entityViolationType;\n         for (ConstraintViolation<Object> violation : violations) {\n             try {\n@@ -46,12 +44,44 @@ public InvalidEntityException(final Class entityClass,\n                         + violation.getMessage());\n             }\n \n-            this.violations.add(entityViolationType);\n+            if (!this.violations.containsKey(\n+                    violation.getLeafBean().getClass())) {\n+\n+                this.violations.put(violation.getLeafBean().getClass(),\n+                        EnumSet.noneOf(EntityViolationType.class));\n+            }\n+\n+            this.violations.get(violation.getLeafBean().getClass()).\n+                    add(entityViolationType);\n         }\n     }\n \n+    public final boolean hasViolation(final EntityViolationType type) {\n+        boolean found = false;\n+        for (Class entity : violations.keySet()) {\n+            if (violations.get(entity).contains(type)) {\n+                found = true;\n+            }\n+        }\n+\n+        return found;\n+    }\n+\n+    public final Map<Class, Set<EntityViolationType>> getViolations() {\n+        return violations;\n+    }\n+\n     @Override\n     public String getMessage() {\n-        return entityClass.getSimpleName() + \" \" + violations.toString();\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (Class entity : violations.keySet()) {\n+            sb.append(entity.getSimpleName()).append(\" \").\n+                    append(violations.get(entity).toString()).\n+                    append(\", \");\n+        }\n+        sb.delete(sb.lastIndexOf(\", \"), sb.length());\n+\n+        return sb.toString();\n     }\n }"},{"sha":"e9b4eae48a600c4536295393672884aaa30064f4","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/TargetResourceCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FTargetResourceCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FTargetResourceCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FTargetResourceCheck.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = TargetResourceValidator.class)\n+@Documented\n+public @interface TargetResourceCheck {\n+\n+    String message() default \"{org.syncope.core.validation.targetresource}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"02cc7f4bc291eab76ebafdadbdb463cb2716b90f","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/TargetResourceValidator.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FTargetResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FTargetResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FTargetResourceValidator.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -0,0 +1,57 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.TargetResource;\n+import org.syncope.types.EntityViolationType;\n+\n+public class TargetResourceValidator\n+        implements ConstraintValidator<TargetResourceCheck, TargetResource> {\n+\n+    @Override\n+    public void initialize(final TargetResourceCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final TargetResource object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            int accountIds = 0;\n+            for (SchemaMapping mapping : object.getMappings()) {\n+                if (mapping.isAccountid()) {\n+                    accountIds++;\n+                }\n+            }\n+            isValid = accountIds == 1;\n+\n+            if (!isValid) {\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.MoreThanOneAccountId.toString()).\n+                        addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"b9a984e2a5c2d00017c0561330161fd0efa3ca5e","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":27,"deletions":19,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -1,4 +1,3 @@\n-\n /*\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n@@ -37,6 +36,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -63,7 +63,7 @@ public ResourceTO create(final HttpServletResponse response,\n             LOG.debug(\"Creation request received\");\n         }\n \n-        SyncopeClientCompositeErrorException compositeErrorException =\n+        SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n@@ -79,12 +79,12 @@ public ResourceTO create(final HttpServletResponse response,\n \n         if (resourceDAO.find(resourceTO.getName()) != null) {\n             SyncopeClientException ex = new SyncopeClientException(\n-                    SyncopeClientExceptionType.AlreadyExists);\n+                    SyncopeClientExceptionType.DuplicateUniqueValue);\n \n             ex.addElement(resourceTO.getName());\n-            compositeErrorException.addException(ex);\n+            scce.addException(ex);\n \n-            throw compositeErrorException;\n+            throw scce;\n         }\n \n         TargetResource resource = binder.getResource(resourceTO);\n@@ -94,12 +94,19 @@ public ResourceTO create(final HttpServletResponse response,\n             SyncopeClientException ex = new SyncopeClientException(\n                     SyncopeClientExceptionType.Unknown);\n \n-            compositeErrorException.addException(ex);\n+            scce.addException(ex);\n \n-            throw compositeErrorException;\n+            throw scce;\n         }\n \n-        resource = resourceDAO.save(resource);\n+        try {\n+            resource = resourceDAO.save(resource);\n+        } catch (InvalidEntityException e) {\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidSchemaMapping);\n+            scce.addException(ex);\n+            throw scce;\n+        }\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getResourceTO(resource);\n@@ -125,32 +132,33 @@ public ResourceTO update(final HttpServletResponse response,\n                     \"Resource '\" + resourceTO.getName() + \"'\");\n         }\n \n-        SyncopeClientCompositeErrorException compositeErrorException =\n+        SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Remove old mappings ..\");\n-        }\n+        LOG.debug(\"Removing old mappings ..\");\n         // remove old mappings\n         resourceDAO.deleteAllMappings(resource);\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Resource data binder ..\");\n-        }\n-\n         resource = binder.getResource(resource, resourceTO);\n         if (resource == null) {\n             LOG.error(\"Resource update failed\");\n \n             SyncopeClientException ex = new SyncopeClientException(\n                     SyncopeClientExceptionType.Unknown);\n+            scce.addException(ex);\n+            throw scce;\n+        }\n \n-            compositeErrorException.addException(ex);\n-            throw compositeErrorException;\n+        try {\n+            resource = resourceDAO.save(resource);\n+        } catch (InvalidEntityException e) {\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidSchemaMapping);\n+            scce.addException(ex);\n+            throw scce;\n         }\n \n-        resource = resourceDAO.save(resource);\n         return binder.getResourceTO(resource);\n     }\n "},{"sha":"2fb7935e4c54ce7b908295d02fb29639d1bcaddd","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":51,"deletions":81,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -41,6 +41,7 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import jpasymphony.dao.JPAWorkflowEntryDAO;\n+import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.http.HttpStatus;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.servlet.ModelAndView;\n@@ -55,8 +56,8 @@\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.rest.data.InvalidSearchConditionException;\n+import org.syncope.core.rest.data.UserDataBinder.CheckInResult;\n import org.syncope.core.workflow.Constants;\n-import org.syncope.core.workflow.WorkflowInitException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -224,6 +225,7 @@ public List<UserTO> list() {\n     public List<UserTO> paginatedList(\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size) {\n+\n         List<SyncopeUser> users = syncopeUserDAO.findAll(page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n@@ -277,9 +279,7 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n     public List<UserTO> search(@RequestBody NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"search called with condition \" + searchCondition);\n-        }\n+        LOG.debug(\"User search called with condition {}\", searchCondition);\n \n         if (!searchCondition.checkValidity()) {\n             LOG.error(\"Invalid search condition: \" + searchCondition);\n@@ -305,9 +305,7 @@ public List<UserTO> paginatedSearch(\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"search called with condition \" + searchCondition);\n-        }\n+        LOG.debug(\"User search called with condition {}\", searchCondition);\n \n         if (!searchCondition.checkValidity()) {\n             LOG.error(\"Invalid search condition: \" + searchCondition);\n@@ -381,78 +379,42 @@ public UserTO create(HttpServletResponse response,\n             @RequestParam(value = \"syncResources\",\n             required = false) Set<String> syncResources)\n             throws SyncopeClientCompositeErrorException,\n-            WorkflowException, PropagationException, NotFoundException {\n+            DataIntegrityViolationException, WorkflowException,\n+            PropagationException, NotFoundException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"create called with parameters \" + userTO + \"\\n\"\n-                    + syncRoles + \"\\n\" + syncResources);\n-        }\n+        LOG.debug(\"User create called with parameters {}\\n{}\\n{}\",\n+                new Object[]{userTO, syncRoles, syncResources});\n \n-        // The user to be created\n-        SyncopeUser user = null;\n+        CheckInResult checkInResult = userDataBinder.checkIn(userTO);\n+        LOG.debug(\"Check-in result: {}\", checkInResult);\n \n-        WorkflowInitException wie = null;\n-        Long workflowId = null;\n-        try {\n-            workflowId = userWorkflow.initialize(Constants.USER_WORKFLOW, 0,\n-                    Collections.singletonMap(Constants.USER_TO, userTO));\n-        } catch (WorkflowInitException e) {\n-            LOG.error(\"During workflow initialization: \" + e);\n-            wie = e;\n-\n-            // Removing dirty workflow entry\n-            if (e.getWorkflowEntryId() != null) {\n-                workflowEntryDAO.delete(e.getWorkflowEntryId());\n-            }\n+        switch (checkInResult.getAction()) {\n+            case CREATE:\n+                break;\n \n-            // Use the found workflow id\n-            workflowId = wie.getWorkflowId();\n-        }\n+            case OVERWRITE:\n+                delete(checkInResult.getSyncopeUserId(),\n+                        syncRoles, syncResources);\n+                break;\n \n-        if (wie != null) {\n-            switch (wie.getExceptionOperation()) {\n-\n-                case OVERWRITE:\n-                    final Integer resetActionId = findWorkflowAction(\n-                            wie.getWorkflowId(), Constants.ACTION_RESET);\n-                    if (resetActionId == null) {\n-                        user = syncopeUserDAO.find(wie.getSyncopeUserId());\n-                        if (user == null) {\n-                            throw new NotFoundException(\"User \"\n-                                    + wie.getSyncopeUserId());\n-                        }\n-                    } else {\n-                        user = doExecuteAction(\n-                                Constants.ACTION_RESET,\n-                                wie.getSyncopeUserId(),\n-                                Collections.singletonMap(Constants.USER_TO,\n-                                (Object) userTO));\n-                    }\n-                    break;\n-\n-                case REJECT:\n-                    SyncopeClientCompositeErrorException compositeException =\n-                            new SyncopeClientCompositeErrorException(\n-                            HttpStatus.BAD_REQUEST);\n-                    SyncopeClientException rejectedUserCreate =\n-                            new SyncopeClientException(\n-                            SyncopeClientExceptionType.RejectedUserCreate);\n-                    rejectedUserCreate.addElement(\n-                            String.valueOf(wie.getSyncopeUserId()));\n-                    compositeException.addException(rejectedUserCreate);\n-\n-                    throw compositeException;\n-            }\n-        }\n+            case REJECT:\n+                SyncopeClientCompositeErrorException compositeException =\n+                        new SyncopeClientCompositeErrorException(\n+                        HttpStatus.BAD_REQUEST);\n+                SyncopeClientException rejectedUserCreate =\n+                        new SyncopeClientException(\n+                        SyncopeClientExceptionType.RejectedUserCreate);\n+                rejectedUserCreate.addElement(\n+                        String.valueOf(checkInResult.getSyncopeUserId()));\n+                compositeException.addException(rejectedUserCreate);\n \n-        // No overwrite: let's create a fresh new user\n-        if (user == null) {\n-            user = new SyncopeUser();\n-        }\n+                throw compositeException;\n \n-        userDataBinder.create(user, userTO);\n+            default:\n+        }\n \n-        user.setWorkflowId(workflowId);\n+        // The user to be created\n+        SyncopeUser user = userDataBinder.create(userTO);\n         user = syncopeUserDAO.save(user);\n \n         // Now that user is created locally, let's propagate\n@@ -468,23 +430,31 @@ public UserTO create(HttpServletResponse response,\n                 user, userTO.getPassword(), syncResourceNames);\n \n         // User is created locally and propagated, let's advance on the workflow\n+        final Long workflowId =\n+                userWorkflow.initialize(Constants.USER_WORKFLOW, 0, null);\n+        user.setWorkflowId(workflowId);\n+\n         Map<String, Object> inputs = new HashMap<String, Object>();\n         inputs.put(Constants.SYNCOPE_USER, user);\n+        inputs.put(Constants.USER_TO, userTO);\n \n-        int[] availableWorkflowActions =\n-                userWorkflow.getAvailableActions(workflowId, null);\n+        int[] wfActions = userWorkflow.getAvailableActions(workflowId, null);\n         LOG.debug(\"Available workflow actions for user {}: {}\",\n-                user, availableWorkflowActions);\n+                user, wfActions);\n \n-        for (int availableWorkflowAction : availableWorkflowActions) {\n-            userWorkflow.doAction(\n-                    workflowId, availableWorkflowAction, inputs);\n+        for (int wfAction : wfActions) {\n+            LOG.debug(\"About to execute action {} on user {}\", wfAction, user);\n+            userWorkflow.doAction(workflowId, wfAction, inputs);\n+            LOG.debug(\"Action {} on user {} run successfully\", wfAction, user);\n         }\n \n         user = syncopeUserDAO.save(user);\n \n+        final UserTO savedTO = userDataBinder.getUserTO(user, userWorkflow);\n+        LOG.debug(\"About to return create user\\n{}\", savedTO);\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return userDataBinder.getUserTO(user, userWorkflow);\n+        return savedTO;\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -516,9 +486,9 @@ public UserTO update(@RequestBody UserMod userMod,\n         // Now that user is update locally, let's propagate\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);\n-        if (LOG.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n-            LOG.debug(\"About to propagate synchronously onto resources \"\n-                    + syncResourceNames);\n+        if (!syncResourceNames.isEmpty()) {\n+            LOG.debug(\"About to propagate synchronously onto resources {}\",\n+                    syncResourceNames);\n         }\n \n         propagationManager.update(user, userMod.getPassword(),"},{"sha":"9a201bd42cf4fd65dfc6a49e7a0f51abe3ec842b","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":18,"deletions":9,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -179,11 +179,11 @@ private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n         List<T> allSchemas = schemaDAO.findAll(referenceSchema);\n         for (AbstractAttr attribute : attributes) {\n             jexlContext.set(attribute.getSchema().getName(),\n-                    attribute.getValues().isEmpty()\n+                    attribute.getValuesAsStrings().isEmpty()\n                     ? null\n-                    : (!attribute.getSchema().isMultivalue()\n-                    ? attribute.getValuesAsStrings().iterator().next()\n-                    : attribute.getValuesAsStrings()));\n+                    : (attribute.getSchema().isMultivalue()\n+                    ? attribute.getValuesAsStrings()\n+                    : attribute.getValuesAsStrings().iterator().next()));\n \n             allSchemas.remove((T) attribute.getSchema());\n         }\n@@ -393,9 +393,18 @@ protected ResourceOperations fill(\n                 for (String valueToBeRemoved :\n                         attributeMod.getValuesToBeRemoved()) {\n \n-                    for (AbstractAttrValue mav : attribute.getValues()) {\n-                        if (valueToBeRemoved.equals(mav.getValueAsString())) {\n-                            valuesToBeRemoved.add(mav.getId());\n+                    if (attribute.getSchema().isUniqueConstraint()) {\n+                        if (valueToBeRemoved.equals(attribute.getUniqueValue().\n+                                getValueAsString())) {\n+\n+                            valuesToBeRemoved.add(\n+                                    attribute.getUniqueValue().getId());\n+                        }\n+                    } else {\n+                        for (AbstractAttrValue mav : attribute.getValues()) {\n+                            if (valueToBeRemoved.equals(mav.getValueAsString())) {\n+                                valuesToBeRemoved.add(mav.getId());\n+                            }\n                         }\n                     }\n                 }\n@@ -409,7 +418,7 @@ protected ResourceOperations fill(\n                         attributableUtil, schema, attribute, invalidValues);\n \n                 // if no values are in, the attribute can be safely removed\n-                if (attribute.getValues().isEmpty()) {\n+                if (attribute.getValuesAsStrings().isEmpty()) {\n                     attributeDAO.delete(attribute);\n                 }\n             }\n@@ -569,7 +578,7 @@ protected void fill(AbstractAttributable attributable,\n                             attribute,\n                             invalidValues);\n \n-                    if (!attribute.getValues().isEmpty()) {\n+                    if (!attribute.getValuesAsStrings().isEmpty()) {\n                         attributable.addAttribute(attribute);\n                         attribute.setOwner(attributable);\n                     }"},{"sha":"24c5840f9f809042c85412804367779f7da1f28b","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":46,"deletions":2,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -45,9 +45,51 @@\n @Component\n public class UserDataBinder extends AbstractAttributableDataBinder {\n \n-    public void create(final SyncopeUser user, final UserTO userTO)\n+    public enum CheckinResultAction {\n+\n+        CREATE, OVERWRITE, REJECT\n+\n+    }\n+\n+    public class CheckInResult {\n+\n+        private CheckinResultAction action;\n+\n+        private Long syncopeUserId;\n+\n+        private Long workflowId;\n+\n+        public CheckInResult(final CheckinResultAction action,\n+                final Long syncopeUserId,\n+                final Long workflowId) {\n+\n+            this.action = action;\n+            this.syncopeUserId = syncopeUserId;\n+            this.workflowId = workflowId;\n+        }\n+\n+        public CheckinResultAction getAction() {\n+            return action;\n+        }\n+\n+        public Long getSyncopeUserId() {\n+            return syncopeUserId;\n+        }\n+\n+        public Long getWorkflowId() {\n+            return workflowId;\n+        }\n+    }\n+\n+    public CheckInResult checkIn(final UserTO userTO) {\n+        return new CheckInResult(CheckinResultAction.CREATE, null, null);\n+    }\n+\n+    public SyncopeUser create(final UserTO userTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n+        SyncopeUser user = new SyncopeUser();\n+\n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n@@ -69,7 +111,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n         }\n \n         // memberships\n-        SyncopeRole role = null;\n+        SyncopeRole role;\n         for (MembershipTO membershipTO : userTO.getMemberships()) {\n             role = syncopeRoleDAO.find(membershipTO.getRoleId());\n \n@@ -100,6 +142,8 @@ public void create(final SyncopeUser user, final UserTO userTO)\n \n         // attributes, derived attributes and resources\n         fill(user, userTO, AttributableUtil.USER, scce);\n+\n+        return user;\n     }\n \n     public ResourceOperations update(SyncopeUser user, UserMod userMod)"},{"sha":"b6e9fae0a223dab989b99accc3172b99d7860b62","filename":"core/src/main/java/org/syncope/core/workflow/Constants.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FConstants.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -20,20 +20,28 @@\n public final class Constants {\n \n     public static final String ACTION_ACTIVATE = \"activate\";\n+\n     public static final String ACTION_GENERATE_TOKEN = \"generateToken\";\n-    public static final String ACTION_RESET = \"reset\";\n+\n     public static final String ACTION_DELETE = \"delete\";\n+\n     public static final String ACTION_UPDATE = \"update\";\n+\n     public static final String ACTION_VERIFY_TOKEN = \"verifyToken\";\n-    public static final String ENTRY = \"entry\";\n+\n     public static final String SYNCOPE_USER = \"syncopeUser\";\n+\n     public static final String SYNCOPE_ROLE = \"syncopeRole\";\n+\n     public static final String MEMBERSHIP = \"membership\";\n+\n     public static final String TOKEN = \"token\";\n+\n     public static final String USER_TO = \"userTO\";\n+\n     public static final String USER_MOD = \"userMod\";\n+\n     public static final String USER_WORKFLOW = \"userWorkflow\";\n-    public static final String PREFIX = \"prefix\";\n \n     private Constants() {\n     }"},{"sha":"d7ebdceaa55536e73c2dbfb8ee0e44d12519e32f","filename":"core/src/main/java/org/syncope/core/workflow/EmptyUser.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c033a43733079669b9df5ac95dba45713efc53a1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c033a43733079669b9df5ac95dba45713efc53a1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java?ref=c033a43733079669b9df5ac95dba45713efc53a1","patch":"@@ -1,85 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.module.propertyset.PropertySet;\n-import com.opensymphony.workflow.FunctionProvider;\n-import com.opensymphony.workflow.WorkflowException;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n-import org.syncope.core.persistence.beans.AbstractDerAttr;\n-import org.syncope.core.persistence.beans.membership.Membership;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UAttr;\n-import org.syncope.core.persistence.beans.user.UDerAttr;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n-import org.syncope.core.persistence.dao.MembershipDAO;\n-\n-public class EmptyUser extends OSWorkflowComponent\n-        implements FunctionProvider {\n-\n-    @Override\n-    @Transactional\n-    public void execute(Map transientVars, Map args, PropertySet ps)\n-            throws WorkflowException {\n-\n-        SyncopeUser user = (SyncopeUser) transientVars.get(\n-                Constants.SYNCOPE_USER);\n-\n-        final AttributeDAO attributeDAO =\n-                (AttributeDAO) context.getBean(\"attributeDAOImpl\");\n-        final Map<Long, String> attrsToRemove = new HashMap<Long, String>();\n-        for (AbstractAttr attribute : user.getAttributes()) {\n-            attrsToRemove.put(attribute.getId(),\n-                    attribute.getSchema().getName());\n-        }\n-        for (Long attrId : attrsToRemove.keySet()) {\n-            attributeDAO.delete(attrId, UAttr.class);\n-            user.removeAttribute(\n-                    user.getAttribute(attrsToRemove.get(attrId)));\n-        }\n-\n-        final DerivedAttributeDAO derivedAttributeDAO =\n-                (DerivedAttributeDAO) context.getBean(\n-                \"derivedAttributeDAOImpl\");\n-        for (AbstractDerAttr derivedAttribute :\n-                user.getDerivedAttributes()) {\n-\n-            derivedAttributeDAO.delete(derivedAttribute.getId(),\n-                    UDerAttr.class);\n-        }\n-        user.getDerivedAttributes().clear();\n-\n-        final MembershipDAO membershipDAO =\n-                (MembershipDAO) context.getBean(\"membershipDAOImpl\");\n-        final Set<Long> membershipIds =\n-                new HashSet<Long>(user.getMemberships().size());\n-        for (Membership membership : user.getMemberships()) {\n-            membershipIds.add(membership.getId());\n-        }\n-        for (Long membershipId : membershipIds) {\n-            membershipDAO.delete(membershipId);\n-        }\n-\n-        user.setPassword(null);\n-\n-        transientVars.put(Constants.SYNCOPE_USER, user);\n-    }\n-}"},{"sha":"d1b67b27d8e12c700f601cd2231afb0fe02907c0","filename":"core/src/main/java/org/syncope/core/workflow/WorkflowInitException.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c033a43733079669b9df5ac95dba45713efc53a1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInitException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c033a43733079669b9df5ac95dba45713efc53a1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInitException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowInitException.java?ref=c033a43733079669b9df5ac95dba45713efc53a1","patch":"@@ -1,84 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.workflow;\n-\n-import com.opensymphony.workflow.InvalidInputException;\n-\n-public class WorkflowInitException extends InvalidInputException {\n-\n-    public enum ExceptionOperation {\n-\n-        REJECT, OVERWRITE;\n-    };\n-    private ExceptionOperation exceptionOperation;\n-    private Long syncopeUserId;\n-    private Long workflowId;\n-    private Long workflowEntryId;\n-\n-    public WorkflowInitException() {\n-        super();\n-    }\n-\n-    public WorkflowInitException(ExceptionOperation exceptionOperation,\n-            Long syncopeUserId, Long workflowEntryId) {\n-\n-        super();\n-\n-        this.exceptionOperation = exceptionOperation;\n-        this.syncopeUserId = syncopeUserId;\n-        this.workflowEntryId = workflowEntryId;\n-    }\n-\n-    public ExceptionOperation getExceptionOperation() {\n-        return exceptionOperation;\n-    }\n-\n-    public void setExceptionOperation(ExceptionOperation exceptionOperation) {\n-        this.exceptionOperation = exceptionOperation;\n-    }\n-\n-    public Long getSyncopeUserId() {\n-        return syncopeUserId;\n-    }\n-\n-    public void setSyncopeUserId(Long syncopeUserId) {\n-        this.syncopeUserId = syncopeUserId;\n-    }\n-\n-    public Long getWorkflowEntryId() {\n-        return workflowEntryId;\n-    }\n-\n-    public void setWorkflowEntryId(Long workflowEntryId) {\n-        this.workflowEntryId = workflowEntryId;\n-    }\n-\n-    public Long getWorkflowId() {\n-        return workflowId;\n-    }\n-\n-    public void setWorkflowId(Long workflowId) {\n-        this.workflowId = workflowId;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"WorkflowInitException{\"\n-                + \"exceptionOperation=\" + exceptionOperation + \",\"\n-                + \"syncopeUserId=\" + syncopeUserId + \",\"\n-                + \"workflowId=\" + workflowId + \",\"\n-                + \"workflowEntry=\" + workflowEntryId + '}';\n-    }\n-}"},{"sha":"ce31d23457a4c16ee8d2864d53b0c64894e06b87","filename":"core/src/main/resources/META-INF/orm.xml","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -0,0 +1,185 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<entity-mappings\n+  xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+  version=\"1.0\">\n+\n+    <table-generator name=\"SEQ_UAttrValue\" pk-column-value=\"SEQ_UAttrValue\" initial-value=\"100\"/>\n+    <table-generator name=\"SEQ_RAttrValue\" pk-column-value=\"SEQ_RAttrValue\" initial-value=\"100\"/>\n+    <table-generator name=\"SEQ_MAttrValue\" pk-column-value=\"SEQ_MAttrValue\" initial-value=\"100\"/>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.user.SyncopeUser\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_SyncopeUser\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_SyncopeUser\" pk-column-value=\"SEQ_SyncopeUser\" initial-value=\"100\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.SchemaMapping\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_SchemaMapping\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_SchemaMapping\" pk-column-value=\"SEQ_SchemaMapping\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.ConnectorInstance\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_ConnectorInstance\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_ConnectorInstance\" pk-column-value=\"SEQ_ConnectorInstance\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.user.UAttr\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_UAttr\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_UAttr\" pk-column-value=\"SEQ_UAttr\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.role.RAttr\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_RAttr\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_RAttr\" pk-column-value=\"SEQ_RAttr\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.membership.MAttr\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_MAttr\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_MAttr\" pk-column-value=\"SEQ_MAttr\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    \n+    <entity class=\"org.syncope.core.persistence.beans.user.UAttrValue\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_UAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.user.UAttrUniqueValue\">\n+        <table>\n+            <unique-constraint>\n+                <column-name>booleanValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>dateValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>stringValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>doubleValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>longValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+        </table>\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_UAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.role.RAttrValue\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_RAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.role.RAttrUniqueValue\">\n+        <table>\n+            <unique-constraint>\n+                <column-name>booleanValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>dateValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>stringValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>doubleValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>longValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+        </table>\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_RAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.membership.MAttrValue\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_MAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.membership.MAttrUniqueValue\">\n+        <table>\n+            <unique-constraint>\n+                <column-name>booleanValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>dateValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>stringValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>doubleValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+            <unique-constraint>\n+                <column-name>longValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+        </table>\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_MAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+</entity-mappings>\n\\ No newline at end of file"},{"sha":"59466360f36b53690a5795359aac19121cdd0bb7","filename":"core/src/main/resources/META-INF/orm.xml.oracle","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -0,0 +1,149 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<entity-mappings\n+  xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+  version=\"1.0\">\n+\n+    <table-generator name=\"SEQ_UAttrValue\" pk-column-value=\"SEQ_UAttrValue\" initial-value=\"100\"/>\n+    <table-generator name=\"SEQ_RAttrValue\" pk-column-value=\"SEQ_RAttrValue\" initial-value=\"100\"/>\n+    <table-generator name=\"SEQ_MAttrValue\" pk-column-value=\"SEQ_MAttrValue\" initial-value=\"100\"/>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.user.SyncopeUser\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_SyncopeUser\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_SyncopeUser\" pk-column-value=\"SEQ_SyncopeUser\" initial-value=\"100\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.SchemaMapping\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_SchemaMapping\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_SchemaMapping\" pk-column-value=\"SEQ_SchemaMapping\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.ConnectorInstance\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_ConnectorInstance\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_ConnectorInstance\" pk-column-value=\"SEQ_ConnectorInstance\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.user.UAttr\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_UAttr\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_UAttr\" pk-column-value=\"SEQ_UAttr\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.role.RAttr\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_RAttr\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_RAttr\" pk-column-value=\"SEQ_RAttr\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.membership.MAttr\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_MAttr\" strategy=\"TABLE\"/>\n+                <table-generator name=\"SEQ_MAttr\" pk-column-value=\"SEQ_MAttr\" initial-value=\"1000\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+\n+    <entity class=\"org.syncope.core.persistence.beans.user.UAttrValue\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_UAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.user.UAttrUniqueValue\">\n+        <table>\n+            <unique-constraint>\n+                <column-name>booleanValue</column-name>\n+                <column-name>dateValue</column-name>\n+                <column-name>stringValue</column-name>\n+                <column-name>doubleValue</column-name>\n+                <column-name>longValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+        </table>\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_UAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.role.RAttrValue\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_RAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.role.RAttrUniqueValue\">\n+        <table>\n+            <unique-constraint>\n+                <column-name>booleanValue</column-name>\n+                <column-name>dateValue</column-name>\n+                <column-name>stringValue</column-name>\n+                <column-name>doubleValue</column-name>\n+                <column-name>longValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+        </table>\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_RAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.membership.MAttrValue\">\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_MAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+    <entity class=\"org.syncope.core.persistence.beans.membership.MAttrUniqueValue\">\n+        <table>\n+            <unique-constraint>\n+                <column-name>booleanValue</column-name>\n+                <column-name>dateValue</column-name>\n+                <column-name>stringValue</column-name>\n+                <column-name>doubleValue</column-name>\n+                <column-name>longValue</column-name>\n+                <column-name>schema_name</column-name>\n+            </unique-constraint>\n+        </table>\n+        <attributes>\n+            <id name=\"id\">\n+                <generated-value generator=\"SEQ_MAttrValue\" strategy=\"TABLE\"/>\n+            </id>\n+        </attributes>\n+    </entity>\n+</entity-mappings>"},{"sha":"37144397a4d0eaf0cbf376ce31ed47006fccbf1c","filename":"core/src/main/resources/content.xml","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -17,15 +17,15 @@\n     @TableGenerator.allocationSize * hibernate_sequences.sequence_next_hi_value,\n     so since SyncopeUser.id@TableGenerator.allocationSize == 100, actual\n     starting value for SyncopeUser.id is 1000 -->\n-    <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"UAttr\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RAttr\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MAttr\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"UAttrValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RAttrValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_SyncopeUser\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_SchemaMapping\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_UAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_RAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_MAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_UAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_RAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_MAttrValue\" sequence_next_hi_value=\"1000\"/>\n \n     <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>"},{"sha":"c9e4bb8a63d37b7fe9955aa97eef633b82d5997c","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -1,3 +1,6 @@\n+<%@page import=\"org.hibernate.exception.ConstraintViolationException\"%>\n+<%@page import=\"javax.persistence.PersistenceException\"%>\n+<%@page import=\"org.springframework.dao.DataIntegrityViolationException\"%>\n <%@page import=\"org.hibernate.exception.LockAcquisitionException\"%>\n <%@page isErrorPage=\"true\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n <%@page import=\"org.syncope.core.rest.data.InvalidSearchConditionException\"%>\n@@ -90,6 +93,31 @@\n                         SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                         SyncopeClientExceptionType.Deadlock.getHeaderValue());\n \n+                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            } else if (ex instanceof DataIntegrityViolationException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.DuplicateUniqueValue.\n+                        getHeaderValue());\n+\n+                statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            } else if (ex instanceof PersistenceException) {\n+                if (ex.getCause() instanceof ConstraintViolationException) {\n+                    response.setHeader(\n+                            SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                            SyncopeClientExceptionType.DuplicateUniqueValue.\n+                            getHeaderValue());\n+                } else {\n+                    response.setHeader(\n+                            SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                            SyncopeClientExceptionType.GenericPersistence.\n+                            getHeaderValue());\n+                    response.setHeader(\n+                            SyncopeClientExceptionType.GenericPersistence.\n+                            getElementHeaderName(),\n+                            ex.getCause().getClass().getName());\n+                }\n+\n                 statusCode = HttpServletResponse.SC_BAD_REQUEST;\n             }\n "},{"sha":"eec8e747b3d6bfea7758ef0c7a85bbb55345705f","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttributeTest.java","status":"modified","additions":35,"deletions":12,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -21,14 +21,14 @@\n import javax.validation.ValidationException;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n import org.syncope.core.rest.data.AttributableUtil;\n+import org.syncope.types.EntityViolationType;\n \n @Transactional\n public class AttributeTest extends AbstractTest {\n@@ -46,7 +46,7 @@ public class AttributeTest extends AbstractTest {\n     public final void findAll() {\n         List<UAttr> list = attributeDAO.findAll(UAttr.class);\n         assertEquals(\"did not get expected number of attributes \",\n-                6, list.size());\n+                7, list.size());\n     }\n \n     @Test\n@@ -59,6 +59,15 @@ public final void findById() {\n                 attribute);\n     }\n \n+    @Test\n+    public final void read() {\n+        UAttr attribute = attributeDAO.find(100L, UAttr.class);\n+        assertNotNull(attribute);\n+\n+        assertTrue(attribute.getValues().isEmpty());\n+        assertNotNull(attribute.getUniqueValue());\n+    }\n+\n     @Test\n     public final void save()\n             throws ClassNotFoundException {\n@@ -89,11 +98,13 @@ public final void save()\n         }\n         assertNotNull(\"validation exception expected here \", thrown);\n \n+        InvalidEntityException iee = null;\n         try {\n             attribute = attributeDAO.save(attribute);\n         } catch (InvalidEntityException e) {\n-            assertNull(e);\n+            iee = e;\n         }\n+        assertNull(iee);\n \n         UAttr actual = attributeDAO.find(attribute.getId(),\n                 UAttr.class);\n@@ -102,35 +113,47 @@ public final void save()\n     }\n \n     @Test\n-    @ExpectedException(InvalidEntityException.class)\n     public final void validateAndSave() {\n-        USchema emailSchema = userSchemaDAO.find(\"email\", USchema.class);\n+        final USchema emailSchema =\n+                userSchemaDAO.find(\"email\", USchema.class);\n         assertNotNull(emailSchema);\n \n+        final USchema usernameSchema =\n+                userSchemaDAO.find(\"username\", USchema.class);\n+        assertNotNull(usernameSchema);\n+\n         UAttr attribute = new UAttr();\n         attribute.setSchema(emailSchema);\n \n         UAttrUniqueValue uauv = new UAttrUniqueValue();\n         uauv.setAttribute(attribute);\n-        uauv.setSchema(emailSchema);\n+        uauv.setSchema(usernameSchema);\n         uauv.setStringValue(\"a value\");\n \n         attribute.setUniqueValue(uauv);\n \n-        attribute = attributeDAO.save(attribute);\n+        InvalidEntityException iee = null;\n+        try {\n+            attribute = attributeDAO.save(attribute);\n+        } catch (InvalidEntityException e) {\n+            iee = e;\n+        }\n+        assertNotNull(iee);\n+        // for attribute\n+        assertTrue(iee.hasViolation(EntityViolationType.InvalidValueList));\n+        // for uauv\n+        assertTrue(iee.hasViolation(EntityViolationType.InvalidSchema));\n     }\n \n     @Test\n     public final void delete() {\n         UAttr attribute = attributeDAO.find(200L, UAttr.class);\n-        String attributeSchemaName =\n-                attribute.getSchema().getName();\n+        String attrSchemaName = attribute.getSchema().getName();\n \n         attributeDAO.delete(attribute.getId(), UAttr.class);\n \n-        USchema attributeSchema =\n-                userSchemaDAO.find(attributeSchemaName, USchema.class);\n+        USchema schema = userSchemaDAO.find(attrSchemaName, USchema.class);\n         assertNotNull(\"user attribute schema deleted when deleting values\",\n-                attributeSchema);\n+                schema);\n     }\n }"},{"sha":"4289a34597e367ef4acf56846d6371dbce013ccb","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -36,7 +36,7 @@ public class SchemaTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n-        assertEquals(9, userList.size());\n+        assertEquals(10, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(2, roleList.size());"},{"sha":"fca922495aa2e34c616309624e866976e5a440d4","filename":"core/src/test/java/org/syncope/core/persistence/dao/SyncopeUserTest.java","status":"modified","additions":25,"deletions":33,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -25,9 +25,7 @@\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.AbstractTest;\n-import org.syncope.core.persistence.beans.user.UAttr;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n-import org.syncope.core.persistence.beans.user.USchema;\n \n @Transactional\n public class SyncopeUserTest extends AbstractTest {\n@@ -60,46 +58,24 @@ public final void findAllByPageAndSize() {\n         assertEquals(\"did not get expected number of users \", 0, list.size());\n     }\n \n-    public final void findByAttribute() {\n-        final USchema schema = new USchema();\n-        schema.setName(\"username\");\n-\n-        final UAttr username = new UAttr();\n-        username.setSchema(schema);\n-\n+    @Test\n+    public final void findByAttributeValue() {\n         final UAttrValue usernameValue = new UAttrValue();\n         usernameValue.setStringValue(\"chicchiricco\");\n-        usernameValue.setAttribute(username);\n-\n-        username.addValue(usernameValue);\n \n-        // get first page\n         final List<SyncopeUser> list = syncopeUserDAO.findByAttributeValue(\n                 usernameValue);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n \n-    public final void findByAttributePageAndSize() {\n-        final USchema schema = new USchema();\n-        schema.setName(\"username\");\n-\n-        final UAttr username = new UAttr();\n-        username.setSchema(schema);\n-\n-        final UAttrValue usernameValue = new UAttrValue();\n-        usernameValue.setStringValue(\"chicchiricco\");\n-        usernameValue.setAttribute(username);\n-\n-        username.addValue(usernameValue);\n+    @Test\n+    public final void findByAttributeBooleanValue() {\n+        final UAttrValue coolValue = new UAttrValue();\n+        coolValue.setBooleanValue(true);\n \n-        // get first page\n-        List<SyncopeUser> list = syncopeUserDAO.findByAttributeValue(\n-                usernameValue, 1, 2);\n+        final List<SyncopeUser> list = syncopeUserDAO.findByAttributeValue(\n+                coolValue);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n-\n-        // get unexistent page\n-        list = syncopeUserDAO.findAll(2, 2);\n-        assertEquals(\"did not get expected number of users \", 0, list.size());\n     }\n \n     @Test\n@@ -161,7 +137,6 @@ public final void searchWithNotCondition() {\n         usernameLeafCond.setExpression(\"fabio.martelli\");\n \n         final NodeCond cond = NodeCond.getNotLeafCond(usernameLeafCond);\n-\n         assertTrue(cond.checkValidity());\n \n         final List<SyncopeUser> users = syncopeUserDAO.search(cond);\n@@ -171,6 +146,23 @@ public final void searchWithNotCondition() {\n         assertEquals(Long.valueOf(1L), users.get(0).getId());\n     }\n \n+    @Test\n+    public final void searchByBoolean() {\n+        final AttributeCond coolLeafCond =\n+                new AttributeCond(AttributeCond.Type.EQ);\n+        coolLeafCond.setSchema(\"cool\");\n+        coolLeafCond.setExpression(\"true\");\n+\n+        final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n+        assertTrue(cond.checkValidity());\n+\n+        final List<SyncopeUser> users = syncopeUserDAO.search(cond);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+\n+        assertEquals(Long.valueOf(4L), users.get(0).getId());\n+    }\n+\n     @Test\n     public final void searchByPageAndSize() {\n         AttributeCond usernameLeafCond ="},{"sha":"4bac0292f35c85a1d526af42c3ff621dfea93e05","filename":"core/src/test/java/org/syncope/core/persistence/relationships/MembershipTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -58,7 +58,7 @@ public final void deleteAndCreate() {\n         // 1. delete that membership\n         membershipDAO.delete(membership.getId());\n \n-        // if not flushing here, the INSERT below will be executed \n+        // if not flushing here, the INSERT below will be executed\n         // before the DELETE above\n         membershipDAO.flush();\n "},{"sha":"fb2e0ff19984f9ad7e8152a9274b5e13a7e967d1","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":28,"deletions":20,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -56,6 +56,11 @@ private UserTO getSampleTO(final String email) {\n         usernameTO.addValue(email);\n         userTO.addAttribute(usernameTO);\n \n+        AttributeTO firstnameTO = new AttributeTO();\n+        firstnameTO.setSchema(\"firstname\");\n+        firstnameTO.addValue(email);\n+        userTO.addAttribute(firstnameTO);\n+\n         AttributeTO surnameTO = new AttributeTO();\n         surnameTO.setSchema(\"surname\");\n         surnameTO.addValue(\"Surname\");\n@@ -87,7 +92,6 @@ private UserTO getSampleTO(final String email) {\n \n     @Test\n     public final void createUserWithNoPropagation() {\n-\n         // get task list\n         List<TaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n@@ -105,34 +109,34 @@ public final void createUserWithNoPropagation() {\n         }\n \n         // create a new user\n-        UserTO newUserTO = new UserTO();\n+        UserTO userTO = new UserTO();\n \n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"firstname\");\n         attributeTO.addValue(\"xxx\");\n-        newUserTO.addAttribute(attributeTO);\n+        userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"surname\");\n         attributeTO.addValue(\"xxx\");\n-        newUserTO.addAttribute(attributeTO);\n+        userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"userId\");\n         attributeTO.addValue(\"xxx@xxx.xxx\");\n-        newUserTO.addAttribute(attributeTO);\n+        userTO.addAttribute(attributeTO);\n \n         attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"username\");\n         attributeTO.addValue(\"xxx\");\n-        newUserTO.addAttribute(attributeTO);\n+        userTO.addAttribute(attributeTO);\n \n-        newUserTO.setPassword(\"xxx\");\n-        newUserTO.addResource(\"ws-target-resource-nopropagation\");\n+        userTO.setPassword(\"xxx\");\n+        userTO.addResource(\"ws-target-resource-nopropagation\");\n \n         restTemplate.postForObject(BASE_URL + \"user/create\"\n                 + \"?syncResources=ws-target-resource-nopropagation\",\n-                newUserTO, UserTO.class);\n+                userTO, UserTO.class);\n \n         // get the new task list\n         tasks = Arrays.asList(\n@@ -157,9 +161,7 @@ public final void createUserWithNoPropagation() {\n                 BASE_URL + \"task/read/{taskId}\", TaskTO.class, newMaxId);\n \n         assertNotNull(taskTO);\n-        assertTrue(taskTO.getExecutions() == null\n-                || taskTO.getExecutions().isEmpty());\n-\n+        assertTrue(taskTO.getExecutions().isEmpty());\n     }\n \n     @Test\n@@ -264,8 +266,7 @@ public final void create() {\n                 BASE_URL + \"task/read/{taskId}\", TaskTO.class, newMaxId);\n \n         assertNotNull(taskTO);\n-        assertFalse(taskTO.getExecutions() == null\n-                || taskTO.getExecutions().isEmpty());\n+        assertFalse(taskTO.getExecutions().isEmpty());\n \n         // 3. verify password\n         Boolean verify = restTemplate.getForObject(\n@@ -286,16 +287,15 @@ public final void create() {\n             }\n         }\n \n-        SyncopeClientException syncopeClientException = null;\n+        SyncopeClientException sce = null;\n         try {\n             restTemplate.postForObject(BASE_URL + \"user/create\",\n                     userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n-            syncopeClientException =\n-                    e.getException(SyncopeClientExceptionType.InvalidUniques);\n+            sce = e.getException(\n+                    SyncopeClientExceptionType.DuplicateUniqueValue);\n         }\n-        assertNotNull(syncopeClientException);\n-        assertTrue(syncopeClientException.getElements().contains(\"userId\"));\n+        assertNotNull(sce);\n     }\n \n     @Test\n@@ -334,9 +334,17 @@ public final void createWithRequiredValueMissing() {\n         fType.addValue(\"F\");\n         userTO.addAttribute(fType);\n \n+        AttributeTO firstname = null;\n+        for (AttributeTO attributeTO : userTO.getAttributes()) {\n+            if (\"firstname\".equals(attributeTO.getSchema())) {\n+                firstname = attributeTO;\n+            }\n+        }\n+        userTO.removeAttribute(firstname);\n+\n+        // 2. create user without firstname (mandatory when type == 'F')\n         ex = null;\n         try {\n-            // 2. create user without firstname (mandatory when type == 'F')\n             restTemplate.postForObject(\n                     BASE_URL + \"user/create?syncRoles=8\",\n                     userTO, UserTO.class);"},{"sha":"e79c1cdf197f9906522bcfccaa71c52ccf39ad5c","filename":"core/src/test/resources/content.xml","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -17,16 +17,16 @@\n     @TableGenerator.allocationSize * hibernate_sequences.sequence_next_hi_value,\n     so since SyncopeUser.id@TableGenerator.allocationSize == 100, actual\n     starting value for SyncopeUser.id is 1000 -->\n-    <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"UAttr\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RAttr\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MAttr\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"UAttrValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RAttrValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MAttrValue\" sequence_next_hi_value=\"1000\"/>\n-    \n+    <hibernate_sequences sequence_name=\"SEQ_SyncopeUser\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_SchemaMapping\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_UAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_RAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_MAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_UAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_RAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_MAttrValue\" sequence_next_hi_value=\"1000\"/>\n+\n     <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n     <SyncopeConf confKey=\"token.encryption.key\" confValue=\"1abcdefghil3mnopqrstuvz2\"/>\n@@ -88,6 +88,8 @@\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n     <USchema name=\"uselessReadonly\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"1\"/>\n+    <USchema name=\"cool\" type=\"Boolean\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n     <RSchema name=\"icon\" type=\"String\" virtual=\"0\"\n                 mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -104,6 +106,7 @@\n     <UAttr id=\"400\" owner_id=\"3\" schema_name=\"firstname\"/>\n     <UAttr id=\"500\" owner_id=\"3\" schema_name=\"surname\"/>\n     <UAttr id=\"550\" owner_id=\"4\" schema_name=\"loginDate\"/>\n+    <UAttr id=\"560\" owner_id=\"4\" schema_name=\"cool\"/>\n \n     <RAttr id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n     <RAttr id=\"700\" owner_id=\"2\" schema_name=\"icon\"/>\n@@ -113,13 +116,15 @@\n \n     <MAttr id=\"1000\" owner_id=\"4\" schema_name=\"subscriptionDate\"/>\n \n-    <UAttrValue attribute_id=\"100\" id=\"10\" stringValue=\"chicchiricco\"/>\n-    <UAttrValue attribute_id=\"300\" id=\"11\" stringValue=\"fabio.martelli\"/>\n+    <UAttrUniqueValue id=\"10\" attribute_id=\"100\" schema_name=\"username\" stringValue=\"chicchiricco\"/>\n+    <UAttrUniqueValue id=\"11\"  attribute_id=\"300\" schema_name=\"username\" stringValue=\"fabio.martelli\"/>\n+\n     <UAttrValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n     <UAttrValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>\n     <UAttrValue attribute_id=\"400\" id=\"30\" stringValue=\"John\"/>\n     <UAttrValue attribute_id=\"500\" id=\"31\" stringValue=\"Doe\"/>\n     <UAttrValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n+    <UAttrValue attribute_id=\"560\" id=\"23\" booleanValue=\"1\"/>\n \n     <RAttrValue attribute_id=\"600\" id=\"40\" stringValue=\"niceIcon\"/>\n     <RAttrValue attribute_id=\"700\" id=\"41\" stringValue=\"badIcon\"/>"},{"sha":"f2283230bb354bc93f81ab6f1b9b9d9550083bc8","filename":"identityconnectors/bundles/staticws/ws-target-resource/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -91,7 +91,7 @@\n \n         <!-- persistence dependencies -->\n         <dependency>\n-            <groupId>hsqldb</groupId>\n+            <groupId>org.hsqldb</groupId>\n             <artifactId>hsqldb</artifactId>\n         </dependency>\n         <dependency>"},{"sha":"2874c5de7febd5d2664fae2133c1f026056e5501","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/resources/schema.sql","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fschema.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fschema.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fschema.sql?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -1,5 +1,5 @@\n CREATE TABLE PUBLIC.user(\n-capsId INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)PRIMARY KEY,\n+capsId INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\n userId VARCHAR(30) NOT NULL,\n password VARCHAR(30) NOT NULL,\n type VARCHAR(17) NOT NULL,\n@@ -22,4 +22,4 @@ vatNumber VARCHAR(11),\n mandatoryDisclaimer BOOLEAN,\n promoRCSDisclaimer BOOLEAN,\n promoThirdPartyDisclaimer BOOLEAN,\n-UNIQUE(userId))\n\\ No newline at end of file\n+UNIQUE(userId))"},{"sha":"da1c8e863d30e5f1495c8bf3e3909771401ba293","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b5e3797793a1b3391c1ad4e0daa188ce76954d79/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b5e3797793a1b3391c1ad4e0daa188ce76954d79/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b5e3797793a1b3391c1ad4e0daa188ce76954d79","patch":"@@ -119,7 +119,7 @@\n \n         <org.apache.cxf.version>2.2.9</org.apache.cxf.version>\n \n-        <hsqldb.version>1.8.0.10</hsqldb.version>\n+        <hsqldb.version>2.0.0</hsqldb.version>\n \n         <reflections.version>0.9.5-RC2</reflections.version>\n \n@@ -341,7 +341,7 @@\n             </dependency>\n \n             <dependency>\n-                <groupId>hsqldb</groupId>\n+                <groupId>org.hsqldb</groupId>\n                 <artifactId>hsqldb</artifactId>\n                 <version>${hsqldb.version}</version>\n             </dependency>"}]}