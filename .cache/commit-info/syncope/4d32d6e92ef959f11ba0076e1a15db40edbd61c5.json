{"sha":"4d32d6e92ef959f11ba0076e1a15db40edbd61c5","node_id":"C_kwDOJfYA1toAKDRkMzJkNmU5MmVmOTU5ZjExYmEwMDc2ZTFhMTVkYjQwZWRiZDYxYzU","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2023-04-14T13:23:58Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2023-04-14T13:25:59Z"},"message":"[SYNCOPE-1751] moves random password generation to propagation task execution (#441)\n\n* [SYNCOPE-1751] moves random password generation to effective create on external resource\r\n\r\n---------\r\n\r\nCo-authored-by: Francesco Chicchiricc√≤ <ilgrosso@apache.org>","tree":{"sha":"f9d8882d9a3956e8996f41af5b7caa1eda81c043","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f9d8882d9a3956e8996f41af5b7caa1eda81c043"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4d32d6e92ef959f11ba0076e1a15db40edbd61c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d32d6e92ef959f11ba0076e1a15db40edbd61c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4d32d6e92ef959f11ba0076e1a15db40edbd61c5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"22ac6a587f0546410ca95a045e5bc4892410374e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22ac6a587f0546410ca95a045e5bc4892410374e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22ac6a587f0546410ca95a045e5bc4892410374e"}],"stats":{"total":286,"additions":199,"deletions":87},"files":[{"sha":"21ca8564b00fdf6c4e0409614973a5035a64fd78","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -259,7 +259,8 @@ public void issueSYNCOPE391() {\n \n     @Test\n     public void testPasswordGenerator() {\n-        String password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n+        String password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"),\n+                List.of(realmDAO.getRoot()));\n         assertNotNull(password);\n \n         User user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n@@ -270,7 +271,8 @@ public void testPasswordGenerator() {\n     @Test\n     public void passwordGeneratorFailing() {\n         assertThrows(IllegalArgumentException.class, () -> {\n-            String password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n+            String password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"),\n+                    List.of(realmDAO.getRoot()));\n             assertNotNull(password);\n \n             User user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");"},{"sha":"ee7c7ecadd3b04d17ae093cfb04b7053cc7bf5e3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -95,7 +95,6 @@\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.security.Encryptor;\n-import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -135,8 +134,6 @@ public class DefaultMappingManager implements MappingManager {\n \n     protected final VirAttrCache virAttrCache;\n \n-    protected final PasswordGenerator passwordGenerator;\n-\n     protected final AnyUtilsFactory anyUtilsFactory;\n \n     protected final IntAttrNameParser intAttrNameParser;\n@@ -153,7 +150,6 @@ public DefaultMappingManager(\n             final DerAttrHandler derAttrHandler,\n             final VirAttrHandler virAttrHandler,\n             final VirAttrCache virAttrCache,\n-            final PasswordGenerator passwordGenerator,\n             final AnyUtilsFactory anyUtilsFactory,\n             final IntAttrNameParser intAttrNameParser) {\n \n@@ -168,7 +164,6 @@ public DefaultMappingManager(\n         this.derAttrHandler = derAttrHandler;\n         this.virAttrHandler = virAttrHandler;\n         this.virAttrCache = virAttrCache;\n-        this.passwordGenerator = passwordGenerator;\n         this.anyUtilsFactory = anyUtilsFactory;\n         this.intAttrNameParser = intAttrNameParser;\n     }\n@@ -532,10 +527,6 @@ protected String getPasswordAttrValue(\n             }\n         }\n \n-        if (passwordAttrValue == null && resource.isRandomPwdIfNotProvided()) {\n-            passwordAttrValue = passwordGenerator.generate(resource);\n-        }\n-\n         return passwordAttrValue;\n     }\n "},{"sha":"2b86c433622c2272ea7c5db8ad6b4eaad2ba0eca","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -447,7 +447,6 @@ public VirAttrHandler virAttrHandler(\n     @ConditionalOnMissingBean\n     @Bean\n     public MappingManager mappingManager(\n-            final PasswordGenerator passwordGenerator,\n             final AnyUtilsFactory anyUtilsFactory,\n             final AnyTypeDAO anyTypeDAO,\n             final UserDAO userDAO,\n@@ -474,7 +473,6 @@ public MappingManager mappingManager(\n                 derAttrHandler,\n                 virAttrHandler,\n                 virAttrCache,\n-                passwordGenerator,\n                 anyUtilsFactory,\n                 intAttrNameParser);\n     }\n@@ -559,12 +557,14 @@ public PropagationTaskExecutor propagationTaskExecutor(\n             final TaskDAO taskDAO,\n             final ExternalResourceDAO resourceDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n+            final RealmDAO realmDAO,\n             final NotificationManager notificationManager,\n             final AuditManager auditManager,\n             final TaskDataBinder taskDataBinder,\n             final OutboundMatcher outboundMatcher,\n             final PlainAttrValidationManager validator,\n-            final ApplicationEventPublisher publisher) {\n+            final ApplicationEventPublisher publisher,\n+            final PasswordGenerator passwordGenerator) {\n \n         return new PriorityPropagationTaskExecutor(\n                 connectorManager,\n@@ -575,6 +575,7 @@ public PropagationTaskExecutor propagationTaskExecutor(\n                 taskDAO,\n                 resourceDAO,\n                 plainSchemaDAO,\n+                realmDAO,\n                 notificationManager,\n                 auditManager,\n                 taskDataBinder,\n@@ -583,6 +584,7 @@ public PropagationTaskExecutor propagationTaskExecutor(\n                 outboundMatcher,\n                 validator,\n                 publisher,\n+                passwordGenerator,\n                 propagationTaskExecutorAsyncExecutor);\n     }\n "},{"sha":"4f320d857e896f2452c84a3bdc6dbc24b8dcca6e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":121,"deletions":55,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OrgUnit;\n import org.apache.syncope.common.lib.to.Provision;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.ExecStatus;\n@@ -46,8 +47,10 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n@@ -73,6 +76,7 @@\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.implementation.ImplementationManager;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -82,6 +86,7 @@\n import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n@@ -118,6 +123,8 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n \n     protected final PlainSchemaDAO plainSchemaDAO;\n \n+    protected final RealmDAO realmDAO;\n+\n     protected final NotificationManager notificationManager;\n \n     protected final AuditManager auditManager;\n@@ -134,6 +141,8 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n \n     protected final ApplicationEventPublisher publisher;\n \n+    protected final PasswordGenerator passwordGenerator;\n+\n     protected final Map<String, PropagationActions> perContextActions = new ConcurrentHashMap<>();\n \n     public AbstractPropagationTaskExecutor(\n@@ -145,14 +154,16 @@ public AbstractPropagationTaskExecutor(\n             final TaskDAO taskDAO,\n             final ExternalResourceDAO resourceDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n+            final RealmDAO realmDAO,\n             final NotificationManager notificationManager,\n             final AuditManager auditManager,\n             final TaskDataBinder taskDataBinder,\n             final AnyUtilsFactory anyUtilsFactory,\n             final TaskUtilsFactory taskUtilsFactory,\n             final OutboundMatcher outboundMatcher,\n             final PlainAttrValidationManager validator,\n-            final ApplicationEventPublisher publisher) {\n+            final ApplicationEventPublisher publisher,\n+            final PasswordGenerator passwordGenerator) {\n \n         this.connectorManager = connectorManager;\n         this.connObjectUtils = connObjectUtils;\n@@ -162,6 +173,7 @@ public AbstractPropagationTaskExecutor(\n         this.taskDAO = taskDAO;\n         this.resourceDAO = resourceDAO;\n         this.plainSchemaDAO = plainSchemaDAO;\n+        this.realmDAO = realmDAO;\n         this.notificationManager = notificationManager;\n         this.auditManager = auditManager;\n         this.taskDataBinder = taskDataBinder;\n@@ -170,6 +182,7 @@ public AbstractPropagationTaskExecutor(\n         this.outboundMatcher = outboundMatcher;\n         this.validator = validator;\n         this.publisher = publisher;\n+        this.passwordGenerator = passwordGenerator;\n     }\n \n     @Override\n@@ -194,28 +207,94 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n         return result;\n     }\n \n+    protected void checkMandatoryMissing(\n+            final PropagationTaskInfo taskInfo,\n+            final Set<Attribute> attrs,\n+            final boolean enablePasswordCheck) {\n+\n+        // check if there is any missing or null / empty mandatory attribute\n+        Set<Object> mandatoryAttrNames = new HashSet<>();\n+        Optional.ofNullable(AttributeUtil.find(PropagationManager.MANDATORY_MISSING_ATTR_NAME, attrs)).\n+                ifPresent(missing -> {\n+                    attrs.remove(missing);\n+\n+                    if (taskInfo.getOperation() == ResourceOperation.CREATE) {\n+                        // SYNCOPE-1751 remove __PASSWORD__ if enablePasswordCheck is false, this is needed to support\n+                        // LinkedAccount update propagation without password\n+                        mandatoryAttrNames.addAll(enablePasswordCheck\n+                                ? missing.getValue()\n+                                : missing.getValue().stream()\n+                                        .filter(v -> !OperationalAttributes.PASSWORD_NAME.equals(v))\n+                                        .collect(Collectors.toList()));\n+                    }\n+                });\n+        Optional.ofNullable(AttributeUtil.find(PropagationManager.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, attrs)).\n+                ifPresent(nullOrEmpty -> {\n+                    attrs.remove(nullOrEmpty);\n+\n+                    mandatoryAttrNames.addAll(nullOrEmpty.getValue());\n+                });\n+        if (!mandatoryAttrNames.isEmpty()) {\n+            throw new IllegalArgumentException(\n+                    \"Not attempted because there are mandatory attributes without value(s): \" + mandatoryAttrNames);\n+        }\n+    }\n+\n     protected Uid doCreate(\n             final PropagationTaskInfo taskInfo,\n-            final Set<Attribute> attributes,\n             final Connector connector,\n-            final AtomicReference<Boolean> propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted,\n+            final List<PropagationActions> actions) {\n+\n+        Set<Attribute> attrs = taskInfo.getPropagationData().getAttributes();\n+\n+        if (AnyTypeKind.USER == taskInfo.getAnyTypeKind()\n+                && AttributeUtil.getPasswordValue(attrs) == null\n+                && taskInfo.getResource().isRandomPwdIfNotProvided()) {\n+\n+            // generate random password\n+            attrs.add(AttributeBuilder.buildPassword(\n+                    passwordGenerator.generate(taskInfo.getResource(),\n+                            realmDAO.findAncestors(userDAO.find(taskInfo.getEntityKey()).getRealm())).\n+                            toCharArray()));\n+\n+            // remove __PASSWORD__ from MANDATORY_MISSING attribute\n+            Set<Object> newMandatoryMissingAttrValues = new HashSet<>();\n+            Optional.ofNullable(AttributeUtil.find(PropagationManager.MANDATORY_MISSING_ATTR_NAME, attrs)).\n+                    ifPresent(missing -> {\n+                        newMandatoryMissingAttrValues.addAll(\n+                                missing.getValue().stream().\n+                                        filter(v -> !OperationalAttributes.PASSWORD_NAME.equals(v)).\n+                                        collect(Collectors.toList()));\n+                        attrs.remove(missing);\n+                    });\n+            if (!newMandatoryMissingAttrValues.isEmpty()) {\n+                attrs.add(AttributeBuilder.build(\n+                        PropagationManager.MANDATORY_MISSING_ATTR_NAME, newMandatoryMissingAttrValues));\n+            }\n+        }\n+\n+        actions.forEach(action -> action.before(taskInfo));\n \n-        LOG.debug(\"Create {} on {}\", attributes, taskInfo.getResource().getKey());\n+        checkMandatoryMissing(taskInfo, attrs, true);\n \n-        Uid result = connector.create(taskInfo.getObjectClass(), attributes, null, propagationAttempted);\n+        LOG.debug(\"Create {} on {}\", attrs, taskInfo.getResource().getKey());\n+\n+        Uid result = connector.create(taskInfo.getObjectClass(), attrs, null, propagationAttempted);\n \n         taskInfo.getResource().getProvisionByAnyType(taskInfo.getAnyType()).\n                 filter(provision -> provision.getUidOnCreate() != null).\n                 ifPresent(provision -> {\n-                    anyUtilsFactory.getInstance(taskInfo.getAnyTypeKind()).addAttr(\n+                    AnyUtils anyUtils = anyUtilsFactory.getInstance(taskInfo.getAnyTypeKind());\n+                    anyUtils.addAttr(\n                             validator,\n                             taskInfo.getEntityKey(),\n                             plainSchemaDAO.find(provision.getUidOnCreate()),\n                             result.getUidValue());\n                     publisher.publishEvent(new AnyLifecycleEvent<>(\n                             this,\n                             SyncDeltaType.UPDATE,\n-                            userDAO.find(taskInfo.getEntityKey()),\n+                            anyUtils.dao().find(taskInfo.getEntityKey()),\n                             AuthContextUtils.getDomain()));\n                 });\n \n@@ -224,15 +303,21 @@ protected Uid doCreate(\n \n     protected Uid doUpdate(\n             final PropagationTaskInfo taskInfo,\n-            final Set<Attribute> attributes,\n             final Connector connector,\n             final ConnectorObject beforeObj,\n-            final AtomicReference<Boolean> propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted,\n+            final List<PropagationActions> actions) {\n+\n+        actions.forEach(action -> action.before(taskInfo));\n+\n+        Set<Attribute> attrs = taskInfo.getPropagationData().getAttributes();\n \n-        LOG.debug(\"Update {} on {}\", attributes, taskInfo.getResource().getKey());\n+        checkMandatoryMissing(taskInfo, attrs, false);\n+\n+        LOG.debug(\"Update {} on {}\", attrs, taskInfo.getResource().getKey());\n \n         // 1. check if rename is really required\n-        Name newName = AttributeUtil.getNameFromAttributes(attributes);\n+        Name newName = AttributeUtil.getNameFromAttributes(attrs);\n \n         LOG.debug(\"Rename required with value {}\", newName);\n \n@@ -241,7 +326,7 @@ protected Uid doUpdate(\n                 && !newName.getNameValue().equals(beforeObj.getUid().getUidValue())) {\n \n             LOG.debug(\"Remote object name unchanged\");\n-            attributes.remove(newName);\n+            attrs.remove(newName);\n         }\n \n         // 2. check whether anything is actually needing to be propagated, i.e. if there is attribute\n@@ -250,22 +335,22 @@ protected Uid doUpdate(\n         if (beforeObj != null) {\n             originalAttrMap = beforeObj.getAttributes().stream().\n                     collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), Function.identity()));\n-            Map<String, Attribute> updateAttrMap = attributes.stream().\n+            Map<String, Attribute> updateAttrMap = attrs.stream().\n                     collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), Function.identity()));\n \n             // Only compare attribute from beforeObj that are also being updated\n             originalAttrMap.keySet().removeAll(updateAttrMap.keySet());\n         }\n \n         Uid result;\n-        if (!originalAttrMap.isEmpty() && originalAttrMap.values().equals(attributes)) {\n-            LOG.debug(\"Don't need to propagate anything: {} is equal to {}\", originalAttrMap.values(), attributes);\n-            result = AttributeUtil.getUidAttribute(attributes);\n+        if (!originalAttrMap.isEmpty() && originalAttrMap.values().equals(attrs)) {\n+            LOG.debug(\"Don't need to propagate anything: {} is equal to {}\", originalAttrMap.values(), attrs);\n+            result = AttributeUtil.getUidAttribute(attrs);\n         } else {\n-            LOG.debug(\"Attributes to update: {}\", attributes);\n+            LOG.debug(\"Attributes to update: {}\", attrs);\n \n             // 3. provision entry\n-            LOG.debug(\"Update {} on {}\", attributes, taskInfo.getResource().getKey());\n+            LOG.debug(\"Update {} on {}\", attrs, taskInfo.getResource().getKey());\n \n             result = connector.update(\n                     Optional.ofNullable(beforeObj).\n@@ -275,7 +360,7 @@ protected Uid doUpdate(\n                             map(ConnectorObject::getUid).\n                             orElseGet(() -> new Uid(taskInfo.getOldConnObjectKey() == null\n                             ? taskInfo.getConnObjectKey() : taskInfo.getOldConnObjectKey())),\n-                    attributes,\n+                    attrs,\n                     null,\n                     propagationAttempted);\n         }\n@@ -287,7 +372,10 @@ protected Uid doUpdateDelta(\n             final PropagationTaskInfo taskInfo,\n             final Set<AttributeDelta> modifications,\n             final Connector connector,\n-            final AtomicReference<Boolean> propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted,\n+            final List<PropagationActions> actions) {\n+\n+        actions.forEach(action -> action.before(taskInfo));\n \n         Uid uid = new Uid(taskInfo.getConnObjectKey());\n \n@@ -308,56 +396,38 @@ protected Uid createOrUpdate(\n             final boolean fetchRemoteObj,\n             final ConnectorObject beforeObj,\n             final Connector connector,\n-            final AtomicReference<Boolean> propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted,\n+            final List<PropagationActions> actions) {\n \n         PropagationData propagationData = taskInfo.getPropagationData();\n \n         if (propagationData.getAttributeDeltas() == null) {\n-            Set<Attribute> attrs = propagationData.getAttributes();\n-\n-            // check if there is any missing or null / empty mandatory attribute\n-            Set<Object> mandatoryAttrNames = new HashSet<>();\n-            Optional.ofNullable(AttributeUtil.find(PropagationManager.MANDATORY_MISSING_ATTR_NAME, attrs)).\n-                    ifPresent(missing -> {\n-                        attrs.remove(missing);\n-\n-                        if (taskInfo.getOperation() == ResourceOperation.CREATE) {\n-                            mandatoryAttrNames.addAll(missing.getValue());\n-                        }\n-                    });\n-            Optional.ofNullable(AttributeUtil.find(PropagationManager.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, attrs)).\n-                    ifPresent(nullOrEmpty -> {\n-                        attrs.remove(nullOrEmpty);\n-\n-                        mandatoryAttrNames.addAll(nullOrEmpty.getValue());\n-                    });\n-            if (!mandatoryAttrNames.isEmpty()) {\n-                throw new IllegalArgumentException(\n-                        \"Not attempted because there are mandatory attributes without value(s): \" + mandatoryAttrNames);\n-            }\n-\n             if (beforeObj != null) {\n-                return doUpdate(taskInfo, attrs, connector, beforeObj, propagationAttempted);\n+                return doUpdate(taskInfo, connector, beforeObj, propagationAttempted, actions);\n             }\n \n             if (fetchRemoteObj || taskInfo.getOperation() == ResourceOperation.CREATE) {\n-                return doCreate(taskInfo, attrs, connector, propagationAttempted);\n+                return doCreate(taskInfo, connector, propagationAttempted, actions);\n             }\n \n-            return doUpdate(taskInfo, attrs, connector, beforeObj, propagationAttempted);\n+            return doUpdate(taskInfo, connector, beforeObj, propagationAttempted, actions);\n         }\n \n-        return doUpdateDelta(taskInfo, propagationData.getAttributeDeltas(), connector, propagationAttempted);\n+        return doUpdateDelta(taskInfo, propagationData.getAttributeDeltas(), connector, propagationAttempted, actions);\n     }\n \n     protected Uid delete(\n             final PropagationTaskInfo taskInfo,\n             final boolean fetchRemoteObj,\n             final ConnectorObject beforeObj,\n             final Connector connector,\n-            final AtomicReference<Boolean> propagationAttempted) {\n+            final AtomicReference<Boolean> propagationAttempted,\n+            final List<PropagationActions> actions) {\n+\n+        actions.forEach(action -> action.before(taskInfo));\n \n         Uid result;\n+\n         if (fetchRemoteObj && beforeObj == null) {\n             LOG.debug(\"{} not found on {}: ignoring delete\",\n                     taskInfo.getConnObjectKey(), taskInfo.getResource().getKey());\n@@ -543,18 +613,14 @@ protected TaskExec<PropagationTask> doExecute(\n                 beforeObj = taskInfo.getBeforeObj().get();\n             }\n \n-            for (PropagationActions action : actions) {\n-                action.before(taskInfo);\n-            }\n-\n             switch (taskInfo.getOperation()) {\n                 case CREATE:\n                 case UPDATE:\n-                    uid = createOrUpdate(taskInfo, fetchRemoteObj, beforeObj, connector, propagationAttempted);\n+                    uid = createOrUpdate(taskInfo, fetchRemoteObj, beforeObj, connector, propagationAttempted, actions);\n                     break;\n \n                 case DELETE:\n-                    uid = delete(taskInfo, fetchRemoteObj, beforeObj, connector, propagationAttempted);\n+                    uid = delete(taskInfo, fetchRemoteObj, beforeObj, connector, propagationAttempted, actions);\n                     break;\n \n                 default:"},{"sha":"7313d1a1c5a0a0544c69a4e42a48065d13135c74","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n@@ -51,6 +52,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n@@ -97,6 +99,7 @@ public PriorityPropagationTaskExecutor(\n             final TaskDAO taskDAO,\n             final ExternalResourceDAO resourceDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n+            final RealmDAO realmDAO,\n             final NotificationManager notificationManager,\n             final AuditManager auditManager,\n             final TaskDataBinder taskDataBinder,\n@@ -105,6 +108,7 @@ public PriorityPropagationTaskExecutor(\n             final OutboundMatcher outboundMatcher,\n             final PlainAttrValidationManager validator,\n             final ApplicationEventPublisher publisher,\n+            final PasswordGenerator passwordGenerator,\n             final ThreadPoolTaskExecutor taskExecutor) {\n \n         super(connectorManager,\n@@ -115,14 +119,16 @@ public PriorityPropagationTaskExecutor(\n                 taskDAO,\n                 resourceDAO,\n                 plainSchemaDAO,\n+                realmDAO,\n                 notificationManager,\n                 auditManager,\n                 taskDataBinder,\n                 anyUtilsFactory,\n                 taskUtilsFactory,\n                 outboundMatcher,\n                 validator,\n-                publisher);\n+                publisher,\n+                passwordGenerator);\n         this.taskExecutor = taskExecutor;\n     }\n "},{"sha":"2c8195e1e42b5eed9716191c50f3fe4c5175a4a9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -200,18 +199,19 @@ public <C extends AnyCR> C getAnyCR(\n             UserCR userCR = (UserCR) anyCR;\n             List<PasswordPolicy> passwordPolicies = new ArrayList<>();\n \n-            Realm realm = realmDAO.findByFullPath(userCR.getRealm());\n-            if (realm != null) {\n-                realmDAO.findAncestors(realm).stream().\n-                        filter(ancestor -> ancestor.getPasswordPolicy() != null).\n-                        forEach(ancestor -> passwordPolicies.add(ancestor.getPasswordPolicy()));\n-            }\n-\n+            // add resource policies\n             userCR.getResources().stream().\n                     map(resourceDAO::find).\n                     filter(r -> r != null && r.getPasswordPolicy() != null).\n                     forEach(r -> passwordPolicies.add(r.getPasswordPolicy()));\n \n+            // add realm policies\n+            Optional.ofNullable(realmDAO.findByFullPath(userCR.getRealm())).\n+                    ifPresent(realm -> realmDAO.findAncestors(realm).stream().\n+                    filter(ancestor -> ancestor.getPasswordPolicy() != null\n+                    && !passwordPolicies.contains(ancestor.getPasswordPolicy())).\n+                    forEach(ancestor -> passwordPolicies.add(ancestor.getPasswordPolicy())));\n+\n             userCR.setPassword(passwordGenerator.generate(passwordPolicies));\n         }\n "},{"sha":"7c1ffc962bed59de40027471758db18a0ab19863","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DefaultMappingManagerTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -121,6 +121,8 @@ public void prepareAttrsForUser() {\n         assertNull(AttributeUtil.getPasswordValue(attrs.getRight()));\n \n         // 3. with no clear-text password but random password generation enabled\n+        // after SYNCOPE-1751 no password is going to be generated by DefaultMappingManager,\n+        // but by AbstractPropagationTaskExecutor\n         ldap.setRandomPwdIfNotProvided(true);\n         ldap = resourceDAO.save(ldap);\n         entityManager().flush();\n@@ -133,7 +135,7 @@ public void prepareAttrsForUser() {\n                 Boolean.TRUE,\n                 ldap,\n                 provision);\n-        assertNotEquals(encPassword, SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs.getRight())));\n+        assertNull(AttributeUtil.getPasswordValue(attrs.getRight()));\n \n         // 4. with no clear-text password and random password generation disabled\n         ldap.setRandomPwdIfNotProvided(false);\n@@ -217,6 +219,8 @@ public void prepareAttrsForLinkedAccount() {\n         assertNull(AttributeUtil.getPasswordValue(attrs));\n \n         // 4. without account password, no clear-text password but random password generation enabled\n+        // after SYNCOPE-1751 no password is going to be generated by DefaultMappingManager,\n+        // but by AbstractPropagationTaskExecutor\n         ldap.setRandomPwdIfNotProvided(true);\n         ldap = resourceDAO.save(ldap);\n         entityManager().flush();\n@@ -228,7 +232,7 @@ public void prepareAttrsForLinkedAccount() {\n                 null,\n                 true,\n                 provision);\n-        assertNotEquals(encPassword, SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs)));\n+        assertNull(AttributeUtil.getPasswordValue(attrs));\n \n         // 5. without account password, no clear-text password and random password generation disabled\n         ldap.setRandomPwdIfNotProvided(false);"},{"sha":"32954abff10c8324ae89c92a6345f5b26e107fa6","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultPasswordGenerator.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -21,11 +21,13 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.api.rules.PasswordRule;\n import org.apache.syncope.core.spring.implementation.ImplementationManager;\n@@ -56,12 +58,16 @@ public class DefaultPasswordGenerator implements PasswordGenerator {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public String generate(final ExternalResource resource) {\n+    public String generate(final ExternalResource resource, final List<Realm> realms) {\n         List<PasswordPolicy> policies = new ArrayList<>();\n \n-        if (resource.getPasswordPolicy() != null) {\n-            policies.add(resource.getPasswordPolicy());\n-        }\n+        // add resource policy\n+        Optional.ofNullable(resource.getPasswordPolicy()).ifPresent(policies::add);\n+\n+        // add realm policies\n+        realms.forEach(r -> Optional.ofNullable(r.getPasswordPolicy()).\n+                filter(p -> !policies.contains(p)).\n+                ifPresent(policies::add));\n \n         return generate(policies);\n     }"},{"sha":"758ea159f499bd6ae5839e98d92840f1cf3514eb","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/PasswordGenerator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -20,11 +20,12 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n \n public interface PasswordGenerator {\n \n-    String generate(ExternalResource resource);\n+    String generate(ExternalResource resource, List<Realm> realms);\n \n     String generate(List<PasswordPolicy> policies);\n }"},{"sha":"ca1b9d4a76bb16bf0b0b3bf310d01f155c5a5559","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -80,7 +80,7 @@ public void createWithLinkedAccountThenUpdateThenRemove() throws NamingException\n         // 1. create user with linked account\n         UserCR userCR = UserITCase.getSample(\n                 \"linkedAccount\" + RandomStringUtils.randomNumeric(5) + \"@syncope.apache.org\");\n-        String connObjectKeyValue = \"uid=\" + userCR.getUsername() + \",ou=People,o=isp\";\n+        String connObjectKeyValue = \"firstAccountOf\" + userCR.getUsername();\n         String privilege = APPLICATION_SERVICE.read(\"mightyApp\").getPrivileges().get(0).getKey();\n \n         LinkedAccountTO account = new LinkedAccountTO.Builder(RESOURCE_NAME_LDAP, connObjectKeyValue).build();\n@@ -107,7 +107,7 @@ public void createWithLinkedAccountThenUpdateThenRemove() throws NamingException\n         assertEquals(user.getPlainAttr(\"email\").get().getValues(), ldapObj.getAttr(\"mail\").get().getValues());\n         assertEquals(\"LINKED_SURNAME\", ldapObj.getAttr(\"sn\").get().getValues().get(0));\n \n-        // 3. remove linked account from user\n+        // 3. update linked account\n         UserUR userUR = new UserUR();\n         userUR.setKey(user.getKey());\n "},{"sha":"f5572f935f382dce8e2d115ede8c38f6308d6aff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d32d6e92ef959f11ba0076e1a15db40edbd61c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=4d32d6e92ef959f11ba0076e1a15db40edbd61c5","patch":"@@ -103,6 +103,7 @@\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.springframework.dao.DataAccessException;\n@@ -1008,4 +1009,37 @@ public void issueSYNCOPE1605() throws ParseException {\n             }\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1751() {\n+        // 1. Create a Group with a resource assigned\n+        GroupTO groupTO =\n+                createGroup(new GroupCR.Builder(SyncopeConstants.ROOT_REALM, \"SYNCOPEGROUP1751-\" + getUUIDString())\n+                        .resource(RESOURCE_NAME_LDAP)\n+                        .build()).getEntity();\n+        // 2. Create a user\n+        String username = \"SYNCOPEUSER1750\" + getUUIDString();\n+        UserTO userTO = createUser(\n+                new UserCR.Builder(SyncopeConstants.ROOT_REALM, username)\n+                        .plainAttrs(new Attr.Builder(\"userId\").value(username + \"@syncope.org\").build(),\n+                                new Attr.Builder(\"fullname\").value(username).build(),\n+                                new Attr.Builder(\"surname\").value(username).build())\n+                        .build()).getEntity();\n+        // 3. Update the user assigning the group previously created -> group-based provisioning\n+        userTO = updateUser(\n+                new UserUR.Builder(userTO.getKey()).membership(new MembershipUR.Builder(groupTO.getKey()).build())\n+                        .build()).getEntity();\n+        // since the resource is flagged to generate random pwd must populate the password on effective create on the\n+        // resource, even if it is an update on Syncope\n+        PagedResult<TaskTO> propTasks = TASK_SERVICE.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_LDAP).anyTypeKind(AnyTypeKind.USER)\n+                        .entityKey(userTO.getKey()).build());\n+        assertFalse(propTasks.getResult().isEmpty());\n+        assertEquals(1, propTasks.getSize());\n+        PropagationData propagationData =\n+                POJOHelper.deserialize(PropagationTaskTO.class.cast(propTasks.getResult().get(0)).getPropagationData(),\n+                        PropagationData.class);\n+        assertTrue(propagationData.getAttributes().stream()\n+                .anyMatch(a -> OperationalAttributes.PASSWORD_NAME.equals(a.getName())));\n+    }\n }"}]}