{"sha":"e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU5ODJhMjdhN2Y1Y2Q2YThjMjY0YTM3YmE0ZmJlOWVlMjkzY2FiMWM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-19T09:33:05Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-19T09:33:05Z"},"message":"Missing to consider memberships to be removed in update...\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246436 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c817c145b41c3a28c2ea53081d9327ed6ad0cd77","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c817c145b41c3a28c2ea53081d9327ed6ad0cd77"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/comments","author":null,"committer":null,"parents":[{"sha":"d9fbcaa7c46ea5f096a8bbc022729df2afecd5c6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9fbcaa7c46ea5f096a8bbc022729df2afecd5c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9fbcaa7c46ea5f096a8bbc022729df2afecd5c6"}],"stats":{"total":235,"additions":141,"deletions":94},"files":[{"sha":"62b699ab296bb373277aec7c423f3e829d7c3c7b","filename":"client/src/main/java/org/syncope/client/mod/UserMod.java","status":"modified","additions":28,"deletions":10,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java?ref=e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","patch":"@@ -20,26 +20,28 @@\n public class UserMod extends AbstractAttributableMod {\n \n     private String password;\n-    private Set<MembershipMod> membershipMods;\n+    private Set<MembershipMod> membershipsToBeAddeded;\n+    private Set<Long> membershipsToBeRemoved;\n \n     public UserMod() {\n-        membershipMods = new HashSet<MembershipMod>();\n+        membershipsToBeAddeded = new HashSet<MembershipMod>();\n+        membershipsToBeRemoved = new HashSet<Long>();\n     }\n \n-    public boolean addMembershipMod(MembershipMod membershipMod) {\n-        return membershipMods.add(membershipMod);\n+    public boolean addMembershipToBeAdded(MembershipMod membershipMod) {\n+        return membershipsToBeAddeded.add(membershipMod);\n     }\n \n-    public boolean removeMembershipMod(MembershipMod membershipMod) {\n-        return membershipMods.remove(membershipMod);\n+    public boolean removeMembershipToBeAdded(MembershipMod membershipMod) {\n+        return membershipsToBeAddeded.remove(membershipMod);\n     }\n \n-    public Set<MembershipMod> getMembershipMods() {\n-        return membershipMods;\n+    public Set<MembershipMod> getMembershipsToBeAdded() {\n+        return membershipsToBeAddeded;\n     }\n \n-    public void setMembershipMods(Set<MembershipMod> membershipMods) {\n-        this.membershipMods = membershipMods;\n+    public void setMembershipsToBeAdded(Set<MembershipMod> membershipMods) {\n+        this.membershipsToBeAddeded = membershipMods;\n     }\n \n     public String getPassword() {\n@@ -49,4 +51,20 @@ public String getPassword() {\n     public void setPassword(String password) {\n         this.password = password;\n     }\n+\n+    public boolean addMembershipToBeRemoved(Long membershipToBeRemoved) {\n+        return membershipsToBeRemoved.add(membershipToBeRemoved);\n+    }\n+\n+    public boolean removeMembershipToBeRemoved(Long membershipToBeRemoved) {\n+        return membershipsToBeRemoved.remove(membershipToBeRemoved);\n+    }\n+\n+    public Set<Long> getMembershipsToBeRemoved() {\n+        return membershipsToBeRemoved;\n+    }\n+\n+    public void setMembershipsToBeRemoved(Set<Long> membershipsToBeRemoved) {\n+        this.membershipsToBeRemoved = membershipsToBeRemoved;\n+    }\n }"},{"sha":"9d3e64b0b9ebfb5ab1500768edd1e2ababbc0f42","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","patch":"@@ -20,6 +20,7 @@\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Basic;\n@@ -93,6 +94,25 @@ public boolean removeMembership(Membership membership) {\n         return memberships.remove(membership);\n     }\n \n+    public Membership getMembership(Long syncopeRoleId) {\n+        Membership result = null;\n+        Membership membership = null;\n+        for (Iterator<Membership> itor =\n+                getMemberships().iterator();\n+                result == null && itor.hasNext();) {\n+\n+            membership = itor.next();\n+            if (membership.getSyncopeRole() != null\n+                    && syncopeRoleId.equals(\n+                    membership.getSyncopeRole().getId())) {\n+\n+                result = membership;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public List<Membership> getMemberships() {\n         return memberships;\n     }"},{"sha":"8795d14b884d68a3b7fa03be38062e97256d9713","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","patch":"@@ -54,18 +54,18 @@ public RoleTO create(HttpServletRequest request,\n             log.debug(\"create called with parameters \" + roleTO);\n         }\n \n-        SyncopeRole syncopeRole = null;\n+        SyncopeRole role = null;\n         try {\n-            syncopeRole = roleDataBinder.createSyncopeRole(roleTO);\n+            role = roleDataBinder.createSyncopeRole(roleTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + roleTO, e);\n \n             throw e;\n         }\n-        syncopeRole = syncopeRoleDAO.save(syncopeRole);\n+        role = syncopeRoleDAO.save(role);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return roleDataBinder.getRoleTO(syncopeRole);\n+        return roleDataBinder.getRoleTO(role);\n     }\n \n     @RequestMapping(method = RequestMethod.DELETE,\n@@ -161,18 +161,17 @@ public RoleTO update(HttpServletResponse response,\n             log.debug(\"update called with parameter \" + roleMod);\n         }\n \n-        SyncopeRole syncopeRole = syncopeRoleDAO.find(roleMod.getId());\n-\n-        if (syncopeRole == null) {\n+        SyncopeRole role = syncopeRoleDAO.find(roleMod.getId());\n+        if (role == null) {\n             log.error(\"Could not find user '\" + roleMod.getId() + \"'\");\n \n             throw new NotFoundException(String.valueOf(roleMod.getId()));\n         }\n \n-       ResourceOperations resourceOperations =\n-                roleDataBinder.updateSyncopeRole(syncopeRole, roleMod);\n-        syncopeRole = syncopeRoleDAO.save(syncopeRole);\n+        ResourceOperations resourceOperations =\n+                roleDataBinder.update(role, roleMod);\n+        role = syncopeRoleDAO.save(role);\n \n-        return roleDataBinder.getRoleTO(syncopeRole);\n+        return roleDataBinder.getRoleTO(role);\n     }\n }"},{"sha":"734a9073d3ab3d460190c899e5ee0b03d7edd4a1","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":26,"deletions":32,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","patch":"@@ -107,34 +107,32 @@ public SyncopeUser doExecuteAction(String actionName, Long userId,\n             Map<String, Object> moreInputs)\n             throws WorkflowException, NotFoundException {\n \n-        SyncopeUser syncopeUser = syncopeUserDAO.find(userId);\n-\n-        if (syncopeUser == null) {\n+        SyncopeUser user = syncopeUserDAO.find(userId);\n+        if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-\n             throw new NotFoundException(String.valueOf(userId));\n         }\n \n         Map<String, Object> inputs = new HashMap<String, Object>();\n         if (moreInputs != null && !moreInputs.isEmpty()) {\n             inputs.putAll(moreInputs);\n         }\n-        inputs.put(Constants.SYNCOPE_USER, syncopeUser);\n+        inputs.put(Constants.SYNCOPE_USER, user);\n \n-        Integer actionId = findWorkflowAction(syncopeUser.getWorkflowId(),\n+        Integer actionId = findWorkflowAction(user.getWorkflowId(),\n                 actionName);\n         if (actionId == null) {\n             throw new NotFoundException(\"Workflow action '\" + actionName + \"'\");\n         }\n \n         try {\n-            userWorkflow.doAction(syncopeUser.getWorkflowId(),\n+            userWorkflow.doAction(user.getWorkflowId(),\n                     actionId, inputs);\n         } catch (InvalidActionException e) {\n             throw new WorkflowException(e);\n         }\n \n-        return syncopeUserDAO.save(syncopeUser);\n+        return syncopeUserDAO.save(user);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -221,10 +219,8 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n             throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n-\n         if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-\n             throw new NotFoundException(String.valueOf(userId));\n         }\n \n@@ -273,10 +269,8 @@ public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n             throws NotFoundException {\n \n         SyncopeUser user = syncopeUserDAO.find(userId);\n-\n         if (user == null) {\n             log.error(\"Could not find user '\" + userId + \"'\");\n-\n             throw new NotFoundException(String.valueOf(userId));\n         }\n \n@@ -291,7 +285,7 @@ public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n         return mav;\n     }\n \n-    private Set<String> getSyncResourceNames(SyncopeUser syncopeUser,\n+    private Set<String> getSyncResourceNames(SyncopeUser user,\n             Set<Long> syncRoles, Set<String> syncResources) {\n \n         if ((syncRoles == null || syncRoles.isEmpty()\n@@ -301,12 +295,12 @@ private Set<String> getSyncResourceNames(SyncopeUser syncopeUser,\n \n         Set<String> syncResourceNames = new HashSet<String>();\n \n-        for (Resource resource : syncopeUser.getResources()) {\n+        for (Resource resource : user.getResources()) {\n             if (syncResources.contains(resource.getName())) {\n                 syncResourceNames.add(resource.getName());\n             }\n         }\n-        for (SyncopeRole role : syncopeUser.getRoles()) {\n+        for (SyncopeRole role : user.getRoles()) {\n             if (syncRoles.contains(role.getId())) {\n                 for (Resource resource : role.getResources()) {\n                     syncResourceNames.add(resource.getName());\n@@ -386,41 +380,41 @@ public UserTO create(HttpServletResponse response,\n             }\n         }\n \n-        SyncopeUser syncopeUser = userDataBinder.createSyncopeUser(userTO);\n-        syncopeUser.setWorkflowId(workflowId);\n-        syncopeUser.setCreationTime(new Date());\n-        syncopeUser = syncopeUserDAO.save(syncopeUser);\n+        SyncopeUser user = userDataBinder.createSyncopeUser(userTO);\n+        user.setWorkflowId(workflowId);\n+        user.setCreationTime(new Date());\n+        user = syncopeUserDAO.save(user);\n \n         // Check if attributes with unique schema have unique values\n-        userDataBinder.checkUniqueness(syncopeUser);\n+        userDataBinder.checkUniqueness(user);\n \n         // Now that user is created locally, let's propagate\n         Set<String> syncResourceNames =\n-                getSyncResourceNames(syncopeUser, syncRoles, syncResources);\n+                getSyncResourceNames(user, syncRoles, syncResources);\n         if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n             log.debug(\"About to propagate synchronously onto resources \"\n                     + syncResourceNames);\n         }\n         Set<String> propagatedResources =\n-                propagationManager.create(syncopeUser, syncResourceNames);\n+                propagationManager.create(user, syncResourceNames);\n         if (log.isDebugEnabled()) {\n             log.debug(\"Propagated onto resources \" + propagatedResources);\n         }\n \n         // User is created locally and propagated, let's advance on the workflow\n         Map<String, Object> inputs = new HashMap<String, Object>();\n-        inputs.put(Constants.SYNCOPE_USER, syncopeUser);\n+        inputs.put(Constants.SYNCOPE_USER, user);\n \n         int[] availableWorkflowActions = userWorkflow.getAvailableActions(\n                 workflowId, null);\n         for (int availableWorkflowAction : availableWorkflowActions) {\n             userWorkflow.doAction(workflowId, availableWorkflowAction,\n                     inputs);\n         }\n-        syncopeUser = syncopeUserDAO.save(syncopeUser);\n+        user = syncopeUserDAO.save(user);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return userDataBinder.getUserTO(syncopeUser, userWorkflow);\n+        return userDataBinder.getUserTO(user, userWorkflow);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -437,33 +431,33 @@ public UserTO update(@RequestBody UserMod userMod,\n         }\n \n         // First of all, let's check if update is allowed\n-        SyncopeUser syncopeUser = doExecuteAction(Constants.ACTION_UPDATE,\n+        SyncopeUser user = doExecuteAction(Constants.ACTION_UPDATE,\n                 userMod.getId(), Collections.singletonMap(Constants.USER_MOD,\n                 (Object) userMod));\n \n         // Update user with provided userMod\n         ResourceOperations resourceOperations =\n-                userDataBinder.updateSyncopeUser(syncopeUser, userMod);\n-        syncopeUser = syncopeUserDAO.save(syncopeUser);\n+                userDataBinder.update(user, userMod);\n+        user = syncopeUserDAO.save(user);\n \n         // Check if attributes with unique schema have unique values\n-        userDataBinder.checkUniqueness(syncopeUser);\n+        userDataBinder.checkUniqueness(user);\n \n         // Now that user is update locally, let's propagate\n         Set<String> syncResourceNames =\n-                getSyncResourceNames(syncopeUser, syncRoles, syncResources);\n+                getSyncResourceNames(user, syncRoles, syncResources);\n         if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n             log.debug(\"About to propagate synchronously onto resources \"\n                     + syncResourceNames);\n         }\n         Set<String> propagatedResources =\n-                propagationManager.update(syncopeUser,\n+                propagationManager.update(user,\n                 resourceOperations, syncResourceNames);\n         if (log.isDebugEnabled()) {\n             log.debug(\"Propagated onto resources \" + propagatedResources);\n         }\n \n-        return userDataBinder.getUserTO(syncopeUser, userWorkflow);\n+        return userDataBinder.getUserTO(user, userWorkflow);\n     }\n \n     @RequestMapping(method = RequestMethod.DELETE,"},{"sha":"8db4bbae842a656cfcb7651f6c6224062583a0fa","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","patch":"@@ -31,9 +31,9 @@ public class RoleDataBinder extends AbstractAttributableDataBinder {\n     public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        SyncopeRole syncopeRole = new SyncopeRole();\n-        syncopeRole.setInheritAttributes(roleTO.isInheritAttributes());\n-        syncopeRole.setInheritDerivedAttributes(\n+        SyncopeRole role = new SyncopeRole();\n+        role.setInheritAttributes(roleTO.isInheritAttributes());\n+        role.setInheritDerivedAttributes(\n                 roleTO.isInheritDerivedAttributes());\n \n         SyncopeClientCompositeErrorException scce =\n@@ -49,7 +49,7 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n \n             invalidRoles.addElement(\"No name specified for this role\");\n         } else {\n-            syncopeRole.setName(roleTO.getName());\n+            role.setName(roleTO.getName());\n         }\n         Long parentRoleId = null;\n         SyncopeRole parentRole = syncopeRoleDAO.find(roleTO.getParent());\n@@ -59,8 +59,8 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             invalidRoles.addElement(String.valueOf(roleTO.getParent()));\n             scce.addException(invalidRoles);\n         } else {\n-            syncopeRole.setParent(parentRole);\n-            parentRoleId = syncopeRole.getParent().getId();\n+            role.setParent(parentRole);\n+            parentRoleId = role.getParent().getId();\n         }\n \n         SyncopeRole otherRole = syncopeRoleDAO.find(\n@@ -73,14 +73,13 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n         }\n \n         // attributes, derived attributes and resources\n-        syncopeRole = (SyncopeRole) fill(syncopeRole, roleTO,\n+        role = (SyncopeRole) fill(role, roleTO,\n                 AttributableUtil.ROLE, scce);\n \n-        return syncopeRole;\n+        return role;\n     }\n \n-    public ResourceOperations updateSyncopeRole(\n-            SyncopeRole syncopeRole, RoleMod roleMod)\n+    public ResourceOperations update(SyncopeRole role, RoleMod roleMod)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce =\n@@ -92,7 +91,7 @@ public ResourceOperations updateSyncopeRole(\n                 SyncopeClientExceptionType.InvalidRoles);\n         if (roleMod.getName() != null) {\n             SyncopeRole otherRole = syncopeRoleDAO.find(\n-                    roleMod.getName(), syncopeRole.getParent().getId());\n+                    roleMod.getName(), role.getParent().getId());\n \n             if (otherRole != null) {\n                 log.error(\"Another role exists with the same name \"\n@@ -101,24 +100,24 @@ public ResourceOperations updateSyncopeRole(\n                 invalidRoles.addElement(roleMod.getName());\n                 scce.addException(invalidRoles);\n             } else {\n-                syncopeRole.setName(roleMod.getName());\n+                role.setName(roleMod.getName());\n             }\n         }\n \n         // inherited attributes\n         if (roleMod.isChangeInheritAttributes()) {\n-            syncopeRole.setInheritAttributes(\n-                    !syncopeRole.isInheritAttributes());\n+            role.setInheritAttributes(\n+                    !role.isInheritAttributes());\n         }\n \n         // inherited derived attributes\n         if (roleMod.isChangeInheritDerivedAttributes()) {\n-            syncopeRole.setInheritDerivedAttributes(\n-                    !syncopeRole.isInheritDerivedAttributes());\n+            role.setInheritDerivedAttributes(\n+                    !role.isInheritDerivedAttributes());\n         }\n \n         // attributes, derived attributes and resources\n-        return fill(syncopeRole, roleMod, AttributableUtil.ROLE, scce);\n+        return fill(role, roleMod, AttributableUtil.ROLE, scce);\n     }\n \n     public RoleTO getRoleTO(SyncopeRole role) {"},{"sha":"1b2ea76bdd2683f4450d592642912a90d63707c7","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":40,"deletions":23,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","patch":"@@ -52,19 +52,19 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n \n         // Check if UserTO has a valued id: if so,\n         // try to read the user from the db\n-        SyncopeUser syncopeUser = null;\n+        SyncopeUser user = null;\n         if (userTO.getId() == 0) {\n-            syncopeUser = new SyncopeUser();\n+            user = new SyncopeUser();\n         } else {\n-            syncopeUser = syncopeUserDAO.find(userTO.getId());\n-            if (syncopeUser == null) {\n+            user = syncopeUserDAO.find(userTO.getId());\n+            if (user == null) {\n                 log.error(\"Could not find user '\" + userTO.getId() + \"'\");\n \n                 throw new NotFoundException(String.valueOf(userTO.getId()));\n             }\n \n             formerMembershipIds = new HashSet<Long>();\n-            for (Membership membership : syncopeUser.getMemberships()) {\n+            for (Membership membership : user.getMemberships()) {\n                 formerMembershipIds.add(membership.getId());\n             }\n         }\n@@ -80,16 +80,16 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n \n             invalidPassword.addElement(\"Null password\");\n         } else {\n-            syncopeUser.setPassword(userTO.getPassword());\n+            user.setPassword(userTO.getPassword());\n         }\n \n         if (!invalidPassword.getElements().isEmpty()) {\n             scce.addException(invalidPassword);\n         }\n \n         // attributes, derived attributes and resources\n-        syncopeUser = (SyncopeUser) fill(\n-                syncopeUser, userTO, AttributableUtil.USER, scce);\n+        user = (SyncopeUser) fill(\n+                user, userTO, AttributableUtil.USER, scce);\n \n         // memberships\n         SyncopeRole role = null;\n@@ -103,15 +103,15 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n                 }\n             } else {\n                 Membership membership = null;\n-                if (syncopeUser.getId() != null) {\n-                    membership = membershipDAO.find(syncopeUser, role);\n+                if (user.getId() != null) {\n+                    membership = membershipDAO.find(user, role);\n                 }\n                 if (membership == null) {\n                     membership = new Membership();\n                     membership.setSyncopeRole(role);\n-                    membership.setSyncopeUser(syncopeUser);\n+                    membership.setSyncopeUser(user);\n \n-                    syncopeUser.addMembership(membership);\n+                    user.addMembership(membership);\n                 } else {\n                     formerMembershipIds.remove(membership.getId());\n                 }\n@@ -126,11 +126,10 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n             membershipDAO.delete(membershipId);\n         }\n \n-        return syncopeUser;\n+        return user;\n     }\n \n-    public ResourceOperations updateSyncopeUser(\n-            SyncopeUser syncopeUser, UserMod userMod)\n+    public ResourceOperations update(SyncopeUser user, UserMod userMod)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce =\n@@ -139,31 +138,49 @@ public ResourceOperations updateSyncopeUser(\n \n         // password\n         if (userMod.getPassword() != null) {\n-            syncopeUser.setPassword(userMod.getPassword());\n+            user.setPassword(userMod.getPassword());\n         }\n \n         // attributes, derived attributes and resources\n         ResourceOperations resourceOperations =\n-                fill(syncopeUser, userMod, AttributableUtil.USER, scce);\n+                fill(user, userMod, AttributableUtil.USER, scce);\n \n-        // memberships\n+        // memberships to be removed\n+        Membership membership = null;\n+        for (Long membershipToBeRemovedId :\n+                userMod.getMembershipsToBeRemoved()) {\n+\n+            membership = membershipDAO.find(membershipToBeRemovedId);\n+            if (membership == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Invalid membership id specified to be removed: \"\n+                            + membershipToBeRemovedId);\n+                }\n+            } else {\n+                user.removeMembership(membership);\n+                membershipDAO.delete(membershipToBeRemovedId);\n+            }\n+        }\n+\n+        // memberships to be added\n         SyncopeRole role = null;\n-        for (MembershipMod membershipMod : userMod.getMembershipMods()) {\n-            role = syncopeRoleDAO.find(membershipMod.getRole());\n+        for (MembershipMod membershipMod :\n+                userMod.getMembershipsToBeAdded()) {\n \n+            role = syncopeRoleDAO.find(membershipMod.getRole());\n             if (role == null) {\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Ignoring invalid role \"\n                             + membershipMod.getRole());\n                 }\n             } else {\n-                Membership membership = membershipDAO.find(syncopeUser, role);\n+                membership = membershipDAO.find(user, role);\n                 if (membership == null) {\n                     membership = new Membership();\n                     membership.setSyncopeRole(role);\n-                    membership.setSyncopeUser(syncopeUser);\n+                    membership.setSyncopeUser(user);\n \n-                    syncopeUser.addMembership(membership);\n+                    user.addMembership(membership);\n                 }\n \n                 resourceOperations.merge(fill(membership, membershipMod,"},{"sha":"37c8a35454a214a05fb2de3f1f0adfeab26412c0","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=e982a27a7f5cd6a8c264a37ba4fbe9ee293cab1c","patch":"@@ -255,7 +255,7 @@ public void update() {\n         userMod.addAttributeToBeRemoved(\"userId\");\n         userMod.addAttributeToBeUpdated(attributeMod);\n         userMod.addDerivedAttributeToBeAdded(\"cn\");\n-        userMod.addMembershipMod(membershipMod);\n+        userMod.addMembershipToBeAdded(membershipMod);\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 userMod, UserTO.class);"}]}