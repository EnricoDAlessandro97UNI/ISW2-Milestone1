{"sha":"f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyN2E1NDk4ODVhZDU4ZmRmNGVmN2ZhOWRkYzUxMmUxY2ZhZWVjNjU=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-04T14:53:42Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-04T14:53:42Z"},"message":"[SYNCOPE-259]\nIntroduces ResourceService and loggerService.\nMinor updates to other REST Services.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1428905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d83e39daaa88a96add23e5a9dddd3df3d405a3ce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d83e39daaa88a96add23e5a9dddd3df3d405a3ce"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/comments","author":null,"committer":null,"parents":[{"sha":"4902f14d4e4a95658b8a60e8feb394c1a786fbec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4902f14d4e4a95658b8a60e8feb394c1a786fbec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4902f14d4e4a95658b8a60e8feb394c1a786fbec"}],"stats":{"total":558,"additions":455,"deletions":103},"files":[{"sha":"f638fc9b7f83ea21b2affc35fb21949fcc9320a9","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -33,7 +33,7 @@\n \r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n \r\n-@Path(\"configuration\")\r\n+@Path(\"configurations\")\r\n public interface ConfigurationService {\r\n \r\n \t@POST\r\n@@ -52,7 +52,7 @@ public interface ConfigurationService {\n \r\n \t@PUT\r\n \t@Path(\"{key}\")\r\n-\tConfigurationTO update(final ConfigurationTO configurationTO);\r\n+\tConfigurationTO update(@PathParam(\"key\") final String key, final ConfigurationTO configurationTO);\r\n \r\n \t@GET\r\n \t@Path(\"validators\")\r"},{"sha":"a5407914bf1fcbc12448cc92b5461ce34f866f79","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationServiceProxy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationServiceProxy.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -60,7 +60,7 @@ public ConfigurationTO read(String key) {\n \t}\r\n \r\n \t@Override\r\n-\tpublic ConfigurationTO update(ConfigurationTO configurationTO) {\r\n+\tpublic ConfigurationTO update(String key, ConfigurationTO configurationTO) {\r\n \t\treturn restTemplate.postForObject(BASE_URL + \"configuration/update\",\r\n \t\t\t\tconfigurationTO, ConfigurationTO.class);\r\n \t}\r"},{"sha":"38e8bd861a53108d9c7aed4ad91000928ef8e612","filename":"client/src/main/java/org/apache/syncope/services/ReportService.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportService.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.QueryParam;\r\n+import javax.ws.rs.core.MediaType;\r\n+\r\n+import org.apache.syncope.client.to.ReportExecTO;\r\n+import org.apache.syncope.client.to.ReportTO;\r\n+import org.apache.syncope.types.ReportExecExportFormat;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RequestMethod;\r\n+\r\n+@Path(\"reports\")\r\n+public interface ReportService {\r\n+\r\n+    @POST\r\n+    ReportTO create(final ReportTO reportTO);\r\n+\r\n+    @PUT\r\n+    @Path(\"{reportId}\")\r\n+    ReportTO update(@PathParam(\"reportId\") final Long reportId, final ReportTO reportTO);\r\n+\r\n+    @GET\r\n+    @Path(\"count\")\r\n+    int count();\r\n+\r\n+    @GET\r\n+    List<ReportTO> list();\r\n+\r\n+    @GET\r\n+    List<ReportTO> list(@QueryParam(\"page\") final int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\r\n+\r\n+    @GET\r\n+    @Path(\"executions\")\r\n+    List<ReportExecTO> listExecutions();\r\n+\r\n+    @GET\r\n+    @Path(\"reportletConfClasses\")\r\n+    List<String> getReportletConfClasses();\r\n+\r\n+    @GET\r\n+    @Path(\"{reportId}\")\r\n+    ReportTO read(@PathParam(\"reportId\") final Long reportId);\r\n+\r\n+    @GET\r\n+    @Path(\"executions/{executionId}\")\r\n+    ReportExecTO readExecution(@PathParam(\"executionId\") final Long executionId);\r\n+\r\n+    @GET\r\n+    @Path(\"executions/{executionId}\")\r\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n+    void exportExecutionResult(@PathParam(\"executionId\") final Long executionId,\r\n+            @QueryParam(\"format\") final ReportExecExportFormat fmt);\r\n+\r\n+    @POST\r\n+    @Path(\"{reportId}/execute\")\r\n+    ReportExecTO execute(@PathParam(\"reportId\") final Long reportId);\r\n+\r\n+    @DELETE\r\n+    @Path(\"{reportId}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{reportId}\")\r\n+    ReportTO delete(@PathParam(\"reportId\") final Long reportId);\r\n+\r\n+    @DELETE\r\n+    @Path(\"executions/{executionId}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\r\n+    ReportExecTO deleteExecution(@PathParam(\"executionId\") final Long executionId);\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"54583021ab20d228d84ae8fa5169421668e628f3","filename":"client/src/main/java/org/apache/syncope/services/ReportServiceProxy.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FReportServiceProxy.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -0,0 +1,108 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.to.ReportExecTO;\r\n+import org.apache.syncope.client.to.ReportTO;\r\n+import org.apache.syncope.types.ReportExecExportFormat;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ReportServiceProxy extends SpringServiceProxy implements ReportService {\r\n+\r\n+    public ReportServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportTO create(ReportTO reportTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportTO update(Long reportId, ReportTO reportTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"report/update\", reportTO, ReportTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int count() {\r\n+        return restTemplate.getForObject(BASE_URL + \"report/count.json\", Integer.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ReportTO> list() {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/list\", ReportTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ReportTO> list(int page, int size) {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ReportExecTO> listExecutions() {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/execution/list\",\r\n+                ReportExecTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<String> getReportletConfClasses() {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/reportletConfClasses.json\",\r\n+                String[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportTO read(Long reportId) {\r\n+        return restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportExecTO readExecution(Long executionId) {\r\n+        return restTemplate.getForObject(BASE_URL + \"report/execution/read/{reportId}\",\r\n+                ReportExecTO.class, executionId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void exportExecutionResult(Long executionId, ReportExecExportFormat fmt) {\r\n+        // TODO Auto-generated method stub\r\n+\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportExecTO execute(Long reportId) {\r\n+        return restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\r\n+                ReportExecTO.class, reportId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportTO delete(Long reportId) {\r\n+        return restTemplate.getForObject(BASE_URL + \"report/delete/{reportId}\",\r\n+                ReportTO.class, reportId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ReportExecTO deleteExecution(Long executionId) {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n+\r\n+}\r"},{"sha":"ea2740431df32acc44df5e055f0f2b0d60c01776","filename":"client/src/main/java/org/apache/syncope/services/ResourceService.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.MatrixParam;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.client.to.ConnObjectTO;\r\n+import org.apache.syncope.client.to.ResourceTO;\r\n+import org.apache.syncope.types.AttributableType;\r\n+\r\n+@Path(\"resources\")\r\n+public interface ResourceService {\r\n+\r\n+    @POST\r\n+    ResourceTO create(final ResourceTO resourceTO);\r\n+\r\n+    @PUT\r\n+    @Path(\"{resourceName}\")\r\n+    ResourceTO update(@PathParam(\"resourceName\") final String resourceName, final ResourceTO resourceTO);\r\n+\r\n+    @DELETE\r\n+    @Path(\"{resourceName}\")\r\n+    ResourceTO delete(@PathParam(\"resourceName\") final String resourceName);\r\n+\r\n+    @GET\r\n+    @Path(\"{resourceName}\")\r\n+    ResourceTO read(@PathParam(\"resourceName\") final String resourceName);\r\n+\r\n+    // TODO: is it resource method?\r\n+    @GET\r\n+    @Path(\"propagationActionsClasses\")\r\n+    Set<String> getPropagationActionsClasses();\r\n+\r\n+    @GET\r\n+    List<ResourceTO> list(@MatrixParam(\"connInstanceId\") final Long connInstanceId);\r\n+\r\n+    @GET\r\n+    @Path(\"{resourceName}/{type}/{objectId}\")\r\n+    ConnObjectTO getConnector(@PathParam(\"resourceName\") final String resourceName,\r\n+            @PathParam(\"type\") final AttributableType type, @PathParam(\"objectId\") final String objectId);\r\n+\r\n+    @POST\r\n+    @Path(\"validate\")\r\n+    boolean check(final ResourceTO resourceTO);\r\n+}\r"},{"sha":"0b9104dea18343d33b9c2ee32da444392fa668c4","filename":"client/src/main/java/org/apache/syncope/services/ResourceServiceProxy.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceServiceProxy.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.client.to.ConnObjectTO;\r\n+import org.apache.syncope.client.to.ResourceTO;\r\n+import org.apache.syncope.types.AttributableType;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ResourceServiceProxy extends SpringServiceProxy implements ResourceService {\r\n+\r\n+    public ResourceServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ResourceTO create(ResourceTO resourceTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ResourceTO update(String resourceName, ResourceTO resourceTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ResourceTO delete(String resourceName) {\r\n+        return restTemplate.getForObject(BASE_URL + \"resource/delete/{resourceName}.json\", ResourceTO.class,\r\n+                resourceName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ResourceTO read(String resourceName) {\r\n+        return restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\r\n+                resourceName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<String> getPropagationActionsClasses() {\r\n+        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+                + \"resource/propagationActionsClasses.json\", String[].class)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ResourceTO> list(Long connInstanceId) {\r\n+        String query = (connInstanceId != null)\r\n+                ? query = \"?connInstanceId=\" + connInstanceId.toString()\r\n+                : \"\";\r\n+\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"resource/list.json\" + query,\r\n+                ResourceTO[].class, connInstanceId));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnObjectTO getConnector(String resourceName, AttributableType type, String objectId) {\r\n+        return restTemplate.getForObject(BASE_URL + \"resource/{resourceName}/read/{type}/{objectId}.json\",\r\n+                ConnObjectTO.class, resourceName, type, objectId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean check(ResourceTO resourceTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"resource/check.json\", resourceTO, Boolean.class)\r\n+                .booleanValue();\r\n+    }\r\n+\r\n+}\r"},{"sha":"981b6b30831b85834072f963042a5e2e48ea2751","filename":"client/src/main/java/org/apache/syncope/services/RoleService.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -32,15 +32,14 @@\n import org.apache.syncope.client.search.NodeCond;\r\n import org.apache.syncope.client.to.RoleTO;\r\n \r\n-@Path(\"role\")\r\n+@Path(\"roles\")\r\n public interface RoleService {\r\n \r\n \t@GET\r\n     @Path(\"{roleId}/children\")\r\n \tList<RoleTO> children(@PathParam(\"roleId\") final Long roleId);\r\n \r\n \t@POST\r\n-    @Path(\"\")\r\n \tRoleTO create(final RoleTO roleTO);\r\n \r\n \t@DELETE\r"},{"sha":"a6cffb326a525ed5a362df29aca8d802eed51583","filename":"client/src/main/java/org/apache/syncope/services/UserService.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n \n-@Path(\"user\")\n+@Path(\"users\")\n public interface UserService {\n \n     /**\n@@ -65,7 +65,6 @@ public interface UserService {\n     int count();\n \n     @POST\n-    @Path(\"\")\n     UserTO create(final UserTO userTO);\n \n     @DELETE"},{"sha":"3652faa93db0dc2cc23ba2fd43bc1a1b0f166807","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -29,6 +29,8 @@\n import org.apache.syncope.services.ConnectorServiceProxy;\n import org.apache.syncope.services.EntitlementServiceProxy;\n import org.apache.syncope.services.LoggerServiceProxy;\n+import org.apache.syncope.services.ReportServiceProxy;\n+import org.apache.syncope.services.ResourceServiceProxy;\n import org.apache.syncope.services.RoleServiceProxy;\n import org.apache.syncope.services.UserServiceProxy;\n import org.junit.Before;\n@@ -80,6 +82,8 @@ protected static AttributeMod attributeMod(final String schema,\n \n \tprotected RoleServiceProxy roleService;\n \n+\tprotected ResourceServiceProxy resourceService;\n+\n \tprotected EntitlementServiceProxy entitlementService;\n \n \tprotected ConfigurationServiceProxy configurationService;\n@@ -88,6 +92,8 @@ protected static AttributeMod attributeMod(final String schema,\n \n \tprotected LoggerServiceProxy loggerService;\n \n+\tprotected ReportServiceProxy reportService;\n+\n \t@Autowired\n \tprotected DataSource testDataSource;\n \n@@ -110,9 +116,11 @@ public void resetRestTemplate() {\n \t\tsetupRestTemplate(ADMIN_UID, ADMIN_PWD);\n \t\tuserService = new UserServiceProxy(BASE_URL, restTemplate);\n \t\troleService = new RoleServiceProxy(BASE_URL, restTemplate);\n+\t\tresourceService = new ResourceServiceProxy(BASE_URL, restTemplate);\n \t\tentitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n \t\tconfigurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n \t\tconnectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n \t\tloggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n+\t\treportService = new ReportServiceProxy(BASE_URL, restTemplate);\n \t}\n }"},{"sha":"e9eb4729c04d3d91f67cf024e90461a162565ab4","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -95,9 +95,9 @@ public void update() {\n \t\tvalue++;\n \t\tconfigurationTO.setValue(value + \"\");\n \n-\t\tConfigurationTO newConfigurationTO = configurationService.update(configurationTO);\n+\t\tConfigurationTO newConfigurationTO = configurationService.update(configurationTO.getKey(), configurationTO);\n \t\tassertEquals(configurationTO, newConfigurationTO);\n-\t\t\n+\n \t\tnewConfigurationTO = configurationService.read(\"token.expireTime\");\n \t\tassertEquals(configurationTO, newConfigurationTO);\n \t}"},{"sha":"e6b81bb4fbcdcef72011998895f58f422b06f582","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -18,22 +18,21 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n-import org.identityconnectors.common.security.GuardedString;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n+\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n import org.apache.syncope.client.to.MappingItemTO;\n@@ -44,8 +43,13 @@\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.ConnectorCapability;\n import org.apache.syncope.types.IntMappingType;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ConnInstanceTestITCase extends AbstractTest {\n@@ -240,8 +244,7 @@ public void issueSYNCOPE10() {\n         assertNotNull(connInstanceTO);\n \n         // check for resource\n-        List<ResourceTO> resources = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"resource/list.json?connInstanceId=103\", ResourceTO[].class));\n+        List<ResourceTO> resources = resourceService.list(Long.valueOf(103));\n \n         assertEquals(4, resources.size());\n \n@@ -273,13 +276,11 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         // Check for connector instance update after resource creation.\n         // ----------------------------------\n-        resourceTO = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO,\n-                ResourceTO.class);\n+        resourceTO = resourceService.create(resourceTO);\n \n         assertNotNull(resourceTO);\n \n-        resources = Arrays.asList(restTemplate.getForObject(BASE_URL + \"resource/list.json?connInstanceId=\"\n-                + connId, ResourceTO[].class));\n+        resources = resourceService.list(connId);\n \n         assertEquals(1, resources.size());\n         // ----------------------------------\n@@ -598,7 +599,7 @@ public void issueSYNCOPE112() {\n         // ----------------------------------------\n         // Check connection without saving the resource ....\n         // ----------------------------------------\n-        assertTrue(restTemplate.postForObject(BASE_URL + \"resource/check.json\", resourceTO, Boolean.class));\n+        assertTrue(resourceService.check(resourceTO));\n         // ----------------------------------------\n     }\n }"},{"sha":"d5735483c9d3ae057928cd861429bb00c6b8ca0e","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":36,"deletions":42,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -18,48 +18,49 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.IOException;\n import java.io.StringWriter;\n import java.net.HttpURLConnection;\n import java.net.URL;\n-import java.util.Arrays;\n import java.util.List;\n-import java.util.Set;\n+\n import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.io.IOUtils;\n-import org.junit.Test;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n import org.apache.syncope.client.report.UserReportletConf;\n import org.apache.syncope.client.to.ReportExecTO;\n import org.apache.syncope.client.to.ReportTO;\n-import org.apache.syncope.client.to.UserTO;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ReportTestITCase extends AbstractTest {\n \n     @Test\n     public void getReportletClasses() {\n-        List<String> reportletClasses = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"report/reportletConfClasses.json\", String[].class));\n+        List<String> reportletClasses = reportService.getReportletConfClasses();\n         assertNotNull(reportletClasses);\n         assertFalse(reportletClasses.isEmpty());\n     }\n \n     @Test\n     public void count() {\n-        Integer count = restTemplate.getForObject(BASE_URL + \"report/count.json\", Integer.class);\n+        Integer count = reportService.count();\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n     public void list() {\n-        List<ReportTO> reports = Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/list\", ReportTO[].class));\n+        List<ReportTO> reports = reportService.list();\n         assertNotNull(reports);\n         assertFalse(reports.isEmpty());\n         for (ReportTO report : reports) {\n@@ -69,8 +70,7 @@ public void list() {\n \n     @Test\n     public void listExecutions() {\n-        List<ReportExecTO> executions = Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/execution/list\",\n-                ReportExecTO[].class));\n+        List<ReportExecTO> executions = reportService.listExecutions();\n         assertNotNull(executions);\n         assertFalse(executions.isEmpty());\n         for (ReportExecTO execution : executions) {\n@@ -80,7 +80,7 @@ public void listExecutions() {\n \n     @Test\n     public void read() {\n-        ReportTO reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+        ReportTO reportTO = reportService.read(1L);\n \n         assertNotNull(reportTO);\n         assertNotNull(reportTO.getExecutions());\n@@ -89,8 +89,7 @@ public void read() {\n \n     @Test\n     public void readExecution() {\n-        ReportExecTO reportExecTO = restTemplate.getForObject(BASE_URL + \"report/execution/read/{reportId}\",\n-                ReportExecTO.class, 1);\n+        ReportExecTO reportExecTO = reportService.readExecution(1L);\n         assertNotNull(reportExecTO);\n     }\n \n@@ -101,11 +100,10 @@ public void create() {\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n-        report = restTemplate.postForObject(BASE_URL + \"report/create\", report, ReportTO.class);\n+        report = reportService.create(report);\n         assertNotNull(report);\n \n-        ReportTO actual = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class,\n-                report.getId());\n+        ReportTO actual = reportService.read(report.getId());\n         assertNotNull(actual);\n \n         assertEquals(actual, report);\n@@ -118,13 +116,13 @@ public void update() {\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n-        report = restTemplate.postForObject(BASE_URL + \"report/create\", report, ReportTO.class);\n+        report = reportService.create(report);\n         assertNotNull(report);\n         assertEquals(2, report.getReportletConfs().size());\n \n         report.addReportletConf(new UserReportletConf(\"last\"));\n \n-        ReportTO updated = restTemplate.postForObject(BASE_URL + \"report/update\", report, ReportTO.class);\n+        ReportTO updated = reportService.update(report.getId(), report);\n         assertNotNull(updated);\n         assertEquals(3, updated.getReportletConfs().size());\n     }\n@@ -136,22 +134,22 @@ public void delete() {\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n-        report = restTemplate.postForObject(BASE_URL + \"report/create\", report, ReportTO.class);\n+        report = reportService.create(report);\n         assertNotNull(report);\n \n-        ReportTO deletedReport =\n-                restTemplate.getForObject(BASE_URL + \"report/delete/{reportId}\", ReportTO.class, report.getId());\n+        ReportTO deletedReport = reportService.delete(report.getId());\n         assertNotNull(deletedReport);\n \n         try {\n-            restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", UserTO.class, report.getId());\n+            reportService.read(report.getId());\n             fail();\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n-    private void checkExport(final long execId, final String fmt, final String encodedAuth) throws IOException {\n+    private void checkExport(final long execId, final String fmt, final String encodedAuth)\n+            throws IOException {\n         URL url = new URL(BASE_URL + \"report/execution/export/\" + execId + \"?fmt=\" + fmt);\n         int responseCode = 0;\n         String export = null;\n@@ -178,17 +176,15 @@ private void checkExport(final long execId, final String fmt, final String encod\n     }\n \n     @Test\n-    public void executeAndExport()\n-            throws IOException {\n+    public void executeAndExport() throws IOException {\n \n-        ReportTO reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+        ReportTO reportTO = reportService.read(1L);\n         reportTO.setId(0);\n         reportTO.setName(\"executeAndExport\");\n-        reportTO = restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\n+        reportTO = reportService.create(reportTO);\n         assertNotNull(reportTO);\n \n-        ReportExecTO execution = restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\n-                ReportExecTO.class, reportTO.getId());\n+        ReportExecTO execution = reportService.execute(reportTO.getId());\n         assertNotNull(execution);\n \n         int maxit = 50;\n@@ -198,7 +194,7 @@ public void executeAndExport()\n             } catch (InterruptedException e) {\n             }\n \n-            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportTO.getId());\n+            reportTO = reportService.read(reportTO.getId());\n \n             maxit--;\n         } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n@@ -257,11 +253,10 @@ public void executeAndExport()\n     public void issueSYNCOPE43() {\n         ReportTO reportTO = new ReportTO();\n         reportTO.setName(\"issueSYNCOPE43\");\n-        reportTO = restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\n+        reportTO = reportService.create(reportTO);\n         assertNotNull(reportTO);\n \n-        ReportExecTO execution = restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\n-                ReportExecTO.class, reportTO.getId());\n+        ReportExecTO execution = reportService.execute(reportTO.getId());\n         assertNotNull(execution);\n \n         int maxit = 50;\n@@ -271,7 +266,7 @@ public void issueSYNCOPE43() {\n             } catch (InterruptedException e) {\n             }\n \n-            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportTO.getId());\n+            reportTO = reportService.read(reportTO.getId());\n \n             maxit--;\n         } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n@@ -282,16 +277,15 @@ public void issueSYNCOPE43() {\n     @Test\n     public void issueSYNCOPE102() throws IOException {\n         // Create\n-        ReportTO reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n+        ReportTO reportTO = reportService.read(1L);\n         reportTO.setId(0);\n         reportTO.setName(\"issueSYNCOPE102\");\n-        reportTO = restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\n+        reportTO = reportService.create(reportTO);\n         assertNotNull(reportTO);\n \n         // Execute (multiple requests)\n         for (int i = 0; i < 10; i++) {\n-            ReportExecTO execution = restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\n-                    ReportExecTO.class, reportTO.getId());\n+            ReportExecTO execution = reportService.execute(reportTO.getId());\n             assertNotNull(execution);\n         }\n \n@@ -303,7 +297,7 @@ public void issueSYNCOPE102() throws IOException {\n             } catch (InterruptedException e) {\n             }\n \n-            reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportTO.getId());\n+            reportTO = reportService.read(reportTO.getId());\n \n             maxit--;\n         } while (reportTO.getExecutions().isEmpty() && maxit > 0);"},{"sha":"eb7ce6a8f2013349a8395b0fc2d91ff2dab93570","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":21,"deletions":32,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -46,8 +46,7 @@ public class ResourceTestITCase extends AbstractTest {\n \n     @Test\n     public void getPropagationActionsClasses() {\n-        Set<String> actions = restTemplate.getForObject(\n-                BASE_URL + \"resource/propagationActionsClasses.json\", Set.class);\n+        Set<String> actions = resourceService.getPropagationActionsClasses();\n         assertNotNull(actions);\n         assertFalse(actions.isEmpty());\n     }\n@@ -84,12 +83,11 @@ public void create() {\n \n         resourceTO.setUmapping(mapping);\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        ResourceTO actual = resourceService.create(resourceTO);\n         assertNotNull(actual);\n \n         // check for existence\n-        actual = restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\n-                resourceName);\n+        actual = resourceService.read(resourceName);\n         assertNotNull(actual);\n     }\n \n@@ -136,13 +134,12 @@ public void createOverridingProps() {\n         Set<ConnConfProperty> connectorConfigurationProperties = new HashSet<ConnConfProperty>(Arrays.asList(p));\n         resourceTO.setConnectorConfigurationProperties(connectorConfigurationProperties);\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        ResourceTO actual = resourceService.create(resourceTO);\n         assertNotNull(actual);\n \n         // check the existence\n \n-        actual = restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\n-                resourceName);\n+        actual = resourceService.read(resourceName);\n         assertNotNull(actual);\n     }\n \n@@ -171,7 +168,7 @@ public void createWithSingleMappingItem() {\n \n         resourceTO.setRmapping(rmapping);\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        ResourceTO actual = resourceService.create(resourceTO);\n         assertNotNull(actual);\n         assertNotNull(actual.getUmapping());\n         assertNotNull(actual.getUmapping().getItems());\n@@ -203,7 +200,7 @@ public void createWithInvalidMapping() {\n \n         Throwable t = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+            resourceService.create(resourceTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n \n@@ -239,7 +236,7 @@ public void createWithoutExtAttr() {\n \n         resourceTO.setUmapping(mapping);\n \n-        restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        resourceService.create(resourceTO);\n     }\n \n     @Test\n@@ -261,13 +258,12 @@ public void createWithPasswordPolicy() {\n \n         resourceTO.setUmapping(mapping);\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        ResourceTO actual = resourceService.create(resourceTO);\n         assertNotNull(actual);\n \n         // check the existence\n \n-        actual = restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\n-                resourceName);\n+        actual = resourceService.read(resourceName);\n         assertNotNull(actual);\n         assertNotNull(actual.getPasswordPolicy());\n         assertEquals(4L, (long) actual.getPasswordPolicy());\n@@ -279,7 +275,7 @@ public void updateWithException() {\n             ResourceTO resourceTO = new ResourceTO();\n             resourceTO.setName(\"resourcenotfound\");\n \n-            restTemplate.postForObject(BASE_URL + \"resource/update.json\", resourceTO, ResourceTO.class);\n+            resourceService.update(resourceTO.getName(), resourceTO);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -319,7 +315,7 @@ public void update() {\n \n         resourceTO.setUmapping(mapping);\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/update.json\", resourceTO, ResourceTO.class);\n+        ResourceTO actual = resourceService.update(resourceTO.getName(), resourceTO);\n         assertNotNull(actual);\n \n         // check for existence\n@@ -331,8 +327,7 @@ public void update() {\n     @Test\n     public void deleteWithException() {\n         try {\n-            restTemplate.getForObject(\n-                    BASE_URL + \"resource/delete/{resourceName}.json\", ResourceTO.class, \"resourcenotfound\");\n+            resourceService.delete(\"resourcenotfound\");\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -342,13 +337,12 @@ public void deleteWithException() {\n     public void updateResetSyncToken() {\n         // pre condition: sync token is set\n         String resourceName = \"ws-target-resource-update-resetsynctoken\";\n-        ResourceTO pre = restTemplate.getForObject(BASE_URL + \"/resource/read/{resourceName}.json\", ResourceTO.class,\n-                resourceName);\n+        ResourceTO pre = resourceService.read(resourceName);\n         assertNotNull(pre.getUsyncToken());\n \n         pre.setUsyncToken(null);\n \n-        ResourceTO actual = restTemplate.postForObject(BASE_URL + \"resource/update.json\", pre, ResourceTO.class);\n+        ResourceTO actual = resourceService.update(pre.getName(), pre);\n \n         // check that the synctoken has been reset\n         assertNull(actual.getUsyncToken());\n@@ -358,22 +352,19 @@ public void updateResetSyncToken() {\n     public void delete() {\n         final String resourceName = \"ws-target-resource-delete\";\n \n-        ResourceTO deletedResource =\n-                restTemplate.getForObject(BASE_URL + \"resource/delete/{resourceName}.json\", ResourceTO.class,\n-                resourceName);\n+        ResourceTO deletedResource = resourceService.delete(resourceName);\n         assertNotNull(deletedResource);\n \n         try {\n-            restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class, resourceName);\n+            resourceService.read(resourceName);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n     @Test\n     public void list() {\n-        List<ResourceTO> actuals = Arrays.asList(restTemplate.getForObject(BASE_URL + \"resource/list.json\",\n-                ResourceTO[].class));\n+        List<ResourceTO> actuals = resourceService.list(null);\n         assertNotNull(actuals);\n         assertFalse(actuals.isEmpty());\n         for (ResourceTO resourceTO : actuals) {\n@@ -383,8 +374,7 @@ public void list() {\n \n     @Test\n     public void listByType() {\n-        List<ResourceTO> actuals = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"resource/list.json?connInstanceId=105\", ResourceTO[].class));\n+        List<ResourceTO> actuals = resourceService.list(Long.valueOf(105));\n \n         assertNotNull(actuals);\n         assertEquals(1, actuals.size());\n@@ -393,9 +383,8 @@ public void listByType() {\n \n     @Test\n     public void read() {\n-        ResourceTO actual = restTemplate.getForObject(BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"resource-testdb\");\n-\n+        ResourceTO actual = resourceService.read(\"resource-testdb\");\n+        \n         assertNotNull(actual);\n     }\n }"},{"sha":"6ab4c352f305ebcc3b1ff04fd26f378de60b3522","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n+import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -108,9 +109,7 @@ public void create() {\n \n \t\tassertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n \n-\t\tConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-\t\t\t\t+ \"/resource/resource-ldap/read/ROLE/lastRole.json\",\n-\t\t\t\tConnObjectTO.class);\n+\t\tConnObjectTO connObjectTO = resourceService.getConnector(\"resource-ldap\", AttributableType.ROLE, \"lastRole\");\n \t\tassertNotNull(connObjectTO);\n \t\tassertNotNull(connObjectTO.getAttributeMap().get(\"owner\"));\n \t}"},{"sha":"afe3ede97eee37481ebe3a081551be68de6ae7de","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=f27a549885ad58fdf4ef7fa9ddc512e1cfaeec65","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.core.init.SpringContextInitializer;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.CipherAlgorithm;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n@@ -69,9 +70,7 @@\n public class UserTestITCase extends AbstractTest {\n \n     private ConnObjectTO readUserConnObj(String resourceName, String userId) {\n-        return restTemplate.getForObject(BASE_URL\n-                + \"/resource/{resourceName}/read/USER/{objectId}.json\", ConnObjectTO.class,\n-                resourceName, userId);\n+        return resourceService.getConnector(resourceName, AttributableType.USER, userId);\n     }\n \n     public static UserTO getSampleTO(final String email) {"}]}