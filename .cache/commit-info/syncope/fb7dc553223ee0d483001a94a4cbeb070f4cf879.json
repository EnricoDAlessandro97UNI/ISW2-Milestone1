{"sha":"fb7dc553223ee0d483001a94a4cbeb070f4cf879","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZiN2RjNTUzMjIzZWUwZDQ4MzAwMWE5NGE0Y2JlYjA3MGY0Y2Y4Nzk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-07T15:50:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-07T15:51:07Z"},"message":"[SYNCOPE-1409] Avoid double read either before and afterwards","tree":{"sha":"4d0a5aa5cdaf255e2ba643367374cc6cb9599086","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4d0a5aa5cdaf255e2ba643367374cc6cb9599086"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/fb7dc553223ee0d483001a94a4cbeb070f4cf879","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fb7dc553223ee0d483001a94a4cbeb070f4cf879","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fb7dc553223ee0d483001a94a4cbeb070f4cf879","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fb7dc553223ee0d483001a94a4cbeb070f4cf879/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a7c823f7d49b81231228f00d85b1dce1c197b0da","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a7c823f7d49b81231228f00d85b1dce1c197b0da","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a7c823f7d49b81231228f00d85b1dce1c197b0da"}],"stats":{"total":653,"additions":367,"deletions":286},"files":[{"sha":"62c4cc61dca34cc6cc30491da62423fd0b6c56b0","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -26,7 +26,6 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -46,6 +45,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -121,8 +121,8 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());\n-        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));\n@@ -143,8 +143,8 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n         PropagationByResource propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n-        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));\n@@ -184,8 +184,8 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n-        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));"},{"sha":"7d231f9577e92fafed2edc43e42cd1270e4906fe","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -60,6 +60,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobDataMap;\n@@ -233,7 +234,20 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n         ExecTO result = null;\n         switch (taskUtil.getType()) {\n             case PROPAGATION:\n-                TaskExec propExec = taskExecutor.execute(binder.<PropagationTaskTO>getTaskTO(task, taskUtil, false));\n+                PropagationTaskTO taskTO = binder.<PropagationTaskTO>getTaskTO(task, taskUtil, false);\n+                PropagationTaskInfo taskInfo = new PropagationTaskInfo();\n+                taskInfo.setKey(taskTO.getKey());\n+                taskInfo.setOperation(taskTO.getOperation());\n+                taskInfo.setConnObjectKey(taskTO.getConnObjectKey());\n+                taskInfo.setOldConnObjectKey(taskTO.getOldConnObjectKey());\n+                taskInfo.setAttributes(taskTO.getAttributes());\n+                taskInfo.setResource(taskTO.getResource());\n+                taskInfo.setObjectClassName(taskTO.getObjectClassName());\n+                taskInfo.setAnyTypeKind(taskTO.getAnyTypeKind());\n+                taskInfo.setAnyType(taskTO.getAnyType());\n+                taskInfo.setEntityKey(taskTO.getEntityKey());\n+\n+                TaskExec propExec = taskExecutor.execute(taskInfo);\n                 result = binder.getExecTO(propExec);\n                 break;\n "},{"sha":"3ca159d7f0ea6c4e51742fb2121d81b73a4a7229","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -23,7 +23,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -42,7 +41,7 @@ public interface PropagationManager {\n      * @param noPropResourceKeys external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskTO> getCreateTasks(\n+    List<PropagationTaskInfo> getCreateTasks(\n             AnyTypeKind kind,\n             String key,\n             Boolean enable,\n@@ -61,7 +60,7 @@ List<PropagationTaskTO> getCreateTasks(\n      * @param noPropResourceKeys external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskTO> getUserCreateTasks(\n+    List<PropagationTaskInfo> getUserCreateTasks(\n             String key,\n             String password,\n             Boolean enable,\n@@ -81,7 +80,7 @@ List<PropagationTaskTO> getUserCreateTasks(\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskTO> getUpdateTasks(\n+    List<PropagationTaskInfo> getUpdateTasks(\n             AnyTypeKind kind,\n             String key,\n             boolean changePwd,\n@@ -98,7 +97,7 @@ List<PropagationTaskTO> getUpdateTasks(\n      * @param noPropResourceKeys external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskTO> getUserUpdateTasks(\n+    List<PropagationTaskInfo> getUserUpdateTasks(\n             WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             boolean changePwd,\n             Collection<String> noPropResourceKeys);\n@@ -110,7 +109,7 @@ List<PropagationTaskTO> getUserUpdateTasks(\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskTO> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n+    List<PropagationTaskInfo> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n \n     /**\n      * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceKeys}.\n@@ -121,7 +120,7 @@ List<PropagationTaskTO> getUserUpdateTasks(\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskTO> getDeleteTasks(\n+    List<PropagationTaskInfo> getDeleteTasks(\n             AnyTypeKind kind,\n             String key,\n             PropagationByResource propByRes,\n@@ -135,7 +134,7 @@ List<PropagationTaskTO> getDeleteTasks(\n      * @param noPropResourceKeys external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskTO> createTasks(\n+    List<PropagationTaskInfo> createTasks(\n             Realm realm,\n             PropagationByResource propByRes,\n             Collection<String> noPropResourceKeys);"},{"sha":"814f75b23dad99a3fc2772022697be53d3caddb0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n@@ -34,22 +33,22 @@ public interface PropagationReporter {\n      * Report propagation status after executions in case blocking failure (e.g. on priority resources).\n      *\n      * @param failingResource failing resource name\n-     * @param tasks propagation tasks performed before failure\n+     * @param taskInfos propagation tasks performed before failure\n      */\n-    void onPriorityResourceFailure(String failingResource, Collection<PropagationTaskTO> tasks);\n+    void onPriorityResourceFailure(String failingResource, Collection<PropagationTaskInfo> taskInfos);\n \n     /**\n      * Report propagation status after executions in case of success or non-blocking failure\n      * (e.g. on non-priority resources).\n      *\n-     * @param propagationTask propagation task\n+     * @param taskInfo propagation task\n      * @param execStatus propagation execution status\n      * @param failureReason propagation execution failure message\n      * @param beforeObj retrieved connector object before operation execution\n      * @param afterObj retrieved connector object after operation execution\n      */\n     void onSuccessOrNonPriorityResourceFailures(\n-            PropagationTaskTO propagationTask,\n+            PropagationTaskInfo taskInfo,\n             ExecStatus execStatus,\n             String failureReason,\n             ConnectorObject beforeObj,"},{"sha":"6dd3de8bae7ab0905b15ffbba0ae3f0ba818de05","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskCallable.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskCallable.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -19,12 +19,11 @@\n package org.apache.syncope.core.provisioning.api.propagation;\n \n import java.util.concurrent.Callable;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n \n public interface PropagationTaskCallable extends Callable<TaskExec> {\n \n-    void setTaskTO(PropagationTaskTO taskTO);\n+    void setTaskInfo(PropagationTaskInfo taskInfo);\n \n     void setReporter(PropagationReporter reporter);\n }"},{"sha":"a000d78f4f56b7f6e5c1f835ca1acf835e74f322","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -44,28 +44,28 @@ public interface PropagationTaskExecutor {\n     /**\n      * Execute the given PropagationTask and returns the generated {@link TaskExec}.\n      *\n-     * @param task to be executed\n+     * @param taskInfo to be executed\n      * @return the generated TaskExec\n      */\n-    TaskExec execute(PropagationTaskTO task);\n+    TaskExec execute(PropagationTaskInfo taskInfo);\n \n     /**\n      * Execute the given PropagationTask and returns the generated {@link TaskExec}.\n      *\n-     * @param task to be executed\n+     * @param taskInfo to be executed\n      * @param reporter to report propagation execution status\n      * @return the generated TaskExec\n      */\n-    TaskExec execute(PropagationTaskTO task, PropagationReporter reporter);\n+    TaskExec execute(PropagationTaskInfo taskInfo, PropagationReporter reporter);\n \n     /**\n      * Execute a collection of PropagationTask objects.\n      * The process is interrupted as soon as the result of the communication with a resource with non-null priority is\n      * in error.\n      *\n-     * @param tasks to be execute, in given order\n+     * @param taskInfos to be execute, in given order\n      * @param nullPriorityAsync asynchronously executes tasks related to resources with no priority\n      * @return reporter to report propagation execution status\n      */\n-    PropagationReporter execute(Collection<PropagationTaskTO> tasks, boolean nullPriorityAsync);\n+    PropagationReporter execute(Collection<PropagationTaskInfo> taskInfos, boolean nullPriorityAsync);\n }"},{"sha":"322a163820bd05ed14437566affebe4093976f48","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfo.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.propagation;\n+\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+\n+public class PropagationTaskInfo extends PropagationTaskTO {\n+\n+    private static final long serialVersionUID = -2879861567335503099L;\n+\n+    /**\n+     * Object on External Resource before propagation takes place.\n+     *\n+     * null: beforeObj was not attempted to read\n+     * not null, but not present: beforeObj was attempted to read, but not found\n+     * not null and present: beforeObj value is available\n+     */\n+    private Optional<ConnectorObject> beforeObj;\n+\n+    public Optional<ConnectorObject> getBeforeObj() {\n+        return beforeObj;\n+    }\n+\n+    public void setBeforeObj(final Optional<ConnectorObject> beforeObj) {\n+        this.beforeObj = beforeObj;\n+    }\n+}"},{"sha":"c14f0dcf868aa11479f2fd668505b976e330eace","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -39,6 +38,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n@@ -75,14 +75,14 @@ public Pair<String, List<PropagationStatus>> create(\n \n         WorkflowResult<String> created = awfAdapter.create(anyObjectTO);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getCreateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 created.getResult(),\n                 null,\n                 created.getPropByRes(),\n                 anyObjectTO.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n@@ -101,15 +101,15 @@ public Pair<AnyObjectPatch, List<PropagationStatus>> update(\n \n         WorkflowResult<AnyObjectPatch> updated = awfAdapter.update(anyObjectPatch);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 updated.getResult().getKey(),\n                 false,\n                 null,\n                 updated.getPropByRes(),\n                 anyObjectPatch.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return Pair.of(updated.getResult(), propagationReporter.getStatuses());\n     }\n@@ -132,12 +132,12 @@ public List<PropagationStatus> delete(\n         // information could only be available after awfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         try {\n             awfAdapter.delete(key);\n@@ -165,15 +165,15 @@ public List<PropagationStatus> provision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 false,\n                 null,\n                 propByRes,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -185,14 +185,14 @@ public List<PropagationStatus> deprovision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 key,\n                 propByRes,\n                 anyObjectDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }"},{"sha":"7d20a039c18950e05b3d151aef1136a126c3257b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -43,6 +42,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -71,7 +71,7 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager\n     public Pair<String, List<PropagationStatus>> create(final GroupTO groupTO, final boolean nullPriorityAsync) {\n         WorkflowResult<String> created = gwfAdapter.create(groupTO);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(\n+        List<PropagationTaskInfo> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,\n                 created.getResult(),\n                 null,\n@@ -97,7 +97,7 @@ public Pair<String, List<PropagationStatus>> create(\n         groupTO.getPlainAttr(StringUtils.EMPTY).ifPresent(groupOwner\n                 -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next()));\n \n-        List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(\n+        List<PropagationTaskInfo> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,\n                 created.getResult(),\n                 null,\n@@ -123,7 +123,7 @@ public Pair<GroupPatch, List<PropagationStatus>> update(\n \n         WorkflowResult<GroupPatch> updated = gwfAdapter.update(groupPatch);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskInfo> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n                 updated.getResult().getKey(),\n                 false,\n@@ -146,35 +146,35 @@ public List<PropagationStatus> delete(final String key, final boolean nullPriori\n     public List<PropagationStatus> delete(\n             final String key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        List<PropagationTaskTO> tasks = new ArrayList<>();\n+        List<PropagationTaskInfo> taskInfos = new ArrayList<>();\n \n         // Generate propagation tasks for deleting users and any objects from group resources, \n         // if they are on those resources only because of the reason being deleted (see SYNCOPE-357)\n         groupDataBinder.findUsersWithTransitiveResources(key).entrySet().\n                 forEach(entry -> {\n-                    tasks.addAll(propagationManager.getDeleteTasks(\n+                    taskInfos.addAll(propagationManager.getDeleteTasks(\n                             AnyTypeKind.USER,\n                             entry.getKey(),\n                             entry.getValue(),\n                             excludedResources));\n                 });\n         groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet().\n                 forEach(entry -> {\n-                    tasks.addAll(propagationManager.getDeleteTasks(\n+                    taskInfos.addAll(propagationManager.getDeleteTasks(\n                             AnyTypeKind.ANY_OBJECT,\n                             entry.getKey(),\n                             entry.getValue(),\n                             excludedResources));\n                 });\n \n         // Generate propagation tasks for deleting this group from resources\n-        tasks.addAll(propagationManager.getDeleteTasks(\n+        taskInfos.addAll(propagationManager.getDeleteTasks(\n                 AnyTypeKind.GROUP,\n                 key,\n                 null,\n                 null));\n \n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         gwfAdapter.delete(key);\n \n@@ -193,15 +193,15 @@ public List<PropagationStatus> provision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n                 key,\n                 false,\n                 null,\n                 propByRes,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -213,14 +213,14 @@ public List<PropagationStatus> deprovision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n                 AnyTypeKind.GROUP,\n                 key,\n                 propByRes,\n                 groupDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -229,5 +229,4 @@ public List<PropagationStatus> deprovision(\n     public String link(final GroupPatch groupPatch) {\n         return gwfAdapter.update(groupPatch).getResult().getKey();\n     }\n-\n }"},{"sha":"2d6cd2e00d2daff8e7b4ce5307950a02f34ca068","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n@@ -47,6 +46,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n@@ -99,14 +99,14 @@ public Pair<String, List<PropagationStatus>> create(\n         WorkflowResult<Pair<String, Boolean>> created =\n                 uwfAdapter.create(userTO, disablePwdPolicyCheck, enabled, storePassword);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUserCreateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserCreateTasks(\n                 created.getResult().getLeft(),\n                 userTO.getPassword(),\n                 created.getResult().getRight(),\n                 created.getPropByRes(),\n                 userTO.getVirAttrs(),\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return Pair.of(created.getResult().getLeft(), propagationReporter.getStatuses());\n     }\n@@ -115,8 +115,8 @@ public Pair<String, List<PropagationStatus>> create(\n     public Pair<UserPatch, List<PropagationStatus>> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(updated);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return Pair.of(updated.getResult().getLeft(), propagationReporter.getStatuses());\n     }\n@@ -173,9 +173,9 @@ public Pair<UserPatch, List<PropagationStatus>> update(\n             }\n         }\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n                 updated, updated.getResult().getLeft().getPassword() != null, excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return Pair.of(updated.getResult().getLeft(), propagationReporter.getStatuses());\n     }\n@@ -198,12 +198,12 @@ public List<PropagationStatus> delete(\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n                 AnyTypeKind.USER,\n                 key,\n                 propByRes,\n                 excludedResources);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         try {\n             uwfAdapter.delete(key);\n@@ -263,15 +263,15 @@ protected List<PropagationStatus> propagateStatus(\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n-        List<PropagationTaskTO> tasks = propagationManager.getUpdateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n                 AnyTypeKind.USER,\n                 statusPatch.getKey(),\n                 false,\n                 statusPatch.getType() != StatusPatchType.SUSPEND,\n                 propByRes,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -285,10 +285,10 @@ public void internalSuspend(final String key) {\n             UserPatch userPatch = new UserPatch();\n             userPatch.setKey(updated.getLeft().getResult());\n \n-            List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n+            List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n                     Pair.of(userPatch, Boolean.FALSE),\n                     updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n-            taskExecutor.execute(tasks, false);\n+            taskExecutor.execute(taskInfos, false);\n         }\n     }\n \n@@ -320,8 +320,8 @@ public List<PropagationStatus> provision(\n         WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n                 ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -333,14 +333,14 @@ public List<PropagationStatus> deprovision(\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getDeleteTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n                 AnyTypeKind.USER,\n                 key,\n                 propByRes,\n                 userDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -354,8 +354,8 @@ public void requestPasswordReset(final String key) {\n     public void confirmPasswordReset(final String key, final String token, final String password) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(updated);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n \n-        taskExecutor.execute(tasks, false);\n+        taskExecutor.execute(taskInfos, false);\n     }\n }"},{"sha":"9587ec836502a86e4e9d2b2bff75d5186ba3660a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":36,"deletions":29,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -33,7 +33,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.ExecStatus;\n@@ -69,6 +68,7 @@\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n@@ -346,29 +346,29 @@ protected Uid delete(\n     }\n \n     @Override\n-    public TaskExec execute(final PropagationTaskTO task) {\n-        return execute(task, null);\n+    public TaskExec execute(final PropagationTaskInfo taskInfo) {\n+        return execute(taskInfo, null);\n     }\n \n     @Override\n-    public TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporter reporter) {\n+    public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationReporter reporter) {\n         PropagationTask task;\n-        if (taskTO.getKey() == null) {\n+        if (taskInfo.getKey() == null) {\n             task = entityFactory.newEntity(PropagationTask.class);\n-            task.setResource(resourceDAO.find(taskTO.getResource()));\n-            task.setObjectClassName(taskTO.getObjectClassName());\n-            task.setAnyTypeKind(taskTO.getAnyTypeKind());\n-            task.setAnyType(taskTO.getAnyType());\n-            task.setEntityKey(taskTO.getEntityKey());\n-            task.setOperation(taskTO.getOperation());\n-            task.setConnObjectKey(taskTO.getConnObjectKey());\n-            task.setOldConnObjectKey(taskTO.getOldConnObjectKey());\n+            task.setResource(resourceDAO.find(taskInfo.getResource()));\n+            task.setObjectClassName(taskInfo.getObjectClassName());\n+            task.setAnyTypeKind(taskInfo.getAnyTypeKind());\n+            task.setAnyType(taskInfo.getAnyType());\n+            task.setEntityKey(taskInfo.getEntityKey());\n+            task.setOperation(taskInfo.getOperation());\n+            task.setConnObjectKey(taskInfo.getConnObjectKey());\n+            task.setOldConnObjectKey(taskInfo.getOldConnObjectKey());\n         } else {\n-            task = taskDAO.find(taskTO.getKey());\n+            task = taskDAO.find(taskInfo.getKey());\n         }\n         Set<Attribute> attributes = new HashSet<>();\n-        if (StringUtils.isNotBlank(taskTO.getAttributes())) {\n-            attributes.addAll(Arrays.asList(POJOHelper.deserialize(taskTO.getAttributes(), Attribute[].class)));\n+        if (StringUtils.isNotBlank(taskInfo.getAttributes())) {\n+            attributes.addAll(Arrays.asList(POJOHelper.deserialize(taskInfo.getAttributes(), Attribute[].class)));\n         }\n         task.setAttributes(attributes);\n \n@@ -400,12 +400,16 @@ public TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporte\n             orgUnit = task.getResource().getOrgUnit();\n             connector = connFactory.getConnector(task.getResource());\n \n-            // Try to read remote object BEFORE any actual operation\n-            beforeObj = provision == null && orgUnit == null\n-                    ? null\n-                    : orgUnit == null\n-                            ? getRemoteObject(task, connector, provision, false)\n-                            : getRemoteObject(task, connector, orgUnit, false);\n+            if (taskInfo.getBeforeObj() == null) {\n+                // Try to read remote object BEFORE any actual operation\n+                beforeObj = provision == null && orgUnit == null\n+                        ? null\n+                        : orgUnit == null\n+                                ? getRemoteObject(task, connector, provision, false)\n+                                : getRemoteObject(task, connector, orgUnit, false);\n+            } else if (taskInfo.getBeforeObj().isPresent()) {\n+                beforeObj = taskInfo.getBeforeObj().get();\n+            }\n \n             for (PropagationActions action : actions) {\n                 action.before(task, beforeObj);\n@@ -503,7 +507,7 @@ public TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporte\n             }\n \n             if (reporter != null) {\n-                reporter.onSuccessOrNonPriorityResourceFailures(taskTO,\n+                reporter.onSuccessOrNonPriorityResourceFailures(taskInfo,\n                         ExecStatus.valueOf(execution.getStatus()),\n                         failureReason,\n                         beforeObj,\n@@ -533,7 +537,7 @@ public TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporte\n                     result,\n                     beforeObj,\n                     new Object[] { execTO, afterObj },\n-                    taskTO);\n+                    taskInfo);\n \n             auditManager.audit(\n                     AuthContextUtils.getUsername(),\n@@ -544,23 +548,26 @@ public TaskExec execute(final PropagationTaskTO taskTO, final PropagationReporte\n                     result,\n                     beforeObj,\n                     new Object[] { execTO, afterObj },\n-                    taskTO);\n+                    taskInfo);\n         }\n \n         return execution;\n     }\n \n     protected abstract void doExecute(\n-            Collection<PropagationTaskTO> tasks, PropagationReporter reporter, boolean nullPriorityAsync);\n+            Collection<PropagationTaskInfo> taskInfos, PropagationReporter reporter, boolean nullPriorityAsync);\n \n     @Override\n-    public PropagationReporter execute(final Collection<PropagationTaskTO> tasks, final boolean nullPriorityAsync) {\n+    public PropagationReporter execute(\n+            final Collection<PropagationTaskInfo> taskInfos,\n+            final boolean nullPriorityAsync) {\n+\n         PropagationReporter reporter = new DefaultPropagationReporter();\n         try {\n-            doExecute(tasks, reporter, nullPriorityAsync);\n+            doExecute(taskInfos, reporter, nullPriorityAsync);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation priority resource\", e);\n-            reporter.onPriorityResourceFailure(e.getResourceName(), tasks);\n+            reporter.onPriorityResourceFailure(e.getResourceName(), taskInfos);\n         }\n \n         return reporter;"},{"sha":"53b9fe849948f8e8832a8f6a9a11c1223d36afda","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -24,10 +24,10 @@\n import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n@@ -47,14 +47,14 @@ protected boolean add(final PropagationStatus status) {\n \n     @Override\n     public void onSuccessOrNonPriorityResourceFailures(\n-            final PropagationTaskTO taskTO,\n+            final PropagationTaskInfo taskInfo,\n             final ExecStatus executionStatus,\n             final String failureReason,\n             final ConnectorObject beforeObj,\n             final ConnectorObject afterObj) {\n \n         PropagationStatus status = new PropagationStatus();\n-        status.setResource(taskTO.getResource());\n+        status.setResource(taskInfo.getResource());\n         status.setStatus(executionStatus);\n         status.setFailureReason(failureReason);\n \n@@ -70,10 +70,13 @@ public void onSuccessOrNonPriorityResourceFailures(\n     }\n \n     @Override\n-    public void onPriorityResourceFailure(final String failingResource, final Collection<PropagationTaskTO> tasks) {\n+    public void onPriorityResourceFailure(\n+            final String failingResource,\n+            final Collection<PropagationTaskInfo> taskInfos) {\n+\n         LOG.debug(\"Propagation error: {} priority resource failed to propagate\", failingResource);\n \n-        Optional<PropagationTaskTO> propagationTask = tasks.stream().\n+        Optional<PropagationTaskInfo> propagationTask = taskInfos.stream().\n                 filter(task -> task.getResource().equals(failingResource)).findFirst();\n \n         if (propagationTask.isPresent()) {"},{"sha":"da9b97a8e9e105f4bae09e12ff38c3a8ee34355d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationTaskCallable.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationTaskCallable.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.Collection;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskCallable;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -48,7 +48,7 @@ public class DefaultPropagationTaskCallable implements PropagationTaskCallable {\n \n     protected final Collection<? extends GrantedAuthority> authorities;\n \n-    protected PropagationTaskTO taskTO;\n+    protected PropagationTaskInfo taskInfo;\n \n     protected PropagationReporter reporter;\n \n@@ -60,8 +60,8 @@ public DefaultPropagationTaskCallable() {\n     }\n \n     @Override\n-    public void setTaskTO(final PropagationTaskTO taskTO) {\n-        this.taskTO = taskTO;\n+    public void setTaskInfo(final PropagationTaskInfo taskInfo) {\n+        this.taskInfo = taskInfo;\n     }\n \n     @Override\n@@ -77,11 +77,11 @@ public TaskExec call() throws Exception {\n         auth.setDetails(new SyncopeAuthenticationDetails(domain));\n         SecurityContextHolder.getContext().setAuthentication(auth);\n \n-        LOG.debug(\"Execution started for {}\", taskTO);\n+        LOG.debug(\"Execution started for {}\", taskInfo);\n \n-        TaskExec execution = taskExecutor.execute(taskTO, reporter);\n+        TaskExec execution = taskExecutor.execute(taskInfo, reporter);\n \n-        LOG.debug(\"Execution completed for {}, {}\", taskTO, execution);\n+        LOG.debug(\"Execution completed for {}, {}\", taskInfo, execution);\n \n         return execution;\n     }"},{"sha":"bfdab7b4b2a3debc6fd6607a4814d45027599361","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -34,14 +34,14 @@\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskCallable;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n \n@@ -61,34 +61,34 @@ public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExec\n      * Creates new instances of {@link PropagationTaskCallable} for usage with\n      * {@link java.util.concurrent.CompletionService}.\n      *\n-     * @param taskTO to be executed\n+     * @param taskInfo to be executed\n      * @param reporter to report propagation execution status\n      * @return new {@link PropagationTaskCallable} instance for usage with\n      * {@link java.util.concurrent.CompletionService}\n      */\n     protected PropagationTaskCallable newPropagationTaskCallable(\n-            final PropagationTaskTO taskTO, final PropagationReporter reporter) {\n+            final PropagationTaskInfo taskInfo, final PropagationReporter reporter) {\n \n         PropagationTaskCallable callable = (PropagationTaskCallable) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultPropagationTaskCallable.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        callable.setTaskTO(taskTO);\n+        callable.setTaskInfo(taskInfo);\n         callable.setReporter(reporter);\n \n         return callable;\n     }\n \n     @Override\n     protected void doExecute(\n-            final Collection<PropagationTaskTO> tasks,\n+            final Collection<PropagationTaskInfo> taskInfos,\n             final PropagationReporter reporter,\n             final boolean nullPriorityAsync) {\n \n-        Map<PropagationTaskTO, ExternalResource> taskToResource = new HashMap<>(tasks.size());\n-        List<PropagationTaskTO> prioritizedTasks = new ArrayList<>();\n+        Map<PropagationTaskInfo, ExternalResource> taskToResource = new HashMap<>(taskInfos.size());\n+        List<PropagationTaskInfo> prioritizedTasks = new ArrayList<>();\n \n         int[] connRequestTimeout = { 60 };\n \n-        tasks.forEach(task -> {\n+        taskInfos.forEach(task -> {\n             ExternalResource resource = resourceDAO.find(task.getResource());\n             taskToResource.put(task, resource);\n \n@@ -106,7 +106,7 @@ protected void doExecute(\n         Collections.sort(prioritizedTasks, new PriorityComparator(taskToResource));\n         LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n \n-        Collection<PropagationTaskTO> concurrentTasks = tasks.stream().\n+        Collection<PropagationTaskInfo> concurrentTasks = taskInfos.stream().\n                 filter(task -> !prioritizedTasks.contains(task)).collect(Collectors.toSet());\n         LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n \n@@ -128,12 +128,12 @@ protected void doExecute(\n \n         // then process non-priority resources concurrently...\n         CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(executor);\n-        Map<PropagationTaskTO, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());\n-        concurrentTasks.forEach(task -> {\n+        Map<PropagationTaskInfo, Future<TaskExec>> nullPriority = new HashMap<>(concurrentTasks.size());\n+        concurrentTasks.forEach(taskInfo -> {\n             try {\n                 nullPriority.put(\n-                        task,\n-                        completionService.submit(newPropagationTaskCallable(task, reporter)));\n+                        taskInfo,\n+                        completionService.submit(newPropagationTaskCallable(taskInfo, reporter)));\n             } catch (Exception e) {\n                 LOG.error(\"Unexpected exception\", e);\n             }\n@@ -172,18 +172,18 @@ protected void doExecute(\n     /**\n      * Compare propagation tasks according to related ExternalResource's priority.\n      */\n-    protected static class PriorityComparator implements Comparator<PropagationTaskTO>, Serializable {\n+    protected static class PriorityComparator implements Comparator<PropagationTaskInfo>, Serializable {\n \n         private static final long serialVersionUID = -1969355670784448878L;\n \n-        private final Map<PropagationTaskTO, ExternalResource> taskToResource;\n+        private final Map<PropagationTaskInfo, ExternalResource> taskToResource;\n \n-        public PriorityComparator(final Map<PropagationTaskTO, ExternalResource> taskToResource) {\n+        public PriorityComparator(final Map<PropagationTaskInfo, ExternalResource> taskToResource) {\n             this.taskToResource = taskToResource;\n         }\n \n         @Override\n-        public int compare(final PropagationTaskTO task1, final PropagationTaskTO task2) {\n+        public int compare(final PropagationTaskInfo task1, final PropagationTaskInfo task2) {\n             int prop1 = taskToResource.get(task1).getPropagationPriority();\n             int prop2 = taskToResource.get(task2).getPropagationPriority();\n \n@@ -194,5 +194,4 @@ public int compare(final PropagationTaskTO task1, final PropagationTaskTO task2)\n                             : -1;\n         }\n     }\n-\n }"},{"sha":"c82b60fe694b016ec9d9a61e9c6e4a7c4bc5c9c8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -31,7 +31,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -56,6 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -133,7 +133,7 @@ protected AnyDAO<? extends Any<?>> dao(final AnyTypeKind kind) {\n     }\n \n     @Override\n-    public List<PropagationTaskTO> getCreateTasks(\n+    public List<PropagationTaskInfo> getCreateTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final Boolean enable,\n@@ -145,7 +145,7 @@ public List<PropagationTaskTO> getCreateTasks(\n     }\n \n     @Override\n-    public List<PropagationTaskTO> getUserCreateTasks(\n+    public List<PropagationTaskInfo> getUserCreateTasks(\n             final String key,\n             final String password,\n             final Boolean enable,\n@@ -156,7 +156,7 @@ public List<PropagationTaskTO> getUserCreateTasks(\n         return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n-    protected List<PropagationTaskTO> getCreateTasks(\n+    protected List<PropagationTaskInfo> getCreateTasks(\n             final Any<?> any,\n             final String password,\n             final Boolean enable,\n@@ -165,7 +165,7 @@ protected List<PropagationTaskTO> getCreateTasks(\n             final Collection<String> noPropResourceKeys) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n-            return Collections.<PropagationTaskTO>emptyList();\n+            return Collections.<PropagationTaskInfo>emptyList();\n         }\n \n         if (noPropResourceKeys != null) {\n@@ -176,7 +176,7 @@ protected List<PropagationTaskTO> getCreateTasks(\n     }\n \n     @Override\n-    public List<PropagationTaskTO> getUpdateTasks(\n+    public List<PropagationTaskInfo> getUpdateTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final boolean changePwd,\n@@ -189,7 +189,7 @@ public List<PropagationTaskTO> getUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTaskTO> getUserUpdateTasks(\n+    public List<PropagationTaskInfo> getUserUpdateTasks(\n             final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             final boolean changePwd,\n             final Collection<String> noPropResourceKeys) {\n@@ -207,11 +207,11 @@ public List<PropagationTaskTO> getUserUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTaskTO> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {\n+    public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {\n         UserPatch userPatch = wfResult.getResult().getKey();\n \n         // Propagate password update only to requested resources\n-        List<PropagationTaskTO> tasks = new ArrayList<>();\n+        List<PropagationTaskInfo> tasks = new ArrayList<>();\n         if (userPatch.getPassword() == null) {\n             // a. no specific password propagation request: generate propagation tasks for any resource associated\n             tasks = getUserUpdateTasks(wfResult, false, null);\n@@ -249,7 +249,7 @@ public List<PropagationTaskTO> getUserUpdateTasks(final WorkflowResult<Pair<User\n         return tasks;\n     }\n \n-    protected List<PropagationTaskTO> getUpdateTasks(\n+    protected List<PropagationTaskInfo> getUpdateTasks(\n             final Any<?> any,\n             final String password,\n             final boolean changePwd,\n@@ -273,7 +273,7 @@ protected List<PropagationTaskTO> getUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTaskTO> getDeleteTasks(\n+    public List<PropagationTaskInfo> getDeleteTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final PropagationByResource propByRes,\n@@ -296,7 +296,7 @@ public List<PropagationTaskTO> getDeleteTasks(\n         return getDeleteTasks(any, localPropByRes, noPropResourceKeys);\n     }\n \n-    protected List<PropagationTaskTO> getDeleteTasks(\n+    protected List<PropagationTaskInfo> getDeleteTasks(\n             final Any<?> any,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceKeys) {\n@@ -316,7 +316,7 @@ protected List<PropagationTaskTO> getDeleteTasks(\n      * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTaskTO> createTasks(final Any<?> any,\n+    protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n             final String password, final boolean changePwd,\n             final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs) {\n@@ -363,7 +363,7 @@ protected List<PropagationTaskTO> createTasks(final Any<?> any,\n         }\n         LOG.debug(\"With virtual attributes {}:\\n{}\\n{}\", any, propByRes, vAttrMap);\n \n-        List<PropagationTaskTO> tasks = new ArrayList<>();\n+        List<PropagationTaskInfo> tasks = new ArrayList<>();\n \n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n@@ -381,7 +381,7 @@ protected List<PropagationTaskTO> createTasks(final Any<?> any,\n                 LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n                         any.getType(), resource);\n             } else {\n-                PropagationTaskTO task = new PropagationTaskTO();\n+                PropagationTaskInfo task = new PropagationTaskInfo();\n                 task.setResource(resource.getKey());\n                 task.setObjectClassName(provision.getObjectClass().getObjectClassValue());\n                 task.setAnyTypeKind(any.getType().getKind());\n@@ -435,7 +435,7 @@ protected List<PropagationTaskTO> createTasks(final Any<?> any,\n     }\n \n     @Override\n-    public List<PropagationTaskTO> createTasks(\n+    public List<PropagationTaskInfo> createTasks(\n             final Realm realm,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceKeys) {\n@@ -450,7 +450,7 @@ public List<PropagationTaskTO> createTasks(\n         propByRes.purge();\n         LOG.debug(\"After purge {}:\\n{}\", realm, propByRes);\n \n-        List<PropagationTaskTO> tasks = new ArrayList<>();\n+        List<PropagationTaskInfo> tasks = new ArrayList<>();\n \n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n@@ -464,7 +464,7 @@ public List<PropagationTaskTO> createTasks(\n                 LOG.warn(\"Requesting propagation for {} but no ConnObjectLink provided for {}\",\n                         realm.getFullPath(), resource);\n             } else {\n-                PropagationTaskTO task = new PropagationTaskTO();\n+                PropagationTaskInfo task = new PropagationTaskInfo();\n                 task.setResource(resource.getKey());\n                 task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());\n                 task.setEntityKey(realm.getKey());"},{"sha":"d5889850a1af7b7a885fc7dc1e71c0131e7274c0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":37,"deletions":16,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -22,6 +22,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n@@ -47,9 +48,11 @@\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n+import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.quartz.JobExecutionException;\n@@ -108,16 +111,20 @@ protected void update(\n         propByRes.add(ResourceOperation.UPDATE, profile.getTask().getResource().getKey());\n         propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n \n-        PropagationReporter reporter = taskExecutor.execute(propagationManager.getUpdateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n                 any.getType().getKind(),\n                 any.getKey(),\n                 changepwd,\n                 enable,\n                 propByRes,\n                 null,\n-                noPropResources),\n-                false);\n-        reportPropagation(result, reporter);\n+                noPropResources);\n+        if (!taskInfos.isEmpty()) {\n+            taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n+            PropagationReporter reporter = new DefaultPropagationReporter();\n+            taskExecutor.execute(taskInfos.get(0), reporter);\n+            reportPropagation(result, reporter);\n+        }\n     }\n \n     protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, final ProvisioningReport result) {\n@@ -130,13 +137,17 @@ protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, fi\n         propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n         propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n \n-        PropagationReporter reporter = taskExecutor.execute(propagationManager.getDeleteTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n                 any.getType().getKind(),\n                 any.getKey(),\n                 propByRes,\n-                noPropResources),\n-                false);\n-        reportPropagation(result, reporter);\n+                noPropResources);\n+        if (!taskInfos.isEmpty()) {\n+            taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n+            PropagationReporter reporter = new DefaultPropagationReporter();\n+            taskExecutor.execute(taskInfos.get(0), reporter);\n+            reportPropagation(result, reporter);\n+        }\n     }\n \n     protected void provision(final Any<?> any, final Boolean enable, final ProvisioningReport result) {\n@@ -148,15 +159,19 @@ protected void provision(final Any<?> any, final Boolean enable, final Provision\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n-        PropagationReporter reporter = taskExecutor.execute(propagationManager.getCreateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getCreateTasks(\n                 any.getType().getKind(),\n                 any.getKey(),\n                 enable,\n                 propByRes,\n                 before.getVirAttrs(),\n-                noPropResources),\n-                false);\n-        reportPropagation(result, reporter);\n+                noPropResources);\n+        if (!taskInfos.isEmpty()) {\n+            taskInfos.get(0).setBeforeObj(Optional.ofNullable(null));\n+            PropagationReporter reporter = new DefaultPropagationReporter();\n+            taskExecutor.execute(taskInfos.get(0), reporter);\n+            reportPropagation(result, reporter);\n+        }\n     }\n \n     protected void link(final Any<?> any, final boolean unlink, final ProvisioningReport result) {\n@@ -436,15 +451,21 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n                 if (result.getStatus() == null) {\n                     result.setStatus(ProvisioningReport.Status.SUCCESS);\n                 }\n-                resultStatus = AuditElements.Result.SUCCESS;\n-                output = pushUtils.findByConnObjectKey(profile.getConnector(), any, provision);\n+\n+                if (notificationsAvailable || auditRequested) {\n+                    resultStatus = AuditElements.Result.SUCCESS;\n+                    output = pushUtils.findByConnObjectKey(profile.getConnector(), any, provision);\n+                }\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {\n                 result.setStatus(ProvisioningReport.Status.FAILURE);\n                 result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                resultStatus = AuditElements.Result.FAILURE;\n-                output = e;\n+\n+                if (notificationsAvailable || auditRequested) {\n+                    resultStatus = AuditElements.Result.FAILURE;\n+                    output = e;\n+                }\n \n                 LOG.warn(\"Error pushing {} towards {}\", any, profile.getTask().getResource(), e);\n "},{"sha":"7bef80e46be3443b4b0f1e1c4234d9ed9b35b71c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -24,7 +24,6 @@\n import java.util.Set;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -43,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n@@ -238,8 +238,8 @@ private void create(\n             PropagationByResource propByRes = new PropagationByResource();\n             propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());\n             if (unmatchingRule == UnmatchingRule.ASSIGN) {\n-                List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n-                taskExecutor.execute(tasks, false);\n+                List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+                taskExecutor.execute(taskInfos, false);\n             }\n \n             RealmTO actual = binder.getRealmTO(realm, true);\n@@ -324,8 +324,8 @@ private List<ProvisioningReport> update(final SyncDelta delta, final List<String\n                         realm = realmDAO.save(realm);\n                         RealmTO updated = binder.getRealmTO(realm, true);\n \n-                        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n-                        taskExecutor.execute(tasks, false);\n+                        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+                        taskExecutor.execute(taskInfos, false);\n \n                         for (PullActions action : profile.getActions()) {\n                             action.after(profile, delta, updated, result);\n@@ -608,8 +608,8 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<String\n \n                         PropagationByResource propByRes = new PropagationByResource();\n                         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n-                        List<PropagationTaskTO> tasks = propagationManager.createTasks(realm, propByRes, null);\n-                        taskExecutor.execute(tasks, false);\n+                        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+                        taskExecutor.execute(taskInfos, false);\n \n                         realmDAO.delete(realm);\n "},{"sha":"e631cb9b5c7668caa72cf9c8e1078a4099f2da3f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java","status":"modified","additions":41,"deletions":25,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -42,11 +42,13 @@\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.RealmPushResultHandler;\n import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n+import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -99,28 +101,36 @@ private void reportPropagation(final ProvisioningReport result, final Propagatio\n         }\n     }\n \n-    private Realm update(final RealmTO realmTO, final ProvisioningReport result) {\n+    private Realm update(final RealmTO realmTO, final ConnectorObject beforeObj, final ProvisioningReport result) {\n         Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n         PropagationByResource propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n-        PropagationReporter reporter = taskExecutor.execute(\n-                propagationManager.createTasks(realm, propByRes, null), false);\n-        reportPropagation(result, reporter);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+        if (!taskInfos.isEmpty()) {\n+            taskInfos.get(0).setBeforeObj(Optional.ofNullable(beforeObj));\n+            PropagationReporter reporter = new DefaultPropagationReporter();\n+            taskExecutor.execute(taskInfos.get(0), reporter);\n+            reportPropagation(result, reporter);\n+        }\n \n         return realm;\n     }\n \n-    private void deprovision(final Realm realm, final ProvisioningReport result) {\n+    private void deprovision(final Realm realm, final ConnectorObject beforeObj, final ProvisioningReport result) {\n         List<String> noPropResources = new ArrayList<>(realm.getResourceKeys());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n \n-        PropagationReporter reporter = taskExecutor.execute(\n-                propagationManager.createTasks(realm, propByRes, noPropResources), false);\n-        reportPropagation(result, reporter);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, noPropResources);\n+        if (!taskInfos.isEmpty()) {\n+            taskInfos.get(0).setBeforeObj(Optional.ofNullable(beforeObj));\n+            PropagationReporter reporter = new DefaultPropagationReporter();\n+            taskExecutor.execute(taskInfos.get(0), reporter);\n+            reportPropagation(result, reporter);\n+        }\n     }\n \n     private void provision(final Realm realm, final ProvisioningReport result) {\n@@ -143,21 +153,21 @@ private void link(final Realm realm, final boolean unlink, final ProvisioningRep\n             realmTO.getResources().add(profile.getTask().getResource().getKey());\n         }\n \n-        update(realmTO, result);\n+        update(realmTO, null, result);\n     }\n \n-    private void unassign(final Realm realm, final ProvisioningReport result) {\n+    private void unassign(final Realm realm, final ConnectorObject beforeObj, final ProvisioningReport result) {\n         RealmTO realmTO = binder.getRealmTO(realm, true);\n         realmTO.getResources().remove(profile.getTask().getResource().getKey());\n \n-        deprovision(update(realmTO, result), result);\n+        deprovision(update(realmTO, beforeObj, result), beforeObj, result);\n     }\n \n     private void assign(final Realm realm, final ProvisioningReport result) {\n         RealmTO realmTO = binder.getRealmTO(realm, true);\n         realmTO.getResources().add(profile.getTask().getResource().getKey());\n \n-        provision(update(realmTO, result), result);\n+        provision(update(realmTO, null, result), result);\n     }\n \n     protected ConnectorObject getRemoteObject(\n@@ -304,7 +314,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                                 LOG.debug(\"PushTask not configured for update\");\n                                 result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                update(binder.getRealmTO(realm, true), result);\n+                                update(binder.getRealmTO(realm, true), beforeObj, result);\n                             }\n \n                             break;\n@@ -318,7 +328,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                                 LOG.debug(\"PushTask not configured for delete\");\n                                 result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                deprovision(realm, result);\n+                                deprovision(realm, beforeObj, result);\n                             }\n \n                             break;\n@@ -332,7 +342,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                                 LOG.debug(\"PushTask not configured for delete\");\n                                 result.setStatus(ProvisioningReport.Status.IGNORE);\n                             } else {\n-                                unassign(realm, result);\n+                                unassign(realm, beforeObj, result);\n                             }\n \n                             break;\n@@ -382,22 +392,28 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                 if (result.getStatus() == null) {\n                     result.setStatus(ProvisioningReport.Status.SUCCESS);\n                 }\n-                resultStatus = AuditElements.Result.SUCCESS;\n-                if (connObjectKey.isPresent() && connObjecKeyValue.isPresent()) {\n-                    output = getRemoteObject(\n-                            orgUnit.getObjectClass(),\n-                            connObjectKey.get().getExtAttrName(),\n-                            connObjecKeyValue.get(),\n-                            orgUnit.isIgnoreCaseMatch(),\n-                            orgUnit.getItems().iterator());\n+\n+                if (notificationsAvailable || auditRequested) {\n+                    resultStatus = AuditElements.Result.SUCCESS;\n+                    if (connObjectKey.isPresent() && connObjecKeyValue.isPresent()) {\n+                        output = getRemoteObject(\n+                                orgUnit.getObjectClass(),\n+                                connObjectKey.get().getExtAttrName(),\n+                                connObjecKeyValue.get(),\n+                                orgUnit.isIgnoreCaseMatch(),\n+                                orgUnit.getItems().iterator());\n+                    }\n                 }\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {\n                 result.setStatus(ProvisioningReport.Status.FAILURE);\n                 result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                resultStatus = AuditElements.Result.FAILURE;\n-                output = e;\n+\n+                if (notificationsAvailable || auditRequested) {\n+                    resultStatus = AuditElements.Result.FAILURE;\n+                    output = e;\n+                }\n \n                 LOG.warn(\"Error pushing {} towards {}\", realm, profile.getTask().getResource(), e);\n "},{"sha":"73470045753957fb585d6e16f6e35bbb5921b6fa","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -24,9 +24,9 @@\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class ConfirmPasswordResetProducer extends AbstractProducer {\n \n@@ -41,10 +41,9 @@ public void process(final Exchange exchange) throws Exception {\n             WorkflowResult<Pair<UserPatch, Boolean>> updated =\n                     (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n-            List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(updated);\n+            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n \n-            getPropagationTaskExecutor().execute(tasks, false);\n+            getPropagationTaskExecutor().execute(taskInfos, false);\n         }\n     }\n-\n }"},{"sha":"95c1b2d6f3ad0ff2155ce8a9426531368fcb4bef","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -21,19 +21,18 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class CreateProducer extends AbstractProducer {\n \n@@ -53,18 +52,17 @@ public void process(final Exchange exchange) throws Exception {\n                 WorkflowResult<Pair<String, Boolean>> created =\n                         (WorkflowResult<Pair<String, Boolean>>) exchange.getIn().getBody();\n \n-                List<PropagationTaskTO> tasks = getPropagationManager().getUserCreateTasks(\n+                List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserCreateTasks(\n                         created.getResult().getKey(),\n                         ((UserTO) actual).getPassword(),\n                         created.getResult().getValue(),\n                         created.getPropByRes(),\n                         ((UserTO) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter propagationReporter =\n-                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n                 exchange.getOut().setBody(\n-                        Pair.of(created.getResult().getKey(), propagationReporter.getStatuses()));\n+                        Pair.of(created.getResult().getKey(), reporter.getStatuses()));\n             } else if (actual instanceof AnyTO) {\n                 WorkflowResult<String> created = (WorkflowResult<String>) exchange.getIn().getBody();\n \n@@ -73,31 +71,29 @@ public void process(final Exchange exchange) throws Exception {\n                     ((GroupTO) actual).getPlainAttr(StringUtils.EMPTY).ifPresent(groupOwner\n                             -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next()));\n \n-                    List<PropagationTaskTO> tasks = getPropagationManager().getCreateTasks(\n+                    List<PropagationTaskInfo> taskInfos = getPropagationManager().getCreateTasks(\n                             AnyTypeKind.GROUP,\n                             created.getResult(),\n                             null,\n                             created.getPropByRes(),\n                             ((AnyTO) actual).getVirAttrs(),\n                             excludedResources);\n-                    getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n                     exchange.getOut().setBody(Pair.of(created.getResult(), null));\n                 } else {\n-                    List<PropagationTaskTO> tasks = getPropagationManager().getCreateTasks(\n+                    List<PropagationTaskInfo> taskInfos = getPropagationManager().getCreateTasks(\n                             actual instanceof AnyObjectTO ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n                             created.getResult(),\n                             null,\n                             created.getPropByRes(),\n                             ((AnyTO) actual).getVirAttrs(),\n                             excludedResources);\n-                    PropagationReporter propagationReporter =\n-                            getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n-                    exchange.getOut().setBody(Pair.of(created.getResult(), propagationReporter.getStatuses()));\n+                    exchange.getOut().setBody(Pair.of(created.getResult(), reporter.getStatuses()));\n                 }\n             }\n         }\n     }\n-\n }"},{"sha":"f93fec9ff1d7e52068ee3310602d92e0f3fa7c9f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":19,"deletions":23,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -22,16 +22,15 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class DeleteProducer extends AbstractProducer {\n \n@@ -58,8 +57,8 @@ public void process(final Exchange exchange) throws Exception {\n         Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         if (null != getAnyTypeKind()) {\n-            List<PropagationTaskTO> tasks;\n-            PropagationReporter propagationReporter;\n+            List<PropagationTaskInfo> taskInfos;\n+            PropagationReporter reporter;\n             switch (getAnyTypeKind()) {\n                 case USER:\n                     PropagationByResource propByRes = new PropagationByResource();\n@@ -69,60 +68,57 @@ public void process(final Exchange exchange) throws Exception {\n                     // information could only be available after uwfAdapter.delete(), which\n                     // will also effectively remove user from db, thus making virtually\n                     // impossible by NotificationManager to fetch required user information\n-                    tasks = getPropagationManager().getDeleteTasks(\n+                    taskInfos = getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.USER,\n                             key,\n                             propByRes,\n                             excludedResources);\n-                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n-                    exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    exchange.setProperty(\"statuses\", reporter.getStatuses());\n                     break;\n \n                 case GROUP:\n-                    tasks = new ArrayList<>();\n+                    taskInfos = new ArrayList<>();\n                     // Generate propagation tasks for deleting users from group resources, if they are on those\n                     // resources only because of the reason being deleted (see SYNCOPE-357)\n                     for (Map.Entry<String, PropagationByResource> entry\n                             : groupDataBinder.findUsersWithTransitiveResources(key).entrySet()) {\n \n-                        tasks.addAll(getPropagationManager().getDeleteTasks(\n+                        taskInfos.addAll(getPropagationManager().getDeleteTasks(\n                                 AnyTypeKind.USER,\n                                 entry.getKey(),\n                                 entry.getValue(),\n                                 excludedResources));\n                     }\n-                    for (Map.Entry<String, PropagationByResource> entry\n-                            : groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n-\n-                        tasks.addAll(getPropagationManager().getDeleteTasks(\n+                    groupDataBinder.findAnyObjectsWithTransitiveResources(key).forEach((k, pbr) -> {\n+                        taskInfos.addAll(getPropagationManager().getDeleteTasks(\n                                 AnyTypeKind.ANY_OBJECT,\n-                                entry.getKey(),\n-                                entry.getValue(),\n+                                k,\n+                                pbr,\n                                 excludedResources));\n-                    }       // Generate propagation tasks for deleting this group from resources\n-                    tasks.addAll(getPropagationManager().getDeleteTasks(\n+                    }); // Generate propagation tasks for deleting this group from resources\n+                    taskInfos.addAll(getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.GROUP,\n                             key,\n                             null,\n                             null));\n-                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n-                    exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    exchange.setProperty(\"statuses\", reporter.getStatuses());\n                     break;\n \n                 case ANY_OBJECT:\n-                    tasks = getPropagationManager().getDeleteTasks(\n+                    taskInfos = getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.ANY_OBJECT,\n                             key,\n                             null,\n                             excludedResources);\n-                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n-                    exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+                    reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n+                    exchange.setProperty(\"statuses\", reporter.getStatuses());\n                     break;\n \n                 default:\n                     break;\n             }\n         }\n     }\n-\n }"},{"sha":"2ff8dd5cb39d611347e8aad99c2b03e38e8d0684","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -20,17 +20,16 @@\n \n import java.util.List;\n import java.util.stream.Collectors;\n-\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class DeprovisionProducer extends AbstractProducer {\n \n@@ -62,42 +61,42 @@ public void process(final Exchange exchange) throws Exception {\n \n         if (null != getAnyTypeKind()) {\n             PropagationByResource propByRes = new PropagationByResource();\n-            List<PropagationTaskTO> tasks;\n+            List<PropagationTaskInfo> taskInfos;\n             PropagationReporter propagationReporter;\n             switch (getAnyTypeKind()) {\n                 case USER:\n                     propByRes.set(ResourceOperation.DELETE, resources);\n-                    tasks = getPropagationManager().getDeleteTasks(\n+                    taskInfos = getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.USER,\n                             key,\n                             propByRes,\n                             userDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;\n \n                 case GROUP:\n                     propByRes.addAll(ResourceOperation.DELETE, resources);\n-                    tasks = getPropagationManager().getDeleteTasks(\n+                    taskInfos = getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.GROUP,\n                             key,\n                             propByRes,\n                             groupDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;\n \n                 case ANY_OBJECT:\n                     propByRes.addAll(ResourceOperation.DELETE, resources);\n-                    tasks = getPropagationManager().getDeleteTasks(\n+                    taskInfos = getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.ANY_OBJECT,\n                             key,\n                             propByRes,\n                             anyObjectDAO.findAllResourceKeys(key).stream().\n                                     filter(resource -> !resources.contains(resource)).collect(Collectors.toList()));\n-                    propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                    propagationReporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n                     exchange.getOut().setBody(propagationReporter.getStatuses());\n                     break;\n \n@@ -106,5 +105,4 @@ public void process(final Exchange exchange) throws Exception {\n             }\n         }\n     }\n-\n }"},{"sha":"bec49070726e49f6a7528390bb40fab323a95c7e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -20,21 +20,20 @@\n \n import java.util.List;\n import java.util.stream.Collectors;\n-\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class ProvisionProducer extends AbstractProducer {\n \n@@ -70,10 +69,10 @@ public void process(final Exchange exchange) throws Exception {\n             WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n                     ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n-            List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n+            PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n-            exchange.getOut().setBody(propagationReporter.getStatuses());\n+            exchange.getOut().setBody(reporter.getStatuses());\n         } else {\n             PropagationByResource propByRes = new PropagationByResource();\n             propByRes.addAll(ResourceOperation.UPDATE, resources);\n@@ -83,18 +82,17 @@ public void process(final Exchange exchange) throws Exception {\n                 anyTypeKind = getAnyTypeKind();\n             }\n \n-            List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(\n+            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n                     anyTypeKind,\n                     key,\n                     false,\n                     null,\n                     propByRes,\n                     null,\n                     null);\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+            PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n-            exchange.getOut().setBody(propagationReporter.getStatuses());\n+            exchange.getOut().setBody(reporter.getStatuses());\n         }\n     }\n-\n }"},{"sha":"9353b72950ef114186d6a2b3b7acd63b559bd70d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -21,13 +21,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n@@ -36,6 +34,7 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n \n public class StatusProducer extends AbstractProducer {\n@@ -92,17 +91,17 @@ public void process(final Exchange exchange) throws Exception {\n \n             PropagationByResource propByRes = new PropagationByResource();\n             propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n-            List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(\n+            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n                     AnyTypeKind.USER,\n                     statusPatch.getKey(),\n                     false,\n                     statusPatch.getType() != StatusPatchType.SUSPEND,\n                     propByRes,\n                     null,\n                     null);\n-            PropagationReporter propagationReporter = getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+            PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n-            exchange.getOut().setBody(Pair.of(updated.getResult(), propagationReporter.getStatuses()));\n+            exchange.getOut().setBody(Pair.of(updated.getResult(), reporter.getStatuses()));\n         }\n     }\n }"},{"sha":"6ad268c6a180bb9bc0ffc4b19e85ec067b57b73c","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -24,9 +24,9 @@\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class SuspendProducer extends AbstractProducer {\n \n@@ -46,13 +46,12 @@ public void process(final Exchange exchange) throws Exception {\n                 UserPatch userPatch = new UserPatch();\n                 userPatch.setKey(updated.getKey().getResult());\n \n-                List<PropagationTaskTO> tasks = getPropagationManager().getUserUpdateTasks(\n+                List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(\n                         new WorkflowResult<>(\n                                 Pair.of(userPatch, Boolean.FALSE),\n                                 updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n-                getPropagationTaskExecutor().execute(tasks, false);\n+                getPropagationTaskExecutor().execute(taskInfos, false);\n             }\n         }\n     }\n-\n }"},{"sha":"3cfa9ff249046005503da1e11de2368410d4eadb","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -20,17 +20,16 @@\n \n import java.util.List;\n import java.util.Set;\n-\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class UpdateProducer extends AbstractProducer {\n \n@@ -50,36 +49,32 @@ public void process(final Exchange exchange) throws Exception {\n                 WorkflowResult<Pair<UserPatch, Boolean>> updated =\n                         (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n \n-                List<PropagationTaskTO> tasks;\n+                List<PropagationTaskInfo> taskInfos;\n                 if (isPull()) {\n                     boolean passwordNotNull = updated.getResult().getKey().getPassword() != null;\n-                    tasks = getPropagationManager().getUserUpdateTasks(updated, passwordNotNull, excludedResources);\n+                    taskInfos = getPropagationManager().getUserUpdateTasks(updated, passwordNotNull, excludedResources);\n                 } else {\n-                    tasks = getPropagationManager().getUserUpdateTasks(updated);\n+                    taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n                 }\n-                PropagationReporter propagationReporter =\n-                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n-                exchange.getOut().setBody(Pair.of(\n-                        updated.getResult().getLeft(), propagationReporter.getStatuses()));\n+                exchange.getOut().setBody(Pair.of(updated.getResult().getLeft(), reporter.getStatuses()));\n             } else if (actual instanceof AnyPatch) {\n                 WorkflowResult<? extends AnyPatch> updated =\n                         (WorkflowResult<? extends AnyPatch>) exchange.getIn().getBody();\n \n-                List<PropagationTaskTO> tasks = getPropagationManager().getUpdateTasks(\n+                List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n                         actual instanceof AnyObjectPatch ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n                         updated.getResult().getKey(),\n                         false,\n                         null,\n                         updated.getPropByRes(),\n                         ((AnyPatch) actual).getVirAttrs(),\n                         excludedResources);\n-                PropagationReporter propagationReporter =\n-                        getPropagationTaskExecutor().execute(tasks, nullPriorityAsync);\n+                PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n-                exchange.getOut().setBody(Pair.of(updated.getResult(), propagationReporter.getStatuses()));\n+                exchange.getOut().setBody(Pair.of(updated.getResult(), reporter.getStatuses()));\n             }\n         }\n     }\n-\n }"},{"sha":"cdef7bf3f05c9516619b0ef9a28b3e5b13b09740","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n@@ -42,6 +41,7 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.flowable.api.UserRequestHandler;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -195,13 +195,13 @@ public UserTO submitForm(final UserRequestForm form) {\n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)\n         if (wfResult.getPropByRes() != null && !wfResult.getPropByRes().isEmpty()) {\n-            List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(\n+            List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n                     new WorkflowResult<>(\n                             Pair.of(wfResult.getResult(), Boolean.TRUE),\n                             wfResult.getPropByRes(),\n                             wfResult.getPerformedTasks()));\n \n-            taskExecutor.execute(tasks, false);\n+            taskExecutor.execute(taskInfos, false);\n         }\n \n         UserTO userTO;"},{"sha":"20fe4cb5d98d22ffa63836c8998d4435830adead","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowTaskLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -23,7 +23,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.EntityTO;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowTask;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n@@ -36,6 +35,7 @@\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.flowable.api.WorkflowTaskManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -72,12 +72,12 @@ public UserTO executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput)\n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(updated.getResult());\n \n-        List<PropagationTaskTO> tasks = propagationManager.getUserUpdateTasks(\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n                 new WorkflowResult<>(\n                         Pair.<UserPatch, Boolean>of(userPatch, null),\n                         updated.getPropByRes(), updated.getPerformedTasks()));\n \n-        taskExecutor.execute(tasks, false);\n+        taskExecutor.execute(taskInfos, false);\n \n         return binder.getUserTO(updated.getResult());\n     }"}]}