{"sha":"55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU1ZDJmMjM4MWU1MWQyZTBjMjFhYTViNDE3NDhmNGZiY2FiZTY0YTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-14T15:32:05Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-14T15:32:21Z"},"message":"Utility methods in BatchResponse","tree":{"sha":"0c22f06cca78cdc58045b5a4b684459e6d5179a0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0c22f06cca78cdc58045b5a4b684459e6d5179a0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8cabc12320144c71173d734ff042eea097de644f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8cabc12320144c71173d734ff042eea097de644f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8cabc12320144c71173d734ff042eea097de644f"}],"stats":{"total":76,"additions":55,"deletions":21},"files":[{"sha":"1e1d551e67ce3597302f79d12a640d9d7726dab5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobActionPanel.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java?ref=55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1","patch":"@@ -152,6 +152,5 @@ public JobActionPayload(final AjaxRequestTarget target) {\n         public AjaxRequestTarget getTarget() {\n             return target;\n         }\n-\n     }\n }"},{"sha":"90882d3b0dbbf757a8f8ff6aceeacb91c94768a5","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchResponse.java","status":"modified","additions":55,"deletions":20,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java?ref=55d2f2381e51d2e0c21aa5b41748f4fbcabe64a1","patch":"@@ -44,6 +44,51 @@ public class BatchResponse {\n \n     private static final Logger LOG = LoggerFactory.getLogger(BatchResponse.class);\n \n+    /**\n+     * If asynchronous processing was requested, queries the monitor URI.\n+     *\n+     * @param monitor monitor URI\n+     * @param jwt authorization JWT\n+     * @param boundary mutipart / mixed boundary\n+     * @param tlsClientParameters (optional) TLS client parameters\n+     *\n+     * @return the last Response received from the Batch service\n+     */\n+    public static Response poll(\n+            final URI monitor,\n+            final String jwt,\n+            final String boundary,\n+            final TLSClientParameters tlsClientParameters) {\n+\n+        WebClient webClient = WebClient.create(monitor).\n+                header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwt).\n+                type(RESTHeaders.multipartMixedWith(boundary.substring(2)));\n+        if (tlsClientParameters != null) {\n+            ClientConfiguration config = WebClient.getConfig(webClient);\n+            HTTPConduit httpConduit = (HTTPConduit) config.getConduit();\n+            httpConduit.setTlsClientParameters(tlsClientParameters);\n+        }\n+\n+        return webClient.get();\n+    }\n+\n+    /**\n+     * Parses the given Response into a list of {@link BatchResponseItem}s.\n+     *\n+     * @param response response to extract items from\n+     * @return the Batch Response parsed as list of {@link BatchResponseItem}s\n+     * @throws IOException if there are issues when reading the response body\n+     */\n+    public static List<BatchResponseItem> getItems(final Response response) throws IOException {\n+        String body = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8.name());\n+        LOG.debug(\"Batch response body:\\n{}\", body);\n+\n+        return BatchPayloadParser.parse(\n+                new ByteArrayInputStream(body.getBytes()),\n+                response.getMediaType(),\n+                new BatchResponseItem());\n+    }\n+\n     private final String boundary;\n \n     private final String jwt;\n@@ -67,6 +112,14 @@ public BatchResponse(\n         this.response = response;\n     }\n \n+    public String getBoundary() {\n+        return boundary;\n+    }\n+\n+    public URI getMonitor() {\n+        return monitor;\n+    }\n+\n     /**\n      * Gives the last Response received from the Batch service.\n      *\n@@ -82,19 +135,7 @@ public Response getResponse() {\n      * @return the last Response received from the Batch service\n      */\n     public Response poll() {\n-        if (monitor != null) {\n-            WebClient webClient = WebClient.create(monitor).\n-                    header(HttpHeaders.AUTHORIZATION, \"Bearer \" + jwt).\n-                    type(RESTHeaders.multipartMixedWith(boundary.substring(2)));\n-            if (tlsClientParameters != null) {\n-                ClientConfiguration config = WebClient.getConfig(webClient);\n-                HTTPConduit httpConduit = (HTTPConduit) config.getConduit();\n-                httpConduit.setTlsClientParameters(tlsClientParameters);\n-            }\n-\n-            response = webClient.get();\n-        }\n-\n+        response = poll(monitor, jwt, boundary, tlsClientParameters);\n         return response;\n     }\n \n@@ -105,12 +146,6 @@ public Response poll() {\n      * @throws IOException if there are issues when reading the response body\n      */\n     public List<BatchResponseItem> getItems() throws IOException {\n-        String body = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8.name());\n-        LOG.debug(\"Batch response body:\\n{}\", body);\n-\n-        return BatchPayloadParser.parse(\n-                new ByteArrayInputStream(body.getBytes()),\n-                response.getMediaType(),\n-                new BatchResponseItem());\n+        return getItems(response);\n     }\n }"}]}