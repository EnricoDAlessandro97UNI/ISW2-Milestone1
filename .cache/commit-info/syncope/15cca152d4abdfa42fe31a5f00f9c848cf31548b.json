{"sha":"15cca152d4abdfa42fe31a5f00f9c848cf31548b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE1Y2NhMTUyZDRhYmRmYTQyZmUzMWE1ZjAwZjljODQ4Y2YzMTU0OGI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-22T09:42:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-22T09:42:16Z"},"message":"[SYNCOPE-670] #resolve","tree":{"sha":"7dce94138622c7679747567307b7a36b6d0627b7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7dce94138622c7679747567307b7a36b6d0627b7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/15cca152d4abdfa42fe31a5f00f9c848cf31548b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15cca152d4abdfa42fe31a5f00f9c848cf31548b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/15cca152d4abdfa42fe31a5f00f9c848cf31548b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15cca152d4abdfa42fe31a5f00f9c848cf31548b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b43c9c86d2004aecdba594c594a7eeee92c866a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b43c9c86d2004aecdba594c594a7eeee92c866a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b43c9c86d2004aecdba594c594a7eeee92c866a1"}],"stats":{"total":199,"additions":111,"deletions":88},"files":[{"sha":"fefca5f77fc269f6e8b55e14ff541d405342e2d8","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -205,15 +205,15 @@ Response exportExecutionResult(@NotNull @PathParam(\"executionId\") Long execution\n     @GET\n     @Path(\"jobs\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ReportExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+    List<ReportExecTO> listJobs(@MatrixParam(\"type\") JobStatusType type);\n \n     /**\n      * Execute a control action on an existing report\n      *\n-     * @param action\n      * @param reportId id of report\n+     * @param action\n      */\n     @POST\n     @Path(\"{reportId}\")\n-    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"reportId\") Long reportId);\n+    void actionJob(@PathParam(\"reportId\") Long reportId, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"5b197c668c68baec32f66d58ad5581619a82d88a","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -254,15 +254,15 @@ TaskExecTO execute(@NotNull @PathParam(\"taskId\") Long taskId,\n     @GET\n     @Path(\"jobs\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<TaskExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+    List<TaskExecTO> listJobs(@MatrixParam(\"type\") JobStatusType type);\n \n     /**\n      * Execute a control action on an existing task\n      *\n-     * @param action\n      * @param taskId id of task\n+     * @param action\n      */\n     @POST\n     @Path(\"{taskId}\")\n-    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"taskId\") Long taskId);\n+    void actionJob(@PathParam(\"taskId\") Long taskId, @QueryParam(\"action\") JobAction action);\n }"},{"sha":"eddbbb4b25babe1ce20edd23662a64c7c31a6f97","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -309,7 +309,7 @@ public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry\n         } else {\n             // b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n-            final PropagationByResource origPropByRes = new PropagationByResource();\n+            PropagationByResource origPropByRes = new PropagationByResource();\n             origPropByRes.merge(wfResult.getPropByRes());\n \n             Set<String> pwdResourceNames = new HashSet<String>(userMod.getPwdPropRequest().getResourceNames());\n@@ -644,9 +644,9 @@ protected <T extends AbstractSubject> List<PropagationTask> createTasks(final T\n \n             // update vAttrsToBeUpdated as well\n             for (AbstractVirAttr virAttr : subject.getVirAttrs()) {\n-                final String schema = virAttr.getSchema().getName();\n+                String schema = virAttr.getSchema().getName();\n \n-                final AttributeMod attributeMod = new AttributeMod();\n+                AttributeMod attributeMod = new AttributeMod();\n                 attributeMod.setSchema(schema);\n                 attributeMod.getValuesToBeAdded().addAll(virAttr.getValues());\n "},{"sha":"ca759d9821c19fe7cb34ce846c2cc3f253bb2279","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractJobController.java","status":"modified","additions":59,"deletions":38,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractJobController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractJobController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractJobController.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -24,6 +24,8 @@\n import java.util.List;\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.to.AbstractExecTO;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.types.JobAction;\n import org.apache.syncope.common.types.JobStatusType;\n import org.quartz.JobExecutionContext;\n@@ -42,97 +44,114 @@\n \n     protected abstract Long getIdFromJobName(JobKey jobKey);\n \n-    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n+    private <E extends AbstractExecTO> void setTaskOrReportId(final E jobExecTO, final Long taskOrReportId) {\n+        if (jobExecTO instanceof TaskExecTO) {\n+            ((TaskExecTO) jobExecTO).setTask(taskOrReportId);\n+        } else if (jobExecTO instanceof ReportExecTO) {\n+            ((ReportExecTO) jobExecTO).setReport(taskOrReportId);\n+        }\n+    }\n+\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n         List<E> jobExecTOs = new ArrayList<E>();\n \n         switch (type) {\n             case ALL:\n                 try {\n                     for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n-                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+                        for (JobKey jobKey\n+                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n \n                             Long jobId = getIdFromJobName(jobKey);\n                             if (jobId != null) {\n                                 List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n-                                if (jobTriggers.size() > 0) {\n+                                if (jobTriggers.isEmpty()) {\n+                                    E jobExecTO = reference.newInstance();\n+                                    setTaskOrReportId(jobExecTO, jobId);\n+                                    jobExecTO.setStatus(\"Not Scheduled\");\n+\n+                                    jobExecTOs.add(jobExecTO);\n+                                } else {\n                                     for (Trigger t : jobTriggers) {\n                                         E jobExecTO = reference.newInstance();\n-                                        jobExecTO.setId(jobId);\n-                                        jobExecTO.\n-                                                setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n+                                        setTaskOrReportId(jobExecTO, jobId);\n+                                        jobExecTO.setStatus(\n+                                                scheduler.getScheduler().getTriggerState(t.getKey()).name());\n                                         jobExecTO.setStartDate(t.getStartTime());\n+\n                                         jobExecTOs.add(jobExecTO);\n                                     }\n-                                } else {\n-                                    E jobExecTO = reference.newInstance();\n-                                    jobExecTO.setId(jobId);\n-                                    jobExecTO.setStatus(\"Not Scheduled\");\n-                                    jobExecTOs.add(jobExecTO);\n                                 }\n                             }\n                         }\n                     }\n-                } catch (SchedulerException ex) {\n-                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n-                } catch (InstantiationException ex) {\n-                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n-                } catch (IllegalAccessException ex) {\n-                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n                 }\n                 break;\n+\n             case RUNNING:\n                 try {\n                     for (JobExecutionContext jec : scheduler.getScheduler().getCurrentlyExecutingJobs()) {\n                         Long jobId = getIdFromJobName(jec.getJobDetail().getKey());\n                         if (jobId != null) {\n                             E jobExecTO = reference.newInstance();\n-                            jobExecTO.setId(jobId);\n-                            jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).\n-                                    name());\n+                            setTaskOrReportId(jobExecTO, jobId);\n+                            jobExecTO.setStatus(\n+                                    scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).name());\n                             jobExecTO.setStartDate(jec.getFireTime());\n+\n                             jobExecTOs.add(jobExecTO);\n                         }\n                     }\n-                } catch (SchedulerException ex) {\n-                    LOG.debug(\"Problems during retrieving all currently executing jobs {}\", ex);\n-                } catch (InstantiationException ex) {\n-                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n-                } catch (IllegalAccessException ex) {\n-                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all currently executing jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n                 }\n                 break;\n+\n             case SCHEDULED:\n                 try {\n                     for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n-                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+                        for (JobKey jobKey\n+                                : scheduler.getScheduler().getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {\n+\n                             Long jobId = getIdFromJobName(jobKey);\n                             if (jobId != null) {\n                                 List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n                                 for (Trigger t : jobTriggers) {\n                                     E jobExecTO = reference.newInstance();\n-                                    jobExecTO.setId(jobId);\n+                                    setTaskOrReportId(jobExecTO, jobId);\n                                     jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n                                     jobExecTO.setStartDate(t.getStartTime());\n+\n                                     jobExecTOs.add(jobExecTO);\n                                 }\n                             }\n                         }\n                     }\n-                } catch (SchedulerException ex) {\n-                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n-                } catch (InstantiationException ex) {\n-                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n-                } catch (IllegalAccessException ex) {\n-                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                } catch (SchedulerException e) {\n+                    LOG.debug(\"Problems while retrieving all scheduled jobs\", e);\n+                } catch (InstantiationException e) {\n+                    LOG.debug(\"Problems while instantiating {}\", reference, e);\n+                } catch (IllegalAccessException e) {\n+                    LOG.debug(\"Problems while accessing {}\", reference, e);\n                 }\n                 break;\n+\n             default:\n         }\n         return jobExecTOs;\n     }\n \n-    protected void process(JobAction action, String jobName) {\n-\n+    protected void actionJob(final String jobName, final JobAction action) {\n         if (jobName != null) {\n             JobKey jobKey = new JobKey(jobName, Scheduler.DEFAULT_GROUP);\n             try {\n@@ -141,14 +160,16 @@ protected void process(JobAction action, String jobName) {\n                         case START:\n                             scheduler.getScheduler().triggerJob(jobKey);\n                             break;\n+\n                         case STOP:\n                             scheduler.getScheduler().interrupt(jobKey);\n                             break;\n+\n                         default:\n                     }\n                 }\n-            } catch (SchedulerException ex) {\n-                LOG.debug(\"Problems during {} operation on job with id {}\", action.toString(), ex);\n+            } catch (SchedulerException e) {\n+                LOG.debug(\"Problems during {} operation on job with id {}\", action.toString(), jobName, e);\n             }\n         }\n     }"},{"sha":"021005807e39e1d0955d57f54b1afca42c8b6a76","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -343,18 +343,18 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n \n     @Override\n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    public <E extends AbstractExecTO> List<E> list(JobStatusType type, Class<E> reference) {\n-        return super.list(type, reference);\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, Class<E> reference) {\n+        return super.listJobs(type, reference);\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n-    public void process(JobAction action, Long reportId) {\n+    public void actionJob(final Long reportId, final JobAction action) {\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n         String jobName = JobInstanceLoader.getJobName(report);\n-        process(action, jobName);\n+        actionJob(jobName, action);\n     }\n \n     @Override"},{"sha":"aca40e2945b3ba834e51cdae8a2ef14cac9df54e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -407,18 +407,18 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n \n     @Override\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    public <E extends AbstractExecTO> List<E> list(JobStatusType type, Class<E> reference) {\n-        return super.list(type, reference);\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        return super.listJobs(type, reference);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n-    public void process(JobAction action, Long taskId) {\n+    public void actionJob(final Long taskId, final JobAction action) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n         String jobName = JobInstanceLoader.getJobName(task);\n-        process(action, jobName);\n+        actionJob(jobName, action);\n     }\n \n     @Override"},{"sha":"f989f4d5d1e773cf35eae0ca11b6f0cc500284af","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -275,7 +275,7 @@ public UserTO update(final UserMod userMod) {\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            final PropagationByResource propByResVirAttr = binder.fillVirtual(\n+            PropagationByResource propByResVirAttr = binder.fillVirtual(\n                     updated.getResult().getKey().getId(),\n                     actual.getVirAttrsToRemove(),\n                     actual.getVirAttrsToUpdate());\n@@ -311,7 +311,7 @@ public UserTO update(final UserMod userMod) {\n             }\n         }\n \n-        final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n+        UserTO updatedTO = binder.getUserTO(updated.getResult().getKey().getId());\n         updatedTO.getPropagationStatusTOs().addAll(propagationReporter.getStatuses());\n         return updatedTO;\n     }"},{"sha":"43b6df792fd3c5e739a83dc6dc88ba37434f45c1","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -503,7 +503,7 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n                             externalResources, IntMappingType.MembershipVirtualSchema, propByRes);\n                 }\n \n-                final List<String> values = new ArrayList<String>(virAttr.getValues());\n+                List<String> values = new ArrayList<String>(virAttr.getValues());\n                 values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n                 values.addAll(vAttrToBeUpdated.getValuesToBeAdded());\n "},{"sha":"c4a31c7fdb891487395f6ae7d82ee15e3aa13558","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -132,12 +132,12 @@ public void deleteExecution(final Long executionId) {\n     }\n     \n     @Override\n-    public List<ReportExecTO> list(JobStatusType type) {\n-        return controller.list(type, ReportExecTO.class);\n+    public List<ReportExecTO> listJobs(final JobStatusType type) {\n+        return controller.listJobs(type, ReportExecTO.class);\n     }\n     \n     @Override\n-    public void process(JobAction action, Long reportId) {\n-        controller.process(action, reportId);\n+    public void actionJob(final Long reportId, final JobAction action) {\n+        controller.actionJob(reportId, action);\n     }\n }"},{"sha":"16a6741a9993cc25fc388d8fbd9de5a2cbbfeb46","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -159,12 +159,12 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n     }\n \n     @Override\n-    public List<TaskExecTO> list(JobStatusType type) {\n-        return controller.list(type, TaskExecTO.class);\n+    public List<TaskExecTO> listJobs(final JobStatusType type) {\n+        return controller.listJobs(type, TaskExecTO.class);\n     }\n \n     @Override\n-    public void process(JobAction action, Long taskId) {\n-        controller.process(action, taskId);\n+    public void actionJob(final Long taskId, final JobAction action) {\n+        controller.actionJob(taskId, action);\n     }\n }"},{"sha":"e15942ef97eab27dd4ce8de582a6189c76a88f6e","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -359,13 +359,15 @@ protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final SyncopeUser\n \n         PropagationByResource propByRes =\n                 runtimeService.getVariable(user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n+        UserMod updatedMod =\n+                runtimeService.getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n \n-        saveForFormSubmit(updated, userMod.getPassword(), propByRes);\n+        saveForFormSubmit(updated, updatedMod.getPassword(), propByRes);\n \n         Boolean propagateEnable = runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n         return new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                new SimpleEntry<UserMod, Boolean>(userMod, propagateEnable), propByRes, tasks);\n+                new SimpleEntry<UserMod, Boolean>(updatedMod, propagateEnable), propByRes, tasks);\n     }\n \n     @Override"},{"sha":"e110df9d4a5574814a7514d10732e813e6fee3d8","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/task/Update.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2Ftask%2FUpdate.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -41,15 +41,18 @@ protected void doExecute(final String executionId) {\n                 runtimeService.getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n \n         // update password internally only if required\n-        UserMod actualMod = SerializationUtils.clone(userMod);\n-        if (actualMod.getPwdPropRequest() != null && !actualMod.getPwdPropRequest().isOnSyncope()) {\n-            actualMod.setPassword(null);\n+        UserMod updatedMod = SerializationUtils.clone(userMod);\n+        String updatedPwd = updatedMod.getPassword();\n+        if (updatedMod.getPwdPropRequest() != null && !updatedMod.getPwdPropRequest().isOnSyncope()) {\n+            updatedMod.setPassword(null);\n         }\n         // update SyncopeUser\n-        PropagationByResource propByRes = dataBinder.update(user, actualMod);\n+        PropagationByResource propByRes = dataBinder.update(user, updatedMod);\n+        updatedMod.setPassword(updatedPwd);\n \n         // report updated user and propagation by resource as result\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.SYNCOPE_USER, user);\n+        runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, updatedMod);\n         runtimeService.setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"6309ef81f8e8dc992b0ea0a4f43a84e73a6da980","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":13,"deletions":16,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15cca152d4abdfa42fe31a5f00f9c848cf31548b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=15cca152d4abdfa42fe31a5f00f9c848cf31548b","patch":"@@ -1450,58 +1450,55 @@ public void issueSYNCOPE648() {\n \n     @Test\n     public void issueSYNCOPE660() {\n-        List<TaskExecTO> list = taskService.list(JobStatusType.ALL);\n+        List<TaskExecTO> list = taskService.listJobs(JobStatusType.ALL);\n         int old_size = list.size();\n \n-        list = taskService.list(JobStatusType.SCHEDULED);\n-\n         SchedTaskTO task = new SchedTaskTO();\n         task.setName(\"issueSYNCOPE660\");\n         task.setDescription(\"issueSYNCOPE660 Description\");\n         task.setJobClassName(TestSampleJob.class.getName());\n \n         Response response = taskService.create(task);\n-        SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n \n-        list = taskService.list(JobStatusType.ALL);\n-        assertEquals(list.size(), old_size + 1);\n+        list = taskService.listJobs(JobStatusType.ALL);\n+        assertEquals(old_size + 1, list.size());\n \n-        taskService.process(JobAction.START, actual.getId());\n+        taskService.actionJob(task.getId(), JobAction.START);\n \n         int i = 0, maxit = 50;\n \n-        // wait for task exec completion (executions incremented)\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n+                // ignore\n             }\n \n-            list = taskService.list(JobStatusType.RUNNING);\n-\n+            list = taskService.listJobs(JobStatusType.RUNNING);\n             assertNotNull(list);\n             i++;\n         } while (list.size() < 1 && i < maxit);\n \n-        assertEquals(list.size(), 1);\n+        assertEquals(1, list.size());\n+        assertEquals(task.getId(), list.get(0).getTask());\n \n-        taskService.process(JobAction.STOP, actual.getId());\n+        taskService.actionJob(task.getId(), JobAction.STOP);\n \n         i = 0;\n \n-        // wait for task exec completion (executions incremented)\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n+                // ignore\n             }\n \n-            list = taskService.list(JobStatusType.RUNNING);\n-\n+            list = taskService.listJobs(JobStatusType.RUNNING);\n             assertNotNull(list);\n             i++;\n         } while (list.size() >= 1 && i < maxit);\n \n-        assertEquals(list.size(), 0);\n+        assertTrue(list.isEmpty());\n     }\n }"}]}