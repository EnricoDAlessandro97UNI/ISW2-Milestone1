{"sha":"758adcc4fca30faa87b6e1ce18ad37e94e987886","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc1OGFkY2M0ZmNhMzBmYWE4N2I2ZTFjZTE4YWQzN2U5NGU5ODc4ODY=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-11-19T16:39:35Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-11-19T16:39:35Z"},"message":"[SYNCOPE-156] providing roles and groups assignment features. Still missing group extension classes management","tree":{"sha":"b276e11a47dd97d26a847d7a7e19ff64698dfee6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b276e11a47dd97d26a847d7a7e19ff64698dfee6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/758adcc4fca30faa87b6e1ce18ad37e94e987886","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/758adcc4fca30faa87b6e1ce18ad37e94e987886","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/758adcc4fca30faa87b6e1ce18ad37e94e987886","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/758adcc4fca30faa87b6e1ce18ad37e94e987886/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"b738d3e94877528cb74fc1b0b75c4c11e83aa16d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b738d3e94877528cb74fc1b0b75c4c11e83aa16d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b738d3e94877528cb74fc1b0b75c4c11e83aa16d"}],"stats":{"total":405,"additions":323,"deletions":82},"files":[{"sha":"6650a7e58ed62f691ccfbb630f23c3ae8b4effec","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -65,6 +65,18 @@ public List<AnyTypeTO> getAll() {\n         return types;\n     }\n \n+    public static List<AnyTypeClassTO> getAllAnyTypeClass() {\n+        List<AnyTypeClassTO> types = null;\n+\n+        try {\n+            types = getService(AnyTypeClassService.class).list();\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While reading all any types\", e);\n+        }\n+\n+        return types;\n+    }\n+\n     public List<AnyTypeClassTO> getAnyTypeClass(final String... anyTypeClassNames) {\n         List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n         for (String anyTypeClass : anyTypeClassNames) {"},{"sha":"83a09511d7e0084040293aa54d549bd3a2dcf067","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -36,19 +37,23 @@ public abstract class BaseRestClient implements Serializable {\n \n     private static final long serialVersionUID = 1523999867826481989L;\n \n-    protected <T> T getService(final Class<T> serviceClass) {\n+    public static SyncopeService getSyncopeService() {\n+        return getService(SyncopeService.class);\n+    }\n+\n+    protected static <T> T getService(final Class<T> serviceClass) {\n         return SyncopeConsoleSession.get().getService(serviceClass);\n     }\n \n-    protected <T> T getService(final String etag, final Class<T> serviceClass) {\n+    protected static <T> T getService(final String etag, final Class<T> serviceClass) {\n         return SyncopeConsoleSession.get().getService(etag, serviceClass);\n     }\n \n-    protected <T> void resetClient(final Class<T> serviceClass) {\n+    protected static <T> void resetClient(final Class<T> serviceClass) {\n         SyncopeConsoleSession.get().resetClient(serviceClass);\n     }\n \n-    protected String toOrderBy(final SortParam<String> sort) {\n+    protected static String toOrderBy(final SortParam<String> sort) {\n         OrderByClauseBuilder builder = SyncopeClient.getOrderByClauseBuilder();\n \n         String property = sort.getProperty();\n@@ -65,7 +70,8 @@ protected String toOrderBy(final SortParam<String> sort) {\n         return builder.build();\n     }\n \n-    protected <E extends JAXRSService, T> T getObject(final E service, final URI location, final Class<T> resultClass) {\n+    protected static <E extends JAXRSService, T> T getObject(final E service, final URI location,\n+            final Class<T> resultClass) {\n         WebClient webClient = WebClient.fromClient(WebClient.client(service));\n         webClient.accept(SyncopeConsoleApplication.get().getMediaType()).to(location.toASCIIString(), false);\n         return webClient.get(resultClass);"},{"sha":"6a6733e63246ec157bdd9c6d9f1509d4aa7611c9","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -43,7 +43,7 @@ public List<String> getPropagationActionsClasses() {\n         return new ArrayList<>(SyncopeConsoleSession.get().getSyncopeTO().getPropagationActions());\n     }\n \n-    public List<ResourceTO> getAll() {\n+    public static List<ResourceTO> getAll() {\n         List<ResourceTO> resources = null;\n \n         try {"},{"sha":"45d553e4442f9120dc345050e224806cea1a4114","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RoleRestClient.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Console client for invoking Rest Group's services.\n+ */\n+@Component\n+public class RoleRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static List<RoleTO> getAll() {\n+        return getService(RoleService.class).list();\n+    }\n+}"},{"sha":"69c690ab4ef7a3de1b181e110aa8b2049b428e74","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.AbstractResourceModal.CreateEvent;\n+import org.apache.syncope.client.console.rest.BaseRestClient;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n@@ -41,7 +42,6 @@\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -90,51 +90,51 @@ protected List<ResourceTO> load() {\n         }\n     };\n \n-    private final LoadableDetachableModel<Map<String, List<ConnInstanceTO>>> connModel =\n-            new LoadableDetachableModel<Map<String, List<ConnInstanceTO>>>() {\n+    private final LoadableDetachableModel<Map<String, List<ConnInstanceTO>>> connModel\n+            = new LoadableDetachableModel<Map<String, List<ConnInstanceTO>>>() {\n \n-        private static final long serialVersionUID = 5275935387613157432L;\n+                private static final long serialVersionUID = 5275935387613157432L;\n \n-        @Override\n-        protected Map<String, List<ConnInstanceTO>> load() {\n-            final Map<String, List<ConnInstanceTO>> res = new HashMap<>();\n-\n-            for (ConnInstanceTO conn : connectorRestClient.getAllConnectors()) {\n-                final List<ConnInstanceTO> conns;\n-                if (res.containsKey(conn.getLocation())) {\n-                    conns = res.get(conn.getLocation());\n-                } else {\n-                    conns = new ArrayList<>();\n-                    res.put(conn.getLocation(), conns);\n+                @Override\n+                protected Map<String, List<ConnInstanceTO>> load() {\n+                    final Map<String, List<ConnInstanceTO>> res = new HashMap<>();\n+\n+                    for (ConnInstanceTO conn : connectorRestClient.getAllConnectors()) {\n+                        final List<ConnInstanceTO> conns;\n+                        if (res.containsKey(conn.getLocation())) {\n+                            conns = res.get(conn.getLocation());\n+                        } else {\n+                            conns = new ArrayList<>();\n+                            res.put(conn.getLocation(), conns);\n+                        }\n+                        conns.add(conn);\n+                    }\n+\n+                    return res;\n                 }\n-                conns.add(conn);\n-            }\n+            };\n \n-            return res;\n-        }\n-    };\n+    private final LoadableDetachableModel<Pair<List<URI>, List<URI>>> csModel\n+            = new LoadableDetachableModel<Pair<List<URI>, List<URI>>>() {\n \n-    private final LoadableDetachableModel<Pair<List<URI>, List<URI>>> csModel =\n-            new LoadableDetachableModel<Pair<List<URI>, List<URI>>>() {\n+                private static final long serialVersionUID = 5275935387613157433L;\n \n-        private static final long serialVersionUID = 5275935387613157433L;\n+                @Override\n+                protected Pair<List<URI>, List<URI>> load() {\n+                    final List<URI> connectorServers = new ArrayList<>();\n+                    final List<URI> filePaths = new ArrayList<>();\n \n-        @Override\n-        protected Pair<List<URI>, List<URI>> load() {\n-            final List<URI> connectorServers = new ArrayList<>();\n-            final List<URI> filePaths = new ArrayList<>();\n-\n-            for (String location : SyncopeConsoleSession.get().getSyncopeTO().getConnIdLocations()) {\n-                if (location.startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n-                    connectorServers.add(URI.create(location));\n-                } else {\n-                    filePaths.add(URI.create(location));\n-                }\n-            }\n+                    for (String location : SyncopeConsoleSession.get().getSyncopeTO().getConnIdLocations()) {\n+                        if (location.startsWith(CONNECTOR_SERVER_LOCATION_PREFIX)) {\n+                            connectorServers.add(URI.create(location));\n+                        } else {\n+                            filePaths.add(URI.create(location));\n+                        }\n+                    }\n \n-            return Pair.of(connectorServers, filePaths);\n-        }\n-    };\n+                    return Pair.of(connectorServers, filePaths);\n+                }\n+            };\n \n     protected enum SupportedOperation {\n \n@@ -200,7 +200,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n         syncopeTopologyNode.setX(origX);\n         syncopeTopologyNode.setY(origY);\n \n-        final URI uri = WebClient.client(SyncopeConsoleSession.get().getService(SyncopeService.class)).getBaseURI();\n+        final URI uri = WebClient.client(BaseRestClient.getSyncopeService()).getBaseURI();\n         syncopeTopologyNode.setHost(uri.getHost());\n         syncopeTopologyNode.setPort(uri.getPort());\n \n@@ -400,37 +400,37 @@ protected void populateItem(final ListItem<Long> item) {\n                 final ListView<TopologyNode> innerListView = new ListView<TopologyNode>(\"resources\",\n                         new ArrayList<>(connections.get(connectorId).values())) {\n \n-                    private static final long serialVersionUID = 1L;\n+                            private static final long serialVersionUID = 1L;\n \n-                    private final int size = getModelObject().size() + 1;\n+                            private final int size = getModelObject().size() + 1;\n \n-                    @Override\n-                    protected void populateItem(final ListItem<TopologyNode> item) {\n-                        final TopologyNode topologynode = item.getModelObject();\n-                        final TopologyNode parent = connectors.get(connectorId);\n+                            @Override\n+                            protected void populateItem(final ListItem<TopologyNode> item) {\n+                                final TopologyNode topologynode = item.getModelObject();\n+                                final TopologyNode parent = connectors.get(connectorId);\n \n-                        // Set position\n-                        int kx = size >= 16 ? 800 : (48 * size);\n-                        int ky = size < 4 ? 100 : size < 6 ? 350 : 750;\n+                                // Set position\n+                                int kx = size >= 16 ? 800 : (48 * size);\n+                                int ky = size < 4 ? 100 : size < 6 ? 350 : 750;\n \n-                        final double hpos;\n-                        if (parent == null || parent.getY() < syncopeTopologyNode.getY()) {\n-                            hpos = Math.PI;\n-                        } else {\n-                            hpos = 0.0;\n-                        }\n+                                final double hpos;\n+                                if (parent == null || parent.getY() < syncopeTopologyNode.getY()) {\n+                                    hpos = Math.PI;\n+                                } else {\n+                                    hpos = 0.0;\n+                                }\n \n-                        int x = (int) Math.round((parent == null ? origX : parent.getX())\n-                                + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n-                        int y = (int) Math.round((parent == null ? origY : parent.getY())\n-                                + ky * Math.sin(hpos + Math.PI * (item.getIndex() + 1) / size));\n+                                int x = (int) Math.round((parent == null ? origX : parent.getX())\n+                                        + kx * Math.cos(hpos + Math.PI * (item.getIndex() + 1) / size));\n+                                int y = (int) Math.round((parent == null ? origY : parent.getY())\n+                                        + ky * Math.sin(hpos + Math.PI * (item.getIndex() + 1) / size));\n \n-                        topologynode.setX(x);\n-                        topologynode.setY(y);\n+                                topologynode.setX(x);\n+                                topologynode.setY(y);\n \n-                        item.add(topologyNodePanel(\"res\", topologynode));\n-                    }\n-                };\n+                                item.add(topologyNodePanel(\"res\", topologynode));\n+                            }\n+                        };\n \n                 innerListView.setOutputMarkupId(true);\n                 item.add(innerListView);"},{"sha":"cbcdc1d010d73755e6afd28d576a174259200833","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.model.util.ListModel;\n@@ -58,11 +59,22 @@ public AnyWizardBuilder(\n     @Override\n     protected WizardModel buildModelSteps(final T modelObject, final WizardModel wizardModel) {\n         final String[] clazzes = anyTypeClasses.toArray(new String[] {});\n+        // optional details panel step\n         addOptionalDetailsPanel(modelObject, wizardModel);\n+\n         wizardModel.add(new AuxClasses(modelObject, clazzes));\n+\n+        // attributes panel steps\n         wizardModel.add(new PlainAttrs(modelObject, null, Mode.ADMIN, clazzes));\n         wizardModel.add(new DerAttrs(modelObject, clazzes));\n         wizardModel.add(new VirAttrs(modelObject, clazzes));\n+\n+        // role panel step (jst available for users)\n+        if ((this instanceof UserWizardBuilder) && (modelObject instanceof UserTO)) {\n+            wizardModel.add(new Roles(UserTO.class.cast(modelObject)));\n+        }\n+\n+        // resource panel step\n         wizardModel.add(new Resources(modelObject));\n         return wizardModel;\n     }"},{"sha":"5e747499a2ade85c9e660d971fc6025b1be3b83e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AuxClasses.java","status":"modified","additions":94,"deletions":4,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -21,28 +21,117 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n \n public class AuxClasses extends WizardStep {\n \n     private static final long serialVersionUID = 552437609667518888L;\n \n+    private final GroupRestClient groupRestClient = new GroupRestClient();\n+\n+    private static final Pattern GROUP_ID_PATTERN = Pattern.compile(\"\\\\[(\\\\d)\\\\]? (.*)\");\n+\n     public <T extends AnyTO> AuxClasses(final T entityTO, final String... anyTypeClass) {\n         this.setOutputMarkupId(true);\n \n-        final AnyTypeClassService service = SyncopeConsoleSession.get().getService(AnyTypeClassService.class);\n+        final Fragment fragment;\n+        if (entityTO instanceof GroupTO) {\n+            fragment = new Fragment(\"groups\", \"emptyFragment\", this);\n+        } else {\n+            fragment = new Fragment(\"groups\", \"groupsFragment\", this);\n+\n+            final List<MembershipTO> memberships = entityTO instanceof UserTO\n+                    ? UserTO.class.cast(entityTO).getMemberships()\n+                    : AnyObjectTO.class.cast(entityTO).getMemberships();\n+\n+            fragment.add(new AjaxPalettePanel<>(\n+                    \"groups\",\n+                    new ListModel<String>(CollectionUtils.collect(memberships,\n+                                    new Transformer<MembershipTO, String>() {\n+\n+                                        @Override\n+                                        public String transform(final MembershipTO input) {\n+                                            return String.format(\"[%d] %s\", input.getRightKey(), input.getGroupName());\n+                                        }\n+                                    }, new ArrayList<String>())) {\n+\n+                        private static final long serialVersionUID = 1L;\n \n+                        @Override\n+                        public void setObject(final List<String> object) {\n+                            super.setObject(object);\n+                            memberships.clear();\n+                            CollectionUtils.collect(getObject(), new Transformer<String, MembershipTO>() {\n+\n+                                @Override\n+                                public MembershipTO transform(final String input) {\n+                                    final Matcher m = GROUP_ID_PATTERN.matcher(input);\n+                                    final String groupName;\n+                                    final long groupKey;\n+                                    if (m.matches()) {\n+                                        groupKey = Long.parseLong(m.group(1));\n+                                        groupName = m.group(2);\n+                                    } else {\n+                                        groupKey = -1L;\n+                                        groupName = input;\n+                                    }\n+\n+                                    return new MembershipTO.Builder().left(entityTO.getType(), entityTO.getKey()).\n+                                    group(groupKey, groupName).build();\n+                                }\n+                            }, memberships);\n+                        }\n+                    },\n+                    new ListModel<>(CollectionUtils.collect(groupRestClient.list(\n+                                            entityTO.getRealm(), -1, -1, new SortParam<>(\"name\", true), null),\n+                                    new Transformer<GroupTO, String>() {\n+\n+                                        @Override\n+                                        public String transform(final GroupTO input) {\n+                                            return String.format(\"[%d] %s\", input.getKey(), input.getName());\n+                                        }\n+                                    }, new ArrayList<String>())),\n+                    true).setOutputMarkupId(true));\n+        }\n+        add(fragment);\n+\n+//        add(new AjaxPalettePanel<>(\n+//                \"auxClasses\",\n+//                new PropertyModel<List<String>>(entityTO, \"auxClasses\"),\n+//                new ListModel<String>(ListUtils.<String>subtract(\n+//                                CollectionUtils.<AnyTypeClassTO, String, List<String>>collect(\n+//                                        AnyTypeRestClient.getAllAnyTypeClass(),\n+//                                        new Transformer<AnyTypeClassTO, String>() {\n+//\n+//                                            @Override\n+//                                            public String transform(final AnyTypeClassTO input) {\n+//                                                return input.getKey();\n+//                                            }\n+//                                        }, new ArrayList<String>()),\n+//                                Arrays.<String>asList(anyTypeClass))),\n+//                true).setOutputMarkupId(true));\n+//        \n         final List<String> current = Arrays.asList(anyTypeClass);\n \n         final List<String> choices = new ArrayList<String>();\n-        for (AnyTypeClassTO aux : service.list()) {\n+        for (AnyTypeClassTO aux : AnyTypeRestClient.getAllAnyTypeClass()) {\n             if (!current.contains(aux.getKey())) {\n                 choices.add(aux.getKey());\n             }\n@@ -53,5 +142,6 @@ public <T extends AnyTO> AuxClasses(final T entityTO, final String... anyTypeCla\n                 new PropertyModel<List<String>>(entityTO, \"auxClasses\"),\n                 new ListModel<>(choices),\n                 true).setOutputMarkupId(true));\n+\n     }\n }"},{"sha":"8f9a362a8359071aeddd256d943cbefbcfacb31d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Resources.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -22,11 +22,10 @@\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n@@ -55,7 +54,7 @@ public void setObject(final List<String> object) {\n                     }\n                 },\n                 new ListModel<>(CollectionUtils.collect(\n-                                SyncopeConsoleSession.get().getService(ResourceService.class).list(),\n+                                ResourceRestClient.getAll(),\n                                 new Transformer<ResourceTO, String>() {\n \n                                     @Override"},{"sha":"179783aa231bda7b334db93c394508e330fe5b9c","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Roles.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.any;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class Roles extends WizardStep {\n+\n+    private static final long serialVersionUID = 552437609667518888L;\n+\n+    public <T extends AnyTO> Roles(final UserTO entityTO) {\n+        this.setOutputMarkupId(true);\n+\n+        add(new AjaxPalettePanel<>(\"roles\",\n+                new PropertyModel<List<String>>(entityTO, \"roles\"),\n+                new ListModel<>(CollectionUtils.collect(\n+                                RoleRestClient.getAll(),\n+                                new Transformer<RoleTO, String>() {\n+\n+                                    @Override\n+                                    public String transform(final RoleTO input) {\n+                                        return input.getKey();\n+                                    }\n+                                }, new ArrayList<String>()))).setOutputMarkupId(true));\n+    }\n+}"},{"sha":"a2468a320b519ffc119ae5120f63e21ad1f0ecf6","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AuxClasses.html","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.html?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -20,7 +20,13 @@\n   <head><title></title></head>\n   <body>\n     <wicket:panel>\n+      <span wicket:id=\"groups\"/>\n       <span wicket:id=\"auxClasses\">[AUX]</span>\n+\n+      <wicket:fragment wicket:id=\"emptyFragment\"/>\n+      <wicket:fragment wicket:id=\"groupsFragment\">\n+        <span wicket:id=\"groups\"/>\n+      </wicket:fragment>\n     </wicket:panel>\n   </body>\n </html>\n\\ No newline at end of file"},{"sha":"1f3ff53cbfccd6d606e6eca8efd1b1b786e97c9f","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Roles.html","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.html?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -0,0 +1,26 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head><title></title></head>\n+  <body>\n+    <wicket:panel>\n+      <span wicket:id=\"roles\">[ROLES]</span>\n+    </wicket:panel>\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"d09ae25368ccb1065dec5cd5c561afc8f0fdbc28","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -49,11 +49,11 @@ public List<DerSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n                 append(JPADerSchema.class.getSimpleName()).\n                 append(\" e WHERE \");\n         for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n-            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR\");\n+            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR \");\n         }\n \n         TypedQuery<DerSchema> query = entityManager().createQuery(\n-                queryString.substring(0, queryString.length() - 3), DerSchema.class);\n+                queryString.substring(0, queryString.length() - 4), DerSchema.class);\n \n         return query.getResultList();\n     }"},{"sha":"fe9e5738f8faea3140c7a64e7f4faace2ade4ce7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -55,11 +55,11 @@ public List<PlainSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> any\n                 append(JPAPlainSchema.class.getSimpleName()).\n                 append(\" e WHERE \");\n         for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n-            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR\");\n+            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR \");\n         }\n \n         TypedQuery<PlainSchema> query = entityManager().createQuery(\n-                queryString.substring(0, queryString.length() - 3), PlainSchema.class);\n+                queryString.substring(0, queryString.length() - 4), PlainSchema.class);\n \n         return query.getResultList();\n     }"},{"sha":"dd7706011bcf42784a09c124f5fe9a03e437a3c9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/758adcc4fca30faa87b6e1ce18ad37e94e987886/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/758adcc4fca30faa87b6e1ce18ad37e94e987886/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=758adcc4fca30faa87b6e1ce18ad37e94e987886","patch":"@@ -51,11 +51,11 @@ public List<VirSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n                 append(JPAVirSchema.class.getSimpleName()).\n                 append(\" e WHERE \");\n         for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n-            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR\");\n+            queryString.append(\"e.anyTypeClass.name='\").append(anyTypeClass.getKey()).append(\"' OR \");\n         }\n \n         TypedQuery<VirSchema> query = entityManager().createQuery(\n-                queryString.substring(0, queryString.length() - 3), VirSchema.class);\n+                queryString.substring(0, queryString.length() - 4), VirSchema.class);\n \n         return query.getResultList();\n     }"}]}