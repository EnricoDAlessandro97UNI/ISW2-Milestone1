{"sha":"62f92761823c1587808687364b4d8e7ab2b3238c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYyZjkyNzYxODIzYzE1ODc4MDg2ODczNjRiNGQ4ZTdhYjJiMzIzOGM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-12T16:51:34Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-12T16:51:34Z"},"message":"Update issue 238\nDbUnit has gone as well: no more LGPL dependencies in branch 0_8_X_ASL!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/0_8_X_ASL@1247325 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a7730c297660e97069a6b1ed7674501dba6b9823","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a7730c297660e97069a6b1ed7674501dba6b9823"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/62f92761823c1587808687364b4d8e7ab2b3238c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f92761823c1587808687364b4d8e7ab2b3238c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62f92761823c1587808687364b4d8e7ab2b3238c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f92761823c1587808687364b4d8e7ab2b3238c/comments","author":null,"committer":null,"parents":[{"sha":"839cfb33c894e63bae83ff038d1a7a6e456c7f0b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/839cfb33c894e63bae83ff038d1a7a6e456c7f0b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/839cfb33c894e63bae83ff038d1a7a6e456c7f0b"}],"stats":{"total":686,"additions":514,"deletions":172},"files":[{"sha":"804a2644bb372f652c8c8bbe1c800a4509ce0a7a","filename":"TODO","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/TODO","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/TODO","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/TODO?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -4,7 +4,6 @@\n \n =core=\n \n-* working 'mvn clean verify'\n * postgres-it\n * mysql-it\n * oracle-it"},{"sha":"9ebfd14690dcb8669ee8076d5b5fd623174a2f14","filename":"core/pom.xml","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -127,6 +127,15 @@\n             <artifactId>cglib</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.aspectj</groupId>\n+            <artifactId>aspectjrt</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.aspectj</groupId>\n+            <artifactId>aspectjweaver</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>com.thoughtworks.xstream</groupId>\n             <artifactId>xstream</artifactId>\n@@ -160,11 +169,6 @@\n             <groupId>org.codehaus.groovy</groupId>\n             <artifactId>groovy-all</artifactId>\n         </dependency>\n-            \n-        <dependency>\n-            <groupId>org.dbunit</groupId>\n-            <artifactId>dbunit</artifactId>\n-        </dependency>\n \n         <dependency>\n             <groupId>org.reflections</groupId>\n@@ -296,10 +300,10 @@\n                     <includes>org/syncope/core/persistence/beans/**/*.class</includes>\n                     <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n                     <connectionProperties>\n-                    driverClassName=org.h2.Driver,\n-                    url=jdbc:h2:mem:syncopedb\n-                    username=sa,\n-                    password=\n+                        driverClassName=org.h2.Driver,\n+                        url=jdbc:h2:mem:syncopedb\n+                        username=sa,\n+                        password=\n                     </connectionProperties>\n                 </configuration>\n                 <executions>"},{"sha":"60e976ee41dc0706992c168d9ca4031d35cd020d","filename":"core/src/main/java/org/syncope/core/init/ContentLoader.java","status":"modified","additions":19,"deletions":63,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -13,21 +13,16 @@\n  */\n package org.syncope.core.init;\n \n-import java.io.IOException;\n+import org.syncope.core.util.ImportExport;\n import java.io.InputStream;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Properties;\n import javax.sql.DataSource;\n-import org.dbunit.database.DatabaseConfig;\n-import org.dbunit.database.DatabaseConnection;\n-import org.dbunit.database.IDatabaseConnection;\n-import org.dbunit.dataset.IDataSet;\n-import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n-import org.dbunit.operation.DatabaseOperation;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -53,40 +48,15 @@ public class ContentLoader {\n     private DataSource dataSource;\n \n     @Autowired\n-    private DefaultDataTypeFactory dbUnitDataTypeFactory;\n+    private ImportExport importExport;\n \n-    @Transactional(readOnly = true)\n+    @Transactional\n     public void load() {\n \n         // 0. DB connection, to be used below\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n \n-        // 1. read persistence.properties\n-        InputStream dbPropsStream = null;\n-        String dbSchema = null;\n-        try {\n-            dbPropsStream = getClass().getResourceAsStream(\n-                    \"/persistence.properties\");\n-            Properties dbProps = new Properties();\n-            dbProps.load(dbPropsStream);\n-            dbSchema = dbProps.getProperty(\"database.schema\");\n-        } catch (Throwable t) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Could not find persistence.properties\", t);\n-            } else {\n-                LOG.error(\"Could not find persistence.properties\");\n-            }\n-        } finally {\n-            if (dbPropsStream != null) {\n-                try {\n-                    dbPropsStream.close();\n-                } catch (IOException e) {\n-                    LOG.error(\"While trying to read persistence.properties\", e);\n-                }\n-            }\n-        }\n-\n-        // 2. Check wether we are allowed to load default content into the DB\n+        // 1. Check wether we are allowed to load default content into the DB\n         Statement statement = null;\n         ResultSet resultSet = null;\n         boolean existingData = false;\n@@ -122,7 +92,7 @@ public void load() {\n \n         LOG.info(\"Empty database found, loading default content\");\n \n-        // 3. Create views\n+        // 2. Create views\n         LOG.debug(\"Creating views\");\n         try {\n             InputStream viewsStream = getClass().getResourceAsStream(\n@@ -148,7 +118,7 @@ public void load() {\n             LOG.error(\"While creating views\", t);\n         }\n \n-        // 4. Create indexes\n+        // 3. Create indexes\n         LOG.debug(\"Creating indexes\");\n         try {\n             InputStream indexesStream = getClass().getResourceAsStream(\n@@ -171,31 +141,6 @@ public void load() {\n             LOG.debug(\"Indexes created, go for default content\");\n         } catch (Throwable t) {\n             LOG.error(\"While creating indexes\", t);\n-        }\n-\n-        // 5. Load default content\n-        try {\n-            IDatabaseConnection dbUnitConn = dbSchema == null\n-                    ? new DatabaseConnection(conn)\n-                    : new DatabaseConnection(conn, dbSchema);\n-\n-            DatabaseConfig config = dbUnitConn.getConfig();\n-            config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,\n-                    dbUnitDataTypeFactory);\n-            config.setProperty(\n-                    DatabaseConfig.FEATURE_SKIP_ORACLE_RECYCLEBIN_TABLES,\n-                    true);\n-\n-            FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n-            dataSetBuilder.setColumnSensing(true);\n-            IDataSet dataSet = dataSetBuilder.build(getClass().\n-                    getResourceAsStream(\"/content.xml\"));\n-\n-            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n-\n-            LOG.debug(\"Default content successfully loaded\");\n-        } catch (Throwable t) {\n-            LOG.error(\"While loading default content\", t);\n         } finally {\n             DataSourceUtils.releaseConnection(conn, dataSource);\n         }\n@@ -205,5 +150,16 @@ public void load() {\n         } catch (SQLException e) {\n             LOG.error(\"While closing SQL connection\", e);\n         }\n+\n+        // 4. Load default content\n+        SAXParserFactory factory = SAXParserFactory.newInstance();\n+        try {\n+            SAXParser parser = factory.newSAXParser();\n+            parser.parse(getClass().getResourceAsStream(\"/content.xml\"),\n+                    importExport);\n+            LOG.debug(\"Default content successfully loaded\");\n+        } catch (Throwable t) {\n+            LOG.error(\"While loading default content\", t);\n+        }\n     }\n }"},{"sha":"d0186960cf7f30c511f1339eb79476936b2b487c","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":9,"deletions":76,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -15,33 +15,18 @@\n package org.syncope.core.rest.controller;\n \n import com.google.common.io.PatternFilenameFilter;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.StringWriter;\n import java.lang.reflect.Modifier;\n import java.net.URISyntaxException;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Properties;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import javax.sql.DataSource;\n-import org.dbunit.database.DatabaseConfig;\n-import org.dbunit.database.DatabaseConnection;\n-import org.dbunit.database.DatabaseSequenceFilter;\n-import org.dbunit.database.IDatabaseConnection;\n-import org.dbunit.dataset.FilteredDataSet;\n-import org.dbunit.dataset.IDataSet;\n-import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n-import org.dbunit.dataset.xml.FlatXmlDataSet;\n import org.reflections.Reflections;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n@@ -52,10 +37,11 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.core.persistence.beans.SyncopeConf;\n-import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.ConfDAO;\n+import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.validation.attrvalue.Validator;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n+import org.syncope.core.util.ImportExport;\n \n @Controller\n @RequestMapping(\"/configuration\")\n@@ -68,10 +54,7 @@ public class ConfigurationController extends AbstractController {\n     private ConfigurationDataBinder configurationDataBinder;\n \n     @Autowired\n-    private DataSource dataSource;\n-\n-    @Autowired\n-    private DefaultDataTypeFactory dbUnitDataTypeFactory;\n+    private ImportExport importExport;\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n@@ -105,8 +88,7 @@ public void delete(@PathVariable(\"key\") final String key)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public List<ConfigurationTO> list(HttpServletRequest request) {\n-        List<SyncopeConf> configurations =\n-                confDAO.findAll();\n+        List<SyncopeConf> configurations = confDAO.findAll();\n         List<ConfigurationTO> configurationTOs =\n                 new ArrayList<ConfigurationTO>(configurations.size());\n \n@@ -214,65 +196,16 @@ public ModelAndView getMailTemplates()\n     value = \"/dbexport\")\n     @Transactional(readOnly = true)\n     public ModelAndView dbExport() {\n-\n-        // 0. DB connection, to be used below\n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n-\n-        // 1. read persistence.properties\n-        InputStream dbPropsStream = null;\n-        String dbSchema = null;\n-        try {\n-            dbPropsStream = getClass().getResourceAsStream(\n-                    \"/persistence.properties\");\n-            Properties dbProps = new Properties();\n-            dbProps.load(dbPropsStream);\n-            dbSchema = dbProps.getProperty(\"database.schema\");\n-        } catch (Throwable t) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Could not find persistence.properties\", t);\n-            } else {\n-                LOG.error(\"Could not find persistence.properties\");\n-            }\n-        } finally {\n-            if (dbPropsStream != null) {\n-                try {\n-                    dbPropsStream.close();\n-                } catch (IOException e) {\n-                    LOG.error(\"While trying to read persistence.properties\", e);\n-                }\n-            }\n-        }\n-\n-        // 2. Export content\n-        StringWriter export = new StringWriter();\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         try {\n-            IDatabaseConnection dbUnitConn = dbSchema == null\n-                    ? new DatabaseConnection(conn)\n-                    : new DatabaseConnection(conn, dbSchema);\n-\n-            DatabaseConfig config = dbUnitConn.getConfig();\n-            config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,\n-                    dbUnitDataTypeFactory);\n-\n-            IDataSet fullDataSet = new FilteredDataSet(\n-                    new DatabaseSequenceFilter(dbUnitConn),\n-                    dbUnitConn.createDataSet());\n-            FlatXmlDataSet.write(fullDataSet, export);\n+            importExport.export(baos);\n \n             LOG.debug(\"Default content successfully exported\");\n         } catch (Throwable t) {\n             LOG.error(\"While exporting content\", t);\n-        } finally {\n-            DataSourceUtils.releaseConnection(conn, dataSource);\n-        }\n-\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            LOG.error(\"While closing SQL connection\", e);\n         }\n \n-        return new ModelAndView(\"dbExport\").addObject(\"export\",\n-                export.toString());\n+        return new ModelAndView(\"dbExport\").addObject(\n+                \"export\", new String(baos.toByteArray()));\n     }\n }"},{"sha":"22127f93d9fcf95f000ac6664d7403bd938ebea3","filename":"core/src/main/java/org/syncope/core/util/ImportExport.java","status":"added","additions":274,"deletions":0,"changes":274,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FImportExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FImportExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FImportExport.java?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -0,0 +1,274 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+import javax.sql.DataSource;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+import javax.xml.transform.sax.TransformerHandler;\n+import javax.xml.transform.stream.StreamResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.stereotype.Component;\n+import org.syncope.core.util.multiparent.CycleInMultiParentTreeException;\n+import org.syncope.core.util.multiparent.MultiParentNode;\n+import org.syncope.core.util.multiparent.MultiParentNodeOp;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.AttributesImpl;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+@Component\n+public class ImportExport extends DefaultHandler {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            ImportExport.class);\n+\n+    private final static String ROOT_ELEMENT = \"dataset\";\n+\n+    @Autowired\n+    private EntityManager entityManager;\n+\n+    @Autowired\n+    private DataSource dataSource;\n+\n+    @Override\n+    public void startElement(final String uri, final String localName,\n+            final String qName, final Attributes atts)\n+            throws SAXException {\n+\n+        // skip root element\n+        if (ROOT_ELEMENT.equals(qName)) {\n+            return;\n+        }\n+\n+        StringBuilder queryString =\n+                new StringBuilder(\"INSERT INTO \").append(qName).append('(');\n+\n+        StringBuilder values = new StringBuilder();\n+\n+        for (int i = 0; i < atts.getLength(); i++) {\n+            queryString.append(atts.getQName(i));\n+            values.append('?');\n+            if (i < atts.getLength() - 1) {\n+                queryString.append(',');\n+                values.append(',');\n+            }\n+        }\n+        queryString.append(\") VALUES (\").append(values).append(')');\n+\n+        Query query = entityManager.createNativeQuery(queryString.toString());\n+        for (int i = 0; i < atts.getLength(); i++) {\n+            query.setParameter(i + 1, atts.getValue(i));\n+        }\n+        query.executeUpdate();\n+    }\n+\n+    private void doExportTable(final TransformerHandler handler,\n+            final Connection conn, final String tableName)\n+            throws SQLException, SAXException {\n+\n+        AttributesImpl atts = new AttributesImpl();\n+\n+        PreparedStatement stmt = null;\n+        ResultSet rs = null;\n+        try {\n+            stmt = conn.prepareStatement(\"SELECT * FROM \" + tableName + \" a\");\n+            rs = stmt.executeQuery();\n+            for (int rowNo = 0; rs.next(); rowNo++) {\n+                atts.clear();\n+\n+                ResultSetMetaData metaData = rs.getMetaData();\n+                for (int i = 0; i < metaData.getColumnCount(); i++) {\n+                    String columnName = metaData.getColumnName(i + 1);\n+                    String value = rs.getString(columnName);\n+                    if (value != null) {\n+                        atts.addAttribute(\"\", \"\", columnName, \"CDATA\", value);\n+                    }\n+                }\n+\n+                handler.startElement(\"\", \"\", tableName, atts);\n+                handler.endElement(\"\", \"\", tableName);\n+            }\n+        } finally {\n+            if (rs != null) {\n+                try {\n+                    rs.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"While closing result set\", e);\n+                }\n+            }\n+            if (stmt != null) {\n+                try {\n+                    stmt.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"While closing result set\", e);\n+                }\n+            }\n+        }\n+    }\n+\n+    private List<String> sortByForeignKeys(final Connection conn,\n+            final String schema, final Set<String> tableNames)\n+            throws SQLException, CycleInMultiParentTreeException {\n+\n+        MultiParentNode<String> root =\n+                new MultiParentNode<String>(ROOT_ELEMENT);\n+\n+        for (String tableName : tableNames) {\n+            MultiParentNode<String> node =\n+                    MultiParentNodeOp.findInTree(root, tableName);\n+            if (node == null) {\n+                node = new MultiParentNode<String>(tableName);\n+                root.addChild(node);\n+            }\n+\n+            // manca lo schema - per Oracle\n+            ResultSet rs = null;\n+            try {\n+                rs = conn.getMetaData().\n+                        getExportedKeys(conn.getCatalog(), schema, tableName);\n+                while (rs.next()) {\n+                    String fkTableName = rs.getString(\"FKTABLE_NAME\");\n+                    if (!tableName.equals(fkTableName)) {\n+                        MultiParentNode<String> fkNode =\n+                                MultiParentNodeOp.findInTree(root, fkTableName);\n+                        if (fkNode == null) {\n+                            fkNode = new MultiParentNode<String>(fkTableName);\n+                            root.addChild(fkNode);\n+                        }\n+                        fkNode.addChild(node);\n+                        if (root.isParent(node)) {\n+                            root.removeChild(node);\n+                        }\n+                    }\n+                }\n+            } finally {\n+                if (rs != null) {\n+                    try {\n+                        rs.close();\n+                    } catch (SQLException e) {\n+                        LOG.error(\"While closing tables result set\", e);\n+                    }\n+                }\n+            }\n+        }\n+\n+        List<String> sortedTableNames = new ArrayList<String>(tableNames.size());\n+        MultiParentNodeOp.traverseTree(root, sortedTableNames);\n+        return sortedTableNames.subList(0, sortedTableNames.size() - 1);\n+    }\n+\n+    public void export(final OutputStream os)\n+            throws SAXException, TransformerConfigurationException,\n+            CycleInMultiParentTreeException {\n+\n+        // 0. read persistence.properties (for database schema)\n+        InputStream dbPropsStream = null;\n+        String dbSchema = null;\n+        try {\n+            dbPropsStream = getClass().getResourceAsStream(\n+                    \"/persistence.properties\");\n+            Properties dbProps = new Properties();\n+            dbProps.load(dbPropsStream);\n+            dbSchema = dbProps.getProperty(\"database.schema\");\n+        } catch (Throwable t) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Could not find persistence.properties\", t);\n+            } else {\n+                LOG.error(\"Could not find persistence.properties\");\n+            }\n+        } finally {\n+            if (dbPropsStream != null) {\n+                try {\n+                    dbPropsStream.close();\n+                } catch (IOException e) {\n+                    LOG.error(\"While trying to read persistence.properties\", e);\n+                }\n+            }\n+        }\n+\n+        StreamResult streamResult = new StreamResult(os);\n+        SAXTransformerFactory transformerFactory =\n+                (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+\n+        TransformerHandler handler = transformerFactory.newTransformerHandler();\n+        Transformer serializer = handler.getTransformer();\n+        serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+        serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        handler.setResult(streamResult);\n+        handler.startDocument();\n+        handler.startElement(\"\", \"\", ROOT_ELEMENT, new AttributesImpl());\n+\n+        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        ResultSet rs = null;\n+        try {\n+            // first read all tables...\n+            rs = conn.getMetaData().getTables(\n+                    null, null, null, new String[]{\"TABLE\"});\n+            Set<String> tableNames = new HashSet<String>();\n+            while (rs.next()) {\n+                String tableName = rs.getString(\"TABLE_NAME\");\n+                // these tables must be ignored\n+                if (!tableName.toUpperCase().startsWith(\"QRTZ_\")\n+                        && !tableName.toUpperCase().equals(\"ACT_GE_PROPERTY\")) {\n+\n+                    tableNames.add(tableName);\n+                }\n+            }\n+            // then sort tables based on foreign keys and dump\n+            for (String tableName :\n+                    sortByForeignKeys(conn, dbSchema, tableNames)) {\n+\n+                doExportTable(handler, conn, tableName);\n+            }\n+        } catch (SQLException e) {\n+            LOG.error(\"While exporting database content\", e);\n+        } finally {\n+            if (rs != null) {\n+                try {\n+                    rs.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"While closing tables result set\", e);\n+                }\n+            }\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+        }\n+\n+        handler.endElement(\"\", \"\", ROOT_ELEMENT);\n+        handler.endDocument();\n+    }\n+}"},{"sha":"4e7dcdf8cbefdc86ccb6e887055ce277191f47c4","filename":"core/src/main/java/org/syncope/core/util/multiparent/CycleInMultiParentTreeException.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FCycleInMultiParentTreeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FCycleInMultiParentTreeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FCycleInMultiParentTreeException.java?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.util.multiparent;\n+\n+public class CycleInMultiParentTreeException extends Exception {\n+\n+    private static final long serialVersionUID = -741534138630944574L;\n+\n+    public CycleInMultiParentTreeException(final String message) {\n+        super(message);\n+    }\n+}"},{"sha":"e09523e99fd2e85ab1a54e6f875caac772f9b391","filename":"core/src/main/java/org/syncope/core/util/multiparent/MultiParentNode.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNode.java?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.util.multiparent;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n+\n+public class MultiParentNode<T> {\n+\n+    private final T object;\n+\n+    private Set<MultiParentNode<T>> parents;\n+\n+    private Set<MultiParentNode<T>> children;\n+\n+    public MultiParentNode(final T object) {\n+        this.object = object;\n+        parents = new HashSet<MultiParentNode<T>>();\n+        children = new HashSet<MultiParentNode<T>>();\n+    }\n+\n+    public boolean isRoot() {\n+        return parents.isEmpty();\n+    }\n+\n+    public boolean isLeaf() {\n+        return children.isEmpty();\n+    }\n+\n+    public T getObject() {\n+        return object;\n+    }\n+\n+    public boolean isParent(final MultiParentNode<T> child) {\n+        return children.contains(child) && child.isChild(this);\n+    }\n+\n+    public boolean isChild(final MultiParentNode<T> parent) {\n+        return parents.contains(parent) && parent.isParent(this);\n+    }\n+\n+    public Set<MultiParentNode<T>> getChildren() {\n+        return children;\n+    }\n+\n+    public Set<MultiParentNode<T>> getParents() {\n+        return parents;\n+    }\n+\n+    public void addParent(final MultiParentNode<T> parent) {\n+        if (parent != null) {\n+            parents.add(parent);\n+            parent.children.add(this);\n+        }\n+    }\n+\n+    public void removeParent(final MultiParentNode<T> parent) {\n+        if (parent != null) {\n+            parents.remove(parent);\n+            parent.children.remove(this);\n+        }\n+    }\n+\n+    public void addChild(final MultiParentNode<T> child)\n+            throws CycleInMultiParentTreeException {\n+\n+        if (child != null) {\n+            if (MultiParentNodeOp.findInTree(child, getObject()) != null) {\n+                throw new CycleInMultiParentTreeException(\n+                        \"This node is descendant of given child node\");\n+            }\n+\n+            children.add(child);\n+            child.parents.add(this);\n+        }\n+    }\n+\n+    public void removeChild(final MultiParentNode<T> child) {\n+        if (child != null) {\n+            children.remove(child);\n+            child.parents.remove(this);\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+}"},{"sha":"5df54fcb43c5de01d119e80575fc60fd8b6d9482","filename":"core/src/main/java/org/syncope/core/util/multiparent/MultiParentNodeOp.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNodeOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNodeOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2Fmultiparent%2FMultiParentNodeOp.java?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.util.multiparent;\n+\n+import java.util.List;\n+\n+public class MultiParentNodeOp {\n+\n+    private MultiParentNodeOp() {\n+    }\n+\n+    public static <T> MultiParentNode<T> findInTree(\n+            final MultiParentNode<T> parent, final T object) {\n+\n+        if (parent.getObject().equals(object)) {\n+            return parent;\n+        }\n+\n+        for (MultiParentNode<T> child : parent.getChildren()) {\n+            MultiParentNode<T> found = findInTree(child, object);\n+            if (found != null) {\n+                return found;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static <T> void traverseTree(final MultiParentNode<T> parent,\n+            final List<T> objects) {\n+\n+        for (MultiParentNode<T> child : parent.getChildren()) {\n+            traverseTree(child, objects);\n+        }\n+\n+        if (!objects.contains(parent.getObject())) {\n+            objects.add(parent.getObject());\n+        }\n+    }\n+}"},{"sha":"ff3106d870329a62fb7523caf0b6537bf642c9d7","filename":"core/src/main/resources/persistence.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -17,8 +17,6 @@ jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.hibernate.dialect.PostgreSQLDialect\n #jpa.dialect=org.hibernate.dialect.Oracle10gDialect\n-dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n-#dbUnitDataTypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n #quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n quartz.sql=tables_postgres.sql"},{"sha":"5dcea063fd5807f270256cf571f61b4afb4510c7","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -36,8 +36,6 @@\n     <aop:aspectj-autoproxy/>\n     <bean class=\"org.syncope.core.monitor.CacheMonitor\"/>\n \n-    <bean id=\"dbUnitDataTypeFactory\" class=\"${dbUnitDataTypeFactory}\"/>\n-\n     <bean id=\"xStream\" class=\"com.thoughtworks.xstream.XStream\"/>\n \n     <!-- Use JNDI datasource as default but, when not available, revert to"},{"sha":"1cd4b61922a4f7ca3a6fd0520eb61d0db343dbd3","filename":"core/src/main/webapp/dbExport.jsp","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fwebapp%2FdbExport.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Fmain%2Fwebapp%2FdbExport.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FdbExport.jsp?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -1,6 +1,4 @@\n-<%@page contentType=\"application/xml;charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n-<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n-<jsp:useBean id=\"export\"\n-             scope=\"request\"\n-             type=\"java.lang.String\"/>\n-<c:out value=\"${export}\" escapeXml=\"false\"/>\n+<%@page contentType=\"application/xml;charset=UTF-8\" pageEncoding=\"UTF-8\"\n+%><%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"\n+%><jsp:useBean id=\"export\" scope=\"request\" type=\"java.lang.String\"\n+/><c:out value=\"${export}\" escapeXml=\"false\"/>"},{"sha":"1ab20044d7be774c724ebbc3df638d18007db978","filename":"core/src/test/resources/mysql/persistence.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -14,6 +14,5 @@ jpa.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8\n jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\n-dbUnitDataTypeFactory=org.dbunit.ext.mysql.MySqlDataTypeFactory\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.sql=tables_mysql_innodb.sql"},{"sha":"97685cf9a01c42b7a71e1ec8c301afbc0f5e6064","filename":"core/src/test/resources/oracle/persistence.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -14,7 +14,6 @@ jpa.url=jdbc:oracle:thin:@pioppo:1521:orcl\n jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.hibernate.dialect.Oracle10gDialect\n-dbUnitDataTypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory\n quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n quartz.sql=tables_oracle.sql\n database.schema=SYNCOPE"},{"sha":"a714a92455b2d1d143edc9569dc7fce055b78779","filename":"core/src/test/resources/persistence.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -14,6 +14,5 @@ jpa.url=jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=1000\n jpa.username=sa\n jpa.password=\n jpa.dialect=org.apache.openjpa.jdbc.sql.H2Dictionary\n-dbUnitDataTypeFactory=org.dbunit.ext.h2.H2DataTypeFactory\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.sql=tables_h2.sql"},{"sha":"cc318df59ea217cea461ba0b51f08a38488319e5","filename":"core/src/test/resources/postgres/persistence.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -14,6 +14,5 @@ jpa.url=jdbc:postgresql://localhost:5432/syncope\n jpa.username=syncope\n jpa.password=syncope\n jpa.dialect=org.hibernate.dialect.PostgreSQLDialect\n-dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n quartz.sql=tables_postgres.sql"},{"sha":"0e1de541d954e4f148a83d1dc6ec4e8dfcdbbae2","filename":"pom.xml","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/62f92761823c1587808687364b4d8e7ab2b3238c/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/62f92761823c1587808687364b4d8e7ab2b3238c/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=62f92761823c1587808687364b4d8e7ab2b3238c","patch":"@@ -72,7 +72,7 @@\n         <maven.version>3.0.3</maven.version>\n         \n         <servlet-api.version>2.5</servlet-api.version>\n-        <jsp-api.version>2.1</jsp-api.version>\n+        <jsp-api.version>2.2</jsp-api.version>\n         <jstl.version>1.2</jstl.version>\n         \n         <connid.version>1.3.1</connid.version>\n@@ -93,6 +93,7 @@\n         <activiti.version>5.8</activiti.version>\n \n         <spring.version>3.0.7.RELEASE</spring.version>\n+        <aspectj.version>1.6.12</aspectj.version>\n         <jackson.version>1.9.3</jackson.version>\n         <xstream.version>1.4.2</xstream.version>\n         <velocity.version>1.7</velocity.version>\n@@ -112,9 +113,8 @@\n         <logback.version>1.0.0</logback.version>\n         <slf4j.version>1.6.4</slf4j.version>\n \n-        <junit.version>4.9</junit.version>\n+        <junit.version>4.10</junit.version>\n         <selenium-java-client-driver.version>1.0.2</selenium-java-client-driver.version>\n-        <dbunit.version>2.4.8</dbunit.version>\n \n         <apacheds.version>1.5.7</apacheds.version>\n \n@@ -237,12 +237,6 @@\n                 <version>${ehcache.version}</version>\n             </dependency>\n \n-            <dependency>\n-                <groupId>org.dbunit</groupId>\n-                <artifactId>dbunit</artifactId>\n-                <version>${dbunit.version}</version>\n-            </dependency>\n-\n             <dependency>\n                 <groupId>org.apache.velocity</groupId>\n                 <artifactId>velocity</artifactId>\n@@ -312,6 +306,17 @@\n                 <artifactId>cglib</artifactId>\n                 <version>2.2.2</version>\n             </dependency>\n+            \n+            <dependency>\n+                <groupId>org.aspectj</groupId>\n+                <artifactId>aspectjrt</artifactId>\n+                <version>${aspectj.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.aspectj</groupId>\n+                <artifactId>aspectjweaver</artifactId>\n+                <version>${aspectj.version}</version>\n+            </dependency>\n \n             <dependency>\n                 <groupId>org.codehaus.jackson</groupId>"}]}