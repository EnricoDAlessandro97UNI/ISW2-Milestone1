{"sha":"e08e87814fed00b00a897ba1d7be53cdb68e3f11","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUwOGU4NzgxNGZlZDAwYjAwYTg5N2JhMWQ3YmU1M2NkYjY4ZTNmMTE=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-06-03T12:09:26Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2019-06-03T12:09:26Z"},"message":"[SYNCOPE-1421] provided customizability feature through JSON file","tree":{"sha":"f50c0a2a7b99a761ebb9c2ff0ddb7cac18628785","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f50c0a2a7b99a761ebb9c2ff0ddb7cac18628785"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e08e87814fed00b00a897ba1d7be53cdb68e3f11","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e08e87814fed00b00a897ba1d7be53cdb68e3f11","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e08e87814fed00b00a897ba1d7be53cdb68e3f11","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e08e87814fed00b00a897ba1d7be53cdb68e3f11/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3d6e0b6ba70bdfe0b0083215578b3def1fd0a396"}],"stats":{"total":559,"additions":354,"deletions":205},"files":[{"sha":"890faaf2391b09251e247454135c40d043df00dc","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/BaseSession.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FBaseSession.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.client.ui.commons;\n \n+import javax.ws.rs.core.MediaType;\n+\n public interface BaseSession {\n \n     void setDomain(String domain);\n@@ -26,4 +28,12 @@ public interface BaseSession {\n \n     <T> T getAnonymousService(Class<T> serviceClass);\n \n+    <T> T getService(Class<T> serviceClass);\n+\n+    <T> T getService(String etag, Class<T> serviceClass);\n+\n+    <T> T getService(MediaType mediaType, Class<T> serviceClass);\n+\n+    <T> void resetClient(Class<T> service);\n+\n }"},{"sha":"1254ed025065f634e8d4b0e1064fd341b460f229","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/Constants.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FConstants.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -103,6 +103,13 @@ public final class Constants {\n \n     public static final String NOTIFICATION_LEVEL_PARAM = \"notificationLevel\";\n \n+    public static final String DEFAULT_USER_FORM_LAYOUT_INFO = \"{\\n\"\n+            + \"    \\\"formClass\\\" : \\\"org.apache.syncope.client.enduser.wizards.any.UserWizardBuilder\\\",\\n\"\n+            + \"    \\\"auxClasses\\\" : true,\\n\" + \"    \\\"groups\\\" : true,\\n\" + \"    \\\"plainAttrs\\\" : true,\\n\"\n+            + \"    \\\"derAttrs\\\" : true,\\n\" + \"    \\\"virAttrs\\\" : true,\\n\" + \"    \\\"resources\\\" : true,\\n\"\n+            + \"    \\\"whichPlainAttrs\\\" : {},\\n\" + \"    \\\"whichDerAttrs\\\" : {},\\n\" + \"    \\\"whichVirAttrs\\\" : {},\\n\"\n+            + \"    \\\"passwordManagement\\\" : true\\n\" + \"  }\";\n+\n     public static Component getJEXLPopover(final Component caller, final TooltipConfig.Placement placement) {\n         return getJEXLPopover(caller, placement, caller.getString(\"jexl_ex1\"), caller.getString(\"jexl_ex2\"));\n     }"},{"sha":"83b6421e53554b851b4ba95715625f619be15b68","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/layout/AbstractAnyFormBaseLayout.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormBaseLayout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormBaseLayout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormBaseLayout.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.ui.commons.layout;\n+\n+import org.apache.syncope.client.ui.commons.wizards.any.AnyForm;\n+import java.io.Serializable;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+\n+public abstract class AbstractAnyFormBaseLayout<A extends AnyTO, F extends AnyForm<A>> implements Serializable {\n+\n+    private static final long serialVersionUID = -6061683026789976508L;\n+\n+    private Class<F> formClass;\n+\n+    private boolean auxClasses = true;\n+\n+    private boolean groups = true;\n+\n+    private boolean plainAttrs = true;\n+\n+    private boolean derAttrs = true;\n+\n+    private boolean virAttrs = true;\n+\n+    private boolean resources = true;\n+\n+    protected abstract Class<? extends F> getDefaultFormClass();\n+\n+    public Class<? extends F> getFormClass() {\n+        return formClass == null ? getDefaultFormClass() : formClass;\n+    }\n+\n+    public void setFormClass(final Class<F> formClass) {\n+        this.formClass = formClass;\n+    }\n+\n+    public boolean isAuxClasses() {\n+        return auxClasses;\n+    }\n+\n+    public void setAuxClasses(final boolean auxClasses) {\n+        this.auxClasses = auxClasses;\n+    }\n+\n+    public boolean isGroups() {\n+        return groups;\n+    }\n+\n+    public void setGroups(final boolean groups) {\n+        this.groups = groups;\n+    }\n+\n+    public boolean isPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    public void setPlainAttrs(final boolean plainAttrs) {\n+        this.plainAttrs = plainAttrs;\n+    }\n+\n+    public boolean isDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    public void setDerAttrs(final boolean derAttrs) {\n+        this.derAttrs = derAttrs;\n+    }\n+\n+    public boolean isVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    public void setVirAttrs(final boolean virAttrs) {\n+        this.virAttrs = virAttrs;\n+    }\n+\n+    public boolean isResources() {\n+        return resources;\n+    }\n+\n+    public void setResources(final boolean resources) {\n+        this.resources = resources;\n+    }\n+\n+}"},{"sha":"871bab661f6a7abab6f2fe803e23109a51d960bc","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/layout/AbstractAnyFormLayout.java","status":"modified","additions":2,"deletions":74,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormLayout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormLayout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Flayout%2FAbstractAnyFormLayout.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -19,103 +19,31 @@\n package org.apache.syncope.client.ui.commons.layout;\n \n import org.apache.syncope.client.ui.commons.wizards.any.AnyForm;\n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.lib.to.AnyTO;\n \n-public abstract class AbstractAnyFormLayout<A extends AnyTO, F extends AnyForm<A>> implements Serializable {\n+public abstract class AbstractAnyFormLayout<A extends AnyTO, F extends AnyForm<A>>\n+        extends AbstractAnyFormBaseLayout<A, F> {\n \n     private static final long serialVersionUID = -6061683026789976508L;\n \n-    private Class<F> formClass;\n-\n-    private boolean auxClasses = true;\n-\n-    private boolean groups = true;\n-\n-    private boolean plainAttrs = true;\n-\n     private final List<String> whichPlainAttrs = new ArrayList<>();\n \n-    private boolean derAttrs = true;\n-\n     private final List<String> whichDerAttrs = new ArrayList<>();\n \n-    private boolean virAttrs = true;\n-\n     private final List<String> whichVirAttrs = new ArrayList<>();\n \n-    private boolean resources = true;\n-\n-    protected abstract Class<? extends F> getDefaultFormClass();\n-\n-    public Class<? extends F> getFormClass() {\n-        return formClass == null ? getDefaultFormClass() : formClass;\n-    }\n-\n-    public void setFormClass(final Class<F> formClass) {\n-        this.formClass = formClass;\n-    }\n-\n-    public boolean isAuxClasses() {\n-        return auxClasses;\n-    }\n-\n-    public void setAuxClasses(final boolean auxClasses) {\n-        this.auxClasses = auxClasses;\n-    }\n-\n-    public boolean isGroups() {\n-        return groups;\n-    }\n-\n-    public void setGroups(final boolean groups) {\n-        this.groups = groups;\n-    }\n-\n-    public boolean isPlainAttrs() {\n-        return plainAttrs;\n-    }\n-\n-    public void setPlainAttrs(final boolean plainAttrs) {\n-        this.plainAttrs = plainAttrs;\n-    }\n-\n     public List<String> getWhichPlainAttrs() {\n         return whichPlainAttrs;\n     }\n \n-    public boolean isDerAttrs() {\n-        return derAttrs;\n-    }\n-\n-    public void setDerAttrs(final boolean derAttrs) {\n-        this.derAttrs = derAttrs;\n-    }\n-\n     public List<String> getWhichDerAttrs() {\n         return whichDerAttrs;\n     }\n \n-    public boolean isVirAttrs() {\n-        return virAttrs;\n-    }\n-\n-    public void setVirAttrs(final boolean virAttrs) {\n-        this.virAttrs = virAttrs;\n-    }\n-\n     public List<String> getWhichVirAttrs() {\n         return whichVirAttrs;\n     }\n \n-    public boolean isResources() {\n-        return resources;\n-    }\n-\n-    public void setResources(final boolean resources) {\n-        this.resources = resources;\n-    }\n-\n }"},{"sha":"84a8adb7d2d81890efaae937ad40f9792dedc8c6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -308,17 +308,20 @@ public <T> T getAnonymousService(final Class<T> serviceClass) {\n         return getAnonymousClient().getService(serviceClass);\n     }\n \n+    @Override\n     public <T> T getService(final Class<T> serviceClass) {\n         return getCachedService(serviceClass);\n     }\n \n+    @Override\n     public <T> T getService(final String etag, final Class<T> serviceClass) {\n         T serviceInstance = getCachedService(serviceClass);\n         WebClient.client(serviceInstance).match(new EntityTag(etag), false);\n \n         return serviceInstance;\n     }\n \n+    @Override\n     public <T> T getService(final MediaType mediaType, final Class<T> serviceClass) {\n         T service;\n \n@@ -338,6 +341,7 @@ public BatchRequest batch() {\n         return client.batch();\n     }\n \n+    @Override\n     public <T> void resetClient(final Class<T> service) {\n         T serviceInstance = getCachedService(service);\n         WebClient.client(serviceInstance).reset();"},{"sha":"c716f07600abec8f034ffafc9535b2c6095740f9","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/layout/CustomizationOption.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FCustomizationOption.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FCustomizationOption.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FCustomizationOption.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.layout;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CustomizationOption implements Serializable {\n+\n+    private static final long serialVersionUID = 4910266842123376686L;\n+\n+    private boolean readonly;\n+\n+    private List<String> defaultValues = new ArrayList<>();\n+\n+    public CustomizationOption() {\n+    }\n+\n+    public boolean isReadonly() {\n+        return readonly;\n+    }\n+\n+    public void setReadonly(final boolean readonly) {\n+        this.readonly = readonly;\n+    }\n+\n+    public List<String> getDefaultValues() {\n+        return defaultValues;\n+    }\n+\n+    public void setDefaultValues(final List<String> defaultValues) {\n+        this.defaultValues = defaultValues;\n+    }\n+\n+    public CustomizationOption readonly(final Boolean value) {\n+        this.readonly = value;\n+        return this;\n+    }\n+\n+    public CustomizationOption defaultValues(final List<String> value) {\n+        this.defaultValues = value;\n+        return this;\n+    }\n+\n+}"},{"sha":"f5517bb5f5a40ef4b5ab4be8dbe7ab8d269d6fad","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/layout/FormLayoutInfoUtils.java","status":"modified","additions":2,"deletions":25,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FFormLayoutInfoUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FFormLayoutInfoUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FFormLayoutInfoUtils.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -18,16 +18,13 @@\n  */\n package org.apache.syncope.client.enduser.layout;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n-import java.util.Collection;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n-import org.apache.syncope.client.enduser.rest.RoleRestClient;\n import org.apache.syncope.client.ui.commons.wizards.ModalPanelBuilder;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -39,31 +36,11 @@\n  */\n public final class FormLayoutInfoUtils {\n \n-    private static final RoleRestClient ROLE_REST_CLIENT = new RoleRestClient();\n-\n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    public static UserFormLayoutInfo fetch(\n-            final Collection<String> anyTypes) {\n-\n-        List<String> ownedRoles = SyncopeEnduserSession.get().getSelfTO().getRoles();\n+    public static UserFormLayoutInfo fromJsonString(final String content) {\n         try {\n-            JsonNode tree = null;\n-            for (int i = 0; i < ownedRoles.size() && tree == null; i++) {\n-                String consoleLayoutInfo = ROLE_REST_CLIENT.readConsoleLayoutInfo(ownedRoles.get(i));\n-                if (StringUtils.isNotBlank(consoleLayoutInfo)) {\n-                    tree = MAPPER.readTree(consoleLayoutInfo);\n-                }\n-            }\n-            if (tree == null) {\n-                tree = MAPPER.createObjectNode();\n-            }\n-\n-            UserFormLayoutInfo userFormLayoutInfo = tree.has(AnyTypeKind.USER.name())\n-                    ? MAPPER.treeToValue(tree.get(AnyTypeKind.USER.name()), UserFormLayoutInfo.class)\n-                    : new UserFormLayoutInfo();\n-\n-            return userFormLayoutInfo;\n+            return MAPPER.readValue(content, UserFormLayoutInfo.class);\n         } catch (IOException e) {\n             throw new IllegalArgumentException(\"While parsing console layout info for \"\n                     + SyncopeEnduserSession.get().getSelfTO().getUsername(), e);"},{"sha":"477c1d169de7b212410a8369fcfc3b3fb36a9e2f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/layout/UserFormLayoutInfo.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FUserFormLayoutInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FUserFormLayoutInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FUserFormLayoutInfo.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -18,17 +18,37 @@\n  */\n package org.apache.syncope.client.enduser.layout;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.client.enduser.wizards.any.UserWizardBuilder;\n-import org.apache.syncope.client.ui.commons.layout.AbstractAnyFormLayout;\n+import org.apache.syncope.client.ui.commons.layout.AbstractAnyFormBaseLayout;\n import org.apache.syncope.client.ui.commons.layout.UserForm;\n import org.apache.syncope.common.lib.to.UserTO;\n \n-public class UserFormLayoutInfo extends AbstractAnyFormLayout<UserTO, UserForm> {\n+public class UserFormLayoutInfo extends AbstractAnyFormBaseLayout<UserTO, UserForm> {\n \n     private static final long serialVersionUID = -5573691733739618500L;\n \n+    private final Map<String, CustomizationOption> whichPlainAttrs = new HashMap<>();\n+\n+    private final Map<String, CustomizationOption> whichDerAttrs = new HashMap<>();\n+\n+    private final Map<String, CustomizationOption> whichVirAttrs = new HashMap<>();\n+\n     private boolean passwordManagement = true;\n \n+    public Map<String, CustomizationOption> getWhichPlainAttrs() {\n+        return whichPlainAttrs;\n+    }\n+\n+    public Map<String, CustomizationOption> getWhichDerAttrs() {\n+        return whichDerAttrs;\n+    }\n+\n+    public Map<String, CustomizationOption> getWhichVirAttrs() {\n+        return whichVirAttrs;\n+    }\n+\n     @Override\n     protected Class<? extends UserForm> getDefaultFormClass() {\n         return UserWizardBuilder.class;"},{"sha":"ca78a4d1fe8f83d4e7986e8aad5468cd5a7b0d98","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/Self.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -19,26 +19,33 @@\n package org.apache.syncope.client.enduser.pages;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.SyncopeWebApplication;\n+import org.apache.syncope.client.enduser.layout.FormLayoutInfoUtils;\n import org.apache.syncope.client.enduser.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.enduser.wizards.any.UserWizardBuilder;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.event.IEventSource;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n \n public class Self extends BaseEnduserWebPage implements IEventSource {\n \n     private static final long serialVersionUID = 164651008547631054L;\n \n+    @SpringBean\n+    private ConfParamOps confParamOps;\n+\n     private UserWizardBuilder userWizardBuilder;\n \n     protected static final ObjectMapper MAPPER = new ObjectMapper();\n@@ -88,11 +95,18 @@ protected void onBeforeRender() {\n     }\n \n     protected final AjaxWizard<AnyWrapper<UserTO>> buildWizard(final UserTO userTO, final AjaxWizard.Mode mode) {\n+        final String formLayoutConfParam = confParamOps.get(\n+                SyncopeEnduserSession.get().getDomain(),\n+                \"enduser.form.layout.info\",\n+                Constants.DEFAULT_USER_FORM_LAYOUT_INFO,\n+                String.class);\n         userWizardBuilder = new UserWizardBuilder(\n                 null,\n                 userTO,\n                 SyncopeEnduserSession.get().getService(SyncopeService.class).platform().getUserClasses(),\n-                new UserFormLayoutInfo(),\n+                StringUtils.isBlank(formLayoutConfParam)\n+                ? new UserFormLayoutInfo()\n+                : FormLayoutInfoUtils.fromJsonString(formLayoutConfParam),\n                 this.getPageReference());\n         userWizardBuilder.setItem(new UserWrapper(userTO));\n         return userWizardBuilder.build(WIZARD_ID, mode);"},{"sha":"3aa77a85889d8303a15ed9681843f52a56d1b5c1","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SyncopeRestClient.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n public class SyncopeRestClient extends BaseRestClient {\n@@ -37,4 +38,15 @@ public List<String> listAnyTypeClasses() {\n         }\n         return types;\n     }\n+\n+    public List<String> searchUserTypeExtensions(final String groupName) {\n+        List<String> types = Collections.emptyList();\n+        try {\n+            TypeExtensionTO typeExtensionTO = getService(SyncopeService.class).readUserTypeExtension(groupName);\n+            types = typeExtensionTO == null ? types : typeExtensionTO.getAuxClasses();\n+        } catch (SyncopeClientException e) {\n+            LOG.error(\"While reading all any type classes for group [{}]\", groupName, e);\n+        }\n+        return types;\n+    }\n }"},{"sha":"7e64f40928838cef6fcf676c43667f043c999733","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AbstractAttrs.java","status":"modified","additions":43,"deletions":21,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -26,14 +26,15 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.common.util.StringUtils;\n-import org.apache.syncope.client.enduser.rest.GroupRestClient;\n+import org.apache.syncope.client.enduser.layout.CustomizationOption;\n import org.apache.syncope.client.enduser.rest.SchemaRestClient;\n+import org.apache.syncope.client.enduser.rest.SyncopeRestClient;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n@@ -55,11 +56,11 @@\n \n     private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n \n-    private final GroupRestClient groupRestClient = new GroupRestClient();\n+    private final SyncopeRestClient syncopeRestClient = new SyncopeRestClient();\n \n     protected final AnyTO anyTO;\n \n-    private final List<String> whichAttrs;\n+    private final Map<String, CustomizationOption> whichAttrs;\n \n     protected final Map<String, S> schemas = new LinkedHashMap<>();\n \n@@ -74,7 +75,7 @@\n     public AbstractAttrs(\n             final AnyWrapper<?> modelObject,\n             final List<String> anyTypeClasses,\n-            final List<String> whichAttrs) {\n+            final Map<String, CustomizationOption> whichAttrs) {\n         super();\n         this.anyTypeClasses = anyTypeClasses;\n         this.attrs = new ListModel<>(Collections.<Attr>emptyList());\n@@ -103,7 +104,8 @@ private List<MembershipTO> loadMembershipAttrs() {\n \n             for (MembershipTO membership : (List<MembershipTO>) PropertyResolver.getPropertyField(\n                     \"memberships\", anyTO).get(anyTO)) {\n-                setSchemas(membership.getGroupKey(), getMembershipAuxClasses(membership, anyTO.getType()));\n+                setSchemas(Pair.of(membership.getGroupKey(), membership.getGroupName()), getMembershipAuxClasses(\n+                        membership, anyTO.getType()));\n                 setAttrs(membership);\n \n                 if (AbstractAttrs.this instanceof PlainAttrs && !membership.getPlainAttrs().isEmpty()) {\n@@ -121,29 +123,48 @@ private List<MembershipTO> loadMembershipAttrs() {\n         return memberships;\n     }\n \n-    protected boolean reoderSchemas() {\n+    protected boolean filterSchemas() {\n         return !whichAttrs.isEmpty();\n     }\n \n+    protected boolean renderAsReadonly(final String schema, final String groupName) {\n+        // whether to render the attribute as readonly or not, without considering schema readonly property\n+        String schemaName = (org.apache.commons.lang3.StringUtils.isBlank(groupName)\n+                ? org.apache.commons.lang3.StringUtils.EMPTY\n+                : groupName + \"#\")\n+                + schema;\n+        return whichAttrs.get(schemaName) == null ? false : whichAttrs.get(schemaName).isReadonly();\n+    }\n+\n+    protected List<String> getDefaultValues(final String schema, final String groupName) {\n+        String schemaName = (org.apache.commons.lang3.StringUtils.isBlank(groupName)\n+                ? org.apache.commons.lang3.StringUtils.EMPTY\n+                : groupName + \"#\")\n+                + schema;\n+        return whichAttrs.get(schemaName) == null\n+                ? Collections.<String>emptyList()\n+                : whichAttrs.get(schemaName).getDefaultValues();\n+    }\n+\n     protected abstract SchemaType getSchemaType();\n \n-    private void setSchemas(final String membership, final List<String> anyTypeClasses) {\n+    private void setSchemas(final Pair<String, String> membership, final List<String> anyTypeClasses) {\n         final Map<String, S> mscs;\n \n-        if (membershipSchemas.containsKey(membership)) {\n-            mscs = membershipSchemas.get(membership);\n+        if (membershipSchemas.containsKey(membership.getKey())) {\n+            mscs = membershipSchemas.get(membership.getKey());\n         } else {\n             mscs = new LinkedHashMap<>();\n-            membershipSchemas.put(membership, mscs);\n+            membershipSchemas.put(membership.getKey(), mscs);\n         }\n-        setSchemas(anyTypeClasses, mscs);\n+        setSchemas(anyTypeClasses, membership.getValue(), mscs);\n     }\n \n     private void setSchemas(final List<String> anyTypeClasses) {\n-        setSchemas(anyTypeClasses, schemas);\n+        setSchemas(anyTypeClasses, null, schemas);\n     }\n \n-    private void setSchemas(final List<String> anyTypeClasses, final Map<String, S> scs) {\n+    private void setSchemas(final List<String> anyTypeClasses, final String groupName, final Map<String, S> scs) {\n         final List<S> allSchemas;\n         if (anyTypeClasses.isEmpty()) {\n             allSchemas = Collections.emptyList();\n@@ -153,10 +174,12 @@ private void setSchemas(final List<String> anyTypeClasses, final Map<String, S>\n \n         scs.clear();\n \n-        if (reoderSchemas()) {\n+        if (filterSchemas()) {\n             // 1. remove attributes not selected for display\n             allSchemas.removeAll(allSchemas.stream().\n-                    filter(schemaTO -> !whichAttrs.contains(schemaTO.getKey())).collect(Collectors.toSet()));\n+                    filter(schemaTO -> org.apache.commons.lang3.StringUtils.isBlank(groupName)\n+                    ? !whichAttrs.containsKey(schemaTO.getKey())\n+                    : !whichAttrs.containsKey(groupName + \"#\" + schemaTO.getKey())).collect(Collectors.toSet()));\n         }\n \n         allSchemas.forEach(schemaTO -> {\n@@ -185,8 +208,7 @@ public void renderHead(final IHeaderResponse response) {\n \n     protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n         try {\n-            final GroupTO groupTO = groupRestClient.read(membershipTO.getGroupKey());\n-            return groupTO.getTypeExtension(anyType).get().getAuxClasses();\n+            return syncopeRestClient.searchUserTypeExtensions(membershipTO.getGroupName());\n         } catch (Exception e) {\n             return Collections.emptyList();\n         }\n@@ -216,9 +238,9 @@ public int compare(final Attr left, final Attr right) {\n             }\n             if (right == null || StringUtils.isEmpty(right.getSchema())) {\n                 return 1;\n-            } else if (AbstractAttrs.this.reoderSchemas()) {\n-                int leftIndex = AbstractAttrs.this.whichAttrs.indexOf(left.getSchema());\n-                int rightIndex = AbstractAttrs.this.whichAttrs.indexOf(right.getSchema());\n+            } else if (AbstractAttrs.this.filterSchemas()) {\n+                int leftIndex = new ArrayList<>(AbstractAttrs.this.whichAttrs.keySet()).indexOf(left.getSchema());\n+                int rightIndex = new ArrayList<>(AbstractAttrs.this.whichAttrs.keySet()).indexOf(right.getSchema());\n \n                 if (leftIndex > rightIndex) {\n                     return 1;"},{"sha":"ba07c048afc494bbe2554052e470e32386d7e649","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AnyWizardBuilder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -124,18 +124,16 @@ public PageReference getPageReference() {\n \n             });\n         }\n-        if (formLayoutInfo.isDerAttrs() && mode != AjaxWizard.Mode.TEMPLATE) {\n+        if (formLayoutInfo.isDerAttrs()) {\n             wizardModel.add(new DerAttrs(modelObject, anyTypeClasses, formLayoutInfo.getWhichDerAttrs()));\n         }\n         if (formLayoutInfo.isVirAttrs()) {\n             wizardModel.add(new VirAttrs(\n                     modelObject, mode, anyTypeClasses, formLayoutInfo.getWhichVirAttrs()));\n         }\n-\n         if (formLayoutInfo.isResources()) {\n             wizardModel.add(new Resources(modelObject));\n         }\n-\n         if (SyncopeWebApplication.get().isCaptchaEnabled()) {\n             // add captcha\n             captcha = new Captcha();"},{"sha":"fdd802efe471178fa56fb502a8d3f5cc6b32fa2d","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/DerAttrs.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FDerAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FDerAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FDerAttrs.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -27,6 +27,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.layout.CustomizationOption;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.EntityTOUtils;\n@@ -56,7 +57,7 @@ public class DerAttrs extends AbstractAttrs<DerSchemaTO> {\n     public <T extends AnyTO> DerAttrs(\n             final AnyWrapper<T> modelObject,\n             final List<String> anyTypeClasses,\n-            final List<String> whichDerAttrs) {\n+            final Map<String, CustomizationOption> whichDerAttrs) {\n \n         super(modelObject, anyTypeClasses, whichDerAttrs);\n         setTitleModel(new ResourceModel(\"attributes.derived\"));\n@@ -116,7 +117,7 @@ protected List<Attr> getAttrsFromTO(final MembershipTO membershipTO) {\n \n     @Override\n     protected void setAttrs() {\n-        List<Attr> attrs = new ArrayList<>();\n+        List<Attr> derAttrs = new ArrayList<>();\n \n         Map<String, Attr> attrMap = EntityTOUtils.buildAttrMap(anyTO.getDerAttrs());\n \n@@ -127,16 +128,16 @@ protected void setAttrs() {\n                 attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n \n-            attrs.add(attrTO);\n+            derAttrs.add(attrTO);\n         });\n \n         anyTO.getDerAttrs().clear();\n-        anyTO.getDerAttrs().addAll(attrs);\n+        anyTO.getDerAttrs().addAll(derAttrs);\n     }\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> attrs = new ArrayList<>();\n+        List<Attr> derAttrs = new ArrayList<>();\n \n         final Map<String, Attr> attrMap;\n         if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n@@ -153,11 +154,11 @@ protected void setAttrs(final MembershipTO membershipTO) {\n                 attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n             }\n \n-            attrs.add(attrTO);\n+            derAttrs.add(attrTO);\n         });\n \n         membershipTO.getDerAttrs().clear();\n-        membershipTO.getDerAttrs().addAll(attrs);\n+        membershipTO.getDerAttrs().addAll(derAttrs);\n     }\n \n     public class DerSchemas extends Schemas {"},{"sha":"d749fa24fd7fa7b1316284363f654eefd4aa69d6","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/PlainAttrs.java","status":"modified","additions":34,"deletions":46,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -25,17 +25,15 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n+import org.apache.syncope.client.enduser.layout.CustomizationOption;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateFieldPanel;\n import org.apache.syncope.client.enduser.markup.html.form.BinaryFieldPanel;\n import org.apache.syncope.client.enduser.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.EncryptedFieldPanel;\n import org.apache.syncope.client.ui.commons.SchemaUtils;\n-import org.apache.syncope.client.ui.commons.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.ui.commons.markup.html.form.AbstractFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDateTimeFieldPanel;\n@@ -87,7 +85,7 @@ public <T extends AnyTO> PlainAttrs(\n             final Form<?> form,\n             final AjaxWizard.Mode mode,\n             final List<String> anyTypeClasses,\n-            final List<String> whichPlainAttrs) throws IllegalArgumentException {\n+            final Map<String, CustomizationOption> whichPlainAttrs) throws IllegalArgumentException {\n \n         super(modelObject, anyTypeClasses, whichPlainAttrs);\n         this.mode = mode;\n@@ -138,6 +136,7 @@ protected void populateItem(final ListItem<MembershipTO> item) {\n                     public WebMarkupContainer getPanel(final String panelId) {\n                         return new PlainSchemas(\n                                 panelId,\n+                                membershipTO.getGroupName(),\n                                 membershipSchemas.get(membershipTO.getGroupKey()),\n                                 new ListModel<>(getAttrsFromTO(membershipTO)));\n                     }\n@@ -152,8 +151,8 @@ protected SchemaType getSchemaType() {\n     }\n \n     @Override\n-    protected boolean reoderSchemas() {\n-        return super.reoderSchemas() && mode != AjaxWizard.Mode.TEMPLATE;\n+    protected boolean filterSchemas() {\n+        return super.filterSchemas() && mode != AjaxWizard.Mode.TEMPLATE;\n     }\n \n     @Override\n@@ -189,7 +188,7 @@ protected void setAttrs() {\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> attrs = new ArrayList<>();\n+        List<Attr> plainAttrs = new ArrayList<>();\n \n         final Map<String, Attr> attrMap;\n         if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n@@ -199,7 +198,7 @@ protected void setAttrs(final MembershipTO membershipTO) {\n             attrMap = new HashMap<>();\n         }\n \n-        attrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().\n+        plainAttrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().\n                 map(schema -> {\n                     Attr attrTO = new Attr();\n                     attrTO.setSchema(schema.getKey());\n@@ -212,28 +211,20 @@ protected void setAttrs(final MembershipTO membershipTO) {\n                 }).collect(Collectors.toList()));\n \n         membershipTO.getPlainAttrs().clear();\n-        membershipTO.getPlainAttrs().addAll(attrs);\n+        membershipTO.getPlainAttrs().addAll(plainAttrs);\n     }\n \n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n-        final boolean required;\n-        final boolean readOnly;\n-        final AttrSchemaType type;\n-        final boolean jexlHelp;\n-\n-        if (mode == AjaxWizard.Mode.TEMPLATE) {\n-            required = false;\n-            readOnly = false;\n-            type = AttrSchemaType.String;\n-            jexlHelp = true;\n-        } else {\n-            required = schemaTO.getMandatoryCondition().equalsIgnoreCase(\"true\");\n-            readOnly = schemaTO.isReadonly();\n-            type = schemaTO.getType();\n-            jexlHelp = false;\n+        return getFieldPanel(schemaTO, null);\n+    }\n \n-        }\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    protected FieldPanel getFieldPanel(final PlainSchemaTO schemaTO, final String groupName) {\n+        final boolean required = schemaTO.getMandatoryCondition().equalsIgnoreCase(\"true\");\n+        final boolean readOnly = schemaTO.isReadonly() || renderAsReadonly(schemaTO.getKey(), groupName);\n+        final AttrSchemaType type = schemaTO.getType();\n+        final boolean jexlHelp = false;\n \n         FieldPanel panel;\n         switch (type) {\n@@ -387,6 +378,14 @@ public PlainSchemas(\n                 final String id,\n                 final Map<String, PlainSchemaTO> schemas,\n                 final IModel<List<Attr>> attrTOs) {\n+            this(id, null, schemas, attrTOs);\n+        }\n+\n+        public PlainSchemas(\n+                final String id,\n+                final String groupName,\n+                final Map<String, PlainSchemaTO> schemas,\n+                final IModel<List<Attr>> attrTOs) {\n             super(id);\n \n             add(new ListView<Attr>(\"schemas\", attrTOs) {\n@@ -398,37 +397,26 @@ public PlainSchemas(\n                 protected void populateItem(final ListItem<Attr> item) {\n                     Attr attrTO = item.getModelObject();\n \n+                    // set default values, if any\n+                    if (attrTO.getValues().stream().filter(value -> StringUtils.isNotBlank(value))\n+                            .collect(Collectors.toList()).isEmpty()) {\n+                        attrTO.getValues().clear();\n+                        attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema(), groupName));\n+                    }\n+\n                     AbstractFieldPanel<?> panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n-                    if (mode == AjaxWizard.Mode.TEMPLATE\n-                            || !schemas.get(attrTO.getSchema()).isMultivalue()) {\n-                        FieldPanel.class.cast(panel).setNewModel(attrTO.getValues());\n-                    } else {\n+                    if (schemas.get(attrTO.getSchema()).isMultivalue()) {\n                         panel = new MultiFieldPanel.Builder<>(\n                                 new PropertyModel<>(attrTO, \"values\")).build(\n                                 \"panel\",\n                                 attrTO.getSchema(),\n                                 FieldPanel.class.cast(panel));\n                         // SYNCOPE-1215 the entire multifield panel must be readonly, not only its field\n                         ((MultiFieldPanel) panel).setReadOnly(schemas.get(attrTO.getSchema()).isReadonly());\n+                    } else {\n+                        FieldPanel.class.cast(panel).setNewModel(attrTO.getValues());\n                     }\n                     item.add(panel);\n-\n-                    Optional<Attr> prevAttr = previousObject == null\n-                            ? Optional.empty()\n-                            : previousObject.getPlainAttr(attrTO.getSchema());\n-                    if (previousObject != null\n-                            && ((!prevAttr.isPresent() && attrTO.getValues().stream().anyMatch(StringUtils::isNotBlank))\n-                            || (prevAttr.isPresent() && !ListUtils.isEqualList(\n-                            prevAttr.get().getValues().stream().\n-                                    filter(StringUtils::isNotBlank).collect(Collectors.toList()),\n-                            attrTO.getValues().stream().\n-                                    filter(StringUtils::isNotBlank).collect(Collectors.toList()))))) {\n-\n-                        List<String> oldValues = prevAttr.isPresent()\n-                                ? prevAttr.get().getValues()\n-                                : Collections.<String>emptyList();\n-                        panel.showExternAction(new LabelInfo(\"externalAction\", oldValues));\n-                    }\n                 }\n             });\n         }"},{"sha":"4c465971c2d82a51ae47af6b6d866e096ff1abc4","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/VirAttrs.java","status":"modified","additions":31,"deletions":26,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e08e87814fed00b00a897ba1d7be53cdb68e3f11/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FVirAttrs.java?ref=e08e87814fed00b00a897ba1d7be53cdb68e3f11","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.wizards.any;\n \n-import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -28,8 +27,8 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n+import org.apache.syncope.client.enduser.layout.CustomizationOption;\n import org.apache.syncope.client.enduser.markup.html.form.MultiFieldPanel;\n-import org.apache.syncope.client.ui.commons.ajax.markup.html.LabelInfo;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.ui.commons.markup.html.form.AbstractFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n@@ -65,7 +64,7 @@ public <T extends AnyTO> VirAttrs(\n             final AnyWrapper<T> modelObject,\n             final AjaxWizard.Mode mode,\n             final List<String> anyTypeClasses,\n-            final List<String> whichVirAttrs) {\n+            final Map<String, CustomizationOption> whichVirAttrs) {\n \n         super(modelObject, anyTypeClasses, whichVirAttrs);\n         this.mode = mode;\n@@ -101,6 +100,7 @@ protected void populateItem(final ListItem<MembershipTO> item) {\n                             public WebMarkupContainer getPanel(final String panelId) {\n                                 return new VirAttrs.VirSchemas(\n                                         panelId,\n+                                        membershipTO.getGroupName(),\n                                         membershipSchemas.get(membershipTO.getGroupKey()),\n                                         new ListModel<>(getAttrsFromTO(membershipTO)));\n                             }\n@@ -126,11 +126,11 @@ protected List<Attr> getAttrsFromTO(final MembershipTO membershipTO) {\n \n     @Override\n     protected void setAttrs() {\n-        List<Attr> attrs = new ArrayList<>();\n+        List<Attr> virAttrs = new ArrayList<>();\n \n         Map<String, Attr> attrMap = EntityTOUtils.buildAttrMap(anyTO.getVirAttrs());\n \n-        attrs.addAll(schemas.values().stream().map(schema -> {\n+        virAttrs.addAll(schemas.values().stream().map(schema -> {\n             Attr attrTO = new Attr();\n             attrTO.setSchema(schema.getKey());\n             if (attrMap.containsKey(schema.getKey())) {\n@@ -142,12 +142,12 @@ protected void setAttrs() {\n         }).collect(Collectors.toList()));\n \n         anyTO.getVirAttrs().clear();\n-        anyTO.getVirAttrs().addAll(attrs);\n+        anyTO.getVirAttrs().addAll(virAttrs);\n     }\n \n     @Override\n     protected void setAttrs(final MembershipTO membershipTO) {\n-        List<Attr> attrs = new ArrayList<>();\n+        List<Attr> virAttrs = new ArrayList<>();\n \n         final Map<String, Attr> attrMap;\n         if (GroupableRelatableTO.class.cast(anyTO).getMembership(membershipTO.getGroupKey()).isPresent()) {\n@@ -157,7 +157,7 @@ protected void setAttrs(final MembershipTO membershipTO) {\n             attrMap = new HashMap<>();\n         }\n \n-        attrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n+        virAttrs.addAll(membershipSchemas.get(membershipTO.getGroupKey()).values().stream().map(schema -> {\n             Attr attrTO = new Attr();\n             attrTO.setSchema(schema.getKey());\n             if (attrMap.containsKey(schema.getKey())) {\n@@ -169,7 +169,7 @@ protected void setAttrs(final MembershipTO membershipTO) {\n         }).collect(Collectors.toList()));\n \n         membershipTO.getVirAttrs().clear();\n-        membershipTO.getVirAttrs().addAll(attrs);\n+        membershipTO.getVirAttrs().addAll(virAttrs);\n     }\n \n     public class VirSchemas extends Schemas {\n@@ -180,6 +180,14 @@ public VirSchemas(\n                 final String id,\n                 final Map<String, VirSchemaTO> schemas,\n                 final IModel<List<Attr>> attrTOs) {\n+            this(id, null, schemas, attrTOs);\n+        }\n+\n+        public VirSchemas(\n+                final String id,\n+                final String groupName,\n+                final Map<String, VirSchemaTO> schemas,\n+                final IModel<List<Attr>> attrTOs) {\n             super(id);\n \n             add(new ListView<Attr>(\"schemas\", attrTOs) {\n@@ -190,6 +198,14 @@ public VirSchemas(\n                 @SuppressWarnings(\"unchecked\")\n                 protected void populateItem(final ListItem<Attr> item) {\n                     Attr attrTO = item.getModelObject();\n+\n+                    // set default values, if any\n+                    if (attrTO.getValues().stream().filter(value -> StringUtils.isNotBlank(value))\n+                            .collect(Collectors.toList()).isEmpty()) {\n+                        attrTO.getValues().clear();\n+                        attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema(), groupName));\n+                    }\n+\n                     VirSchemaTO virSchemaTO = schemas.get(attrTO.getSchema());\n \n                     AbstractFieldPanel<?> panel = new AjaxTextFieldPanel(\n@@ -198,25 +214,14 @@ protected void populateItem(final ListItem<Attr> item) {\n                             new Model<>(),\n                             false);\n \n-                    if (mode == AjaxWizard.Mode.TEMPLATE) {\n-                        AjaxTextFieldPanel.class.cast(panel).enableJexlHelp().setEnabled(!virSchemaTO.isReadonly());\n-                    } else {\n-                        panel = new MultiFieldPanel.Builder<>(\n-                                new PropertyModel<List<String>>(attrTO, \"values\")).build(\n-                                \"panel\",\n-                                virSchemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n-                                AjaxTextFieldPanel.class.cast(panel));\n-                        panel.setEnabled(!virSchemaTO.isReadonly());\n-                    }\n+                    panel = new MultiFieldPanel.Builder<>(\n+                            new PropertyModel<List<String>>(attrTO, \"values\")).build(\n+                            \"panel\",\n+                            virSchemaTO.getLabel(SyncopeEnduserSession.get().getLocale()),\n+                            AjaxTextFieldPanel.class.cast(panel));\n+                    panel.setEnabled(!virSchemaTO.isReadonly() && !renderAsReadonly(attrTO.getSchema(), groupName));\n \n                     item.add(panel);\n-\n-                    if (!attrTO.getValues().isEmpty()\n-                            && VirAttrs.this.modelObject instanceof UserWrapper\n-                            && UserWrapper.class.cast(VirAttrs.this.modelObject).getPreviousUserTO() != null) {\n-\n-                        panel.showExternAction(new LabelInfo(\"externalAction\", StringUtils.EMPTY));\n-                    }\n                 }\n             });\n         }"}]}