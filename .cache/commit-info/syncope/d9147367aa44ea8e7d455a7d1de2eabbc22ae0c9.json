{"sha":"d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ5MTQ3MzY3YWE0NGVhOGU3ZDQ1NWE3ZDFkZTJlYWJiYzIyYWUwYzk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-15T16:47:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-15T16:47:47Z"},"message":"[SYNCOPE-1395] integration tests working","tree":{"sha":"4e25a142d31605cb8d2e08f8a68ee53e45ca0726","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4e25a142d31605cb8d2e08f8a68ee53e45ca0726"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2bf259faf23e7adcc5a1f0dc733cf7864aa917f6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2bf259faf23e7adcc5a1f0dc733cf7864aa917f6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2bf259faf23e7adcc5a1f0dc733cf7864aa917f6"}],"stats":{"total":1514,"additions":1115,"deletions":399},"files":[{"sha":"31719d05e7d9a5cfe0419ddc9c84e7f5dc2bd716","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -21,7 +21,6 @@\n import java.util.EnumSet;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n import javax.validation.ConstraintViolation;\n import javax.validation.ValidationException;\n@@ -45,8 +44,10 @@ public class InvalidEntityException extends ValidationException {\n      * @param entityViolationType type of violation found\n      * @param message message to be associated to the violation\n      */\n-    public InvalidEntityException(final Class<?> entityClass,\n-            final EntityViolationType entityViolationType, final String message) {\n+    public InvalidEntityException(\n+            final Class<?> entityClass,\n+            final EntityViolationType entityViolationType,\n+            final String message) {\n \n         super();\n \n@@ -64,14 +65,15 @@ public InvalidEntityException(final Class<?> entityClass,\n      * @param entityClassSimpleName simple class name of invalid entity\n      * @param violations as returned by bean validation\n      */\n-    public InvalidEntityException(final String entityClassSimpleName,\n+    public InvalidEntityException(\n+            final String entityClassSimpleName,\n             final Set<ConstraintViolation<Object>> violations) {\n \n         super();\n \n         this.entityClassSimpleName = entityClassSimpleName;\n \n-        violations.forEach((violation) -> {\n+        violations.forEach(violation -> {\n             int firstComma = violation.getMessageTemplate().indexOf(';');\n \n             final String key = violation.getMessageTemplate().substring(\n@@ -80,7 +82,6 @@ public InvalidEntityException(final String entityClassSimpleName,\n             final String message = violation.getMessageTemplate().substring(firstComma > 0 ? firstComma + 1 : 0);\n \n             EntityViolationType entityViolationType;\n-\n             try {\n                 entityViolationType = EntityViolationType.valueOf(key.trim());\n             } catch (IllegalArgumentException e) {\n@@ -115,9 +116,9 @@ public final Map<Class<?>, Set<EntityViolationType>> getViolations() {\n     public String getMessage() {\n         StringBuilder sb = new StringBuilder();\n \n-        for (Entry<Class<?>, Set<EntityViolationType>> entry : violations.entrySet()) {\n-            sb.append(entry.getKey().getSimpleName()).append(' ').append(entry.getValue().toString()).append(\", \");\n-        }\n+        violations.forEach((key, value) -> {\n+            sb.append(key.getSimpleName()).append(' ').append(value.toString()).append(\", \");\n+        });\n         sb.delete(sb.lastIndexOf(\", \"), sb.length());\n \n         return sb.toString();"},{"sha":"34426f5e32fc7462d436732361983b5714458804","filename":"core/persistence-jpa-pgjsonb/pom.xml","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fpom.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -187,18 +187,12 @@ under the License.\n             <configuration>\n               <images>\n                 <image>\n-                  <name>crunchydata/crunchy-postgres:centos7-10.5-2.1.0</name>\n+                  <name>postgres:${docker.postgresql.version}</name>\n                   <run>\n                     <env>\n-                      <PG_ROOT_PASSWORD>postgres</PG_ROOT_PASSWORD>\n-                      <PG_MODE>primary</PG_MODE>\n-                      <PG_PRIMARY_USER>postgres</PG_PRIMARY_USER>\n-                      <PG_PRIMARY_PASSWORD>postgres</PG_PRIMARY_PASSWORD>\n-                      <PG_PRIMARY_HOST>localhost</PG_PRIMARY_HOST>\n-                      <PG_PRIMARY_PORT>5432</PG_PRIMARY_PORT>\n-                      <PG_DATABASE>syncope</PG_DATABASE>\n-                      <PG_USER>syncope</PG_USER>\n-                      <PG_PASSWORD>syncope</PG_PASSWORD>\n+                      <POSTGRES_DB>syncope</POSTGRES_DB>\n+                      <POSTGRES_USER>syncope</POSTGRES_USER>\n+                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>\n                     </env>\n                     <ports>\n                       <port>5432:5432</port>"},{"sha":"f821f7f4b6526f806df38d179a4774e06a843edf","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAAnyObjectDAO.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAAnyObjectDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.springframework.transaction.annotation.Transactional;\n \n public class PGJPAAnyObjectDAO extends JPAAnyObjectDAO {\n \n@@ -37,12 +36,6 @@ private PGAnyDAO anyDAO() {\n         return anyDAO;\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public AnyObject find(final String key) {\n-        return entityManager().find(PGJPAAnyObject.class, key);\n-    }\n-\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<AnyObject> findByPlainAttrValue("},{"sha":"130d730d145cb6b5df4a85428ea4867b562963f4","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAConfDAO.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAConfDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+\n+public class PGJPAConfDAO extends JPAConfDAO {\n+\n+    /**\n+     * Marks the {@code plainAttrs} field as dirty, to force OpenJPA generating an update statement on the\n+     * SyncopeConf table - otherwise no update on the table itself would be generated when adding an attribute,\n+     * as the {@code plainAttrs} JSON field gets updated by the entity listener.\n+     */\n+    private void dirten() {\n+        PersistenceCapable pc = ImplHelper.toPersistenceCapable(get(), null);\n+        if (pc != null) {\n+            pc.pcGetStateManager().dirty(\"plainAttrs\");\n+        }\n+    }\n+\n+    @Override\n+    public Conf save(final CPlainAttr attr) {\n+        dirten();\n+        return super.save(attr);\n+    }\n+\n+    @Override\n+    public Conf delete(final String key) {\n+        dirten();\n+        return super.delete(key);\n+    }\n+}"},{"sha":"e69252a1238e121ed0833e721c210d8c6b7a01b5","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAGroupDAO.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAGroupDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -22,9 +22,8 @@\n import org.apache.syncope.core.persistence.api.dao.PGAnyDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.springframework.transaction.annotation.Transactional;\n \n public class PGJPAGroupDAO extends JPAGroupDAO {\n \n@@ -37,20 +36,14 @@ private PGAnyDAO anyDAO() {\n         return anyDAO;\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public Group find(final String key) {\n-        return entityManager().find(PGJPAGroup.class, key);\n-    }\n-\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<Group> findByPlainAttrValue(\n             final String schemaKey,\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n+        return anyDAO().findByPlainAttrValue(JPAGroup.TABLE, anyUtils(), schemaKey, attrValue, ignoreCaseMatch);\n     }\n \n     @Override\n@@ -59,7 +52,7 @@ public Group findByPlainAttrUniqueValue(\n             final PlainAttrValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrUniqueValue(PGJPAGroup.TABLE, anyUtils(),\n+        return anyDAO().findByPlainAttrUniqueValue(JPAGroup.TABLE, anyUtils(),\n                 schemaKey, attrUniqueValue, ignoreCaseMatch);\n     }\n \n@@ -70,12 +63,12 @@ public List<Group> findByDerAttrValue(\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByDerAttrValue(PGJPAGroup.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n+        return anyDAO().findByDerAttrValue(JPAGroup.TABLE, anyUtils(), schemaKey, value, ignoreCaseMatch);\n     }\n \n     @Override\n     public Group save(final Group group) {\n-        anyDAO().checkBeforeSave(PGJPAGroup.TABLE, anyUtils(), group);\n+        anyDAO().checkBeforeSave(JPAGroup.TABLE, anyUtils(), group);\n         return super.save(group);\n     }\n }"},{"sha":"c1d9c54385a456b8a156280e034247c50977dde4","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAPlainAttrValueDAO.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAPlainAttrValueDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -18,12 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import static org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO.getEntityReference;\n-\n-import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n \n@@ -32,13 +28,7 @@ public class PGJPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue> implemen\n     @Override\n     public void deleteAll(final PlainAttr<?> attr, final AnyUtils anyUtils) {\n         if (attr.getUniqueValue() == null) {\n-            attr.getValues().stream().map(Entity::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {\n-                PlainAttrValue attrValue = anyUtils.plainAttrValueClass().cast(\n-                        entityManager().find(getEntityReference(anyUtils.plainAttrValueClass()), attrValueKey));\n-                if (attrValue != null) {\n-                    attr.getValues().remove(attrValue);\n-                }\n-            });\n+            attr.getValues().clear();\n         } else {\n             attr.setUniqueValue(null);\n         }"},{"sha":"f1c420fa72de9f2b6cbaa37b8fd07f3c27854163","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAUserDAO.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAUserDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.springframework.transaction.annotation.Transactional;\n \n public class PGJPAUserDAO extends JPAUserDAO {\n \n@@ -39,12 +38,6 @@ private PGAnyDAO anyDAO() {\n         return anyDAO;\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public User find(final String key) {\n-        return entityManager().find(PGJPAUser.class, key);\n-    }\n-\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<User> findByPlainAttrValue("},{"sha":"2c4c4e46028b075317d77461ed63c16dad05f88f","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAEntityListener.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAEntityListener.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -27,7 +27,10 @@\n     protected abstract List<? extends PGPlainAttr<A>> getValues(String plainAttrsJSON);\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void read(final PGJPAAny<A> entity) {\n+    protected void json2list(final PGJPAAny<A> entity, final boolean clearFirst) {\n+        if (clearFirst) {\n+            entity.getPlainAttrList().clear();\n+        }\n         if (entity.getPlainAttrsJSON() != null) {\n             getValues(entity.getPlainAttrsJSON()).stream().filter(attr -> attr.getSchema() != null).\n                     map(attr -> {\n@@ -41,7 +44,7 @@ protected void read(final PGJPAAny<A> entity) {\n         }\n     }\n \n-    protected void save(final PGJPAAny<A> entity) {\n+    protected void list2json(final PGJPAAny<A> entity) {\n         entity.setPlainAttrsJSON(entity.getPlainAttrList().isEmpty()\n                 ? \"[{}]\"\n                 : POJOHelper.serialize(entity.getPlainAttrList()));"},{"sha":"d98c26a1eafd140a5d2c7edc188050ced9d9b005","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObject.java","status":"modified","additions":22,"deletions":5,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObject.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -20,12 +20,15 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.EntityListeners;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -78,20 +81,34 @@ public boolean add(final APlainAttr attr) {\n     public boolean remove(final APlainAttr attr) {\n         return plainAttrList.removeIf(pgattr\n                 -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n-                && attr.getOwner().getKey().equals(getKey())\n-                && attr.getMembership() == null\n-                ? true\n-                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));\n+                && Objects.equals(pgattr.getMembershipKey(), ((PGAPlainAttr) attr).getMembershipKey()));\n     }\n \n     @Override\n     protected List<? extends APlainAttr> internalGetPlainAttrs() {\n         return plainAttrList;\n     }\n \n+    @Override\n+    public Optional<? extends APlainAttr> getPlainAttr(final String plainSchema) {\n+        return plainAttrList.stream().\n+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n+                && pgattr.getMembershipKey() == null).\n+                findFirst();\n+    }\n+\n+    @Override\n+    public Optional<? extends APlainAttr> getPlainAttr(final String plainSchema, final Membership<?> membership) {\n+        return plainAttrList.stream().\n+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n+                && pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey())).\n+                findFirst();\n+    }\n+\n     @Override\n     public boolean remove(final AMembership membership) {\n-        plainAttrList.removeIf(attr -> attr.getMembership().getKey().equals(membership.getKey()));\n+        plainAttrList.removeIf(pgattr\n+                -> pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey()));\n         return super.remove(membership);\n     }\n }"},{"sha":"112a676b9e2455eb4989b05d1575e7d071588b8e","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/PGJPAAnyObjectListener.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObjectListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObjectListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FPGJPAAnyObjectListener.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.List;\n import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n import javax.persistence.PrePersist;\n import javax.persistence.PreUpdate;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -38,12 +40,18 @@ protected List<? extends PGPlainAttr<AnyObject>> getValues(final String plainAtt\n \n     @PostLoad\n     public void read(final PGJPAAnyObject anyObject) {\n-        super.read(anyObject);\n+        super.json2list(anyObject, false);\n     }\n \n     @PrePersist\n     @PreUpdate\n     public void save(final PGJPAAnyObject anyObject) {\n-        super.save(anyObject);\n+        super.list2json(anyObject);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void readAfterSave(final PGJPAAnyObject anyObject) {\n+        super.json2list(anyObject, true);\n     }\n }"},{"sha":"00ad5dbb17910265acf0aad2d2b8066532fa9983","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/PGJPAConfListener.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConfListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConfListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FPGJPAConfListener.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.List;\n import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n import javax.persistence.PrePersist;\n import javax.persistence.PreUpdate;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n@@ -38,12 +40,18 @@ protected List<? extends PGPlainAttr<Conf>> getValues(final String plainAttrsJSO\n \n     @PostLoad\n     public void read(final PGJPAConf conf) {\n-        super.read(conf);\n+        super.json2list(conf, false);\n     }\n \n     @PrePersist\n     @PreUpdate\n     public void save(final PGJPAConf conf) {\n-        super.save(conf);\n+        super.list2json(conf);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void readAfterSave(final PGJPAConf conf) {\n+        super.json2list(conf, true);\n     }\n }"},{"sha":"6f65a433bff1493e53c4726c10d30eecd766dc8b","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroup.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroup.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -75,9 +75,7 @@ public boolean add(final GPlainAttr attr) {\n \n     @Override\n     public boolean remove(final GPlainAttr attr) {\n-        return plainAttrList.removeIf(pgattr\n-                -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n-                && attr.getOwner().getKey().equals(getKey()));\n+        return plainAttrList.removeIf(pgattr -> pgattr.getSchemaKey().equals(attr.getSchema().getKey()));\n     }\n \n     @Override"},{"sha":"f8e190f6d1e18437680c060b7ba5edfa047a7712","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/PGJPAGroupListener.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroupListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroupListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FPGJPAGroupListener.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.List;\n import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n import javax.persistence.PrePersist;\n import javax.persistence.PreUpdate;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -38,12 +40,18 @@ protected List<? extends PGPlainAttr<Group>> getValues(final String plainAttrsJS\n \n     @PostLoad\n     public void read(final PGJPAGroup group) {\n-        super.read(group);\n+        super.json2list(group, false);\n     }\n \n     @PrePersist\n     @PreUpdate\n     public void save(final PGJPAGroup group) {\n-        super.save(group);\n+        super.list2json(group);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void readAfterSave(final PGJPAGroup group) {\n+        super.json2list(group, true);\n     }\n }"},{"sha":"b3c215d831cc56a1269948378a8e96f02233c8b1","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUser.java","status":"modified","additions":28,"deletions":4,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUser.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -20,12 +20,16 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.EntityListeners;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.PGPlainAttr;\n@@ -77,14 +81,34 @@ public boolean add(final UPlainAttr attr) {\n     public boolean remove(final UPlainAttr attr) {\n         return plainAttrList.removeIf(pgattr\n                 -> pgattr.getSchemaKey().equals(attr.getSchema().getKey())\n-                && attr.getOwner().getKey().equals(getKey())\n-                && attr.getMembership() == null\n-                ? true\n-                : pgattr.getMembership() != null && pgattr.getMembershipKey().equals(attr.getMembership().getKey()));\n+                && Objects.equals(pgattr.getMembershipKey(), ((PGUPlainAttr) attr).getMembershipKey()));\n     }\n \n     @Override\n     protected List<? extends UPlainAttr> internalGetPlainAttrs() {\n         return plainAttrList;\n     }\n+\n+    @Override\n+    public Optional<? extends UPlainAttr> getPlainAttr(final String plainSchema) {\n+        return plainAttrList.stream().\n+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n+                && pgattr.getMembershipKey() == null).\n+                findFirst();\n+    }\n+\n+    @Override\n+    public Optional<? extends UPlainAttr> getPlainAttr(final String plainSchema, final Membership<?> membership) {\n+        return plainAttrList.stream().\n+                filter(pgattr -> pgattr.getSchemaKey() != null && pgattr.getSchemaKey().equals(plainSchema)\n+                && pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey())).\n+                findFirst();\n+    }\n+\n+    @Override\n+    public boolean remove(final UMembership membership) {\n+        plainAttrList.removeIf(pgattr\n+                -> pgattr.getMembershipKey() != null && pgattr.getMembershipKey().equals(membership.getKey()));\n+        return super.remove(membership);\n+    }\n }"},{"sha":"7ab5d3220677b381d74365e5b6e0edb0863c4948","filename":"core/persistence-jpa-pgjsonb/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/PGJPAUserListener.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUserListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUserListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FPGJPAUserListener.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.List;\n import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n import javax.persistence.PrePersist;\n import javax.persistence.PreUpdate;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -38,12 +40,18 @@ protected List<? extends PGPlainAttr<User>> getValues(final String plainAttrsJSO\n \n     @PostLoad\n     public void read(final PGJPAUser user) {\n-        super.read(user);\n+        super.json2list(user, false);\n     }\n \n     @PrePersist\n     @PreUpdate\n     public void save(final PGJPAUser user) {\n-        super.save(user);\n+        super.list2json(user);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void readAfterSave(final PGJPAUser user) {\n+        super.json2list(user, true);\n     }\n }"},{"sha":"0118765501e08c7f79fe5c0b48106b02122d1524","filename":"core/persistence-jpa-pgjsonb/src/main/resources/META-INF/spring-orm-pgjsonb.xml","status":"modified","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -34,4 +34,68 @@ under the License.\n     </persistence-unit-defaults>\n   </persistence-unit-metadata>\n   \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+    <attributes>\n+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser\"/>\n+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>        \n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.PGJPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.PGJPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">\n+        <join-column name=\"left_anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.PGJPAAnyObject\">\n+        <join-column name=\"right_anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n </entity-mappings>"},{"sha":"a2995270b3895e37d63885187f36aa1866df267f","filename":"core/persistence-jpa-pgjsonb/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnyObjectDAO\n+conf.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"60834e6e174590879143f58bd99ace6e400d9c0e","filename":"core/persistence-jpa-pgjsonb/src/test/resources/domains/MasterContent.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-pgjsonb%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -18,8 +18,6 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <SyncopeDomain id=\"Two\" adminCipherAlgorithm=\"SHA\" adminPwd=\"2AA60A8FF7FCD473D321E0146AFD9E26DF395147\"/>  \n-  \n   <SyncopeSchema id=\"password.cipher.algorithm\"/>\n   <PlainSchema id=\"password.cipher.algorithm\" type=\"String\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"e09ff638adc28fb08a9c711168a50384131b5d26","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -26,7 +26,6 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import javax.persistence.Entity;\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n@@ -56,6 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -145,15 +145,17 @@ protected abstract <T extends Any<?>> List<T> doSearch(\n             AnyTypeKind kind);\n \n     protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, final AnyTypeKind kind) {\n-        AnyUtils attrUtils = anyUtilsFactory.getInstance(kind);\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n         PlainSchema schema = schemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             throw new IllegalArgumentException();\n         }\n \n-        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n+        PlainAttrValue attrValue = schema.isUniqueConstraint()\n+                ? anyUtils.newPlainAttrUniqueValue()\n+                : anyUtils.newPlainAttrValue();\n         try {\n             if (cond.getType() != AttributeCond.Type.LIKE\n                     && cond.getType() != AttributeCond.Type.ILIKE\n@@ -212,7 +214,7 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n         }\n \n         // Deal with any fields representing relationships to other entities\n-        if (anyField.getType().getAnnotation(Entity.class) != null) {\n+        if (Entity.class.isAssignableFrom(anyField.getType())) {\n             Method relMethod = null;\n             try {\n                 relMethod = ClassUtils.getPublicMethod(anyField.getType(), \"getKey\", new Class<?>[0]);\n@@ -310,7 +312,7 @@ protected <T extends Any<?>> List<T> buildResult(final List<Object> raw, final A\n         raw.stream().map(anyKey -> anyKey instanceof Object[]\n                 ? (String) ((Object[]) anyKey)[0]\n                 : ((String) anyKey)).\n-                forEachOrdered((actualKey) -> {\n+                forEachOrdered(actualKey -> {\n                     @SuppressWarnings(\"unchecked\")\n                     T any = kind == AnyTypeKind.USER\n                             ? (T) userDAO.find(actualKey)"},{"sha":"2bdb045d2373ed64ee5f8f85d954445c6bea9d11","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -26,10 +26,8 @@\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAConfDAO extends AbstractDAO<Conf> implements ConfDAO {\n \n     private static final String KEY = \"cd64d66f-6fff-4008-b966-a06b1cc1436d\";"},{"sha":"e86905ffbbe08b4891345760b9f2275acc94c01d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -362,6 +362,9 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 propagateSuspension |= policy.isPropagateSuspension();\n             }\n         } catch (Exception e) {\n+            if (e instanceof InvalidEntityException) {\n+                throw (InvalidEntityException) e;\n+            }\n             LOG.error(\"Invalid username for {}\", user, e);\n             throw new InvalidEntityException(User.class, EntityViolationType.InvalidUsername, e.getMessage());\n         }"},{"sha":"91fc4cb49b71a6c30809506fc95ed0cbaecdb28d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -20,7 +20,6 @@\n \n import javax.persistence.Entity;\n import javax.persistence.ManyToOne;\n-import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n@@ -38,8 +37,7 @@ public class JPAADynGroupMembership extends AbstractDynMembership<AnyObject> imp\n \n     public static final String TABLE = \"ADynGroupMembership\";\n \n-    @OneToOne\n-    private JPAGroup group;\n+    private Group group;\n \n     @ManyToOne\n     private JPAAnyType anyType;"},{"sha":"24992db5673d04f56f1a0d48ecc31f390951b88e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAMembership.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAMembership.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n-import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.MembershipType;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n@@ -38,13 +36,9 @@ public class JPAAMembership extends AbstractGeneratedKeyEntity implements AMembe\n \n     public static final String TABLE = \"AMembership\";\n \n-    @ManyToOne\n-    @Column(name = \"anyObject_id\")\n-    private JPAAnyObject leftEnd;\n+    private AnyObject leftEnd;\n \n-    @ManyToOne\n-    @Column(name = \"group_id\")\n-    private JPAGroup rightEnd;\n+    private Group rightEnd;\n \n     @Override\n     public MembershipType getType() {\n@@ -68,7 +62,7 @@ public void setLeftEnd(final AnyObject leftEnd) {\n     }\n \n     @Override\n-    public JPAGroup getRightEnd() {\n+    public Group getRightEnd() {\n         return rightEnd;\n     }\n "},{"sha":"c926a60af83283032a93897f66e5eaf61b0cd41b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAARelationship.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAARelationship.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n@@ -43,13 +42,9 @@ public class JPAARelationship extends AbstractGeneratedKeyEntity implements ARel\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPARelationshipType type;\n \n-    @ManyToOne\n-    @Column(name = \"left_anyObject_id\")\n-    private JPAAnyObject leftEnd;\n+    private AnyObject leftEnd;\n \n-    @ManyToOne\n-    @Column(name = \"right_anyObject_id\")\n-    private JPAAnyObject rightEnd;\n+    private AnyObject rightEnd;\n \n     @Override\n     public RelationshipType getType() {\n@@ -86,5 +81,4 @@ public void setRightEnd(final AnyObject rightEnd) {\n         checkType(rightEnd, JPAAnyObject.class);\n         this.rightEnd = (JPAAnyObject) rightEnd;\n     }\n-\n }"},{"sha":"7c6724ab96daaaa070782ad44f94ac0c4f941a2b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -29,7 +29,6 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n-import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n@@ -68,11 +67,9 @@ public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {\n     @NotNull\n     private String name;\n \n-    @ManyToOne\n-    private JPAUser userOwner;\n+    protected User userOwner;\n \n-    @ManyToOne\n-    private JPAGroup groupOwner;\n+    protected Group groupOwner;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n     @Valid\n@@ -145,7 +142,7 @@ public void setUserOwner(final User userOwner) {\n     }\n \n     @Override\n-    public JPAGroup getGroupOwner() {\n+    public Group getGroupOwner() {\n         return groupOwner;\n     }\n "},{"sha":"648436e0685152f166ac97df7aa4efbf9e856e0f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -45,8 +45,7 @@ public class JPATypeExtension extends AbstractGeneratedKeyEntity implements Type\n \n     public static final String TABLE = \"TypeExtension\";\n \n-    @ManyToOne\n-    private JPAGroup group;\n+    private Group group;\n \n     @ManyToOne\n     private JPAAnyType anyType;"},{"sha":"5e3a72879321b1758b8a4f07ce82edaaedc09a3f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n import javax.persistence.Entity;\n-import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n@@ -35,18 +34,16 @@ public class JPAUDynGroupMembership extends AbstractDynMembership<User> implemen\n \n     public static final String TABLE = \"UDynGroupMembership\";\n \n-    @OneToOne\n-    private JPAGroup group;\n+    private Group group;\n \n     @Override\n     public Group getGroup() {\n         return group;\n     }\n \n     @Override\n-    public void setGroup(final Group role) {\n-        checkType(role, JPAGroup.class);\n-        this.group = (JPAGroup) role;\n+    public void setGroup(final Group group) {\n+        checkType(group, JPAGroup.class);\n+        this.group = (JPAGroup) group;\n     }\n-\n }"},{"sha":"a9d39e9d6f377bd20fbb6524a70e1ffdb31e6325","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUMembership.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMembership.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n-import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.MembershipType;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n@@ -38,13 +36,9 @@ public class JPAUMembership extends AbstractGeneratedKeyEntity implements UMembe\n \n     public static final String TABLE = \"UMembership\";\n \n-    @ManyToOne\n-    @Column(name = \"user_id\")\n-    private JPAUser leftEnd;\n+    private User leftEnd;\n \n-    @ManyToOne\n-    @Column(name = \"group_id\")\n-    private JPAGroup rightEnd;\n+    private Group rightEnd;\n \n     @Override\n     public MembershipType getType() {\n@@ -57,7 +51,7 @@ public void setType(final RelationshipType type) {\n     }\n \n     @Override\n-    public JPAUser getLeftEnd() {\n+    public User getLeftEnd() {\n         return leftEnd;\n     }\n \n@@ -68,7 +62,7 @@ public void setLeftEnd(final User leftEnd) {\n     }\n \n     @Override\n-    public JPAGroup getRightEnd() {\n+    public Group getRightEnd() {\n         return rightEnd;\n     }\n "},{"sha":"38c5c7347aece41677815190140be827eeb6f200","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAURelationship.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAURelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAURelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAURelationship.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.user;\n \n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n@@ -45,13 +44,9 @@ public class JPAURelationship extends AbstractGeneratedKeyEntity implements URel\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPARelationshipType type;\n \n-    @ManyToOne\n-    @Column(name = \"user_id\")\n-    private JPAUser leftEnd;\n+    private User leftEnd;\n \n-    @ManyToOne\n-    @Column(name = \"anyObject_id\")\n-    private JPAAnyObject rightEnd;\n+    private AnyObject rightEnd;\n \n     @Override\n     public RelationshipType getType() {\n@@ -68,7 +63,7 @@ public void setType(final RelationshipType type) {\n     }\n \n     @Override\n-    public JPAUser getLeftEnd() {\n+    public User getLeftEnd() {\n         return leftEnd;\n     }\n \n@@ -88,5 +83,4 @@ public void setRightEnd(final AnyObject rightEnd) {\n         checkType(rightEnd, JPAAnyObject.class);\n         this.rightEnd = (JPAAnyObject) rightEnd;\n     }\n-\n }"},{"sha":"bfdc77a53f84b9fea355e71f485aeac54debcbd2","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -33,6 +33,71 @@ under the License.\n       </entity-listeners>\n     </persistence-unit-defaults>\n   </persistence-unit-metadata>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+    <attributes>\n+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\"/>\n+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>        \n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"left_anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"right_anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n   \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">\n     <table>"},{"sha":"5880423f38e99319a9d913b93c166736b8c48e80","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -34,6 +34,71 @@ under the License.\n     </persistence-unit-defaults>\n   </persistence-unit-metadata>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+    <attributes>\n+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\"/>\n+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>        \n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"left_anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"right_anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">\n     <table>\n       <unique-constraint>"},{"sha":"c4777735805b313bdf5e7177215280bcaadacba7","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -34,6 +34,71 @@ under the License.\n     </persistence-unit-defaults>\n   </persistence-unit-metadata>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+    <attributes>\n+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\"/>\n+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>        \n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"left_anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject\">\n+        <join-column name=\"right_anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue\">\n     <table>\n       <unique-constraint>"},{"sha":"1ce4a2b4f3ad246ab285793fc18d92f83418065d","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"577ab7853f8a50ed1f7f62321c8f3aaa1451613f","filename":"core/persistence-jpa/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -38,6 +38,7 @@ under the License.\n   <bean class=\"${user.dao}\"/>\n   <bean class=\"${group.dao}\"/>\n   <bean class=\"${anyObject.dao}\"/>\n+  <bean class=\"${conf.dao}\"/>\n \n   <bean class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"/>\n "},{"sha":"52b421ea41caaf36bdc0036227b7b34242eb475b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DomainTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDomainTest.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -39,6 +40,7 @@ public class DomainTest extends AbstractTest {\n     @Autowired\n     private DomainDAO domainDAO;\n \n+    @Tag(\"multitenancy\")\n     @Test\n     public void find() {\n         Domain two = domainDAO.find(\"Two\");\n@@ -48,14 +50,15 @@ public void find() {\n         assertNull(domainDAO.find(\"none\"));\n     }\n \n+    @Tag(\"multitenancy\")\n     @Test\n     public void findAll() {\n         List<Domain> list = domainDAO.findAll();\n         assertNotNull(list);\n         assertFalse(list.isEmpty());\n-        for (Domain domain : list) {\n+        list.forEach(domain -> {\n             assertNotNull(domain);\n-        }\n+        });\n     }\n \n     @Test"},{"sha":"e4ec82fa99f9c74cb86d9523d27e4f08a1143e1f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -468,6 +468,8 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             throw scce;\n         }\n \n+        // Re-merge any pending change from above\n+        anyObjectDAO.save(anyObject);\n         return propByRes;\n     }\n }"},{"sha":"fbe700d0f0d77da412e10b808cc108b8835e7521","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -86,7 +86,7 @@ private void fillAttr(final List<String> values,\n             }\n         }\n \n-        for (String value : valuesProvided) {\n+        valuesProvided.forEach(value -> {\n             if (value == null || value.isEmpty()) {\n                 LOG.debug(\"Null value for {}, ignoring\", schema.getKey());\n             } else {\n@@ -106,7 +106,7 @@ private void fillAttr(final List<String> values,\n                     invalidValues.getElements().add(schema.getKey() + \": \" + value + \" - \" + e.getMessage());\n                 }\n             }\n-        }\n+        });\n     }\n \n     @Override\n@@ -127,5 +127,4 @@ public CPlainAttr getAttr(final AttrTO attrTO) {\n             return attr;\n         }\n     }\n-\n }"},{"sha":"f18470a1b8831e4bca215c72c2449643ed7c5b9d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -305,6 +305,8 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n             throw scce;\n         }\n \n+        // Re-merge any pending change from above\n+        groupDAO.save(group);\n         return propByRes;\n     }\n "},{"sha":"3ff0f2eaae609c33da1c39314eaacab9a4cb21b5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -554,6 +554,8 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             throw scce;\n         }\n \n+        // Re-merge any pending change from above\n+        userDAO.save(user);\n         return propByRes;\n     }\n "},{"sha":"fc3c9e94b147ba66bcd30895ffcfd8b7590f9e84","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java","status":"modified","additions":52,"deletions":38,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -38,7 +38,9 @@\n import org.apache.commons.jexl3.JxltEngine;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -61,9 +63,9 @@ public final class JexlUtils {\n \n     private static final String[] IGNORE_FIELDS = { \"password\", \"clearPassword\", \"serialVersionUID\", \"class\" };\n \n-    private static final Map<Class<?>, Set<PropertyDescriptor>> FIELD_CACHE =\n-            Collections.<Class<?>, Set<PropertyDescriptor>>synchronizedMap(\n-                    new HashMap<Class<?>, Set<PropertyDescriptor>>());\n+    private static final Map<Class<?>, Set<Pair<PropertyDescriptor, Field>>> FIELD_CACHE =\n+            Collections.<Class<?>, Set<Pair<PropertyDescriptor, Field>>>synchronizedMap(\n+                    new HashMap<Class<?>, Set<Pair<PropertyDescriptor, Field>>>());\n \n     private static JexlEngine JEXL_ENGINE;\n \n@@ -122,38 +124,52 @@ public static String evaluate(final String expression, final JexlContext jexlCon\n     }\n \n     public static void addFieldsToContext(final Object object, final JexlContext jexlContext) {\n-        Set<PropertyDescriptor> cached = FIELD_CACHE.get(object.getClass());\n+        Set<Pair<PropertyDescriptor, Field>> cached = FIELD_CACHE.get(object.getClass());\n         if (cached == null) {\n-            cached = new HashSet<>();\n-            FIELD_CACHE.put(object.getClass(), cached);\n-\n-            try {\n-                for (PropertyDescriptor desc : Introspector.getBeanInfo(object.getClass()).getPropertyDescriptors()) {\n-                    if ((!desc.getName().startsWith(\"pc\"))\n-                            && (!ArrayUtils.contains(IGNORE_FIELDS, desc.getName()))\n-                            && (!Iterable.class.isAssignableFrom(desc.getPropertyType()))\n-                            && (!desc.getPropertyType().isArray())) {\n-\n-                        cached.add(desc);\n+            FIELD_CACHE.put(object.getClass(), new HashSet<>());\n+\n+            List<Class<?>> classes = ClassUtils.getAllSuperclasses(object.getClass());\n+            classes.add(object.getClass());\n+            classes.forEach(clazz -> {\n+                try {\n+                    for (PropertyDescriptor desc : Introspector.getBeanInfo(clazz).getPropertyDescriptors()) {\n+                        if (!desc.getName().startsWith(\"pc\")\n+                                && !ArrayUtils.contains(IGNORE_FIELDS, desc.getName())\n+                                && !Collection.class.isAssignableFrom(desc.getPropertyType())\n+                                && !Map.class.isAssignableFrom(desc.getPropertyType())\n+                                && !desc.getPropertyType().isArray()) {\n+\n+                            Field field = null;\n+                            try {\n+                                field = clazz.getDeclaredField(desc.getName());\n+                            } catch (NoSuchFieldException | SecurityException e) {\n+                                LOG.debug(\"Could not get field {} from {}\", desc.getName(), clazz.getName(), e);\n+                            }\n+\n+                            FIELD_CACHE.get(object.getClass()).add(Pair.of(desc, field));\n+                        }\n                     }\n+                } catch (IntrospectionException e) {\n+                    LOG.warn(\"Could not introspect {}\", clazz.getName(), e);\n                 }\n-            } catch (IntrospectionException ie) {\n-                LOG.error(\"Reading class attributes error\", ie);\n-            }\n+            });\n+\n+            cached = FIELD_CACHE.get(object.getClass());\n         }\n \n-        for (PropertyDescriptor desc : cached) {\n-            String fieldName = desc.getName();\n-            Class<?> fieldType = desc.getPropertyType();\n+        cached.forEach(fd -> {\n+            String fieldName = fd.getLeft().getName();\n+            Class<?> fieldType = fd.getLeft().getPropertyType();\n \n             try {\n-                Object fieldValue;\n-                if (desc.getReadMethod() == null) {\n-                    final Field field = object.getClass().getDeclaredField(fieldName);\n-                    field.setAccessible(true);\n-                    fieldValue = field.get(object);\n+                Object fieldValue = null;\n+                if (fd.getLeft().getReadMethod() == null) {\n+                    if (fd.getRight() != null) {\n+                        fd.getRight().setAccessible(true);\n+                        fieldValue = fd.getRight().get(object);\n+                    }\n                 } else {\n-                    fieldValue = desc.getReadMethod().invoke(object);\n+                    fieldValue = fd.getLeft().getReadMethod().invoke(object);\n                 }\n                 fieldValue = fieldValue == null\n                         ? StringUtils.EMPTY\n@@ -167,7 +183,7 @@ public static void addFieldsToContext(final Object object, final JexlContext jex\n             } catch (Exception iae) {\n                 LOG.error(\"Reading '{}' value error\", fieldName, iae);\n             }\n-        }\n+        });\n \n         if (object instanceof Any && ((Any<?>) object).getRealm() != null) {\n             jexlContext.set(\"realm\", ((Any<?>) object).getRealm().getFullPath());\n@@ -181,23 +197,21 @@ public static void addFieldsToContext(final Object object, final JexlContext jex\n     }\n \n     public static void addAttrTOsToContext(final Collection<AttrTO> attrs, final JexlContext jexlContext) {\n-        for (AttrTO attr : attrs) {\n-            if (attr.getSchema() != null) {\n-                String expressionValue = attr.getValues().isEmpty()\n-                        ? StringUtils.EMPTY\n-                        : attr.getValues().get(0);\n+        attrs.stream().filter(attr -> attr.getSchema() != null).forEach(attr -> {\n+            String expressionValue = attr.getValues().isEmpty()\n+                    ? StringUtils.EMPTY\n+                    : attr.getValues().get(0);\n \n-                LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), expressionValue);\n+            LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), expressionValue);\n \n-                jexlContext.set(attr.getSchema(), expressionValue);\n-            }\n-        }\n+            jexlContext.set(attr.getSchema(), expressionValue);\n+        });\n     }\n \n     public static void addPlainAttrsToContext(\n             final Collection<? extends PlainAttr<?>> attrs, final JexlContext jexlContext) {\n \n-        attrs.stream().filter(attr -> attr.getSchema() != null).forEachOrdered((attr) -> {\n+        attrs.stream().filter(attr -> attr.getSchema() != null).forEach(attr -> {\n             List<String> attrValues = attr.getValuesAsStrings();\n             String expressionValue = attrValues.isEmpty()\n                     ? StringUtils.EMPTY"},{"sha":"acf5c3bebefd63b69f5c9eea38638b2df95739de","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":24,"deletions":18,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.persistence.EntityExistsException;\n import javax.persistence.PersistenceException;\n import javax.persistence.RollbackException;\n@@ -75,13 +76,15 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {\n     @Autowired\n     private Environment env;\n \n+    private static final String UNIQUE_MSG_KEY = \"UniqueConstraintViolation\";\n+\n     private static final Map<String, String> EXCEPTION_CODE_MAP = new HashMap<String, String>() {\n \n         private static final long serialVersionUID = -7688359318035249200L;\n \n         {\n-            put(\"23000\", \"UniqueConstraintViolation\");\n-            put(\"23505\", \"UniqueConstraintViolation\");\n+            put(\"23000\", UNIQUE_MSG_KEY);\n+            put(\"23505\", UNIQUE_MSG_KEY);\n         }\n     };\n \n@@ -107,9 +110,9 @@ public Response toResponse(final Exception ex) {\n                 || ex instanceof PersistenceException && ex.getCause() instanceof EntityExistsException) {\n \n             builder = builder(ClientExceptionType.EntityExists,\n-                    getJPAMessage(ex instanceof PersistenceException ? ex.getCause() : ex));\n+                    getPersistenceErrorMessage(ex instanceof PersistenceException ? ex.getCause() : ex));\n         } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {\n-            builder = builder(ClientExceptionType.DataIntegrityViolation, getJPAMessage(ex));\n+            builder = builder(ClientExceptionType.DataIntegrityViolation, getPersistenceErrorMessage(ex));\n         } else if (ex instanceof ConnectorException) {\n             builder = builder(ClientExceptionType.ConnectorException, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof NotFoundException) {\n@@ -159,10 +162,10 @@ private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientExc\n         error.setStatus(ex.getType().getResponseStatus().getStatusCode());\n         error.setType(ex.getType());\n \n-        for (String element : ex.getElements()) {\n+        ex.getElements().forEach(element -> {\n             builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\n             error.getElements().add(element);\n-        }\n+        });\n \n         return builder.entity(error);\n     }\n@@ -175,20 +178,20 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n         ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n \n         List<ErrorTO> errors = new ArrayList<>();\n-        for (SyncopeClientException sce : ex.getExceptions()) {\n+        ex.getExceptions().stream().map(sce -> {\n             builder.header(RESTHeaders.ERROR_CODE, sce.getType().name());\n \n             ErrorTO error = new ErrorTO();\n             error.setStatus(sce.getType().getResponseStatus().getStatusCode());\n             error.setType(sce.getType());\n \n-            for (String element : sce.getElements()) {\n+            sce.getElements().forEach(element -> {\n                 builder.header(RESTHeaders.ERROR_INFO, sce.getType().getInfoHeaderValue(element));\n                 error.getElements().add(element);\n-            }\n+            });\n \n-            errors.add(error);\n-        }\n+            return error;\n+        }).collect(Collectors.toList());\n \n         return builder.entity(errors);\n     }\n@@ -292,25 +295,28 @@ private ResponseBuilder builder(final ClientExceptionType hType, final String ms\n     private ResponseBuilder builder(final Response response) {\n         ResponseBuilder builder = JAXRSUtils.toResponseBuilder(response.getStatus());\n         builder.entity(response.getEntity());\n-        for (Map.Entry<String, List<Object>> entry : response.getMetadata().entrySet()) {\n-            if (!HttpHeaders.CONTENT_TYPE.equals(entry.getKey())) {\n-                for (Object value : entry.getValue()) {\n-                    builder.header(entry.getKey(), value);\n-                }\n+        response.getMetadata().forEach((key, value) -> {\n+            if (!HttpHeaders.CONTENT_TYPE.equals(key)) {\n+                value.forEach(headerValue -> {\n+                    builder.header(key, headerValue);\n+                });\n             }\n-        }\n+        });\n \n         return builder;\n     }\n \n-    private String getJPAMessage(final Throwable ex) {\n+    private String getPersistenceErrorMessage(final Throwable ex) {\n         Throwable throwable = ExceptionUtils.getRootCause(ex);\n+\n         String message = null;\n         if (throwable instanceof SQLException) {\n             String messageKey = EXCEPTION_CODE_MAP.get(((SQLException) throwable).getSQLState());\n             if (messageKey != null) {\n                 message = env.getProperty(\"errMessage.\" + messageKey);\n             }\n+        } else if (throwable instanceof EntityExistsException || throwable instanceof DuplicateException) {\n+            message = env.getProperty(\"errMessage.\" + UNIQUE_MSG_KEY);\n         }\n \n         return message == null"},{"sha":"b4e2c81ec954a571d4088933172e209b6adcefe5","filename":"docker/core/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"8f9aa0c3c0b3a40c1f55453d2a5b222a548ec24e","filename":"docker/src/main/resources/docker-compose/docker-compose-ha.yml","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-ha.yml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -22,18 +22,12 @@ version: '3.3'\n \n services:\n    db:\n-     image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2\n+     image: postgres:latest\n      restart: always\n      environment:\n-       PG_ROOT_PASSWORD: postgres\n-       PG_MODE: primary\n-       PG_PRIMARY_USER: postgres\n-       PG_PRIMARY_PASSWORD: postgres\n-       PG_PRIMARY_HOST: localhost\n-       PG_PRIMARY_PORT: 5432\n-       PG_DATABASE: syncope\n-       PG_USER: syncope\n-       PG_PASSWORD: syncope\n+       POSTGRES_DB: syncope\n+       POSTGRES_USER: syncope\n+       POSTGRES_PASSWORD: syncope\n \n    syncope1:\n      depends_on:"},{"sha":"9eb7ba7a5ed184a60af4fb7da263879d10ec69af","filename":"docker/src/main/resources/docker-compose/docker-compose-postgresql.yml","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsrc%2Fmain%2Fresources%2Fdocker-compose%2Fdocker-compose-postgresql.yml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -21,18 +21,12 @@ version: '3.3'\n \n services:\n    db:\n-     image: crunchydata/crunchy-postgres:centos7-10.5-2.1.0\n+     image: postgres:latest\n      restart: always\n      environment:\n-       PG_ROOT_PASSWORD: postgres\n-       PG_MODE: primary\n-       PG_PRIMARY_USER: postgres\n-       PG_PRIMARY_PASSWORD: postgres\n-       PG_PRIMARY_HOST: localhost\n-       PG_PRIMARY_PORT: 5432\n-       PG_DATABASE: syncope\n-       PG_USER: syncope\n-       PG_PASSWORD: syncope\n+       POSTGRES_DB: syncope\n+       POSTGRES_USER: syncope\n+       POSTGRES_PASSWORD: syncope\n \n    syncope:\n      depends_on:"},{"sha":"dd4b730829ce889f21d6478498ff04464917e924","filename":"ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearc\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"b7399f1be5667186088702312847bd2dcd7727fd","filename":"fit/core-reference/pom.xml","status":"modified","additions":155,"deletions":10,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -590,6 +590,157 @@ under the License.\n       </build>\n     </profile>\n   \n+    <profile>\n+      <id>pgjsonb-it</id>\n+\n+      <properties>\n+        <jdbcdriver.groupId>org.postgresql</jdbcdriver.groupId>\n+        <jdbcdriver.artifactId>postgresql</jdbcdriver.artifactId>\n+      </properties>\n+\n+      <dependencies>\n+        <dependency>\n+          <groupId>org.apache.syncope.core</groupId>\n+          <artifactId>syncope-core-persistence-jpa-pgjsonb</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+    \n+        <dependency>\n+          <groupId>org.postgresql</groupId>\n+          <artifactId>postgresql</artifactId>\n+          <version>${jdbc.postgresql.version}</version>\n+          <scope>test</scope>\n+        </dependency>\n+      </dependencies>\n+\n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-war-plugin</artifactId>\n+            <configuration>\n+              <packagingExcludes>WEB-INF/classes/domains/Two*</packagingExcludes>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-antrun-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>remove-domain-Two</id>\n+                <phase>prepare-package</phase>\n+                <configuration>\n+                  <target>\n+                    <delete>\n+                      <fileset dir=\"${project.build.directory}/classes/domains\" includes=\"Two*\"/>\n+                    </delete>\n+                  </target>\n+                </configuration>\n+                <goals>\n+                  <goal>run</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <name>postgres:${docker.postgresql.version}</name>\n+                  <run>\n+                    <env>\n+                      <POSTGRES_DB>syncope</POSTGRES_DB>\n+                      <POSTGRES_USER>syncope</POSTGRES_USER>\n+                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>\n+                    </env>\n+                    <ports>\n+                      <port>5432:5432</port>\n+                    </ports>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>start-postgres</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-postgres</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                  <goal>remove</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven2-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>start-container</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-container</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+\n+        <resources>\n+          <resource>\n+            <directory>src/main/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>provisioning.properties</exclude>\n+              <exclude>indexes.xml</exclude>\n+              <exclude>views.xml</exclude>\n+            </excludes>\n+          </resource>\n+          <resource>\n+            <directory>src/main/resources/pgjsonb</directory>\n+            <filtering>true</filtering>\n+          </resource>\n+          <resource>\n+            <directory>${basedir}/../../core/persistence-jpa-pgjsonb/src/test/resources/domains</directory>\n+            <targetPath>${project.build.directory}/classes/domains</targetPath>\n+            <filtering>true</filtering>\n+          </resource>\n+        </resources>\n+        <testResources>\n+          <testResource>\n+            <directory>src/main/resources/pgjsonb</directory>\n+            <includes>\n+              <include>indexes.xml</include>\n+              <include>views.xml</include>\n+            </includes>            \n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n+\n     <profile>\n       <id>postgres-it</id>\n \n@@ -617,18 +768,12 @@ under the License.\n             <configuration>\n               <images>\n                 <image>\n-                  <name>crunchydata/crunchy-postgres:centos7-10.5-2.1.0</name>\n+                  <name>postgres:${docker.postgresql.version}</name>\n                   <run>\n                     <env>\n-                      <PG_ROOT_PASSWORD>postgres</PG_ROOT_PASSWORD>\n-                      <PG_MODE>primary</PG_MODE>\n-                      <PG_PRIMARY_USER>postgres</PG_PRIMARY_USER>\n-                      <PG_PRIMARY_PASSWORD>postgres</PG_PRIMARY_PASSWORD>\n-                      <PG_PRIMARY_HOST>localhost</PG_PRIMARY_HOST>\n-                      <PG_PRIMARY_PORT>5432</PG_PRIMARY_PORT>\n-                      <PG_DATABASE>syncope</PG_DATABASE>\n-                      <PG_USER>syncope</PG_USER>\n-                      <PG_PASSWORD>syncope</PG_PASSWORD>\n+                      <POSTGRES_DB>syncope</POSTGRES_DB>\n+                      <POSTGRES_USER>syncope</POSTGRES_USER>\n+                      <POSTGRES_PASSWORD>syncope</POSTGRES_PASSWORD>\n                     </env>\n                     <ports>\n                       <port>5432:5432</port>"},{"sha":"dd4b730829ce889f21d6478498ff04464917e924","filename":"fit/core-reference/src/main/resources/elasticsearch/persistence.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -23,4 +23,5 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearc\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n+conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"d9a648fb99030c7cab7bbaa2ef29d62bfa9e659b","filename":"fit/core-reference/src/main/resources/pgjsonb/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fdomains%2FMaster.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=org.postgresql.Driver\n+Master.url=jdbc:postgresql://localhost:5432/syncope?stringtype=unspecified\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\n+Master.orm=META-INF/spring-orm-pgjsonb.xml\n+\n+Master.pool.maxActive=10\n+Master.pool.minIdle=2\n+\n+Master.audit.sql=audit.sql"},{"sha":"3e5b92b8320deda3bb5884cbc32d161aafc39678","filename":"fit/core-reference/src/main/resources/pgjsonb/indexes.xml","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Findexes.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  <comment>Additional indexes (in respect to JPA's)</comment>\n+\n+  <entry key=\"SyncopeUser_plainAttrs_idx\">CREATE INDEX SyncopeUser_plainAttrs_idx ON SyncopeUser USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+  <entry key=\"SyncopeGroup_plainAttrs_idx\">CREATE INDEX SyncopeGroup_plainAttrs_idx ON SyncopeGroup USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+  <entry key=\"AnyObject_plainAttrs_idx\">CREATE INDEX AnyObject_plainAttrs_idx ON AnyObject USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+  <entry key=\"SyncopeConf_plainAttrs_idx\">CREATE INDEX SyncopeConf_plainAttrs_idx ON SyncopeConf USING gin ((plainAttrs) jsonb_path_ops)</entry>\n+\n+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>\n+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>\n+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>\n+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>\n+\n+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>\n+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>\n+\n+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>\n+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>\n+\n+  <entry key=\"CPlainAttrValue_stringvalueIndex\">CREATE INDEX CAttrValue_stringvalueIndex ON CPlainAttrValue(stringvalue)</entry>\n+  <entry key=\"CPlainAttrValue_datevalueIndex\">CREATE INDEX CAttrValue_datevalueIndex ON CPlainAttrValue(datevalue)</entry>\n+  <entry key=\"CPlainAttrValue_longvalueIndex\">CREATE INDEX CAttrValue_longvalueIndex ON CPlainAttrValue(longvalue)</entry>\n+  <entry key=\"CPlainAttrValue_doublevalueIndex\">CREATE INDEX CAttrValue_doublevalueIndex ON CPlainAttrValue(doublevalue)</entry>\n+  <entry key=\"CPlainAttrValue_booleanvalueIndex\">CREATE INDEX CAttrValue_booleanvalueIndex ON CPlainAttrValue(booleanvalue)</entry>\n+\n+  <entry key=\"UMembership_GroupIndex\">CREATE INDEX UMembership_GroupIndex ON UMembership(group_id)</entry>\n+  <entry key=\"UMembership_UserIndex\">CREATE INDEX UMembership_UserIndex ON UMembership(user_id)</entry>\n+  <entry key=\"AMembership_GroupIndex\">CREATE INDEX AMembership_GroupIndex ON AMembership(group_id)</entry>\n+  <entry key=\"AMembership_AnyObjectIndex\">CREATE INDEX AMembership_AnyObjectIndex ON AMembership(anyObject_id)</entry>\n+\n+  <entry key=\"URelationship_RightIndex\">CREATE INDEX URelationship_RightIndex ON URelationship(anyObject_id)</entry>\n+  <entry key=\"URelationship_LeftIndex\">CREATE INDEX URelationship_LeftIndex ON URelationship(user_id)</entry>\n+  <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>\n+  <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>\n+\n+  <entry key=\"CPlainAttrValue_attrIndex\">CREATE INDEX CPlainAttrValue_attrIndex on CPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"CPAttrUniqueValue_attrIndex\">CREATE INDEX CPAttrUniqueValue_attrIndex on CPlainAttrUniqueValue(attribute_id)</entry>\n+\n+  <entry key=\"CPlainAttr_owner_Index\">CREATE INDEX CPlainAttr_owner_Index on CPlainAttr(owner_id)</entry>\n+  <entry key=\"CPlainAttr_schema_Index\">CREATE INDEX CPlainAttr_schema_Index on CPlainAttr(schema_id)</entry>\n+\n+  <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>\n+</properties>"},{"sha":"a2995270b3895e37d63885187f36aa1866df267f","filename":"fit/core-reference/src/main/resources/pgjsonb/persistence.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -0,0 +1,27 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+content.directory=${conf.directory}\n+entity.factory=org.apache.syncope.core.persistence.jpa.entity.PGJPAEntityFactory\n+plainSchema.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainSchemaDAO\n+plainAttr.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrDAO\n+plainAttrValue.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAPlainAttrValueDAO\n+any.search.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnySearchDAO\n+user.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAUserDAO\n+group.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAGroupDAO\n+anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAAnyObjectDAO\n+conf.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAConfDAO\n+openjpa.RemoteCommitProvider=sjvm"},{"sha":"378e75e614a94509e38bff551647b54f050ed24e","filename":"fit/core-reference/src/main/resources/pgjsonb/provisioning.properties","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fprovisioning.properties?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -0,0 +1,32 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+asyncConnectorFacadeExecutor.poolSize=10\n+\n+# see http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-task-namespace-executor\n+propagationTaskExecutorAsyncExecutor.poolSize=5-25\n+propagationTaskExecutorAsyncExecutor.queueCapacity=100\n+propagationTaskExecutor=org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor\n+\n+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n+quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n+quartz.sql=tables_postgres.sql\n+quartz.scheduler.idleWaitTime=5000\n+quartz.disableInstance=false"},{"sha":"eb450bef723821f0c0549b32702d5b95c7068e28","filename":"fit/core-reference/src/main/resources/pgjsonb/views.xml","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fviews.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -0,0 +1,154 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  \n+  <entry key=\"UDynGroupMembers\">\n+    CREATE TABLE UDynGroupMembers(\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(any_id, group_id))\n+  </entry>\n+  <entry key=\"ADynGroupMembers\">\n+    CREATE TABLE ADynGroupMembers(\n+    anyType_id VARCHAR(255),\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(anyType_id, any_id, group_id))\n+  </entry>\n+  <entry key=\"DynRoleMembers\">\n+    CREATE TABLE DynRoleMembers(\n+    any_id CHAR(36),\n+    role_id VARCHAR(255),\n+    UNIQUE(any_id, role_id))\n+  </entry>\n+  <entry key=\"DynRealmMembers\">\n+    CREATE TABLE DynRealmMembers(\n+    any_id CHAR(36),\n+    dynRealm_id VARCHAR(255),\n+    UNIQUE(any_id, dynRealm_id))\n+  </entry>\n+\n+  <!-- user -->\n+  <entry key=\"user_search\">\n+    CREATE VIEW user_search AS\n+\n+    SELECT u.id as any_id, u.*,attrs,attrValues\n+    FROM SyncopeUser u, jsonb_array_elements(COALESCE(u.plainAttrs, '[{}]'::jsonb)) attrs,\n+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues\n+  </entry>\n+  <entry key=\"user_search_urelationship\">\n+    CREATE VIEW user_search_urelationship AS\n+\n+    SELECT m.user_id AS any_id, m.anyObject_id AS right_any_id, m.type_id AS type\n+    FROM URelationship m\n+  </entry>\n+  <entry key=\"user_search_umembership\">\n+    CREATE VIEW user_search_umembership AS\n+\n+    SELECT m.user_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM UMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"user_search_role\">\n+    CREATE VIEW user_search_role AS\n+\n+    SELECT ss.user_id AS any_id, ss.role_id AS role_id\n+    FROM SyncopeUser_SyncopeRole ss\n+  </entry>\n+  <entry key=\"user_search_priv\">\n+    CREATE VIEW user_search_priv AS\n+\n+    SELECT ss.user_id AS any_id, sp.privilege_id AS privilege_id\n+    FROM SyncopeUser_SyncopeRole ss, SyncopeRole_Privilege sp\n+    WHERE ss.role_id = sp.role_id\n+  </entry>\n+  <entry key=\"user_search_dynpriv\">\n+    CREATE VIEW user_search_dynpriv AS\n+\n+    SELECT any_id, privilege_id\n+    FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n+    WHERE drm.role_id = rp.role_id\n+  </entry>\n+  <entry key=\"user_search_resource\">\n+    CREATE VIEW user_search_resource AS\n+\n+    SELECT st.user_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeUser_ExternalResource st\n+  </entry>\n+  <entry key=\"user_search_group_res\">\n+    CREATE VIEW user_search_group_res AS\n+\n+    SELECT m.user_id AS any_id, st.resource_id AS resource_id\n+    FROM UMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- anyObject -->\n+  <entry key=\"anyObject_search\">\n+    CREATE VIEW anyObject_search AS\n+\n+    SELECT a.id as any_id, a.*,attrs,attrValues\n+    FROM AnyObject a, jsonb_array_elements(COALESCE(a.plainAttrs, '[{}]'::jsonb)) attrs,\n+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues\n+  </entry>\n+  <entry key=\"anyObject_search_arelationship\">\n+    CREATE VIEW anyObject_search_arelationship AS\n+\n+    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_any_id, m.type_id AS type\n+    FROM ARelationship m\n+  </entry>\n+  <entry key=\"anyObject_search_amembership\">\n+    CREATE VIEW anyObject_search_amembership AS\n+\n+    SELECT m.anyObject_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM AMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"anyObject_search_resource\">\n+    CREATE VIEW anyObject_search_resource AS\n+\n+    SELECT st.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AnyObject_ExternalResource st\n+  </entry>\n+  <entry key=\"anyObject_search_group_res\">\n+    CREATE VIEW anyObject_search_group_res AS\n+\n+    SELECT m.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- group -->\n+  <entry key=\"group_search\">\n+    CREATE VIEW group_search AS\n+\n+    SELECT g.id as any_id, g.*,attrs,attrValues\n+    FROM SyncopeGroup g, jsonb_array_elements(COALESCE(g.plainAttrs, '[{}]'::jsonb)) attrs,\n+    jsonb_array_elements(COALESCE(attrs -> 'values', '[{}]'::jsonb)) attrValues\n+  </entry>\n+  <entry key=\"group_search_resource\">\n+    CREATE VIEW group_search_resource AS\n+\n+    SELECT st.group_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeGroup_ExternalResource st\n+  </entry>\n+\n+</properties>"},{"sha":"8ac78718ad00819b5671616efeb6c1a9fc0d39e2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/CamelDetector.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bf259faf23e7adcc5a1f0dc733cf7864aa917f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FCamelDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bf259faf23e7adcc5a1f0dc733cf7864aa917f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FCamelDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FCamelDetector.java?ref=2bf259faf23e7adcc5a1f0dc733cf7864aa917f6","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n-\n-public class CamelDetector {\n-\n-    public static boolean isCamelEnabledForUsers(final SyncopeService syncopeService) {\n-        return syncopeService.platform().getUserProvisioningManager().contains(\"Camel\");\n-    }\n-\n-    public static boolean isCamelEnabledForGroups(final SyncopeService syncopeService) {\n-        return syncopeService.platform().getGroupProvisioningManager().contains(\"Camel\");\n-    }\n-\n-    public static boolean isCamelEnabledForAnyObjects(final SyncopeService syncopeService) {\n-        return syncopeService.platform().getAnyObjectProvisioningManager().contains(\"Camel\");\n-    }\n-}"},{"sha":"265e292410c43948fd41df4483e1c91b4e7f0c90","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/SCIMDetector.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2bf259faf23e7adcc5a1f0dc733cf7864aa917f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSCIMDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2bf259faf23e7adcc5a1f0dc733cf7864aa917f6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSCIMDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSCIMDetector.java?ref=2bf259faf23e7adcc5a1f0dc733cf7864aa917f6","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit;\n-\n-import javax.ws.rs.core.Response;\n-import org.apache.cxf.jaxrs.client.WebClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class SCIMDetector {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SCIMDetector.class);\n-\n-    private static Boolean ENABLED;\n-\n-    public static boolean isSCIMAvailable(final WebClient webClient) {\n-        synchronized (LOG) {\n-            if (ENABLED == null) {\n-                try {\n-                    Response response = webClient.path(\"ServiceProviderConfig\").get();\n-                    ENABLED = response.getStatus() == 200;\n-                } catch (Exception e) {\n-                    // ignore\n-                    ENABLED = false;\n-                }\n-            }\n-        }\n-        return ENABLED;\n-    }\n-}"},{"sha":"bc9711a57891a172d51dc757907933708a26f169","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BpmnProcessITCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class BpmnProcessITCase extends AbstractITCase {\n@@ -49,9 +50,13 @@ public static void findDefault() {\n         assertNotNull(userWorkflowKey);\n     }\n \n+    @BeforeEach\n+    public void check() {\n+        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n+    }\n+\n     @Test\n     public void exportUserWorkflowProcess() throws IOException {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n         Response response = bpmnProcessService.get(userWorkflowKey);\n         assertTrue(response.getMediaType().toString().\n                 startsWith(clientFactory.getContentType().getMediaType().toString()));\n@@ -63,7 +68,6 @@ public void exportUserWorkflowProcess() throws IOException {\n \n     @Test\n     public void updateUserWorkflowProcess() throws IOException {\n-        assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n         Response response = bpmnProcessService.get(userWorkflowKey);\n         String definition = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n "},{"sha":"eb5a3a70335857b5ebc88e05e985afd3b394a07b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CamelRouteITCase.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCamelRouteITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import org.apache.syncope.fit.CamelDetector;\n-\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n@@ -35,14 +33,18 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class CamelRouteITCase extends AbstractITCase {\n \n+    @BeforeEach\n+    public void check() {\n+        assumeTrue(syncopeService.platform().getUserProvisioningManager().contains(\"Camel\"));\n+    }\n+\n     @Test\n     public void userRoutes() {\n-        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n-\n         List<CamelRouteTO> userRoutes = camelRouteService.list(AnyTypeKind.USER);\n         assertNotNull(userRoutes);\n         assertEquals(16, userRoutes.size());\n@@ -51,8 +53,6 @@ public void userRoutes() {\n \n     @Test\n     public void groupRoutes() {\n-        assumeTrue(CamelDetector.isCamelEnabledForGroups(syncopeService));\n-\n         List<CamelRouteTO> groupRoutes = camelRouteService.list(AnyTypeKind.GROUP);\n         assertNotNull(groupRoutes);\n         assertEquals(8, groupRoutes.size());\n@@ -69,8 +69,6 @@ private CamelRouteTO doUpdate(final AnyTypeKind anyTypeKind, final String key, f\n \n     @Test\n     public void update() {\n-        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n-\n         CamelRouteTO oldRoute = camelRouteService.read(AnyTypeKind.USER, \"createUser\");\n         assertNotNull(oldRoute);\n         String routeContent = \"<route id=\\\"createUser\\\">\\n\"\n@@ -103,8 +101,6 @@ public void update() {\n \n     @Test\n     public void scriptingUpdate() {\n-        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n-\n         CamelRouteTO oldRoute = camelRouteService.read(AnyTypeKind.USER, \"createUser\");\n         // updating route content including new attribute management\n \n@@ -169,8 +165,6 @@ public void scriptingUpdate() {\n \n     @Test\n     public void issueSYNCOPE931() {\n-        assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n-\n         CamelRouteTO oldRoute = camelRouteService.read(AnyTypeKind.USER, \"createUser\");\n         assertNotNull(oldRoute);\n         String routeContent = \"<route id=\\\"createUser\\\">\\n\"\n@@ -211,5 +205,4 @@ public void issueSYNCOPE931() {\n             doUpdate(AnyTypeKind.USER, oldRoute.getKey(), oldRoute.getContent());\n         }\n     }\n-\n }"},{"sha":"096e37bd29ee1fc7abce5b133808f3c940ec1e4b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DomainITCase.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDomainITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n \n import java.security.AccessControlException;\n import java.util.List;\n@@ -37,12 +38,14 @@ public class DomainITCase extends AbstractITCase {\n \n     @Test\n     public void list() {\n+        assumeFalse(domainService.list().isEmpty());\n+\n         List<DomainTO> domains = domainService.list();\n         assertNotNull(domains);\n         assertFalse(domains.isEmpty());\n-        for (DomainTO domain : domains) {\n+        domains.forEach(domain -> {\n             assertNotNull(domain);\n-        }\n+        });\n     }\n \n     @Test\n@@ -70,6 +73,8 @@ private void restoreTwo() {\n \n     @Test\n     public void update() {\n+        assumeFalse(domainService.list().isEmpty());\n+\n         DomainTO two = domainService.read(\"Two\");\n         assertNotNull(two);\n \n@@ -99,6 +104,8 @@ public void update() {\n \n     @Test\n     public void delete() {\n+        assumeFalse(domainService.list().isEmpty());\n+\n         DomainTO two = domainService.read(\"Two\");\n         assertNotNull(two);\n "},{"sha":"de39e53e36d50e9f8a42303462b59991b73f7211","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -249,20 +249,20 @@ public void patch() {\n                 \"PRINTER\",\n                 \"(($groups==7;cool==ss);$resources==ws-target-resource-2);$type==PRINTER\");\n \n-        GroupTO updated = createGroup(original).getEntity();\n+        GroupTO created = createGroup(original).getEntity();\n \n-        updated.getPlainAttrs().add(new AttrTO.Builder().schema(\"icon\").build());\n-        updated.getPlainAttrs().add(new AttrTO.Builder().schema(\"show\").build());\n-        updated.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_sx\").value(\"sx\").build());\n-        updated.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_dx\").value(\"dx\").build());\n-        updated.getPlainAttrs().add(new AttrTO.Builder().schema(\"title\").value(\"mr\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"icon\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"show\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_sx\").value(\"sx\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_dx\").value(\"dx\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"title\").value(\"mr\").build());\n \n-        original = groupService.read(updated.getKey());\n+        original = groupService.read(created.getKey());\n \n-        GroupPatch patch = AnyOperations.diff(updated, original, true);\n-        GroupTO group = updateGroup(patch).getEntity();\n+        GroupPatch patch = AnyOperations.diff(created, original, true);\n+        GroupTO updated = updateGroup(patch).getEntity();\n \n-        Map<String, AttrTO> attrs = EntityTOUtils.buildAttrMap(group.getPlainAttrs());\n+        Map<String, AttrTO> attrs = EntityTOUtils.buildAttrMap(updated.getPlainAttrs());\n         assertFalse(attrs.containsKey(\"icon\"));\n         assertFalse(attrs.containsKey(\"show\"));\n         assertEquals(Collections.singletonList(\"sx\"), attrs.get(\"rderived_sx\").getValues());"},{"sha":"9725be1828e72a46178812330a5634c60f5e37e9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -153,7 +153,8 @@ public void misc() {\n             assertTrue(user.getMemberships().isEmpty());\n         } finally {\n             if (user.getKey() != null) {\n-                userService.delete(user.getKey());\n+                System.out.println(\"ZZZZZZZZZZZZZZZZZ \" + user.getKey());\n+//                userService.delete(user.getKey());\n             }\n         }\n     }"},{"sha":"8703d226ed6360eb6181c41e95fb83a560778583","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -23,6 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n \n import java.util.List;\n import java.util.Locale;\n@@ -71,21 +72,29 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class MultitenancyITCase extends AbstractITCase {\n \n     @BeforeAll\n     public static void restSetup() {\n-        clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\");\n+        if (!domainService.list().isEmpty()) {\n+            clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"Two\");\n \n-        String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n-        if (StringUtils.isNotBlank(envContentType)) {\n-            clientFactory.setContentType(envContentType);\n+            String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n+            if (StringUtils.isNotBlank(envContentType)) {\n+                clientFactory.setContentType(envContentType);\n+            }\n+            LOG.info(\"Performing IT with content type {}\", clientFactory.getContentType().getMediaType());\n+\n+            adminClient = clientFactory.create(ADMIN_UNAME, \"password2\");\n         }\n-        LOG.info(\"Performing IT with content type {}\", clientFactory.getContentType().getMediaType());\n+    }\n \n-        adminClient = clientFactory.create(ADMIN_UNAME, \"password2\");\n+    @BeforeEach\n+    public void multitenancyCheck() {\n+        assumeFalse(domainService.list().isEmpty());\n     }\n \n     @Test"},{"sha":"3994005310b87310a7d502c60970568fbc158c0f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":23,"deletions":27,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -65,7 +65,7 @@\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n import org.apache.syncope.ext.scimv2.cxf.JacksonSCIMJsonProvider;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.SCIMDetector;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n public class SCIMITCase extends AbstractITCase {\n@@ -74,6 +74,8 @@ public class SCIMITCase extends AbstractITCase {\n \n     private static final SCIMConf CONF;\n \n+    private static Boolean ENABLED;\n+\n     private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n \n         @Override\n@@ -105,17 +107,35 @@ protected SimpleDateFormat initialValue() {\n         CONF.getUserConf().getEmails().add(email);\n     }\n \n+    private static boolean isSCIMAvailable(final WebClient webClient) {\n+        synchronized (LOG) {\n+            if (ENABLED == null) {\n+                try {\n+                    Response response = webClient.path(\"ServiceProviderConfig\").get();\n+                    ENABLED = response.getStatus() == 200;\n+                } catch (Exception e) {\n+                    // ignore\n+                    ENABLED = false;\n+                }\n+            }\n+        }\n+        return ENABLED;\n+    }\n+\n     private WebClient webClient() {\n         return WebClient.create(SCIM_ADDRESS, Arrays.asList(new JacksonSCIMJsonProvider())).\n                 accept(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n                 type(SCIMConstants.APPLICATION_SCIM_JSON_TYPE).\n                 header(HttpHeaders.AUTHORIZATION, \"Bearer \" + adminClient.getJWT());\n     }\n \n+    @BeforeEach\n+    public void check() {\n+        assumeTrue(isSCIMAvailable(webClient()));\n+    }\n+\n     @Test\n     public void serviceProviderConfig() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         Response response = webClient().path(\"ServiceProviderConfig\").get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n@@ -133,8 +153,6 @@ public void serviceProviderConfig() {\n \n     @Test\n     public void resourceTypes() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         Response response = webClient().path(\"ResourceTypes\").get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n@@ -157,8 +175,6 @@ public void resourceTypes() {\n \n     @Test\n     public void schemas() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         Response response = webClient().path(\"Schemas\").get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n@@ -182,8 +198,6 @@ public void schemas() {\n \n     @Test\n     public void read() throws IOException {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         Response response = webClient().path(\"Users\").path(\"missing\").get();\n         assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n \n@@ -220,8 +234,6 @@ public void read() throws IOException {\n \n     @Test\n     public void conf() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         SCIMConf conf = scimConfService.get();\n         assertNotNull(conf);\n \n@@ -240,8 +252,6 @@ public void conf() {\n \n     @Test\n     public void list() throws IOException {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         Response response = webClient().path(\"Groups\").query(\"count\", 1100000).get();\n         assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n         SCIMError error = response.readEntity(SCIMError.class);\n@@ -271,8 +281,6 @@ public void list() throws IOException {\n \n     @Test\n     public void search() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         // invalid filter\n         Response response = webClient().path(\"Groups\").query(\"filter\", \"invalid\").get();\n         assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());\n@@ -359,8 +367,6 @@ private SCIMUser getSampleUser(final String username) {\n \n     @Test\n     public void createUser() throws JsonProcessingException {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         scimConfService.set(CONF);\n \n         SCIMUser user = getSampleUser(UUID.randomUUID().toString());\n@@ -389,8 +395,6 @@ public void createUser() throws JsonProcessingException {\n \n     @Test\n     public void replaceUser() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         scimConfService.set(CONF);\n \n         SCIMUser user = getSampleUser(UUID.randomUUID().toString());\n@@ -412,8 +416,6 @@ public void replaceUser() {\n \n     @Test\n     public void deleteUser() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         scimConfService.set(CONF);\n \n         SCIMUser user = getSampleUser(UUID.randomUUID().toString());\n@@ -436,8 +438,6 @@ public void deleteUser() {\n \n     @Test\n     public void createGroup() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         String displayName = UUID.randomUUID().toString();\n \n         SCIMGroup group = new SCIMGroup(null, null, displayName);\n@@ -470,8 +470,6 @@ public void createGroup() {\n \n     @Test\n     public void replaceGroup() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         SCIMGroup group = new SCIMGroup(null, null, UUID.randomUUID().toString());\n         group.getMembers().add(new Member(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\", null, null));\n         Response response = webClient().path(\"Groups\").post(group);\n@@ -505,8 +503,6 @@ public void replaceGroup() {\n \n     @Test\n     public void deleteGroup() {\n-        assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n-\n         SCIMGroup group = new SCIMGroup(null, null, UUID.randomUUID().toString());\n         Response response = webClient().path(\"Groups\").post(group);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());"},{"sha":"def056d37f1f6bf5ef21a7b40c28a7582b8afdbe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -932,12 +932,12 @@ public void groupAttrPropagation() {\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        UserTO actual = createUser(userTO).getEntity();\n-        assertNotNull(actual);\n-        assertNotNull(actual.getDerAttr(\"csvuserid\"));\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getDerAttr(\"csvuserid\"));\n \n         ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n         assertEquals(\"sx-dx\", connObjectTO.getAttr(\"THEIRGROUP\").get().getValues().get(0));\n     }"},{"sha":"30f3444532c2a100ca7b5b94f88f5db79ca7fefc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -799,15 +799,20 @@ public void issueSYNCOPE402() {\n \n     @Test\n     public void issueSYNCOPE420() throws IOException {\n-        ImplementationTO logicActions = new ImplementationTO();\n-        logicActions.setKey(\"DoubleValueLogicActions\");\n-        logicActions.setEngine(ImplementationEngine.GROOVY);\n-        logicActions.setType(ImplementationType.LOGIC_ACTIONS);\n-        logicActions.setBody(org.apache.commons.io.IOUtils.toString(\n-                getClass().getResourceAsStream(\"/DoubleValueLogicActions.groovy\"), StandardCharsets.UTF_8));\n-        Response response = implementationService.create(logicActions);\n-        logicActions = implementationService.read(\n-                logicActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+        ImplementationTO logicActions;\n+        try {\n+            logicActions = implementationService.read(ImplementationType.LOGIC_ACTIONS, \"DoubleValueLogicActions\");\n+        } catch (SyncopeClientException e) {\n+            logicActions = new ImplementationTO();\n+            logicActions.setKey(\"DoubleValueLogicActions\");\n+            logicActions.setEngine(ImplementationEngine.GROOVY);\n+            logicActions.setType(ImplementationType.LOGIC_ACTIONS);\n+            logicActions.setBody(org.apache.commons.io.IOUtils.toString(\n+                    getClass().getResourceAsStream(\"/DoubleValueLogicActions.groovy\"), StandardCharsets.UTF_8));\n+            Response response = implementationService.create(logicActions);\n+            logicActions = implementationService.read(\n+                    logicActions.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+        }\n         assertNotNull(logicActions);\n \n         RealmTO realm = realmService.list(\"/even/two\").iterator().next();"},{"sha":"31a0e83511afdca875ab8b6d89a04db411256ed1","filename":"pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -517,6 +517,8 @@ under the License.\n     <nodejs.version>v8.11.4</nodejs.version>    \n     <protractor.version>5.4.0</protractor.version>    \n \n+    <docker.postgresql.version>11.1</docker.postgresql.version>\n+\n     <jdbc.postgresql.version>42.2.5</jdbc.postgresql.version>\n     <jdbc.mysql.version>5.1.47</jdbc.mysql.version>\n     <jdbc.mariadb.version>2.2.6</jdbc.mariadb.version>"},{"sha":"f8cbd6adebf0dcfbf2fa17459c896cb76aeaba14","filename":"src/main/asciidoc/getting-started/obtain.adoc","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fobtain.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fobtain.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Fgetting-started%2Fobtain.adoc?ref=d9147367aa44ea8e7d455a7d1de2eabbc22ae0c9","patch":"@@ -363,18 +363,12 @@ version: '3.3'\n \n services:\n    db: // <1>\n-     image: crunchydata/crunchy-postgres:centos7-10.3-1.8.2\n+     image: postgres:latest\n      restart: always\n      environment:\n-       PG_ROOT_PASSWORD: postgres\n-       PG_MODE: primary\n-       PG_PRIMARY_USER: postgres\n-       PG_PRIMARY_PASSWORD: postgres\n-       PG_PRIMARY_HOST: localhost\n-       PG_PRIMARY_PORT: 5432\n-       PG_DATABASE: syncope\n-       PG_USER: syncope\n-       PG_PASSWORD: syncope\n+       POSTGRES_DB: syncope\n+       POSTGRES_USER: syncope\n+       POSTGRES_PASSWORD: syncope\n \n    syncope: // <2>\n      depends_on:\n@@ -417,7 +411,7 @@ services:\n        CORE_PORT: 8080\n        DOMAIN: Master\n ----\n-<1> Database container for usage as internal storage, based on PostgreSQL 10.3\n+<1> Database container for usage as internal storage, based on latest PostgreSQL image available\n <2> Apache Syncope Core, single instance, port `18080` exposed\n <3> Apache Syncope Admin UI, port `28080` exposed\n <4> Apache Syncope Enduser UI, port `38080` exposed, working with `Master` domain"}]}