{"sha":"b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","node_id":"C_kwDOJfYA1toAKGIwMzQ4ZWFlNDAyZDdhZmNkZDFjYTNkOGNjNWU5ZGNhOTdhYjdmZTQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-03-17T11:34:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-03-17T11:34:27Z"},"message":"[SYNCOPE-1668] Adding entityCache actuator endpoint","tree":{"sha":"0a94952ca395be044fac79afda1579c9c2815f11","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0a94952ca395be044fac79afda1579c9c2815f11"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dc1340d85dbfa5985598be3d69a4cff2638aee03","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc1340d85dbfa5985598be3d69a4cff2638aee03","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dc1340d85dbfa5985598be3d69a4cff2638aee03"}],"stats":{"total":549,"additions":405,"deletions":144},"files":[{"sha":"2736f62a70007518fb8201c93e42767164f011c9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/EntityCacheDAO.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FEntityCacheDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FEntityCacheDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FEntityCacheDAO.java?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.Map;\n+\n+public interface EntityCacheDAO {\n+\n+    Map<String, Object> getStatistics();\n+\n+    void enableStatistics();\n+\n+    void disableStatistics();\n+\n+    void resetStatistics();\n+\n+    void clearCache();\n+}"},{"sha":"726a3002050dc21cc1fa96e4062e008a2b510c56","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -92,6 +93,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPADelegationDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPADerSchemaDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPADynRealmDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAEntityCacheDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAExternalResourceDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAImplementationDAO;\n@@ -203,8 +205,8 @@ public CommonEntityManagerFactoryConf commonEMFConf(final PersistenceProperties\n     @ConditionalOnMissingBean\n     @Bean\n     public XMLContentLoader xmlContentLoader(final PersistenceProperties persistenceProperties,\n-                                             final ResourceLoader resourceLoader,\n-                                             final Environment env) {\n+            final ResourceLoader resourceLoader,\n+            final Environment env) {\n         return new XMLContentLoader(\n                 resourceLoader.getResource(persistenceProperties.getViewsXML()),\n                 resourceLoader.getResource(persistenceProperties.getIndexesXML()),\n@@ -285,6 +287,12 @@ public TaskUtilsFactory taskUtilsFactory(final @Lazy EntityFactory entityFactory\n         return new JPATaskUtilsFactory(entityFactory);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public EntityCacheDAO entityCacheDAO() {\n+        return new JPAEntityCacheDAO();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public AccessTokenDAO accessTokenDAO() {"},{"sha":"bbed01ad3fbf3714a4fc1f76037d6658f3ddc953","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Optional;\n import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -31,15 +33,15 @@\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DAO.class);\n \n+    protected EntityManagerFactory entityManagerFactory() {\n+        return EntityManagerFactoryUtils.findEntityManagerFactory(\n+                ApplicationContextProvider.getBeanFactory(), AuthContextUtils.getDomain());\n+    }\n+\n     protected EntityManager entityManager() {\n-        EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(\n-                EntityManagerFactoryUtils.findEntityManagerFactory(\n-                        ApplicationContextProvider.getBeanFactory(), AuthContextUtils.getDomain()));\n-        if (entityManager == null) {\n-            throw new IllegalStateException(\"Could not find EntityManager for domain \" + AuthContextUtils.getDomain());\n-        }\n-\n-        return entityManager;\n+        return Optional.ofNullable(EntityManagerFactoryUtils.getTransactionalEntityManager(entityManagerFactory())).\n+                orElseThrow(() -> new IllegalStateException(\n+                \"Could not find EntityManager for domain \" + AuthContextUtils.getDomain()));\n     }\n \n     @Override"},{"sha":"1082e87da10d355c6e00671ab7be8d2f46c48cf9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAEntityCacheDAO.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAEntityCacheDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAEntityCacheDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAEntityCacheDAO.java?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.openjpa.datacache.CacheStatistics;\n+import org.apache.openjpa.datacache.CacheStatisticsSPI;\n+import org.apache.openjpa.datacache.QueryKey;\n+import org.apache.openjpa.kernel.QueryStatistics;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.QueryResultCacheImpl;\n+import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n+\n+public class JPAEntityCacheDAO extends AbstractDAO<Entity> implements EntityCacheDAO {\n+\n+    protected CacheStatisticsSPI cacheStatisticsSPI() {\n+        return (CacheStatisticsSPI) OpenJPAPersistence.cast(entityManagerFactory()).getStoreCache().getStatistics();\n+    }\n+\n+    protected QueryStatistics<QueryKey> queryStatistics() {\n+        return ((QueryResultCacheImpl) OpenJPAPersistence.cast(\n+                entityManagerFactory()).getQueryResultCache()).getDelegate().getStatistics();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getStatistics() {\n+        Map<String, Object> result = new LinkedHashMap<>();\n+\n+        CacheStatistics cacheStats = cacheStatisticsSPI();\n+\n+        Map<String, Object> storeCache = new LinkedHashMap<>();\n+        result.put(\"storeCache\", storeCache);\n+\n+        storeCache.put(\"enabled\", cacheStats.isEnabled());\n+        storeCache.put(\"activation\", DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(\n+                cacheStats.start().toInstant().atOffset(FormatUtils.DEFAULT_OFFSET)));\n+        storeCache.put(\"last_update\", DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(\n+                cacheStats.since().toInstant().atOffset(FormatUtils.DEFAULT_OFFSET)));\n+        storeCache.put(\"hits\", cacheStats.getHitCount());\n+        storeCache.put(\"reads\", cacheStats.getReadCount());\n+        storeCache.put(\"writes\", cacheStats.getWriteCount());\n+        storeCache.put(\"total_hits\", cacheStats.getTotalHitCount());\n+        storeCache.put(\"total_reads\", cacheStats.getTotalReadCount());\n+        storeCache.put(\"total_writes\", cacheStats.getTotalWriteCount());\n+\n+        List<Map<String, Object>> storeCacheDetails = new ArrayList<>();\n+        storeCache.put(\"details\", storeCacheDetails);\n+        cacheStats.classNames().forEach(className -> {\n+            Map<String, Object> classMap = new LinkedHashMap<>();\n+            classMap.put(\"region\", className);\n+            classMap.put(\"hits\", cacheStats.getHitCount(className));\n+            classMap.put(\"reads\", cacheStats.getReadCount(className));\n+            classMap.put(\"writes\", cacheStats.getWriteCount(className));\n+            storeCache.put(\"total_hits\", cacheStats.getTotalHitCount(className));\n+            storeCache.put(\"total_reads\", cacheStats.getTotalReadCount(className));\n+            storeCache.put(\"total_writes\", cacheStats.getTotalWriteCount(className));\n+            storeCacheDetails.add(classMap);\n+        });\n+\n+        QueryStatistics<QueryKey> queryStats = queryStatistics();\n+\n+        Map<String, Object> queryCache = new LinkedHashMap<>();\n+        result.put(\"queryCache\", queryCache);\n+\n+        queryCache.put(\"activation\", DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(\n+                queryStats.start().toInstant().atOffset(FormatUtils.DEFAULT_OFFSET)));\n+        queryCache.put(\"last_update\", DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(\n+                queryStats.since().toInstant().atOffset(FormatUtils.DEFAULT_OFFSET)));\n+        queryCache.put(\"hits\", queryStats.getHitCount());\n+        queryCache.put(\"executions\", queryStats.getExecutionCount());\n+        queryCache.put(\"evictions\", queryStats.getEvictionCount());\n+        queryCache.put(\"total_hits\", queryStats.getTotalHitCount());\n+        queryCache.put(\"total_executions\", queryStats.getTotalExecutionCount());\n+        queryCache.put(\"total_evictions\", queryStats.getTotalEvictionCount());\n+\n+        List<Map<String, Object>> queryCacheDetails = new ArrayList<>();\n+        queryCache.put(\"details\", queryCacheDetails);\n+\n+        queryStats.keys().forEach(queryKey -> {\n+            Map<String, Object> queryKeyMap = new LinkedHashMap<>();\n+            queryKeyMap.put(\"query_key\", queryKey.toString());\n+            queryCache.put(\"hits\", queryStats.getHitCount(queryKey));\n+            queryCache.put(\"executions\", queryStats.getExecutionCount(queryKey));\n+            queryCache.put(\"total_hits\", queryStats.getTotalHitCount(queryKey));\n+            queryCache.put(\"total_executions\", queryStats.getTotalExecutionCount(queryKey));\n+            queryCacheDetails.add(queryKeyMap);\n+        });\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public void enableStatistics() {\n+        cacheStatisticsSPI().enable();\n+    }\n+\n+    @Override\n+    public void disableStatistics() {\n+        cacheStatisticsSPI().disable();\n+    }\n+\n+    @Override\n+    public void resetStatistics() {\n+        cacheStatisticsSPI().reset();\n+        queryStatistics().reset();\n+    }\n+\n+    @Override\n+    public void clearCache() {\n+        OpenJPAEntityManagerFactory emf = OpenJPAPersistence.cast(entityManagerFactory());\n+\n+        emf.getStoreCache().evictAll();\n+        emf.getQueryResultCache().evictAll();\n+    }\n+}"},{"sha":"7d35a1e33f6f62b0d85d99d5d9af77e2b7bc2fa8","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreApplication.java","status":"modified","additions":90,"deletions":82,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.starter;\n \n import java.util.Map;\n-\n import org.apache.cxf.spring.boot.autoconfigure.openapi.OpenApiAutoConfiguration;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n@@ -33,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n@@ -61,6 +61,7 @@\n import org.apache.syncope.core.starter.actuate.DomainsHealthIndicator;\n import org.apache.syncope.core.starter.actuate.ExternalResourcesHealthIndicator;\n import org.apache.syncope.core.starter.actuate.DefaultSyncopeCoreInfoContributor;\n+import org.apache.syncope.core.starter.actuate.EntityCacheEndpoint;\n import org.apache.syncope.core.starter.actuate.SyncopeCoreInfoContributor;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n@@ -111,85 +112,85 @@ protected SpringApplicationBuilder configure(final SpringApplicationBuilder buil\n     @ConditionalOnMissingBean\n     @Bean\n     public SyncopeCoreInfoContributor syncopeCoreInfoContributor(\n-        final SecurityProperties securityProperties,\n-        final PersistenceProperties persistenceProperties,\n-        final ProvisioningProperties provisioningProperties,\n-        final LogicProperties logicProperties,\n-        final AnyTypeDAO anyTypeDAO,\n-        final AnyTypeClassDAO anyTypeClassDAO,\n-        final UserDAO userDAO,\n-        final GroupDAO groupDAO,\n-        final AnyObjectDAO anyObjectDAO,\n-        final ExternalResourceDAO resourceDAO,\n-        final ConfParamOps confParamOps,\n-        final ServiceOps serviceOps,\n-        final ConnIdBundleManager bundleManager,\n-        final PropagationTaskExecutor propagationTaskExecutor,\n-        final AnyObjectWorkflowAdapter awfAdapter,\n-        final UserWorkflowAdapter uwfAdapter,\n-        final GroupWorkflowAdapter gwfAdapter,\n-        final AnyObjectProvisioningManager aProvisioningManager,\n-        final UserProvisioningManager uProvisioningManager,\n-        final GroupProvisioningManager gProvisioningManager,\n-        final VirAttrCache virAttrCache,\n-        final NotificationManager notificationManager,\n-        final AuditManager auditManager,\n-        final PasswordGenerator passwordGenerator,\n-        final EntityFactory entityFactory,\n-        final PlainSchemaDAO plainSchemaDAO,\n-        final PlainAttrDAO plainAttrDAO,\n-        final PlainAttrValueDAO plainAttrValueDAO,\n-        final AnySearchDAO anySearchDAO,\n-        final ImplementationLookup implLookup,\n-        final PolicyDAO policyDAO,\n-        final NotificationDAO notificationDAO,\n-        final TaskDAO taskDAO,\n-        final VirSchemaDAO virSchemaDAO,\n-        final RoleDAO roleDAO,\n-        final SecurityQuestionDAO securityQuestionDAO,\n-        @Qualifier(\"asyncConnectorFacadeExecutor\")\n-        final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n-        @Qualifier(\"propagationTaskExecutorAsyncExecutor\")\n-        final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n-        \n+            final SecurityProperties securityProperties,\n+            final PersistenceProperties persistenceProperties,\n+            final ProvisioningProperties provisioningProperties,\n+            final LogicProperties logicProperties,\n+            final AnyTypeDAO anyTypeDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConfParamOps confParamOps,\n+            final ServiceOps serviceOps,\n+            final ConnIdBundleManager bundleManager,\n+            final PropagationTaskExecutor propagationTaskExecutor,\n+            final AnyObjectWorkflowAdapter awfAdapter,\n+            final UserWorkflowAdapter uwfAdapter,\n+            final GroupWorkflowAdapter gwfAdapter,\n+            final AnyObjectProvisioningManager aProvisioningManager,\n+            final UserProvisioningManager uProvisioningManager,\n+            final GroupProvisioningManager gProvisioningManager,\n+            final VirAttrCache virAttrCache,\n+            final NotificationManager notificationManager,\n+            final AuditManager auditManager,\n+            final PasswordGenerator passwordGenerator,\n+            final EntityFactory entityFactory,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final ImplementationLookup implLookup,\n+            final PolicyDAO policyDAO,\n+            final NotificationDAO notificationDAO,\n+            final TaskDAO taskDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final RoleDAO roleDAO,\n+            final SecurityQuestionDAO securityQuestionDAO,\n+            @Qualifier(\"asyncConnectorFacadeExecutor\")\n+            final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n+            @Qualifier(\"propagationTaskExecutorAsyncExecutor\")\n+            final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n+\n         return new DefaultSyncopeCoreInfoContributor(securityProperties,\n-            persistenceProperties,\n-            provisioningProperties,\n-            logicProperties,\n-            anyTypeDAO,\n-            anyTypeClassDAO,\n-            userDAO,\n-            groupDAO,\n-            anyObjectDAO,\n-            resourceDAO,\n-            confParamOps,\n-            serviceOps,\n-            bundleManager,\n-            propagationTaskExecutor,\n-            awfAdapter,\n-            uwfAdapter,\n-            gwfAdapter,\n-            aProvisioningManager,\n-            uProvisioningManager,\n-            gProvisioningManager,\n-            virAttrCache,\n-            notificationManager,\n-            auditManager,\n-            passwordGenerator,\n-            entityFactory,\n-            plainSchemaDAO,\n-            plainAttrDAO,\n-            plainAttrValueDAO,\n-            anySearchDAO,\n-            implLookup,\n-            policyDAO,\n-            notificationDAO,\n-            taskDAO,\n-            virSchemaDAO,\n-            roleDAO,\n-            securityQuestionDAO,\n-            asyncConnectorFacadeExecutor,\n-            propagationTaskExecutorAsyncExecutor);\n+                persistenceProperties,\n+                provisioningProperties,\n+                logicProperties,\n+                anyTypeDAO,\n+                anyTypeClassDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                resourceDAO,\n+                confParamOps,\n+                serviceOps,\n+                bundleManager,\n+                propagationTaskExecutor,\n+                awfAdapter,\n+                uwfAdapter,\n+                gwfAdapter,\n+                aProvisioningManager,\n+                uProvisioningManager,\n+                gProvisioningManager,\n+                virAttrCache,\n+                notificationManager,\n+                auditManager,\n+                passwordGenerator,\n+                entityFactory,\n+                plainSchemaDAO,\n+                plainAttrDAO,\n+                plainAttrValueDAO,\n+                anySearchDAO,\n+                implLookup,\n+                policyDAO,\n+                notificationDAO,\n+                taskDAO,\n+                virSchemaDAO,\n+                roleDAO,\n+                securityQuestionDAO,\n+                asyncConnectorFacadeExecutor,\n+                propagationTaskExecutorAsyncExecutor);\n     }\n \n     @ConditionalOnMissingBean\n@@ -211,6 +212,12 @@ public ExternalResourcesHealthIndicator externalResourcesHealthIndicator() {\n         return new ExternalResourcesHealthIndicator();\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public EntityCacheEndpoint entityCacheEndpoint(final EntityCacheDAO entityCacheDAO) {\n+        return new EntityCacheEndpoint(entityCacheDAO);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public SyncopeCoreStart keymasterStart(final DomainHolder domainHolder) {\n@@ -222,20 +229,21 @@ public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.CORE);\n     }\n \n-\n     @Bean\n     public SyncopeStarterEventListener syncopeCoreEventListener(\n-        @Qualifier(\"syncopeCoreInfoContributor\")\n-        final SyncopeCoreInfoContributor syncopeCoreInfoContributor) {\n+            @Qualifier(\"syncopeCoreInfoContributor\")\n+            final SyncopeCoreInfoContributor syncopeCoreInfoContributor) {\n         return new DefaultSyncopeStarterEventListener(syncopeCoreInfoContributor);\n     }\n \n     @FunctionalInterface\n     public interface SyncopeStarterEventListener {\n+\n         void addLoadInstant(PayloadApplicationEvent<SystemInfo.LoadInstant> event);\n     }\n \n     public static class DefaultSyncopeStarterEventListener implements SyncopeStarterEventListener {\n+\n         private final SyncopeCoreInfoContributor contributor;\n \n         public DefaultSyncopeStarterEventListener(final SyncopeCoreInfoContributor contributor) {"},{"sha":"c55d7a9377ffe42fb43299d7ade9e49eec6f30d5","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/DefaultSyncopeCoreInfoContributor.java","status":"modified","additions":50,"deletions":51,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -18,6 +18,18 @@\n  */\n package org.apache.syncope.core.starter.actuate;\n \n+import java.lang.management.ManagementFactory;\n+import java.lang.management.OperatingSystemMXBean;\n+import java.lang.management.RuntimeMXBean;\n+import java.net.InetAddress;\n+import java.net.URI;\n+import java.net.UnknownHostException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.lib.info.JavaImplInfo;\n@@ -76,19 +88,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.lang.management.ManagementFactory;\n-import java.lang.management.OperatingSystemMXBean;\n-import java.lang.management.RuntimeMXBean;\n-import java.net.InetAddress;\n-import java.net.URI;\n-import java.net.UnknownHostException;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n public class DefaultSyncopeCoreInfoContributor implements SyncopeCoreInfoContributor, InfoContributor {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DefaultSyncopeCoreInfoContributor.class);\n@@ -232,44 +231,44 @@ protected static void initSystemInfo() {\n     private final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor;\n \n     public DefaultSyncopeCoreInfoContributor(\n-        final SecurityProperties securityProperties,\n-        final PersistenceProperties persistenceProperties,\n-        final ProvisioningProperties provisioningProperties,\n-        final LogicProperties logicProperties,\n-        final AnyTypeDAO anyTypeDAO,\n-        final AnyTypeClassDAO anyTypeClassDAO,\n-        final UserDAO userDAO,\n-        final GroupDAO groupDAO,\n-        final AnyObjectDAO anyObjectDAO,\n-        final ExternalResourceDAO resourceDAO,\n-        final ConfParamOps confParamOps,\n-        final ServiceOps serviceOps,\n-        final ConnIdBundleManager bundleManager,\n-        final PropagationTaskExecutor propagationTaskExecutor,\n-        final AnyObjectWorkflowAdapter awfAdapter,\n-        final UserWorkflowAdapter uwfAdapter,\n-        final GroupWorkflowAdapter gwfAdapter,\n-        final AnyObjectProvisioningManager aProvisioningManager,\n-        final UserProvisioningManager uProvisioningManager,\n-        final GroupProvisioningManager gProvisioningManager,\n-        final VirAttrCache virAttrCache,\n-        final NotificationManager notificationManager,\n-        final AuditManager auditManager,\n-        final PasswordGenerator passwordGenerator,\n-        final EntityFactory entityFactory,\n-        final PlainSchemaDAO plainSchemaDAO,\n-        final PlainAttrDAO plainAttrDAO,\n-        final PlainAttrValueDAO plainAttrValueDAO,\n-        final AnySearchDAO anySearchDAO,\n-        final ImplementationLookup implLookup,\n-        final PolicyDAO policyDAO,\n-        final NotificationDAO notificationDAO,\n-        final TaskDAO taskDAO,\n-        final VirSchemaDAO virSchemaDAO,\n-        final RoleDAO roleDAO,\n-        final SecurityQuestionDAO securityQuestionDAO,\n-        final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n-        final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n+            final SecurityProperties securityProperties,\n+            final PersistenceProperties persistenceProperties,\n+            final ProvisioningProperties provisioningProperties,\n+            final LogicProperties logicProperties,\n+            final AnyTypeDAO anyTypeDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConfParamOps confParamOps,\n+            final ServiceOps serviceOps,\n+            final ConnIdBundleManager bundleManager,\n+            final PropagationTaskExecutor propagationTaskExecutor,\n+            final AnyObjectWorkflowAdapter awfAdapter,\n+            final UserWorkflowAdapter uwfAdapter,\n+            final GroupWorkflowAdapter gwfAdapter,\n+            final AnyObjectProvisioningManager aProvisioningManager,\n+            final UserProvisioningManager uProvisioningManager,\n+            final GroupProvisioningManager gProvisioningManager,\n+            final VirAttrCache virAttrCache,\n+            final NotificationManager notificationManager,\n+            final AuditManager auditManager,\n+            final PasswordGenerator passwordGenerator,\n+            final EntityFactory entityFactory,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final ImplementationLookup implLookup,\n+            final PolicyDAO policyDAO,\n+            final NotificationDAO notificationDAO,\n+            final TaskDAO taskDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final RoleDAO roleDAO,\n+            final SecurityQuestionDAO securityQuestionDAO,\n+            final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor,\n+            final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor) {\n \n         this.securityProperties = securityProperties;\n         this.persistenceProperties = persistenceProperties;"},{"sha":"b12015354b8d1ecaffc5ca0fcfca84ae20a128e3","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/EntityCacheEndpoint.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FEntityCacheEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FEntityCacheEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FEntityCacheEndpoint.java?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.starter.actuate;\n+\n+import java.util.Map;\n+import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n+import org.springframework.boot.actuate.endpoint.annotation.DeleteOperation;\n+import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n+import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n+import org.springframework.boot.actuate.endpoint.annotation.Selector;\n+import org.springframework.boot.actuate.endpoint.annotation.WriteOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+@Endpoint(id = \"entityCache\")\n+public class EntityCacheEndpoint {\n+\n+    private final EntityCacheDAO entityCacheDAO;\n+\n+    public EntityCacheEndpoint(final EntityCacheDAO entityCacheDAO) {\n+        this.entityCacheDAO = entityCacheDAO;\n+    }\n+\n+    @ReadOperation\n+    public Map<String, Object> statistics() {\n+        return entityCacheDAO.getStatistics();\n+    }\n+\n+    @WriteOperation\n+    public void statistics(final @Selector String operation) {\n+        switch (operation) {\n+            case \"enable\":\n+            case \"ENABLE\":\n+                entityCacheDAO.enableStatistics();\n+                break;\n+\n+            case \"disable\":\n+            case \"DISABLE\":\n+                entityCacheDAO.disableStatistics();\n+                break;\n+\n+            case \"reset\":\n+            case \"RESET\":\n+                entityCacheDAO.resetStatistics();\n+                break;\n+\n+            default:\n+                throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Unsupported Operation: \" + operation);\n+        }\n+    }\n+\n+    @DeleteOperation\n+    public void clearCache() {\n+        entityCacheDAO.clearCache();\n+    }\n+}"},{"sha":"b2bb5711ddeb10fe5ff7dbec7443d69a405eaab8","filename":"core/starter/src/main/resources/core.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties?ref=b0348eae402d7afcdd1ca3d8cc5e9dca97ab7fe4","patch":"@@ -29,7 +29,7 @@ conf.directory=${conf.directory}\n server.servlet.contextPath=/syncope\n cxf.path=/rest\n \n-management.endpoints.web.exposure.include=health,info,loggers\n+management.endpoints.web.exposure.include=health,info,loggers,entityCache\n management.endpoint.health.show-details=ALWAYS\n \n service.discovery.address=http://localhost:8080/syncope/rest/"}]}