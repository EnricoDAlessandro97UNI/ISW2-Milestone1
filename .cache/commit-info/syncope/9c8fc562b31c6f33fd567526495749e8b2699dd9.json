{"sha":"9c8fc562b31c6f33fd567526495749e8b2699dd9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjljOGZjNTYyYjMxYzZmMzNmZDU2NzUyNjQ5NTc0OWU4YjI2OTlkZDk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-07T16:15:32Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-07T16:15:32Z"},"message":"Update issue 238\n\nForgot completely Hibernate, here's OpenJPA and BeanValidation.\nAll tests pass but core's UserTestITCase#create, which fails because assertFalse(newUserTO.getVirtualAttributeMap().get(\"virtualdata\").getValues().isEmpty()) (UserTestITCase:525) fails.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/0_8_X_ASL@1247319 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"75d972c006b1495d55f312e46ef9ef8ca097d1bd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/75d972c006b1495d55f312e46ef9ef8ca097d1bd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9c8fc562b31c6f33fd567526495749e8b2699dd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9c8fc562b31c6f33fd567526495749e8b2699dd9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9c8fc562b31c6f33fd567526495749e8b2699dd9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9c8fc562b31c6f33fd567526495749e8b2699dd9/comments","author":null,"committer":null,"parents":[{"sha":"779a2fcbb21f75a0c7ee498df086ef66cde6342a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/779a2fcbb21f75a0c7ee498df086ef66cde6342a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/779a2fcbb21f75a0c7ee498df086ef66cde6342a"}],"stats":{"total":2377,"additions":841,"deletions":1536},"files":[{"sha":"0442473af17a2f3ee1975c583b138632c6184627","filename":"TODO","status":"added","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/TODO","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/TODO","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/TODO?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -0,0 +1,16 @@\n+=console=\n+\n+* check Selenium\n+\n+=core=\n+\n+* working 'mvn clean verify'\n+* http://incubator.apache.org/bval/cwiki/index.html\n+* postgres-it\n+* mysql-it\n+* oracle-it\n+* redirect OpenJPA plugin log somewhere\n+* verify Clob behavior on PostgreSQL (requires external deploy and restart)\n+* 2nd level cache\n+* statistics?\n+* WARNING: javax.persistence.cache.retrieveMode\" is not a supported query hint. May be you meant \"javax.persistence.lock.timeout\"?"},{"sha":"5510d40b72c3d2cbdc5743dc3434e66b5c2c7672","filename":"build-tools/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/build-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/build-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fpom.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.8-SNAPSHOT</version>\n+        <version>0.8-ASL-SNAPSHOT</version>\n     </parent>\n \n     <name>Syncope build tools</name>"},{"sha":"01ad72f8e5fa0437eace45ca80dc0704dee80645","filename":"client/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.8-SNAPSHOT</version>\n+        <version>0.8-ASL-SNAPSHOT</version>\n     </parent>\n \n     <name>Syncope client</name>"},{"sha":"384d1a505145d69accad483ccdb25158f0b059ea","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,24 +19,27 @@ public enum SyncopeClientExceptionType {\n     Deadlock(\n     \"Syncope.Deadlock\",\n     \"\"),\n-    DuplicateUniqueValue(\n-    \"Syncope.DuplicateUniqueValue\",\n-    \"Syncope.DuplicateUniqueValue.name\"),\n+    DataIntegrityViolation(\n+    \"Syncope.DataIntegrityViolation\",\n+    \"Syncope.DataIntegrityViolation.name\"),\n     GenericPersistence(\n     \"Syncope.GenericPersistence\",\n     \"Syncope.GenericPersistence.cause\"),\n     InvalidConnInstance(\n     \"Syncope.InvalidConnInstance\",\n     \"Syncope.InvalidConnInstance.message\"),\n     InvalidPasswordPolicy(\n-    \"Syncope.InvalidPolicy\",\n-    \"Syncope.InvalidPolicy.reason\"),\n+    \"Syncope.InvalidPasswordPolicy\",\n+    \"Syncope.InvalidPasswordPolicy.reason\"),\n     InvalidAccountPolicy(\n-    \"Syncope.InvalidPolicy\",\n-    \"Syncope.InvalidPolicy.reason\"),\n+    \"Syncope.InvalidAccountPolicy\",\n+    \"Syncope.InvalidAccountPolicy.reason\"),\n     InvalidSyncPolicy(\n-    \"Syncope.InvalidPolicy\",\n-    \"Syncope.InvalidPolicy.reason\"),\n+    \"Syncope.InvalidSyncPolicy\",\n+    \"Syncope.InvalidSyncPolicy.reason\"),\n+    InvalidSyncopeRole(\n+    \"Syncope.InvalidSyncopeRole\",\n+    \"Syncope.InvalidSyncopeRole.reason\"),\n     InvalidRoles(\n     \"Syncope.InvalidRoles\",\n     \"Syncope.InvalidRoles.name\"),\n@@ -112,6 +115,9 @@ public enum SyncopeClientExceptionType {\n     RequiredValuesMissing(\n     \"Syncope.RequiredValuesMissing\",\n     \"Syncope.RequiredValuesMissing.attributeName\"),\n+    ResourceExist(\n+    \"Syncope.ResourceExist\",\n+    \"Syncope.ResourceExist.name\"),\n     Scheduling(\n     \"Syncope.Scheduling\",\n     \"Syncope.Scheduling.message\"),"},{"sha":"5b551fe547f90388ae6a397ae7d1c57dcfe67240","filename":"console/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.8-SNAPSHOT</version>\n+        <version>0.8-ASL-SNAPSHOT</version>\n     </parent>\n \n     <name>Syncope console</name>"},{"sha":"e0001e3e8e84f0d52f989910263c3077803e4845","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -869,10 +869,9 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n     public final void updateResourceSchemaNames(final ResourceTO resourceTO) {\n         try {\n-\n             resourceSchemaNames =\n                     (resourceTO != null && resourceTO.getConnectorId() != null)\n-                    ? connectorRestClient.getSchemaNames(resourceTO)\n+                    ? connectorRestClient.getSchemaNames(resourceTO.getName())\n                     : Collections.EMPTY_LIST;\n \n         } catch (Exception e) {"},{"sha":"a70ab7265244b5bfa79b27a754e72de97c580fd0","filename":"console/src/main/java/org/syncope/console/pages/Resources.java","status":"modified","additions":2,"deletions":27,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -384,16 +384,9 @@ public void populateItem(\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n-\n                         try {\n-\n-                            if (!checkDeleteIsForbidden(connectorTO)) {\n-                                connectorRestClient.delete(connectorTO.getId());\n-                                info(getString(\"operation_succeded\"));\n-                            } else {\n-                                error(getString(\"delete_error\"));\n-                            }\n-\n+                            connectorRestClient.delete(connectorTO.getId());\n+                            info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException e) {\n                             error(getString(\"operation_error\"));\n \n@@ -499,24 +492,6 @@ protected void onUpdate(AjaxRequestTarget target) {\n         add(paginatorForm);\n     }\n \n-    /**\n-     * Check if the delete action is forbidden.\n-     *\n-     * @param connectorTO object to check\n-     * @return true if the action is forbidden, false otherwise\n-     */\n-    public boolean checkDeleteIsForbidden(ConnInstanceTO connectorTO) {\n-        boolean forbidden = false;\n-\n-        for (ResourceTO resourceTO : resourceRestClient.getAllResources()) {\n-            if (resourceTO.getConnectorId().equals(connectorTO.getId())) {\n-                forbidden = true;\n-            }\n-        }\n-\n-        return forbidden;\n-    }\n-\n     class ResourcesProvider extends SortableDataProvider<ResourceTO> {\n \n         private static final long serialVersionUID = -9055916672926643975L;"},{"sha":"083ce9709a83d323234219d5baffa08d9e9d846e","filename":"console/src/main/java/org/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -22,7 +22,6 @@\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n-import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.SyncopeSession;\n import org.syncope.types.ConnConfProperty;\n@@ -47,7 +46,7 @@ public List<ConnInstanceTO> getAllConnectors() {\n      * Create new connector.\n      * @param schemaTO\n      */\n-    public void create(ConnInstanceTO connectorTO) {\n+    public void create(final ConnInstanceTO connectorTO) {\n         filterProperties(connectorTO.getConfiguration());\n         restTemplate.postForObject(baseURL\n                 + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n@@ -72,7 +71,7 @@ public ConnInstanceTO read(final Long connectorInstanceId) {\n         return connectorTO;\n     }\n \n-    public void update(ConnInstanceTO connectorTO) {\n+    public void update(final ConnInstanceTO connectorTO) {\n         filterProperties(connectorTO.getConfiguration());\n         restTemplate.postForObject(baseURL + \"connector/update.json\",\n                 connectorTO, ConnInstanceTO.class);\n@@ -98,13 +97,13 @@ public List<ConnBundleTO> getAllBundles() {\n         return bundles;\n     }\n \n-    public List<String> getSchemaNames(final ResourceTO resourceTO) {\n+    public List<String> getSchemaNames(final String resourceName) {\n         List<String> schemaNames = null;\n \n         try {\n-            schemaNames = Arrays.asList(restTemplate.postForObject(\n-                    baseURL + \"connector/schema/list\",\n-                    resourceTO, String[].class));\n+            schemaNames = Arrays.asList(restTemplate.getForObject(\n+                    baseURL + \"connector/schema/{resourceName}/list\",\n+                    String[].class, resourceName));\n \n             // re-order schema names list\n             Collections.sort(schemaNames);"},{"sha":"f476df12b8504dabb3dbd80db8b91c51ab7a0429","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -17,8 +17,6 @@\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\n \n-    <context:component-scan base-package=\"org.syncope.console.rest\"/>\n-\n     <bean id=\"propertyConfigurer\"\n           class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n         <property name=\"locations\">"},{"sha":"bdc638e0296e13e14e81fce08bfae275e1c310b2","filename":"console/src/main/resources/org/syncope/console/pages/NotificationTaskModalPage.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.html?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -12,7 +12,7 @@\n  limitations under the License.\n  under the License.\n -->\n-<<wicket:extend>\n+<wicket:extend>\n     <div id=\"dialog-form\">\n         <p class=\"ui-widget ui-corner-all ui-widget-header\"><wicket:message key=\"title\"/></p>\n         <form wicket:id=\"form\">"},{"sha":"aa95e971966a2db4826cc1a2647a8c1890d236c4","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage.properties","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -28,13 +28,13 @@ mustntStartWithDigit=Mustn't start with digit\n mustEndWithDigit=Must end with digit\n mustntEndWithDigit=Mustn't end with digit\n mustStartWithNonAlpha=Must start with non alphanumeric character\n-mustStartWithAlpha=Must start with digit alphanumeric character\n+mustStartWithAlpha=Must start with alphanumeric character\n mustntStartWithNonAlpha=Mustn't start with non alphanumeric character\n-mustntStartWithAlpha=Mustn't start with digit alphanumeric character\n+mustntStartWithAlpha=Mustn't start with alphanumeric character\n mustEndWithNonAlpha=Must end with non alphanumeric character\n-mustEndWithAlpha=Must end with digit alphanumeric character\n+mustEndWithAlpha=Must end with alphanumeric character\n mustntEndWithNonAlpha=Mustn't end with non alphanumeric character\n-mustntEndWithAlpha=Mustn't end with digit alphanumeric character\n+mustntEndWithAlpha=Mustn't end with alphanumeric character\n #-----------------------------\n \n #-----------------------------"},{"sha":"430295fd0f1bb9a548a0a324739f18b9f4dc383c","filename":"core/pom.xml","status":"modified","additions":49,"deletions":31,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,7 +19,7 @@\n     <parent>\n         <groupId>org.syncope</groupId>\n         <artifactId>syncope</artifactId>\n-        <version>0.8-SNAPSHOT</version>\n+        <version>0.8-ASL-SNAPSHOT</version>\n     </parent>\n \n     <name>Syncope core</name>\n@@ -122,6 +122,11 @@\n             <artifactId>spring-security-config</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>cglib</groupId>\n+            <artifactId>cglib</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>com.thoughtworks.xstream</groupId>\n             <artifactId>xstream</artifactId>\n@@ -142,13 +147,10 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>org.hibernate</groupId>\n-            <artifactId>hibernate-entitymanager</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.hibernate</groupId>\n-            <artifactId>hibernate-validator</artifactId>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-all</artifactId>\n         </dependency>\n+\n         <dependency>\n             <groupId>net.sf.ehcache</groupId>\n             <artifactId>ehcache-core</artifactId>\n@@ -278,6 +280,38 @@\n         <finalName>${project.parent.artifactId}</finalName>\n \n         <plugins>\n+            \n+            <plugin>\n+                <groupId>org.apache.openjpa</groupId>\n+                <artifactId>openjpa-maven-plugin</artifactId>\n+                <inherited>true</inherited>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>com.h2database</groupId>\n+                        <artifactId>h2</artifactId>\n+                        <version>${h2.version}</version>\n+                    </dependency>\n+                </dependencies>\n+                <configuration>\n+                    <includes>org/syncope/core/persistence/beans/**/*.class</includes>\n+                    <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n+                    <connectionProperties>\n+                    driverClassName=org.h2.Driver,\n+                    url=jdbc:h2:mem:syncopedb\n+                    username=sa,\n+                    password=\n+                    </connectionProperties>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <id>enhancer</id>\n+                        <phase>process-classes</phase>\n+                        <goals>\n+                            <goal>enhance</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n \n             <plugin>\n                 <groupId>org.codehaus.groovy.maven</groupId>\n@@ -411,29 +445,6 @@\n                     </execution>\n                 </executions>\n             </plugin>\n-            \n-            <plugin>\n-                <groupId>org.codehaus.mojo</groupId>\n-                <artifactId>exec-maven-plugin</artifactId>\n-                <inherited>true</inherited>\n-                <executions>\n-                    <execution>\n-                        <id>default-cli</id>\n-                        <goals>\n-                            <goal>exec</goal>\n-                        </goals>\n-                        <configuration>\n-                            <executable>java</executable>\n-                            <arguments>\n-                                <argument>-classpath</argument>\n-                                <classpath />\n-                                <argument>org.syncope.core.util.SchemaExporter</argument>\n-                                <argument>H2</argument>\n-                            </arguments>\n-                        </configuration>\n-                    </execution>\n-                </executions>\n-            </plugin>\n \n             <plugin>\n                 <groupId>org.codehaus.cargo</groupId>\n@@ -508,7 +519,14 @@\n                     </execution>\n                 </executions>\n             </plugin>\n-\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>2.3.2</version>\n+                <configuration>\n+                    <showDeprecation>true</showDeprecation>\n+                </configuration>\n+            </plugin>\n         </plugins>\n \n         <resources>"},{"sha":"aee995179ea226c96ac256fa53bb9c1eb5fe253d","filename":"core/src/main/java/org/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -18,6 +18,7 @@\n import java.util.Locale;\n import java.util.Set;\n import javassist.NotFoundException;\n+import org.apache.commons.lang.SerializationUtils;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -77,7 +78,8 @@ public ConnectorFacadeProxy createConnectorBean(\n             throws NotFoundException {\n \n         final ConnInstance connInstanceClone =\n-                new ConnInstance(resource.getConnector());\n+                (ConnInstance) SerializationUtils.clone(\n+                resource.getConnector());\n \n         final Set<ConnConfProperty> configuration =\n                 new HashSet<ConnConfProperty>();"},{"sha":"251a92d69e6cf11ee1c38b9fbe6c16d7a5e7b53d","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -13,7 +13,8 @@\n  */\n package org.syncope.core.init;\n \n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import org.apache.commons.lang.StringUtils;\n@@ -147,7 +148,7 @@ public void unregisterJob(final Long taskId) {\n     @Transactional(readOnly = true)\n     public void load() {\n         // 1. jobs for SchedTasks\n-        List<SchedTask> tasks = taskDAO.findAll(SchedTask.class);\n+        Set<SchedTask> tasks = new HashSet(taskDAO.findAll(SchedTask.class));\n         tasks.addAll(taskDAO.findAll(SyncTask.class));\n         for (SchedTask task : tasks) {\n             try {"},{"sha":"947869aabbb71fdba2de89914dddf2afecf1da85","filename":"core/src/main/java/org/syncope/core/monitor/CacheMonitor.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fmonitor%2FCacheMonitor.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -20,8 +20,8 @@\n import org.aspectj.lang.ProceedingJoinPoint;\n import org.aspectj.lang.annotation.Around;\n import org.aspectj.lang.annotation.Aspect;\n-import org.hibernate.Session;\n-import org.hibernate.stat.Statistics;\n+//import org.hibernate.Session;\n+//import org.hibernate.stat.Statistics;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -69,9 +69,9 @@ public final Object log(final ProceedingJoinPoint pjp)\n             throws Throwable {\n \n         Object result;\n-        if (!LOG.isDebugEnabled()) {\n+        /*if (!LOG.isDebugEnabled()) {*/\n             result = pjp.proceed();\n-        } else {\n+        /*} else {\n             Statistics statistics =\n                     ((Session) entityManager.getDelegate()).getSessionFactory().\n                     getStatistics();\n@@ -99,7 +99,7 @@ public final Object log(final ProceedingJoinPoint pjp)\n                         ratio, pjp.getTarget().getClass().getName(),\n                         pjp.getSignature().toShortString()));\n             }\n-        }\n+        }*/\n \n         return result;\n     }"},{"sha":"2e629f35631c2d571dd2d5f4903c50f8aac99e9b","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":38,"deletions":63,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,29 +14,17 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.persistence.FetchType;\n-import javax.persistence.ManyToMany;\n-import javax.persistence.MappedSuperclass;\n \n-@MappedSuperclass\n public abstract class AbstractAttributable extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -4801685541488201119L;\n \n-    /**\n-     * Provisioning target resources.\n-     */\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    protected Set<ExternalResource> externalResources;\n-\n     public <T extends AbstractAttr> T getAttribute(final String schemaName) {\n         T result = null;\n         T attribute;\n@@ -97,51 +85,7 @@ public <T extends AbstractVirAttr> T getVirtualAttribute(\n         return result;\n     }\n \n-    public boolean addExternalResource(\n-            final ExternalResource externalResource) {\n-\n-        if (externalResources == null) {\n-            externalResources = new HashSet<ExternalResource>();\n-        }\n-        return externalResources.add(externalResource);\n-    }\n-\n-    public boolean removeExternalResource(\n-            final ExternalResource externalResource) {\n-\n-        return externalResources == null\n-                ? true\n-                : externalResources.remove(externalResource);\n-    }\n-\n-    public Set<ExternalResource> getExternalResources() {\n-        return externalResources == null\n-                ? Collections.EMPTY_SET\n-                : externalResources;\n-    }\n-\n-    public Set<String> getExternalResourceNames() {\n-        Set<String> resourceNames;\n-\n-        if (externalResources == null) {\n-            resourceNames = Collections.EMPTY_SET;\n-        } else {\n-            resourceNames = new HashSet<String>(externalResources.size());\n-            for (ExternalResource resource : externalResources) {\n-                resourceNames.add(resource.getName());\n-            }\n-        }\n-\n-        return resourceNames;\n-    }\n-\n-    public void setExternalResources(\n-            final Set<ExternalResource> externalResources) {\n-\n-        this.externalResources = externalResources;\n-    }\n-\n-    protected Map<AbstractSchema, AbstractAttr> getAttributesMap() {\n+    protected Map<AbstractSchema, AbstractAttr> getAttrMap() {\n         final Map<AbstractSchema, AbstractAttr> map =\n                 new HashMap<AbstractSchema, AbstractAttr>();\n \n@@ -152,7 +96,7 @@ protected Map<AbstractSchema, AbstractAttr> getAttributesMap() {\n         return map;\n     }\n \n-    protected Map<AbstractDerSchema, AbstractDerAttr> getDerivedAttributesMap() {\n+    protected Map<AbstractDerSchema, AbstractDerAttr> getDerAttrMap() {\n         final Map<AbstractDerSchema, AbstractDerAttr> map =\n                 new HashMap<AbstractDerSchema, AbstractDerAttr>();\n \n@@ -163,7 +107,7 @@ protected Map<AbstractDerSchema, AbstractDerAttr> getDerivedAttributesMap() {\n         return map;\n     }\n \n-    protected Map<AbstractVirSchema, AbstractVirAttr> getVirtualAttributesMap() {\n+    protected Map<AbstractVirSchema, AbstractVirAttr> getVirAttrMap() {\n         final Map<AbstractVirSchema, AbstractVirAttr> map =\n                 new HashMap<AbstractVirSchema, AbstractVirAttr>();\n \n@@ -209,9 +153,40 @@ public abstract <T extends AbstractVirAttr> boolean removeVirtualAttribute(\n     public abstract void setVirtualAttributes(\n             List<? extends AbstractVirAttr> virtualAttributes);\n \n-    public final SimpleDateFormat getDateFormatter() {\n-        final SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n-        dateFormatter.setLenient(false);\n-        return dateFormatter;\n+    protected abstract Set<ExternalResource> externalResources();\n+\n+    public boolean addExternalResource(\n+            final ExternalResource externalResource) {\n+\n+        return externalResources().add(externalResource);\n+    }\n+\n+    public boolean removeExternalResource(\n+            final ExternalResource externalResource) {\n+\n+        return externalResources().remove(externalResource);\n+    }\n+\n+    public Set<ExternalResource> getExternalResources() {\n+        return externalResources();\n+    }\n+\n+    public Set<String> getExternalResourceNames() {\n+        Set<String> resourceNames =\n+                new HashSet<String>(externalResources().size());\n+        for (ExternalResource resource : externalResources()) {\n+            resourceNames.add(resource.getName());\n+        }\n+\n+        return resourceNames;\n+    }\n+\n+    public void setExternalResources(\n+            final Set<ExternalResource> externalResources) {\n+\n+        externalResources().clear();\n+        if (externalResources != null) {\n+            externalResources().addAll(externalResources);\n+        }\n     }\n }"},{"sha":"8016d703ad97bf4b74b5b7c05760221bba574218","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -58,6 +58,12 @@ protected DecimalFormat initialValue() {\n \n     private static final long serialVersionUID = -9017214159540857901L;\n \n+    public final SimpleDateFormat getDateFormatter() {\n+        final SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n+        dateFormatter.setLenient(false);\n+        return dateFormatter;\n+    }\n+\n     /**\n      * @param property the integer representing a boolean value\n      * @return the boolean value corresponding to the property param"},{"sha":"39d9ca6fc6ec73d6c674d4e3b084dac6722dcc22","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerSchema.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -22,6 +22,8 @@\n @MappedSuperclass\n public abstract class AbstractDerSchema extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -6173643493348674060L;\n+\n     @Id\n     private String name;\n "},{"sha":"5b5c7c77d8369b9784f0bcdde9995fcda410dce9","filename":"core/src/main/java/org/syncope/core/persistence/beans/AccountPolicy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -29,6 +29,7 @@ public AccountPolicy() {\n     public AccountPolicy(boolean global) {\n         super();\n \n-        this.type = global ? PolicyType.GLOBAL_ACCOUNT : PolicyType.ACCOUNT;\n+        this.type = global\n+                ? PolicyType.GLOBAL_ACCOUNT : PolicyType.ACCOUNT;\n     }\n }"},{"sha":"b65b5b11bc68b1ce320b71aa20e3880d2aea6e21","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnInstance.java","status":"modified","additions":5,"deletions":32,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -16,7 +16,6 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -30,7 +29,6 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n-import org.hibernate.annotations.Type;\n import org.syncope.core.util.XMLSerializer;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.ConnectorCapability;\n@@ -70,6 +68,7 @@ public class ConnInstance extends AbstractBaseBean {\n      */\n     @ElementCollection(fetch = FetchType.EAGER)\n     @Enumerated(EnumType.STRING)\n+    @Column(name = \"capabilities\")\n     private Set<ConnectorCapability> capabilities;\n \n     /**\n@@ -78,46 +77,20 @@ public class ConnInstance extends AbstractBaseBean {\n      * contains annotated ConfigurationProperties (@ConfigurationProperty).\n      */\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String xmlConfiguration;\n \n     private String displayName;\n \n     /**\n-     * Provisioning target resources associated to the connector.\n-     * The connector can be considered the resource's type.\n+     * External resources associated to the connector.\n      */\n-    @OneToMany(cascade = {CascadeType.REFRESH, CascadeType.MERGE},\n-    mappedBy = \"connector\")\n+    @OneToMany(cascade = {CascadeType.ALL}, mappedBy = \"connector\")\n     private List<ExternalResource> resources;\n \n     public ConnInstance() {\n         super();\n-        capabilities = EnumSet.noneOf(ConnectorCapability.class);\n-    }\n-\n-    /**\n-     * Copy constructor.\n-     * \n-     * @param that\n-     */\n-    public ConnInstance(final ConnInstance that) {\n-        super();\n-        this.bundleName = that.bundleName;\n-        this.capabilities = that.capabilities.isEmpty()\n-                ? EnumSet.noneOf(ConnectorCapability.class)\n-                : EnumSet.copyOf(that.capabilities);\n-        this.connectorName = that.connectorName;\n-        this.displayName = that.displayName;\n-        this.id = that.id;\n-\n-        this.resources = new ArrayList<ExternalResource>();\n-        if (that.resources != null) {\n-            this.resources.addAll(that.resources);\n-        }\n-\n-        this.version = that.version;\n-        this.xmlConfiguration = that.xmlConfiguration;\n+        capabilities = new HashSet<ConnectorCapability>();\n     }\n \n     public String getVersion() {"},{"sha":"41762a89b7a23d1d0593ef5b3f9eecc987d42264","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -33,8 +33,8 @@\n import javax.validation.Valid;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.lang.StringUtils;\n-import org.hibernate.annotations.Type;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -73,7 +73,8 @@ public class ExternalResource extends AbstractBaseBean {\n     /**\n      * The resource type is identified by the associated connector.\n      */\n-    @ManyToOne(fetch = FetchType.EAGER)\n+    @ManyToOne(fetch = FetchType.EAGER, cascade = {CascadeType.MERGE})\n+    @NotNull\n     private ConnInstance connector;\n \n     /**\n@@ -91,11 +92,11 @@ public class ExternalResource extends AbstractBaseBean {\n     /**\n      * Attribute mappings.\n      * \n-     * List type canno be used. Please, take a look at \n+     * List type cannot be used. Please, take a look at \n      * https://hibernate.onjira.com/browse/HHH-1718\n      */\n-    @OneToMany(cascade = {CascadeType.MERGE, CascadeType.REMOVE},\n-    orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true,\n+    fetch = FetchType.EAGER, mappedBy = \"resource\")\n     @Valid\n     private Set<SchemaMapping> mappings;\n \n@@ -153,14 +154,14 @@ public class ExternalResource extends AbstractBaseBean {\n      * Configuration properties that are overridden from the connector instance.\n      */\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String xmlConfiguration;\n \n     /**\n      * SyncToken for calling ConnId's sync().\n      */\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String serializedSyncToken;\n \n     /**"},{"sha":"03c9c3f256a06945a6600ad7f62123603ea788e9","filename":"core/src/main/java/org/syncope/core/persistence/beans/Notification.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -29,7 +29,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-import org.hibernate.annotations.Type;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.validation.entity.NotificationCheck;\n import org.syncope.core.util.XMLSerializer;\n@@ -44,16 +43,17 @@ public class Notification extends AbstractBaseBean {\n     private Long id;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"events\")\n     private List<String> events;\n \n     @NotNull\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String xmlAbout;\n \n     @NotNull\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String xmlRecipients;\n \n     @Column(nullable = false)"},{"sha":"602ba631c07b6ae5d34a4b65feb87fff80c3339c","filename":"core/src/main/java/org/syncope/core/persistence/beans/PasswordPolicy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -29,6 +29,7 @@ public PasswordPolicy() {\n     public PasswordPolicy(boolean global) {\n         super();\n \n-        this.type = global ? PolicyType.GLOBAL_PASSWORD : PolicyType.PASSWORD;\n+        this.type = global\n+                ? PolicyType.GLOBAL_PASSWORD : PolicyType.PASSWORD;\n     }\n }"},{"sha":"fc541a7b29c43267ea1b5f22e51087cb4908cf6b","filename":"core/src/main/java/org/syncope/core/persistence/beans/Policy.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,14 +14,13 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n \n-import org.hibernate.annotations.Type;\n+import javax.validation.constraints.NotNull;\n import org.syncope.core.persistence.validation.entity.PolicyCheck;\n import org.syncope.core.util.XMLSerializer;\n import org.syncope.types.AbstractPolicySpec;\n@@ -36,25 +35,21 @@ public abstract class Policy extends AbstractBaseBean {\n     @Id\n     private Long id;\n \n-    @Column(nullable = false)\n+    @NotNull\n     private String description;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Enumerated(EnumType.STRING)\n     protected PolicyType type;\n \n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String specification;\n \n     public Long getId() {\n         return id;\n     }\n \n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n     public String getDescription() {\n         return description;\n     }"},{"sha":"00d3fcecf8a6988e514ed527f131bfdd0234ee59","filename":"core/src/main/java/org/syncope/core/persistence/beans/PropagationTask.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -20,7 +20,6 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-import org.hibernate.annotations.Type;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.validation.entity.PropagationTaskCheck;\n@@ -63,7 +62,7 @@ public class PropagationTask extends Task {\n      * Attributes to be propagated.\n      */\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String xmlAttributes;\n \n     /**"},{"sha":"2a8b98906c2b7314a93ab60a16ff9893d0c232d6","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,7 +19,6 @@\n import javax.persistence.ManyToOne;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.hibernate.annotations.Type;\n import org.syncope.client.to.UserTO;\n import org.syncope.core.persistence.validation.entity.SyncTaskCheck;\n import org.syncope.core.scheduling.SyncJob;\n@@ -38,7 +37,7 @@ public class SyncTask extends SchedTask {\n     private ExternalResource resource;\n \n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String userTemplate;\n \n     @Basic"},{"sha":"b5ce421d75f968eec74b6753068db7afc9b7c397","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -16,11 +16,15 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorColumn;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n import javax.persistence.OneToMany;\n \n @Entity\n+@Inheritance\n+@DiscriminatorColumn(name = \"DTYPE\")\n public class Task extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 5837401178128177511L;"},{"sha":"06e04aeb0091bec12ad023903c0d35f03e97f6bc","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExec.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -22,7 +22,6 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n-import org.hibernate.annotations.Type;\n \n /**\n  * An execution (with result) of a Task.\n@@ -55,7 +54,7 @@ public class TaskExec extends AbstractBaseBean {\n      * Any information to be accompained to this execution's result.\n      */\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String message;\n \n     /**"},{"sha":"a3e8241d74c4fd35cdc9543a743eefe0f7efbb1a","filename":"core/src/main/java/org/syncope/core/persistence/beans/UserRequest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.validation.constraints.NotNull;\n-import org.hibernate.annotations.Type;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.UserTO;\n import org.syncope.core.util.XMLSerializer;\n@@ -38,7 +37,7 @@ public class UserRequest extends AbstractBaseBean {\n \n     @NotNull\n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String payload;\n \n     @NotNull"},{"sha":"ea515fc4b91505c7bd1c3a6dc897bb616568ec8b","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -17,6 +17,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -41,6 +42,7 @@ public class MAttr extends AbstractAttr {\n     private Membership owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n+    @Column(name = \"schema_name\")\n     private MSchema schema;\n \n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true,"},{"sha":"d8b71ce5ebe35cc036f56ef44976ed2a33614a9f","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrUniqueValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n@@ -34,6 +35,7 @@ public class MAttrUniqueValue extends AbstractAttrUniqueValue {\n     private MAttr attribute;\n \n     @ManyToOne(optional = false)\n+    @Column(name = \"schema_name\")\n     private MSchema schema;\n \n     @Override"},{"sha":"2118238d95cb3a7ad2ee60ad862abb820c13a49d","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MDerAttr.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -24,10 +24,13 @@\n @Entity\n public class MDerAttr extends AbstractDerAttr {\n \n+    private static final long serialVersionUID = -443509121923448129L;\n+\n     @ManyToOne\n     private Membership owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n-    MDerSchema derivedSchema;\n+    private MDerSchema derivedSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {"},{"sha":"578749c44459f1e9a7eb66932da238802fbc7a48","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MDerSchema.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,12 +14,14 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n+import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n-import org.hibernate.annotations.Cache;\n-import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n-@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@Cacheable\n public class MDerSchema extends AbstractDerSchema {\n+\n+    private static final long serialVersionUID = -4694082505732174583L;\n+\n }"},{"sha":"6c34b2add6b1c754edb4825f4b16b30b5dd9afc4","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MVirSchema.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirSchema.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,13 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n+import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n-import org.hibernate.annotations.Cache;\n-import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n \n @Entity\n-@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@Cacheable\n public class MVirSchema extends AbstractVirSchema {\n \n     private static final long serialVersionUID = 1563166228898033559L;"},{"sha":"c2cf2045924a5b85b9bd7c59369edd783485292c","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -71,14 +71,18 @@ public Membership() {\n         attributes = new ArrayList<MAttr>();\n         derivedAttributes = new ArrayList<MDerAttr>();\n         virtualAttributes = new ArrayList<MVirAttr>();\n-        externalResources = Collections.EMPTY_SET;\n     }\n \n     @Override\n     public Long getId() {\n         return id;\n     }\n \n+    @Override\n+    protected Set<ExternalResource> externalResources() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n     public SyncopeRole getSyncopeRole() {\n         return syncopeRole;\n     }"},{"sha":"5f37b649e6bdccfa94af7fb4e2da10a6cd6e04dc","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -17,6 +17,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -41,6 +42,7 @@ public class RAttr extends AbstractAttr {\n     private SyncopeRole owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n+    @Column(name = \"schema_name\")\n     private RSchema schema;\n \n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true,"},{"sha":"ad3cbb211b8f03f4a1c791583c5aa29e6f0d722a","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrUniqueValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n@@ -34,6 +35,7 @@ public class RAttrUniqueValue extends AbstractAttrUniqueValue {\n     private RAttr attribute;\n \n     @ManyToOne(optional = false)\n+    @Column(name = \"schema_name\")\n     private RSchema schema;\n \n     @Override"},{"sha":"a3edacfc5921286820505674a26664da0b616e0e","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RDerAttr.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -24,10 +24,13 @@\n @Entity\n public class RDerAttr extends AbstractDerAttr {\n \n+    private static final long serialVersionUID = 8007080005675899946L;\n+\n     @ManyToOne\n     private SyncopeRole owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n-    RDerSchema derivedSchema;\n+    private RDerSchema derivedSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {"},{"sha":"d73408591d2be4dac0eca838c1093a95f1750329","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RDerSchema.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,19 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n public class RDerSchema extends AbstractDerSchema {\n \n-    @OneToMany(mappedBy = \"derivedSchema\")\n-    private List<RDerAttr> derivedAttributes;\n+    private static final long serialVersionUID = -6868889736207576372L;\n \n-    public RDerSchema() {\n-        derivedAttributes = new ArrayList<RDerAttr>();\n-    }\n }"},{"sha":"e47ece0b60e3022a511fcb3b162873a82b0f04e0","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RVirSchema.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirSchema.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,13 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n+import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n-import org.hibernate.annotations.Cache;\n-import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n \n @Entity\n-@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@Cacheable\n public class RVirSchema extends AbstractVirSchema {\n \n     private static final long serialVersionUID = -8799489777077514655L;"},{"sha":"0d698180b2718bd213e721ec006c2756e90051da","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -24,10 +24,11 @@\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n@@ -36,6 +37,7 @@\n import javax.validation.Valid;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -45,6 +47,7 @@\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.PasswordPolicy;\n \n @Entity\n@@ -61,7 +64,7 @@ public class SyncopeRole extends AbstractAttributable {\n     @Id\n     private Long id;\n \n-    @Column(nullable = false)\n+    @NotNull\n     private String name;\n \n     @ManyToOne(optional = true)\n@@ -113,6 +116,17 @@ public class SyncopeRole extends AbstractAttributable {\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private AccountPolicy accountPolicy;\n \n+    /**\n+     * Provisioning external resources.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+    @JoinColumn(name = \"role_id\"),\n+    inverseJoinColumns =\n+    @JoinColumn(name = \"externalResource_name\"))\n+    @Valid\n+    private Set<ExternalResource> externalResources;\n+\n     public SyncopeRole() {\n         super();\n \n@@ -125,13 +139,19 @@ public SyncopeRole() {\n         inheritVirtualAttributes = getBooleanAsInteger(false);\n         inheritPasswordPolicy = getBooleanAsInteger(false);\n         inheritAccountPolicy = getBooleanAsInteger(false);\n+        externalResources = new HashSet<ExternalResource>();\n     }\n \n     @Override\n     public Long getId() {\n         return id;\n     }\n \n+    @Override\n+    protected Set<ExternalResource> externalResources() {\n+        return externalResources;\n+    }\n+\n     public String getName() {\n         return name;\n     }\n@@ -253,7 +273,7 @@ public List<RAttr> findInheritedAttributes() {\n         final Map<RSchema, RAttr> result = new HashMap<RSchema, RAttr>();\n \n         if (isInheritAttributes() && getParent() != null) {\n-            final Map<AbstractSchema, AbstractAttr> attrMap = getAttributesMap();\n+            final Map<AbstractSchema, AbstractAttr> attrMap = getAttrMap();\n \n             // Add attributes not specialized\n             for (RAttr attr : (Collection<RAttr>) getParent().getAttributes()) {\n@@ -294,7 +314,7 @@ public List<RDerAttr> findInheritedDerivedAttributes() {\n \n         if (isInheritDerivedAttributes() && getParent() != null) {\n             final Map<AbstractDerSchema, AbstractDerAttr> attrMap =\n-                    getDerivedAttributesMap();\n+                    getDerAttrMap();\n \n             // Add attributes not specialized\n             for (RDerAttr attr :\n@@ -337,7 +357,7 @@ public List<RVirAttr> findInheritedVirtualAttributes() {\n \n         if (isInheritVirtualAttributes() && getParent() != null) {\n             final Map<AbstractVirSchema, AbstractVirAttr> attrMap =\n-                    getVirtualAttributesMap();\n+                    getVirAttrMap();\n \n             // Add attributes not specialized\n             for (RVirAttr attr :"},{"sha":"ac638b6f27eb26b6a7bcddfc8ba13d0909a1b402","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -38,8 +38,12 @@\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n import javax.persistence.Lob;\n+import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n@@ -50,7 +54,6 @@\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.RandomStringUtils;\n-import org.hibernate.annotations.Type;\n import org.springframework.security.core.codec.Base64;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n@@ -111,7 +114,7 @@ public class SyncopeUser extends AbstractAttributable {\n     private String status;\n \n     @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n+    //@Type(type = \"org.hibernate.type.StringClobType\")\n     private String token;\n \n     @Temporal(TemporalType.TIMESTAMP)\n@@ -163,6 +166,16 @@ public class SyncopeUser extends AbstractAttributable {\n     @Max(1)\n     private Integer suspended;\n \n+    /**\n+     * Provisioning external resources.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+    @JoinColumn(name = \"user_id\"),\n+    inverseJoinColumns =\n+    @JoinColumn(name = \"externalResource_name\"))\n+    private Set<ExternalResource> externalResources;\n+\n     public SyncopeUser() {\n         super();\n \n@@ -173,13 +186,19 @@ public SyncopeUser() {\n         passwordHistory = new ArrayList<String>();\n         failedLogins = 0;\n         suspended = getBooleanAsInteger(Boolean.FALSE);\n+        externalResources = new HashSet<ExternalResource>();\n     }\n \n     @Override\n     public Long getId() {\n         return id;\n     }\n \n+    @Override\n+    protected Set<ExternalResource> externalResources() {\n+        return externalResources;\n+    }\n+\n     public boolean addMembership(final Membership membership) {\n         return memberships.contains(membership) || memberships.add(membership);\n     }\n@@ -308,7 +327,10 @@ public List<? extends AbstractAttr> getAttributes() {\n \n     @Override\n     public void setAttributes(final List<? extends AbstractAttr> attributes) {\n-        this.attributes = (List<UAttr>) attributes;\n+        this.attributes.clear();\n+        if (attributes != null && !attributes.isEmpty()) {\n+            this.attributes.addAll((List<UAttr>) attributes);\n+        }\n     }\n \n     @Override\n@@ -334,7 +356,10 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n     public void setDerivedAttributes(\n             final List<? extends AbstractDerAttr> derivedAttributes) {\n \n-        this.derivedAttributes = (List<UDerAttr>) derivedAttributes;\n+        this.derivedAttributes.clear();\n+        if (derivedAttributes != null && !derivedAttributes.isEmpty()) {\n+            this.derivedAttributes.addAll((List<UDerAttr>) derivedAttributes);\n+        }\n     }\n \n     @Override\n@@ -360,7 +385,10 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n     public void setVirtualAttributes(\n             final List<? extends AbstractVirAttr> virtualAttributes) {\n \n-        this.virtualAttributes = (List<UVirAttr>) virtualAttributes;\n+        this.virtualAttributes.clear();\n+        if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\n+            this.virtualAttributes.addAll((List<UVirAttr>) virtualAttributes);\n+        }\n     }\n \n     public String getWorkflowId() {"},{"sha":"6f1f354f824d63502440827025e342060f0c0621","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -17,6 +17,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -53,6 +54,7 @@ public class UAttr extends AbstractAttr {\n      * The schema of this attribute.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n+    @Column(name = \"schema_name\")\n     private USchema schema;\n \n     /**"},{"sha":"93146d88587063df750e0a4cbeb387fc471ecc0a","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrUniqueValue.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n@@ -34,6 +35,7 @@ public class UAttrUniqueValue extends AbstractAttrUniqueValue {\n     private UAttr attribute;\n \n     @ManyToOne(optional = false)\n+    @Column(name = \"schema_name\")\n     private USchema schema;\n \n     @Override"},{"sha":"df1b1643184fec144765b7bca75c0ca264fb1cea","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -30,7 +30,7 @@ public class UDerAttr extends AbstractDerAttr {\n     private SyncopeUser owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    UDerSchema derivedSchema;\n+    private UDerSchema derivedSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {"},{"sha":"b3ddaf6c8d2cc827cabae3cc380396eeba5a3e52","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerSchema.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,10 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import javax.persistence.Entity;\n-import javax.persistence.OneToMany;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.validation.entity.USchemaCheck;\n \n@@ -27,10 +24,4 @@ public class UDerSchema extends AbstractDerSchema {\n \n     private static final long serialVersionUID = 6244467775394201229L;\n \n-    @OneToMany(mappedBy = \"derivedSchema\")\n-    private List<UDerAttr> derivedAttributes;\n-\n-    public UDerSchema() {\n-        derivedAttributes = new ArrayList<UDerAttr>();\n-    }\n }"},{"sha":"b849a6687e1b38bd8992950211e1544d21a0211d","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UVirSchema.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirSchema.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,14 +14,13 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n-import org.hibernate.annotations.Cache;\n-import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.validation.entity.USchemaCheck;\n \n @Entity\n-@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@Cacheable\n @USchemaCheck\n public class UVirSchema extends AbstractVirSchema {\n "},{"sha":"aee88d24cc874097cb2bdfd1444da32ecd39668c","filename":"core/src/main/java/org/syncope/core/persistence/dao/ConnInstanceDAO.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceDAO.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -16,7 +16,6 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.ConnInstance;\n-import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface ConnInstanceDAO extends DAO {\n@@ -25,8 +24,6 @@ public interface ConnInstanceDAO extends DAO {\n \n     List<ConnInstance> findAll();\n \n-    List<ExternalResource> findExternalResources(ConnInstance connector);\n-\n     ConnInstance save(ConnInstance connector)\n             throws InvalidEntityException;\n "},{"sha":"bf8533114c6e5abb48c94ca9c38dc6555635102a","filename":"core/src/main/java/org/syncope/core/persistence/dao/DAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -23,4 +23,6 @@ public interface DAO {\n     void detach(Object object);\n \n     void flush();\n+\n+    void clear();\n }"},{"sha":"3fcf6a90e8a92d703596c5a0dd1d8f2c7f9aab9d","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -52,4 +52,9 @@ public void detach(final Object object) {\n     public void flush() {\n         entityManager.flush();\n     }\n+\n+    @Override\n+    public void clear() {\n+        entityManager.clear();\n+    }\n }"},{"sha":"6ba155233dd277720ecbf5077405fbf71cc24de3","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnInstanceDAOImpl.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -43,26 +43,11 @@ public List<ConnInstance> findAll() {\n         return query.getResultList();\n     }\n \n-    @Override\n-    public List<ExternalResource> findExternalResources(\n-            final ConnInstance connector) {\n-\n-        final Query query = entityManager.createQuery(\"SELECT e \"\n-                + \"FROM \" + ExternalResource.class.getSimpleName() + \" e \"\n-                + \"WHERE connector=:connector\");\n-\n-        query.setParameter(\"connector\", connector);\n-\n-        return query.getResultList();\n-    }\n-\n     @Override\n     public ConnInstance save(final ConnInstance connector) {\n         final ConnInstance merged = entityManager.merge(connector);\n \n-        final List<ExternalResource> resources = findExternalResources(merged);\n-\n-        for (ExternalResource resource : resources) {\n+        for (ExternalResource resource : merged.getResources()) {\n             try {\n                 connInstanceLoader.registerConnector(resource);\n             } catch (NotFoundException e) {"},{"sha":"ab5c0f384d476a4b968cd513b938a9ba596ba055","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -36,8 +36,7 @@ public Policy find(final Long id) {\n     @Override\n     public List<? extends Policy> find(final PolicyType type) {\n         final Query query = entityManager.createQuery(\n-                \"SELECT e FROM Policy e WHERE type=:type\");\n-\n+                \"SELECT e FROM Policy e WHERE e.type=:type\");\n         query.setParameter(\"type\", type);\n \n         return query.getResultList();"},{"sha":"439d119bf6db02216a429a2f008eeceb3a3e6a69","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -81,8 +81,8 @@ public List<ExternalResource> findAllByPriority() {\n      * called by SyncJob.\n      * \n      * @see org.syncope.core.scheduling.SyncJob\n-     * \n-     * @param execution entity to be merged\n+     *\n+     * @param resource  entity to be merged\n      * @return the same entity, updated\n      */\n     @Override"},{"sha":"37e97066293d14bdf0fe6c031e1626e025830fe0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -66,12 +66,12 @@ public SyncopeRole find(final String name, final Long parentId) {\n         if (parentId != null) {\n             query = entityManager.createQuery(\n                     \"SELECT r FROM SyncopeRole r WHERE \"\n-                    + \"name=:name AND parent.id=:parentId\");\n+                    + \"r.name=:name AND r.parent.id=:parentId\");\n             query.setParameter(\"parentId\", parentId);\n         } else {\n             query = entityManager.createQuery(\n                     \"SELECT r FROM SyncopeRole r WHERE \"\n-                    + \"name=:name AND parent IS NULL\");\n+                    + \"r.name=:name AND r.parent IS NULL\");\n         }\n         query.setParameter(\"name\", name);\n \n@@ -83,7 +83,7 @@ public SyncopeRole find(final String name, final Long parentId) {\n     public List<SyncopeRole> findChildren(final Long roleId) {\n         Query query = entityManager.createQuery(\n                 \"SELECT r FROM SyncopeRole r WHERE \"\n-                + \"parent.id=:roleId\");\n+                + \"r.parent.id=:roleId\");\n         query.setParameter(\"roleId\", roleId);\n         return query.getResultList();\n     }\n@@ -130,8 +130,7 @@ public void delete(final Long id) {\n         }\n \n         Query query = entityManager.createQuery(\n-                \"SELECT r FROM SyncopeRole r WHERE \"\n-                + \"parent_id=:id\");\n+                \"SELECT r FROM SyncopeRole r WHERE r.parent.id=:id\");\n         query.setParameter(\"id\", id);\n         List<SyncopeRole> childrenRoles = query.getResultList();\n         for (SyncopeRole child : childrenRoles) {"},{"sha":"1450346dbbb43707160921523eeec07ae53933a4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -44,8 +44,8 @@ private <T extends Task> StringBuilder buildfindAllQuery(\n                 new StringBuilder(\"SELECT e FROM \").append(reference.\n                 getSimpleName()).append(\" e \");\n         if (SchedTask.class.equals(reference)) {\n-            queryString.append(\"WHERE e NOT IN (FROM \").\n-                    append(SyncTask.class.getName()).append(\") \");\n+            queryString.append(\"WHERE e.id NOT IN (SELECT e.id FROM \").\n+                    append(SyncTask.class.getSimpleName()).append(\" e) \");\n         }\n \n         return queryString;\n@@ -124,10 +124,9 @@ public List<PropagationTask> findAll(final ExternalResource resource,\n \n     @Override\n     public <T extends Task> Integer count(final Class<T> reference) {\n-        Query countQuery =\n-                entityManager.createNativeQuery(\"SELECT COUNT(id) \"\n-                + \"FROM Task WHERE DTYPE=:dtype\");\n-        countQuery.setParameter(\"dtype\", reference.getSimpleName());\n+        Query countQuery = entityManager.createNativeQuery(\n+                \"SELECT COUNT(id) FROM Task WHERE DTYPE=?1\");\n+        countQuery.setParameter(1, reference.getSimpleName());\n \n         return ((Number) countQuery.getSingleResult()).intValue();\n     }"},{"sha":"aed430b64efc524eb29b129e6e2ca7123ceb2471","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskExecDAOImpl.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -18,6 +18,8 @@\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.TaskExecDAO;\n@@ -48,22 +50,27 @@ private <T extends Task> TaskExec findLatest(final T task,\n \n     @Override\n     public <T extends Task> TaskExec findLatestStarted(final T task) {\n-\n         return findLatest(task, \"startDate\");\n     }\n \n     @Override\n     public <T extends Task> TaskExec findLatestEnded(final T task) {\n-\n         return findLatest(task, \"endDate\");\n     }\n \n     @Override\n     public <T extends Task> List<TaskExec> findAll(Class<T> reference) {\n-        Query query = entityManager.createQuery(\"SELECT e \"\n-                + \"FROM \" + TaskExec.class.getSimpleName() + \" e \"\n-                + \"WHERE e.task.class=:taskClass\");\n-        query.setParameter(\"taskClass\", reference.getSimpleName());\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(\n+                TaskExec.class.getSimpleName()).append(\" e WHERE e.task IN (\").\n+                append(\"SELECT t FROM \").append(reference.getSimpleName()).\n+                append(\" t\");\n+        if (SchedTask.class.equals(reference)) {\n+            queryString.append(\" WHERE t.id NOT IN (SELECT t.id FROM \").\n+                    append(SyncTask.class.getSimpleName()).append(\" t) \");\n+        }\n+        queryString.append(')');\n+\n+        Query query = entityManager.createQuery(queryString.toString());\n         return query.getResultList();\n     }\n "},{"sha":"9ab34f1b17aea93b57ad3ac41cf86852f8fcca0b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -200,11 +200,14 @@ public List<SyncopeUser> findByAttrValue(final String schemaName,\n         query.setParameter(\"schemaName\", schemaName);\n         query.setParameter(\"stringValue\", attrValue.getStringValue());\n         query.setParameter(\"booleanValue\",\n-                attrValue.getBooleanValue() == null\n-                ? null\n+                attrValue.getBooleanValue() == null ? null\n                 : attrValue.getBooleanAsInteger(attrValue.getBooleanValue()));\n-        query.setParameter(\"dateValue\", attrValue.getDateValue(),\n-                TemporalType.TIMESTAMP);\n+        if (attrValue.getDateValue() != null) {\n+            query.setParameter(\"dateValue\",\n+                    attrValue.getDateValue(), TemporalType.TIMESTAMP);\n+        } else {\n+            query.setParameter(\"dateValue\", null);\n+        }\n         query.setParameter(\"longValue\", attrValue.getLongValue());\n         query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n \n@@ -341,8 +344,7 @@ public SyncopeUser save(final SyncopeUser user) {\n \n         for (AbstractVirAttr virtual : merged.getVirtualAttributes()) {\n             virtual.setValues(user.getVirtualAttribute(\n-                    virtual.getVirtualSchema().getName()).\n-                    getValues());\n+                    virtual.getVirtualSchema().getName()).getValues());\n         }\n \n         return merged;"},{"sha":"28fba760e46b5476ba13771baea99c4e5fd3c671","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":36,"deletions":43,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,11 +19,8 @@\n import java.util.Calendar;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Random;\n import java.util.Set;\n import javax.persistence.Query;\n@@ -101,8 +98,8 @@ private String getAdminRolesFilter(final Set<Long> adminRoles) {\n     public Integer count(final Set<Long> adminRoles,\n             final NodeCond searchCondition) {\n \n-        Map<Integer, Object> parameters = Collections.synchronizedMap(\n-                new HashMap<Integer, Object>());\n+        List<Object> parameters = Collections.synchronizedList(\n+                new ArrayList<Object>());\n \n         // 1. get the query string from the search condition\n         StringBuilder queryString = getQuery(searchCondition, parameters);\n@@ -168,56 +165,52 @@ public List<SyncopeUser> search(final Set<Long> adminRoles,\n     public boolean matches(final SyncopeUser user,\n             final NodeCond searchCondition) {\n \n-        Map<Integer, Object> parameters = Collections.synchronizedMap(\n-                new HashMap<Integer, Object>());\n+        List<Object> parameters = Collections.synchronizedList(\n+                new ArrayList<Object>());\n \n         // 1. get the query string from the search condition\n         StringBuilder queryString = getQuery(searchCondition, parameters);\n \n         // 2. take into account the passed user\n         queryString.insert(0, \"SELECT u.user_id FROM (\");\n-        queryString.append(\") u WHERE user_id=:matchesUserId\");\n+        queryString.append(\") u WHERE user_id=?\").append(\n+                setParameter(parameters, user.getId()));\n \n         // 3. prepare the search query\n         Query query = entityManager.createNativeQuery(queryString.toString());\n-\n+        \n         // 4. populate the search query with parameter values\n         fillWithParameters(query, parameters);\n-        query.setParameter(\"matchesUserId\", user.getId());\n \n         // 5. executes query\n         List<SyncopeUser> result = query.getResultList();\n \n         return !result.isEmpty();\n     }\n \n-    private Integer setParameter(final Map<Integer, Object> parameters,\n+    private int setParameter(final List<Object> parameters,\n             final Object parameter) {\n \n-        Integer key;\n+        int key;\n         synchronized (parameters) {\n-            do {\n-                key = random.nextInt(Integer.MAX_VALUE);\n-            } while (parameters.containsKey(key));\n-\n-            parameters.put(key, parameter);\n+            parameters.add(parameter);\n+            key = parameters.size();\n         }\n \n         return key;\n     }\n \n     private void fillWithParameters(final Query query,\n-            final Map<Integer, Object> parameters) {\n-\n-        for (Entry<Integer, Object> entry : parameters.entrySet()) {\n-            if (entry.getValue() instanceof Date) {\n-                query.setParameter(\"param\" + entry.getKey(),\n-                        (Date) entry.getValue(), TemporalType.TIMESTAMP);\n-            } else if (entry.getValue() instanceof Boolean) {\n-                query.setParameter(\"param\" + entry.getKey(),\n-                        ((Boolean) entry.getValue()) ? 1 : 0);\n+            final List<Object> parameters) {\n+\n+        for (int i = 0; i < parameters.size(); i++) {\n+            if (parameters.get(i) instanceof Date) {\n+                query.setParameter(i + 1, (Date) parameters.get(i),\n+                        TemporalType.TIMESTAMP);\n+            } else if (parameters.get(i) instanceof Boolean) {\n+                query.setParameter(i + 1, ((Boolean) parameters.get(i)) ? 1 : 0);\n             } else {\n-                query.setParameter(\"param\" + entry.getKey(), entry.getValue());\n+                query.setParameter(i + 1, parameters.get(i));\n             }\n         }\n     }\n@@ -226,8 +219,8 @@ private List<SyncopeUser> doSearch(final Set<Long> adminRoles,\n             final NodeCond nodeCond,\n             final int page, final int itemsPerPage) {\n \n-        Map<Integer, Object> parameters = Collections.synchronizedMap(\n-                new HashMap<Integer, Object>());\n+        List<Object> parameters = Collections.synchronizedList(\n+                new ArrayList<Object>());\n \n         // 1. get the query string from the search condition\n         final StringBuilder queryString = getQuery(nodeCond, parameters);\n@@ -292,7 +285,7 @@ private List<SyncopeUser> doSearch(final Set<Long> adminRoles,\n     }\n \n     private StringBuilder getQuery(final NodeCond nodeCond,\n-            final Map<Integer, Object> parameters) {\n+            final List<Object> parameters) {\n \n         StringBuilder query = new StringBuilder();\n \n@@ -348,7 +341,7 @@ private StringBuilder getQuery(final NodeCond nodeCond,\n     }\n \n     private String getQuery(final MembershipCond cond,\n-            final boolean not, final Map<Integer, Object> parameters) {\n+            final boolean not, final List<Object> parameters) {\n \n         StringBuilder query = new StringBuilder(\n                 \"SELECT DISTINCT user_id FROM user_search WHERE \");\n@@ -363,10 +356,10 @@ private String getQuery(final MembershipCond cond,\n                 append(\"FROM user_search_membership WHERE \");\n \n         if (cond.getRoleId() != null) {\n-            query.append(\"role_id=:param\").append(\n+            query.append(\"role_id=?\").append(\n                     setParameter(parameters, cond.getRoleId()));\n         } else if (cond.getRoleName() != null) {\n-            query.append(\"role_name=:param\").append(\n+            query.append(\"role_name=?\").append(\n                     setParameter(parameters, cond.getRoleName()));\n         }\n \n@@ -376,7 +369,7 @@ private String getQuery(final MembershipCond cond,\n     }\n \n     private String getQuery(final ResourceCond cond,\n-            final boolean not, final Map<Integer, Object> parameters) {\n+            final boolean not, final List<Object> parameters) {\n \n         final StringBuilder query = new StringBuilder(\n                 \"SELECT DISTINCT user_id FROM user_search WHERE \");\n@@ -390,7 +383,7 @@ private String getQuery(final ResourceCond cond,\n         query.append(\"SELECT DISTINCT user_id \").\n                 append(\"FROM user_search_resource WHERE \");\n \n-        query.append(\"resource_name=:param\").append(\n+        query.append(\"resource_name=?\").append(\n                 setParameter(parameters, cond.getResourceName()));\n \n         query.append(\")\");\n@@ -401,7 +394,7 @@ private String getQuery(final ResourceCond cond,\n     private void fillAttributeQuery(final StringBuilder query,\n             final UAttrValue attrValue, final USchema schema,\n             final AttributeCond cond, final boolean not,\n-            final Map<Integer, Object> parameters) {\n+            final List<Object> parameters) {\n \n         String column = (cond instanceof SyncopeUserCond)\n                 ? cond.getSchema()\n@@ -446,7 +439,7 @@ private void fillAttributeQuery(final StringBuilder query,\n                 } else {\n                     query.append(\"=\");\n                 }\n-                query.append(\":param\").append(\n+                query.append(\"?\").append(\n                         setParameter(parameters, attrValue.getValue()));\n                 break;\n \n@@ -457,7 +450,7 @@ private void fillAttributeQuery(final StringBuilder query,\n                 } else {\n                     query.append(\">=\");\n                 }\n-                query.append(\":param\").append(\n+                query.append(\"?\").append(\n                         setParameter(parameters, attrValue.getValue()));\n                 break;\n \n@@ -468,7 +461,7 @@ private void fillAttributeQuery(final StringBuilder query,\n                 } else {\n                     query.append(\">\");\n                 }\n-                query.append(\":param\").append(\n+                query.append(\"?\").append(\n                         setParameter(parameters, attrValue.getValue()));\n                 break;\n \n@@ -479,7 +472,7 @@ private void fillAttributeQuery(final StringBuilder query,\n                 } else {\n                     query.append(\"<=\");\n                 }\n-                query.append(\":param\").append(\n+                query.append(\"?\").append(\n                         setParameter(parameters, attrValue.getValue()));\n                 break;\n \n@@ -490,7 +483,7 @@ private void fillAttributeQuery(final StringBuilder query,\n                 } else {\n                     query.append(\"<\");\n                 }\n-                query.append(\":param\").append(\n+                query.append(\"?\").append(\n                         setParameter(parameters, attrValue.getValue()));\n                 break;\n \n@@ -531,7 +524,7 @@ private String getFieldName(final SchemaType type) {\n     }\n \n     private String getQuery(final AttributeCond cond,\n-            final boolean not, final Map<Integer, Object> parameters) {\n+            final boolean not, final List<Object> parameters) {\n \n         USchema schema = schemaDAO.find(cond.getSchema(), USchema.class);\n         if (schema == null) {\n@@ -563,7 +556,7 @@ private String getQuery(final AttributeCond cond,\n     }\n \n     private String getQuery(final SyncopeUserCond cond,\n-            final boolean not, final Map<Integer, Object> parameters) {\n+            final boolean not, final List<Object> parameters) {\n \n         Field syncopeUserClassField = null;\n         // loop over SyncopeUser class and all superclasses searching for field"},{"sha":"9bd70e3dd2923c311c6c9e8232d824dfba8c523b","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/InvalidEntityException.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -24,6 +24,8 @@\n \n public class InvalidEntityException extends ValidationException {\n \n+    private static final long serialVersionUID = 3249297275444409691L;\n+\n     private String entityClassSimpleName;\n \n     private final Map<Class, Set<EntityViolationType>> violations;"},{"sha":"c8ba74e5ef989b20b90fdf10a8f4b79499b75bf1","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -63,7 +63,8 @@ public boolean isValid(\n \n         switch (object.getType()) {\n             case GLOBAL_PASSWORD:\n-                // just one policy with type PASSWORD\n+                \n+                // just one GLOBAL_PASSWORD policy\n                 final PasswordPolicy passwordPolicy =\n                         policyDAO.getGlobalPasswordPolicy();\n "},{"sha":"28c06e7c7fd6c5fda2f2ac0f642d2b47c5a8b7f6","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -32,6 +32,7 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -40,7 +41,6 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n-import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.init.ConnInstanceLoader;\n@@ -52,7 +52,6 @@\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ConnInstanceDataBinder;\n-import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.types.ConnConfPropSchema;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -68,10 +67,7 @@ public class ConnInstanceController extends AbstractController {\n     private ConnInstanceDAO connInstanceDAO;\n \n     @Autowired\n-    private ResourceDAO respourceDAO;\n-\n-    @Autowired\n-    private ResourceDataBinder resourceDataBinder;\n+    private ResourceDAO resourceDAO;\n \n     @Autowired\n     private ConnInstanceDataBinder binder;\n@@ -149,19 +145,35 @@ public void delete(@PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n-\n         if (connInstance == null) {\n             LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n \n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n \n+        if (!connInstance.getResources().isEmpty()) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException invalidConnInstance =\n+                    new SyncopeClientException(\n+                    SyncopeClientExceptionType.ResourceExist);\n+            for (ExternalResource resource : connInstance.getResources()) {\n+                invalidConnInstance.addElement(resource.getName());\n+            }\n+\n+            scce.addException(invalidConnInstance);\n+            throw scce;\n+        }\n+\n         connInstanceDAO.delete(connectorId);\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n+    @Transactional(readOnly = true)\n     public List<ConnInstanceTO> list(\n             @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException {\n@@ -186,6 +198,7 @@ public List<ConnInstanceTO> list(\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{connectorId}\")\n+    @Transactional(readOnly = true)\n     public ConnInstanceTO read(\n             @PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n@@ -204,27 +217,24 @@ public ConnInstanceTO read(\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/check/{resourceName}\")\n+    @Transactional(readOnly = true)\n     public ModelAndView check(@PathVariable(\"resourceName\") String resourceName)\n             throws NotFoundException {\n \n-        final ExternalResource resource = respourceDAO.find(resourceName);\n-\n+        final ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             LOG.error(\"Missing resource: {}\", resourceName);\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n         ConnectorFacadeProxy connector;\n-\n         try {\n             connector = connInstanceLoader.getConnector(resource);\n         } catch (BeansException e) {\n             throw new NotFoundException(\n                     \"Connector \" + resource.getConnector().getId(), e);\n         }\n \n-        ModelAndView mav = new ModelAndView();\n-\n         Boolean verify = Boolean.FALSE;\n         try {\n             if (connector != null) {\n@@ -235,14 +245,13 @@ public ModelAndView check(@PathVariable(\"resourceName\") String resourceName)\n             LOG.warn(\"Connector validation failed\", ignore);\n         }\n \n-        mav.addObject(verify);\n-\n-        return mav;\n+        return new ModelAndView().addObject(verify);\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/bundle/list\")\n+    @Transactional(readOnly = true)\n     public List<ConnBundleTO> getBundles(\n             @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException, MissingConfKeyException {\n@@ -334,11 +343,23 @@ public List<ConnBundleTO> getBundles(\n         return connectorBundleTOs;\n     }\n \n-    private List<String> getSchemaNames(\n-            final ExternalResource resource, final boolean showall)\n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/schema/{resourceName}/list\")\n+    @Transactional(readOnly = true)\n+    public List<String> getSchemaNames(\n+            @PathVariable(\"resourceName\") final String resourceName,\n+            @RequestParam(required = false,\n+            value = \"showall\", defaultValue = \"false\") final boolean showall)\n             throws NotFoundException {\n \n-        // We cannot use bean because this method could be used during\n+        ExternalResource resource = resourceDAO.find(resourceName);\n+        if (resource == null) {\n+            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+        }\n+\n+        // We cannot use Spring bean because this method could be used during\n         // resource definition or modification: bean couldn't exist or bean\n         // couldn't be updated.\n         // This is the reason why we should take a \"not mature\" connector\n@@ -352,31 +373,10 @@ private List<String> getSchemaNames(\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/schema/list\")\n-    public List<String> getSchemaNames(\n-            @RequestBody final ResourceTO resourceTO)\n-            throws NotFoundException {\n-\n-        return getSchemaNames(\n-                resourceDataBinder.create(resourceTO), false);\n-    }\n-\n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/schema/list/all\")\n-    public List<String> getAllSchemaNames(\n-            @RequestBody final ResourceTO resourceTO)\n-            throws NotFoundException {\n-\n-        return getSchemaNames(\n-                resourceDataBinder.create(resourceTO), true);\n-    }\n-\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{connectorId}/configurationProperty/list\")\n+    @Transactional(readOnly = true)\n     public List<ConnConfProperty> getConfigurationProperties(\n             @PathVariable(\"connectorId\") final Long connectorId)\n             throws NotFoundException {"},{"sha":"6317c668e68bd1e79efc6145ef96e281d6f1081b","filename":"core/src/main/java/org/syncope/core/rest/controller/HibernateStats.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/779a2fcbb21f75a0c7ee498df086ef66cde6342a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FHibernateStats.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/779a2fcbb21f75a0c7ee498df086ef66cde6342a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FHibernateStats.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FHibernateStats.java?ref=779a2fcbb21f75a0c7ee498df086ef66cde6342a","patch":"@@ -1,44 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.rest.controller;\n-\n-import javax.persistence.EntityManager;\n-import javax.servlet.http.HttpServletRequest;\n-import org.hibernate.Session;\n-import org.hibernate.SessionFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/hibernate\")\n-public class HibernateStats {\n-\n-    @Autowired\n-    private EntityManager entityManager;\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/stats\")\n-    public ModelAndView stats(final HttpServletRequest request) {\n-\n-        SessionFactory sessionFactory =\n-                ((Session) entityManager.getDelegate()).getSessionFactory();\n-\n-        return new ModelAndView(\"hibernateStats\").addObject(\"sessionFactory\",\n-                sessionFactory);\n-    }\n-}"},{"sha":"4ffc59aff5db00655c0ddd1d74ebe49842d16e2d","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":50,"deletions":56,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -46,18 +46,19 @@ public class PolicyController extends AbstractController {\n     private PolicyDAO policyDAO;\n \n     @Autowired\n-    private PolicyDataBinder policyDataBinder;\n+    private PolicyDataBinder binder;\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/create\")\n     public PasswordPolicyTO create(final HttpServletResponse response,\n             final @RequestBody PasswordPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        final PasswordPolicy policy =\n-                (PasswordPolicy) policyDataBinder.getPolicy(policyTO);\n+        LOG.debug(\"Creating policy \" + policyTO);\n+\n+        final PasswordPolicy policy = binder.getPolicy(null, policyTO);\n \n-        return (PasswordPolicyTO) create(policy, policyTO);\n+        return binder.getPolicyTO(policyDAO.save(policy));\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n@@ -66,10 +67,11 @@ public AccountPolicyTO create(final HttpServletResponse response,\n             final @RequestBody AccountPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        final AccountPolicy policy =\n-                (AccountPolicy) policyDataBinder.getPolicy(policyTO);\n+        LOG.debug(\"Creating policy \" + policyTO);\n+\n+        final AccountPolicy policy = binder.getPolicy(null, policyTO);\n \n-        return (AccountPolicyTO) create(policy, policyTO);\n+        return binder.getPolicyTO(policyDAO.save(policy));\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n@@ -78,21 +80,22 @@ public SyncPolicyTO create(final HttpServletResponse response,\n             final @RequestBody SyncPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        final SyncPolicy policy =\n-                (SyncPolicy) policyDataBinder.getPolicy(policyTO);\n+        LOG.debug(\"Creating policy \" + policyTO);\n+\n+        final SyncPolicy policy = binder.getPolicy(null, policyTO);\n \n-        return (SyncPolicyTO) create(policy, policyTO);\n+        return binder.getPolicyTO(policyDAO.save(policy));\n     }\n \n-    private PolicyTO create(final Policy policy, final PolicyTO policyTO)\n-            throws SyncopeClientCompositeErrorException {\n+    private <T extends PolicyTO, K extends Policy> T update(\n+            T policyTO, K policy) {\n \n-        LOG.debug(\"Creating policy \" + policyTO);\n+        LOG.debug(\"Updating policy \" + policyTO);\n \n-        Policy actual = policyDAO.save(policy);\n-        policyTO.setId(actual.getId());\n+        binder.getPolicy(policy, policyTO);\n+        policy = policyDAO.save(policy);\n \n-        return policyTO;\n+        return binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n@@ -101,13 +104,13 @@ public PasswordPolicyTO update(final HttpServletResponse response,\n             final @RequestBody PasswordPolicyTO policyTO)\n             throws NotFoundException {\n \n-        LOG.debug(\"Updating policy \" + policyTO);\n-\n-        final PasswordPolicy policy =\n-                (PasswordPolicy) policyDataBinder.getPolicy(policyTO);\n+        Policy policy = policyDAO.find(policyTO.getId());\n+        if (policy == null || !(policy instanceof PasswordPolicy)) {\n+            throw new NotFoundException(\n+                    \"PasswordPolicy with id \" + policyTO.getId());\n+        }\n \n-        final Policy actual = update(policy);\n-        return (PasswordPolicyTO) policyDataBinder.getPolicyTO(actual);\n+        return update(policyTO, policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n@@ -116,13 +119,13 @@ public AccountPolicyTO update(final HttpServletResponse response,\n             final @RequestBody AccountPolicyTO policyTO)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n-        LOG.debug(\"Updating policy \" + policyTO);\n-\n-        final AccountPolicy policy =\n-                (AccountPolicy) policyDataBinder.getPolicy(policyTO);\n+        Policy policy = policyDAO.find(policyTO.getId());\n+        if (policy == null || !(policy instanceof AccountPolicy)) {\n+            throw new NotFoundException(\n+                    \"AccountPolicy with id \" + policyTO.getId());\n+        }\n \n-        final Policy actual = update(policy);\n-        return (AccountPolicyTO) policyDataBinder.getPolicyTO(actual);\n+        return update(policyTO, policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n@@ -131,25 +134,13 @@ public SyncPolicyTO update(final HttpServletResponse response,\n             final @RequestBody SyncPolicyTO policyTO)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n-        LOG.debug(\"Updating policy \" + policyTO);\n-\n-        final SyncPolicy policy =\n-                (SyncPolicy) policyDataBinder.getPolicy(policyTO);\n-\n-        final Policy actual = update(policy);\n-        return (SyncPolicyTO) policyDataBinder.getPolicyTO(actual);\n-    }\n-\n-    private Policy update(final Policy policy)\n-            throws NotFoundException {\n-\n-        LOG.debug(\"Updating policy \" + policy.getId());\n-\n-        if (policy.getId() == null) {\n-            throw new NotFoundException(\"Policy with null id\");\n+        Policy policy = policyDAO.find(policyTO.getId());\n+        if (policy == null || !(policy instanceof SyncPolicy)) {\n+            throw new NotFoundException(\n+                    \"SyncPolicy with id \" + policyTO.getId());\n         }\n \n-        return policyDAO.save(policy);\n+        return update(policyTO, policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n@@ -163,9 +154,8 @@ public List<PolicyTO> listByType(\n                 policyDAO.find(PolicyType.valueOf(kind.toUpperCase()));\n \n         final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n-\n         for (Policy policy : policies) {\n-            policyTOs.add(policyDataBinder.getPolicyTO(policy));\n+            policyTOs.add(binder.getPolicyTO(policy));\n         }\n \n         return policyTOs;\n@@ -177,13 +167,14 @@ public PasswordPolicyTO getGlobalPasswordPolicy(\n             final HttpServletResponse response)\n             throws NotFoundException {\n \n-        LOG.debug(\"Reading password policy\");\n+        LOG.debug(\"Reading global password policy\");\n+\n         PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No password policy found\");\n         }\n \n-        return (PasswordPolicyTO) policyDataBinder.getPolicyTO(policy);\n+        return (PasswordPolicyTO) binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n@@ -192,13 +183,14 @@ public AccountPolicyTO getGlobalAccountPolicy(\n             final HttpServletResponse response)\n             throws NotFoundException {\n \n-        LOG.debug(\"Reading account policy\");\n+        LOG.debug(\"Reading global account policy\");\n+\n         AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No account policy found\");\n         }\n \n-        return (AccountPolicyTO) policyDataBinder.getPolicyTO(policy);\n+        return (AccountPolicyTO) binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n@@ -207,13 +199,14 @@ public SyncPolicyTO getGlobalSyncPolicy(\n             final HttpServletResponse response)\n             throws NotFoundException {\n \n-        LOG.debug(\"Reading sync policy\");\n+        LOG.debug(\"Reading global sync policy\");\n+\n         SyncPolicy policy = policyDAO.getGlobalSyncPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No sync policy found\");\n         }\n \n-        return (SyncPolicyTO) policyDataBinder.getPolicyTO(policy);\n+        return (SyncPolicyTO) binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n@@ -223,13 +216,14 @@ public PolicyTO read(\n             @PathVariable(\"id\") final Long id)\n             throws NotFoundException {\n \n-        LOG.debug(\"Reading policy\");\n-        Policy policy = policyDAO.find(id);\n+        LOG.debug(\"Reading policy with id {}\", id);\n \n+        Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n-        return policyDataBinder.getPolicyTO(policy);\n+\n+        return binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")"},{"sha":"dfa524d2fdd871ea0c67931280f63110ba849a47","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -76,9 +76,9 @@ public ResourceTO create(final HttpServletResponse response,\n         if (resourceTO.getName() != null\n                 && resourceDAO.find(resourceTO.getName()) != null) {\n             SyncopeClientException ex = new SyncopeClientException(\n-                    SyncopeClientExceptionType.DuplicateUniqueValue);\n+                    SyncopeClientExceptionType.DataIntegrityViolation);\n \n-            ex.addElement(resourceTO.getName());\n+            ex.addElement(\"Existing \" + resourceTO.getName());\n             scce.addException(ex);\n \n             throw scce;"},{"sha":"6e6b4e895503e79ac94377c4472b8901f403ea24","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -44,8 +44,6 @@\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.AttrValueDAO;\n import org.syncope.core.persistence.dao.ConfDAO;\n@@ -419,13 +417,6 @@ protected PropagationByResource fill(\n                 propByRes.add(PropagationOperation.DELETE, resource.getName());\n \n                 attributable.removeExternalResource(resource);\n-\n-                if (attributableUtil == AttributableUtil.USER) {\n-                    resource.removeUser((SyncopeUser) attributable);\n-                }\n-                if (attributableUtil == AttributableUtil.ROLE) {\n-                    resource.removeRole((SyncopeRole) attributable);\n-                }\n             }\n         }\n \n@@ -441,13 +432,6 @@ protected PropagationByResource fill(\n                 propByRes.add(PropagationOperation.CREATE, resource.getName());\n \n                 attributable.addExternalResource(resource);\n-\n-                if (attributableUtil == attributableUtil.USER) {\n-                    resource.addUser((SyncopeUser) attributable);\n-                }\n-                if (attributableUtil == attributableUtil.ROLE) {\n-                    resource.addRole((SyncopeRole) attributable);\n-                }\n             }\n         }\n \n@@ -808,18 +792,6 @@ protected void fill(final AbstractAttributable attributable,\n \n             if (resource != null) {\n                 attributable.addExternalResource(resource);\n-\n-                switch (attributableUtil) {\n-                    case USER:\n-                        resource.addUser((SyncopeUser) attributable);\n-                        break;\n-\n-                    case ROLE:\n-                        resource.addRole((SyncopeRole) attributable);\n-                        break;\n-\n-                    default:\n-                }\n             }\n         }\n "},{"sha":"440676620e3c1574029fe414b5d936079d239644","filename":"core/src/main/java/org/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":100,"deletions":97,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -35,111 +35,114 @@ public class PolicyDataBinder {\n      * @param policy bean.\n      * @return policy TO.\n      */\n-    public PolicyTO getPolicyTO(final Policy policy) {\n+    public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n         final PolicyTO policyTO;\n+        switch (policy.getType()) {\n+            case GLOBAL_PASSWORD:\n+                policyTO = new PasswordPolicyTO(true);\n+                ((PasswordPolicyTO) policyTO).setSpecification(\n+                        (PasswordPolicySpec) policy.getSpecification());\n+                break;\n+\n+            case PASSWORD:\n+                policyTO = new PasswordPolicyTO();\n+                ((PasswordPolicyTO) policyTO).setSpecification(\n+                        (PasswordPolicySpec) policy.getSpecification());\n+                break;\n+\n+            case GLOBAL_ACCOUNT:\n+                policyTO = new AccountPolicyTO(true);\n+                ((AccountPolicyTO) policyTO).setSpecification(\n+                        (AccountPolicySpec) policy.getSpecification());\n+                break;\n+\n+            case ACCOUNT:\n+                policyTO = new AccountPolicyTO();\n+                ((AccountPolicyTO) policyTO).setSpecification(\n+                        (AccountPolicySpec) policy.getSpecification());\n+                break;\n+\n+            case GLOBAL_SYNC:\n+                policyTO = new SyncPolicyTO(true);\n+                ((SyncPolicyTO) policyTO).setSpecification(\n+                        (SyncPolicySpec) policy.getSpecification());\n+                break;\n+\n+            case SYNC:\n+            default:\n+                policyTO = new SyncPolicyTO();\n+                ((SyncPolicyTO) policyTO).setSpecification(\n+                        (SyncPolicySpec) policy.getSpecification());\n \n-        if (policy != null) {\n-            switch (policy.getType()) {\n-                case GLOBAL_PASSWORD:\n-                    policyTO = new PasswordPolicyTO(true);\n-                    ((PasswordPolicyTO) policyTO).setSpecification(\n-                            (PasswordPolicySpec) policy.getSpecification());\n-                    break;\n-\n-                case PASSWORD:\n-                    policyTO = new PasswordPolicyTO();\n-                    ((PasswordPolicyTO) policyTO).setSpecification(\n-                            (PasswordPolicySpec) policy.getSpecification());\n-                    break;\n-\n-                case GLOBAL_ACCOUNT:\n-                    policyTO = new AccountPolicyTO(true);\n-                    ((AccountPolicyTO) policyTO).setSpecification(\n-                            (AccountPolicySpec) policy.getSpecification());\n-                    break;\n-\n-                case ACCOUNT:\n-                    policyTO = new AccountPolicyTO();\n-                    ((AccountPolicyTO) policyTO).setSpecification(\n-                            (AccountPolicySpec) policy.getSpecification());\n-                    break;\n-\n-                case GLOBAL_SYNC:\n-                    policyTO = new SyncPolicyTO(true);\n-                    ((SyncPolicyTO) policyTO).setSpecification(\n-                            (SyncPolicySpec) policy.getSpecification());\n-                    break;\n-\n-                case SYNC:\n-                default:\n-                    policyTO = new SyncPolicyTO();\n-                    ((SyncPolicyTO) policyTO).setSpecification(\n-                            (SyncPolicySpec) policy.getSpecification());\n-\n-            }\n-\n-            policyTO.setId(policy.getId());\n-            policyTO.setDescription(policy.getDescription());\n-        } else {\n-            policyTO = null;\n         }\n \n-        return policyTO;\n+        policyTO.setId(policy.getId());\n+        policyTO.setDescription(policy.getDescription());\n+\n+        return (T) policyTO;\n     }\n \n-    /**\n-     * Get policy bean from policy TO.\n-     * @param policyTO TO\n-     * @return policy bean\n-     */\n-    public Policy getPolicy(final PolicyTO policyTO) {\n-        final Policy policy;\n-\n-        if (policyTO != null) {\n-            switch (policyTO.getType()) {\n-                case GLOBAL_PASSWORD:\n-                    policy = new PasswordPolicy(true);\n-                    policy.setSpecification(\n-                            ((PasswordPolicyTO) policyTO).getSpecification());\n-                    break;\n-\n-                case PASSWORD:\n-                    policy = new PasswordPolicy();\n-                    policy.setSpecification(\n-                            ((PasswordPolicyTO) policyTO).getSpecification());\n-                    break;\n-\n-                case GLOBAL_ACCOUNT:\n-                    policy = new AccountPolicy(true);\n-                    policy.setSpecification(\n-                            ((AccountPolicyTO) policyTO).getSpecification());\n-                    break;\n-\n-                case ACCOUNT:\n-                    policy = new AccountPolicy();\n-                    policy.setSpecification(\n-                            ((AccountPolicyTO) policyTO).getSpecification());\n-                    break;\n-\n-                case GLOBAL_SYNC:\n-                    policy = new SyncPolicy(true);\n-                    policy.setSpecification(\n-                            ((SyncPolicyTO) policyTO).getSpecification());\n-                    break;\n-\n-                case SYNC:\n-                default:\n-                    policy = new SyncPolicy();\n-                    policy.setSpecification(\n-                            ((SyncPolicyTO) policyTO).getSpecification());\n-            }\n-\n-            policy.setId(policyTO.getId());\n-            policy.setDescription(policyTO.getDescription());\n-        } else {\n-            policy = null;\n+    public <T extends Policy> T getPolicy(\n+            T policy, final PolicyTO policyTO) {\n+\n+        if (policy != null && policy.getType() != policyTO.getType()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Cannot update %s from %s\",\n+                    policy.getType(), policyTO.getType()));\n         }\n \n+        switch (policyTO.getType()) {\n+            case GLOBAL_PASSWORD:\n+                if (policy == null) {\n+                    policy = (T) new PasswordPolicy(true);\n+                }\n+                policy.setSpecification(\n+                        ((PasswordPolicyTO) policyTO).getSpecification());\n+                break;\n+\n+            case PASSWORD:\n+                if (policy == null) {\n+                    policy = (T) new PasswordPolicy();\n+                }\n+                policy.setSpecification(\n+                        ((PasswordPolicyTO) policyTO).getSpecification());\n+                break;\n+\n+            case GLOBAL_ACCOUNT:\n+                if (policy == null) {\n+                    policy = (T) new AccountPolicy(true);\n+                }\n+                policy.setSpecification(\n+                        ((AccountPolicyTO) policyTO).getSpecification());\n+                break;\n+\n+            case ACCOUNT:\n+                if (policy == null) {\n+                    policy = (T) new AccountPolicy();\n+                }\n+                policy.setSpecification(\n+                        ((AccountPolicyTO) policyTO).getSpecification());\n+                break;\n+\n+            case GLOBAL_SYNC:\n+                if (policy == null) {\n+                    policy = (T) new SyncPolicy(true);\n+                }\n+                policy.setSpecification(\n+                        ((SyncPolicyTO) policyTO).getSpecification());\n+                break;\n+\n+            case SYNC:\n+            default:\n+                if (policy == null) {\n+                    policy = (T) new SyncPolicy();\n+                }\n+                policy.setSpecification(\n+                        ((SyncPolicyTO) policyTO).getSpecification());\n+        }\n+\n+        policy.setDescription(policyTO.getDescription());\n+\n         return policy;\n     }\n }"},{"sha":"2351e5ac4117a39afb4ce84c89957328a535b155","filename":"core/src/main/java/org/syncope/core/security/AsymmetricCipher.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FAsymmetricCipher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FAsymmetricCipher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FAsymmetricCipher.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.security;\n+package org.syncope.core.security;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;","previous_filename":"core/src/main/java/org/syncope/core/persistence/security/AsymmetricCipher.java"},{"sha":"a67618df1f4c7dc89bc06437eb2dde166869613d","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -75,7 +75,7 @@ public void setSyncopeUserDetailsService(\n     }\n \n     @Override\n-    @Transactional(noRollbackFor= {BadCredentialsException.class})\n+    @Transactional(noRollbackFor = {BadCredentialsException.class})\n     public Authentication authenticate(final Authentication authentication)\n             throws AuthenticationException {\n "},{"sha":"cfb957db2c3f46a789193b51a3536f729fef9a8a","filename":"core/src/main/java/org/syncope/core/util/SchemaExporter.java","status":"removed","additions":0,"deletions":148,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/779a2fcbb21f75a0c7ee498df086ef66cde6342a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/779a2fcbb21f75a0c7ee498df086ef66cde6342a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FSchemaExporter.java?ref=779a2fcbb21f75a0c7ee498df086ef66cde6342a","patch":"@@ -1,148 +0,0 @@\n-/*\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.syncope.core.util;\n-\n-import java.io.File;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.hibernate.cfg.Configuration;\n-import org.hibernate.tool.hbm2ddl.SchemaExport;\n-\n-public class SchemaExporter {\n-\n-    private Configuration cfg;\n-\n-    public SchemaExporter(String[] packageNames)\n-            throws Exception {\n-\n-        cfg = new Configuration();\n-        cfg.setProperty(\"hibernate.hbm2ddl.auto\", \"create\");\n-\n-        List<Class<?>> classes = new ArrayList<Class<?>>();\n-        for (int i = 0; i < packageNames.length; i++) {\n-            classes.addAll(getClasses(packageNames[i]));\n-        }\n-\n-        for (Class<?> clazz : classes) {\n-            cfg.addAnnotatedClass(clazz);\n-        }\n-    }\n-\n-    /**\n-     * Method that actually creates the file.  \n-     * @param dbDialect to use\n-     */\n-    private void generate(Dialect dialect) {\n-        cfg.setProperty(\"hibernate.dialect\", dialect.getDialectClass());\n-\n-        SchemaExport export = new SchemaExport(cfg);\n-        export.setFormat(true);\n-        export.setDelimiter(\";\");\n-        export.execute(true, false, false, true);\n-    }\n-\n-    /**\n-     * Utility method used to fetch Class list based on a package name.\n-     * @param packageName should be the package containing your annotated beans.\n-     */\n-    private List<Class<?>> getClasses(final String packageName)\n-            throws Exception {\n-\n-        List<Class<?>> classes = new ArrayList<Class<?>>();\n-        File directory = null;\n-\n-        try {\n-            ClassLoader cld = Thread.currentThread().\n-                    getContextClassLoader();\n-            if (cld == null) {\n-                throw new ClassNotFoundException(\n-                        \"Can't get class loader.\");\n-            }\n-            String path = packageName.replace('.', '/');\n-            URL resource = cld.getResource(path);\n-            if (resource == null) {\n-                throw new ClassNotFoundException(\"No resource for \"\n-                        + path);\n-            }\n-            directory = new File(resource.getFile());\n-        } catch (NullPointerException x) {\n-            throw new ClassNotFoundException(packageName + \" (\"\n-                    + directory\n-                    + \") does not appear to be a valid package\");\n-        }\n-\n-\n-        if (directory.exists()) {\n-            String[] files = directory.list();\n-            for (int i = 0; i < files.length; i++) {\n-                if (files[i].endsWith(\".class\")) {\n-                    // removes the .class extension\n-                    classes.add(Class.forName(packageName + '.'\n-                            + files[i].substring(0, files[i].length()\n-                            - 6)));\n-                }\n-            }\n-        } else {\n-            throw new ClassNotFoundException(packageName\n-                    + \" is not a valid package\");\n-        }\n-\n-        return classes;\n-\n-    }\n-\n-    /**\n-     * Holds the classnames of hibernate dialects for easy reference.\n-     */\n-    private static enum Dialect {\n-\n-        ORACLE(\"org.hibernate.dialect.Oracle10gDialect\"),\n-        POSTGRESQL(\"org.hibernate.dialect.PostgreSQLDialect\"),\n-        MYSQL(\"org.hibernate.dialect.MySQL5InnoDBDialect\"),\n-        H2(\"org.hibernate.dialect.H2Dialect\"),\n-        HSQL(\"org.hibernate.dialect.HSQLDialect\");\n-\n-        private String dialectClass;\n-\n-        private Dialect(String dialectClass) {\n-            this.dialectClass = dialectClass;\n-        }\n-\n-        public String getDialectClass() {\n-            return dialectClass;\n-        }\n-    }\n-\n-    public static void main(final String[] args)\n-            throws Exception {\n-\n-        Dialect dialect = Dialect.HSQL;\n-        if (args.length == 1) {\n-            try {\n-                dialect = Dialect.valueOf(args[0]);\n-            } catch (IllegalArgumentException e) {\n-                System.err.println(\"Dialect not recognized, reverting to \"\n-                        + dialect);\n-            }\n-        }\n-\n-        SchemaExporter gen = new SchemaExporter(new String[]{\n-                    \"org.syncope.core.persistence.beans\",\n-                    \"org.syncope.core.persistence.beans.user\",\n-                    \"org.syncope.core.persistence.beans.role\",\n-                    \"org.syncope.core.persistence.beans.membership\"});\n-        gen.generate(dialect);\n-    }\n-}"},{"sha":"ef70124dd6246f58c99eaa19cf8f73b4cbfb8e96","filename":"core/src/main/resources/indexes.xml","status":"modified","additions":21,"deletions":20,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -16,6 +16,7 @@\n <properties>\n     <comment>Additional indexes (in respect to JPA's)</comment>\n \n+    <!-- These indexes are not needed by OpenJPA, only by Hibernate\n     <entry key=\"roleNameIndex\">CREATE INDEX roleNameIndex ON SyncopeRole(name)</entry>\n     <entry key=\"ConnInstance_capabilities_Index_1\">CREATE INDEX ConnInstance_ca_Index_1 ON ConnInstance_capabilities(ConnInstance_id)</entry>    \n     <entry key=\"ExternalResource_Index_2\">CREATE INDEX ExternalResourc_Index_2 ON ExternalResource(connector_id)</entry>\n@@ -26,30 +27,18 @@\n     <entry key=\"MAttr_Index_7\">CREATE INDEX MAttr_Index_7 ON MAttr(owner_id)</entry>\n     <entry key=\"MAttrUniqueValue_Index_9\">CREATE INDEX MAttrUniqueValu_Index_9 ON MAttrUniqueValue(schema_name)</entry>\n     <entry key=\"MAttrValue_Index_10\">CREATE INDEX MAttrValue_Index_10 ON MAttrValue(attribute_id)</entry>\n-    <entry key=\"MAttrValue_stringvalueIndex\">CREATE INDEX MAttrValue_stringvalueIndex ON MAttrValue(stringvalue)</entry>\n-    <entry key=\"MAttrValue_datevalueIndex\">CREATE INDEX MAttrValue_datevalueIndex ON MAttrValue(datevalue)</entry>\n-    <entry key=\"MAttrValue_longvalueIndex\">CREATE INDEX MAttrValue_longvalueIndex ON MAttrValue(longvalue)</entry>\n-    <entry key=\"MAttrValue_doublevalueIndex\">CREATE INDEX MAttrValue_doublevalueIndex ON MAttrValue(doublevalue)</entry>\n-    <entry key=\"MAttrValue_booleanvalueIndex\">CREATE INDEX MAttrValue_booleanvalueIndex ON MAttrValue(booleanvalue)</entry>\n     <entry key=\"MDerAttr_Index_11\">CREATE INDEX MDerAttr_Index_11 ON MDerAttr(derivedSchema_name)</entry>\n     <entry key=\"MDerAttr_Index_12\">CREATE INDEX MDerAttr_Index_12 ON MDerAttr(owner_id)</entry>\n     <entry key=\"MVirAttr_Index_13\">CREATE INDEX MVirAttr_Index_13 ON MVirAttr(virtualSchema_name)</entry>\n     <entry key=\"MVirAttr_Index_14\">CREATE INDEX MVirAttr_Index_14 ON MVirAttr(owner_id)</entry>\n     <entry key=\"Membership_Index_15\">CREATE INDEX Membership_Index_15 ON Membership(syncopeUser_id)</entry>\n     <entry key=\"Membership_Index_16\">CREATE INDEX Membership_Index_16 ON Membership(syncopeRole_id)</entry>\n-    <entry key=\"Membership_ExternalResource_Index_17\">CREATE INDEX Membership_Exte_Index_17 ON Membership_ExternalResource(externalResources_name)</entry>\n-    <entry key=\"Membership_ExternalResource_Index_18\">CREATE INDEX Membership_Exte_Index_18 ON Membership_ExternalResource(Membership_id)</entry>\n     <entry key=\"NotificationTask_recipients_Index_19\">CREATE INDEX NotificationTas_Index_19 ON NotificationTask_recipients(NotificationTask_id)</entry>\n     <entry key=\"Notification_events_Index_20\">CREATE INDEX Notification_ev_Index_20 ON Notification_events(Notification_id)</entry>\n     <entry key=\"RAttr_Index_21\">CREATE INDEX RAttr_Index_21 ON RAttr(schema_name)</entry>\n     <entry key=\"RAttr_Index_22\">CREATE INDEX RAttr_Index_22 ON RAttr(owner_id)</entry>\n     <entry key=\"RAttrUniqueValue_Index_24\">CREATE INDEX RAttrUniqueValu_Index_24 ON RAttrUniqueValue(schema_name)</entry>\n     <entry key=\"RAttrValue_Index_25\">CREATE INDEX RAttrValue_Index_25 ON RAttrValue(attribute_id)</entry>\n-    <entry key=\"RAttrValue_stringvalueIndex\">CREATE INDEX RAttrValue_stringvalueIndex ON RAttrValue(stringvalue)</entry>\n-    <entry key=\"RAttrValue_datevalueIndex\">CREATE INDEX RAttrValue_datevalueIndex ON RAttrValue(datevalue)</entry>\n-    <entry key=\"RAttrValue_longvalueIndex\">CREATE INDEX RAttrValue_longvalueIndex ON RAttrValue(longvalue)</entry>\n-    <entry key=\"RAttrValue_doublevalueIndex\">CREATE INDEX RAttrValue_doublevalueIndex ON RAttrValue(doublevalue)</entry>\n-    <entry key=\"RAttrValue_booleanvalueIndex\">CREATE INDEX RAttrValue_booleanvalueIndex ON RAttrValue(booleanvalue)</entry>\n     <entry key=\"RDerAttr_Index_26\">CREATE INDEX RDerAttr_Index_26 ON RDerAttr(derivedSchema_name)</entry>\n     <entry key=\"RDerAttr_Index_27\">CREATE INDEX RDerAttr_Index_27 ON RDerAttr(owner_id)</entry>\n     <entry key=\"RVirAttr_Index_28\">CREATE INDEX RVirAttr_Index_28 ON RVirAttr(virtualSchema_name)</entry>\n@@ -60,10 +49,10 @@\n     <entry key=\"SyncopeRole_Index_33\">CREATE INDEX SyncopeRole_Index_33 ON SyncopeRole(parent_id)</entry>\n     <entry key=\"SyncopeRole_Entitlement_Index_34\">CREATE INDEX SyncopeRole_Ent_Index_34 ON SyncopeRole_Entitlement(entitlements_name)</entry>\n     <entry key=\"SyncopeRole_Entitlement_Index_35\">CREATE INDEX SyncopeRole_Ent_Index_35 ON SyncopeRole_Entitlement(roles_id)</entry>\n-    <entry key=\"SyncopeRole_ExternalResource_Index_36\">CREATE INDEX SyncopeRole_Ext_Index_36 ON SyncopeRole_ExternalResource(externalResources_name)</entry>\n-    <entry key=\"SyncopeRole_ExternalResource_Index_37\">CREATE INDEX SyncopeRole_Ext_Index_37 ON SyncopeRole_ExternalResource(roles_id)</entry>\n-    <entry key=\"SyncopeUser_ExternalResource_Index_38\">CREATE INDEX SyncopeUser_Ext_Index_38 ON SyncopeUser_ExternalResource(externalResources_name)</entry>\n-    <entry key=\"SyncopeUser_ExternalResource_Index_39\">CREATE INDEX SyncopeUser_Ext_Index_39 ON SyncopeUser_ExternalResource(users_id)</entry>\n+    <entry key=\"SyncopeRole_ExternalResource_Index_36\">CREATE INDEX SyncopeRole_Ext_Index_36 ON SyncopeRole_ExternalResource(externalResource_name)</entry>\n+    <entry key=\"SyncopeRole_ExternalResource_Index_37\">CREATE INDEX SyncopeRole_Ext_Index_37 ON SyncopeRole_ExternalResource(role_id)</entry>\n+    <entry key=\"SyncopeUser_ExternalResource_Index_38\">CREATE INDEX SyncopeUser_Ext_Index_38 ON SyncopeUser_ExternalResource(externalResource_name)</entry>\n+    <entry key=\"SyncopeUser_ExternalResource_Index_39\">CREATE INDEX SyncopeUser_Ext_Index_39 ON SyncopeUser_ExternalResource(user_id)</entry>\n     <entry key=\"SyncopeUser_passwordHistory_Index_40\">CREATE INDEX SyncopeUser_pas_Index_40 ON SyncopeUser_passwordHistory(SyncopeUser_id)</entry>\n     <entry key=\"Task_Index_41\">CREATE INDEX Task_Index_41 ON Task(syncopeUser_id)</entry>\n     <entry key=\"Task_Index_42\">CREATE INDEX Task_Index_42 ON Task(resource_name)</entry>\n@@ -72,13 +61,25 @@\n     <entry key=\"UAttr_Index_45\">CREATE INDEX UAttr_Index_45 ON UAttr(owner_id)</entry>\n     <entry key=\"UAttrUniqueValue_Index_47\">CREATE INDEX UAttrUniqueValu_Index_47 ON UAttrUniqueValue(schema_name)</entry>\n     <entry key=\"UAttrValue_Index_48\">CREATE INDEX UAttrValue_Index_48 ON UAttrValue(attribute_id)</entry>\n+    <entry key=\"UDerAttr_Index_49\">CREATE INDEX UDerAttr_Index_49 ON UDerAttr(derivedSchema_name)</entry>\n+    <entry key=\"UDerAttr_Index_50\">CREATE INDEX UDerAttr_Index_50 ON UDerAttr(owner_id)</entry>\n+    <entry key=\"UVirAttr_Index_51\">CREATE INDEX UVirAttr_Index_51 ON UVirAttr(virtualSchema_name)</entry>\n+    <entry key=\"UVirAttr_Index_52\">CREATE INDEX UVirAttr_Index_52 ON UVirAttr(owner_id)</entry>\n+    -->\n+\n     <entry key=\"UAttrValue_stringvalueIndex\">CREATE INDEX UAttrValue_stringvalueIndex ON UAttrValue(stringvalue)</entry>\n     <entry key=\"UAttrValue_datevalueIndex\">CREATE INDEX UAttrValue_datevalueIndex ON UAttrValue(datevalue)</entry>\n     <entry key=\"UAttrValue_longvalueIndex\">CREATE INDEX UAttrValue_longvalueIndex ON UAttrValue(longvalue)</entry>\n     <entry key=\"UAttrValue_doublevalueIndex\">CREATE INDEX UAttrValue_doublevalueIndex ON UAttrValue(doublevalue)</entry>\n     <entry key=\"UAttrValue_booleanvalueIndex\">CREATE INDEX UAttrValue_booleanvalueIndex ON UAttrValue(booleanvalue)</entry>\n-    <entry key=\"UDerAttr_Index_49\">CREATE INDEX UDerAttr_Index_49 ON UDerAttr(derivedSchema_name)</entry>\n-    <entry key=\"UDerAttr_Index_50\">CREATE INDEX UDerAttr_Index_50 ON UDerAttr(owner_id)</entry>\n-    <entry key=\"UVirAttr_Index_51\">CREATE INDEX UVirAttr_Index_51 ON UVirAttr(virtualSchema_name)</entry>\n-    <entry key=\"UVirAttr_Index_52\">CREATE INDEX UVirAttr_Index_52 ON UVirAttr(owner_id)</entry>\n+    <entry key=\"MAttrValue_stringvalueIndex\">CREATE INDEX MAttrValue_stringvalueIndex ON MAttrValue(stringvalue)</entry>\n+    <entry key=\"MAttrValue_datevalueIndex\">CREATE INDEX MAttrValue_datevalueIndex ON MAttrValue(datevalue)</entry>\n+    <entry key=\"MAttrValue_longvalueIndex\">CREATE INDEX MAttrValue_longvalueIndex ON MAttrValue(longvalue)</entry>\n+    <entry key=\"MAttrValue_doublevalueIndex\">CREATE INDEX MAttrValue_doublevalueIndex ON MAttrValue(doublevalue)</entry>\n+    <entry key=\"MAttrValue_booleanvalueIndex\">CREATE INDEX MAttrValue_booleanvalueIndex ON MAttrValue(booleanvalue)</entry>\n+    <entry key=\"RAttrValue_stringvalueIndex\">CREATE INDEX RAttrValue_stringvalueIndex ON RAttrValue(stringvalue)</entry>\n+    <entry key=\"RAttrValue_datevalueIndex\">CREATE INDEX RAttrValue_datevalueIndex ON RAttrValue(datevalue)</entry>\n+    <entry key=\"RAttrValue_longvalueIndex\">CREATE INDEX RAttrValue_longvalueIndex ON RAttrValue(longvalue)</entry>\n+    <entry key=\"RAttrValue_doublevalueIndex\">CREATE INDEX RAttrValue_doublevalueIndex ON RAttrValue(doublevalue)</entry>\n+    <entry key=\"RAttrValue_booleanvalueIndex\">CREATE INDEX RAttrValue_booleanvalueIndex ON RAttrValue(booleanvalue)</entry>\n </properties>"},{"sha":"d10c8a158f61b27585b93cabb06b64c49ad052cd","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":6,"deletions":16,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -64,29 +64,19 @@\n         <property name=\"persistenceUnitName\" value=\"syncopePersistenceUnit\"/>\n         <property name=\"dataSource\" ref=\"dataSource\"/>\n         <property name=\"jpaVendorAdapter\">\n-            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\">\n+            <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n                 <property name=\"showSql\" value=\"false\"/>\n                 <property name=\"generateDdl\" value=\"true\"/>\n                 <property name=\"databasePlatform\" value=\"${jpa.dialect}\"/>\n             </bean>\n         </property>\n         <property name=\"jpaPropertyMap\">\n             <map>\n-                <entry key=\"hibernate.order_inserts\" value=\"true\"/>\n-                <entry key=\"hibernate.order_updates\" value=\"true\"/>\n-                <entry key=\"hibernate.id.new_generator_mappings\" value=\"true\"/>\n-                <entry key=\"hibernate.generate_statistics\" value=\"true\"/>\n-\n-                <!-- Second level cache -->\n-                <entry key=\"hibernate.cache.use_second_level_cache\" value=\"true\"/>\n-                <entry key=\"hibernate.cache.use_query_cache\" value=\"true\"/>\n-                <entry key=\"hibernate.cache.use_minimal_puts\" value=\"true\"/>\n-                <entry key=\"hibernate.cache.region.factory_class\"\n-                       value=\"net.sf.ehcache.hibernate.EhCacheRegionFactory\"/>\n-                <entry key=\"net.sf.ehcache.configurationResourceName\"\n-                       value=\"/ehcache.xml\"/>\n-                <entry key=\"hibernate.cache.region_prefix\"\n-                       value=\"syncopecache\"/>\n+                <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n+                <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>\n+                \n+                <entry key=\"openjpa.DataCache\" value=\"true(Lru=true)\"/>\n+                <entry key=\"openjpa.QueryCache\" value=\"true(Lru=true)\"/>\n             </map>\n         </property>\n     </bean>"},{"sha":"205f1a7dabe5fa50447a3a9ebbca6fd8b5add680","filename":"core/src/main/resources/views.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -68,13 +68,13 @@ WHERE m.syncoperole_id = r.id\n     <entry key=\"user_search_resource\">\n CREATE VIEW user_search_resource AS\n \n-SELECT st.users_id AS user_id, st.externalResources_name AS resource_name\n+SELECT st.user_id AS user_id, st.externalResource_name AS resource_name\n FROM SyncopeUser_ExternalResource st\n \n UNION ALL\n \n-SELECT m.syncopeuser_id AS user_id, st.externalResources_name AS resource_name\n+SELECT m.syncopeuser_id AS user_id, st.externalResource_name AS resource_name\n FROM Membership m, SyncopeRole r, SyncopeRole_ExternalResource st\n-WHERE m.syncoperole_id = r.id AND st.roles_id = r.id\n+WHERE m.syncoperole_id = r.id AND st.role_id = r.id\n     </entry>\n </properties>"},{"sha":"99088db0dda7fd3ec9f4b6a4a397163d6b6e45aa","filename":"core/src/main/webapp/hibernateStats.jsp","status":"removed","additions":0,"deletions":516,"changes":516,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/779a2fcbb21f75a0c7ee498df086ef66cde6342a/core%2Fsrc%2Fmain%2Fwebapp%2FhibernateStats.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/779a2fcbb21f75a0c7ee498df086ef66cde6342a/core%2Fsrc%2Fmain%2Fwebapp%2FhibernateStats.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FhibernateStats.jsp?ref=779a2fcbb21f75a0c7ee498df086ef66cde6342a","patch":"@@ -1,516 +0,0 @@\n-<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n-<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n-<%@taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%>\n-<jsp:useBean id=\"sessionFactory\"\n-             scope=\"request\"\n-             type=\"org.hibernate.SessionFactory\"/>\n-<%@page import=\"org.springframework.web.context.support.ContextExposingHttpServletRequest\"%>\n-<%@page import=\"javax.persistence.EntityManagerFactory\"%>\n-<%@page import=\"org.hibernate.Session\"%>\n-<%@page import=\"javax.persistence.EntityManager\"%>\n-<%@page import=\"org.hibernate.stat.Statistics\"%>\n-<%@page import=\"org.springframework.web.context.support.WebApplicationContextUtils\"%>\n-<%@page import=\"org.springframework.context.ApplicationContext\"%>\n-<%@page import=\"java.text.SimpleDateFormat\"%>\n-<%@page import=\"org.hibernate.hql.QueryTranslator\"%>\n-<%@page import=\"org.hibernate.hql.ast.ASTQueryTranslatorFactory\"%>\n-<%@page import=\"org.hibernate.engine.SessionFactoryImplementor\"%>\n-<%@page import=\"org.hibernate.hql.QueryTranslatorFactory\"%>\n-<%@page import=\"org.hibernate.SessionFactory\"%>\n-<%@page import=\"java.util.Date\"%>\n-<%@page import=\"java.util.List\"%>\n-<%@page import=\"java.util.ArrayList\"%>\n-<%@page import=\"org.hibernate.stat.SecondLevelCacheStatistics\"%>\n-<%@page import=\"org.hibernate.stat.CollectionStatistics\"%>\n-<%@page import=\"org.hibernate.stat.EntityStatistics\"%>\n-<%@page import=\"java.text.Collator\"%>\n-<%@page import=\"java.util.TreeMap\"%>\n-<%@page import=\"java.util.Collections\"%>\n-<%@page import=\"org.hibernate.stat.QueryStatistics\"%>\n-<%@page import=\"java.util.Map\"%>\n-<%!\n-    static Map<String, QueryStatistics> queryStatistics =\n-            Collections.synchronizedMap(\n-            new TreeMap<String, QueryStatistics>(Collator.getInstance()));\n-\n-    static Map<String, EntityStatistics> entityStatistics =\n-            Collections.synchronizedMap(\n-            new TreeMap<String, EntityStatistics>(Collator.getInstance()));\n-\n-    static Map<String, CollectionStatistics> collectionStatistics =\n-            Collections.synchronizedMap(\n-            new TreeMap<String, CollectionStatistics>(Collator.getInstance()));\n-\n-    static Map<String, SecondLevelCacheStatistics> secondLevelCacheStatistics =\n-            Collections.synchronizedMap(\n-            new TreeMap<String, SecondLevelCacheStatistics>(\n-            Collator.getInstance()));\n-\n-    static List<Long> generalStatistics = Collections.synchronizedList(\n-            new ArrayList<Long>(18));\n-\n-    static {\n-        for (int i = 0; i < 9; i++) {\n-            generalStatistics.add(new Long(-1));\n-        }\n-    }\n-    static Date lastUpdate;\n-\n-    static Date activation;\n-\n-    static Date deactivation;\n-\n-    public static class HqlToSqlTranslator {\n-\n-        public String toSql(SessionFactory sessionFactory,\n-                String hqlQueryText) {\n-\n-            if (hqlQueryText != null) {\n-                final QueryTranslatorFactory ast =\n-                        new ASTQueryTranslatorFactory();\n-                final SessionFactoryImplementor factory =\n-                        (SessionFactoryImplementor) sessionFactory;\n-                final QueryTranslator newQueryTranslator =\n-                        ast.createQueryTranslator(\n-                        hqlQueryText,\n-                        hqlQueryText,\n-                        Collections.EMPTY_MAP, factory);\n-                try {\n-                    newQueryTranslator.compile(Collections.EMPTY_MAP, false);\n-                    return newQueryTranslator.getSQLString();\n-                } catch (Throwable t) {\n-                    return hqlQueryText;\n-                }\n-            }\n-\n-            return null;\n-        }\n-    }\n-    static HqlToSqlTranslator translator = new HqlToSqlTranslator();\n-\n-    public static class StringUtils {\n-\n-        public static final String format(final Date date) {\n-            if (date == null) {\n-                return null;\n-            }\n-            final SimpleDateFormat sdf = new SimpleDateFormat(\n-                    \"dd.MM.yy HH:mm:ss\");\n-            return sdf.format(date);\n-        }\n-\n-        public static final String formatTime(final long millis) {\n-            Date date = new Date(millis);\n-\n-            return format(date);\n-        }\n-    }\n-%>\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n-<html>\n-    <head>\n-        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n-        <title>Hibernate statistics</title>\n-        <style type=\"text/css\">\n-            .c{\n-                text-align: center;\n-            }\n-            .r{\n-                text-align: right;\n-            }\n-            .l{\n-                text-align: left;\n-            }\n-            .t{\n-                vertical-align: top;\n-            }\n-            .b{\n-                vertical-align: bottom;\n-            }\n-            .odd{\n-                background-color: #D4D4D4;\n-            }\n-            .even{\n-                background-color: #EEEEEE;\n-            }\n-            .bd1{\n-                border: solid #888888 1px;\n-            }\n-            .bg1{\n-                background-color: #CCCCCC;\n-            }\n-            .bg2{\n-                background-color: #DDDDDD;\n-            }\n-        </style>\n-    </head>\n-    <body>\n-        <p/>\n-        <%\n-                    final Statistics statistics =\n-                            sessionFactory.getStatistics();\n-\n-                    final String action = request.getParameter(\"do\");\n-                    final StringBuilder info = new StringBuilder(512);\n-\n-                    if (\"activate\".equals(action)\n-                            && !statistics.isStatisticsEnabled()) {\n-\n-                        statistics.setStatisticsEnabled(true);\n-                        activation = new Date();\n-                        info.append(\"Statistics enabled\\n\");\n-                    } else if (\"deactivate\".equals(action)\n-                            && statistics.isStatisticsEnabled()) {\n-\n-                        statistics.setStatisticsEnabled(false);\n-                        deactivation = new Date();\n-                        info.append(\"Statistics disabled\\n\");\n-                    } else if (\"clear\".equals(action)) {\n-                        activation = null;\n-                        deactivation = null;\n-                        statistics.clear();\n-                        generalStatistics.set(0, new Long(0));\n-                        generalStatistics.set(1, new Long(0));\n-\n-                        generalStatistics.set(2, new Long(0));\n-                        generalStatistics.set(3, new Long(0));\n-\n-                        generalStatistics.set(4, new Long(0));\n-                        generalStatistics.set(5, new Long(0));\n-\n-                        generalStatistics.set(6, new Long(0));\n-                        generalStatistics.set(7, new Long(0));\n-                        generalStatistics.set(8, new Long(0));\n-                        queryStatistics.clear();\n-                        entityStatistics.clear();\n-                        collectionStatistics.clear();\n-                        secondLevelCacheStatistics.clear();\n-                        info.append(\"Statistics cleared\\n\");\n-                    }\n-\n-                    boolean active = statistics.isStatisticsEnabled();\n-                    if (info.length() > 0) {\n-        %>\n-        <p/><div class=\"success\">\n-            <c:out value=\"${fn:escapeXml(info)}\"/>\n-        </div>\n-        <%                    }%>\n-        <p/>\n-        <a href=\"?\">Reload</a>\n-        <p/>\n-        <a href=\"?do=<%=(active ? \"deactivate\" : \"activate\")%>\">\n-            <%=(active ? \"DEACTIVATE\" : \"ACTIVATE\")%></a> |\n-        <a href=\"?do=clear\">CLEAR</a>\n-        <%\n-                    if (active) {\n-                        lastUpdate = new Date();\n-                        String[] names;\n-\n-                        generalStatistics.set(0, statistics.getConnectCount());\n-                        generalStatistics.set(1, statistics.getFlushCount());\n-\n-                        generalStatistics.set(2, statistics.\n-                                getPrepareStatementCount());\n-                        generalStatistics.set(3, statistics.\n-                                getCloseStatementCount());\n-\n-                        generalStatistics.set(4,\n-                                statistics.getSessionCloseCount());\n-                        generalStatistics.set(5,\n-                                statistics.getSessionOpenCount());\n-\n-                        generalStatistics.set(6,\n-                                statistics.getTransactionCount());\n-                        generalStatistics.set(7, statistics.\n-                                getSuccessfulTransactionCount());\n-                        generalStatistics.set(8, statistics.\n-                                getOptimisticFailureCount());\n-\n-                        queryStatistics.clear();\n-                        names = statistics.getQueries();\n-                        if (names != null && names.length > 0) {\n-                            for (int i = 0;\n-                                    i < names.length; i++) {\n-\n-                                queryStatistics.put(names[i],\n-                                        statistics.getQueryStatistics(\n-                                        names[i]));\n-                            }\n-                        }\n-\n-                        entityStatistics.clear();\n-                        names = statistics.getEntityNames();\n-                        if (names != null && names.length > 0) {\n-                            for (int i = 0; i\n-                                    < names.length; i++) {\n-                                entityStatistics.put(names[i],\n-                                        statistics.getEntityStatistics(\n-                                        names[i]));\n-                            }\n-                        }\n-\n-                        collectionStatistics.clear();\n-                        names = statistics.getCollectionRoleNames();\n-                        if (names != null && names.length > 0) {\n-                            for (int i = 0; i\n-                                    < names.length; i++) {\n-                                collectionStatistics.put(names[i],\n-                                        statistics.getCollectionStatistics(\n-                                        names[i]));\n-                            }\n-                        }\n-\n-                        secondLevelCacheStatistics.clear();\n-                        names = statistics.getSecondLevelCacheRegionNames();\n-                        if (names != null && names.length > 0) {\n-                            for (int i = 0; i\n-                                    < names.length; i++) {\n-                                secondLevelCacheStatistics.put(names[i],\n-                                        statistics.getSecondLevelCacheStatistics(\n-                                        names[i]));\n-                            }\n-                        }\n-                    }\n-\n-        %>\n-        <p/>\n-\tLast update: <%=(lastUpdate != null\n-                                ? StringUtils.format(lastUpdate) : \"none\")%><br/>\n-\tActivation: <%=(activation != null\n-                                ? StringUtils.format(activation) : \"none\")%><br/>\n-\tDeactivation: <%=(deactivation != null\n-                                ? StringUtils.format(deactivation) : \"none\")%><br/>\n-\tActive duration: <%=(activation != null\n-                                ? StringUtils.formatTime((deactivation != null\n-                                ? deactivation.getTime()\n-                                : new Date().getTime()) - activation.getTime())\n-                                : \"none\")%>\n-        <p/>\n-        <%\n-                    boolean hasGeneral = false;\n-                    for (int i = 0; i < 9; i++) {\n-                        if (generalStatistics.get(i).longValue() > -1) {\n-                            hasGeneral = true;\n-                            break;\n-                        }\n-                    }\n-                    if (hasGeneral) {\n-        %>\n-        <table>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Connects</th>\n-                <td><%=generalStatistics.get(0)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Flushes</th>\n-                <td><%=generalStatistics.get(1)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Prepare statements</th>\n-                <td><%=generalStatistics.get(2)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Close statements</th>\n-                <td><%=generalStatistics.get(3)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Session opens</th>\n-                <td><%=generalStatistics.get(5)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Session closes</th>\n-                <td><%=generalStatistics.get(4)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Total Transactions</th>\n-                <td><%=generalStatistics.get(6)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Successfull Transactions</th>\n-                <td><%=generalStatistics.get(7)%></td>\n-            </tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Optimistic failures</th>\n-                <td><%=generalStatistics.get(8)%></td>\n-            </tr>\n-        </table>\n-        <p/>\n-        <%                    }%>\n-\n-        <%\n-                    if (queryStatistics.size() > 0) {\n-        %>\n-        <table width=\"100%\">\n-            <tr><th colspan=\"11\" class=\"c bd1 bg2\">Query statistics</th></tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">HQL Query</th>\n-                <th class=\"c bd1 bg1\">SQL Query</th>\n-                <th class=\"c bd1 bg1\">Calls</th>\n-                <th class=\"c bd1 bg1\">Total rowcount</th>\n-                <th class=\"c bd1 bg1\">Max dur.</th>\n-                <th class=\"c bd1 bg1\">Min dur.</th>\n-                <th class=\"c bd1 bg1\">Avg dur.</th>\n-                <th class=\"c bd1 bg1\">Total dur.</th>\n-                <th class=\"c bd1 bg1\">Cache hits</th>\n-                <th class=\"c bd1 bg1\">Cache miss</th>\n-                <th class=\"c bd1 bg1\">Cache put</th>\n-            </tr>\n-            <%\n-                                    QueryStatistics queryStats;\n-                                    boolean odd = true;\n-                                    for (String query :\n-                                            queryStatistics.keySet()) {\n-\n-                                        queryStats = queryStatistics.get(query);\n-            %>\n-            <tr class=\"<%=(odd ? \"odd\" : \"even\")%>\">\n-                <td class=\"t\"><%=query%></td>\n-                <td><small><%=translator.toSql(sessionFactory, query)%></small></td>\n-                <td class=\"t\"><%=queryStats.getExecutionCount()%></td>\n-                <td class=\"t\"><%=queryStats.getExecutionRowCount()%></td>\n-                <td class=\"t\"><%=queryStats.getExecutionMaxTime()%></td>\n-                <td class=\"t\"><%=queryStats.getExecutionMinTime()%></td>\n-                <td class=\"t\"><%=queryStats.getExecutionAvgTime()%></td>\n-                <td class=\"t\">\n-                    <%=queryStats.getExecutionAvgTime() * queryStats.\n-                                            getExecutionCount()%>\n-                </td>\n-                <td class=\"t\"><%=queryStats.getCacheHitCount()%></td>\n-                <td class=\"t\"><%=queryStats.getCacheMissCount()%></td>\n-                <td class=\"t\"><%=queryStats.getCachePutCount()%></td>\n-            </tr>\n-            <%\n-                                        odd = !odd;\n-                                    }\n-            %>\n-        </table>\n-        <p/>\n-        <%\n-                    }\n-\n-                    if (entityStatistics.size() > 0) {\n-        %>\n-        <table width=\"100%\">\n-            <tr><th colspan=\"7\" class=\"c bd1 bg2\">Entity statistics</th></tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Entity</th>\n-                <th class=\"c bd1 bg1\">Loads</th>\n-                <th class=\"c bd1 bg1\">Fetches</th>\n-                <th class=\"c bd1 bg1\">Inserts</th>\n-                <th class=\"c bd1 bg1\">Updates</th>\n-                <th class=\"c bd1 bg1\">Deletes</th>\n-                <th class=\"c bd1 bg1\">Optimistic failures</th>\n-            </tr>\n-            <%\n-                                    EntityStatistics entityStats;\n-                                    boolean odd = true;\n-                                    for (String entity :\n-                                            entityStatistics.keySet()) {\n-\n-                                        entityStats = entityStatistics.get(\n-                                                entity);\n-            %>\n-            <tr class=\"<%=(odd ? \"odd\" : \"even\")%>\">\n-                <td><%=entity%></td>\n-                <td><%=entityStats.getLoadCount()%></td>\n-                <td><%=entityStats.getFetchCount()%></td>\n-                <td><%=entityStats.getInsertCount()%></td>\n-                <td><%=entityStats.getUpdateCount()%></td>\n-                <td><%=entityStats.getDeleteCount()%></td>\n-                <td><%=entityStats.getOptimisticFailureCount()%></td>\n-            </tr>\n-            <%\n-                                        odd = !odd;\n-                                    }\n-            %>\n-        </table>\n-        <p/>\n-        <%\n-                    }\n-\n-                    if (collectionStatistics.size() > 0) {\n-        %>\n-        <table width=\"100%\">\n-            <tr><th colspan=\"6\" class=\"c bd1 bg2\">Collection statistics</th></tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Role</th>\n-                <th class=\"c bd1 bg1\">Loads</th>\n-                <th class=\"c bd1 bg1\">Fetches</th>\n-                <th class=\"c bd1 bg1\">Updates</th>\n-                <th class=\"c bd1 bg1\">Recreate</th>\n-                <th class=\"c bd1 bg1\">Remove</th>\n-            </tr>\n-            <%\n-                                    CollectionStatistics collectionStats;\n-                                    boolean odd = true;\n-\n-                                    for (String collection :\n-                                            collectionStatistics.keySet()) {\n-\n-                                        collectionStats = collectionStatistics.\n-                                                get(collection);\n-            %>\n-            <tr class=\"<%=(odd ? \"odd\" : \"even\")%>\">\n-                <td><%=collection%></td>\n-                <td><%=collectionStats.getLoadCount()%></td>\n-                <td><%=collectionStats.getFetchCount()%></td>\n-                <td><%=collectionStats.getUpdateCount()%></td>\n-                <td><%=collectionStats.getRecreateCount()%></td>\n-                <td><%=collectionStats.getRemoveCount()%></td>\n-            </tr>\n-            <%\n-                                        odd = !odd;\n-                                    }\n-            %>\n-        </table>\n-        <p/>\n-        <%\n-                    }\n-\n-                    if (secondLevelCacheStatistics.size() > 0) {\n-                        long totalSizeInMemory = 0;\n-        %>\n-        <table width=\"100%\">\n-            <tr><th colspan=\"7\" class=\"c bd1 bg2\">2nd level cache statistics</th></tr>\n-            <tr>\n-                <th class=\"c bd1 bg1\">Regionname</th>\n-                <th class=\"c bd1 bg1\">Puts</th>\n-                <th class=\"c bd1 bg1\">Hits</th>\n-                <th class=\"c bd1 bg1\">Misses</th>\n-                <th class=\"c bd1 bg1\">Elements in memory</th>\n-                <th class=\"c bd1 bg1\">Size in memory</th>\n-                <th class=\"c bd1 bg1\">Elements on disk</th>\n-            </tr>\n-            <%\n-                                    SecondLevelCacheStatistics cacheStats;\n-                                    boolean odd = true;\n-                                    for (String cache :\n-                                            secondLevelCacheStatistics.keySet()) {\n-                                        cacheStats = secondLevelCacheStatistics.\n-                                                get(cache);\n-                                        totalSizeInMemory += cacheStats.\n-                                                getSizeInMemory();\n-            %>\n-            <tr class=\"<%=(odd ? \"odd\" : \"even\")%>\">\n-                <td><%=cache%></td>\n-                <td><%=cacheStats.getPutCount()%></td>\n-                <td><%=cacheStats.getHitCount()%></td>\n-                <td><%=cacheStats.getMissCount()%></td>\n-                <td><%=cacheStats.getElementCountInMemory()%></td>\n-                <td><%=cacheStats.getSizeInMemory()%></td>\n-                <td><%=cacheStats.getElementCountOnDisk()%></td>\n-            </tr>\n-            <%\n-                                        odd = !odd;\n-                                    }\n-            %>\n-            <tr>\n-                <td colspan=\"5\">&nbsp;</td>\n-                <td><%=totalSizeInMemory%></td>\n-                <td>&nbsp;</td>\n-            </tr>\n-        </table>\n-        <p/>\n-        <%          }%>\n-    </body>\n-</html>\n\\ No newline at end of file"},{"sha":"d67498c77ea9bce426848e6b86cdf59eb1411371","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":21,"deletions":40,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -3,10 +3,8 @@\n <%@page import=\"java.util.Set\"%>\n <%@page import=\"java.util.Map\"%>\n <%@page import=\"org.syncope.core.persistence.validation.entity.InvalidEntityException\"%>\n-<%@page import=\"org.hibernate.exception.ConstraintViolationException\"%>\n <%@page import=\"javax.persistence.PersistenceException\"%>\n <%@page import=\"org.springframework.dao.DataIntegrityViolationException\"%>\n-<%@page import=\"org.hibernate.exception.LockAcquisitionException\"%>\n <%@page import=\"org.syncope.core.rest.controller.InvalidSearchConditionException\"%>\n <%@page import=\"org.syncope.core.rest.controller.UnauthorizedRoleException\"%>\n <%@page import=\"org.syncope.core.persistence.dao.MissingConfKeyException\"%>\n@@ -51,7 +49,7 @@\n             }\n         }\n \n-        statusCode = HttpServletResponse.SC_NOT_FOUND;\n+        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof NotFoundException) {\n         response.setHeader(\n                 SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n@@ -62,22 +60,12 @@\n \n         statusCode = HttpServletResponse.SC_NOT_FOUND;\n     } else if (ex instanceof WorkflowException) {\n-        if (ex.getCause().getCause() != null\n-                && ex.getCause().getCause().getCause() != null\n-                && ex.getCause().getCause().getCause() instanceof ConstraintViolationException) {\n-\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.DuplicateUniqueValue.\n-                    getHeaderValue());\n-        } else {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.Workflow.getHeaderValue());\n-            response.setHeader(\n-                    SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n-                    ex.getCause().getMessage());\n-        }\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.Workflow.getHeaderValue());\n+        response.setHeader(\n+                SyncopeClientExceptionType.Workflow.getElementHeaderName(),\n+                ex.getCause().getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof PropagationException) {\n@@ -132,33 +120,26 @@\n         }\n \n         statusCode = HttpServletResponse.SC_UNAUTHORIZED;\n-    } else if (ex.getCause() instanceof LockAcquisitionException) {\n-        response.setHeader(\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.Deadlock.getHeaderValue());\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof DataIntegrityViolationException) {\n         response.setHeader(\n                 SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.DuplicateUniqueValue.getHeaderValue());\n+                SyncopeClientExceptionType.DataIntegrityViolation.getHeaderValue());\n+        response.setHeader(\n+                SyncopeClientExceptionType.DataIntegrityViolation.\n+                getElementHeaderName(),\n+                ex.getCause() == null ? ex.getMessage() : ex.getCause().\n+                getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     } else if (ex instanceof PersistenceException) {\n-        if (ex.getCause() instanceof ConstraintViolationException) {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.DuplicateUniqueValue.\n-                    getHeaderValue());\n-        } else {\n-            response.setHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                    SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\n-            response.setHeader(\n-                    SyncopeClientExceptionType.GenericPersistence.\n-                    getElementHeaderName(),\n-                    ex.getCause().getClass().getName());\n-        }\n+        response.setHeader(\n+                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\n+        response.setHeader(\n+                SyncopeClientExceptionType.GenericPersistence.\n+                getElementHeaderName(),\n+                ex.getCause() == null ? ex.getMessage() : ex.getCause().\n+                getMessage());\n \n         statusCode = HttpServletResponse.SC_BAD_REQUEST;\n     }"},{"sha":"3162b841384b83fadb17b7e05e6aa7a664067144","filename":"core/src/test/java/org/syncope/core/persistence/dao/ConnInstanceTest.java","status":"modified","additions":2,"deletions":36,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -14,9 +14,10 @@\n  */\n package org.syncope.core.persistence.dao;\n \n+import static org.junit.Assert.*;\n+\n import java.util.Collections;\n import java.util.List;\n-import static org.junit.Assert.*;\n import java.util.HashSet;\n import java.util.Set;\n import org.connid.bundles.soap.WebServiceConnector;\n@@ -26,9 +27,7 @@\n import org.syncope.types.ConnConfProperty;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.AbstractTest;\n-import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.types.ConnConfPropSchema;\n-import org.syncope.types.ConnectorCapability;\n \n @Transactional\n public class ConnInstanceTest extends AbstractTest {\n@@ -141,37 +140,4 @@ public final void delete() {\n         ConnInstance actual = connInstanceDAO.find(100L);\n         assertNull(\"delete did not work\", actual);\n     }\n-\n-    /**\n-     * Connector change used to miss connector bean registration.\n-     * \n-     * http://code.google.com/p/syncope/issues/detail?id=176\n-     */\n-    @Test\n-    public void issue176() {\n-        ConnInstance connectorInstance = connInstanceDAO.find(103L);\n-\n-        assertNotNull(connectorInstance);\n-        assertTrue(connectorInstance.getCapabilities().isEmpty());\n-\n-        List<ExternalResource> resources =\n-                connInstanceDAO.findExternalResources(connectorInstance);\n-\n-        assertNotNull(resources);\n-        assertEquals(1, resources.size());\n-        assertEquals(\n-                \"ws-target-resource-nopropagation\", resources.get(0).getName());\n-\n-        connectorInstance.addCapability(ConnectorCapability.SEARCH);\n-\n-        connectorInstance = connInstanceDAO.save(connectorInstance);\n-        assertNotNull(connectorInstance);\n-        assertFalse(connectorInstance.getCapabilities().isEmpty());\n-\n-        resources = connInstanceDAO.findExternalResources(connectorInstance);\n-        assertNotNull(resources);\n-        assertEquals(1, resources.size());\n-        assertEquals(\n-                \"ws-target-resource-nopropagation\", resources.get(0).getName());\n-    }\n }"},{"sha":"24a8886963be99aafb49ca2074938110619e3cd8","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -64,8 +64,7 @@ public final void findGlobalPasswordPolicy() {\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n \n         assertEquals(\"invalid policy values\",\n-                8,\n-                ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n+                8, ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n     }\n \n     @Test"},{"sha":"a70900fa96df9e1f272e17ba4c8159d1335f71c9","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskExecTest.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -21,7 +21,10 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.AbstractTest;\n+import org.syncope.core.persistence.beans.NotificationTask;\n import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.TaskExec;\n \n @Transactional\n@@ -37,6 +40,15 @@ public class TaskExecTest extends AbstractTest {\n     public final void findAll() {\n         List<TaskExec> list = taskExecDAO.findAll(PropagationTask.class);\n         assertEquals(1, list.size());\n+\n+        list = taskExecDAO.findAll(SchedTask.class);\n+        assertEquals(0, list.size());\n+\n+        list = taskExecDAO.findAll(SyncTask.class);\n+        assertEquals(0, list.size());\n+\n+        list = taskExecDAO.findAll(NotificationTask.class);\n+        assertEquals(0, list.size());\n     }\n \n     @Test"},{"sha":"f49f7ade53a83bc4b09839cee7059138869511ff","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ConnInstanceTest.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.ConnInstance;\n+import org.syncope.core.persistence.beans.ExternalResource;\n+import org.syncope.core.persistence.dao.ConnInstanceDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.AbstractTest;\n+import org.syncope.types.ConnectorCapability;\n+\n+@Transactional\n+public class ConnInstanceTest extends AbstractTest {\n+\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Test\n+    public final void deleteCascade() {\n+        ConnInstance connInstance = connInstanceDAO.find(103L);\n+        assertNotNull(connInstance);\n+\n+        List<ExternalResource> resources = connInstance.getResources();\n+        assertNotNull(resources);\n+        assertFalse(resources.isEmpty());\n+\n+        connInstanceDAO.delete(connInstance.getId());\n+\n+        connInstanceDAO.flush();\n+\n+        ConnInstance actual = connInstanceDAO.find(103L);\n+        assertNull(actual);\n+\n+        for (ExternalResource resource : resources) {\n+            assertNull(resourceDAO.find(resource.getName()));\n+        }\n+    }\n+\n+    /**\n+     * Connector change used to miss connector bean registration.\n+     * \n+     * http://code.google.com/p/syncope/issues/detail?id=176\n+     */\n+    @Test\n+    public void issue176() {\n+        ConnInstance connInstance = connInstanceDAO.find(103L);\n+        assertNotNull(connInstance);\n+        assertTrue(connInstance.getCapabilities().isEmpty());\n+\n+        List<ExternalResource> resources = connInstance.getResources();\n+        assertNotNull(resources);\n+        assertEquals(1, resources.size());\n+        assertEquals(\n+                \"ws-target-resource-nopropagation\", resources.get(0).getName());\n+\n+        connInstance.addCapability(ConnectorCapability.SEARCH);\n+\n+        connInstance = connInstanceDAO.save(connInstance);\n+        assertNotNull(connInstance);\n+        assertFalse(connInstance.getCapabilities().isEmpty());\n+\n+        resources = connInstance.getResources();\n+        assertNotNull(resources);\n+        assertEquals(1, resources.size());\n+        assertEquals(\n+                \"ws-target-resource-nopropagation\", resources.get(0).getName());\n+    }\n+}"},{"sha":"b89ca02ca4569dc22ac1926316318984f03c3881","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":36,"deletions":60,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -17,7 +17,6 @@\n import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -39,8 +38,6 @@\n import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.PropagationTask;\n-import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.types.PropagationMode;\n@@ -56,10 +53,7 @@ public class ResourceTest extends AbstractTest {\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n-    @Autowired\n-    private ConnInstanceDAO connectorInstanceDAO;\n+    private ConnInstanceDAO connInstanceDAO;\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -74,11 +68,11 @@ public class ResourceTest extends AbstractTest {\n     private PolicyDAO policyDAO;\n \n     public final void createWithPasswordPolicy() {\n-        final String RESOURCE_NAME = \"resourceWithPasswordPolicy\";\n+        final String resourceName = \"resourceWithPasswordPolicy\";\n \n         PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n         ExternalResource resource = new ExternalResource();\n-        resource.setName(RESOURCE_NAME);\n+        resource.setName(resourceName);\n         resource.setPasswordPolicy(policy);\n \n         ExternalResource actual = resourceDAO.save(resource);\n@@ -88,8 +82,8 @@ public final void createWithPasswordPolicy() {\n         assertNotNull(actual);\n         assertNotNull(actual.getPasswordPolicy());\n \n-        resourceDAO.delete(RESOURCE_NAME);\n-        assertNull(resourceDAO.find(RESOURCE_NAME));\n+        resourceDAO.delete(resourceName);\n+        assertNull(resourceDAO.find(resourceName));\n \n         assertNotNull(policyDAO.find(4L));\n     }\n@@ -154,28 +148,23 @@ public final void issue42() {\n     }\n \n     @Test\n-    public final void save()\n-            throws ClassNotFoundException {\n+    public final void save() {\n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-save\");\n \n         // specify the connector\n-        ConnInstance connector = connectorInstanceDAO.find(100L);\n-\n+        ConnInstance connector = connInstanceDAO.find(100L);\n         assertNotNull(\"connector not found\", connector);\n \n         resource.setConnector(connector);\n         connector.addResource(resource);\n \n-        // search for the user schema\n-        final USchema userSchema = schemaDAO.find(\"fullname\", USchema.class);\n-\n+        // specify mappings\n         SchemaMapping mapping = null;\n-\n         for (int i = 0; i < 3; i++) {\n             mapping = new SchemaMapping();\n             mapping.setExtAttrName(\"test\" + i);\n-            mapping.setIntAttrName(userSchema.getName());\n+            mapping.setIntAttrName(\"nonexistent\" + i);\n             mapping.setIntMappingType(IntMappingType.UserSchema);\n             mapping.setMandatoryCondition(\"false\");\n \n@@ -185,81 +174,72 @@ public final void save()\n         SchemaMapping accountId = new SchemaMapping();\n         accountId.setAccountid(true);\n         accountId.setExtAttrName(\"username\");\n-        accountId.setIntAttrName(userSchema.getName());\n+        accountId.setIntAttrName(\"username\");\n         accountId.setIntMappingType(IntMappingType.SyncopeUserId);\n \n         accountId.setResource(resource);\n         resource.addMapping(accountId);\n \n-        // search for the derived attribute schema\n-        UDerSchema derivedSchema =\n-                derSchemaDAO.find(\"cn\", UDerSchema.class);\n-\n-        assertNotNull(derivedSchema);\n-\n         // map a derived attribute\n         SchemaMapping derived = new SchemaMapping();\n-        derived.setResource(resource);\n         derived.setAccountid(false);\n         derived.setExtAttrName(\"fullname\");\n-        derived.setIntAttrName(derivedSchema.getName());\n-        derived.setIntMappingType(IntMappingType.UserSchema);\n+        derived.setIntAttrName(\"cn\");\n+        derived.setIntMappingType(IntMappingType.UserDerivedSchema);\n \n+        derived.setResource(resource);\n         resource.addMapping(derived);\n \n-        // specify an user schema\n-        SyncopeUser user = userDAO.find(1L);\n-\n-        assertNotNull(\"user not found\", user);\n-\n-        resource.addUser(user);\n-        user.addExternalResource(resource);\n-\n         // save the resource\n         ExternalResource actual = resourceDAO.save(resource);\n-\n         assertNotNull(actual);\n \n         resourceDAO.flush();\n \n+        // assign the new resource to an user\n+        SyncopeUser user = userDAO.find(1L);\n+        assertNotNull(\"user not found\", user);\n+\n+        actual.addUser(user);\n+        user.addExternalResource(actual);\n+\n+        resourceDAO.flush();\n+\n         // retrieve resource\n         resource = resourceDAO.find(actual.getName());\n-\n         assertNotNull(resource);\n \n         // check connector\n-        connector = connectorInstanceDAO.find(100L);\n-\n+        connector = connInstanceDAO.find(100L);\n         assertNotNull(connector);\n \n-        List<ExternalResource> resources = connector.getResources();\n-\n-        assertNotNull(resources);\n-\n+        assertNotNull(connector.getResources());\n         assertTrue(connector.getResources().contains(resource));\n \n         assertNotNull(resource.getConnector());\n-\n         assertTrue(resource.getConnector().equals(connector));\n \n         // check mappings\n         Set<SchemaMapping> schemaMappings = resource.getMappings();\n-\n         assertNotNull(schemaMappings);\n         assertEquals(5, schemaMappings.size());\n+\n+        // check user\n+        user = userDAO.find(1L);\n+        assertNotNull(user);\n+        assertNotNull(user.getExternalResources());\n+        assertTrue(user.getExternalResources().contains(actual));\n     }\n \n     @Test\n     public final void delete() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n-\n         assertNotNull(\"find to delete did not work\", resource);\n \n         // -------------------------------------\n         // Get originally associated connector\n         // -------------------------------------\n         ConnInstance connector = resource.getConnector();\n-\n         assertNotNull(connector);\n \n         Long connectorId = connector.getId();\n@@ -269,7 +249,6 @@ public final void delete() {\n         // Get originally associated users\n         // -------------------------------------\n         Set<SyncopeUser> users = resource.getUsers();\n-\n         assertNotNull(users);\n \n         Set<Long> userIds = new HashSet<Long>();\n@@ -294,23 +273,18 @@ public final void delete() {\n         assertNull(\"delete did not work\", actual);\n \n         // resource must be not referenced any more from users\n-        SyncopeUser actualUser;\n-        Collection<ExternalResource> resources;\n         for (Long id : userIds) {\n-            actualUser = userDAO.find(id);\n+            SyncopeUser actualUser = userDAO.find(id);\n             assertNotNull(actualUser);\n-            resources = actualUser.getExternalResources();\n-            for (ExternalResource res : resources) {\n+            for (ExternalResource res : actualUser.getExternalResources()) {\n                 assertFalse(res.getName().equalsIgnoreCase(resource.getName()));\n             }\n         }\n \n         // resource must be not referenced any more from the connector\n-        ConnInstance actualConnector =\n-                connectorInstanceDAO.find(connectorId);\n+        ConnInstance actualConnector = connInstanceDAO.find(connectorId);\n         assertNotNull(actualConnector);\n-        resources = actualConnector.getResources();\n-        for (ExternalResource res : resources) {\n+        for (ExternalResource res : actualConnector.getResources()) {\n             assertFalse(res.getName().equalsIgnoreCase(resource.getName()));\n         }\n \n@@ -339,6 +313,8 @@ public void issue243() {\n         assertNotNull(csv);\n         assertEquals(origMappings + 1, csv.getMappings().size());\n \n+        resourceDAO.clear();\n+        \n         int currentMappings = 0;\n         List<SchemaMapping> allMappings = resourceDAO.findAllMappings();\n         for (SchemaMapping mapping : allMappings) {"},{"sha":"352cb7da3f3d8ea497c420629684de45d1532844","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -401,7 +401,7 @@ public void checkUserSuspension() {\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n-        assertEquals(new Integer(3), userTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         // check for authentication\n@@ -442,6 +442,6 @@ public void checkUserSuspension() {\n                 UserTO.class, userTO.getId());\n \n         assertNotNull(userTO);\n-        assertEquals(new Integer(0), userTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n     }\n }"},{"sha":"ea5ecfb1ad94a51ab3d7789d1e9c62fbadd28a1c","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":9,"deletions":30,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -37,7 +37,6 @@\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n-import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.types.ConnConfPropSchema;\n import org.syncope.types.ConnConfProperty;\n@@ -299,41 +298,21 @@ public void getBundles() {\n \n     @Test\n     public void getSchemaNames() {\n-        ResourceTO resourceTO = null;\n-\n-        resourceTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"ws-target-resource-1\");\n-        assertNotNull(resourceTO);\n-\n-        List<String> schemaNames = Arrays.asList(restTemplate.postForObject(\n-                BASE_URL + \"connector/schema/list/all\",\n-                resourceTO, String[].class));\n-\n+        List<String> schemaNames = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"connector/schema/{resourceName}/list?showAll=true\",\n+                String[].class, \"ws-target-resource-1\"));\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n \n-        resourceTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"resource-testdb\");\n-        assertNotNull(resourceTO);\n-\n-        schemaNames = Arrays.asList(restTemplate.postForObject(\n-                BASE_URL + \"connector/schema/list\",\n-                resourceTO, String[].class));\n-\n+        schemaNames = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"connector/schema/{resourceName}/list?showAll=true\",\n+                String[].class, \"resource-testdb\"));\n         assertNotNull(schemaNames);\n         assertEquals(1, schemaNames.size());\n \n-        resourceTO = restTemplate.getForObject(\n-                BASE_URL + \"/resource/read/{resourceName}.json\",\n-                ResourceTO.class, \"resource-csv\");\n-        assertNotNull(resourceTO);\n-\n-        schemaNames = Arrays.asList(restTemplate.postForObject(\n-                BASE_URL + \"connector/schema/list\",\n-                resourceTO, String[].class));\n-\n+        schemaNames = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"connector/schema/{resourceName}/list?showAll=true\",\n+                String[].class, \"resource-csv\"));\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n     }"},{"sha":"3001305b342bb36465e5f5d1dee199ab514183d3","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":23,"deletions":11,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -19,7 +19,6 @@\n import java.util.Arrays;\n import java.util.List;\n import org.junit.Test;\n-import org.springframework.test.annotation.ExpectedException;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n@@ -28,6 +27,7 @@\n import org.syncope.types.PasswordPolicySpec;\n import org.syncope.types.PolicyType;\n import org.syncope.types.SyncPolicySpec;\n+import org.syncope.types.SyncopeClientExceptionType;\n \n public class PolicyTestITCase extends AbstractTest {\n \n@@ -71,28 +71,40 @@ public final void getGlobalAccountPolicy() {\n     }\n \n     @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void createWithException() {\n-\n         PasswordPolicyTO policy = new PasswordPolicyTO(true);\n         policy.setSpecification(new PasswordPolicySpec());\n         policy.setDescription(\"global password policy\");\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"policy/password/create\",\n-                policy, PasswordPolicyTO.class);\n+        Throwable t = null;\n+        try {\n+            restTemplate.postForObject(\n+                    BASE_URL + \"policy/password/create\",\n+                    policy, PasswordPolicyTO.class);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException sccee) {\n+            t = sccee.getException(\n+                    SyncopeClientExceptionType.InvalidPasswordPolicy);\n+        }\n+        assertNotNull(t);\n     }\n \n     @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void createMissingDescription() {\n-\n         SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicySpec());\n \n-        restTemplate.postForObject(\n-                BASE_URL + \"policy/sync/create\",\n-                policy, PasswordPolicyTO.class);\n+        Throwable t = null;\n+        try {\n+            restTemplate.postForObject(\n+                    BASE_URL + \"policy/sync/create\",\n+                    policy, PasswordPolicyTO.class);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException sccee) {\n+            t = sccee.getException(\n+                    SyncopeClientExceptionType.InvalidSyncPolicy);\n+        }\n+        assertNotNull(t);\n     }\n \n     @Test"},{"sha":"0ab78a5c39339e98d9dbca99180b9c6ed59b2a08","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -20,18 +20,17 @@\n \n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.SyncopeClientExceptionType;\n \n public class RoleTestITCase extends AbstractTest {\n \n     @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public void createWithException() {\n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"attr1\");\n@@ -40,8 +39,16 @@ public void createWithException() {\n         RoleTO newRoleTO = new RoleTO();\n         newRoleTO.addAttribute(attributeTO);\n \n-        restTemplate.postForObject(BASE_URL + \"role/create\",\n-                newRoleTO, RoleTO.class);\n+        Throwable t = null;\n+        try {\n+            restTemplate.postForObject(BASE_URL + \"role/create\",\n+                    newRoleTO, RoleTO.class);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException sccee) {\n+            t = sccee.getException(\n+                    SyncopeClientExceptionType.InvalidSyncopeRole);\n+        }\n+        assertNotNull(t);\n     }\n \n     @Test"},{"sha":"3d12911a8c3d574a8e06ae3e12b20fd95e1e5c47","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -582,7 +582,7 @@ public final void create() {\n                     userTO, UserTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             sce = e.getException(\n-                    SyncopeClientExceptionType.DuplicateUniqueValue);\n+                    SyncopeClientExceptionType.DataIntegrityViolation);\n         }\n         assertNotNull(sce);\n     }"},{"sha":"a5e09c46f239ad16714a8f4a43140e4d6bff5025","filename":"core/src/test/resources/content.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -282,12 +282,12 @@\n                       propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                       accountlink=\"&apos;uid=&apos; + username + &apos;,ou=people,o=isp&apos;\"/>\n                       \n-    <SyncopeUser_ExternalResource users_id=\"3\" externalResources_name=\"ws-target-resource-delete\" />\n-    <SyncopeRole_ExternalResource roles_id=\"3\" externalResources_name=\"ws-target-resource-list-mappings-1\" />\n-    <SyncopeUser_ExternalResource users_id=\"3\" externalResources_name=\"ws-target-resource-2\" />\n-    <SyncopeRole_ExternalResource roles_id=\"8\" externalResources_name=\"ws-target-resource-2\" />\n-    <SyncopeRole_ExternalResource roles_id=\"3\" externalResources_name=\"ws-target-resource-list-mappings-2\" />\n-    <SyncopeUser_ExternalResource users_id=\"3\" externalResources_name=\"ws-target-resource-1\" />\n+    <SyncopeUser_ExternalResource user_id=\"3\" externalResource_name=\"ws-target-resource-delete\" />\n+    <SyncopeRole_ExternalResource role_id=\"3\" externalResource_name=\"ws-target-resource-list-mappings-1\" />\n+    <SyncopeUser_ExternalResource user_id=\"3\" externalResource_name=\"ws-target-resource-2\" />\n+    <SyncopeRole_ExternalResource role_id=\"8\" externalResource_name=\"ws-target-resource-2\" />\n+    <SyncopeRole_ExternalResource role_id=\"3\" externalResource_name=\"ws-target-resource-list-mappings-2\" />\n+    <SyncopeUser_ExternalResource user_id=\"3\" externalResource_name=\"ws-target-resource-1\" />\n \n     <SchemaMapping id=\"99\" extAttrName=\"userid\"\n                    resource_name=\"ws-target-resource-1\""},{"sha":"1eb4d59053ee2fa1a88256d5d14c5f40e84f3407","filename":"core/src/test/resources/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -13,7 +13,7 @@ jpa.driverClassName=org.h2.Driver\n jpa.url=jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=1000\n jpa.username=sa\n jpa.password=\n-jpa.dialect=org.hibernate.dialect.H2Dialect\n+jpa.dialect=org.apache.openjpa.jdbc.sql.H2Dictionary\n dbUnitDataTypeFactory=org.dbunit.ext.h2.H2DataTypeFactory\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.sql=tables_h2.sql"},{"sha":"3c92c27789467cb4475fc63e66b8b397e885d2f3","filename":"pom.xml","status":"modified","additions":40,"deletions":20,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9c8fc562b31c6f33fd567526495749e8b2699dd9/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9c8fc562b31c6f33fd567526495749e8b2699dd9/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9c8fc562b31c6f33fd567526495749e8b2699dd9","patch":"@@ -20,7 +20,7 @@\n     <description>Syncope</description>\n     <groupId>org.syncope</groupId>\n     <artifactId>syncope</artifactId>\n-    <version>0.8-SNAPSHOT</version>\n+    <version>0.8-ASL-SNAPSHOT</version>\n     <packaging>pom</packaging>\n \n     <!-- maven repository on sonatype -->\n@@ -98,15 +98,14 @@\n         <velocity.version>1.7</velocity.version>\n         <quartz.version>1.8.5</quartz.version>\n \n-        <hibernate.version>3.6.8.Final</hibernate.version>\n-        <hibernate-validator.version>4.2.0.Final</hibernate-validator.version>\n+        <openjpa.version>2.2.0-SNAPSHOT</openjpa.version>\n         <ehcache.version>2.4.6</ehcache.version>\n \n         <wicket.version>1.5.3</wicket.version>\n \n         <groovy.version>1.8.4</groovy.version>\n \n-        <h2.version>1.3.162</h2.version>\n+        <h2.version>1.3.163</h2.version>\n \n         <reflections.version>0.9.5</reflections.version>\n \n@@ -227,15 +226,11 @@\n             </dependency>\n \n             <dependency>\n-                <groupId>org.hibernate</groupId>\n-                <artifactId>hibernate-entitymanager</artifactId>\n-                <version>${hibernate.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.hibernate</groupId>\n-                <artifactId>hibernate-validator</artifactId>\n-                <version>${hibernate-validator.version}</version>\n+                <groupId>org.apache.openjpa</groupId>\n+                <artifactId>openjpa-all</artifactId>\n+                <version>${openjpa.version}</version>\n             </dependency>\n+\n             <dependency>\n                 <groupId>net.sf.ehcache</groupId>\n                 <artifactId>ehcache-core</artifactId>\n@@ -312,6 +307,12 @@\n             </dependency>\n             <!-- /Spring -->\n \n+            <dependency>\n+                <groupId>cglib</groupId>\n+                <artifactId>cglib</artifactId>\n+                <version>2.2.2</version>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>org.codehaus.jackson</groupId>\n                 <artifactId>jackson-mapper-asl</artifactId>\n@@ -501,8 +502,12 @@\n         </repository>\n \n         <repository>\n-            <id>jboss</id>\n-            <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>\n+            <id>apache.snapshots</id>\n+            <name>Apache Snapshot Repository</name>\n+            <url>http://repository.apache.org/snapshots</url>\n+            <releases>\n+                <enabled>false</enabled>\n+            </releases>\n         </repository>\n \n         <repository>\n@@ -519,6 +524,15 @@\n             <url>http://repo1.maven.org/maven2/</url>\n         </pluginRepository>\n \n+        <pluginRepository>\n+            <id>apache.snapshots</id>\n+            <name>Apache Snapshot Repository</name>\n+            <url>http://repository.apache.org/snapshots</url>\n+            <releases>\n+                <enabled>false</enabled>\n+            </releases>\n+        </pluginRepository>\n+\n         <pluginRepository>\n             <id>sonatype-public</id>\n             <name>Sonatype public repository</name>\n@@ -553,6 +567,18 @@\n                     <artifactId>maven-resources-plugin</artifactId>\n                     <version>2.5</version>\n                 </plugin>\n+                <plugin>\n+                    <groupId>org.apache.openjpa</groupId>\n+                    <artifactId>openjpa-maven-plugin</artifactId>\n+                    <version>${openjpa.version}</version>\n+                    <dependencies>\n+                        <dependency>\n+                            <groupId>org.apache.openjpa</groupId>\n+                            <artifactId>openjpa</artifactId>\n+                            <version>${openjpa.version}</version>\n+                        </dependency>\n+                    </dependencies>\n+                </plugin>\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-surefire-plugin</artifactId>\n@@ -578,11 +604,6 @@\n                         </webResources>\n                     </configuration>\n                 </plugin>\n-                <plugin>\n-                    <groupId>org.codehaus.mojo</groupId>\n-                    <artifactId>exec-maven-plugin</artifactId>\n-                    <version>1.2.1</version>\n-                </plugin>\n                 <plugin>\n                     <groupId>org.codehaus.mojo</groupId>\n                     <artifactId>selenium-maven-plugin</artifactId>\n@@ -651,7 +672,6 @@\n                     <configuration>\n                         <container>\n                             <containerId>tomcat7x</containerId>\n-                            <home>${java.io.tmpdir}/apache-tomcat-${tomcat.version}</home>\n                             <zipUrlInstaller>\n                                 <url>http://archive.apache.org/dist/tomcat/tomcat-7/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip</url>\n                                 <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>"}]}