{"sha":"d6d8da66b3a604ecd518c986c580c56a0273ab1e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2ZDhkYTY2YjNhNjA0ZWNkNTE4Yzk4NmM1ODBjNTZhMDI3M2FiMWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-13T13:57:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-07-13T14:57:53Z"},"message":"[SYNCOPE-1337] Do not check password history by simple String comparison, use Encryptor#verify as authentication does","tree":{"sha":"e885fc1daaf596a5f9954084fb4b80bcbebcae40","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e885fc1daaf596a5f9954084fb4b80bcbebcae40"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d6d8da66b3a604ecd518c986c580c56a0273ab1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6d8da66b3a604ecd518c986c580c56a0273ab1e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d6d8da66b3a604ecd518c986c580c56a0273ab1e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6d8da66b3a604ecd518c986c580c56a0273ab1e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e752f45334ed6b7740e26c8fbfe8f913d44150d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e752f45334ed6b7740e26c8fbfe8f913d44150d8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e752f45334ed6b7740e26c8fbfe8f913d44150d8"}],"stats":{"total":105,"additions":60,"deletions":45},"files":[{"sha":"90805da382e4f598ffb6664f7ebed08db1cccb70","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=d6d8da66b3a604ecd518c986c580c56a0273ab1e","patch":"@@ -50,8 +50,6 @@ public interface User extends\n \n     CipherAlgorithm getCipherAlgorithm();\n \n-    void setCipherAlgorithm(CipherAlgorithm cipherAlgorithm);\n-\n     boolean canDecodePassword();\n \n     String getClearPassword();\n@@ -66,8 +64,6 @@ public interface User extends\n \n     List<String> getPasswordHistory();\n \n-    boolean verifyPasswordHistory(String password, int size);\n-\n     SecurityQuestion getSecurityQuestion();\n \n     void setSecurityQuestion(SecurityQuestion securityQuestion);"},{"sha":"cbe61595ce527aa37552f26e510a6e7944fb451f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=d6d8da66b3a604ecd518c986c580c56a0273ab1e","patch":"@@ -68,6 +68,7 @@\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.spring.ImplementationManager;\n+import org.apache.syncope.core.spring.security.Encryptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n@@ -79,6 +80,8 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     private static final Pattern USERNAME_PATTERN =\n             Pattern.compile(\"^\" + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -298,7 +301,16 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                     ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> rule.enforce(user));\n                 }\n \n-                if (user.verifyPasswordHistory(user.getClearPassword(), policy.getHistoryLength())) {\n+                boolean matching = false;\n+                if (policy.getHistoryLength() > 0) {\n+                    List<String> pwdHistory = user.getPasswordHistory();\n+                    matching = pwdHistory.subList(policy.getHistoryLength() >= pwdHistory.size()\n+                            ? 0\n+                            : pwdHistory.size() - policy.getHistoryLength(), pwdHistory.size()).stream().\n+                            map(old -> ENCRYPTOR.verify(user.getClearPassword(), user.getCipherAlgorithm(), old)).\n+                            reduce(matching, (accumulator, item) -> accumulator | item);\n+                }\n+                if (matching) {\n                     throw new PasswordPolicyException(\"Password value was used in the past: not allowed\");\n                 }\n \n@@ -308,8 +320,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n             }\n \n             // update user's password history with encrypted password\n-            if (maxPPSpecHistory > 0 && user.getPassword() != null\n-                    && !user.getPasswordHistory().contains(user.getPassword())) {\n+            if (maxPPSpecHistory > 0 && user.getPassword() != null) {\n                 user.getPasswordHistory().add(user.getPassword());\n             }\n             // keep only the last maxPPSpecHistory items in user's password history"},{"sha":"4686aa6bdca3b4f36764950a2cb30c1d8bb32d73","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=d6d8da66b3a604ecd518c986c580c56a0273ab1e","patch":"@@ -342,11 +342,6 @@ public boolean hasTokenExpired() {\n                 : tokenExpireTime.before(new Date());\n     }\n \n-    @Override\n-    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n-        this.cipherAlgorithm = cipherAlgorithm;\n-    }\n-\n     @Override\n     public List<String> getPasswordHistory() {\n         return passwordHistory;\n@@ -445,25 +440,6 @@ public boolean isMustChangePassword() {\n         return mustChangePassword;\n     }\n \n-    @Override\n-    public boolean verifyPasswordHistory(final String password, final int size) {\n-        boolean res = false;\n-\n-        if (size > 0) {\n-            try {\n-                res = passwordHistory.subList(size >= passwordHistory.size()\n-                        ? 0\n-                        : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n-                        ? password\n-                        : ENCRYPTOR.encode(password, cipherAlgorithm));\n-            } catch (Exception e) {\n-                LOG.error(\"Error evaluating password history\", e);\n-            }\n-        }\n-\n-        return res;\n-    }\n-\n     @Override\n     public SecurityQuestion getSecurityQuestion() {\n         return securityQuestion;\n@@ -526,5 +502,4 @@ public boolean add(final UMembership membership) {\n     public List<? extends UMembership> getMemberships() {\n         return memberships;\n     }\n-\n }"},{"sha":"09efe46f4ee62470a4139daf224e1a2e3be841a7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=d6d8da66b3a604ecd518c986c580c56a0273ab1e","patch":"@@ -44,6 +44,4 @@ public interface UserDataBinder {\n      * @see PropagationByResource\n      */\n     PropagationByResource update(User toBeUpdated, UserPatch userPatch);\n-\n-    boolean verifyPassword(User user, String password);\n }"},{"sha":"df2f270099bd4a08a4376ded69ad3bdb68e9118b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6d8da66b3a604ecd518c986c580c56a0273ab1e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=d6d8da66b3a604ecd518c986c580c56a0273ab1e","patch":"@@ -54,7 +54,6 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n@@ -85,8 +84,6 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n         \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\", \"securityQuestion\", \"securityAnswer\"\n     };\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -139,17 +136,10 @@ public UserTO getAuthenticatedUserTO() {\n         return authUserTO;\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public boolean verifyPassword(final User user, final String password) {\n-        return ENCRYPTOR.verify(password, user.getCipherAlgorithm(), user.getPassword());\n-    }\n-\n     private void setPassword(final User user, final String password, final SyncopeClientCompositeException scce) {\n         try {\n             String algorithm = confDAO.find(\"password.cipher.algorithm\", CipherAlgorithm.AES.name());\n-            CipherAlgorithm predefined = CipherAlgorithm.valueOf(algorithm);\n-            user.setPassword(password, predefined);\n+            user.setPassword(password, CipherAlgorithm.valueOf(algorithm));\n         } catch (IllegalArgumentException e) {\n             SyncopeClientException invalidCiperAlgorithm = SyncopeClientException.build(ClientExceptionType.NotFound);\n             invalidCiperAlgorithm.getElements().add(e.getMessage());"},{"sha":"2ff46fc19d895f6a9a415b126ceb637eec6ad5a6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6d8da66b3a604ecd518c986c580c56a0273ab1e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6d8da66b3a604ecd518c986c580c56a0273ab1e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=d6d8da66b3a604ecd518c986c580c56a0273ab1e","patch":"@@ -39,6 +39,7 @@\n import javax.sql.DataSource;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -1470,4 +1471,48 @@ public void issueSYNCOPE1206() {\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1337() {\n+        // 1. save current cipher algorithm and set it to something salted\n+        AttrTO original = configurationService.get(\"password.cipher.algorithm\");\n+\n+        AttrTO salted = SerializationUtils.clone(original);\n+        salted.getValues().set(0, CipherAlgorithm.SSHA512.name());\n+        configurationService.set(salted);\n+\n+        try {\n+            // 2. create user under /even/two to get password policy with history length 1\n+            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope1337@apache.org\");\n+            userTO.setPassword(\"Password123\");\n+            userTO.setRealm(\"/even/two\");\n+            userTO = createUser(userTO).getEntity();\n+            assertNotNull(userTO);\n+\n+            // 3. attempt to set the same password value: fails\n+            UserPatch patch = new UserPatch();\n+            patch.setKey(userTO.getKey());\n+            patch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password123\").build());\n+            try {\n+                updateUser(patch);\n+                fail(\"Password update should not work\");\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getMessage().contains(\"InvalidPassword\"));\n+            }\n+\n+            // 4. set another password value: works\n+            patch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password124\").build());\n+            userTO = updateUser(patch).getEntity();\n+            assertNotNull(userTO);\n+\n+            // 5. set the original password value: works (history length is 1)\n+            patch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password123\").build());\n+            userTO = updateUser(patch).getEntity();\n+            assertNotNull(userTO);\n+        } finally {\n+            // finally revert the cipher algorithm\n+            configurationService.set(original);\n+        }\n+    }\n }"}]}