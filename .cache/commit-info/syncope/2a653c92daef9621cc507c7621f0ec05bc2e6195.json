{"sha":"2a653c92daef9621cc507c7621f0ec05bc2e6195","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJhNjUzYzkyZGFlZjk2MjFjYzUwN2M3NjIxZjBlYzA1YmMyZTYxOTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-23T11:52:05Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-23T11:52:05Z"},"message":"[SYNCOPE-286] Removing Spring MVC REST services\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1505995 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"919a8b413da83d9c9bb6dff5a44aea13faa2e2cc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/919a8b413da83d9c9bb6dff5a44aea13faa2e2cc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2a653c92daef9621cc507c7621f0ec05bc2e6195","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a653c92daef9621cc507c7621f0ec05bc2e6195","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a653c92daef9621cc507c7621f0ec05bc2e6195","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a653c92daef9621cc507c7621f0ec05bc2e6195/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2933aca8005d8d9daf93303e149dec0fbe642952","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2933aca8005d8d9daf93303e149dec0fbe642952","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2933aca8005d8d9daf93303e149dec0fbe642952"}],"stats":{"total":6442,"additions":1166,"deletions":5276},"files":[{"sha":"8f1db6023b75a43afadfcfd685625c947da7cf9d","filename":"build-tools/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/build-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/build-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fpom.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -69,10 +69,6 @@ under the License.\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-web</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-webmvc</artifactId>\n-    </dependency>\n \n     <dependency>\n       <groupId>com.h2database</groupId>"},{"sha":"d89e067703708da344daac5c0f527fbd16661360","filename":"build-tools/src/main/resources/applicationContext.xml","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/build-tools%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/build-tools%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -16,19 +16,18 @@ software distributed under the License is distributed on an\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n-\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n   <bean id=\"testDataSource\"\n-          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+        class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n     <property name=\"driverClassName\" value=\"${testdb.driver}\"/>\n     <property name=\"url\" value=\"${testdb.url}\"/>\n     <property name=\"username\" value=\"${testdb.username}\"/>\n     <property name=\"password\" value=\"${testdb.password}\"/>\n   </bean>\n \n-</beans>\n\\ No newline at end of file\n+</beans>"},{"sha":"88a65e07ca6328d91345e5229a5426392428f8b6","filename":"client/src/main/java/org/apache/syncope/client/http/HttpClientParams.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FHttpClientParams.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,33 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.http;\n-\n-import java.util.Map;\n-import org.apache.http.params.SyncBasicHttpParams;\n-\n-public class HttpClientParams extends SyncBasicHttpParams {\n-\n-    public void setParameterMap(final Map<String, Object> parameters) {\n-        clear();\n-        \n-        for (Map.Entry<String, Object> entry : parameters.entrySet()) {\n-            setParameter(entry.getKey(), entry.getValue());\n-        }\n-    }\n-}\n\\ No newline at end of file"},{"sha":"8f4b19d2eaf225bb211f8d502a3c56bf5595a766","filename":"client/src/main/java/org/apache/syncope/client/http/PreemptiveAuthHttpRequestFactory.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fhttp%2FPreemptiveAuthHttpRequestFactory.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,75 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.http;\n-\n-import java.net.URI;\n-import org.apache.http.HttpHost;\n-import org.apache.http.auth.AuthScope;\n-import org.apache.http.client.AuthCache;\n-import org.apache.http.client.protocol.ClientContext;\n-import org.apache.http.conn.ClientConnectionManager;\n-import org.apache.http.impl.auth.BasicScheme;\n-import org.apache.http.impl.client.BasicAuthCache;\n-import org.apache.http.impl.client.DefaultHttpClient;\n-import org.apache.http.params.HttpParams;\n-import org.apache.http.protocol.BasicHttpContext;\n-import org.apache.http.protocol.HttpContext;\n-import org.springframework.http.HttpMethod;\n-import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n-\n-/**\n- * Factory for DefaultContextHttpClient, with preemptive BASIC authentication.\n- *\n- * @see DefaultContextHttpClient\n- */\n-public class PreemptiveAuthHttpRequestFactory extends HttpComponentsClientHttpRequestFactory {\n-\n-    private final HttpHost targetHost;\n-\n-    public PreemptiveAuthHttpRequestFactory(final String host, final int port, final String scheme) {\n-\n-        super();\n-        targetHost = new HttpHost(host, port, scheme);\n-    }\n-\n-    public PreemptiveAuthHttpRequestFactory(final String host, final int port, final String scheme,\n-            final ClientConnectionManager conman, final HttpParams params) {\n-\n-        super(new DefaultHttpClient(conman, params));\n-        targetHost = new HttpHost(host, port, scheme);\n-    }\n-\n-    public AuthScope getAuthScope() {\n-        return new AuthScope(targetHost.getHostName(), targetHost.getPort());\n-    }\n-\n-    @Override\n-    protected HttpContext createHttpContext(final HttpMethod httpMethod, final URI uri) {\n-\n-        // Add AuthCache to the execution context\n-        BasicHttpContext localcontext = new BasicHttpContext();\n-\n-        // Generate BASIC scheme object and add it to the local auth cache\n-        AuthCache authCache = new BasicAuthCache();\n-        authCache.put(targetHost, new BasicScheme());\n-        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n-\n-        return localcontext;\n-    }\n-}"},{"sha":"602e9d87e6930ae3dd1387ea0c4ad1a97a8919cd","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientExceptionMapper.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -32,7 +32,6 @@\n import org.apache.http.HttpStatus;\r\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n-import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\r\n import org.apache.syncope.common.validation.SyncopeClientException;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n@@ -81,9 +80,10 @@ public Exception fromResponse(final Response response) {\n \r\n     private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n         final int statusCode = response.getStatus();\r\n-        List<Object> exTypesInHeaders = response.getHeaders().get(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n+        List<Object> exTypesInHeaders = response.getHeaders().\r\n+                get(SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER);\r\n         if (exTypesInHeaders == null) {\r\n-            LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n+            LOG.debug(\"No \" + SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER + \" provided\");\r\n             return null;\r\n         }\r\n \r\n@@ -97,7 +97,7 @@ private SyncopeClientCompositeErrorException checkCompositeException(final Respo\n             try {\r\n                 exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exTypeAsString);\r\n             } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \"\r\n+                LOG.error(\"Unexpected value of \" + SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER + \": \"\r\n                         + exTypeAsString, e);\r\n             }\r\n             if (exceptionType != null) {\r"},{"sha":"80aba3ebe70cc9d3177fa2ba5192f1c68b6282f9","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConfigurationServiceProxy.java","status":"removed","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,97 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.io.UnsupportedEncodingException;\r\n-import java.net.URI;\r\n-import java.net.URLEncoder;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-import javax.ws.rs.InternalServerErrorException;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.services.ConfigurationService;\r\n-import org.apache.syncope.common.to.ConfigurationTO;\r\n-import org.apache.syncope.common.to.MailTemplateTO;\r\n-import org.apache.syncope.common.to.ValidatorTO;\r\n-import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class ConfigurationServiceProxy extends SpringServiceProxy implements ConfigurationService {\r\n-\r\n-    public ConfigurationServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final ConfigurationTO configurationTO) {\r\n-        ConfigurationTO created = getRestTemplate().postForObject(baseUrl + \"configuration/create\", configurationTO,\r\n-                ConfigurationTO.class);\r\n-        try {\r\n-            URI location = URI.create(baseUrl\r\n-                    + \"configuration/read/\"\r\n-                    + URLEncoder.encode(created.getKey(), SyncopeConstants.DEFAULT_ENCODING)\r\n-                    + \".json\");\r\n-            return Response.created(location)\r\n-                    .header(SyncopeConstants.REST_HEADER_ID, created.getKey())\r\n-                    .build();\r\n-        } catch (UnsupportedEncodingException e) {\r\n-            throw new InternalServerErrorException(e);\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final String key) {\r\n-        getRestTemplate().getForObject(baseUrl + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ConfigurationTO> list() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"configuration/list.json\",\r\n-                ConfigurationTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public ConfigurationTO read(final String key) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void update(final String key, final ConfigurationTO configurationTO) {\r\n-        getRestTemplate().postForObject(baseUrl + \"configuration/update\", configurationTO, ConfigurationTO.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Set<ValidatorTO> getValidators() {\r\n-        return CollectionWrapper.wrapValidators(\r\n-                handlePossiblyEmptyStringCollection(baseUrl + \"configuration/validators.json\"));\r\n-    }\r\n-\r\n-    @Override\r\n-    public Set<MailTemplateTO> getMailTemplates() {\r\n-        return CollectionWrapper.wrapMailTemplates(\r\n-                handlePossiblyEmptyStringCollection(baseUrl + \"configuration/mailTemplates.json\"));\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response dbExport() {\r\n-        return handleStream(baseUrl + \"configuration/dbexport\");\r\n-    }\r\n-}\r"},{"sha":"c3082724e656c4bfaba550df0b37f21938d48e83","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConnectorServiceProxy.java","status":"removed","additions":0,"deletions":143,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,143 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.net.URI;\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.services.ConnectorService;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n-import org.apache.syncope.common.to.ConnBundleTO;\r\n-import org.apache.syncope.common.to.ConnIdObjectClassTO;\r\n-import org.apache.syncope.common.to.ConnInstanceTO;\r\n-import org.apache.syncope.common.to.SchemaTO;\r\n-import org.apache.syncope.common.types.ConnConfProperty;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class ConnectorServiceProxy extends SpringServiceProxy implements ConnectorService {\r\n-\r\n-    public ConnectorServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final ConnInstanceTO connInstanceTO) {\r\n-        ConnInstanceTO response = getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connInstanceTO,\r\n-                ConnInstanceTO.class);\r\n-        URI location = URI.create(baseUrl + \"connector/read/\" + response.getId() + \".json\");\r\n-        return Response.created(location).build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void update(final Long connInstanceId, final ConnInstanceTO connInstanceTO) {\r\n-        getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connInstanceTO, ConnInstanceTO.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final Long connInstanceId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"connector/delete/{connInstanceId}.json\", ConnInstanceTO.class,\r\n-                connInstanceId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ConnInstanceTO> list(final String lang) {\r\n-        String param = (lang == null)\r\n-                ? \"\"\r\n-                : \"?lang=\" + lang;\r\n-\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/list.json\" + param,\r\n-                ConnInstanceTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public ConnInstanceTO read(final Long connInstanceId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"connector/read/{connInstanceId}\", ConnInstanceTO.class,\r\n-                connInstanceId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ConnBundleTO> getBundles(final String lang) {\r\n-        String param = (lang == null)\r\n-                ? \"\"\r\n-                : \"?lang=\" + lang;\r\n-\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/bundle/list.json\" + param,\r\n-                ConnBundleTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstanceTO connInstanceTO,\r\n-            final boolean includeSpecial) {\r\n-\r\n-        List<String> schemaNames = Arrays.asList(getRestTemplate().postForObject(\r\n-                baseUrl + \"connector/schemaNames/list?includeSpecial=\" + includeSpecial,\r\n-                connInstanceTO, String[].class));\r\n-        List<SchemaTO> result = new ArrayList<SchemaTO>(schemaNames.size());\r\n-        for (String name : schemaNames) {\r\n-            SchemaTO schemaTO = new SchemaTO();\r\n-            schemaTO.setName(name);\r\n-            result.add(schemaTO);\r\n-        }\r\n-        return result;\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ConnIdObjectClassTO> getSupportedObjectClasses(final Long connInstanceId,\r\n-            final ConnInstanceTO connInstanceTO) {\r\n-\r\n-        List<String> objectClasses = Arrays.asList(getRestTemplate().postForObject(\r\n-                baseUrl + \"connector/supportedObjectClasses/list\", connInstanceTO, String[].class));\r\n-        List<ConnIdObjectClassTO> result = new ArrayList<ConnIdObjectClassTO>(objectClasses.size());\r\n-        for (String objectClass : objectClasses) {\r\n-            result.add(new ConnIdObjectClassTO(objectClass));\r\n-        }\r\n-        return result;\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\r\n-        return Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"connector/{connInstanceId}/configurationProperty/list\", ConnConfProperty[].class,\r\n-                connInstanceId));\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean check(final ConnInstanceTO connInstanceTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"connector/check.json\", connInstanceTO, Boolean.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public ConnInstanceTO readByResource(final String resourceName) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/readByResource\",\r\n-                ConnInstanceTO.class, resourceName);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void reload() {\r\n-        getRestTemplate().postForLocation(baseUrl + \"connector/reload\", null);\r\n-    }\r\n-\r\n-    @Override\r\n-    public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"connector/bulk\", bulkAction, BulkActionRes.class);\r\n-    }\r\n-}\r"},{"sha":"d46338ed4889544d82ddd941f2dfedfa9e4073a3","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/EntitlementServiceProxy.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,48 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-import org.apache.syncope.common.services.EntitlementService;\r\n-import org.apache.syncope.common.to.EntitlementTO;\r\n-import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class EntitlementServiceProxy extends SpringServiceProxy implements EntitlementService {\r\n-\r\n-    public EntitlementServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Set<EntitlementTO> getAllEntitlements() {\r\n-        Set<String> entitlements = new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(\r\n-                baseUrl + \"auth/allentitlements.json\", String[].class)));\r\n-        return CollectionWrapper.wrap(entitlements);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Set<EntitlementTO> getMyEntitlements() {\r\n-        Set<String> entitlements = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"auth/entitlements.json\", String[].class)));\r\n-        return CollectionWrapper.wrap(entitlements);\r\n-    }\r\n-}\r"},{"sha":"af57998ab56977962eae635b014b8c84db9d8f79","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/LoggerServiceProxy.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,107 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n-import javax.ws.rs.BadRequestException;\r\n-import javax.ws.rs.NotFoundException;\r\n-\r\n-import org.apache.syncope.common.services.LoggerService;\r\n-import org.apache.syncope.common.to.LoggerTO;\r\n-import org.apache.syncope.common.types.AuditLoggerName;\r\n-import org.apache.syncope.common.types.LoggerType;\r\n-import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r\n-\r\n-    public LoggerServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<LoggerTO> list(final LoggerType type) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/log/list\", LoggerTO[].class));\r\n-\r\n-            case AUDIT:\r\n-                List<AuditLoggerName> auditNames = Arrays.asList(getRestTemplate().getForObject(\r\n-                        baseUrl + \"logger/audit/list\", AuditLoggerName[].class));\r\n-                return CollectionWrapper.unwrapLogger(auditNames);\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public LoggerTO read(final LoggerType type, final String name) {\r\n-        List<LoggerTO> logger = list(type);\r\n-        for (LoggerTO l : logger) {\r\n-            if (l.getName().equals(name)) {\r\n-                return l;\r\n-            }\r\n-        }\r\n-        throw new NotFoundException();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void update(final LoggerType type, final String name, final LoggerTO logger) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                getRestTemplate().postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n-                        logger.getLevel());\r\n-                break;\r\n-\r\n-            case AUDIT:\r\n-                try {\r\n-                    getRestTemplate().put(baseUrl + \"logger/audit/enable\", AuditLoggerName.fromLoggerName(name));\r\n-                } catch (Exception e) {\r\n-                    throw new BadRequestException(e);\r\n-                }\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final LoggerType type, final String name) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                getRestTemplate().getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n-                break;\r\n-            case AUDIT:\r\n-                try {\r\n-                    getRestTemplate().put(baseUrl + \"logger/audit/disable\", AuditLoggerName.fromLoggerName(name));\r\n-                } catch (Exception e) {\r\n-                    throw new BadRequestException(e);\r\n-                }\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n-\r\n-    }\r\n-}\r"},{"sha":"7c79f480cfa3e0ec1cc127917e91b2f9813af34c","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/NotificationServiceProxy.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,69 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.net.URI;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n-import javax.ws.rs.core.Response;\r\n-\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.services.NotificationService;\r\n-import org.apache.syncope.common.to.NotificationTO;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class NotificationServiceProxy extends SpringServiceProxy implements NotificationService {\r\n-\r\n-    public NotificationServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final NotificationTO notificationTO) {\r\n-        NotificationTO notification = getRestTemplate().postForObject(baseUrl + \"notification/create.json\",\r\n-                notificationTO, NotificationTO.class);\r\n-        URI location = URI.create(baseUrl + \"notification/read/\" + notification.getId() + \".json\");\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, notification.getId()).build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final Long notificationId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"notification/delete/{notificationId}.json\",\r\n-                NotificationTO.class, notificationId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<NotificationTO> list() {\r\n-        return Arrays\r\n-                .asList(getRestTemplate().getForObject(baseUrl + \"notification/list.json\", NotificationTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public NotificationTO read(final Long notificationId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"notification/read/{notificationId}.json\",\r\n-                NotificationTO.class, notificationId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void update(final Long notificationId, final NotificationTO notificationTO) {\r\n-        getRestTemplate().postForObject(baseUrl + \"notification/update.json\", notificationTO,\r\n-                NotificationTO.class);\r\n-    }\r\n-}\r"},{"sha":"896c0b897e024a1e879a6a109806e414818be3ed","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/PolicyServiceProxy.java","status":"removed","additions":0,"deletions":157,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,157 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.net.URI;\r\n-import java.util.Arrays;\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-import javax.ws.rs.NotFoundException;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.services.PolicyService;\r\n-import org.apache.syncope.common.to.AccountPolicyTO;\r\n-import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n-import org.apache.syncope.common.to.PasswordPolicyTO;\r\n-import org.apache.syncope.common.to.PolicyTO;\r\n-import org.apache.syncope.common.to.SyncPolicyTO;\r\n-import org.apache.syncope.common.types.PolicyType;\r\n-import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-@SuppressWarnings(\"unchecked\")\r\n-public class PolicyServiceProxy extends SpringServiceProxy implements PolicyService {\r\n-\r\n-    public PolicyServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends PolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n-        PolicyTO policy = getRestTemplate().postForObject(baseUrl + \"policy/{kind}/create\", policyTO,\r\n-                policyTO.getClass(), typeToUrl(policyTO.getType()));\r\n-\r\n-        return Response.created(URI.create(baseUrl + \"policy/read/\" + policy.getId() + \".json\")).build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends PolicyTO> void delete(final PolicyType type, final Long policyId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    @Override\r\n-    public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n-        List<T> result = null;\r\n-\r\n-        switch (type) {\r\n-            case ACCOUNT:\r\n-            case GLOBAL_ACCOUNT:\r\n-                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n-                        AccountPolicyTO[].class, type));\r\n-                break;\r\n-\r\n-            case PASSWORD:\r\n-            case GLOBAL_PASSWORD:\r\n-                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n-                        PasswordPolicyTO[].class, type));\r\n-                break;\r\n-\r\n-            case SYNC:\r\n-            case GLOBAL_SYNC:\r\n-                result = (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\",\r\n-                        SyncPolicyTO[].class, type));\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n-        return (T) getRestTemplate().getForObject(baseUrl + \"policy/read/{id}.json\", getTOClass(type), policyId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n-        return (T) getRestTemplate().getForObject(baseUrl + \"policy/{kind}/global/read.json\", getTOClass(type),\r\n-                typeToUrl(type));\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends PolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n-        getRestTemplate().postForObject(baseUrl + \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n-                typeToUrl(policyTO.getType()));\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    private <T extends PolicyTO> Class<T> getTOClass(final PolicyType type) {\r\n-        Class<T> result = null;\r\n-\r\n-        switch (type) {\r\n-            case ACCOUNT:\r\n-            case GLOBAL_ACCOUNT:\r\n-                result = (Class<T>) AccountPolicyTO.class;\r\n-                break;\r\n-\r\n-            case PASSWORD:\r\n-            case GLOBAL_PASSWORD:\r\n-                result = (Class<T>) PasswordPolicyTO.class;\r\n-                break;\r\n-\r\n-            case SYNC:\r\n-            case GLOBAL_SYNC:\r\n-                result = (Class<T>) SyncPolicyTO.class;\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(\"Policy Type not supported: \" + type);\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    private String typeToUrl(final PolicyType type) {\r\n-        String url = type.name().toLowerCase();\r\n-        int index = url.indexOf('_');\r\n-        return index == -1 ? url : url.substring(index + 1);\r\n-    }\r\n-\r\n-    @Override\r\n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\r\n-    public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(final PolicyType type) {\r\n-        Set<CorrelationRuleClassTO> result = Collections.<CorrelationRuleClassTO>emptySet();\r\n-\r\n-        switch (type) {\r\n-            case SYNC:\r\n-            case GLOBAL_SYNC:\r\n-                result = CollectionWrapper.wrapSyncCorrelationRuleClasses(\r\n-                        handlePossiblyEmptyStringCollection(baseUrl + \"policy/syncCorrelationRuleClasses.json\"));\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new NotFoundException();\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-}\r"},{"sha":"8f2ff677cd4cafccf4abd54c48a7f8b0485132b9","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ReportServiceProxy.java","status":"removed","additions":0,"deletions":108,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,108 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.net.URI;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.services.ReportService;\r\n-import org.apache.syncope.common.services.ReportletConfClasses;\r\n-import org.apache.syncope.common.to.ReportExecTO;\r\n-import org.apache.syncope.common.to.ReportTO;\r\n-import org.apache.syncope.common.types.ReportExecExportFormat;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class ReportServiceProxy extends SpringServiceProxy implements ReportService {\r\n-\r\n-    public ReportServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final ReportTO reportTO) {\r\n-        ReportTO createdReportTO = getRestTemplate().postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n-        URI location = URI.create(baseUrl + \"report/read/\" + createdReportTO.getId() + \".json\");\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, createdReportTO.getId()).build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void update(final Long reportId, final ReportTO reportTO) {\r\n-        getRestTemplate().postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public int count() {\r\n-        return getRestTemplate().getForObject(baseUrl + \"report/count.json\", Integer.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ReportTO> list() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/list\", ReportTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ReportTO> list(final int page, final int size) {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/list/{page}/{size}\", ReportTO[].class,\r\n-                page, size));\r\n-    }\r\n-\r\n-    @Override\r\n-    public ReportletConfClasses getReportletConfClasses() {\r\n-        return new ReportletConfClasses(\r\n-                handlePossiblyEmptyStringCollection(baseUrl + \"report/reportletConfClasses.json\"));\r\n-    }\r\n-\r\n-    @Override\r\n-    public ReportTO read(final Long reportId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public ReportExecTO readExecution(final Long executionId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"report/execution/read/{executionId}\", ReportExecTO.class,\r\n-                executionId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\r\n-        final String format = fmt == null\r\n-                ? \"\"\r\n-                : \"?fmt=\" + fmt.toString();\r\n-        return handleStream(baseUrl + \"report/execution/export/\" + executionId + format);\r\n-    }\r\n-\r\n-    @Override\r\n-    public ReportExecTO execute(final Long reportId) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"report/execute/{reportId}\", null, ReportExecTO.class,\r\n-                reportId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final Long reportId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"report/delete/{reportId}\", ReportTO.class, reportId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void deleteExecution(final Long executionId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"report/execution/delete/{executionId}\", ReportExecTO.class,\r\n-                executionId);\r\n-    }\r\n-}\r"},{"sha":"ed042b45d0a76d0f3f079ad22bf9c16b21135d3d","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ResourceServiceProxy.java","status":"removed","additions":0,"deletions":117,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,117 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.io.UnsupportedEncodingException;\r\n-import java.net.URI;\r\n-import java.net.URLEncoder;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-\r\n-import javax.ws.rs.InternalServerErrorException;\r\n-import javax.ws.rs.core.Response;\r\n-\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.services.ResourceService;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n-import org.apache.syncope.common.to.ConnObjectTO;\r\n-import org.apache.syncope.common.to.PropagationActionClassTO;\r\n-import org.apache.syncope.common.to.ResourceTO;\r\n-import org.apache.syncope.common.types.AttributableType;\r\n-import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class ResourceServiceProxy extends SpringServiceProxy implements ResourceService {\r\n-\r\n-    public ResourceServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final ResourceTO resourceTO) {\r\n-        ResourceTO resource = getRestTemplate().postForObject(baseUrl + \"resource/create.json\", resourceTO,\r\n-                ResourceTO.class);\r\n-\r\n-        try {\r\n-            URI location = URI.create(baseUrl\r\n-                    + \"resource/read/\"\r\n-                    + URLEncoder.encode(resource.getName(), SyncopeConstants.DEFAULT_ENCODING)\r\n-                    + \".json\");\r\n-            return Response.created(location).\r\n-                    header(SyncopeConstants.REST_HEADER_ID, resource.getName()).\r\n-                    build();\r\n-        } catch (UnsupportedEncodingException e) {\r\n-            throw new InternalServerErrorException(e);\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public void update(final String resourceName, final ResourceTO resourceTO) {\r\n-        getRestTemplate().postForObject(baseUrl + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final String resourceName) {\r\n-        getRestTemplate().getForObject(baseUrl + \"resource/delete/{resourceName}.json\", ResourceTO.class, resourceName);\r\n-    }\r\n-\r\n-    @Override\r\n-    public ResourceTO read(final String resourceName) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"resource/read/{resourceName}.json\", ResourceTO.class,\r\n-                resourceName);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Set<PropagationActionClassTO> getPropagationActionsClasses() {\r\n-        return CollectionWrapper.wrapPropagationActionClasses(\r\n-                handlePossiblyEmptyStringCollection(baseUrl + \"resource/propagationActionsClasses.json\"));\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ResourceTO> list() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"resource/list.json\", ResourceTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<ResourceTO> list(final Long connInstanceId) {\r\n-        return connInstanceId == null\r\n-                ? list()\r\n-                : Arrays.asList(getRestTemplate().getForObject(baseUrl + \"resource/list.json?connInstanceId={connId}\",\r\n-                ResourceTO[].class, connInstanceId));\r\n-    }\r\n-\r\n-    @Override\r\n-    public ConnObjectTO getConnectorObject(final String resourceName, final AttributableType type, final Long id) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"resource/{resourceName}/read/{type}/{id}.json\",\r\n-                ConnObjectTO.class, resourceName, type.name(), id);\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean check(final ResourceTO resourceTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"resource/check.json\", resourceTO, Boolean.class).\r\n-                booleanValue();\r\n-    }\r\n-\r\n-    @Override\r\n-    public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"resource/bulk\", bulkAction, BulkActionRes.class);\r\n-    }\r\n-}\r"},{"sha":"14085ce24d07e60f6a6261a4e4ef63ea772a038f","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/RoleServiceProxy.java","status":"removed","additions":0,"deletions":113,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,113 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.net.URI;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n-import javax.ws.rs.ServiceUnavailableException;\r\n-import javax.ws.rs.core.Response;\r\n-\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.mod.RoleMod;\r\n-import org.apache.syncope.common.search.NodeCond;\r\n-import org.apache.syncope.common.services.RoleService;\r\n-import org.apache.syncope.common.to.RoleTO;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class RoleServiceProxy extends SpringServiceProxy implements RoleService {\r\n-\r\n-    public RoleServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<RoleTO> children(final Long roleId) {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"role/children/{roleId}.json\",\r\n-                RoleTO[].class, roleId));\r\n-    }\r\n-\r\n-    @Override\r\n-    public int count() {\r\n-        return Integer.valueOf(list().size());\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final RoleTO roleTO) {\r\n-        RoleTO role = getRestTemplate().postForObject(baseUrl + \"role/create\", roleTO, RoleTO.class);\r\n-\r\n-        URI location = URI.create(baseUrl + \"role/read/\" + role.getId() + \".json\");\r\n-        return Response.created(location)\r\n-                .header(SyncopeConstants.REST_HEADER_ID, role.getId())\r\n-                .entity(role)\r\n-                .build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public RoleTO delete(final Long roleId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"role/delete/{roleId}\", RoleTO.class, roleId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<RoleTO> list() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"role/list.json\", RoleTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<RoleTO> list(final int page, final int size) {\r\n-        throw new ServiceUnavailableException();\r\n-    }\r\n-\r\n-    @Override\r\n-    public RoleTO parent(final Long roleId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"role/parent/{roleId}.json\", RoleTO.class, roleId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public RoleTO read(final Long roleId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"role/read/{roleId}.json\", RoleTO.class, roleId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<RoleTO> search(final NodeCond searchCondition) {\r\n-        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size) {\r\n-        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search/{page}/{size}\", searchCondition,\r\n-                RoleTO[].class, page, size));\r\n-    }\r\n-\r\n-    @Override\r\n-    public int searchCount(final NodeCond searchCondition) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"role/search/count.json\", searchCondition, Integer.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public RoleTO selfRead(final Long roleId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"role/selfRead/{roleId}\", RoleTO.class, roleId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public RoleTO update(final Long roleId, final RoleMod roleMod) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"role/update\", roleMod, RoleTO.class);\r\n-    }\r\n-}\r"},{"sha":"b904882625c2ac2e33eaf9350f81429ac7c1eaff","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SchemaServiceProxy.java","status":"removed","additions":0,"deletions":123,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,123 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.io.UnsupportedEncodingException;\r\n-import java.net.URI;\r\n-import java.net.URLEncoder;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n-import javax.ws.rs.InternalServerErrorException;\r\n-import javax.ws.rs.core.Response;\r\n-\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.services.SchemaService;\r\n-import org.apache.syncope.common.to.AbstractSchemaTO;\r\n-import org.apache.syncope.common.to.DerivedSchemaTO;\r\n-import org.apache.syncope.common.to.SchemaTO;\r\n-import org.apache.syncope.common.to.VirtualSchemaTO;\r\n-import org.apache.syncope.common.types.AttributableType;\r\n-import org.apache.syncope.common.types.SchemaType;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-@SuppressWarnings(\"unchecked\")\r\n-public class SchemaServiceProxy extends SpringServiceProxy implements SchemaService {\r\n-\r\n-    public SchemaServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends AbstractSchemaTO> Response create(final AttributableType kind, final SchemaType type,\r\n-            final T schemaTO) {\r\n-        AbstractSchemaTO schema = getRestTemplate().postForObject(baseUrl + type.toSpringURL() + \"/{kind}/create\",\r\n-                schemaTO, getTOClass(type), kind);\r\n-\r\n-        try {\r\n-            URI location = URI.create(baseUrl\r\n-                    + type.toSpringURL() + \"/\" + kind + \"/read/\"\r\n-                    + URLEncoder.encode(schema.getName(), SyncopeConstants.DEFAULT_ENCODING)\r\n-                    + \".json\");\r\n-            return Response.created(location)\r\n-                    .header(SyncopeConstants.REST_HEADER_ID, schema.getName())\r\n-                    .build();\r\n-        } catch (UnsupportedEncodingException e) {\r\n-            throw new InternalServerErrorException(e);\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final AttributableType kind, final SchemaType type, final String schemaName) {\r\n-        getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/delete/{name}.json\", getTOClass(type),\r\n-                kind, schemaName);\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<? extends AbstractSchemaTO> list(final AttributableType kind, final SchemaType type) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/list.json\",\r\n-                        SchemaTO[].class, kind));\r\n-\r\n-            case DERIVED:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/list.json\",\r\n-                        DerivedSchemaTO[].class, kind));\r\n-\r\n-            case VIRTUAL:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/list.json\",\r\n-                        VirtualSchemaTO[].class, kind));\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends AbstractSchemaTO> T read(final AttributableType kind, final SchemaType type,\r\n-            final String schemaName) {\r\n-\r\n-        return (T) getRestTemplate().getForObject(baseUrl + type.toSpringURL() + \"/{kind}/read/{name}.json\",\r\n-                getTOClass(type), kind, schemaName);\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n-            final String schemaName, final T schemaTO) {\r\n-\r\n-        getRestTemplate().postForObject(baseUrl + type.toSpringURL() + \"/{kind}/update\", schemaTO, getTOClass(type),\r\n-                kind);\r\n-    }\r\n-\r\n-    private Class<? extends AbstractSchemaTO> getTOClass(final SchemaType type) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                return SchemaTO.class;\r\n-\r\n-            case DERIVED:\r\n-                return DerivedSchemaTO.class;\r\n-\r\n-            case VIRTUAL:\r\n-                return VirtualSchemaTO.class;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n-        }\r\n-    }\r\n-}\r"},{"sha":"6a049902aa494a916bc80eaf63492bbe7339fc96","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringServiceProxy.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,107 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.io.IOException;\r\n-import java.util.Collection;\r\n-import java.util.Collections;\r\n-import javax.ws.rs.InternalServerErrorException;\r\n-import javax.ws.rs.core.Response;\r\n-import org.apache.http.HttpEntity;\r\n-import org.apache.http.HttpHost;\r\n-import org.apache.http.HttpResponse;\r\n-import org.apache.http.HttpStatus;\r\n-import org.apache.http.auth.AuthScope;\r\n-import org.apache.http.client.AuthCache;\r\n-import org.apache.http.client.methods.HttpGet;\r\n-import org.apache.http.client.protocol.ClientContext;\r\n-import org.apache.http.impl.auth.BasicScheme;\r\n-import org.apache.http.impl.client.BasicAuthCache;\r\n-import org.apache.http.protocol.BasicHttpContext;\r\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public abstract class SpringServiceProxy {\r\n-\r\n-    protected String baseUrl;\r\n-\r\n-    private RestTemplate restTemplate;\r\n-\r\n-    public SpringServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        this.baseUrl = baseUrl;\r\n-        this.restTemplate = restTemplate;\r\n-    }\r\n-\r\n-    public void setRestTemplate(final RestTemplate restTemplate) {\r\n-        this.restTemplate = restTemplate;\r\n-    }\r\n-\r\n-    public RestTemplate getRestTemplate() {\r\n-        return restTemplate;\r\n-    }\r\n-\r\n-    protected Response handleStream(final String url) {\r\n-        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n-                getAuthScope();\r\n-        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\r\n-        final BasicHttpContext localcontext = new BasicHttpContext();\r\n-        final AuthCache authCache = new BasicAuthCache();\r\n-        authCache.put(targetHost, new BasicScheme());\r\n-        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\r\n-\r\n-        final HttpGet getMethod = new HttpGet(url);\r\n-        try {\r\n-            final HttpResponse httpResponse =\r\n-                    ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n-                    getHttpClient().execute(targetHost, getMethod, localcontext);\r\n-\r\n-            Response response;\r\n-            if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\r\n-                HttpEntity entity = httpResponse.getEntity();\r\n-                response = Response.ok(entity.getContent(), entity.getContentType().getValue()).\r\n-                        header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\r\n-                        httpResponse.getLastHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER).getValue()).\r\n-                        build();\r\n-            } else {\r\n-                response = Response.noContent().status(httpResponse.getStatusLine().getStatusCode()).\r\n-                        build();\r\n-            }\r\n-\r\n-            return response;\r\n-        } catch (IOException e) {\r\n-            throw new InternalServerErrorException(e);\r\n-        }\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    protected Collection<String> handlePossiblyEmptyStringCollection(final String url) {\r\n-        Collection<String> result = Collections.<String>emptySet();\r\n-\r\n-        final Object object = getRestTemplate().getForObject(url, Object.class);\r\n-        if (object instanceof String) {\r\n-            String string = (String) object;\r\n-            result = Collections.singleton(string);\r\n-        } else if (object instanceof Collection) {\r\n-            result = (Collection<String>) object;\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-}\r"},{"sha":"1a9cf55011bd079cbab8ea21144928ff6e31b5f4","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/TaskServiceProxy.java","status":"removed","additions":0,"deletions":221,"changes":221,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,221 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.io.IOException;\r\n-import java.net.URI;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-import javax.ws.rs.core.Response;\r\n-import javax.xml.ws.WebServiceException;\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.services.TaskService;\r\n-import org.apache.syncope.common.to.BulkAction;\r\n-import org.apache.syncope.common.to.BulkActionRes;\r\n-import org.apache.syncope.common.to.JobClassTO;\r\n-import org.apache.syncope.common.to.NotificationTaskTO;\r\n-import org.apache.syncope.common.to.PropagationTaskTO;\r\n-import org.apache.syncope.common.to.ReportExecTO;\r\n-import org.apache.syncope.common.to.SchedTaskTO;\r\n-import org.apache.syncope.common.to.SyncActionClassTO;\r\n-import org.apache.syncope.common.to.SyncTaskTO;\r\n-import org.apache.syncope.common.to.TaskExecTO;\r\n-import org.apache.syncope.common.to.TaskTO;\r\n-import org.apache.syncope.common.types.TaskType;\r\n-import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.springframework.http.HttpMethod;\r\n-import org.springframework.http.client.ClientHttpRequest;\r\n-import org.springframework.http.client.ClientHttpResponse;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-@SuppressWarnings(\"unchecked\")\r\n-public class TaskServiceProxy extends SpringServiceProxy implements TaskService {\r\n-\r\n-    public TaskServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public int count(final TaskType type) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"task/{type}/count.json\", Integer.class, type);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final TaskTO taskTO) {\r\n-        String subTypeString = (taskTO instanceof SyncTaskTO)\r\n-                ? \"sync\"\r\n-                : (taskTO instanceof SchedTaskTO)\r\n-                ? \"sched\"\r\n-                : \"\";\r\n-\r\n-        TaskTO task = getRestTemplate().postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n-                subTypeString);\r\n-\r\n-        return Response.created(URI.create(baseUrl + \"task/read/\" + task.getId() + \".json\"))\r\n-                .header(SyncopeConstants.REST_HEADER_ID, task.getId()).build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final Long taskId) {\r\n-        ClientHttpResponse response = null;\r\n-        try {\r\n-            ClientHttpRequest request = getRestTemplate().getRequestFactory().createRequest(\r\n-                    URI.create(baseUrl + \"task/delete/\" + taskId), HttpMethod.GET);\r\n-            response = request.execute();\r\n-        } catch (IOException e) {\r\n-            throw new WebServiceException(\"Cannot send request to delete task \" + taskId, e);\r\n-        } finally {\r\n-            if (response != null) {\r\n-                response.close();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public void deleteExecution(final Long executionId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"task/execution/delete/{executionId}.json\", TaskExecTO.class,\r\n-                executionId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public TaskExecTO execute(final Long taskId, final boolean dryRun) {\r\n-        String param = (dryRun)\r\n-                ? \"?dryRun=true\"\r\n-                : \"\";\r\n-        return getRestTemplate().postForObject(baseUrl + \"task/execute/{taskId}.json\" + param, null, TaskExecTO.class,\r\n-                taskId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Set<JobClassTO> getJobClasses() {\r\n-        return CollectionWrapper.wrapJobClasses(\r\n-                handlePossiblyEmptyStringCollection(baseUrl + \"task/jobClasses.json\"));\r\n-    }\r\n-\r\n-    @Override\r\n-    public Set<SyncActionClassTO> getSyncActionsClasses() {\r\n-        return CollectionWrapper.wrapSyncActionClasses(\r\n-                handlePossiblyEmptyStringCollection(baseUrl + \"task/syncActionsClasses.json\"));\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<? extends TaskTO> list(final TaskType type) {\r\n-        switch (type) {\r\n-            case PROPAGATION:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n-                        PropagationTaskTO[].class, type));\r\n-\r\n-            case NOTIFICATION:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n-                        NotificationTaskTO[].class, type));\r\n-\r\n-            case SCHEDULED:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n-                        SchedTaskTO[].class, type));\r\n-\r\n-            case SYNCHRONIZATION:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list.json\",\r\n-                        SyncTaskTO[].class, type));\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(\"TaskType is not supported.\");\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<? extends TaskTO> list(final TaskType type, final int page, final int size) {\r\n-        switch (type) {\r\n-            case PROPAGATION:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                        PropagationTaskTO[].class, type, page, size));\r\n-\r\n-            case NOTIFICATION:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                        NotificationTaskTO[].class, type, page, size));\r\n-\r\n-            case SCHEDULED:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                        SchedTaskTO[].class, type, page, size));\r\n-\r\n-            case SYNCHRONIZATION:\r\n-                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n-                        SyncTaskTO[].class, type, page, size));\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(\"TaskType is not supported :\" + type);\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public <T extends TaskTO> T read(final TaskType type, final Long taskId) {\r\n-        return (T) getRestTemplate().getForObject(baseUrl + \"task/read/{taskId}.json\", getTOClass(type), taskId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public TaskExecTO readExecution(final Long executionId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"task/execution/read/{executionId}.json\", TaskExecTO.class,\r\n-                executionId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void report(final Long executionId, final ReportExecTO report) {\r\n-        getRestTemplate().getForObject(\r\n-                baseUrl + \"task/execution/report/{executionId}.json\" + \"?executionStatus={status}&message={message}\",\r\n-                TaskExecTO.class, executionId, report.getStatus(), report.getMessage());\r\n-    }\r\n-\r\n-    @Override\r\n-    public void update(final Long taskId, final TaskTO taskTO) {\r\n-        String path = (taskTO instanceof SyncTaskTO)\r\n-                ? \"sync\"\r\n-                : (taskTO instanceof SchedTaskTO)\r\n-                ? \"sched\"\r\n-                : null;\r\n-        if (path == null) {\r\n-            throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r\n-        }\r\n-\r\n-        getRestTemplate().postForObject(baseUrl + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n-    }\r\n-\r\n-    private Class<? extends TaskTO> getTOClass(final TaskType type) {\r\n-        switch (type) {\r\n-            case PROPAGATION:\r\n-                return PropagationTaskTO.class;\r\n-\r\n-            case NOTIFICATION:\r\n-                return NotificationTaskTO.class;\r\n-\r\n-            case SCHEDULED:\r\n-                return SchedTaskTO.class;\r\n-\r\n-            case SYNCHRONIZATION:\r\n-                return SyncTaskTO.class;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(\"SchemaType is not supported: \" + type);\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"task/bulk\", bulkAction, BulkActionRes.class);\r\n-    }\r\n-}\r"},{"sha":"2076f947a45ac11ed701a0f8220c8083cee8035b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserRequestServiceProxy.java","status":"removed","additions":0,"deletions":90,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,90 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.net.URI;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import javax.ws.rs.core.Response;\r\n-\r\n-import org.apache.syncope.common.SyncopeConstants;\r\n-import org.apache.syncope.common.services.UserRequestService;\r\n-import org.apache.syncope.common.to.UserRequestTO;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class UserRequestServiceProxy extends SpringServiceProxy implements UserRequestService {\r\n-\r\n-    public UserRequestServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response getOptions() {\r\n-        return Response.ok()\r\n-                .header(\"Allow\", \"GET,POST,OPTIONS,HEAD\")\r\n-                .header(SYNCOPE_CREATE_ALLOWED, isCreateAllowed())\r\n-                .build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean isCreateAllowed() {\r\n-        return getRestTemplate().getForObject(baseUrl + \"user/request/create/allowed.json\", Boolean.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public Response create(final UserRequestTO userRequestTO) {\r\n-        UserRequestTO created;\r\n-        switch (userRequestTO.getType()) {\r\n-            case UPDATE:\r\n-                created = getRestTemplate().postForObject(baseUrl + \"user/request/update\", userRequestTO.getUserMod(),\r\n-                        UserRequestTO.class);\r\n-                break;\r\n-\r\n-            case DELETE:\r\n-                created = getRestTemplate().getForObject(baseUrl + \"user/request/delete/{userId}\", UserRequestTO.class,\r\n-                        userRequestTO.getUserId());\r\n-                break;\r\n-\r\n-            case CREATE:\r\n-            default:\r\n-                created = getRestTemplate().postForObject(baseUrl + \"user/request/create\", userRequestTO.getUserTO(),\r\n-                        UserRequestTO.class);\r\n-        }\r\n-\r\n-        URI location = URI.create(baseUrl + \"user/request/read/\" + created.getId() + \".json\");\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).build();\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<UserRequestTO> list() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/request/list.json\", UserRequestTO[].class));\r\n-    }\r\n-\r\n-    @Override\r\n-    public UserRequestTO read(final Long requestId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"user/request/read/{requestId}.json\", UserRequestTO.class,\r\n-                requestId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void delete(final Long requestId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"user/request/deleteRequest/{requestId}.json\", UserRequestTO.class,\r\n-                requestId);\r\n-    }\r\n-}\r"},{"sha":"b323f0541647fbebee032f0d89350b17cc16acf3","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserServiceProxy.java","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,187 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.services.proxy;\n-\n-import java.net.URI;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.SyncopeConstants;\n-import org.apache.syncope.common.mod.UserMod;\n-import org.apache.syncope.common.search.NodeCond;\n-import org.apache.syncope.common.services.UserService;\n-import org.apache.syncope.common.to.BulkAction;\n-import org.apache.syncope.common.to.BulkActionRes;\n-import org.apache.syncope.common.to.PropagationRequestTO;\n-import org.apache.syncope.common.to.UserTO;\n-import org.springframework.web.client.RestTemplate;\n-\n-public class UserServiceProxy extends SpringServiceProxy implements UserService {\n-\n-    public UserServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\n-        super(baseUrl, restTemplate);\n-    }\n-\n-    @Override\n-    public int count() {\n-        return getRestTemplate().getForObject(baseUrl + \"user/count.json\", Integer.class);\n-    }\n-\n-    @Override\n-    public List<UserTO> list() {\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/list.json\", UserTO[].class));\n-    }\n-\n-    @Override\n-    public List<UserTO> list(final int page, final int size) {\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n-                UserTO[].class, page, size));\n-    }\n-\n-    @Override\n-    public UserTO read(final Long userId) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO read(final String username) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/readByUsername/{username}.json\", UserTO.class,\n-                username);\n-    }\n-\n-    @Override\n-    public Response create(final UserTO userTO) {\n-        UserTO created = getRestTemplate().postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n-        URI location = URI.create(baseUrl + \"user/read/\" + created.getId() + \".json\");\n-        return Response.created(location)\n-                .header(SyncopeConstants.REST_HEADER_ID, created.getId())\n-                .entity(created)\n-                .build();\n-    }\n-\n-    @Override\n-    public UserTO update(final Long userId, final UserMod userMod) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n-    }\n-\n-    @Override\n-    public UserTO delete(final Long userId) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO activate(final long userId, final String token) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO activate(final long userId, final String token,\n-            final PropagationRequestTO propagationRequestTO) {\n-\n-        return getRestTemplate().postForObject(baseUrl + \"user/activate/{userId}?token=\" + token, propagationRequestTO,\n-                UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO activateByUsername(final String username, final String token) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n-                UserTO.class, username);\n-    }\n-\n-    @Override\n-    public UserTO activateByUsername(final String username, final String token,\n-            final PropagationRequestTO propagationRequestTO) {\n-\n-        return getRestTemplate().postForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n-                propagationRequestTO, UserTO.class, username);\n-    }\n-\n-    @Override\n-    public UserTO suspend(final long userId) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO suspend(final long userId, final PropagationRequestTO propagationRequestTO) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/suspend/{userId}\", propagationRequestTO,\n-                UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO suspendByUsername(final String username) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/suspendByUsername/{username}.json\",\n-                UserTO.class, username);\n-    }\n-\n-    @Override\n-    public UserTO suspendByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/suspendByUsername/{username}.json\", propagationRequestTO,\n-                UserTO.class, username);\n-    }\n-\n-    @Override\n-    public UserTO reactivate(final long userId) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO reactivate(final long userId, final PropagationRequestTO propagationRequestTO) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/reactivate/{userId}\", propagationRequestTO,\n-                UserTO.class, userId);\n-    }\n-\n-    @Override\n-    public UserTO reactivateByUsername(final String username) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n-                UserTO.class, username);\n-    }\n-\n-    @Override\n-    public UserTO reactivateByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n-                propagationRequestTO, UserTO.class, username);\n-    }\n-\n-    @Override\n-    public UserTO readSelf() {\n-        return getRestTemplate().getForObject(baseUrl + \"user/read/self\", UserTO.class);\n-    }\n-\n-    @Override\n-    public List<UserTO> search(final NodeCond searchCondition) {\n-        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search\", searchCondition,\n-                UserTO[].class));\n-    }\n-\n-    @Override\n-    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size) {\n-        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search/{page}/{size}\",\n-                searchCondition, UserTO[].class, page, size));\n-    }\n-\n-    @Override\n-    public int searchCount(final NodeCond searchCondition) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n-    }\n-\n-    @Override\n-    public BulkActionRes bulkAction(final BulkAction bulkAction) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/bulk\", bulkAction, BulkActionRes.class);\n-    }\n-}"},{"sha":"28d3cb6fdb2eb7328cbf838813c6b78c24b2e689","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserWorkflowServiceProxy.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserWorkflowServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.services.proxy;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import org.apache.syncope.common.services.UserWorkflowService;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.to.WorkflowFormTO;\n-import org.springframework.web.client.RestTemplate;\n-\n-public class UserWorkflowServiceProxy extends SpringServiceProxy implements UserWorkflowService {\n-\n-    public UserWorkflowServiceProxy(String baseUrl, RestTemplate restTemplate) {\n-\t\tsuper(baseUrl, restTemplate);\n-\t}\n-\n-\t@Override\n-    public UserTO executeWorkflow(final String taskId, final UserTO userTO) {\n-        return null;\n-    }\n-\n-    @Override\n-    public List<WorkflowFormTO> getForms() {\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/workflow/form/list\",\n-                WorkflowFormTO[].class));\n-    }\n-\n-    @Override\n-    public WorkflowFormTO getFormForUser(final Long userId) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n-                userId);\n-    }\n-\n-    @Override\n-    public WorkflowFormTO claimForm(final String taskId) {\n-        return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\",\n-                WorkflowFormTO.class, taskId);\n-    }\n-\n-    @Override\n-    public UserTO submitForm(final WorkflowFormTO form) {\n-        return getRestTemplate().postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n-    }\n-\n-}"},{"sha":"e662d275e34358eb9365f3cf2bee7b59b6c99fea","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/WorkflowServiceProxy.java","status":"removed","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,50 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import java.util.Arrays;\r\n-import org.apache.syncope.common.services.WorkflowService;\r\n-import org.apache.syncope.common.services.WorkflowTasks;\r\n-import org.apache.syncope.common.to.WorkflowDefinitionTO;\r\n-import org.apache.syncope.common.types.AttributableType;\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public class WorkflowServiceProxy extends SpringServiceProxy implements WorkflowService {\r\n-\r\n-    public WorkflowServiceProxy(final String baseUrl, final RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n-    }\r\n-\r\n-    @Override\r\n-    public WorkflowDefinitionTO getDefinition(final AttributableType type) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"workflow/definition/\" + type.name().toLowerCase(),\r\n-                WorkflowDefinitionTO.class);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void updateDefinition(final AttributableType type, final WorkflowDefinitionTO definition) {\r\n-        getRestTemplate().put(baseUrl + \"workflow/definition/\" + type.name().toLowerCase(), definition);\r\n-    }\r\n-\r\n-    @Override\r\n-    public WorkflowTasks getDefinedTasks(final AttributableType type) {\r\n-        return new WorkflowTasks(Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"workflow/tasks/{type}\", String[].class, type.name().toLowerCase())));\r\n-    }\r\n-}\r"},{"sha":"5c5865694ded84cf1215f78aaa7925a9fe823d54","filename":"common/src/main/java/org/apache/syncope/common/services/ConfigurationService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -48,7 +48,7 @@ public interface ConfigurationService {\n      */\r\n     @GET\r\n     @Path(\"stream\")\r\n-    Response dbExport();\r\n+    Response export();\r\n \r\n     /**\r\n      * @param key Deletes configuration with matching key.\r"},{"sha":"b7c1f27b127949691df3f58b78ee20750aa7adff","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -34,53 +34,52 @@\n public interface SchemaService {\r\n \r\n     /**\r\n-     * @param kind Kind for schema to be created\r\n-     * @param type Type for schema to be created\r\n+     * @param attrType Kind for schema to be created\r\n+     * @param schemaType Type for schema to be created\r\n      * @param schemaTO Schema to be created\r\n      * @return Response containing URI location for created resource.\r\n      */\r\n     @POST\r\n-    <T extends AbstractSchemaTO> Response create(@PathParam(\"kind\") AttributableType kind,\r\n-            @PathParam(\"type\") SchemaType type, T schemaTO);\r\n+    <T extends AbstractSchemaTO> Response create(@PathParam(\"kind\") AttributableType attrType,\r\n+            @PathParam(\"type\") SchemaType schemaType, T schemaTO);\r\n \r\n     /**\r\n-     * @param kind Kind for schema to be deleted\r\n-     * @param type Type for schema to be deleted\r\n+     * @param attrType Kind for schema to be deleted\r\n      * @param schemaName Name of schema to be deleted\r\n      */\r\n     @DELETE\r\n     @Path(\"{name}\")\r\n-    void delete(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type,\r\n+    void delete(@PathParam(\"kind\") AttributableType attrType, @PathParam(\"type\") SchemaType schemaType,\r\n             @PathParam(\"name\") String schemaName);\r\n \r\n     /**\r\n-     * @param kind Kind for schemas to be listed\r\n-     * @param type Type for schemas to be listed\r\n+     * @param attrType Kind for schemas to be listed\r\n+     * @param schemaType Type for schemas to be listed\r\n      * @return List of schemas with matching kind and type\r\n      */\r\n     @GET\r\n     <T extends AbstractSchemaTO> List<T> list(\r\n-            @PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type);\r\n+            @PathParam(\"kind\") AttributableType attrType, @PathParam(\"type\") SchemaType schemaType);\r\n \r\n     /**\r\n-     * @param kind Kind for schemas to be read\r\n-     * @param type Type for schemas to be read\r\n+     * @param attrType Kind for schemas to be read\r\n+     * @param schemaType Type for schemas to be read\r\n      * @param schemaName Name of schema to be read\r\n      * @return Returns schema with matching name, kind and type\r\n      */\r\n     @GET\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") AttributableType kind, @PathParam(\"type\") SchemaType type,\r\n-            @PathParam(\"name\") String schemaName);\r\n+    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") AttributableType attrType,\r\n+            @PathParam(\"type\") SchemaType schemaType, @PathParam(\"name\") String schemaName);\r\n \r\n     /**\r\n-     * @param kind Kind for schemas to be updated\r\n-     * @param type Type for schemas to be updated\r\n+     * @param attrType Kind for schemas to be updated\r\n+     * @param schemaType Type for schemas to be updated\r\n      * @param schemaName Name of schema to be updated\r\n      * @param schemaTO New schema to be stored\r\n      */\r\n     @PUT\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> void update(@PathParam(\"kind\") AttributableType kind,\r\n-            @PathParam(\"type\") SchemaType type, @PathParam(\"name\") String schemaName, T schemaTO);\r\n+    <T extends AbstractSchemaTO> void update(@PathParam(\"kind\") AttributableType attrType,\r\n+            @PathParam(\"type\") SchemaType schemaType, @PathParam(\"name\") String schemaName, T schemaTO);\r\n }\r"},{"sha":"9f43a50db103ffb4abb3426cd152e02347ca6992","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -26,7 +26,7 @@\n \r\n @XmlRootElement(name = \"abstractSchema\")\r\n @XmlType\r\n-@XmlSeeAlso({SchemaTO.class, DerivedSchemaTO.class, VirtualSchemaTO.class})\r\n+@XmlSeeAlso({SchemaTO.class, DerSchemaTO.class, VirSchemaTO.class})\r\n public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 4088388951694301759L;\r"},{"sha":"59f4ae92cd1a249da41283fa3b9544ac033c8642","filename":"common/src/main/java/org/apache/syncope/common/to/ConnInstanceTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.types.ConnConfProperty;\r\n import org.apache.syncope.common.types.ConnectorCapability;\r\n \r\n-@XmlRootElement(name = \"connector\")\r\n+@XmlRootElement(name = \"connInstance\")\r\n @XmlType\r\n public class ConnInstanceTO extends AbstractBaseBean {\r\n \r"},{"sha":"29cf4eb96fa988625c9146b22899ef287975a8e5","filename":"common/src/main/java/org/apache/syncope/common/to/ConnObjectTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -30,7 +30,7 @@\n import javax.xml.bind.annotation.XmlType;\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n-@XmlRootElement(name = \"connector\")\r\n+@XmlRootElement(name = \"connObject\")\r\n @XmlType\r\n public class ConnObjectTO extends AbstractBaseBean {\r\n \r"},{"sha":"98cfb154c5e6f0fa100c0cee95b1d646c7e80362","filename":"common/src/main/java/org/apache/syncope/common/to/DerSchemaTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerSchemaTO.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,7 +23,7 @@\n \r\n @XmlRootElement(name = \"derivedSchema\")\r\n @XmlType\r\n-public class DerivedSchemaTO extends AbstractSchemaTO {\r\n+public class DerSchemaTO extends AbstractSchemaTO {\r\n \r\n     private static final long serialVersionUID = -6747399803792103108L;\r\n \r\n@@ -33,7 +33,7 @@ public String getExpression() {\n         return expression;\r\n     }\r\n \r\n-    public void setExpression(String expression) {\r\n+    public void setExpression(final String expression) {\r\n         this.expression = expression;\r\n     }\r\n }\r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/DerivedSchemaTO.java"},{"sha":"a99366a7053ec0faba939f61b1863cf396ade943","filename":"common/src/main/java/org/apache/syncope/common/to/VirSchemaTO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirSchemaTO.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,7 +21,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\r\n \r\n @XmlRootElement(name = \"virtualSchema\")\r\n-public class VirtualSchemaTO extends AbstractSchemaTO {\r\n+public class VirSchemaTO extends AbstractSchemaTO {\r\n \r\n     private static final long serialVersionUID = -8198557479659701343L;\r\n     \r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/VirtualSchemaTO.java"},{"sha":"97cc029cbe2b0f1f2257d375af680fec6d9ecf81","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -192,17 +192,7 @@ public enum SchemaSubCategory {\n         create,\r\n         read,\r\n         update,\r\n-        delete,\r\n-        listDerived,\r\n-        createDerived,\r\n-        readDerived,\r\n-        updateDerived,\r\n-        deleteDerived,\r\n-        listVirtual,\r\n-        createVirtual,\r\n-        readVirtual,\r\n-        updateVirtual,\r\n-        deleteVirtual\r\n+        delete\r\n \r\n     }\r\n \r"},{"sha":"4c8de5b13cef8b650e1d948d04583cfebdec2fbb","filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java","status":"modified","additions":22,"deletions":14,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -20,41 +20,49 @@\n \r\n import javax.xml.bind.annotation.XmlEnum;\r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n-import org.apache.syncope.common.to.DerivedSchemaTO;\r\n+import org.apache.syncope.common.to.DerSchemaTO;\r\n import org.apache.syncope.common.to.SchemaTO;\r\n-import org.apache.syncope.common.to.VirtualSchemaTO;\r\n+import org.apache.syncope.common.to.VirSchemaTO;\r\n \r\n @XmlEnum\r\n public enum SchemaType {\r\n \r\n     /**\r\n      * Standard schema for normal attributes to be stored within syncope.\r\n      */\r\n-    NORMAL(\"schema\", SchemaTO.class),\r\n+    NORMAL(SchemaTO.class),\r\n     /**\r\n      * Derived schema calculated based on other attributes.\r\n      */\r\n-    DERIVED(\"derivedSchema\", DerivedSchemaTO.class),\r\n+    DERIVED(DerSchemaTO.class),\r\n     /**\r\n      * Virtual schema for attributes fetched from remote resources only.\r\n      */\r\n-    VIRTUAL(\"virtualSchema\", VirtualSchemaTO.class);\r\n-\r\n-    // TODO remove name once CXF migration is complete\r\n-    private final String name;\r\n+    VIRTUAL(VirSchemaTO.class);\r\n \r\n     private final Class<? extends AbstractSchemaTO> toClass;\r\n \r\n-    private SchemaType(final String name, final Class<? extends AbstractSchemaTO> toClass) {\r\n-        this.name = name;\r\n+    private SchemaType(final Class<? extends AbstractSchemaTO> toClass) {\r\n         this.toClass = toClass;\r\n     }\r\n \r\n-    public String toSpringURL() {\r\n-        return name;\r\n-    }\r\n-\r\n     public Class<? extends AbstractSchemaTO> getToClass() {\r\n         return toClass;\r\n     }\r\n+\r\n+    public static SchemaType fromToClass(final Class<? extends AbstractSchemaTO> toClass) {\r\n+        SchemaType schemaType = null;\r\n+\r\n+        if (SchemaTO.class.equals(toClass)) {\r\n+            schemaType = SchemaType.NORMAL;\r\n+        } else if (DerSchemaTO.class.equals(toClass)) {\r\n+            schemaType = SchemaType.DERIVED;\r\n+        } else if (VirSchemaTO.class.equals(toClass)) {\r\n+            schemaType = SchemaType.VIRTUAL;\r\n+        } else {\r\n+            throw new IllegalArgumentException(\"Unexpected class: \" + toClass.getName());\r\n+        }\r\n+\r\n+        return schemaType;\r\n+    }\r\n }\r"},{"sha":"ea31b18863b6cb55463f5f06f290ce928f891c57","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientCompositeErrorException.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -29,6 +29,8 @@ public class SyncopeClientCompositeErrorException extends HttpClientErrorExcepti\n \r\n     private static final long serialVersionUID = 7882118041134372129L;\r\n \r\n+    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n+\r\n     private Set<SyncopeClientException> exceptions;\r\n \r\n     public SyncopeClientCompositeErrorException(final HttpStatus statusCode) {\r"},{"sha":"75ca5bba86f2d9a0bfca86d774831c2acf1bc730","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientErrorHandler.java","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,100 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.common.validation;\r\n-\r\n-import java.io.IOException;\r\n-import java.security.AccessControlException;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-import org.apache.commons.lang3.ArrayUtils;\r\n-import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-import org.springframework.http.HttpStatus;\r\n-import org.springframework.http.client.ClientHttpResponse;\r\n-import org.springframework.web.client.DefaultResponseErrorHandler;\r\n-\r\n-public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\r\n-\r\n-    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n-\r\n-    /**\r\n-     * Logger.\r\n-     */\r\n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeClientErrorHandler.class);\r\n-\r\n-    private static final HttpStatus[] MANAGED_STATUSES = {\r\n-        HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND, HttpStatus.CONFLICT, HttpStatus.UNAUTHORIZED\r\n-    };\r\n-\r\n-    @Override\r\n-    public void handleError(final ClientHttpResponse response) throws IOException {\r\n-        if (!ArrayUtils.contains(MANAGED_STATUSES, response.getStatusCode())) {\r\n-            super.handleError(response);\r\n-        }\r\n-\r\n-        // Mapped 401 Unauthorized Exception\r\n-        if (response.getStatusCode().equals(HttpStatus.UNAUTHORIZED)) {\r\n-            throw new AccessControlException(\"Remote unauthorized exception\");\r\n-        }\r\n-\r\n-        List<String> exceptionTypesInHeaders = response.getHeaders().get(EXCEPTION_TYPE_HEADER);\r\n-        if (exceptionTypesInHeaders == null) {\r\n-            LOG.debug(\"No \" + EXCEPTION_TYPE_HEADER + \" provided\");\r\n-\r\n-            return;\r\n-        }\r\n-\r\n-        SyncopeClientCompositeErrorException compositeException =\r\n-                new SyncopeClientCompositeErrorException(response.getStatusCode());\r\n-\r\n-        Set<String> handledExceptions = new HashSet<String>();\r\n-        for (String exceptionTypeAsString : exceptionTypesInHeaders) {\r\n-            SyncopeClientExceptionType exceptionType = null;\r\n-            try {\r\n-                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n-            } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\r\n-            }\r\n-            if (exceptionType != null) {\r\n-                handledExceptions.add(exceptionTypeAsString);\r\n-\r\n-                SyncopeClientException clientException = new SyncopeClientException();\r\n-                clientException.setType(exceptionType);\r\n-                if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n-                        && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n-\r\n-                    clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));\r\n-                }\r\n-\r\n-                compositeException.addException(clientException);\r\n-            }\r\n-        }\r\n-\r\n-        exceptionTypesInHeaders.removeAll(handledExceptions);\r\n-        if (!exceptionTypesInHeaders.isEmpty()) {\r\n-            LOG.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\r\n-        }\r\n-\r\n-        if (compositeException.hasExceptions()) {\r\n-            throw compositeException;\r\n-        }\r\n-    }\r\n-}\r"},{"sha":"77b85e4ac13596b0c4ad7e2c1fee592eabb118e7","filename":"console/src/main/java/org/apache/syncope/console/pages/DerivedSchemaModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.console.pages;\n \n import org.apache.syncope.common.AbstractBaseBean;\n-import org.apache.syncope.common.to.DerivedSchemaTO;\n+import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n@@ -54,7 +54,7 @@ public void setSchemaModalPage(final PageReference pageRef, final ModalWindow wi\n             AbstractBaseBean schema, final boolean createFlag) {\n \n         if (schema == null) {\n-            schema = new DerivedSchemaTO();\n+            schema = new DerSchemaTO();\n         }\n \n         final Form schemaForm = new Form(FORM);\n@@ -85,7 +85,7 @@ public void setSchemaModalPage(final PageReference pageRef, final ModalWindow wi\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n-                DerivedSchemaTO schemaTO = (DerivedSchemaTO) form.getDefaultModelObject();\n+                DerSchemaTO schemaTO = (DerSchemaTO) form.getDefaultModelObject();\n \n                 try {\n                     if (createFlag) {"},{"sha":"c738b4c85c91d283b4e24ddf20284669bf08e6e9","filename":"console/src/main/java/org/apache/syncope/console/pages/VirtualSchemaModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.console.pages;\n \n import org.apache.syncope.common.AbstractBaseBean;\n-import org.apache.syncope.common.to.VirtualSchemaTO;\n+import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n@@ -52,7 +52,7 @@ public void setSchemaModalPage(final PageReference pageRef, final ModalWindow wi\n             AbstractBaseBean schema, final boolean createFlag) {\n \n         if (schema == null) {\n-            schema = new VirtualSchemaTO();\n+            schema = new VirSchemaTO();\n         }\n \n         final Form schemaForm = new Form(FORM);\n@@ -74,7 +74,7 @@ public void setSchemaModalPage(final PageReference pageRef, final ModalWindow wi\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n-                VirtualSchemaTO schemaTO = (VirtualSchemaTO) form.getDefaultModelObject();\n+                VirSchemaTO schemaTO = (VirSchemaTO) form.getDefaultModelObject();\n                 try {\n                     if (createFlag) {\n                         schemaRestClient.createVirtualSchema(kind, schemaTO);"},{"sha":"df9a430ec134155aa44578ead422e587898d6444","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/VirtualAttributesPanel.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.to.VirtualSchemaTO;\n+import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.rest.SchemaRestClient;\n@@ -68,14 +68,14 @@ public <T extends AbstractAttributableTO> VirtualAttributesPanel(final String id\n \n         setOutputMarkupId(true);\n \n-        final IModel<Map<String, VirtualSchemaTO>> schemas =\n-                new LoadableDetachableModel<Map<String, VirtualSchemaTO>>() {\n+        final IModel<Map<String, VirSchemaTO>> schemas =\n+                new LoadableDetachableModel<Map<String, VirSchemaTO>>() {\n \n             private static final long serialVersionUID = -5489981430516587774L;\n \n             @Override\n-            protected Map<String, VirtualSchemaTO> load() {\n-                final List<VirtualSchemaTO> schemaTOs;\n+            protected Map<String, VirSchemaTO> load() {\n+                final List<VirSchemaTO> schemaTOs;\n                 if (entityTO instanceof RoleTO) {\n                     schemaTOs = schemaRestClient.getVirtualSchemas(AttributableType.ROLE);\n                 } else if (entityTO instanceof UserTO) {\n@@ -84,9 +84,9 @@ protected Map<String, VirtualSchemaTO> load() {\n                     schemaTOs = schemaRestClient.getVirtualSchemas(AttributableType.MEMBERSHIP);\n                 }\n \n-                final Map<String, VirtualSchemaTO> schemas = new HashMap<String, VirtualSchemaTO>();\n+                final Map<String, VirSchemaTO> schemas = new HashMap<String, VirSchemaTO>();\n \n-                for (VirtualSchemaTO schemaTO : schemaTOs) {\n+                for (VirSchemaTO schemaTO : schemaTOs) {\n                     schemas.put(schemaTO.getName(), schemaTO);\n                 }\n \n@@ -160,7 +160,7 @@ public CharSequence getPrecondition(final Component component) {\n                 }\n \n                 if (attributeTO.getSchema() != null) {\n-                    VirtualSchemaTO attributeSchema = schemas.getObject().get(attributeTO.getSchema());\n+                    VirSchemaTO attributeSchema = schemas.getObject().get(attributeTO.getSchema());\n                     if (attributeSchema != null) {\n                         attributeTO.setReadonly(attributeSchema.isReadonly());\n                     }\n@@ -204,7 +204,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                         attributeTO.setSchema(schemaChoice.getModelObject());\n \n-                        VirtualSchemaTO attributeSchema =\n+                        VirSchemaTO attributeSchema =\n                                 schemas.getObject().get(attributeTO.getSchema());\n                         if (attributeSchema != null) {\n                             attributeTO.setReadonly(attributeSchema.isReadonly());"},{"sha":"5aa9938eaf9794e2d97c58374f0361519a350681","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -70,6 +70,6 @@ public ConfigurationTO deleteConfiguration(final String key) {\n     }\n \n     public Response dbExport() {\n-        return getService(ConfigurationService.class).dbExport();\n+        return getService(ConfigurationService.class).export();\n     }\n }"},{"sha":"b19b59f426cc033d32813320694736bdc8bc1915","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -25,10 +25,10 @@\n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n-import org.apache.syncope.common.to.DerivedSchemaTO;\n+import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.ValidatorTO;\n-import org.apache.syncope.common.to.VirtualSchemaTO;\n+import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.util.CollectionWrapper;\n@@ -100,9 +100,9 @@ public List<String> getSchemaNames(final AttributableType type) {\n      * @return List of derived schemas.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public List<DerivedSchemaTO> getDerivedSchemas(final AttributableType type) {\n+    public List<DerSchemaTO> getDerivedSchemas(final AttributableType type) {\n \n-        List<DerivedSchemaTO> userDerivedSchemas = null;\n+        List<DerSchemaTO> userDerivedSchemas = null;\n \n         try {\n             userDerivedSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n@@ -123,9 +123,9 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n \n         try {\n             @SuppressWarnings(\"unchecked\")\n-            final List<DerivedSchemaTO> userDerSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n+            final List<DerSchemaTO> userDerSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n \n-            for (DerivedSchemaTO schemaTO : userDerSchemas) {\n+            for (DerSchemaTO schemaTO : userDerSchemas) {\n                 userDerivedSchemasNames.add(schemaTO.getName());\n             }\n         } catch (SyncopeClientCompositeErrorException e) {\n@@ -141,8 +141,8 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n      * @return List of derived schemas.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public List<VirtualSchemaTO> getVirtualSchemas(final AttributableType type) {\n-        List<VirtualSchemaTO> userVirtualSchemas = null;\n+    public List<VirSchemaTO> getVirtualSchemas(final AttributableType type) {\n+        List<VirSchemaTO> userVirtualSchemas = null;\n \n         try {\n             userVirtualSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n@@ -163,8 +163,8 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n \n         try {\n             @SuppressWarnings(\"unchecked\")\n-            final List<VirtualSchemaTO> userVirSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n-            for (VirtualSchemaTO schemaTO : userVirSchemas) {\n+            final List<VirSchemaTO> userVirSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n+            for (VirSchemaTO schemaTO : userVirSchemas) {\n                 userVirtualSchemasNames.add(schemaTO.getName());\n             }\n         } catch (SyncopeClientCompositeErrorException e) {\n@@ -226,7 +226,7 @@ public SchemaTO deleteSchema(final AttributableType type, final String name) {\n      *\n      * @param schemaTO\n      */\n-    public void createDerivedSchema(final AttributableType type, final DerivedSchemaTO schemaTO) {\n+    public void createDerivedSchema(final AttributableType type, final DerSchemaTO schemaTO) {\n         getService(SchemaService.class).create(type, SchemaType.DERIVED, schemaTO);\n     }\n \n@@ -235,7 +235,7 @@ public void createDerivedSchema(final AttributableType type, final DerivedSchema\n      *\n      * @param schemaTO\n      */\n-    public void createVirtualSchema(final AttributableType type, final VirtualSchemaTO schemaTO) {\n+    public void createVirtualSchema(final AttributableType type, final VirSchemaTO schemaTO) {\n         getService(SchemaService.class).create(type, SchemaType.VIRTUAL, schemaTO);\n     }\n \n@@ -245,8 +245,8 @@ public void createVirtualSchema(final AttributableType type, final VirtualSchema\n      * @param name (e.g.:surname)\n      * @return DerivedSchemaTO\n      */\n-    public DerivedSchemaTO readDerivedSchema(final AttributableType type, final String name) {\n-        DerivedSchemaTO derivedSchemaTO = null;\n+    public DerSchemaTO readDerivedSchema(final AttributableType type, final String name) {\n+        DerSchemaTO derivedSchemaTO = null;\n         try {\n             derivedSchemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n         } catch (SyncopeClientCompositeErrorException e) {\n@@ -260,7 +260,7 @@ public DerivedSchemaTO readDerivedSchema(final AttributableType type, final Stri\n      *\n      * @param schemaTO updated\n      */\n-    public void updateDerivedSchema(final AttributableType type, final DerivedSchemaTO schemaTO) {\n+    public void updateDerivedSchema(final AttributableType type, final DerSchemaTO schemaTO) {\n         getService(SchemaService.class).update(type, SchemaType.DERIVED, schemaTO.getName(), schemaTO);\n     }\n \n@@ -269,7 +269,7 @@ public void updateDerivedSchema(final AttributableType type, final DerivedSchema\n      *\n      * @param schemaTO updated\n      */\n-    public void updateVirtualSchema(final AttributableType type, final VirtualSchemaTO schemaTO) {\n+    public void updateVirtualSchema(final AttributableType type, final VirSchemaTO schemaTO) {\n         getService(SchemaService.class).update(type, SchemaType.VIRTUAL, schemaTO.getName(), schemaTO);\n     }\n \n@@ -278,8 +278,8 @@ public void updateVirtualSchema(final AttributableType type, final VirtualSchema\n      *\n      * @param name (e.g.:surname)\n      */\n-    public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, final String name) {\n-        DerivedSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n+    public DerSchemaTO deleteDerivedSchema(final AttributableType type, final String name) {\n+        DerSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n         getService(SchemaService.class).delete(type, SchemaType.DERIVED, name);\n         return schemaTO;\n     }\n@@ -289,8 +289,8 @@ public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, final St\n      *\n      * @param name (e.g.:surname)\n      */\n-    public VirtualSchemaTO deleteVirtualSchema(final AttributableType type, final String name) {\n-        VirtualSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.VIRTUAL, name);\n+    public VirSchemaTO deleteVirtualSchema(final AttributableType type, final String name) {\n+        VirSchemaTO schemaTO = getService(SchemaService.class).read(type, SchemaType.VIRTUAL, name);\n         getService(SchemaService.class).delete(type, SchemaType.VIRTUAL, name);\n         return schemaTO;\n     }"},{"sha":"50fb943c1cb50748755ba66c2b642e81cdca08f4","filename":"console/src/main/resources/configuration.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -17,4 +17,4 @@\n scheme=http\n host=localhost\n port=8080\n-rootPath=/syncope/cxf/\n+rootPath=/syncope/rest/"},{"sha":"96a5577c1dd3879de2a2ee47a8554c945da998b8","filename":"console/src/main/resources/logback.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -56,7 +56,7 @@ under the License.\n   </logger>\n     \n   <logger name=\"org.apache.cxf\" additivity=\"false\">\n-    <level value=\"INFO\"/>\n+    <level value=\"ERROR\"/>\n     <appender-ref ref=\"main\"/>\n   </logger>\n     "},{"sha":"869174ec2b8fdfdac55e9a477537f6f490c114aa","filename":"console/src/test/resources/configuration.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Ftest%2Fresources%2Fconfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/console%2Fsrc%2Ftest%2Fresources%2Fconfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fconfiguration.properties?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -17,4 +17,4 @@\n scheme=http\n host=localhost\n port=9080\n-rootPath=/syncope/cxf/\n+rootPath=/syncope/rest/"},{"sha":"01bba5c91af3d925a7a3ec6034a22f1c6f6e72ad","filename":"core/pom.xml","status":"modified","additions":8,"deletions":51,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -144,10 +144,6 @@ under the License.\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-web</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-webmvc</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-oxm</artifactId>\n@@ -408,6 +404,11 @@ under the License.\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-failsafe-plugin</artifactId>\n         <inherited>true</inherited>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>\n+          </systemPropertyVariables>\n+        </configuration>\n         <executions>\n           <execution>\n             <id>verify</id>\n@@ -512,7 +513,7 @@ under the License.\n             </deployable>\n             <deployable>\n               <location>${cargo.run.dir}</location>\n-              <pingURL>http://localhost:${cargo.servlet.port}/syncope/rest/schema/user/list.xml</pingURL>\n+              <pingURL>http://localhost:${cargo.servlet.port}/syncope/version.jsp</pingURL>\n               <pingTimeout>60000</pingTimeout>\n               <properties>\n                 <context>syncope</context>\n@@ -767,50 +768,6 @@ under the License.\n       </build>\n     </profile>\n \n-    <profile>\n-      <id>jaxrs</id>\n-\n-      <build>\n-        <defaultGoal>clean verify</defaultGoal>\n-\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-surefire-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <configuration>\n-              <skipTests>true</skipTests>\n-            </configuration>\n-          </plugin>\n-          \n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-failsafe-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <configuration>\n-              <excludes>\n-                <exclude>**/*TestITCase.java</exclude>\n-              </excludes>\n-              <includes>\n-                <include>**/*TestITCaseJAXRS.java</include>\n-              </includes>\n-              <systemPropertyVariables>\n-                <jaxrsContentType>${jaxrs.content.type}</jaxrsContentType>\n-              </systemPropertyVariables>\n-            </configuration>\n-            <executions>\n-              <execution>\n-                <id>verify</id>\n-                <goals>\n-                  <goal>verify</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>        \n-      </build>\n-    </profile>\n-    \n     <profile>\n       <id>noopworkflow</id>\n \n@@ -1175,7 +1132,7 @@ under the License.\n               <deployables>\n                 <deployable>\n                   <location>${cargo.run.dir}</location>\n-                  <pingURL>http://localhost:${cargo.servlet.port}/syncope/rest/schema/user/list.xml</pingURL>\n+                  <pingURL>http://localhost:${cargo.servlet.port}/syncope/version.jsp</pingURL>\n                   <pingTimeout>1200000</pingTimeout>\n                   <properties>\n                     <context>syncope</context>\n@@ -1316,7 +1273,7 @@ under the License.\n                 </deployable>\n                 <deployable>\n                   <location>${cargo.run.dir}</location>\n-                  <pingURL>http://localhost:${cargo.servlet.port}/syncope/rest/schema/user/list.xml</pingURL>\n+                  <pingURL>http://localhost:${cargo.servlet.port}/syncope/version.jsp</pingURL>\n                   <pingTimeout>1200000</pingTimeout>\n                   <properties>\n                     <context>syncope</context>"},{"sha":"9b3991939bbc9e012f18f748f63390deb100fc0b","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/InvalidEntityException.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -32,7 +32,7 @@ public class InvalidEntityException extends ValidationException {\n \n     private String entityClassSimpleName;\n \n-    private final Map<Class, Set<EntityViolationType>> violations;\n+    private final Map<Class<?>, Set<EntityViolationType>> violations;\n \n     public InvalidEntityException(final String entityClassSimpleName,\n             final Set<ConstraintViolation<Object>> violations) {\n@@ -41,7 +41,7 @@ public InvalidEntityException(final String entityClassSimpleName,\n \n         this.entityClassSimpleName = entityClassSimpleName;\n \n-        this.violations = new HashMap<Class, Set<EntityViolationType>>();\n+        this.violations = new HashMap<Class<?>, Set<EntityViolationType>>();\n         for (ConstraintViolation<Object> violation : violations) {\n             int firstComma = violation.getMessageTemplate().indexOf(';');\n \n@@ -70,7 +70,7 @@ public InvalidEntityException(final String entityClassSimpleName,\n \n     public final boolean hasViolation(final EntityViolationType type) {\n         boolean found = false;\n-        for (Class entity : violations.keySet()) {\n+        for (Class<?> entity : violations.keySet()) {\n             if (violations.get(entity).contains(type)) {\n                 found = true;\n             }\n@@ -83,15 +83,15 @@ public String getEntityClassSimpleName() {\n         return entityClassSimpleName;\n     }\n \n-    public final Map<Class, Set<EntityViolationType>> getViolations() {\n+    public final Map<Class<?>, Set<EntityViolationType>> getViolations() {\n         return violations;\n     }\n \n     @Override\n     public String getMessage() {\n         StringBuilder sb = new StringBuilder();\n \n-        for (Class entity : violations.keySet()) {\n+        for (Class<?> entity : violations.keySet()) {\n             sb.append(entity.getSimpleName()).append(\" \").append(violations.get(entity).toString()).append(\", \");\n         }\n         sb.delete(sb.lastIndexOf(\", \"), sb.length());"},{"sha":"22c40ffe0a823cbc3aeb9ad195a694a84fca7b0c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":2,"deletions":79,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -18,93 +18,16 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n-import org.apache.syncope.common.to.PropagationTaskTO;\n-import org.apache.syncope.common.to.SchedTaskTO;\n-import org.apache.syncope.common.to.SyncTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n-import org.apache.syncope.core.persistence.beans.NotificationTask;\n-import org.apache.syncope.core.persistence.beans.PropagationTask;\n-import org.apache.syncope.core.persistence.beans.SchedTask;\n-import org.apache.syncope.core.persistence.beans.SyncTask;\n-import org.apache.syncope.core.persistence.beans.Task;\n-import org.apache.syncope.core.util.AttributableUtil;\n-import org.apache.syncope.core.util.TaskUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.TypeMismatchException;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = { Throwable.class })\n-public abstract class AbstractController {\n+@Transactional(rollbackFor = {Throwable.class})\n+abstract class AbstractController {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractController.class);\n \n-    protected AttributableUtil getAttributableUtil(final String kind) {\n-        AttributableUtil result = null;\n-\n-        try {\n-            result = AttributableUtil.valueOf(kind.toUpperCase());\n-        } catch (Exception e) {\n-            LOG.error(\"Attributable not supported: \" + kind);\n-\n-            throw new TypeMismatchException(kind, AttributableUtil.class, e);\n-        }\n-\n-        return result;\n-    }\n-\n-    protected TaskUtil getTaskUtil(final String kind) {\n-        TaskUtil result = null;\n-\n-        try {\n-            result = TaskUtil.valueOf(kind.toUpperCase());\n-        } catch (Exception e) {\n-            LOG.error(\"Task not supported: \" + kind);\n-\n-            throw new TypeMismatchException(kind, TaskUtil.class, e);\n-        }\n-\n-        return result;\n-    }\n-\n-    protected TaskUtil getTaskUtil(final Task task) {\n-        TaskUtil result = (task instanceof PropagationTask)\n-                ? TaskUtil.PROPAGATION\n-                : (task instanceof NotificationTask)\n-                        ? TaskUtil.NOTIFICATION\n-                        : (task instanceof SyncTask)\n-                                ? TaskUtil.SYNC\n-                                : (task instanceof SchedTask)\n-                                        ? TaskUtil.SCHED\n-                                        : null;\n-\n-        if (result == null) {\n-            LOG.error(\"Task not supported: \" + task.getClass().getName());\n-\n-            throw new TypeMismatchException(task.getClass().getName(), TaskUtil.class);\n-        }\n-\n-        return result;\n-    }\n-\n-    protected TaskUtil getTaskUtil(final TaskTO taskTO) {\n-        TaskUtil result = (taskTO instanceof PropagationTaskTO)\n-                ? TaskUtil.PROPAGATION\n-                : (taskTO instanceof SyncTaskTO)\n-                        ? TaskUtil.SYNC\n-                        : (taskTO instanceof SchedTaskTO)\n-                                ? TaskUtil.SCHED\n-                                : null;\n-\n-        if (result == null) {\n-            LOG.error(\"Task not supported: \" + taskTO.getClass().getName());\n-\n-            throw new TypeMismatchException(taskTO.getClass().getName(), TaskUtil.class);\n-        }\n-\n-        return result;\n-    }\n }"},{"sha":"f9b4eccd198544208ecd4779632f376da1f47052","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":13,"deletions":46,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -24,10 +24,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.ConfigurationSubCategory;\n@@ -38,24 +34,17 @@\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.apache.syncope.core.persistence.dao.impl.ContentLoader;\n import org.apache.syncope.core.persistence.validation.attrvalue.Validator;\n import org.apache.syncope.core.rest.data.ConfigurationDataBinder;\n import org.apache.syncope.core.util.ContentExporter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/configuration\")\n+\n+@Component\n public class ConfigurationController extends AbstractController {\n \n     @Autowired\n@@ -80,9 +69,7 @@ public class ConfigurationController extends AbstractController {\n     private WorkflowAdapterLoader wfAdapterLoader;\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ConfigurationTO create(final HttpServletResponse response,\n-            @RequestBody final ConfigurationTO configurationTO) {\n+    public ConfigurationTO create(final ConfigurationTO configurationTO) {\n         LOG.debug(\"Configuration create called with parameters {}\", configurationTO);\n \n         SyncopeConf conf = binder.create(configurationTO);\n@@ -91,14 +78,11 @@ public ConfigurationTO create(final HttpServletResponse response,\n         auditManager.audit(Category.configuration, ConfigurationSubCategory.create, Result.success,\n                 \"Successfully created conf: \" + conf.getKey());\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-\n         return binder.getConfigurationTO(conf);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{key}\")\n-    public ConfigurationTO delete(@PathVariable(\"key\") final String key) {\n+    public ConfigurationTO delete(final String key) {\n         SyncopeConf conf = confDAO.find(key);\n         ConfigurationTO confToDelete = binder.getConfigurationTO(conf);\n         confDAO.delete(key);\n@@ -109,8 +93,7 @@ public ConfigurationTO delete(@PathVariable(\"key\") final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    public List<ConfigurationTO> list(final HttpServletRequest request) {\n+    public List<ConfigurationTO> list() {\n         List<SyncopeConf> configurations = confDAO.findAll();\n         List<ConfigurationTO> configurationTOs = new ArrayList<ConfigurationTO>(configurations.size());\n \n@@ -125,8 +108,7 @@ public List<ConfigurationTO> list(final HttpServletRequest request) {\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{key}\")\n-    public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"key\") final String key) {\n+    public ConfigurationTO read(final String key) {\n         ConfigurationTO result;\n         try {\n             SyncopeConf conf = confDAO.find(key);\n@@ -148,8 +130,7 @@ public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"k\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ConfigurationTO update(@RequestBody final ConfigurationTO configurationTO) {\n+    public ConfigurationTO update(final ConfigurationTO configurationTO) {\n         SyncopeConf conf = confDAO.find(configurationTO.getKey());\n         conf.setValue(configurationTO.getValue());\n \n@@ -160,19 +141,17 @@ public ConfigurationTO update(@RequestBody final ConfigurationTO configurationTO\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/validators\")\n-    public ModelAndView getValidators() {\n+    public Set<String> getValidators() {\n         Set<String> validators = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.VALIDATOR);\n \n         auditManager.audit(Category.configuration, ConfigurationSubCategory.getValidators, Result.success,\n                 \"Successfully listed all validators: \" + validators.size());\n \n-        return new ModelAndView().addObject(validators);\n+        return validators;\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/mailTemplates\")\n-    public ModelAndView getMailTemplates() {\n+    public Set<String> getMailTemplates() {\n         Set<String> htmlTemplates = new HashSet<String>();\n         Set<String> textTemplates = new HashSet<String>();\n \n@@ -199,24 +178,12 @@ public ModelAndView getMailTemplates() {\n         auditManager.audit(Category.configuration, ConfigurationSubCategory.getMailTemplates, Result.success,\n                 \"Successfully listed all mail templates: \" + htmlTemplates.size());\n \n-        return new ModelAndView().addObject(htmlTemplates);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET, value = \"/dbexport\")\n-    public void dbExport(final HttpServletResponse response) {\n-        response.setContentType(MediaType.TEXT_XML);\n-        response.setHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\n-                \"attachment; filename=\" + ContentLoader.CONTENT_XML);\n-        try {\n-            dbExportInternal(response.getOutputStream());\n-        } catch (IOException e) {\n-            LOG.error(\"Getting servlet output stream\", e);\n-        }\n+        return htmlTemplates;\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @Transactional(readOnly = true)\n-    public void dbExportInternal(final OutputStream os) {\n+    public void export(final OutputStream os) {\n         try {\n             exporter.export(os, wfAdapterLoader.getTablePrefix());\n "},{"sha":"a55e9cda5b1e91ae8830e6eea3cb2c14012953cc","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnectorController.java","status":"renamed","additions":24,"deletions":53,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,7 +23,6 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n-import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n@@ -56,18 +55,11 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n \n-@Controller\n-@RequestMapping(\"/connector\")\n-public class ConnInstanceController extends AbstractController {\n+@Component\n+public class ConnectorController extends AbstractController {\n \n     @Autowired\n     private AuditManager auditManager;\n@@ -85,8 +77,7 @@ public class ConnInstanceController extends AbstractController {\n     private ConnectorFactory connFactory;\n \n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ConnInstanceTO create(final HttpServletResponse response, @RequestBody final ConnInstanceTO connInstanceTO) {\n+    public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         LOG.debug(\"ConnInstance create called with configuration {}\", connInstanceTO);\n \n         ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n@@ -109,13 +100,11 @@ public ConnInstanceTO create(final HttpServletResponse response, @RequestBody fi\n             throw scce;\n         }\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ConnInstanceTO update(@RequestBody final ConnInstanceTO connInstanceTO) {\n+    public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n         LOG.debug(\"Connector update called with configuration {}\", connInstanceTO);\n \n         ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getId(), connInstanceTO);\n@@ -142,8 +131,7 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connInstanceTO) {\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{connInstanceId}\")\n-    public ConnInstanceTO delete(@PathVariable(\"connInstanceId\") final Long connInstanceId) {\n+    public ConnInstanceTO delete(final Long connInstanceId) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n@@ -173,9 +161,8 @@ public ConnInstanceTO delete(@PathVariable(\"connInstanceId\") final Long connInst\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnInstanceTO> list(@RequestParam(value = \"lang\", required = false) final String lang) {\n+    public List<ConnInstanceTO> list(final String lang) {\n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n@@ -201,9 +188,8 @@ public List<ConnInstanceTO> list(@RequestParam(value = \"lang\", required = false)\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{connInstanceId}\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO read(@PathVariable(\"connInstanceId\") final Long connInstanceId) {\n+    public ConnInstanceTO read(final Long connInstanceId) {\n         ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n@@ -216,9 +202,8 @@ public ConnInstanceTO read(@PathVariable(\"connInstanceId\") final Long connInstan\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/bundle/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = false) final String lang) {\n+    public List<ConnBundleTO> getBundles(final String lang) {\n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n@@ -270,12 +255,8 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/schemaNames/list\")\n     @Transactional(readOnly = true)\n-    public List<String> getSchemaNames(@RequestBody final ConnInstanceTO connInstanceTO,\n-            @RequestParam(required = false, value = \"includeSpecial\", defaultValue = \"false\")\n-            final boolean includeSpecial) {\n-\n+    public List<String> getSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n         final ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getId());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getId() + \"'\");\n@@ -299,9 +280,8 @@ public List<String> getSchemaNames(@RequestBody final ConnInstanceTO connInstanc\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/supportedObjectClasses/list\")\n     @Transactional(readOnly = true)\n-    public List<String> getSupportedObjectClasses(@RequestBody final ConnInstanceTO connInstanceTO) {\n+    public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n         final ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getId());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getId() + \"'\");\n@@ -329,10 +309,8 @@ public List<String> getSupportedObjectClasses(@RequestBody final ConnInstanceTO\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{connInstanceId}/configurationProperty/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnConfProperty> getConfigurationProperties(\n-            @PathVariable(\"connInstanceId\") final Long connInstanceId) {\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\n \n         final ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n@@ -349,9 +327,8 @@ public List<ConnConfProperty> getConfigurationProperties(\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/check\")\n     @Transactional(readOnly = true)\n-    public ModelAndView check(@RequestBody final ConnInstanceTO connInstanceTO) {\n+    public boolean check(final ConnInstanceTO connInstanceTO) {\n         final Connector connector =\n                 connFactory.createConnector(binder.getConnInstance(connInstanceTO), connInstanceTO.getConfiguration());\n \n@@ -370,13 +347,12 @@ public ModelAndView check(@RequestBody final ConnInstanceTO connInstanceTO) {\n             result = false;\n         }\n \n-        return new ModelAndView().addObject(result);\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/readByResource\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO readByResource(@PathVariable(\"resourceName\") final String resourceName) {\n+    public ConnInstanceTO readByResource(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n@@ -391,7 +367,6 @@ public ConnInstanceTO readByResource(@PathVariable(\"resourceName\") final String\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_RELOAD')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/reload\")\n     @Transactional(readOnly = true)\n     public void reload() {\n         connFactory.unload();\n@@ -402,24 +377,20 @@ public void reload() {\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n-    public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\n         LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n \n         BulkActionRes res = new BulkActionRes();\n \n-        switch (bulkAction.getOperation()) {\n-            case DELETE:\n-                for (String id : bulkAction.getTargets()) {\n-                    try {\n-                        res.add(delete(Long.valueOf(id)).getId(), BulkActionRes.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing delete for connector {}\", id, e);\n-                        res.add(id, BulkActionRes.Status.FAILURE);\n-                    }\n+        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n+            for (String id : bulkAction.getTargets()) {\n+                try {\n+                    res.add(delete(Long.valueOf(id)).getId(), BulkActionRes.Status.SUCCESS);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error performing delete for connector {}\", id, e);\n+                    res.add(id, BulkActionRes.Status.FAILURE);\n                 }\n-                break;\n-            default:\n+            }\n         }\n \n         return res;","previous_filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java"},{"sha":"447e106fb2f8e229d2d4d7c11d8dfde28f454f4a","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/DerivedSchemaController.java","status":"removed","additions":0,"deletions":165,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,165 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.controller;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.EntityExistsException;\n-import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.to.DerivedSchemaTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n-import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n-import org.apache.syncope.core.rest.data.DerivedSchemaDataBinder;\n-import org.apache.syncope.core.util.AttributableUtil;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-@Controller\n-@RequestMapping(\"/derivedSchema\")\n-public class DerivedSchemaController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n-\n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n-    @Autowired\n-    private DerivedSchemaDataBinder binder;\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n-    public DerivedSchemaTO create(final HttpServletResponse response,\n-            @RequestBody final DerivedSchemaTO derSchemaTO, @PathVariable(\"kind\") final String kind) {\n-\n-\n-        if (StringUtils.isBlank(derSchemaTO.getName())) {\n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n-            sce.addElement(\"Derived schema name\");\n-            sccee.addException(sce);\n-            throw sccee;\n-        }\n-\n-        AttributableUtil attrUtil = getAttributableUtil(kind);\n-\n-        if (derSchemaDAO.find(derSchemaTO.getName(), attrUtil.derSchemaClass()) != null) {\n-            throw new EntityExistsException(attrUtil.schemaClass().getSimpleName()\n-                    + \" '\" + derSchemaTO.getName() + \"'\");\n-        }\n-\n-        AbstractDerSchema derivedSchema = derSchemaDAO.save(binder.create(derSchemaTO, attrUtil.newDerSchema()));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.createDerived, Result.success,\n-                \"Successfully created derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getDerivedSchemaTO(derivedSchema);\n-    }\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n-    public DerivedSchemaTO delete(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"schema\") final String derivedSchemaName) {\n-\n-        Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n-        AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaName, reference);\n-        if (derivedSchema == null) {\n-            throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n-        }\n-\n-        DerivedSchemaTO schemaToDelete = binder.getDerivedSchemaTO(derivedSchema);\n-\n-        derSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.deleteDerived, Result.success,\n-                \"Successfully deleted derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-\n-        return schemaToDelete;\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        AttributableUtil attributableUtil = getAttributableUtil(kind);\n-        List<AbstractDerSchema> derivedAttributeSchemas = derSchemaDAO.findAll(attributableUtil.derSchemaClass());\n-\n-        List<DerivedSchemaTO> derivedSchemaTOs = new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());\n-        for (AbstractDerSchema derivedSchema : derivedAttributeSchemas) {\n-            derivedSchemaTOs.add(binder.getDerivedSchemaTO(derivedSchema));\n-        }\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.listDerived, Result.success,\n-                \"Successfully listed all derived schemas: \" + kind + \"/\" + derivedSchemaTOs.size());\n-\n-        return derivedSchemaTOs;\n-    }\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/read/{derivedSchema}\")\n-    public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"derivedSchema\") final String derivedSchemaName) {\n-\n-        Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n-        AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaName, reference);\n-        if (derivedSchema == null) {\n-            throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n-        }\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.readDerived, Result.success,\n-                \"Successfully read derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-\n-        return binder.getDerivedSchemaTO(derivedSchema);\n-    }\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n-    public DerivedSchemaTO update(@RequestBody final DerivedSchemaTO derivedSchemaTO,\n-            @PathVariable(\"kind\") final String kind) {\n-\n-        Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n-        AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaTO.getName(), reference);\n-        if (derivedSchema == null) {\n-            throw new NotFoundException(\"Derived schema '\" + derivedSchemaTO.getName() + \"'\");\n-        }\n-\n-        derivedSchema = binder.update(derivedSchemaTO, derivedSchema);\n-        derivedSchema = derSchemaDAO.save(derivedSchema);\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.updateDerived, Result.success,\n-                \"Successfully updated derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-\n-        return binder.getDerivedSchemaTO(derivedSchema);\n-    }\n-}"},{"sha":"6bed65114a02be69ed76bb381b8d67729efa7275","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/EntitlementController.java","status":"renamed","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FEntitlementController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -30,21 +30,17 @@\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.stereotype.Component;\n \n-@Controller\n-@RequestMapping(\"/auth\")\n-public class AuthenticationController extends AbstractController {\n+@Component\n+public class EntitlementController extends AbstractController {\n \n     @Autowired\n     private AuditManager auditManager;\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/allentitlements\")\n     public List<String> listEntitlements() {\n         List<Entitlement> entitlements = entitlementDAO.findAll();\n         List<String> result = new ArrayList<String>(entitlements.size());\n@@ -55,7 +51,6 @@ public List<String> listEntitlements() {\n         return result;\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/entitlements\")\n     public Set<String> getEntitlements() {\n         Set<String> result = EntitlementUtil.getOwnedEntitlementNames();\n ","previous_filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AuthenticationController.java"},{"sha":"8c3bf6d18d9b4f7524956b58295ae4b81db1bed5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":6,"deletions":17,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -40,19 +40,14 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n \n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n+import org.springframework.stereotype.Component;\n \n-@Controller\n-@RequestMapping(\"/logger\")\n+@Component\n public class LoggerController extends AbstractController {\n \n     @Autowired\n@@ -76,14 +71,12 @@ private List<LoggerTO> list(final SyncopeLoggerType type) {\n     }\n \n     @PreAuthorize(\"hasRole('LOG_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/log/list\")\n     @Transactional(readOnly = true)\n     public List<LoggerTO> listLogs() {\n         return list(SyncopeLoggerType.LOG);\n     }\n \n     @PreAuthorize(\"hasRole('AUDIT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/audit/list\")\n     @Transactional(readOnly = true)\n     public List<AuditLoggerName> listAudits() {\n         List<AuditLoggerName> result = new ArrayList<AuditLoggerName>();\n@@ -141,14 +134,12 @@ private LoggerTO setLevel(final String name, final Level level, final SyncopeLog\n     }\n \n     @PreAuthorize(\"hasRole('LOG_SET_LEVEL')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/log/{name}/{level}\")\n-    public LoggerTO setLogLevel(@PathVariable(\"name\") final String name, @PathVariable(\"level\") final Level level) {\n+    public LoggerTO setLogLevel(final String name, final Level level) {\n         return setLevel(name, level, SyncopeLoggerType.LOG);\n     }\n \n     @PreAuthorize(\"hasRole('AUDIT_ENABLE')\")\n-    @RequestMapping(method = RequestMethod.PUT, value = \"/audit/enable\")\n-    public void enableAudit(@RequestBody final AuditLoggerName auditLoggerName) {\n+    public void enableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             setLevel(auditLoggerName.toLoggerName(), Level.DEBUG, SyncopeLoggerType.AUDIT);\n         } catch (IllegalArgumentException e) {\n@@ -189,14 +180,12 @@ private LoggerTO delete(final String name, final SyncopeLoggerType expectedType)\n     }\n \n     @PreAuthorize(\"hasRole('LOG_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/log/delete/{name}\")\n-    public LoggerTO deleteLog(@PathVariable(\"name\") final String name) throws NotFoundException {\n+    public LoggerTO deleteLog(final String name) throws NotFoundException {\n         return delete(name, SyncopeLoggerType.LOG);\n     }\n \n     @PreAuthorize(\"hasRole('AUDIT_DISABLE')\")\n-    @RequestMapping(method = RequestMethod.PUT, value = \"/audit/disable\")\n-    public void disableAudit(@RequestBody final AuditLoggerName auditLoggerName) {\n+    public void disableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             delete(auditLoggerName.toLoggerName(), SyncopeLoggerType.AUDIT);\n         } catch (NotFoundException e) {"},{"sha":"a854a3129ecc5cecdec2016b9895d08a8ccaf36b","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":10,"deletions":24,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import javax.servlet.http.HttpServletResponse;\n \n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n@@ -34,14 +33,9 @@\n import org.apache.syncope.core.rest.data.NotificationDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-@Controller\n-@RequestMapping(\"/notification\")\n+import org.springframework.stereotype.Component;\n+\n+@Component\n public class NotificationController extends AbstractController {\n \n     @Autowired\n@@ -54,8 +48,7 @@ public class NotificationController extends AbstractController {\n     private NotificationDataBinder binder;\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{notificationId}\")\n-    public NotificationTO read(@PathVariable(\"notificationId\") final Long notificationId) {\n+    public NotificationTO read(final Long notificationId) {\n         Notification notification = notificationDAO.find(notificationId);\n         if (notification == null) {\n             LOG.error(\"Could not find notification '\" + notificationId + \"'\");\n@@ -67,7 +60,6 @@ public NotificationTO read(@PathVariable(\"notificationId\") final Long notificati\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     public List<NotificationTO> list() {\n         List<Notification> notifications = notificationDAO.findAll();\n \n@@ -82,25 +74,20 @@ public List<NotificationTO> list() {\n         return notificationTOs;\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public NotificationTO create(final HttpServletResponse response, @RequestBody final NotificationTO notificationTO) {\n-        NotificationTO savedNotificationTO = createInternal(notificationTO);\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return savedNotificationTO;\n-    }\n-\n     @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n-    public NotificationTO createInternal(final NotificationTO notificationTO) {\n+    public NotificationTO create(final NotificationTO notificationTO) {\n         LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n+\n         Notification notification = notificationDAO.save(binder.createNotification(notificationTO));\n+\n         auditManager.audit(Category.notification, NotificationSubCategory.create, Result.success,\n                 \"Successfully created notification: \" + notification.getId());\n+\n         return binder.getNotificationTO(notification);\n     }\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public NotificationTO update(@RequestBody final NotificationTO notificationTO) {\n+    public NotificationTO update(final NotificationTO notificationTO) {\n         LOG.debug(\"ConnNotificationtor update called with parameter {}\", notificationTO);\n \n         Notification notification = notificationDAO.find(notificationTO.getId());\n@@ -120,8 +107,7 @@ public NotificationTO update(@RequestBody final NotificationTO notificationTO) {\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{notificationId}\")\n-    public NotificationTO delete(@PathVariable(\"notificationId\") final Long notificationId) {\n+    public NotificationTO delete(final Long notificationId) {\n         Notification notification = notificationDAO.find(notificationId);\n         if (notification == null) {\n             LOG.error(\"Could not find notificatin '\" + notificationId + \"'\");"},{"sha":"5384a9308e5f4b374f04b45afffcd632d1caab5b","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":18,"deletions":49,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -20,9 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Set;\n-import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n@@ -43,15 +41,9 @@\n import org.apache.syncope.core.rest.data.PolicyDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/policy\")\n+import org.springframework.stereotype.Component;\n+\n+@Component\n public class PolicyController extends AbstractController {\n \n     @Autowired\n@@ -66,23 +58,8 @@ public class PolicyController extends AbstractController {\n     @Autowired\n     private PolicyDataBinder binder;\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/password/create\")\n-    public PasswordPolicyTO create(final HttpServletResponse response, @RequestBody final PasswordPolicyTO policyTO) {\n-        return createInternal(policyTO);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.POST, value = \"/account/create\")\n-    public AccountPolicyTO create(final HttpServletResponse response, @RequestBody final AccountPolicyTO policyTO) {\n-        return createInternal(policyTO);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.POST, value = \"/sync/create\")\n-    public SyncPolicyTO create(final HttpServletResponse response, @RequestBody final SyncPolicyTO policyTO) {\n-        return createInternal(policyTO);\n-    }\n-\n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n-    public <T extends PolicyTO> T createInternal(final T policyTO) {\n+    public <T extends PolicyTO> T create(final T policyTO) {\n         LOG.debug(\"Creating policy \" + policyTO);\n \n         final Policy policy = binder.getPolicy(null, policyTO);\n@@ -106,8 +83,7 @@ private <T extends PolicyTO, K extends Policy> T update(final T policyTO, final\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/password/update\")\n-    public PasswordPolicyTO update(@RequestBody final PasswordPolicyTO policyTO) {\n+    public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getId());\n         if (!(policy instanceof PasswordPolicy)) {\n             throw new NotFoundException(\"PasswordPolicy with id \" + policyTO.getId());\n@@ -117,8 +93,7 @@ public PasswordPolicyTO update(@RequestBody final PasswordPolicyTO policyTO) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/account/update\")\n-    public AccountPolicyTO update(@RequestBody final AccountPolicyTO policyTO) {\n+    public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getId());\n         if (!(policy instanceof AccountPolicy)) {\n             throw new NotFoundException(\"AccountPolicy with id \" + policyTO.getId());\n@@ -128,8 +103,7 @@ public AccountPolicyTO update(@RequestBody final AccountPolicyTO policyTO) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/sync/update\")\n-    public SyncPolicyTO update(@RequestBody final SyncPolicyTO policyTO) {\n+    public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getId());\n         if (!(policy instanceof SyncPolicy)) {\n             throw new NotFoundException(\"SyncPolicy with id \" + policyTO.getId());\n@@ -139,24 +113,24 @@ public SyncPolicyTO update(@RequestBody final SyncPolicyTO policyTO) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<PolicyTO> list(@PathVariable(\"kind\") final String kind) {\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends PolicyTO> List<T> list(final PolicyType type) {\n         LOG.debug(\"Listing policies\");\n-        List<? extends Policy> policies = policyDAO.find(PolicyType.valueOf(kind.toUpperCase(Locale.ENGLISH)));\n \n-        final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n+        List<? extends Policy> policies = policyDAO.find(type);\n+\n+        final List<T> policyTOs = new ArrayList<T>();\n         for (Policy policy : policies) {\n-            policyTOs.add(binder.getPolicyTO(policy));\n+            policyTOs.add((T) binder.getPolicyTO(policy));\n         }\n \n         auditManager.audit(Category.policy, PolicySubCategory.list, Result.success,\n-                \"Successfully listed all policies (\" + kind + \"): \" + policyTOs.size());\n+                \"Successfully listed all policies (\" + type + \"): \" + policyTOs.size());\n \n         return policyTOs;\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/password/global/read\")\n     public PasswordPolicyTO getGlobalPasswordPolicy() {\n         LOG.debug(\"Reading global password policy\");\n \n@@ -172,7 +146,6 @@ public PasswordPolicyTO getGlobalPasswordPolicy() {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/account/global/read\")\n     public AccountPolicyTO getGlobalAccountPolicy() {\n         LOG.debug(\"Reading global account policy\");\n \n@@ -188,7 +161,6 @@ public AccountPolicyTO getGlobalAccountPolicy() {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/sync/global/read\")\n     public SyncPolicyTO getGlobalSyncPolicy() {\n         LOG.debug(\"Reading global sync policy\");\n \n@@ -204,8 +176,7 @@ public SyncPolicyTO getGlobalSyncPolicy() {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{id}\")\n-    public <T extends PolicyTO> T read(@PathVariable(\"id\") final Long id) {\n+    public <T extends PolicyTO> T read(final Long id) {\n         LOG.debug(\"Reading policy with id {}\", id);\n \n         Policy policy = policyDAO.find(id);\n@@ -220,8 +191,7 @@ public <T extends PolicyTO> T read(@PathVariable(\"id\") final Long id) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{id}\")\n-    public PolicyTO delete(@PathVariable(\"id\") final Long id) {\n+    public PolicyTO delete(final Long id) {\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n@@ -237,14 +207,13 @@ public PolicyTO delete(@PathVariable(\"id\") final Long id) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/syncCorrelationRuleClasses\")\n-    public ModelAndView getSyncCorrelationRuleClasses() {\n+    public Set<String> getSyncCorrelationRuleClasses() {\n         final Set<String> correlationRules =\n                 classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULES);\n \n         auditManager.audit(Category.policy, AuditElements.PolicySubCategory.getCorrelationRuleClasses,\n                 Result.success, \"Successfully listed all correlation rule classes: \" + correlationRules.size());\n \n-        return new ModelAndView().addObject(correlationRules);\n+        return correlationRules;\n     }\n }"},{"sha":"b653993040f4664b70c8849d580c66ca3499f486","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":17,"deletions":72,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.controller;\n \n import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n import java.io.OutputStream;\n import java.util.ArrayList;\n import java.util.Date;\n@@ -29,8 +28,6 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.zip.ZipInputStream;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.core.MediaType;\n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n import org.apache.cocoon.pipeline.Pipeline;\n@@ -39,7 +36,6 @@\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n@@ -67,17 +63,10 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/report\")\n+\n+@Component\n public class ReportController extends AbstractController {\n \n     @Autowired\n@@ -98,15 +87,8 @@ public class ReportController extends AbstractController {\n     @Autowired\n     private ReportDataBinder binder;\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ReportTO create(final HttpServletResponse response, @RequestBody final ReportTO reportTO) {\n-        ReportTO createdReportTO = createInternal(reportTO);\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return createdReportTO;\n-    }\n-\n     @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n-    public ReportTO createInternal(final ReportTO reportTO) {\n+    public ReportTO create(final ReportTO reportTO) {\n         LOG.debug(\"Creating report \" + reportTO);\n \n         Report report = new Report();\n@@ -133,8 +115,7 @@ public ReportTO createInternal(final ReportTO reportTO) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ReportTO update(@RequestBody final ReportTO reportTO) {\n+    public ReportTO update(final ReportTO reportTO) {\n         LOG.debug(\"Report update called with parameter {}\", reportTO);\n \n         Report report = reportDAO.find(reportTO.getId());\n@@ -165,13 +146,11 @@ public ReportTO update(@RequestBody final ReportTO reportTO) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/count\")\n-    public ModelAndView count() {\n-        return new ModelAndView().addObject(reportDAO.count());\n+    public int count() {\n+        return reportDAO.count();\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     public List<ReportTO> list() {\n         List<Report> reports = reportDAO.findAll();\n         List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n@@ -186,8 +165,7 @@ public List<ReportTO> list() {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list/{page}/{size}\")\n-    public List<ReportTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"size\") final int size) {\n+    public List<ReportTO> list(final int page, final int size) {\n         List<Report> reports = reportDAO.findAll(page, size);\n         List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n         for (Report report : reports) {\n@@ -200,15 +178,9 @@ public List<ReportTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"\n         return result;\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/reportletConfClasses\")\n-    public ModelAndView getReportletConfClasses() {\n-        Set<String> reportletConfClasses = getReportletConfClassesInternal();\n-        return new ModelAndView().addObject(reportletConfClasses);\n-    }\n-\n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n     @SuppressWarnings(\"rawtypes\")\n-    public Set<String> getReportletConfClassesInternal() {\n+    public Set<String> getReportletConfClasses() {\n         Set<String> reportletConfClasses = new HashSet<String>();\n \n         for (Class<Reportlet> reportletClass : binder.getAllReportletClasses()) {\n@@ -220,12 +192,12 @@ public Set<String> getReportletConfClassesInternal() {\n \n         auditManager.audit(Category.report, ReportSubCategory.getReportletConfClasses, Result.success,\n                 \"Successfully listed all ReportletConf classes: \" + reportletConfClasses.size());\n+\n         return reportletConfClasses;\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{reportId}\")\n-    public ReportTO read(@PathVariable(\"reportId\") final Long reportId) {\n+    public ReportTO read(final Long reportId) {\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n@@ -238,9 +210,8 @@ public ReportTO read(@PathVariable(\"reportId\") final Long reportId) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\n     @Transactional(readOnly = true)\n-    public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) {\n+    public ReportExecTO readExecution(final Long executionId) {\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n@@ -252,31 +223,8 @@ public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long execut\n         return binder.getReportExecTO(reportExec);\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/export/{executionId}\")\n-    @Transactional(readOnly = true)\n-    public void exportExecutionResult(final HttpServletResponse response,\n-            @PathVariable(\"executionId\") final Long executionId,\n-            @RequestParam(value = \"fmt\", required = false) final ReportExecExportFormat fmt) {\n-\n-        OutputStream os;\n-        try {\n-            os = response.getOutputStream();\n-        } catch (IOException e) {\n-            throw new IllegalStateException(\"Could not get output stream\", e);\n-        }\n-        ReportExec reportExec = getAndCheckReportExecInternal(executionId);\n-\n-        ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n-\n-        response.setContentType(MediaType.APPLICATION_OCTET_STREAM);\n-        response.addHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\n-                \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().toLowerCase());\n-\n-        exportExecutionResultInternal(os, reportExec, format);\n-    }\n-\n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    public void exportExecutionResultInternal(final OutputStream os, final ReportExec reportExec,\n+    public void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n         LOG.debug(\"Exporting result of {} as {}\", reportExec, format);\n@@ -340,7 +288,7 @@ public void exportExecutionResultInternal(final OutputStream os, final ReportExe\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n-    public ReportExec getAndCheckReportExecInternal(final Long executionId) {\n+    public ReportExec getAndCheckReportExec(final Long executionId) {\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n@@ -359,8 +307,7 @@ public ReportExec getAndCheckReportExecInternal(final Long executionId) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/execute/{reportId}\")\n-    public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) {\n+    public ReportExecTO execute(final Long reportId) {\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n@@ -402,8 +349,7 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{reportId}\")\n-    public ReportTO delete(@PathVariable(\"reportId\") final Long reportId) {\n+    public ReportTO delete(final Long reportId) {\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n@@ -422,8 +368,7 @@ public ReportTO delete(@PathVariable(\"reportId\") final Long reportId) {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\n-    public ReportExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId) {\n+    public ReportExecTO deleteExecution(final Long executionId) {\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);"},{"sha":"d4ff324eb2772b6315139222dc0173517a0738d7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":25,"deletions":47,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import java.util.Set;\n import javax.persistence.EntityExistsException;\n-import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n@@ -62,17 +61,10 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/resource\")\n+\n+@Component\n public class ResourceController extends AbstractController {\n \n     @Autowired\n@@ -106,8 +98,7 @@ public class ResourceController extends AbstractController {\n     private ConnectorFactory connFactory;\n \n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO) {\n+    public ResourceTO create(final ResourceTO resourceTO) {\n         LOG.debug(\"Resource creation: {}\", resourceTO);\n \n         if (StringUtils.isBlank(resourceTO.getName())) {\n@@ -128,13 +119,11 @@ public ResourceTO create(final HttpServletResponse response, @RequestBody final\n         auditManager.audit(Category.resource, ResourceSubCategory.create, Result.success,\n                 \"Successfully created resource: \" + resource.getName());\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getResourceTO(resource);\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ResourceTO update(@RequestBody final ResourceTO resourceTO) {\n+    public ResourceTO update(final ResourceTO resourceTO) {\n         LOG.debug(\"Role update request: {}\", resourceTO);\n \n         ExternalResource resource = resourceDAO.find(resourceTO.getName());\n@@ -152,8 +141,7 @@ public ResourceTO update(@RequestBody final ResourceTO resourceTO) {\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{resourceName}\")\n-    public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName) {\n+    public ResourceTO delete(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n@@ -171,8 +159,7 @@ public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName\n \n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n     @Transactional(readOnly = true)\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{resourceName}\")\n-    public ResourceTO read(@PathVariable(\"resourceName\") final String resourceName) {\n+    public ResourceTO read(final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n@@ -185,20 +172,18 @@ public ResourceTO read(@PathVariable(\"resourceName\") final String resourceName)\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/propagationActionsClasses\")\n-    public ModelAndView getPropagationActionsClasses() {\n+    public Set<String> getPropagationActionsClasses() {\n         Set<String> actionsClasses = classNamesLoader.getClassNames(\n                 ImplementationClassNamesLoader.Type.PROPAGATION_ACTIONS);\n \n         auditManager.audit(Category.resource, AuditElements.ResourceSubCategory.getPropagationActionsClasses,\n                 Result.success, \"Successfully listed all PropagationActions classes: \" + actionsClasses.size());\n \n-        return new ModelAndView().addObject(actionsClasses);\n+        return actionsClasses;\n     }\n \n     @Transactional(readOnly = true)\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstanceId\") final Long connInstanceId) {\n+    public List<ResourceTO> list(final Long connInstanceId) {\n         List<ExternalResource> resources;\n \n         if (connInstanceId == null) {\n@@ -220,10 +205,7 @@ public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstan\n \n     @PreAuthorize(\"hasRole('RESOURCE_GETCONNECTOROBJECT')\")\n     @Transactional(readOnly = true)\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/read/{type}/{id}\")\n-    public ConnObjectTO getConnectorObject(@PathVariable(\"resourceName\") final String resourceName,\n-            @PathVariable(\"type\") final AttributableType type, @PathVariable(\"id\") final Long id) {\n-\n+    public ConnObjectTO getConnectorObject(final String resourceName, final AttributableType type, final Long id) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n@@ -244,14 +226,15 @@ public ConnObjectTO getConnectorObject(@PathVariable(\"resourceName\") final Strin\n                 throw new IllegalArgumentException(\"Not supported for MEMBERSHIP\");\n         }\n         if (attributable == null) {\n-            throw new NotFoundException(type + \" \" + id );\n+            throw new NotFoundException(type + \" \" + id);\n         }\n \n         final AttributableUtil attrUtil = AttributableUtil.getInstance(type);\n \n         AbstractMappingItem accountIdItem = attrUtil.getAccountIdItem(resource);\n         if (accountIdItem == null) {\n-            throw new NotFoundException(\"AccountId mapping for \" + type + \" \" + id + \" on resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"AccountId mapping for \" + type + \" \" + id + \" on resource '\" + resourceName\n+                    + \"'\");\n         }\n         final String accountIdValue =\n                 MappingUtil.getAccountIdValue(attributable, resource, attrUtil.getAccountIdItem(resource));\n@@ -282,9 +265,8 @@ public ConnObjectTO getConnectorObject(@PathVariable(\"resourceName\") final Strin\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/check\")\n     @Transactional(readOnly = true)\n-    public ModelAndView check(@RequestBody final ResourceTO resourceTO) {\n+    public boolean check(final ResourceTO resourceTO) {\n         final ConnInstance connInstance = binder.getConnInstance(resourceTO);\n \n         final Connector connector = connFactory.createConnector(connInstance, connInstance.getConfiguration());\n@@ -304,28 +286,24 @@ public ModelAndView check(@RequestBody final ResourceTO resourceTO) {\n             result = false;\n         }\n \n-        return new ModelAndView().addObject(result);\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n-    public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\n         LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n \n         BulkActionRes res = new BulkActionRes();\n \n-        switch (bulkAction.getOperation()) {\n-            case DELETE:\n-                for (String name : bulkAction.getTargets()) {\n-                    try {\n-                        res.add(delete(name).getName(), BulkActionRes.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing delete for resource {}\", name, e);\n-                        res.add(name, BulkActionRes.Status.FAILURE);\n-                    }\n+        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n+            for (String name : bulkAction.getTargets()) {\n+                try {\n+                    res.add(delete(name).getName(), BulkActionRes.Status.SUCCESS);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error performing delete for resource {}\", name, e);\n+                    res.add(name, BulkActionRes.Status.FAILURE);\n                 }\n-                break;\n-            default:\n+            }\n         }\n \n         return res;"},{"sha":"1e00d8080f5941816301d99ac8f5cc13cb8da1b5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":14,"deletions":35,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -22,7 +22,6 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n@@ -56,16 +55,10 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/role\")\n+\n+@Component\n public class RoleController {\n \n     /**\n@@ -104,9 +97,8 @@ public class RoleController {\n     private ConnObjectUtil connObjectUtil;\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n     @Transactional(readOnly = true)\n-    public RoleTO read(@PathVariable(\"roleId\") final Long roleId) {\n+    public RoleTO read(final Long roleId) {\n         SyncopeRole role = binder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -121,9 +113,8 @@ public RoleTO read(@PathVariable(\"roleId\") final Long roleId) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/selfRead/{roleId}\")\n     @Transactional(readOnly = true)\n-    public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId) {\n+    public RoleTO selfRead(final Long roleId) {\n         // Explicit search instead of using binder.getRoleFromId() in order to bypass auth checks - will do here\n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n@@ -151,9 +142,8 @@ public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/parent/{roleId}\")\n     @Transactional(readOnly = true)\n-    public RoleTO parent(@PathVariable(\"roleId\") final Long roleId) {\n+    public RoleTO parent(final Long roleId) {\n         SyncopeRole role = binder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -174,9 +164,8 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\n     @Transactional(readOnly = true)\n-    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n+    public List<RoleTO> children(final Long roleId) {\n         SyncopeRole role = binder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -196,19 +185,16 @@ public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public List<RoleTO> search(@RequestBody final NodeCond searchCondition)\n+    public List<RoleTO> search(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return search(searchCondition, -1, -1);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVariable(\"page\") final int page,\n-            @PathVariable(\"size\") final int size)\n+    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n \n         LOG.debug(\"Role search called with condition {}\", searchCondition);\n@@ -234,9 +220,8 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n+    public int searchCount(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         if (!searchCondition.isValid()) {\n@@ -245,11 +230,9 @@ public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n         }\n \n         final Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        return new ModelAndView().addObject(searchDAO.count(adminRoleIds, searchCondition,\n-                AttributableUtil.getInstance(AttributableType.ROLE)));\n+        return searchDAO.count(adminRoleIds, searchCondition, AttributableUtil.getInstance(AttributableType.ROLE));\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true)\n     public List<RoleTO> list() {\n         List<SyncopeRole> roles = roleDAO.findAll();\n@@ -266,8 +249,7 @@ public List<RoleTO> list() {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO) {\n+    public RoleTO create(final RoleTO roleTO) {\n         LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -298,13 +280,11 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n         auditManager.audit(Category.role, RoleSubCategory.create, Result.success,\n                 \"Successfully created role: \" + savedTO.getId());\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public RoleTO update(@RequestBody final RoleMod roleMod) {\n+    public RoleTO update(final RoleMod roleMod) {\n         LOG.debug(\"Role update called with {}\", roleMod);\n \n         SyncopeRole role = binder.getRoleFromId(roleMod.getId());\n@@ -334,8 +314,7 @@ public RoleTO update(@RequestBody final RoleMod roleMod) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n-    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) {\n+    public RoleTO delete(final Long roleId) {\n         LOG.debug(\"Role delete called for {}\", roleId);\n \n         // Generate propagation tasks for deleting users from role resources, if they are on those resources only"},{"sha":"9d0587c566c27a6d277be543f54284c81f13038f","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":207,"deletions":73,"changes":280,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,32 +21,33 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityExistsException;\n-import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.to.AbstractSchemaTO;\n+import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n+import org.apache.syncope.common.to.VirSchemaTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n+import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n+import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n+import org.apache.syncope.core.persistence.dao.VirSchemaDAO;\n import org.apache.syncope.core.rest.data.SchemaDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-@Controller\n-@RequestMapping(\"/schema\")\n+import org.springframework.stereotype.Component;\n+\n+@Component\n public class SchemaController extends AbstractController {\n \n     @Autowired\n@@ -55,13 +56,42 @@ public class SchemaController extends AbstractController {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     private SchemaDataBinder binder;\n \n+    private boolean doesSchemaExist(final SchemaType schemaType, final String name, final AttributableUtil attrUtil) {\n+        boolean found;\n+\n+        switch (schemaType) {\n+            case VIRTUAL:\n+                found = virSchemaDAO.find(name, attrUtil.virSchemaClass()) != null;\n+                break;\n+\n+            case DERIVED:\n+                found = derSchemaDAO.find(name, attrUtil.derSchemaClass()) != null;\n+                break;\n+\n+            case NORMAL:\n+                found = schemaDAO.find(name, attrUtil.schemaClass()) != null;\n+                break;\n+\n+            default:\n+                found = false;\n+        }\n+\n+        return found;\n+    }\n+\n     @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n-    public SchemaTO create(final HttpServletResponse response, @RequestBody final SchemaTO schemaTO,\n-            @PathVariable(\"kind\") final String kind) {\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AbstractSchemaTO> T create(final AttributableType attrType, final SchemaType schemaType,\n+            final T schemaTO) {\n \n         if (StringUtils.isBlank(schemaTO.getName())) {\n             SyncopeClientCompositeErrorException sccee =\n@@ -72,95 +102,199 @@ public SchemaTO create(final HttpServletResponse response, @RequestBody final Sc\n             throw sccee;\n         }\n \n-        AttributableUtil attrUtil = getAttributableUtil(kind);\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(attrType);\n \n-        if (schemaDAO.find(schemaTO.getName(), attrUtil.schemaClass()) != null) {\n-            throw new EntityExistsException(attrUtil.schemaClass().getSimpleName()\n-                    + \" '\" + schemaTO.getName() + \"'\");\n+        if (doesSchemaExist(schemaType, schemaTO.getName(), attrUtil)) {\n+            throw new EntityExistsException(schemaType + \"/\" + attrType + \"/\" + schemaTO.getName());\n         }\n \n-        AbstractSchema schema = attrUtil.newSchema();\n-        binder.create(schemaTO, schema);\n-        schema = schemaDAO.save(schema);\n+        T created;\n+        switch (schemaType) {\n+            case VIRTUAL:\n+                AbstractVirSchema virSchema = attrUtil.newVirSchema();\n+                binder.create((VirSchemaTO) schemaTO, virSchema);\n+                virSchema = virSchemaDAO.save(virSchema);\n+\n+                created = (T) binder.getVirSchemaTO(virSchema);\n+                break;\n+\n+            case DERIVED:\n+                AbstractDerSchema derSchema = attrUtil.newDerSchema();\n+                binder.create((DerSchemaTO) schemaTO, derSchema);\n+                derSchema = derSchemaDAO.save(derSchema);\n+\n+                created = (T) binder.getDerSchemaTO(derSchema);\n+                break;\n+\n+            case NORMAL:\n+            default:\n+                AbstractSchema normalSchema = attrUtil.newSchema();\n+                binder.create((SchemaTO) schemaTO, normalSchema);\n+                normalSchema = schemaDAO.save(normalSchema);\n+\n+                created = (T) binder.getSchemaTO(normalSchema, attrUtil);\n+        }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.create, Result.success,\n-                \"Successfully created schema: \" + kind + \"/\" + schema.getName());\n+        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.create,\n+                AuditElements.Result.success,\n+                \"Successfully created schema: \" + schemaType + \"/\" + attrType + \"/\" + created.getName());\n \n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getSchemaTO(schema, attrUtil);\n+        return created;\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n-    public SchemaTO delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"schema\") final String schemaName)\n-            throws NotFoundException {\n-\n-        Class<? extends AbstractSchema> reference = getAttributableUtil(kind).schemaClass();\n-        AbstractSchema schema = schemaDAO.find(schemaName, reference);\n-        if (schema == null) {\n-            throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n+    public void delete(final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(attrType);\n+\n+        if (!doesSchemaExist(schemaType, schemaName, attrUtil)) {\n+            throw new NotFoundException(schemaType + \"/\" + attrType + \"/\" + schemaName);\n         }\n \n-        SchemaTO schemaToDelete = binder.getSchemaTO(schema, getAttributableUtil(kind));\n+        switch (schemaType) {\n+            case VIRTUAL:\n+                virSchemaDAO.delete(schemaName, attrUtil);\n+                break;\n \n-        schemaDAO.delete(schemaName, getAttributableUtil(kind));\n+            case DERIVED:\n+                derSchemaDAO.delete(schemaName, attrUtil);\n+                break;\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.delete, Result.success,\n-                \"Successfully deleted schema: \" + kind + \"/\" + schema.getName());\n+            case NORMAL:\n+            default:\n+                schemaDAO.delete(schemaName, attrUtil);\n+        }\n \n-        return schemaToDelete;\n+        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.delete,\n+                AuditElements.Result.success,\n+                \"Successfully deleted schema: \" + schemaType + \"/\" + attrType + \"/\" + schemaName);\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        AttributableUtil attributableUtil = getAttributableUtil(kind);\n-        List<AbstractSchema> schemas = schemaDAO.findAll(attributableUtil.schemaClass());\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AbstractSchemaTO> List<T> list(final AttributableType attrType, final SchemaType schemaType) {\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(attrType);\n+\n+        List<T> result;\n+        switch (schemaType) {\n+            case VIRTUAL:\n+                List<AbstractVirSchema> virSchemas = virSchemaDAO.findAll(attrUtil.virSchemaClass());\n+                result = (List<T>) new ArrayList<VirSchemaTO>(virSchemas.size());\n+                for (AbstractVirSchema derSchema : virSchemas) {\n+                    result.add((T) binder.getVirSchemaTO(derSchema));\n+                }\n+                break;\n \n-        List<SchemaTO> schemaTOs = new ArrayList<SchemaTO>(schemas.size());\n-        for (AbstractSchema schema : schemas) {\n-            schemaTOs.add(binder.getSchemaTO(schema, attributableUtil));\n+            case DERIVED:\n+                List<AbstractDerSchema> derSchemas = derSchemaDAO.findAll(attrUtil.derSchemaClass());\n+                result = (List<T>) new ArrayList<DerSchemaTO>(derSchemas.size());\n+                for (AbstractDerSchema derSchema : derSchemas) {\n+                    result.add((T) binder.getDerSchemaTO(derSchema));\n+                }\n+                break;\n+\n+            case NORMAL:\n+            default:\n+                List<AbstractSchema> schemas = schemaDAO.findAll(attrUtil.schemaClass());\n+                result = (List<T>) new ArrayList<SchemaTO>(schemas.size());\n+                for (AbstractSchema schema : schemas) {\n+                    result.add((T) binder.getSchemaTO(schema, attrUtil));\n+                }\n         }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.list, Result.success,\n-                \"Successfully listed all schemas: \" + kind + \"/\" + schemaTOs.size());\n+        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.list,\n+                AuditElements.Result.success,\n+                \"Successfully listed schemas: \" + schemaType + \"/\" + attrType + \" \" + result.size());\n \n-        return schemaTOs;\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/read/{schema}\")\n-    public SchemaTO read(@PathVariable(\"kind\") final String kind, @PathVariable(\"schema\") final String schemaName)\n-            throws NotFoundException {\n-\n-        AttributableUtil attributableUtil = getAttributableUtil(kind);\n-        AbstractSchema schema = schemaDAO.find(schemaName, attributableUtil.schemaClass());\n-        if (schema == null) {\n-            throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AbstractSchemaTO> T read(final AttributableType attrType, final SchemaType schemaType,\n+            final String schemaName) {\n+\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(attrType);\n+\n+        T read;\n+        switch (schemaType) {\n+            case VIRTUAL:\n+                AbstractVirSchema virSchema = virSchemaDAO.find(schemaName, attrUtil.virSchemaClass());\n+                if (virSchema == null) {\n+                    throw new NotFoundException(\"Virtual Schema '\" + schemaName + \"'\");\n+                }\n+\n+                read = (T) binder.getVirSchemaTO(virSchema);\n+                break;\n+\n+            case DERIVED:\n+                AbstractDerSchema derSchema = derSchemaDAO.find(schemaName, attrUtil.derSchemaClass());\n+                if (derSchema == null) {\n+                    throw new NotFoundException(\"Derived schema '\" + schemaName + \"'\");\n+                }\n+\n+                read = (T) binder.getDerSchemaTO(derSchema);\n+                break;\n+\n+            case NORMAL:\n+            default:\n+                AbstractSchema schema = schemaDAO.find(schemaName, attrUtil.schemaClass());\n+                if (schema == null) {\n+                    throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n+                }\n+\n+                read = (T) binder.getSchemaTO(schema, attrUtil);\n         }\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.read, Result.success,\n-                \"Successfully read schema: \" + kind + \"/\" + schema.getName());\n+        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.read,\n+                AuditElements.Result.success,\n+                \"Successfully read schema: \" + schemaType + \"/\" + attrType + \"/\" + schemaName);\n \n-        return binder.getSchemaTO(schema, attributableUtil);\n+        return read;\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n-    public SchemaTO update(@RequestBody final SchemaTO schemaTO, @PathVariable(\"kind\") final String kind)\n-            throws NotFoundException {\n-\n-        AttributableUtil attributableUtil = getAttributableUtil(kind);\n-        AbstractSchema schema = schemaDAO.find(schemaTO.getName(), attributableUtil.schemaClass());\n-        if (schema == null) {\n-            throw new NotFoundException(\"Schema '\" + schemaTO.getName() + \"'\");\n+    public <T extends AbstractSchemaTO> void update(final AttributableType attrType, final SchemaType schemaType,\n+            final String schemaName, final T schemaTO) {\n+\n+        final AttributableUtil attrUtil = AttributableUtil.getInstance(attrType);\n+\n+        if (!doesSchemaExist(schemaType, schemaName, attrUtil)) {\n+            throw new NotFoundException(schemaType + \"/\" + attrType + \"/\" + schemaName);\n         }\n \n-        binder.update(schemaTO, schema, attributableUtil);\n-        schema = schemaDAO.save(schema);\n+        switch (schemaType) {\n+            case VIRTUAL:\n+                AbstractVirSchema virSchema = virSchemaDAO.find(schemaName, attrUtil.virSchemaClass());\n+                if (virSchema == null) {\n+                    throw new NotFoundException(\"Virtual Schema '\" + schemaName + \"'\");\n+                }\n+\n+                binder.update((VirSchemaTO) schemaTO, virSchema);\n+                virSchemaDAO.save(virSchema);\n+                break;\n \n-        auditManager.audit(Category.schema, SchemaSubCategory.update, Result.success,\n-                \"Successfully updated schema: \" + kind + \"/\" + schema.getName());\n+            case DERIVED:\n+                AbstractDerSchema derSchema = derSchemaDAO.find(schemaName, attrUtil.derSchemaClass());\n+                if (derSchema == null) {\n+                    throw new NotFoundException(\"Derived schema '\" + schemaName + \"'\");\n+                }\n+\n+                binder.update((DerSchemaTO) schemaTO, derSchema);\n+                derSchemaDAO.save(derSchema);\n+                break;\n+\n+            case NORMAL:\n+            default:\n+                AbstractSchema schema = schemaDAO.find(schemaName, attrUtil.schemaClass());\n+                if (schema == null) {\n+                    throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n+                }\n+\n+                binder.update((SchemaTO) schemaTO, schema, attrUtil);\n+                schemaDAO.save(schema);\n+        }\n \n-        return binder.getSchemaTO(schema, attributableUtil);\n+        auditManager.audit(AuditElements.Category.schema, AuditElements.SchemaSubCategory.update,\n+                AuditElements.Result.success,\n+                \"Successfully updated schema: \" + schemaType + \"/\" + attrType + \"/\" + schemaName);\n     }\n }"},{"sha":"d776106e52e0b2cdd609869e13567a41b9c699af","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":44,"deletions":83,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -22,7 +22,6 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n-import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.SchedTaskTO;\n@@ -35,6 +34,7 @@\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n@@ -60,16 +60,9 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/task\")\n+import org.springframework.stereotype.Component;\n+\n+@Component\n public class TaskController extends AbstractController {\n \n     @Autowired\n@@ -99,23 +92,11 @@ public class TaskController extends AbstractController {\n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/create/sync\")\n-    public TaskTO createSyncTask(final HttpServletResponse response, @RequestBody final SyncTaskTO taskTO) {\n-        return createSchedTask(response, taskTO);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.POST, value = \"/create/sched\")\n-    public TaskTO createSchedTask(final HttpServletResponse response, @RequestBody final SchedTaskTO taskTO) {\n-        TaskTO createdTaskTO = createSchedTaskInternal(taskTO);\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return createdTaskTO;\n-    }\n-\n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n-    public TaskTO createSchedTaskInternal(final SchedTaskTO taskTO) {\n+    public TaskTO createSchedTask(final SchedTaskTO taskTO) {\n         LOG.debug(\"Creating task \" + taskTO);\n \n-        TaskUtil taskUtil = getTaskUtil(taskTO);\n+        TaskUtil taskUtil = TaskUtil.getInstance(taskTO);\n \n         SchedTask task = binder.createSchedTask(taskTO, taskUtil);\n         task = taskDAO.save(task);\n@@ -140,22 +121,20 @@ public TaskTO createSchedTaskInternal(final SchedTaskTO taskTO) {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update/sync\")\n-    public TaskTO updateSync(@RequestBody final SyncTaskTO taskTO) {\n+    public TaskTO updateSync(final SyncTaskTO taskTO) {\n         return updateSched(taskTO);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update/sched\")\n-    public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) {\n+    public TaskTO updateSched(final SchedTaskTO taskTO) {\n         LOG.debug(\"Task update called with parameter {}\", taskTO);\n \n         SchedTask task = taskDAO.find(taskTO.getId());\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskTO.getId());\n         }\n \n-        TaskUtil taskUtil = getTaskUtil(task);\n+        TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -179,25 +158,20 @@ public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) {\n         return binder.getTaskTO(task, taskUtil);\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/count\")\n-    public ModelAndView count(@PathVariable(\"kind\") final String kind) {\n-        return new ModelAndView().addObject(countInternal(kind));\n-    }\n-\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    public int countInternal(final String kind) {\n-        return taskDAO.count(getTaskUtil(kind).taskClass());\n+    public int count(final TaskType taskType) {\n+        return taskDAO.count(TaskUtil.getInstance(taskType).taskClass());\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<TaskTO> list(@PathVariable(\"kind\") final String kind) {\n-        TaskUtil taskUtil = getTaskUtil(kind);\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends TaskTO> List<T> list(final TaskType taskType) {\n+        TaskUtil taskUtil = TaskUtil.getInstance(taskType);\n \n         List<Task> tasks = taskDAO.findAll(taskUtil.taskClass());\n-        List<TaskTO> taskTOs = new ArrayList<TaskTO>(tasks.size());\n+        List<T> taskTOs = new ArrayList<T>(tasks.size());\n         for (Task task : tasks) {\n-            taskTOs.add(binder.getTaskTO(task, taskUtil));\n+            taskTOs.add((T) binder.getTaskTO(task, taskUtil));\n         }\n \n         auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n@@ -207,16 +181,14 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind) {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list/{page}/{size}\")\n-    public List<TaskTO> list(@PathVariable(\"kind\") final String kind, @PathVariable(\"page\") final int page,\n-            @PathVariable(\"size\") final int size) {\n-\n-        TaskUtil taskUtil = getTaskUtil(kind);\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends TaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\n+        TaskUtil taskUtil = TaskUtil.getInstance(taskType);\n \n         List<Task> tasks = taskDAO.findAll(page, size, taskUtil.taskClass());\n-        List<TaskTO> taskTOs = new ArrayList<TaskTO>(tasks.size());\n+        List<T> taskTOs = new ArrayList<T>(tasks.size());\n         for (Task task : tasks) {\n-            taskTOs.add(binder.getTaskTO(task, taskUtil));\n+            taskTOs.add((T) binder.getTaskTO(task, taskUtil));\n         }\n \n         auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n@@ -227,35 +199,32 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind, @PathVariable(\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/jobClasses\")\n-    public ModelAndView getJobClasses() {\n+    public Set<String> getJobClasses() {\n         Set<String> jobClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB);\n \n         auditManager.audit(Category.task, TaskSubCategory.getJobClasses, Result.success,\n                 \"Successfully listed all Job classes: \" + jobClasses.size());\n \n-        return new ModelAndView().addObject(jobClasses);\n+        return jobClasses;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/syncActionsClasses\")\n-    public ModelAndView getSyncActionsClasses() {\n+    public Set<String> getSyncActionsClasses() {\n         Set<String> actionsClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS);\n \n         auditManager.audit(Category.task, TaskSubCategory.getSyncActionsClasses, Result.success,\n                 \"Successfully listed all SyncActions classes: \" + actionsClasses.size());\n \n-        return new ModelAndView().addObject(actionsClasses);\n+        return actionsClasses;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{taskId}\")\n-    public TaskTO read(@PathVariable(\"taskId\") final Long taskId) {\n+    public TaskTO read(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        TaskUtil taskUtil = getTaskUtil(task);\n+        TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n         auditManager.audit(Category.task, TaskSubCategory.read, Result.success,\n                 \"Successfully read task: \" + task.getId() + \"/\" + taskUtil);\n@@ -264,8 +233,7 @@ public TaskTO read(@PathVariable(\"taskId\") final Long taskId) {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\n-    public TaskExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) {\n+    public TaskExecTO readExecution(final Long executionId) {\n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n@@ -278,19 +246,16 @@ public TaskExecTO readExecution(@PathVariable(\"executionId\") final Long executio\n     }\n \n     @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/execute/{taskId}\")\n-    public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n-            @RequestParam(value = \"dryRun\", defaultValue = \"false\") final boolean dryRun) {\n-\n+    public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        TaskUtil taskUtil = getTaskUtil(task);\n+        TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n         TaskExecTO result = null;\n         LOG.debug(\"Execution started for {}\", task);\n-        switch (taskUtil) {\n+        switch (taskUtil.getType()) {\n             case PROPAGATION:\n                 final TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n                 result = binder.getTaskExecTO(propExec);\n@@ -301,8 +266,8 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n                 result = binder.getTaskExecTO(notExec);\n                 break;\n \n-            case SCHED:\n-            case SYNC:\n+            case SCHEDULED:\n+            case SYNCHRONIZATION:\n                 try {\n                     jobInstanceLoader.registerJob(task,\n                             ((SchedTask) task).getJobClassName(),\n@@ -345,11 +310,7 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/report/{executionId}\")\n-    public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n-            @RequestParam(\"executionStatus\") final PropagationTaskExecStatus status,\n-            @RequestParam(\"message\") final String message) {\n-\n+    public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus status, final String message) {\n         TaskExec exec = taskExecDAO.find(executionId);\n         if (exec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n@@ -358,8 +319,8 @@ public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n         SyncopeClientException sce = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidPropagationTaskExecReport);\n \n-        TaskUtil taskUtil = getTaskUtil(exec.getTask());\n-        if (TaskUtil.PROPAGATION == taskUtil) {\n+        TaskUtil taskUtil = TaskUtil.getInstance(exec.getTask());\n+        if (TaskType.PROPAGATION == taskUtil.getType()) {\n             PropagationTask task = (PropagationTask) exec.getTask();\n             if (task.getPropagationMode() != PropagationMode.TWO_PHASES) {\n                 sce.addElement(\"Propagation mode: \" + task.getPropagationMode());\n@@ -404,17 +365,16 @@ public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{taskId}\")\n-    public TaskTO delete(@PathVariable(\"taskId\") final Long taskId) {\n+    public TaskTO delete(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        TaskUtil taskUtil = getTaskUtil(task);\n+        TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n         TaskTO taskToDelete = binder.getTaskTO(task, taskUtil);\n \n-        if (TaskUtil.SCHED == taskUtil || TaskUtil.SYNC == taskUtil) {\n+        if (TaskType.SCHEDULED == taskUtil.getType() || TaskType.SYNCHRONIZATION == taskUtil.getType()) {\n             jobInstanceLoader.unregisterJob(task);\n         }\n \n@@ -427,8 +387,7 @@ public TaskTO delete(@PathVariable(\"taskId\") final Long taskId) {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\n-    public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId) {\n+    public TaskExecTO deleteExecution(final Long executionId) {\n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n@@ -447,8 +406,7 @@ public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long execut\n             + \"(hasRole('TASK_EXECUTE') and \"\n             + \"(#bulkAction.operation == #bulkAction.operation.EXECUTE or \"\n             + \"#bulkAction.operation == #bulkAction.operation.DRYRUN))\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n-    public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\n         LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n \n         BulkActionRes res = new BulkActionRes();\n@@ -464,6 +422,7 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n                     }\n                 }\n                 break;\n+\n             case DRYRUN:\n                 for (String taskId : bulkAction.getTargets()) {\n                     try {\n@@ -475,6 +434,7 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n                     }\n                 }\n                 break;\n+\n             case EXECUTE:\n                 for (String taskId : bulkAction.getTargets()) {\n                     try {\n@@ -486,6 +446,7 @@ public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n                     }\n                 }\n                 break;\n+\n             default:\n         }\n "},{"sha":"f5bb5e014d412b9b9f0c1aae07600fb6d12b543b","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":26,"deletions":214,"changes":240,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -18,14 +18,12 @@\n  */\n package org.apache.syncope.core.rest.controller;\n \n-import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n@@ -36,7 +34,6 @@\n import org.apache.syncope.common.to.PropagationRequestTO;\n import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n@@ -63,24 +60,16 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n \n /**\n  * Note that this controller does not extend AbstractController, hence does not provide any Spring's Transactional logic\n  * at class level.\n  *\n  * @see AbstractController\n  */\n-@Controller\n-@RequestMapping(\"/user\")\n+@Component\n public class UserController {\n \n     /**\n@@ -118,42 +107,15 @@ public class UserController {\n     @Autowired\n     protected ConnObjectUtil connObjectUtil;\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/verifyPassword/{username}\")\n-    public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n-            @RequestParam(\"password\") final String password) {\n-\n-        return new ModelAndView().addObject(verifyPasswordInternal(username, password));\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_READ')\")\n-    @Transactional(readOnly = true)\n-    public Boolean verifyPasswordInternal(final String username, final String password) {\n-        auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n-                \"Verified password for: \" + username);\n-        return binder.verifyPassword(username, password);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET, value = \"/count\")\n-    public ModelAndView count() {\n-        return new ModelAndView().addObject(countInternal());\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public int countInternal() {\n+    public int count() {\n         return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n-    public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n-            throws InvalidSearchConditionException {\n-\n-        return new ModelAndView().addObject(searchCountInternal(searchCondition));\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public int searchCountInternal(final NodeCond searchCondition) throws InvalidSearchConditionException {\n+    public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\n         if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n@@ -164,7 +126,6 @@ public int searchCountInternal(final NodeCond searchCondition) throws InvalidSea\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list() {\n         List<SyncopeUser> users =\n@@ -182,9 +143,8 @@ public List<UserTO> list() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list/{page}/{size}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"size\") final int size) {\n+    public List<UserTO> list(final int page, final int size) {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n@@ -200,9 +160,8 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public UserTO read(@PathVariable(\"userId\") final Long userId) {\n+    public UserTO read(final Long userId) {\n         UserTO result = binder.getUserTO(userId);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -212,9 +171,8 @@ public UserTO read(@PathVariable(\"userId\") final Long userId) {\n     }\n \n     @PreAuthorize(\"#username == authentication.name or hasRole('USER_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/readByUsername/{username}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public UserTO read(@PathVariable final String username) {\n+    public UserTO read(final String username) {\n         UserTO result = binder.getUserTO(username);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -224,7 +182,6 @@ public UserTO read(@PathVariable final String username) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/self\")\n     @Transactional(readOnly = true)\n     public UserTO read() {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n@@ -236,19 +193,16 @@ public UserTO read() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n+    public List<UserTO> search(final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n         return search(searchCondition, -1, -1);\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVariable(\"page\") final int page,\n-            @PathVariable(\"size\") final int size)\n+    public List<UserTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n \n         LOG.debug(\"User search called with condition {}\", searchCondition);\n@@ -273,15 +227,8 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n         return result;\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public UserTO create(final HttpServletResponse response, @RequestBody final UserTO userTO) {\n-        UserTO savedTO = createInternal(userTO);\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return savedTO;\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n-    public UserTO createInternal(final UserTO userTO) {\n+    public UserTO create(final UserTO userTO) {\n         LOG.debug(\"User create called with {}\", userTO);\n \n         Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n@@ -323,8 +270,7 @@ public UserTO createInternal(final UserTO userTO) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public UserTO update(@RequestBody final UserMod userMod) {\n+    public UserTO update(final UserMod userMod) {\n         LOG.debug(\"User update called with {}\", userMod);\n \n         final String changedPwd = userMod.getPassword();\n@@ -409,21 +355,14 @@ public UserTO update(@RequestBody final UserMod userMod) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/activate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(@PathVariable(\"userId\") final Long userId,\n-            @RequestParam(required = true) final String token) {\n-\n+    public UserTO activate(final Long userId, final String token) {\n         return activate(userId, token, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/activate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(@PathVariable(\"userId\") final Long userId,\n-            @RequestParam(required = true) final String token,\n-            @RequestBody final PropagationRequestTO propagationRequestTO) {\n-\n+    public UserTO activate(final Long userId, final String token, final PropagationRequestTO propagationRequestTO) {\n         LOG.debug(\"About to activate \" + userId);\n \n         SyncopeUser user = binder.getUserFromId(userId);\n@@ -432,21 +371,14 @@ public UserTO activate(@PathVariable(\"userId\") final Long userId,\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/activateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(@PathVariable(\"username\") final String username,\n-            @RequestParam(required = true) final String token) {\n-\n+    public UserTO activate(final String username, final String token) {\n         return activate(username, token, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/activateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(@PathVariable(\"username\") final String username,\n-            @RequestParam(required = true) final String token,\n-            @RequestBody final PropagationRequestTO propagationRequestTO) {\n-\n+    public UserTO activate(final String username, final String token, final PropagationRequestTO propagationRequestTO) {\n         LOG.debug(\"About to activate \" + username);\n \n         SyncopeUser user = binder.getUserFromUsername(username);\n@@ -455,19 +387,14 @@ public UserTO activate(@PathVariable(\"username\") final String username,\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/suspend/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"userId\") final Long userId) {\n-\n+    public UserTO suspend(final Long userId) {\n         return suspend(userId, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/suspend/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n-            @RequestBody final PropagationRequestTO propagationRequestTO) {\n-\n+    public UserTO suspend(final Long userId, final PropagationRequestTO propagationRequestTO) {\n         LOG.debug(\"About to suspend \" + userId);\n \n         SyncopeUser user = binder.getUserFromId(userId);\n@@ -476,19 +403,14 @@ public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/suspendByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"username\") final String username) {\n-\n+    public UserTO suspend(final String username) {\n         return suspend(username, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/suspendByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"username\") final String username,\n-            @RequestBody final PropagationRequestTO propagationRequestTO) {\n-\n+    public UserTO suspend(final String username, final PropagationRequestTO propagationRequestTO) {\n         LOG.debug(\"About to suspend \" + username);\n \n         SyncopeUser user = binder.getUserFromUsername(username);\n@@ -497,39 +419,29 @@ public UserTO suspend(@PathVariable(\"username\") final String username,\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/reactivate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(@PathVariable(\"userId\") final Long userId) {\n-\n+    public UserTO reactivate(final Long userId) {\n         return reactivate(userId, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/reactivate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(@PathVariable(\"userId\") final Long userId,\n-            @RequestBody final PropagationRequestTO propagationRequestTO) {\n-\n+    public UserTO reactivate(final Long userId, final PropagationRequestTO propagationRequestTO) {\n         LOG.debug(\"About to reactivate \" + userId);\n \n         SyncopeUser user = binder.getUserFromId(userId);\n \n         return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/reactivateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(@PathVariable(\"username\") final String username) {\n-\n+    public UserTO reactivate(final String username) {\n         return reactivate(username, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/reactivateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(@PathVariable(\"username\") final String username,\n-            @RequestBody final PropagationRequestTO propagationRequestTO) {\n-\n+    public UserTO reactivate(final String username, final PropagationRequestTO propagationRequestTO) {\n         LOG.debug(\"About to reactivate \" + username);\n \n         SyncopeUser user = binder.getUserFromUsername(username);\n@@ -538,16 +450,14 @@ public UserTO reactivate(@PathVariable(\"username\") final String username,\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n-    public UserTO delete(@PathVariable(\"userId\") final Long userId) {\n+    public UserTO delete(final Long userId) {\n         LOG.debug(\"User delete called with {}\", userId);\n \n         return doDelete(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/deleteByUsername/{username}\")\n-    public UserTO delete(@PathVariable final String username) {\n+    public UserTO delete(final String username) {\n         LOG.debug(\"User delete called with {}\", username);\n \n         UserTO result = binder.getUserTO(username);\n@@ -556,103 +466,6 @@ public UserTO delete(@PathVariable final String username) {\n         return doDelete(userId);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/execute/workflow/{taskId}\")\n-    public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"taskId\") final String taskId) {\n-        LOG.debug(\"About to execute {} on {}\", taskId, userTO.getId());\n-\n-        WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n-\n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                new WorkflowResult<Map.Entry<Long, Boolean>>(new SimpleEntry<Long, Boolean>(updated.getResult(), null),\n-                updated.getPropByRes(), updated.getPerformedTasks()));\n-\n-        taskExecutor.execute(tasks);\n-\n-        notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n-\n-        final UserTO savedTO = binder.getUserTO(updated.getResult());\n-\n-        LOG.debug(\"About to return updated user\\n{}\", savedTO);\n-\n-        auditManager.audit(Category.user, UserSubCategory.executeWorkflow, Result.success,\n-                \"Successfully executed workflow action \" + taskId + \" on user: \" + userTO.getUsername());\n-\n-        return savedTO;\n-    }\n-\n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/list\")\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public List<WorkflowFormTO> getForms() {\n-        List<WorkflowFormTO> forms = uwfAdapter.getForms();\n-\n-        auditManager.audit(Category.user, UserSubCategory.getForms, Result.success,\n-                \"Successfully list workflow forms: \" + forms.size());\n-\n-        return forms;\n-    }\n-\n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/{userId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId) {\n-        SyncopeUser user = binder.getUserFromId(userId);\n-        WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n-\n-        auditManager.audit(Category.user, UserSubCategory.getFormForUser, Result.success,\n-                \"Successfully read workflow form for user: \" + user.getUsername());\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/claim/{taskId}\")\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId) {\n-        WorkflowFormTO result = uwfAdapter.claimForm(taskId,\n-                SecurityContextHolder.getContext().getAuthentication().getName());\n-\n-        auditManager.audit(Category.user, UserSubCategory.claimForm, Result.success,\n-                \"Successfully claimed workflow form: \" + taskId);\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/workflow/form/submit\")\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO submitForm(@RequestBody final WorkflowFormTO form) {\n-        LOG.debug(\"About to process form {}\", form);\n-\n-        WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form,\n-                SecurityContextHolder.getContext().getAuthentication().getName());\n-\n-        // propByRes can be made empty by the workflow definition is no propagation should occur \n-        // (for example, with rejected users)\n-        if (updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n-            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                    new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                    new SimpleEntry<Long, Boolean>(updated.getResult().getKey(), Boolean.TRUE),\n-                    updated.getPropByRes(),\n-                    updated.getPerformedTasks()),\n-                    updated.getResult().getValue(),\n-                    null,\n-                    null,\n-                    null);\n-            taskExecutor.execute(tasks);\n-        }\n-\n-        final UserTO savedTO = binder.getUserTO(updated.getResult().getKey());\n-\n-        auditManager.audit(Category.user, UserSubCategory.submitForm, Result.success,\n-                \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n-\n-        LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n-\n-        return savedTO;\n-    }\n-\n     protected UserTO setStatus(final SyncopeUser user, final String token,\n             final PropagationRequestTO propagationRequestTO, final boolean status, final String task) {\n \n@@ -736,8 +549,7 @@ protected UserTO doDelete(final Long userId) {\n             + \"(hasRole('USER_UPDATE') and \"\n             + \"(#bulkAction.operation == #bulkAction.operation.REACTIVATE or \"\n             + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/bulk\")\n-    public BulkActionRes bulkAction(@RequestBody final BulkAction bulkAction) {\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\n         LOG.debug(\"Bulk action '{}' called on '{}'\", bulkAction.getOperation(), bulkAction.getTargets());\n \n         BulkActionRes res = new BulkActionRes();"},{"sha":"284b7e50fb43293710c8fd58a1c8a7fa787586e1","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":11,"deletions":29,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -40,16 +40,10 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n-\n-@Controller\n-@RequestMapping(\"/user/request\")\n+\n+@Component\n public class UserRequestController {\n \n     /**\n@@ -69,24 +63,17 @@ public class UserRequestController {\n     @Autowired\n     private UserRequestDataBinder binder;\n \n-    public Boolean isCreateAllowedByConf() {\n+    public boolean isCreateAllowed() {\n         final SyncopeConf createRequestAllowed = confDAO.find(\"createRequest.allowed\", \"false\");\n \n-        return Boolean.valueOf(createRequestAllowed.getValue());\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET, value = \"/create/allowed\")\n-    @Transactional(readOnly = true)\n-    public ModelAndView isCreateAllowed() {\n         auditManager.audit(Category.userRequest, UserRequestSubCategory.isCreateAllowed, Result.success,\n                 \"Successfully checked whether self create is allowed\");\n \n-        return new ModelAndView().addObject(isCreateAllowedByConf());\n+        return Boolean.valueOf(createRequestAllowed.getValue());\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public UserRequestTO create(@RequestBody final UserTO userTO) {\n-        if (!isCreateAllowedByConf()) {\n+    public UserRequestTO create(final UserTO userTO) {\n+        if (!isCreateAllowed()) {\n             LOG.error(\"Create requests are not allowed\");\n \n             throw new UnauthorizedRoleException(-1L);\n@@ -111,8 +98,7 @@ public UserRequestTO create(@RequestBody final UserTO userTO) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public UserRequestTO update(@RequestBody final UserMod userMod) {\n+    public UserRequestTO update(final UserMod userMod) {\n         LOG.debug(\"Request user update called with {}\", userMod);\n \n         try {\n@@ -132,7 +118,6 @@ public UserRequestTO update(@RequestBody final UserMod userMod) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     @Transactional(readOnly = true)\n     public List<UserRequestTO> list() {\n         List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n@@ -148,9 +133,8 @@ public List<UserRequestTO> list() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{requestId}\")\n     @Transactional(readOnly = true)\n-    public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) {\n+    public UserRequestTO read(final Long requestId) {\n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n@@ -163,8 +147,7 @@ public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n-    public UserRequestTO delete(@PathVariable(\"userId\") final Long userId) {\n+    public UserRequestTO delete(final Long userId) {\n         LOG.debug(\"Request user delete called with {}\", userId);\n \n         try {\n@@ -184,8 +167,7 @@ public UserRequestTO delete(@PathVariable(\"userId\") final Long userId) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/deleteRequest/{requestId}\")\n-    public UserRequestTO deleteRequest(@PathVariable(\"requestId\") final Long requestId) {\n+    public UserRequestTO deleteRequest(final Long requestId) {\n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);"},{"sha":"1994a9be149495d29ac3cc56e61d9828f1d4de5c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserWorkflowController.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserWorkflowController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.notification.NotificationManager;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.data.UserDataBinder;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class UserWorkflowController extends AbstractController {\n+\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    @Autowired\n+    protected UserDataBinder binder;\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public WorkflowFormTO claimForm(final String taskId) {\n+        WorkflowFormTO result = uwfAdapter.claimForm(taskId,\n+                SecurityContextHolder.getContext().getAuthentication().getName());\n+\n+        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.claimForm,\n+                AuditElements.Result.success,\n+                \"Successfully claimed workflow form: \" + taskId);\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    public UserTO executeWorkflow(final UserTO userTO, final String taskId) {\n+        LOG.debug(\"About to execute {} on {}\", taskId, userTO.getId());\n+\n+        WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                new AbstractMap.SimpleEntry<Long, Boolean>(updated.getResult(), null),\n+                updated.getPropByRes(), updated.getPerformedTasks()));\n+\n+        taskExecutor.execute(tasks);\n+\n+        notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n+\n+        final UserTO savedTO = binder.getUserTO(updated.getResult());\n+\n+        LOG.debug(\"About to return updated user\\n{}\", savedTO);\n+\n+        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.executeWorkflow,\n+                AuditElements.Result.success,\n+                \"Successfully executed workflow action \" + taskId + \" on user: \" + userTO.getUsername());\n+\n+        return savedTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public WorkflowFormTO getFormForUser(final Long userId) {\n+        SyncopeUser user = binder.getUserFromId(userId);\n+        WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n+\n+        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.getFormForUser,\n+                AuditElements.Result.success,\n+                \"Successfully read workflow form for user: \" + user.getUsername());\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public List<WorkflowFormTO> getForms() {\n+        List<WorkflowFormTO> forms = uwfAdapter.getForms();\n+\n+        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.getForms,\n+                AuditElements.Result.success,\n+                \"Successfully list workflow forms: \" + forms.size());\n+\n+        return forms;\n+    }\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO submitForm(final WorkflowFormTO form) {\n+        LOG.debug(\"About to process form {}\", form);\n+\n+        WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form,\n+                SecurityContextHolder.getContext().getAuthentication().getName());\n+\n+        // propByRes can be made empty by the workflow definition is no propagation should occur \n+        // (for example, with rejected users)\n+        if (updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                    new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                    new AbstractMap.SimpleEntry<Long, Boolean>(updated.getResult().getKey(), Boolean.TRUE),\n+                    updated.getPropByRes(),\n+                    updated.getPerformedTasks()),\n+                    updated.getResult().getValue(),\n+                    null,\n+                    null,\n+                    null);\n+            taskExecutor.execute(tasks);\n+        }\n+\n+        final UserTO savedTO = binder.getUserTO(updated.getResult().getKey());\n+\n+        auditManager.audit(AuditElements.Category.user, AuditElements.UserSubCategory.submitForm,\n+                AuditElements.Result.success,\n+                \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n+\n+        LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n+\n+        return savedTO;\n+    }\n+}"},{"sha":"1b1d795a70a2cfb8ef533522c97d34295e0b0d99","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/VirtualSchemaController.java","status":"removed","additions":0,"deletions":162,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,162 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.controller;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.EntityExistsException;\n-import javax.servlet.http.HttpServletResponse;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.to.VirtualSchemaTO;\n-import org.apache.syncope.common.types.AuditElements.Category;\n-import org.apache.syncope.common.types.AuditElements.Result;\n-import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n-import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.dao.VirSchemaDAO;\n-import org.apache.syncope.core.rest.data.VirtualSchemaDataBinder;\n-import org.apache.syncope.core.util.AttributableUtil;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-@Controller\n-@RequestMapping(\"/virtualSchema\")\n-public class VirtualSchemaController extends AbstractController {\n-\n-    @Autowired\n-    private AuditManager auditManager;\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    private VirtualSchemaDataBinder binder;\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n-    public VirtualSchemaTO create(final HttpServletResponse response,\n-            @RequestBody final VirtualSchemaTO virSchemaTO, @PathVariable(\"kind\") final String kind) {\n-\n-        if (StringUtils.isBlank(virSchemaTO.getName())) {\n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-            SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n-            sce.addElement(\"Virtual schema name\");\n-            sccee.addException(sce);\n-            throw sccee;\n-        }\n-\n-        AttributableUtil attrUtil = getAttributableUtil(kind);\n-\n-        if (virSchemaDAO.find(virSchemaTO.getName(), attrUtil.virSchemaClass()) != null) {\n-            throw new EntityExistsException(attrUtil.schemaClass().getSimpleName()\n-                    + \" '\" + virSchemaTO.getName() + \"'\");\n-        }\n-\n-        AbstractVirSchema virSchema = virSchemaDAO.save(binder.create(virSchemaTO, attrUtil.newVirSchema()));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.createVirtual, Result.success,\n-                \"Successfully created virtual schema: \" + kind + \"/\" + virSchema.getName());\n-\n-        response.setStatus(HttpServletResponse.SC_CREATED);\n-        return binder.getVirtualSchemaTO(virSchema);\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        List<? extends AbstractVirSchema> virAttrSchemas = virSchemaDAO.findAll(reference);\n-\n-        List<VirtualSchemaTO> virtualSchemaTOs = new ArrayList<VirtualSchemaTO>(virAttrSchemas.size());\n-        for (AbstractVirSchema virSchema : virSchemaDAO.findAll(reference)) {\n-            virtualSchemaTOs.add(binder.getVirtualSchemaTO(virSchema));\n-        }\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.listVirtual, Result.success,\n-                \"Successfully listed all virtual schemas: \" + kind + \"/\" + virtualSchemaTOs.size());\n-\n-        return virtualSchemaTOs;\n-    }\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/read/{virtualSchema}\")\n-    public VirtualSchemaTO read(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"virtualSchema\") final String virtualSchemaName) {\n-\n-        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        AbstractVirSchema virtualSchema = virSchemaDAO.find(virtualSchemaName, reference);\n-        if (virtualSchema == null) {\n-            throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n-        }\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.readVirtual, Result.success,\n-                \"Successfully read virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n-\n-        return binder.getVirtualSchemaTO(virtualSchema);\n-    }\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n-    public VirtualSchemaTO update(@RequestBody final VirtualSchemaTO virtualSchemaTO,\n-            @PathVariable(\"kind\") final String kind) {\n-\n-        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        AbstractVirSchema virtualSchema = virSchemaDAO.find(virtualSchemaTO.getName(), reference);\n-        if (virtualSchema == null) {\n-            throw new NotFoundException(\"Virtual schema is null\");\n-        }\n-\n-        virtualSchema = binder.update(virtualSchemaTO, virtualSchema);\n-        virtualSchema = virSchemaDAO.save(virtualSchema);\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.updateVirtual, Result.success,\n-                \"Successfully updated virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n-\n-        return binder.getVirtualSchemaTO(virtualSchema);\n-    }\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n-    public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"schema\") final String virtualSchemaName) {\n-\n-        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        AbstractVirSchema virSchema = virSchemaDAO.find(virtualSchemaName, reference);\n-        if (virSchema == null) {\n-            throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n-        }\n-\n-        VirtualSchemaTO schemaToDelete = binder.getVirtualSchemaTO(virSchema);\n-        virSchemaDAO.delete(virtualSchemaName, getAttributableUtil(kind));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.deleteVirtual, Result.success,\n-                \"Successfully deleted virtual schema: \" + kind + \"/\" + virSchema.getName());\n-        return schemaToDelete;\n-    }\n-}"},{"sha":"ae69c387cb12c2541a53d48c0578dac0a49a9414","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/WorkflowController.java","status":"modified","additions":6,"deletions":16,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -31,15 +31,11 @@\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n+import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.servlet.ModelAndView;\n \n-@Controller\n-@RequestMapping(\"/workflow\")\n+@Component\n public class WorkflowController extends AbstractController {\n \n     @Autowired\n@@ -61,14 +57,12 @@ private WorkflowDefinitionTO getDefinition(final WorkflowAdapter adapter) throws\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/definition/user\")\n     @Transactional(readOnly = true)\n     public WorkflowDefinitionTO getUserDefinition() throws WorkflowException {\n         return getDefinition(uwfAdapter);\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/definition/role\")\n     @Transactional(readOnly = true)\n     public WorkflowDefinitionTO getRoleDefinition() throws WorkflowException {\n         return getDefinition(rwfAdapter);\n@@ -82,13 +76,11 @@ private void updateDefinition(final WorkflowAdapter adapter, final WorkflowDefin\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/user\")\n     public void updateUserDefinition(@RequestBody final WorkflowDefinitionTO definition) {\n         updateDefinition(uwfAdapter, definition);\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/role\")\n     public void updateRoleDefinition(@RequestBody final WorkflowDefinitionTO definition) {\n         updateDefinition(rwfAdapter, definition);\n     }\n@@ -103,14 +95,12 @@ private List<String> getDefinedTasks(final WorkflowAdapter adapter) {\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/tasks/user\")\n-    public ModelAndView getDefinedUserTasks() {\n-        return new ModelAndView().addObject(getDefinedTasks(uwfAdapter));\n+    public List<String> getDefinedUserTasks() {\n+        return getDefinedTasks(uwfAdapter);\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/tasks/role\")\n-    public ModelAndView getDefinedRoleTasks() {\n-        return new ModelAndView().addObject(getDefinedTasks(rwfAdapter));\n+    public List<String> getDefinedRoleTasks() {\n+        return getDefinedTasks(rwfAdapter);\n     }\n }"},{"sha":"2c03754b37dbb1cc2c73c5d71c4d5afbf75ba7b2","filename":"core/src/main/java/org/apache/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.data;\n-\n-import org.apache.syncope.common.to.DerivedSchemaTO;\n-import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.apache.syncope.core.util.JexlUtil;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class DerivedSchemaDataBinder {\n-\n-    @Autowired\n-    private JexlUtil jexlUtil;\n-\n-    private AbstractDerSchema populate(final AbstractDerSchema derSchema, final DerivedSchemaTO derSchemaTO) {\n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-\n-        if (derSchemaTO.getExpression() == null) {\n-            SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValuesMissing);\n-            requiredValuesMissing.addElement(\"expression\");\n-\n-            scce.addException(requiredValuesMissing);\n-        }\n-\n-        if (!jexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n-            SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidValues);\n-            invalidMandatoryCondition.addElement(derSchemaTO.getExpression());\n-\n-            scce.addException(invalidMandatoryCondition);\n-        }\n-\n-        if (scce.hasExceptions()) {\n-            throw scce;\n-        }\n-\n-        BeanUtils.copyProperties(derSchemaTO, derSchema);\n-\n-        return derSchema;\n-    }\n-\n-    public AbstractDerSchema create(final DerivedSchemaTO derSchemaTO, final AbstractDerSchema derSchema) {\n-        return populate(derSchema, derSchemaTO);\n-    }\n-\n-    public AbstractDerSchema update(final DerivedSchemaTO derSchemaTO, final AbstractDerSchema derSchema) {\n-        return populate(derSchema, derSchemaTO);\n-    }\n-\n-    public <T extends AbstractDerSchema> DerivedSchemaTO getDerivedSchemaTO(final T derSchema) {\n-        DerivedSchemaTO derSchemaTO = new DerivedSchemaTO();\n-        BeanUtils.copyProperties(derSchema, derSchemaTO);\n-\n-        return derSchemaTO;\n-    }\n-}"},{"sha":"4c36964a3e2b14c10ec4ac51fb084c70cda8f4cb","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":77,"deletions":5,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -19,13 +19,16 @@\n package org.apache.syncope.core.rest.data;\n \n import java.util.List;\n+import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n+import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.JexlUtil;\n@@ -43,7 +46,8 @@ public class SchemaDataBinder {\n     @Autowired\n     private JexlUtil jexlUtil;\n \n-    private <T extends AbstractDerSchema> void populate(final AbstractSchema schema, final SchemaTO schemaTO) {\n+    // --------------- NORMAL -----------------\n+    private <T extends AbstractSchema> void fill(final T schema, final SchemaTO schemaTO) {\n         if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n@@ -59,11 +63,13 @@ private <T extends AbstractDerSchema> void populate(final AbstractSchema schema,\n         BeanUtils.copyProperties(schemaTO, schema);\n     }\n \n-    public void create(final SchemaTO schemaTO, final AbstractSchema schema) {\n-        populate(schema, schemaTO);\n+    public <T extends AbstractSchema> void create(final SchemaTO schemaTO, final T schema) {\n+        fill(schema, schemaTO);\n     }\n \n-    public void update(final SchemaTO schemaTO, final AbstractSchema schema, final AttributableUtil attributableUtil) {\n+    public <T extends AbstractSchema> void update(final SchemaTO schemaTO, final T schema,\n+            final AttributableUtil attributableUtil) {\n+\n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         List<AbstractAttr> attrs = schemaDAO.getAttributes(schema, attributableUtil.attrClass());\n@@ -88,7 +94,7 @@ public void update(final SchemaTO schemaTO, final AbstractSchema schema, final A\n             throw scce;\n         }\n \n-        populate(schema, schemaTO);\n+        fill(schema, schemaTO);\n     }\n \n     public <T extends AbstractSchema> SchemaTO getSchemaTO(final T schema, final AttributableUtil attributableUtil) {\n@@ -97,4 +103,70 @@ public <T extends AbstractSchema> SchemaTO getSchemaTO(final T schema, final Att\n \n         return schemaTO;\n     }\n+\n+    // --------------- DERIVED -----------------\n+    private <T extends AbstractDerSchema> T populate(final T derSchema, final DerSchemaTO derSchemaTO) {\n+        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+\n+        if (derSchemaTO.getExpression() == null) {\n+            SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n+                    SyncopeClientExceptionType.RequiredValuesMissing);\n+            requiredValuesMissing.addElement(\"expression\");\n+\n+            scce.addException(requiredValuesMissing);\n+        }\n+\n+        if (!jexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n+            SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidValues);\n+            invalidMandatoryCondition.addElement(derSchemaTO.getExpression());\n+\n+            scce.addException(invalidMandatoryCondition);\n+        }\n+\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n+\n+        BeanUtils.copyProperties(derSchemaTO, derSchema);\n+\n+        return derSchema;\n+    }\n+\n+    public <T extends AbstractDerSchema> T create(final DerSchemaTO derSchemaTO, final T derSchema) {\n+        return populate(derSchema, derSchemaTO);\n+    }\n+\n+    public <T extends AbstractDerSchema> T update(final DerSchemaTO derSchemaTO, final T derSchema) {\n+        return populate(derSchema, derSchemaTO);\n+    }\n+\n+    public <T extends AbstractDerSchema> DerSchemaTO getDerSchemaTO(final T derSchema) {\n+        DerSchemaTO derSchemaTO = new DerSchemaTO();\n+        BeanUtils.copyProperties(derSchema, derSchemaTO);\n+\n+        return derSchemaTO;\n+    }\n+\n+    // --------------- VIRTUAL -----------------\n+    private <T extends AbstractVirSchema> T fill(final T virSchema, final VirSchemaTO virSchemaTO) {\n+        BeanUtils.copyProperties(virSchemaTO, virSchema);\n+\n+        return virSchema;\n+    }\n+\n+    public <T extends AbstractVirSchema> T create(final VirSchemaTO virSchemaTO, final T virSchema) {\n+        return fill(virSchema, virSchemaTO);\n+    }\n+\n+    public <T extends AbstractVirSchema> T update(final VirSchemaTO virSchemaTO, final T virSchema) {\n+        return fill(virSchema, virSchemaTO);\n+    }\n+\n+    public <T extends AbstractVirSchema> VirSchemaTO getVirSchemaTO(final T virSchema) {\n+        VirSchemaTO virtualSchemaTO = new VirSchemaTO();\n+        BeanUtils.copyProperties(virSchema, virtualSchemaTO);\n+\n+        return virtualSchemaTO;\n+    }\n }"},{"sha":"93626c9ce135d0f5b9418e37fe1faa081b247581","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.to.TaskTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n+import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.init.JobInstanceLoader;\n@@ -149,10 +150,10 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUt\n         task.setName(taskTO.getName());\n         task.setDescription(taskTO.getDescription());\n \n-        if (taskUtil == TaskUtil.SCHED) {\n+        if (taskUtil.getType() == TaskType.SCHEDULED) {\n             task.setJobClassName(taskTO.getJobClassName());\n         }\n-        if (taskUtil == TaskUtil.SYNC) {\n+        if (taskUtil.getType() == TaskType.SYNCHRONIZATION) {\n             if (!(taskTO instanceof SyncTaskTO)) {\n                 throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n                         getClass().getName());\n@@ -180,7 +181,7 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n             task.setDescription(taskTO.getDescription());\n         }\n \n-        if (taskUtil == TaskUtil.SYNC) {\n+        if (taskUtil.getType() == TaskType.SYNCHRONIZATION) {\n             if (!(task instanceof SyncTask)) {\n                 throw new ClassCastException(\"taskUtil is type SyncTask but task is not SyncTask: \" + task.getClass().\n                         getName());\n@@ -246,15 +247,15 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n             taskTO.addExecution(getTaskExecTO(execution));\n         }\n \n-        switch (taskUtil) {\n+        switch (taskUtil.getType()) {\n             case PROPAGATION:\n                 if (!(task instanceof PropagationTask)) {\n                     throw new ClassCastException(\"taskUtil is type Propagation but task is not PropagationTask: \"\n                             + task.getClass().getName());\n                 }\n                 break;\n \n-            case SCHED:\n+            case SCHEDULED:\n                 if (!(task instanceof SchedTask)) {\n                     throw new ClassCastException(\"taskUtil is type Sched but task is not SchedTask: \"\n                             + task.getClass().getName());\n@@ -264,7 +265,7 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n                 ((SchedTaskTO) taskTO).setDescription(((SchedTask) task).getDescription());\n                 break;\n \n-            case SYNC:\n+            case SYNCHRONIZATION:\n                 if (!(task instanceof SyncTask)) {\n                     throw new ClassCastException(\"taskUtil is type Sync but task is not SyncTask: \"\n                             + task.getClass().getName());"},{"sha":"ccb2457860971f10d71bb76911a18f7bcd586364","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -53,7 +53,6 @@\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.PasswordEncoder;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"5b0a9c97104ff3a7ad7be0ca7fbce484e473a066","filename":"core/src/main/java/org/apache/syncope/core/rest/data/VirtualSchemaDataBinder.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,49 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.data;\n-\n-import org.apache.syncope.common.to.VirtualSchemaTO;\n-import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class VirtualSchemaDataBinder {\n-\n-    private AbstractVirSchema populate(final AbstractVirSchema virSchema, final VirtualSchemaTO virSchemaTO) {\n-        BeanUtils.copyProperties(virSchemaTO, virSchema);\n-\n-        return virSchema;\n-    }\n-\n-    public AbstractVirSchema create(final VirtualSchemaTO virSchemaTO, final AbstractVirSchema virSchema) {\n-        return populate(virSchema, virSchemaTO);\n-    }\n-\n-    public AbstractVirSchema update(final VirtualSchemaTO virSchemaTO, final AbstractVirSchema virSchema) {\n-        return populate(virSchema, virSchemaTO);\n-    }\n-\n-    public <T extends AbstractVirSchema> VirtualSchemaTO getVirtualSchemaTO(final T virSchema) {\n-        VirtualSchemaTO virtualSchemaTO = new VirtualSchemaTO();\n-        BeanUtils.copyProperties(virSchema, virtualSchemaTO);\n-\n-        return virtualSchemaTO;\n-    }\n-}"},{"sha":"8be1f3a372546fbe6a9e191ffa18758788c95b6d","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.types.EntityViolationType;\r\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n-import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\r\n import org.apache.syncope.common.validation.SyncopeClientException;\r\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n@@ -54,8 +53,6 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n \r\n     private static final Logger LOG = LoggerFactory.getLogger(RestServiceExceptionMapper.class);\r\n \r\n-    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n-\r\n     @Override\r\n     public Response toResponse(final Exception ex) {\r\n         LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\r\n@@ -118,7 +115,8 @@ public Exception fromResponse(final Response r) {\n     private Response getCompositeExceptionResponse(final SyncopeClientCompositeErrorException ex) {\r\n         ResponseBuilder responseBuilder = Response.status(ex.getStatusCode().value());\r\n         for (SyncopeClientException sce : ex.getExceptions()) {\r\n-            responseBuilder.header(EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n+            responseBuilder.header(\r\n+                    SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n \r\n             for (String attributeName : sce.getElements()) {\r\n                 responseBuilder.header(sce.getType().getElementHeaderName(), attributeName);\r\n@@ -172,9 +170,10 @@ private Response processBadRequestExceptions(final Exception ex) {\n             SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\"Invalid\"\r\n                     + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n \r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n+            responseBuilder.header(\r\n+                    SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n \r\n-            for (@SuppressWarnings(\"rawtypes\") Map.Entry<Class, Set<EntityViolationType>> violation\r\n+            for (Map.Entry<Class<?>, Set<EntityViolationType>> violation\r\n                     : ((InvalidEntityException) ex).getViolations().entrySet()) {\r\n \r\n                 for (EntityViolationType violationType : violation.getValue()) {\r\n@@ -197,7 +196,8 @@ private Response processBadRequestExceptions(final Exception ex) {\n     private Response buildResponse(final ResponseBuilder responseBuilder, final SyncopeClientExceptionType hType,\r\n             final String msg) {\r\n \r\n-        return responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, hType.getHeaderValue()).\r\n+        return responseBuilder.header(\r\n+                SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, hType.getHeaderValue()).\r\n                 header(hType.getElementHeaderName(), msg).\r\n                 build();\r\n     }\r"},{"sha":"99308942ec0e8c5573272fc496adfc161257684c","filename":"core/src/main/java/org/apache/syncope/core/services/AbstractServiceImpl.java","status":"renamed","additions":31,"deletions":26,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -1,26 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.client.services.proxy;\r\n-\r\n-import org.springframework.web.client.RestTemplate;\r\n-\r\n-public interface SpringRestTemplate {\r\n-\r\n-    RestTemplate getRestTemplate();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.services;\n+\n+import javax.ws.rs.core.UriInfo;\n+\n+abstract class AbstractServiceImpl implements ContextAware {\n+\n+    protected UriInfo uriInfo;\n+\n+    @Override\n+    public void setUriInfo(final UriInfo uriInfo) {\n+        this.uriInfo = uriInfo;\n+    }\n+}","previous_filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringRestTemplate.java"},{"sha":"13dca5b85dc9d5d35bb9506b4de3e016333047e5","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":11,"deletions":21,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -27,7 +27,6 @@\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.StreamingOutput;\r\n-import javax.ws.rs.core.UriInfo;\r\n \r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ConfigurationService;\r\n@@ -41,29 +40,27 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class ConfigurationServiceImpl implements ConfigurationService, ContextAware {\r\n+public class ConfigurationServiceImpl extends AbstractServiceImpl implements ConfigurationService, ContextAware {\r\n \r\n     @Autowired\r\n-    private ConfigurationController configurationController;\r\n-\r\n-    private UriInfo uriInfo;\r\n+    private ConfigurationController controller;\r\n \r\n     @Override\r\n     public Response create(final ConfigurationTO configurationTO) {\r\n-        ConfigurationTO created = configurationController.create(new DummyHTTPServletResponse(), configurationTO);\r\n+        ConfigurationTO created = controller.create(configurationTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\r\n         return Response.created(location).\r\n                 header(SyncopeConstants.REST_HEADER_ID, created.getKey()).\r\n                 build();\r\n     }\r\n \r\n     @Override\r\n-    public Response dbExport() {\r\n+    public Response export() {\r\n         StreamingOutput sout = new StreamingOutput() {\r\n \r\n             @Override\r\n             public void write(final OutputStream os) throws IOException {\r\n-                configurationController.dbExportInternal(os);\r\n+                controller.export(os);\r\n             }\r\n         };\r\n         return Response.ok(sout)\r\n@@ -75,41 +72,34 @@ public void write(final OutputStream os) throws IOException {\n \r\n     @Override\r\n     public void delete(final String key) {\r\n-        configurationController.delete(key);\r\n+        controller.delete(key);\r\n     }\r\n \r\n     @Override\r\n     @SuppressWarnings(\"unchecked\")\r\n     public Set<MailTemplateTO> getMailTemplates() {\r\n-        return CollectionWrapper.wrapMailTemplates(\r\n-                (Set<String>) configurationController.getMailTemplates().getModel().values().iterator().next());\r\n+        return CollectionWrapper.wrapMailTemplates(controller.getMailTemplates());\r\n     }\r\n \r\n     @Override\r\n     @SuppressWarnings(\"unchecked\")\r\n     public Set<ValidatorTO> getValidators() {\r\n-        return CollectionWrapper.wrapValidators(\r\n-                (Set<String>) configurationController.getValidators().getModel().values().iterator().next());\r\n+        return CollectionWrapper.wrapValidators(controller.getValidators());\r\n     }\r\n \r\n     @Override\r\n     public List<ConfigurationTO> list() {\r\n-        return configurationController.list(null);\r\n+        return controller.list();\r\n     }\r\n \r\n     @Override\r\n     public ConfigurationTO read(final String key) {\r\n-        return configurationController.read(null, key);\r\n+        return controller.read(key);\r\n \r\n     }\r\n \r\n     @Override\r\n     public void update(final String key, final ConfigurationTO configurationTO) {\r\n-        configurationController.update(configurationTO);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-        this.uriInfo = ui;\r\n+        controller.update(configurationTO);\r\n     }\r\n }\r"},{"sha":"8138e5ae047c362c30fccf9fb66b9d0b8e6450f8","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":16,"deletions":24,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n import javax.ws.rs.core.Response;\r\n-import javax.ws.rs.core.UriInfo;\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ConnectorService;\r\n import org.apache.syncope.common.to.BulkAction;\r\n@@ -32,45 +31,43 @@\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.types.ConnConfProperty;\r\n-import org.apache.syncope.core.rest.controller.ConnInstanceController;\r\n+import org.apache.syncope.core.rest.controller.ConnectorController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class ConnectorServiceImpl implements ConnectorService, ContextAware {\r\n+public class ConnectorServiceImpl extends AbstractServiceImpl implements ConnectorService, ContextAware {\r\n \r\n     @Autowired\r\n-    private ConnInstanceController connInstanceController;\r\n-\r\n-    private UriInfo uriInfo;\r\n+    private ConnectorController controller;\r\n \r\n     @Override\r\n     public Response create(final ConnInstanceTO connInstanceTO) {\r\n-        ConnInstanceTO connInstance = connInstanceController.create(new DummyHTTPServletResponse(), connInstanceTO);\r\n+        ConnInstanceTO connInstance = controller.create(connInstanceTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(connInstance.getId() + \"\").build();\r\n         return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, connInstance.getId()).build();\r\n     }\r\n \r\n     @Override\r\n     public void delete(final Long connInstanceId) {\r\n-        connInstanceController.delete(connInstanceId);\r\n+        controller.delete(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n     public List<ConnBundleTO> getBundles(final String lang) {\r\n-        return connInstanceController.getBundles(lang);\r\n+        return controller.getBundles(lang);\r\n     }\r\n \r\n     @Override\r\n     public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\r\n-        return connInstanceController.getConfigurationProperties(connInstanceId);\r\n+        return controller.getConfigurationProperties(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n     public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstanceTO connInstanceTO,\r\n             final boolean includeSpecial) {\r\n \r\n-        List<String> schemaNames = connInstanceController.getSchemaNames(connInstanceTO, includeSpecial);\r\n+        List<String> schemaNames = controller.getSchemaNames(connInstanceTO, includeSpecial);\r\n         List<SchemaTO> result = new ArrayList<SchemaTO>(schemaNames.size());\r\n         for (String name : schemaNames) {\r\n             SchemaTO schemaTO = new SchemaTO();\r\n@@ -84,7 +81,7 @@ public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstan\n     public List<ConnIdObjectClassTO> getSupportedObjectClasses(final Long connInstanceId,\r\n             final ConnInstanceTO connInstanceTO) {\r\n \r\n-        List<String> objectClasses = connInstanceController.getSupportedObjectClasses(connInstanceTO);\r\n+        List<String> objectClasses = controller.getSupportedObjectClasses(connInstanceTO);\r\n         List<ConnIdObjectClassTO> result = new ArrayList<ConnIdObjectClassTO>(objectClasses.size());\r\n         for (String objectClass : objectClasses) {\r\n             result.add(new ConnIdObjectClassTO(objectClass));\r\n@@ -94,41 +91,36 @@ public List<ConnIdObjectClassTO> getSupportedObjectClasses(final Long connInstan\n \r\n     @Override\r\n     public List<ConnInstanceTO> list(final String lang) {\r\n-        return connInstanceController.list(lang);\r\n+        return controller.list(lang);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO read(final Long connInstanceId) {\r\n-        return connInstanceController.read(connInstanceId);\r\n+        return controller.read(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO readByResource(final String resourceName) {\r\n-        return connInstanceController.readByResource(resourceName);\r\n+        return controller.readByResource(resourceName);\r\n     }\r\n \r\n     @Override\r\n     public void update(final Long connInstanceId, final ConnInstanceTO connInstanceTO) {\r\n-        connInstanceController.update(connInstanceTO);\r\n+        controller.update(connInstanceTO);\r\n     }\r\n \r\n     @Override\r\n     public boolean check(final ConnInstanceTO connInstanceTO) {\r\n-        return (Boolean) connInstanceController.check(connInstanceTO).getModel().values().iterator().next();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-        this.uriInfo = ui;\r\n+        return controller.check(connInstanceTO);\r\n     }\r\n \r\n     @Override\r\n     public void reload() {\r\n-        connInstanceController.reload();\r\n+        controller.reload();\r\n     }\r\n \r\n     @Override\r\n     public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n-        return connInstanceController.bulkAction(bulkAction);\r\n+        return controller.bulkAction(bulkAction);\r\n     }\r\n }\r"},{"sha":"82bf2b6aac93704f89152c184da23f5f82497a4c","filename":"core/src/main/java/org/apache/syncope/core/services/ContextAware.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,11 +21,8 @@\n import javax.ws.rs.core.Context;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n-/**\r\n- * While @Context can also be set on fields this variant is needed to make it compatible with spring proxies\r\n- */\r\n public interface ContextAware {\r\n \r\n     @Context\r\n-    void setUriInfo(UriInfo ui);\r\n+    void setUriInfo(UriInfo uriInfo);\r\n }\r"},{"sha":"db68374ce69c59ac3fd4fde76555d1d10a6c4f21","filename":"core/src/main/java/org/apache/syncope/core/services/DummyHTTPServletResponse.java","status":"removed","additions":0,"deletions":195,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,195 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.services;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.PrintWriter;\r\n-import java.util.Locale;\r\n-import javax.servlet.ServletOutputStream;\r\n-import javax.servlet.http.Cookie;\r\n-import javax.servlet.http.HttpServletResponse;\r\n-\r\n-/**\r\n- * Dummy (empty) HttpServletResponse.\r\n- */\r\n-public class DummyHTTPServletResponse implements HttpServletResponse {\r\n-\r\n-    @Override\r\n-    public void flushBuffer() throws IOException {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public int getBufferSize() {\r\n-        return 0;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String getCharacterEncoding() {\r\n-        return null;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String getContentType() {\r\n-        return null;\r\n-    }\r\n-\r\n-    @Override\r\n-    public Locale getLocale() {\r\n-        return null;\r\n-    }\r\n-\r\n-    @Override\r\n-    public ServletOutputStream getOutputStream() throws IOException {\r\n-        return null;\r\n-    }\r\n-\r\n-    @Override\r\n-    public PrintWriter getWriter() throws IOException {\r\n-        return null;\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean isCommitted() {\r\n-        return false;\r\n-    }\r\n-\r\n-    @Override\r\n-    public void reset() {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void resetBuffer() {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setBufferSize(final int arg0) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setCharacterEncoding(final String arg0) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setContentLength(final int arg0) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setContentType(final String arg0) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setLocale(final Locale arg0) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void addCookie(final Cookie arg0) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void addDateHeader(final String arg0, final long arg1) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void addHeader(final String arg0, final String arg1) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void addIntHeader(final String arg0, final int arg1) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean containsHeader(final String arg0) {\r\n-        return false;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String encodeRedirectURL(final String arg0) {\r\n-        return arg0;\r\n-    }\r\n-\r\n-    @Override\r\n-    @Deprecated\r\n-    public String encodeRedirectUrl(final String arg0) {\r\n-        return arg0;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String encodeURL(final String arg0) {\r\n-        return arg0;\r\n-    }\r\n-\r\n-    @Override\r\n-    @Deprecated\r\n-    public String encodeUrl(final String arg0) {\r\n-        return arg0;\r\n-    }\r\n-\r\n-    @Override\r\n-    public void sendError(final int arg0) throws IOException {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void sendError(final int arg0, final String arg1) throws IOException {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void sendRedirect(final String arg0) throws IOException {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setDateHeader(final String arg0, final long arg1) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setHeader(final String arg0, final String arg1) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setIntHeader(final String arg0, final int arg1) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setStatus(final int arg0) {\r\n-        // No action.\r\n-    }\r\n-\r\n-    @Override\r\n-    @Deprecated\r\n-    public void setStatus(final int arg0, final String arg1) {\r\n-        // No action.\r\n-    }\r\n-}\r"},{"sha":"48795e39938ac4aa4510982ff533e60f375fe03a","filename":"core/src/main/java/org/apache/syncope/core/services/EntitlementServiceImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -24,25 +24,25 @@\n import org.apache.syncope.common.services.EntitlementService;\r\n import org.apache.syncope.common.to.EntitlementTO;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.apache.syncope.core.rest.controller.AuthenticationController;\r\n+import org.apache.syncope.core.rest.controller.EntitlementController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class EntitlementServiceImpl implements EntitlementService {\r\n+public class EntitlementServiceImpl extends AbstractServiceImpl implements EntitlementService, ContextAware {\r\n \r\n     @Autowired\r\n-    private AuthenticationController authenticationController;\r\n+    private EntitlementController controller;\r\n \r\n     @Override\r\n     public Set<EntitlementTO> getAllEntitlements() {\r\n-        Set<String> entitlements = new HashSet<String>(authenticationController.listEntitlements());\r\n+        Set<String> entitlements = new HashSet<String>(controller.listEntitlements());\r\n         return CollectionWrapper.wrap(entitlements);\r\n     }\r\n \r\n     @Override\r\n     public Set<EntitlementTO> getMyEntitlements() {\r\n-        Set<String> entitlements = authenticationController.getEntitlements();\r\n+        Set<String> entitlements = controller.getEntitlements();\r\n         return CollectionWrapper.wrap(entitlements);\r\n     }\r\n }\r"},{"sha":"bdc9ffe693a4a8f70add527b7496f19c858f43bc","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -34,21 +34,21 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class LoggerServiceImpl implements LoggerService {\r\n+public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerService, ContextAware {\r\n \r\n     @Autowired\r\n-    private LoggerController loggerController;\r\n+    private LoggerController controller;\r\n \r\n     @Override\r\n     public void delete(final LoggerType type, final String name) {\r\n         switch (type) {\r\n             case NORMAL:\r\n-                loggerController.deleteLog(name);\r\n+                controller.deleteLog(name);\r\n                 break;\r\n \r\n             case AUDIT:\r\n                 try {\r\n-                    loggerController.disableAudit(AuditLoggerName.fromLoggerName(name));\r\n+                    controller.disableAudit(AuditLoggerName.fromLoggerName(name));\r\n                 } catch (IllegalArgumentException e) {\r\n                     throw new BadRequestException(e);\r\n                 } catch (ParseException e) {\r\n@@ -66,10 +66,10 @@ public void delete(final LoggerType type, final String name) {\n     public List<LoggerTO> list(final LoggerType type) {\r\n         switch (type) {\r\n             case NORMAL:\r\n-                return loggerController.listLogs();\r\n+                return controller.listLogs();\r\n \r\n             case AUDIT:\r\n-                List<AuditLoggerName> auditLogger = loggerController.listAudits();\r\n+                List<AuditLoggerName> auditLogger = controller.listAudits();\r\n                 return CollectionWrapper.unwrapLogger(auditLogger);\r\n \r\n             default:\r\n@@ -92,12 +92,12 @@ public LoggerTO read(final LoggerType type, final String name) {\n     public void update(final LoggerType type, final String name, final LoggerTO logger) {\r\n         switch (type) {\r\n             case NORMAL:\r\n-                loggerController.setLogLevel(name, logger.getLevel().getLevel());\r\n+                controller.setLogLevel(name, logger.getLevel().getLevel());\r\n                 break;\r\n \r\n             case AUDIT:\r\n                 try {\r\n-                    loggerController.enableAudit(AuditLoggerName.fromLoggerName(name));\r\n+                    controller.enableAudit(AuditLoggerName.fromLoggerName(name));\r\n                 } catch (IllegalArgumentException e) {\r\n                     throw new BadRequestException(e);\r\n                 } catch (ParseException e) {\r\n@@ -109,5 +109,4 @@ public void update(final LoggerType type, final String name, final LoggerTO logg\n                 throw new BadRequestException();\r\n         }\r\n     }\r\n-\r\n }\r"},{"sha":"5639015187db25240480bec3247b368f5bcee7b8","filename":"core/src/main/java/org/apache/syncope/core/services/NotificationServiceImpl.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.UriInfo;\n \n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.NotificationService;\n@@ -32,16 +31,14 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class NotificationServiceImpl implements NotificationService, ContextAware {\n+public class NotificationServiceImpl extends AbstractServiceImpl implements NotificationService, ContextAware {\n \n     @Autowired\n-    private NotificationController notificationController;\n-\n-    private UriInfo uriInfo;\n+    private NotificationController controller;\n \n     @Override\n     public Response create(final NotificationTO notificationTO) {\n-        NotificationTO createdNotificationTO = notificationController.createInternal(notificationTO);\n+        NotificationTO createdNotificationTO = controller.create(notificationTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdNotificationTO.getId()).build();\n         return Response.created(location)\n                 .header(SyncopeConstants.REST_HEADER_ID, createdNotificationTO.getId())\n@@ -50,26 +47,21 @@ public Response create(final NotificationTO notificationTO) {\n \n     @Override\n     public NotificationTO read(final Long notificationId) {\n-        return notificationController.read(notificationId);\n+        return controller.read(notificationId);\n     }\n \n     @Override\n     public List<NotificationTO> list() {\n-        return notificationController.list();\n+        return controller.list();\n     }\n \n     @Override\n     public void update(final Long notificationId, final NotificationTO notificationTO) {\n-        notificationController.update(notificationTO);\n+        controller.update(notificationTO);\n     }\n \n     @Override\n     public void delete(final Long notificationId) {\n-        notificationController.delete(notificationId);\n-    }\n-\n-    @Override\n-    public void setUriInfo(final UriInfo ui) {\n-        this.uriInfo = ui;\n+        controller.delete(notificationId);\n     }\n }"},{"sha":"08c1456fa6f7c19f94e49eecf3f28d1e7a452042","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":5,"deletions":16,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,7 +23,6 @@\n import java.util.Set;\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n-import javax.ws.rs.core.UriInfo;\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.PolicyService;\r\n import org.apache.syncope.common.to.AccountPolicyTO;\r\n@@ -38,16 +37,14 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class PolicyServiceImpl implements PolicyService, ContextAware {\r\n+public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyService, ContextAware {\r\n \r\n     @Autowired\r\n     private PolicyController policyController;\r\n \r\n-    private UriInfo uriInfo;\r\n-\r\n     @Override\r\n     public <T extends PolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n-        PolicyTO policy = policyController.createInternal(policyTO);\r\n+        PolicyTO policy = policyController.create(policyTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(policy.getId() + \"\").build();\r\n         return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, policy.getId()).build();\r\n     }\r\n@@ -58,9 +55,8 @@ public void delete(final PolicyType type, final Long policyId) {\n     }\r\n \r\n     @Override\r\n-    @SuppressWarnings(\"unchecked\")\r\n     public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n-        return (List<T>) policyController.list(type.toString());\r\n+        return policyController.list(type);\r\n     }\r\n \r\n     @Override\r\n@@ -119,11 +115,6 @@ public <T extends PolicyTO> void update(final PolicyType type, final Long policy\n         }\r\n     }\r\n \r\n-    @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-        this.uriInfo = ui;\r\n-    }\r\n-\r\n     @Override\r\n     public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(final PolicyType type) {\r\n         Set<CorrelationRuleClassTO> result = null;\r\n@@ -132,10 +123,8 @@ public Set<CorrelationRuleClassTO> getSyncCorrelationRuleClasses(final PolicyTyp\n             case SYNC:\r\n             case GLOBAL_SYNC:\r\n \r\n-                @SuppressWarnings(\"unchecked\")\r\n-                final Set<String> classes = (Set<String>) policyController.getSyncCorrelationRuleClasses().getModel().\r\n-                        values().iterator().next();\r\n-                result = CollectionWrapper.wrapSyncCorrelationRuleClasses(classes);\r\n+                result = CollectionWrapper.wrapSyncCorrelationRuleClasses(\r\n+                        policyController.getSyncCorrelationRuleClasses());\r\n                 break;\r\n \r\n             default:\r"},{"sha":"1c492d03cd2ab59b09812b1693b3e561550ec0c3","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -24,7 +24,6 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n-import javax.ws.rs.core.UriInfo;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.services.ReportletConfClasses;\n@@ -38,19 +37,17 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ReportServiceImpl implements ReportService, ContextAware {\n+public class ReportServiceImpl extends AbstractServiceImpl implements ReportService, ContextAware {\n \n     @Autowired\n-    private ReportController reportController;\n+    private ReportController controller;\n \n     @Autowired\n     private ReportDAO reportDAO;\n \n-    private UriInfo uriInfo;\n-\n     @Override\n     public Response create(final ReportTO reportTO) {\n-        ReportTO createdReportTO = reportController.createInternal(reportTO);\n+        ReportTO createdReportTO = controller.create(reportTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdReportTO.getId()).build();\n         return Response.created(location)\n                 .header(SyncopeConstants.REST_HEADER_ID, createdReportTO.getId())\n@@ -59,7 +56,7 @@ public Response create(final ReportTO reportTO) {\n \n     @Override\n     public void update(final Long reportId, final ReportTO reportTO) {\n-        reportController.update(reportTO);\n+        controller.update(reportTO);\n     }\n \n     @Override\n@@ -69,38 +66,38 @@ public int count() {\n \n     @Override\n     public List<ReportTO> list() {\n-        return reportController.list();\n+        return controller.list();\n     }\n \n     @Override\n     public List<ReportTO> list(final int page, final int size) {\n-        return reportController.list(page, size);\n+        return controller.list(page, size);\n     }\n \n     @Override\n     public ReportletConfClasses getReportletConfClasses() {\n-        return new ReportletConfClasses(reportController.getReportletConfClassesInternal());\n+        return new ReportletConfClasses(controller.getReportletConfClasses());\n     }\n \n     @Override\n     public ReportTO read(final Long reportId) {\n-        return reportController.read(reportId);\n+        return controller.read(reportId);\n     }\n \n     @Override\n     public ReportExecTO readExecution(final Long executionId) {\n-        return reportController.readExecution(executionId);\n+        return controller.readExecution(executionId);\n     }\n \n     @Override\n     public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n         final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n-        final ReportExec reportExec = reportController.getAndCheckReportExecInternal(executionId);\n+        final ReportExec reportExec = controller.getAndCheckReportExec(executionId);\n         StreamingOutput sout = new StreamingOutput() {\n \n             @Override\n             public void write(final OutputStream os) throws IOException {\n-                reportController.exportExecutionResultInternal(os, reportExec, format);\n+                controller.exportExecutionResult(os, reportExec, format);\n             }\n         };\n         String disposition = \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().\n@@ -112,21 +109,16 @@ public void write(final OutputStream os) throws IOException {\n \n     @Override\n     public ReportExecTO execute(final Long reportId) {\n-        return reportController.execute(reportId);\n+        return controller.execute(reportId);\n     }\n \n     @Override\n     public void delete(final Long reportId) {\n-        reportController.delete(reportId);\n+        controller.delete(reportId);\n     }\n \n     @Override\n     public void deleteExecution(final Long executionId) {\n-        reportController.deleteExecution(executionId);\n-    }\n-\n-    @Override\n-    public void setUriInfo(final UriInfo uriInfo) {\n-        this.uriInfo = uriInfo;\n+        controller.deleteExecution(executionId);\n     }\n }"},{"sha":"337326ce1f067aab6404c244b04f38ebc3e50101","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"modified","additions":12,"deletions":23,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,7 +23,6 @@\n import java.util.Set;\r\n \r\n import javax.ws.rs.core.Response;\r\n-import javax.ws.rs.core.UriInfo;\r\n \r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ResourceService;\r\n@@ -39,16 +38,14 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class ResourceServiceImpl implements ResourceService, ContextAware {\r\n+public class ResourceServiceImpl extends AbstractServiceImpl implements ResourceService, ContextAware {\r\n \r\n     @Autowired\r\n-    private ResourceController resourceController;\r\n-\r\n-    private UriInfo uriInfo;\r\n+    private ResourceController controller;\r\n \r\n     @Override\r\n     public Response create(final ResourceTO resourceTO) {\r\n-        ResourceTO resource = resourceController.create(new DummyHTTPServletResponse(), resourceTO);\r\n+        ResourceTO resource = controller.create(resourceTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(resource.getName()).build();\r\n         return Response.created(location)\r\n                 .header(SyncopeConstants.REST_HEADER_ID, resource.getName())\r\n@@ -57,54 +54,46 @@ public Response create(final ResourceTO resourceTO) {\n \r\n     @Override\r\n     public void update(final String resourceName, final ResourceTO resourceTO) {\r\n-        resourceController.update(resourceTO);\r\n+        controller.update(resourceTO);\r\n     }\r\n \r\n     @Override\r\n     public void delete(final String resourceName) {\r\n-        resourceController.delete(resourceName);\r\n+        controller.delete(resourceName);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO read(final String resourceName) {\r\n-        return resourceController.read(resourceName);\r\n+        return controller.read(resourceName);\r\n     }\r\n \r\n     @Override\r\n     public Set<PropagationActionClassTO> getPropagationActionsClasses() {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        Set<String> classes = (Set<String>) resourceController.getPropagationActionsClasses().getModel().values()\r\n-                .iterator().next();\r\n-        return CollectionWrapper.wrapPropagationActionClasses(classes);\r\n+        return CollectionWrapper.wrapPropagationActionClasses(controller.getPropagationActionsClasses());\r\n     }\r\n \r\n     @Override\r\n     public List<ResourceTO> list() {\r\n-        return resourceController.list(null);\r\n+        return controller.list(null);\r\n     }\r\n \r\n     @Override\r\n     public List<ResourceTO> list(final Long connInstanceId) {\r\n-        return resourceController.list(connInstanceId);\r\n+        return controller.list(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n     public ConnObjectTO getConnectorObject(final String resourceName, final AttributableType type, final Long id) {\r\n-        return resourceController.getConnectorObject(resourceName, type, id);\r\n+        return controller.getConnectorObject(resourceName, type, id);\r\n     }\r\n \r\n     @Override\r\n     public boolean check(final ResourceTO resourceTO) {\r\n-        return (Boolean) resourceController.check(resourceTO).getModel().values().iterator().next();\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-        this.uriInfo = ui;\r\n+        return controller.check(resourceTO);\r\n     }\r\n \r\n     @Override\r\n     public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n-        return resourceController.bulkAction(bulkAction);\r\n+        return controller.bulkAction(bulkAction);\r\n     }\r\n }\r"},{"sha":"f1edbca74969d91a03338a91dfb840d198f78a81","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":17,"deletions":24,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,7 +23,6 @@\n \r\n import javax.ws.rs.ServiceUnavailableException;\r\n import javax.ws.rs.core.Response;\r\n-import javax.ws.rs.core.UriInfo;\r\n \r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.mod.RoleMod;\r\n@@ -36,26 +35,24 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class RoleServiceImpl implements RoleService, ContextAware {\r\n+public class RoleServiceImpl extends AbstractServiceImpl implements RoleService, ContextAware {\r\n \r\n     @Autowired\r\n-    private RoleController roleController;\r\n-\r\n-    private UriInfo uriInfo;\r\n+    private RoleController controller;\r\n \r\n     @Override\r\n     public List<RoleTO> children(final Long roleId) {\r\n-        return roleController.children(roleId);\r\n+        return controller.children(roleId);\r\n     }\r\n \r\n     @Override\r\n     public int count() {\r\n-        return roleController.list().size();\r\n+        return controller.list().size();\r\n     }\r\n \r\n     @Override\r\n     public Response create(final RoleTO roleTO) {\r\n-        RoleTO created = roleController.create(new DummyHTTPServletResponse(), roleTO);\r\n+        RoleTO created = controller.create(roleTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\r\n         return Response.created(location)\r\n                 .header(SyncopeConstants.REST_HEADER_ID, created.getId())\r\n@@ -65,12 +62,12 @@ public Response create(final RoleTO roleTO) {\n \r\n     @Override\r\n     public RoleTO delete(final Long roleId) {\r\n-        return roleController.delete(roleId);\r\n+        return controller.delete(roleId);\r\n     }\r\n \r\n     @Override\r\n     public List<RoleTO> list() {\r\n-        return roleController.list();\r\n+        return controller.list();\r\n     }\r\n \r\n     @Override\r\n@@ -80,42 +77,38 @@ public List<RoleTO> list(final int page, final int size) {\n \r\n     @Override\r\n     public RoleTO parent(final Long roleId) {\r\n-        return roleController.parent(roleId);\r\n+        return controller.parent(roleId);\r\n     }\r\n \r\n     @Override\r\n     public RoleTO read(final Long roleId) {\r\n-        return roleController.read(roleId);\r\n+        return controller.read(roleId);\r\n     }\r\n \r\n     @Override\r\n     public List<RoleTO> search(final NodeCond searchCondition) throws InvalidSearchConditionException {\r\n-        return roleController.search(searchCondition);\r\n+        return controller.search(searchCondition);\r\n     }\r\n \r\n     @Override\r\n-    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size) throws InvalidSearchConditionException {\r\n-        return roleController.search(searchCondition, page, size);\r\n+    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size)\r\n+            throws InvalidSearchConditionException {\r\n+\r\n+        return controller.search(searchCondition, page, size);\r\n     }\r\n \r\n     @Override\r\n     public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\r\n-        return (Integer) roleController.searchCount(searchCondition).getModel().values().iterator().next();\r\n+        return controller.searchCount(searchCondition);\r\n     }\r\n \r\n     @Override\r\n     public RoleTO selfRead(final Long roleId) {\r\n-        return roleController.selfRead(roleId);\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-        this.uriInfo = ui;\r\n+        return controller.selfRead(roleId);\r\n     }\r\n \r\n     @Override\r\n     public RoleTO update(final Long roleId, final RoleMod roleMod) {\r\n-        return roleController.update(roleMod);\r\n+        return controller.update(roleMod);\r\n     }\r\n-\r\n }\r"},{"sha":"1f24c4744e3b6d10d2f21cda31e8239548904d54","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":12,"deletions":103,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,147 +21,56 @@\n import java.net.URI;\r\n import java.util.List;\r\n \r\n-import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n-import javax.ws.rs.core.UriInfo;\r\n \r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.SchemaService;\r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n-import org.apache.syncope.common.to.DerivedSchemaTO;\r\n-import org.apache.syncope.common.to.SchemaTO;\r\n-import org.apache.syncope.common.to.VirtualSchemaTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n import org.apache.syncope.common.types.SchemaType;\r\n-import org.apache.syncope.core.rest.controller.DerivedSchemaController;\r\n import org.apache.syncope.core.rest.controller.SchemaController;\r\n-import org.apache.syncope.core.rest.controller.VirtualSchemaController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class SchemaServiceImpl implements SchemaService, ContextAware {\r\n+public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaService, ContextAware {\r\n \r\n     @Autowired\r\n-    private SchemaController normalSchemaController;\r\n-\r\n-    @Autowired\r\n-    private DerivedSchemaController derivedSchemaController;\r\n-\r\n-    @Autowired\r\n-    private VirtualSchemaController virtualSchemaController;\r\n-\r\n-    private UriInfo uriInfo;\r\n+    private SchemaController controller;\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> Response create(final AttributableType kind, final SchemaType type,\r\n+    public <T extends AbstractSchemaTO> Response create(final AttributableType attrType, final SchemaType schemaType,\r\n             final T schemaTO) {\r\n-        AbstractSchemaTO response;\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                response = normalSchemaController.create(new DummyHTTPServletResponse(), (SchemaTO) schemaTO,\r\n-                        kind.toString());\r\n-                break;\r\n \r\n-            case DERIVED:\r\n-                response = derivedSchemaController.create(new DummyHTTPServletResponse(), (DerivedSchemaTO) schemaTO,\r\n-                        kind.toString());\r\n-                break;\r\n+        T response = controller.create(attrType, schemaType, schemaTO);\r\n \r\n-            case VIRTUAL:\r\n-                response = virtualSchemaController.create(new DummyHTTPServletResponse(), (VirtualSchemaTO) schemaTO,\r\n-                        kind.toString());\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(response.getName()).build();\r\n         return Response.created(location)\r\n                 .header(SyncopeConstants.REST_HEADER_ID, response.getName())\r\n                 .build();\r\n     }\r\n \r\n     @Override\r\n-    public void delete(final AttributableType kind, final SchemaType type, final String schemaName) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                normalSchemaController.delete(kind.toString(), schemaName);\r\n-                break;\r\n-\r\n-            case DERIVED:\r\n-                derivedSchemaController.delete(kind.toString(), schemaName);\r\n-                break;\r\n-\r\n-            case VIRTUAL:\r\n-                virtualSchemaController.delete(kind.toString(), schemaName);\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n+    public void delete(final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\r\n+        controller.delete(attrType, schemaType, schemaName);\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends AbstractSchemaTO> List<T> list(final AttributableType kind, final SchemaType type) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                return (List<T>) normalSchemaController.list(kind.toString());\r\n-\r\n-            case DERIVED:\r\n-                return (List<T>) derivedSchemaController.list(kind.toString());\r\n-\r\n-            case VIRTUAL:\r\n-                return (List<T>) virtualSchemaController.list(kind.toString());\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n+    public <T extends AbstractSchemaTO> List<T> list(final AttributableType attrType, final SchemaType schemaType) {\r\n+        return controller.list(attrType, schemaType);\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T read(final AttributableType kind, final SchemaType type,\r\n+    public <T extends AbstractSchemaTO> T read(final AttributableType attrType, final SchemaType schemaType,\r\n             final String schemaName) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                return (T) normalSchemaController.read(kind.toString(), schemaName);\r\n-\r\n-            case DERIVED:\r\n-                return (T) derivedSchemaController.read(kind.toString(), schemaName);\r\n \r\n-            case VIRTUAL:\r\n-                return (T) virtualSchemaController.read(kind.toString(), schemaName);\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n+        return controller.read(attrType, schemaType, schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n+    public <T extends AbstractSchemaTO> void update(final AttributableType attrType, final SchemaType schemaType,\r\n             final String schemaName, final T schemaTO) {\r\n-        switch (type) {\r\n-            case NORMAL:\r\n-                normalSchemaController.update((SchemaTO) schemaTO, kind.toString());\r\n-                break;\r\n-\r\n-            case DERIVED:\r\n-                derivedSchemaController.update((DerivedSchemaTO) schemaTO, kind.toString());\r\n-                break;\r\n \r\n-            case VIRTUAL:\r\n-                virtualSchemaController.update((VirtualSchemaTO) schemaTO, kind.toString());\r\n-                break;\r\n-\r\n-            default:\r\n-                throw new BadRequestException();\r\n-        }\r\n-    }\r\n-\r\n-    @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-        this.uriInfo = ui;\r\n+        controller.update(attrType, schemaType, schemaName, schemaTO);\r\n     }\r\n }\r"},{"sha":"fb27f2257a76365f7616a7025073eccc5f579b8c","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":21,"deletions":48,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,14 +23,11 @@\n import java.util.Set;\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n-import javax.ws.rs.core.UriInfo;\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.TaskService;\r\n import org.apache.syncope.common.to.BulkAction;\r\n import org.apache.syncope.common.to.BulkActionRes;\r\n import org.apache.syncope.common.to.JobClassTO;\r\n-import org.apache.syncope.common.to.NotificationTaskTO;\r\n-import org.apache.syncope.common.to.PropagationTaskTO;\r\n import org.apache.syncope.common.to.ReportExecTO;\r\n import org.apache.syncope.common.to.SchedTaskTO;\r\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n@@ -41,124 +38,100 @@\n import org.apache.syncope.common.types.TaskType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.apache.syncope.core.rest.controller.TaskController;\r\n+import org.apache.syncope.core.util.TaskUtil;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class TaskServiceImpl implements TaskService, ContextAware {\r\n+public class TaskServiceImpl extends AbstractServiceImpl implements TaskService, ContextAware {\r\n \r\n     @Autowired\r\n-    private TaskController taskController;\r\n-\r\n-    private UriInfo uriInfo;\r\n+    private TaskController controller;\r\n \r\n     @Override\r\n     public int count(final TaskType taskType) {\r\n-        return taskController.countInternal(taskType.toString());\r\n+        return controller.count(taskType);\r\n     }\r\n \r\n     @Override\r\n     public Response create(final TaskTO taskTO) {\r\n         TaskTO createdTask;\r\n         if (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {\r\n-            createdTask = taskController.createSchedTaskInternal((SchedTaskTO) taskTO);\r\n+            createdTask = controller.createSchedTask((SchedTaskTO) taskTO);\r\n         } else {\r\n             throw new BadRequestException();\r\n         }\r\n-        TaskType taskType = getTaskType(taskTO.getClass());\r\n+\r\n+        TaskType taskType = TaskUtil.getInstance(taskTO.getClass()).getType();\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(taskType.toString() + \"/\" + createdTask.getId()).build();\r\n         return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, createdTask.getId()).build();\r\n     }\r\n \r\n-    private TaskType getTaskType(Class<? extends TaskTO> taskClass) {\r\n-        if (taskClass == PropagationTaskTO.class) {\r\n-            return TaskType.PROPAGATION;\r\n-        } else if (taskClass == NotificationTaskTO.class) {\r\n-            return TaskType.NOTIFICATION;\r\n-        } else if (taskClass == SchedTaskTO.class) {\r\n-            return TaskType.SCHEDULED;\r\n-        } else if (taskClass == SyncTaskTO.class) {\r\n-            return TaskType.SYNCHRONIZATION;\r\n-        } else {\r\n-            throw new IllegalArgumentException(\"Invalid task class: \" + taskClass.getName());\r\n-        }\r\n-    }\r\n-\r\n     @Override\r\n     public void delete(final Long taskId) {\r\n-        taskController.delete(taskId);\r\n+        controller.delete(taskId);\r\n     }\r\n \r\n     @Override\r\n     public void deleteExecution(final Long executionId) {\r\n-        taskController.deleteExecution(executionId);\r\n+        controller.deleteExecution(executionId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO execute(final Long taskId, final boolean dryRun) {\r\n-        return taskController.execute(taskId, dryRun);\r\n+        return controller.execute(taskId, dryRun);\r\n     }\r\n \r\n     @Override\r\n     public Set<JobClassTO> getJobClasses() {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        Set<String> jobClasses = (Set<String>) taskController.getJobClasses().getModel().values().iterator().next();\r\n-        return CollectionWrapper.wrapJobClasses(jobClasses);\r\n+        return CollectionWrapper.wrapJobClasses(controller.getJobClasses());\r\n     }\r\n \r\n     @Override\r\n     public Set<SyncActionClassTO> getSyncActionsClasses() {\r\n-        @SuppressWarnings(\"unchecked\")\r\n-        Set<String> actionClasses = (Set<String>) taskController.getSyncActionsClasses().getModel().values().iterator()\r\n-                .next();\r\n-        return CollectionWrapper.wrapSyncActionClasses(actionClasses);\r\n+        return CollectionWrapper.wrapSyncActionClasses(controller.getSyncActionsClasses());\r\n     }\r\n \r\n     @Override\r\n     public <T extends TaskTO> List<T> list(final TaskType taskType) {\r\n-        return (List<T>) taskController.list(taskType.toString());\r\n+        return controller.list(taskType);\r\n     }\r\n \r\n     @Override\r\n     public <T extends TaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\r\n-        return (List<T>) taskController.list(taskType.toString(), page, size);\r\n+        return controller.list(taskType, page, size);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends TaskTO> T read(final TaskType taskType, final Long taskId) {\r\n-        return (T) taskController.read(taskId);\r\n+        return (T) controller.read(taskId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO readExecution(final Long executionId) {\r\n-        return taskController.readExecution(executionId);\r\n+        return controller.readExecution(executionId);\r\n     }\r\n \r\n     @Override\r\n     public void report(final Long executionId, final ReportExecTO report) {\r\n-        taskController.report(executionId, PropagationTaskExecStatus.fromString(report.getStatus()),\r\n+        controller.report(executionId, PropagationTaskExecStatus.fromString(report.getStatus()),\r\n                 report.getMessage());\r\n     }\r\n \r\n     @Override\r\n     public void update(final Long taskId, final TaskTO taskTO) {\r\n         if (taskTO instanceof SyncTaskTO) {\r\n-            taskController.updateSync((SyncTaskTO) taskTO);\r\n+            controller.updateSync((SyncTaskTO) taskTO);\r\n         } else if (taskTO instanceof SchedTaskTO) {\r\n-            taskController.updateSched((SchedTaskTO) taskTO);\r\n+            controller.updateSched((SchedTaskTO) taskTO);\r\n         } else {\r\n             throw new BadRequestException();\r\n         }\r\n     }\r\n \r\n     @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-        this.uriInfo = ui;\r\n-    }\r\n-\r\n-    @Override\r\n-    public BulkActionRes bulkAction(BulkAction bulkAction) {\r\n-        return taskController.bulkAction(bulkAction);\r\n+    public BulkActionRes bulkAction(final BulkAction bulkAction) {\r\n+        return controller.bulkAction(bulkAction);\r\n     }\r\n }\r"},{"sha":"9edebd3e69a329d3eb524ef825632369671d960d","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -22,45 +22,50 @@\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.UriInfo;\n \n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.to.UserRequestTO;\n-import org.apache.syncope.common.types.UserRequestType;\n import org.apache.syncope.core.rest.controller.UserRequestController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserRequestServiceImpl implements UserRequestService, ContextAware {\n+public class UserRequestServiceImpl extends AbstractServiceImpl implements UserRequestService, ContextAware {\n \n     @Autowired\n-    private UserRequestController userRequestController;\n-\n-    private UriInfo uriInfo;\n+    private UserRequestController controller;\n \n     @Override\n     public Response getOptions() {\n         return Response.ok().header(\"Allow\", \"GET,POST,OPTIONS,HEAD\")\n-                .header(SYNCOPE_CREATE_ALLOWED, userRequestController.isCreateAllowedByConf()).build();\n+                .header(SYNCOPE_CREATE_ALLOWED, controller.isCreateAllowed()).\n+                build();\n     }\n \n     @Override\n     public boolean isCreateAllowed() {\n-        return userRequestController.isCreateAllowedByConf();\n+        return controller.isCreateAllowed();\n     }\n \n     @Override\n     public Response create(final UserRequestTO userRequestTO) {\n-        UserRequestTO outUserRequestTO = null;\n-        if (userRequestTO.getType() == UserRequestType.CREATE) {\n-            outUserRequestTO = userRequestController.create(userRequestTO.getUserTO());\n-        } else if (userRequestTO.getType() == UserRequestType.UPDATE) {\n-            outUserRequestTO = userRequestController.update(userRequestTO.getUserMod());\n-        } else if (userRequestTO.getType() == UserRequestType.DELETE) {\n-            outUserRequestTO = userRequestController.delete(userRequestTO.getUserId());\n+        UserRequestTO outUserRequestTO;\n+        switch (userRequestTO.getType()) {\n+            case CREATE:\n+                outUserRequestTO = controller.create(userRequestTO.getUserTO());\n+                break;\n+\n+            case UPDATE:\n+                outUserRequestTO = controller.update(userRequestTO.getUserMod());\n+                break;\n+\n+            case DELETE:\n+            default:\n+                outUserRequestTO = controller.delete(userRequestTO.getUserId());\n+                break;\n         }\n+\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + outUserRequestTO.getId()).build();\n         return Response.created(location)\n                 .header(SyncopeConstants.REST_HEADER_ID, outUserRequestTO.getId())\n@@ -69,21 +74,16 @@ public Response create(final UserRequestTO userRequestTO) {\n \n     @Override\n     public List<UserRequestTO> list() {\n-        return userRequestController.list();\n+        return controller.list();\n     }\n \n     @Override\n     public UserRequestTO read(final Long requestId) {\n-        return userRequestController.read(requestId);\n+        return controller.read(requestId);\n     }\n \n     @Override\n     public void delete(final Long requestId) {\n-        userRequestController.deleteRequest(requestId);\n-    }\n-\n-    @Override\n-    public void setUriInfo(final UriInfo uriInfo) {\n-        this.uriInfo = uriInfo;\n+        controller.deleteRequest(requestId);\n     }\n }"},{"sha":"a5a8ad33deb4fce43788ee3e550afc0799abd93b","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":30,"deletions":36,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,7 +21,6 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.UriInfo;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.NodeCond;\n@@ -36,145 +35,140 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserServiceImpl implements UserService, ContextAware {\n+public class UserServiceImpl extends AbstractServiceImpl implements UserService, ContextAware {\n \n     @Autowired\n-    private UserController userController;\n-\n-    private UriInfo uriInfo;\n+    private UserController controller;\n \n     @Override\n     public UserTO activate(final long userId, final String token) {\n-        return userController.activate(userId, token);\n+        return controller.activate(userId, token);\n     }\n \n     @Override\n     public UserTO activate(final long userId, final String token, final PropagationRequestTO propagationRequestTO) {\n-        return userController.activate(userId, token, propagationRequestTO);\n+        return controller.activate(userId, token, propagationRequestTO);\n     }\n \n     @Override\n     public UserTO activateByUsername(final String username, final String token) {\n-        return userController.activate(username, token);\n+        return controller.activate(username, token);\n     }\n \n     @Override\n     public UserTO activateByUsername(final String username, final String token,\n             final PropagationRequestTO propagationRequestTO) {\n-        return userController.activate(username, token, propagationRequestTO);\n+        return controller.activate(username, token, propagationRequestTO);\n     }\n \n     @Override\n     public int count() {\n-        return userController.countInternal();\n+        return controller.count();\n     }\n \n     @Override\n     public Response create(final UserTO userTO) {\n-        UserTO created = userController.createInternal(userTO);\n+        UserTO created = controller.create(userTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).entity(created)\n+        return Response.created(location).\n+                header(SyncopeConstants.REST_HEADER_ID, created.getId()).\n+                entity(created)\n                 .build();\n     }\n \n     @Override\n     public UserTO delete(final Long userId) {\n-        return userController.delete(userId);\n+        return controller.delete(userId);\n     }\n \n     @Override\n     public List<UserTO> list() {\n-        return userController.list();\n+        return controller.list();\n     }\n \n     @Override\n     public List<UserTO> list(final int page, final int size) {\n-        return userController.list(page, size);\n+        return controller.list(page, size);\n     }\n \n     @Override\n     public UserTO reactivate(final long userId) {\n-        return userController.reactivate(userId);\n+        return controller.reactivate(userId);\n     }\n \n     @Override\n     public UserTO reactivate(final long userId, final PropagationRequestTO propagationRequestTO) {\n-        return userController.reactivate(userId, propagationRequestTO);\n+        return controller.reactivate(userId, propagationRequestTO);\n     }\n \n     @Override\n     public UserTO reactivateByUsername(final String username) {\n-        return userController.reactivate(username);\n+        return controller.reactivate(username);\n     }\n \n     @Override\n     public UserTO reactivateByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n-        return userController.reactivate(username, propagationRequestTO);\n+        return controller.reactivate(username, propagationRequestTO);\n     }\n \n     @Override\n     public UserTO read(final Long userId) {\n-        return userController.read(userId);\n+        return controller.read(userId);\n     }\n \n     @Override\n     public UserTO read(final String username) {\n-        return userController.read(username);\n+        return controller.read(username);\n     }\n \n     @Override\n     public UserTO readSelf() {\n-        return userController.read();\n+        return controller.read();\n     }\n \n     @Override\n     public List<UserTO> search(final NodeCond searchCondition) throws InvalidSearchConditionException {\n-        return userController.search(searchCondition);\n+        return controller.search(searchCondition);\n     }\n \n     @Override\n     public List<UserTO> search(final NodeCond searchCondition, final int page, final int size)\n             throws InvalidSearchConditionException {\n-        return userController.search(searchCondition, page, size);\n+        return controller.search(searchCondition, page, size);\n     }\n \n     @Override\n     public int searchCount(final NodeCond searchCondition) throws InvalidSearchConditionException {\n-        return userController.searchCountInternal(searchCondition);\n+        return controller.searchCount(searchCondition);\n     }\n \n     @Override\n     public UserTO suspend(final long userId) {\n-        return userController.suspend(userId);\n+        return controller.suspend(userId);\n     }\n \n     @Override\n     public UserTO suspend(final long userId, final PropagationRequestTO propagationRequestTO) {\n-        return userController.suspend(userId, propagationRequestTO);\n+        return controller.suspend(userId, propagationRequestTO);\n     }\n \n     @Override\n     public UserTO suspendByUsername(final String username) {\n-        return userController.suspend(username);\n+        return controller.suspend(username);\n     }\n \n     @Override\n     public UserTO suspendByUsername(final String username, final PropagationRequestTO propagationRequestTO) {\n-        return userController.suspend(username, propagationRequestTO);\n+        return controller.suspend(username, propagationRequestTO);\n     }\n \n     @Override\n     public UserTO update(final Long userId, final UserMod userMod) {\n-        return userController.update(userMod);\n-    }\n-\n-    @Override\n-    public void setUriInfo(final UriInfo uriInfo) {\n-        this.uriInfo = uriInfo;\n+        return controller.update(userMod);\n     }\n \n     @Override\n     public BulkActionRes bulkAction(final BulkAction bulkAction) {\n-        return userController.bulkAction(bulkAction);\n+        return controller.bulkAction(bulkAction);\n     }\n }"},{"sha":"1b8f87b6ff27a097c7c6ac8db71912c68d119037","filename":"core/src/main/java/org/apache/syncope/core/services/UserWorkflowServiceImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserWorkflowServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,41 +23,41 @@\n import org.apache.syncope.common.services.UserWorkflowService;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n-import org.apache.syncope.core.rest.controller.UserController;\n+import org.apache.syncope.core.rest.controller.UserWorkflowController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class UserWorkflowServiceImpl implements UserWorkflowService {\n \n     @Autowired\n-    private UserController userController;\n+    private UserWorkflowController controller;\n \n     @Override\n     public WorkflowFormTO claimForm(final String taskId) {\n-        return userController.claimForm(taskId);\n+        return controller.claimForm(taskId);\n     }\n     \n \n     @Override\n     public UserTO executeWorkflow(final String taskId, final UserTO userTO) {\n-        return userController.executeWorkflow(userTO, taskId);\n+        return controller.executeWorkflow(userTO, taskId);\n     }\n \n     @Override\n     public WorkflowFormTO getFormForUser(final Long userId) {\n-        return userController.getFormForUser(userId);\n+        return controller.getFormForUser(userId);\n     }\n \n     @Override\n     public List<WorkflowFormTO> getForms() {\n-        return userController.getForms();\n+        return controller.getForms();\n     }\n     \n \n     @Override\n     public UserTO submitForm(final WorkflowFormTO form) {\n-        return userController.submitForm(form);\n+        return controller.submitForm(form);\n     }\n     \n }"},{"sha":"3b62763c3f2130de7ce74f2a716187c3e4a7979f","filename":"core/src/main/java/org/apache/syncope/core/services/WorkflowServiceImpl.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FWorkflowServiceImpl.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -18,9 +18,7 @@\n  */\r\n package org.apache.syncope.core.services;\r\n \r\n-import java.util.List;\r\n import javax.ws.rs.BadRequestException;\r\n-import javax.ws.rs.core.UriInfo;\r\n \r\n import org.apache.syncope.common.services.WorkflowService;\r\n import org.apache.syncope.common.services.WorkflowTasks;\r\n@@ -31,18 +29,20 @@\n import org.springframework.stereotype.Service;\r\n \r\n @Service\r\n-public class WorkflowServiceImpl implements WorkflowService, ContextAware {\r\n+public class WorkflowServiceImpl extends AbstractServiceImpl implements WorkflowService, ContextAware {\r\n \r\n     @Autowired\r\n-    private WorkflowController workflowController;\r\n+    private WorkflowController controller;\r\n \r\n     @Override\r\n     public WorkflowDefinitionTO getDefinition(final AttributableType kind) {\r\n         switch (kind) {\r\n             case USER:\r\n-                return workflowController.getUserDefinition();\r\n+                return controller.getUserDefinition();\r\n+\r\n             case ROLE:\r\n-                return workflowController.getRoleDefinition();\r\n+                return controller.getRoleDefinition();\r\n+\r\n             default:\r\n                 throw new BadRequestException();\r\n         }\r\n@@ -52,11 +52,13 @@ public WorkflowDefinitionTO getDefinition(final AttributableType kind) {\n     public void updateDefinition(final AttributableType kind, final WorkflowDefinitionTO definition) {\r\n         switch (kind) {\r\n             case USER:\r\n-                workflowController.updateUserDefinition(definition);\r\n+                controller.updateUserDefinition(definition);\r\n                 break;\r\n+\r\n             case ROLE:\r\n-                workflowController.updateRoleDefinition(definition);\r\n+                controller.updateRoleDefinition(definition);\r\n                 break;\r\n+\r\n             default:\r\n                 throw new BadRequestException();\r\n         }\r\n@@ -67,19 +69,13 @@ public void updateDefinition(final AttributableType kind, final WorkflowDefiniti\n     public WorkflowTasks getDefinedTasks(final AttributableType kind) {\r\n         switch (kind) {\r\n             case USER:\r\n-                return new WorkflowTasks((List<String>) workflowController.getDefinedUserTasks().\r\n-                        getModel().values().iterator().next());\r\n+                return new WorkflowTasks(controller.getDefinedUserTasks());\r\n \r\n             case ROLE:\r\n-                return new WorkflowTasks((List<String>) workflowController.getDefinedRoleTasks().\r\n-                        getModel().values().iterator().next());\r\n+                return new WorkflowTasks(controller.getDefinedRoleTasks());\r\n \r\n             default:\r\n                 throw new BadRequestException();\r\n         }\r\n     }\r\n-\r\n-    @Override\r\n-    public void setUriInfo(final UriInfo ui) {\r\n-    }\r\n }\r"},{"sha":"be21f1537f7d8b0bdb904fc120aeb3ac6d5bbdfd","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -71,15 +71,16 @@\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n @SuppressWarnings(\"unchecked\")\n-public class AttributableUtil {\n+public final class AttributableUtil {\n \n     /**\n      * Logger.\n      */\n-    protected static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AttributableUtil.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AttributableUtil.class);\n \n     private final AttributableType type;\n \n@@ -346,9 +347,11 @@ public <T extends AbstractSchema> T newSchema() {\n             case USER:\n                 result = (T) new USchema();\n                 break;\n+\n             case ROLE:\n                 result = (T) new RSchema();\n                 break;\n+\n             case MEMBERSHIP:\n                 result = (T) new MSchema();\n                 break;"},{"sha":"3be8d47e0ccb5513e777b349096e51466db9003a","filename":"core/src/main/java/org/apache/syncope/core/util/TaskUtil.java","status":"modified","additions":65,"deletions":18,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -23,33 +23,80 @@\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n \n-@SuppressWarnings(\"unchecked\")\n-public enum TaskUtil {\n+public final class TaskUtil {\n \n-    PROPAGATION,\n-    SCHED,\n-    SYNC,\n-    NOTIFICATION;\n+    private final TaskType type;\n+\n+    public static TaskUtil getInstance(final TaskType type) {\n+        return new TaskUtil(type);\n+    }\n+\n+    public static TaskUtil getInstance(final Task task) {\n+        TaskType type;\n+        if (task instanceof SyncTask) {\n+            type = TaskType.SYNCHRONIZATION;\n+        } else if (task instanceof SchedTask) {\n+            type = TaskType.SCHEDULED;\n+        } else if (task instanceof PropagationTask) {\n+            type = TaskType.PROPAGATION;\n+        } else if (task instanceof NotificationTask) {\n+            type = TaskType.NOTIFICATION;\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid task: \" + task);\n+        }\n+\n+        return getInstance(type);\n+    }\n+\n+    public static TaskUtil getInstance(Class<? extends TaskTO> taskClass) {\n+        TaskType type;\n+        if (taskClass == PropagationTaskTO.class) {\n+            type = TaskType.PROPAGATION;\n+        } else if (taskClass == NotificationTaskTO.class) {\n+            type = TaskType.NOTIFICATION;\n+        } else if (taskClass == SchedTaskTO.class) {\n+            type = TaskType.SCHEDULED;\n+        } else if (taskClass == SyncTaskTO.class) {\n+            type = TaskType.SYNCHRONIZATION;\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid TaskTO class: \" + taskClass.getName());\n+        }\n+\n+        return getInstance(type);\n+    }\n+\n+    public static TaskUtil getInstance(final TaskTO taskTO) {\n+        return getInstance(taskTO.getClass());\n+    }\n+\n+    private TaskUtil(final TaskType type) {\n+        this.type = type;\n+    }\n+\n+    public TaskType getType() {\n+        return type;\n+    }\n \n     public <T extends Task> Class<T> taskClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case PROPAGATION:\n                 result = PropagationTask.class;\n                 break;\n \n-            case SCHED:\n+            case SCHEDULED:\n                 result = SchedTask.class;\n                 break;\n \n-            case SYNC:\n+            case SYNCHRONIZATION:\n                 result = SyncTask.class;\n                 break;\n \n@@ -66,16 +113,16 @@ public <T extends Task> Class<T> taskClass() {\n     public <T extends Task> T newTask() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case PROPAGATION:\n                 result = (T) new PropagationTask();\n                 break;\n \n-            case SCHED:\n+            case SCHEDULED:\n                 result = (T) new SchedTask();\n                 break;\n \n-            case SYNC:\n+            case SYNCHRONIZATION:\n                 result = (T) new SyncTask();\n                 break;\n \n@@ -92,16 +139,16 @@ public <T extends Task> T newTask() {\n     public <T extends TaskTO> Class<T> taskTOClass() {\n         Class result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case PROPAGATION:\n                 result = PropagationTaskTO.class;\n                 break;\n \n-            case SCHED:\n+            case SCHEDULED:\n                 result = SchedTaskTO.class;\n                 break;\n \n-            case SYNC:\n+            case SYNCHRONIZATION:\n                 result = SyncTaskTO.class;\n                 break;\n \n@@ -118,16 +165,16 @@ public <T extends TaskTO> Class<T> taskTOClass() {\n     public <T extends TaskTO> T newTaskTO() {\n         T result = null;\n \n-        switch (this) {\n+        switch (type) {\n             case PROPAGATION:\n                 result = (T) new PropagationTaskTO();\n                 break;\n \n-            case SCHED:\n+            case SCHEDULED:\n                 result = (T) new SchedTaskTO();\n                 break;\n \n-            case SYNC:\n+            case SYNCHRONIZATION:\n                 result = (T) new SyncTaskTO();\n                 break;\n "},{"sha":"c5ffd5fa6b20349ef4dd74c39e87d25575a62c9a","filename":"core/src/main/resources/logback.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -140,7 +140,12 @@ under the License.\n     <level value=\"INFO\"/>\n     <appender-ref ref=\"rest\"/>\n   </logger>\n-    \n+\n+  <logger name=\"org.apache.cxf\" additivity=\"false\">\n+    <level value=\"ERROR\"/>\n+    <appender-ref ref=\"rest\"/>\n+  </logger>\n+            \n   <root>\n     <level value=\"INFO\"/>\n     <appender-ref ref=\"main\"/>"},{"sha":"a6185c1cdac085d6c9cd41db09168696653af2b2","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":2,"deletions":66,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,15 +21,12 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://cxf.apache.org/jaxrs\n                            http://cxf.apache.org/schemas/jaxrs.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\n-                           http://www.springframework.org/schema/oxm\n-                           http://www.springframework.org/schema/oxm/spring-oxm.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n \n   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>\n@@ -64,6 +61,7 @@ under the License.\n     </property>\n   </bean>\n \n+  <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\"/>\n   <bean id=\"jsonProvider\" class=\"com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider\">\n     <property name=\"mapper\" ref=\"jacksonObjectMapper\"/>\n   </bean>\n@@ -103,66 +101,4 @@ under the License.\n   </jaxrs:server>\n   <!-- CXF Configuration - END -->\n \n-  <!-- JSON (via Jackson) -->\n-  <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\"/>\n-  <bean id=\"mappingJacksonHttpMessageConverter\" \n-        class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n-    <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n-  </bean>\n-\n-  <!-- XML (via XStream) -->\n-  <bean id=\"xStreamXmlMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n-    <property name=\"autodetectAnnotations\" value=\"true\"/>\n-  </bean>\n-  <bean id=\"mappingXstreamHttpMessageConverter\" \n-        class=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n-    <constructor-arg ref=\"xStreamXmlMarshaller\"/>\n-  </bean>\n-\n-  <bean class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\"/>\n-  <bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n-    <property name=\"messageConverters\">\n-      <list>\n-        <ref bean=\"mappingJacksonHttpMessageConverter\"/>\n-        <ref bean=\"mappingXstreamHttpMessageConverter\"/>\n-      </list>\n-    </property>\n-  </bean>\n-\n-  <bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n-    <property name=\"mediaTypes\">\n-      <map>\n-        <entry key=\"json\" value=\"application/json;charset=UTF-8\"/>\n-        <entry key=\"xml\" value=\"application/xml;charset=UTF-8\"/>\n-        <entry key=\"html\" value=\"text/html;charset=UTF-8\"/>\n-      </map>\n-    </property>\n-    <property name=\"viewResolvers\">\n-      <list>\n-        <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n-          <property name=\"prefix\" value=\"/\"/>\n-          <property name=\"suffix\" value=\".jsp\"/>\n-        </bean>\n-      </list>\n-    </property>\n-    <property name=\"defaultViews\">\n-      <list>\n-        <bean class=\"org.springframework.web.servlet.view.json.MappingJackson2JsonView\">\n-          <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n-        </bean>\n-        <bean class=\"org.springframework.web.servlet.view.xml.MarshallingView\">\n-          <constructor-arg ref=\"xStreamXmlMarshaller\"/>\n-        </bean>\n-      </list>\n-    </property>\n-    <property name=\"defaultContentType\">\n-      <bean id=\"jsonMediaType\" class=\"org.springframework.http.MediaType\">\n-        <constructor-arg value=\"application\"/>\n-        <constructor-arg value=\"json\"/>\n-        <constructor-arg value=\"UTF-8\"/>\n-      </bean>\n-    </property>\n-\n-    <property name=\"ignoreAcceptHeader\" value=\"false\"/>\n-  </bean>\n </beans>"},{"sha":"df3ee70c8894539a7028db02e40ea57006049dae","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -45,20 +45,6 @@ under the License.\n   </servlet>\n   <servlet-mapping>\n     <servlet-name>CXFServlet</servlet-name>\n-    <url-pattern>/cxf/*</url-pattern>\n-  </servlet-mapping>\n-\n-  <servlet>\n-    <servlet-name>syncope-core-rest</servlet-name>\n-    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n-    <init-param>\n-      <param-name>contextConfigLocation</param-name>\n-      <param-value></param-value>\n-    </init-param>\n-    <load-on-startup>1</load-on-startup>\n-  </servlet>\n-  <servlet-mapping>\n-    <servlet-name>syncope-core-rest</servlet-name>\n     <url-pattern>/rest/*</url-pattern>\n   </servlet-mapping>\n \n@@ -88,11 +74,6 @@ under the License.\n     <url-pattern>/*</url-pattern>\n   </filter-mapping>\n \n-  <error-page>\n-    <exception-type>java.lang.Throwable</exception-type>\n-    <location>/syncopeClientError.jsp</location>\n-  </error-page>\n-    \n   <login-config>\n     <auth-method>CLIENT-CERT</auth-method>\n   </login-config>"},{"sha":"f09092e04f1d24fc7e3d9b3778f92f4898988642","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"removed","additions":0,"deletions":146,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,146 +0,0 @@\n-<%--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n---%>\n-<%@page isErrorPage=\"true\" session=\"false\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n-<%@page import=\"java.util.Set\"%>\n-<%@page import=\"java.util.Map\"%>\n-<%@page import=\"javax.persistence.EntityExistsException\"%>\n-<%@page import=\"javax.persistence.PersistenceException\"%>\n-<%@page import=\"org.apache.syncope.common.types.EntityViolationType\"%>\n-<%@page import=\"org.apache.syncope.core.persistence.validation.entity.InvalidEntityException\"%>\n-<%@page import=\"org.apache.syncope.common.services.InvalidSearchConditionException\"%>\n-<%@page import=\"org.apache.syncope.core.rest.controller.UnauthorizedRoleException\"%>\n-<%@page import=\"org.apache.syncope.core.persistence.dao.MissingConfKeyException\"%>\n-<%@page import=\"org.apache.syncope.common.validation.SyncopeClientException\"%>\n-<%@page import=\"org.apache.syncope.common.validation.SyncopeClientCompositeErrorException\"%>\n-<%@page import=\"org.apache.syncope.core.workflow.WorkflowException\"%>\n-<%@page import=\"org.apache.syncope.common.types.SyncopeClientExceptionType\"%>\n-<%@page import=\"org.apache.syncope.core.persistence.dao.NotFoundException\"%>\n-<%@page import=\"org.identityconnectors.framework.common.exceptions.ConfigurationException\"%>\n-<%@page import=\"org.apache.syncope.common.validation.SyncopeClientErrorHandler\"%>\n-<%@page import=\"org.apache.syncope.core.rest.controller.AbstractController\"%>\n-<%@page import=\"org.slf4j.LoggerFactory\"%>\n-<%@page import=\"org.slf4j.Logger\"%>\n-<%@page import=\"org.springframework.dao.DataIntegrityViolationException\"%>\n-<%@page import=\"org.springframework.orm.jpa.JpaSystemException\"%>\n-\n-<%!    static final Logger LOG = LoggerFactory.getLogger(AbstractController.class);%>\n-\n-<%\n-    Throwable ex = pageContext.getErrorData().getThrowable();\n-\n-    LOG.error(\"Exception thrown by REST methods\", ex);\n-\n-    int statusCode = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n-\n-    if (ex instanceof InvalidEntityException) {\n-        SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\n-                \"Invalid\" + ((InvalidEntityException) ex).getEntityClassSimpleName());\n-\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\n-\n-        for (Map.Entry<Class, Set<EntityViolationType>> violation : ((InvalidEntityException) ex).getViolations().\n-                entrySet()) {\n-\n-            for (EntityViolationType violationType : violation.getValue()) {\n-                response.addHeader(exType.getElementHeaderName(),\n-                        violationType.name() + \": \" + violationType.getMessage());\n-            }\n-        }\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof NotFoundException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.NotFound.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.NotFound.getElementHeaderName(), ex.getMessage());\n-\n-        statusCode = HttpServletResponse.SC_NOT_FOUND;\n-    } else if (ex instanceof EntityExistsException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.EntityExists.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.EntityExists.getElementHeaderName(), ex.getMessage());\n-\n-        statusCode = HttpServletResponse.SC_CONFLICT;\n-    } else if (ex instanceof WorkflowException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.Workflow.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.Workflow.getElementHeaderName(), ex.getCause().getMessage());\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.Workflow.getHeaderValue());\n-        response.setHeader(\n-                SyncopeClientExceptionType.Workflow.getElementHeaderName(), \"Currently unavailable. Please try later.\");\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof SyncopeClientCompositeErrorException) {\n-        for (SyncopeClientException sce : ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\n-            response.addHeader(\n-                    SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\n-\n-            for (String attributeName : sce.getElements()) {\n-                response.addHeader(sce.getType().getElementHeaderName(), attributeName);\n-            }\n-        }\n-\n-        statusCode = ((SyncopeClientCompositeErrorException) ex).getStatusCode().value();\n-    } else if (ex instanceof MissingConfKeyException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.NotFound.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.NotFound.getElementHeaderName(),\n-                ((MissingConfKeyException) ex).getConfKey());\n-\n-        statusCode = HttpServletResponse.SC_NOT_FOUND;\n-    } else if (ex instanceof InvalidSearchConditionException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof UnauthorizedRoleException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.UnauthorizedRole.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.UnauthorizedRole.getElementHeaderName(), ex.getMessage());\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.DataIntegrityViolation.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.DataIntegrityViolation.getElementHeaderName(),\n-                ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage());\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof PersistenceException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.GenericPersistence.getElementHeaderName(),\n-                ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage());\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    } else if (ex instanceof ConfigurationException) {\n-        response.setHeader(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n-                SyncopeClientExceptionType.InvalidConnIdConf.getHeaderValue());\n-        response.setHeader(SyncopeClientExceptionType.InvalidConnIdConf.getElementHeaderName(),\n-                ex.getCause() == null ? ex.getMessage() : ex.getCause().getMessage());\n-\n-        statusCode = HttpServletResponse.SC_BAD_REQUEST;\n-    }\n-\n-    response.setStatus(statusCode);\n-%>\n-null\n\\ No newline at end of file"},{"sha":"eb9064af1d5c641400f2b02550c54fe9b9c0b808","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -59,7 +59,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.mock.web.MockHttpServletResponse;\n import org.springframework.security.authentication.TestingAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n@@ -230,7 +229,7 @@ public void notifyByMail() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.addMembership(membershipTO);\n \n-        userController.create(new MockHttpServletResponse(), userTO);\n+        userController.create(userTO);\n \n         // 3. force Quartz job execution and verify e-mail\n         notificationJob.execute(null);\n@@ -285,7 +284,7 @@ public void issueSYNCOPE192() throws Exception {\n         membershipTO.setRoleId(7);\n         userTO.addMembership(membershipTO);\n \n-        userController.create(new MockHttpServletResponse(), userTO);\n+        userController.create(userTO);\n \n         // 3. force Quartz job execution and verify e-mail\n         notificationJob.execute(null);"},{"sha":"7012ef86f7fba456ae1b40c999ccf783fafc0308","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/NotificationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -119,7 +119,7 @@ public void saveWithException() {\n         notification.setSubject(\"Test notification\");\n         notification.setTemplate(\"test\");\n \n-        Map<Class, Set<EntityViolationType>> violations;\n+        Map<Class<?>, Set<EntityViolationType>> violations;\n         try {\n             notificationDAO.save(notification);\n             violations = null;"},{"sha":"70820ce49f2966b23553c672f32361b1704717f7","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":6,"deletions":122,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -21,8 +21,6 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.UUID;\n \n import javax.sql.DataSource;\n@@ -32,27 +30,8 @@\n \n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.http.HttpStatus;\n-import org.apache.http.auth.UsernamePasswordCredentials;\n-import org.apache.http.impl.client.DefaultHttpClient;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.rest.RestClientExceptionMapper;\n import org.apache.syncope.client.rest.RestClientFactoryBean;\n-import org.apache.syncope.client.services.proxy.ConfigurationServiceProxy;\n-import org.apache.syncope.client.services.proxy.ConnectorServiceProxy;\n-import org.apache.syncope.client.services.proxy.EntitlementServiceProxy;\n-import org.apache.syncope.client.services.proxy.LoggerServiceProxy;\n-import org.apache.syncope.client.services.proxy.NotificationServiceProxy;\n-import org.apache.syncope.client.services.proxy.PolicyServiceProxy;\n-import org.apache.syncope.client.services.proxy.ReportServiceProxy;\n-import org.apache.syncope.client.services.proxy.ResourceServiceProxy;\n-import org.apache.syncope.client.services.proxy.RoleServiceProxy;\n-import org.apache.syncope.client.services.proxy.SchemaServiceProxy;\n-import org.apache.syncope.client.services.proxy.SpringServiceProxy;\n-import org.apache.syncope.client.services.proxy.TaskServiceProxy;\n-import org.apache.syncope.client.services.proxy.UserRequestServiceProxy;\n-import org.apache.syncope.client.services.proxy.UserServiceProxy;\n-import org.apache.syncope.client.services.proxy.UserWorkflowServiceProxy;\n-import org.apache.syncope.client.services.proxy.WorkflowServiceProxy;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.ConnectorService;\n@@ -78,17 +57,13 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.SchemaType;\n-import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.converter.HttpMessageConverter;\n-import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n-import org.springframework.web.client.RestTemplate;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\"})\n@@ -99,8 +74,6 @@ public abstract class AbstractTest {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);\n \n-    protected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n-\n     protected static final String ADMIN_UNAME = \"admin\";\n \n     protected static final String ADMIN_PWD = \"password\";\n@@ -110,25 +83,12 @@ public abstract class AbstractTest {\n \n     private static final String ENV_KEY_CONTENT_TYPE = \"jaxrsContentType\";\n \n-    @Autowired\n-    private RestTemplate restTemplate;\n-\n-    @Autowired\n-    private MappingJackson2HttpMessageConverter mappingJacksonHttpMessageConverter;\n-\n-    @Autowired\n-    private PreemptiveAuthHttpRequestFactory httpClientFactory;\n-\n     @Autowired\n     protected RestClientFactoryBean restClientFactory;\n \n     @Autowired\n     protected DataSource testDataSource;\n \n-    private boolean enabledCXF;\n-\n-    private String contentType;\n-\n     protected UserService userService;\n \n     protected UserWorkflowService userWorkflowService;\n@@ -164,58 +124,11 @@ public abstract class AbstractTest {\n \n     @Before\n     public void setup() throws Exception {\n-        if (enabledCXF) {\n-            String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n-            contentType = (envContentType == null || envContentType.isEmpty())\n-                    ? DEFAULT_CONTENT_TYPE\n-                    : envContentType;\n-\n-            setupCXFServices();\n-        } else {\n-            resetRestTemplate();\n-        }\n-    }\n-\n-    // BEGIN Spring MVC Initialization\n-    private void setupRestTemplate(final String uid, final String pwd) {\n-        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n-                .getRequestFactory());\n-\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(uid, pwd));\n-    }\n+        final String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n+        restClientFactory.setContentType((envContentType == null || envContentType.isEmpty())\n+                ? DEFAULT_CONTENT_TYPE\n+                : envContentType);\n \n-    private RestTemplate getAnonymousRestTemplate() {\n-        RestTemplate template = new RestTemplate(httpClientFactory);\n-        List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>();\n-        converters.add(mappingJacksonHttpMessageConverter);\n-        template.setMessageConverters(converters);\n-        template.setErrorHandler(new SyncopeClientErrorHandler());\n-        return template;\n-    }\n-\n-    protected void resetRestTemplate() {\n-        setupRestTemplate(ADMIN_UNAME, ADMIN_PWD);\n-        userService = new UserServiceProxy(BASE_URL, restTemplate);\n-        userWorkflowService = new UserWorkflowServiceProxy(BASE_URL, restTemplate);\n-        roleService = new RoleServiceProxy(BASE_URL, restTemplate);\n-        resourceService = new ResourceServiceProxy(BASE_URL, restTemplate);\n-        entitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n-        configurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n-        connectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n-        loggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n-        reportService = new ReportServiceProxy(BASE_URL, restTemplate);\n-        taskService = new TaskServiceProxy(BASE_URL, restTemplate);\n-        policyService = new PolicyServiceProxy(BASE_URL, restTemplate);\n-        workflowService = new WorkflowServiceProxy(BASE_URL, restTemplate);\n-        notificationService = new NotificationServiceProxy(BASE_URL, restTemplate);\n-        schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n-        userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n-    }\n-    // END Spring MVC Initialization\n-\n-    // BEGIN CXF Initialization\n-    protected void setupCXFServices() throws Exception {\n         userService = createServiceInstance(UserService.class);\n         userWorkflowService = createServiceInstance(UserWorkflowService.class);\n         roleService = createServiceInstance(RoleService.class);\n@@ -236,44 +149,15 @@ protected void setupCXFServices() throws Exception {\n     protected <T> T createServiceInstance(final Class<T> serviceClass) {\n         return restClientFactory.createServiceInstance(serviceClass, ADMIN_UNAME, ADMIN_PWD);\n     }\n-    // END CXF Initialization\n \n-    @SuppressWarnings(\"unchecked\")\n-    protected <T> T setupCredentials(final T proxy, final Class<?> serviceInterface, final String username,\n-            final String password) {\n-\n-        if (proxy instanceof SpringServiceProxy) {\n-            SpringServiceProxy service = (SpringServiceProxy) proxy;\n-            if (username == null && password == null) {\n-                service.setRestTemplate(getAnonymousRestTemplate());\n-            } else {\n-                setupRestTemplate(username, password);\n-            }\n-            return proxy;\n-        } else {\n-            return (T) restClientFactory.createServiceInstance(serviceInterface, username, password);\n-        }\n+    protected <T> T createServiceInstance(final Class<T> serviceClass, final String username, final String password) {\n+        return restClientFactory.createServiceInstance(serviceClass, username, password);\n     }\n \n     protected <T> T getObject(final Response response, final Class<T> type, final Object serviceProxy) {\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n-        if (enabledCXF) {\n-            return getObjectCXF(response, type, serviceProxy);\n-        } else {\n-            return getObjectSpring(response, type);\n-        }\n-    }\n-\n-    private <T> T getObjectSpring(final Response response, final Class<T> type) {\n-        return restTemplate.getForObject(response.getLocation(), type);\n-    }\n-\n-    protected void setEnabledCXF(final boolean enabledCXF) {\n-        this.enabledCXF = enabledCXF;\n-    }\n \n-    private static <T> T getObjectCXF(final Response response, final Class<T> type, final Object serviceProxy) {\n         String location = response.getLocation().toString();\n         WebClient webClient = WebClient.fromClient(WebClient.client(serviceProxy));\n         webClient.to(location, false);"},{"sha":"7b281c7b0a4cb71e663d8d1ae343a0391ead0143","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":15,"deletions":49,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n-import org.apache.syncope.core.rest.jaxrs.CXFPatchedAuthenticator;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -68,8 +67,6 @@ public void testAdminEntitlements() {\n         assertFalse(allEntitlements.isEmpty());\n \n         // 2. as admin, read own entitlements\n-        super.resetRestTemplate();\n-\n         Set<EntitlementTO> adminEntitlements = entitlementService.getMyEntitlements();\n \n         assertEquals(allEntitlements, adminEntitlements);\n@@ -116,7 +113,7 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        SchemaService schemaService2 = setupCredentials(schemaService, SchemaService.class,\n+        SchemaService schemaService2 = createServiceInstance(SchemaService.class,\n                 userTO.getUsername(), \"password123\");\n \n         schemaTO = schemaService2.read(AttributableType.USER, SchemaType.NORMAL, schemaName);\n@@ -134,8 +131,6 @@ public void testUserSchemaAuthorization() {\n             assertNotNull(e);\n         }\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n         assertEquals(0, getFailedLogins(userService, userTO.getId()));\n     }\n \n@@ -154,13 +149,12 @@ public void testUserRead() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class,\n-                userTO.getUsername(), \"password123\");\n+        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n \n         UserTO readUserTO = userService2.read(1L);\n         assertNotNull(readUserTO);\n \n-        UserService userService3 = setupCredentials(userService, UserService.class, \"verdi\", ADMIN_PWD);\n+        UserService userService3 = createServiceInstance(UserService.class, \"verdi\", ADMIN_PWD);\n \n         SyncopeClientException exception = null;\n         try {\n@@ -170,9 +164,6 @@ public void testUserRead() {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n         }\n         assertNotNull(exception);\n-\n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n     }\n \n     @Test\n@@ -190,8 +181,7 @@ public void testUserSearch() throws InvalidSearchConditionException {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class,\n-                userTO.getUsername(), \"password123\");\n+        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n \n         AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         isNullCond.setSchema(\"loginDate\");\n@@ -206,7 +196,7 @@ public void testUserSearch() throws InvalidSearchConditionException {\n         }\n         assertTrue(userIds.contains(1L));\n \n-        UserService userService3 = setupCredentials(userService, UserService.class, \"verdi\", \"password\");\n+        UserService userService3 = createServiceInstance(UserService.class, \"verdi\", \"password\");\n \n         matchedUsers = userService3.search(searchCondition);\n \n@@ -218,16 +208,10 @@ public void testUserSearch() throws InvalidSearchConditionException {\n             userIds.add(user.getId());\n         }\n         assertFalse(userIds.contains(1L));\n-\n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n     }\n \n     @Test\n     public void checkFailedLogins() {\n-        // Workaround for CXF issue.. remove after upgrade to 2.7.3\n-        CXFAuthenticator.addAuthenticator();\n-        Authenticator.setDefault(new CXFPatchedAuthenticator());\n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -242,22 +226,17 @@ public void checkFailedLogins() {\n         assertNotNull(userTO);\n         long userId = userTO.getId();\n \n-        UserService userService2 = setupCredentials(userService, UserService.class,\n-                userTO.getUsername(), \"password123\");\n+        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n-        UserService userService3 = setupCredentials(userService, UserService.class,\n-                userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 = createServiceInstance(UserService.class, userTO.getUsername(), \"wrongpwd1\");\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n         assertEquals(2, getFailedLogins(userService, userId));\n \n-        UserService userService4 = setupCredentials(userService, UserService.class,\n-                userTO.getUsername(), \"password123\");\n+        UserService userService4 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n         assertEquals(0, getFailedLogins(userService4, userId));\n     }\n \n@@ -277,29 +256,21 @@ public void checkUserSuspension() {\n         long userId = userTO.getId();\n         assertNotNull(userTO);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class,\n-                userTO.getUsername(), \"password123\");\n+        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n-        UserService userService3 = setupCredentials(userService, UserService.class,\n-                userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 = createServiceInstance(UserService.class, userTO.getUsername(), \"wrongpwd1\");\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n         assertEquals(3, getFailedLogins(userService, userId));\n \n         // last authentication before suspension\n-        // TODO remove after CXF migration is complete\n-        userService3 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"wrongpwd1\");\n+        userService3 = createServiceInstance(UserService.class, userTO.getUsername(), \"wrongpwd1\");\n         assertReadFails(userService3, userId);\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n-\n         userTO = userService.read(userTO.getId());\n \n         assertNotNull(userTO);\n@@ -308,18 +279,14 @@ public void checkUserSuspension() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         // Access with correct credentials should fail as user is suspended\n-        // TODO remove after CXF migration is complete\n-        userService2 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"password123\");\n+        userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n         assertReadFails(userService2, userId);\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n         userTO = userService.reactivate(userTO.getId());\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        // TODO remove after CXF migration is complete\n-        userService2 = setupCredentials(userService, UserService.class, userTO.getUsername(), \"password123\");\n+        userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n         assertEquals(0, getFailedLogins(userService2, userId));\n     }\n \n@@ -332,7 +299,7 @@ public void issueSYNCOPE48() {\n         parentRole.addEntitlement(\"ROLE_1\");\n         parentRole.setParent(1L);\n \n-        parentRole =  createRole(roleService, parentRole);\n+        parentRole = createRole(roleService, parentRole);\n         assertNotNull(parentRole);\n \n         // Child role, with no entitlements\n@@ -353,8 +320,7 @@ public void issueSYNCOPE48() {\n         role1Admin = createUser(role1Admin);\n         assertNotNull(role1Admin);\n \n-        UserService userService2 = setupCredentials(userService, UserService.class,\n-                role1Admin.getUsername(), \"password\");\n+        UserService userService2 = createServiceInstance(UserService.class, role1Admin.getUsername(), \"password\");\n \n         // User with role 1, created by user with child role created above\n         UserTO role1User = UserTestITCase.getUniqueSampleTO(\"syncope48user@apache.org\");"},{"sha":"3b4e69086dba77ee99de38e9a97cda56e32c94f3","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -113,7 +113,7 @@ public void update() {\n \n     @Test\n     public void dbExport() throws IOException {\n-        Response response = configurationService.dbExport();\n+        Response response = configurationService.export();\n         assertNotNull(response);\n         assertEquals(HttpStatus.OK.value(), response.getStatus());\n         String contentType = response.getHeaderString(HttpHeaders.CONTENT_TYPE);"},{"sha":"07fdb23b9e1c43777374f11e6d9a103d766be04a","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -26,7 +26,7 @@\n \n import java.util.List;\n \n-import org.apache.syncope.common.to.DerivedSchemaTO;\n+import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n@@ -41,27 +41,27 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<DerivedSchemaTO> derivedSchemas = schemaService.list(AttributableType.USER, SchemaType.DERIVED);\n+        List<DerSchemaTO> derivedSchemas = schemaService.list(AttributableType.USER, SchemaType.DERIVED);\n         assertFalse(derivedSchemas.isEmpty());\n-        for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n+        for (DerSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);\n         }\n     }\n \n     @Test\n     public void read() {\n-        DerivedSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaType.DERIVED,\n+        DerSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaType.DERIVED,\n                 \"cn\");\n         assertNotNull(derivedSchemaTO);\n     }\n \n     @Test\n     public void create() {\n-        DerivedSchemaTO schema = new DerivedSchemaTO();\n+        DerSchemaTO schema = new DerSchemaTO();\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        DerivedSchemaTO actual = createSchema(AttributableType.USER, SchemaType.DERIVED, schema);\n+        DerSchemaTO actual = createSchema(AttributableType.USER, SchemaType.DERIVED, schema);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaType.DERIVED, actual.getName());\n@@ -71,7 +71,7 @@ public void create() {\n \n     @Test\n     public void delete() {\n-        DerivedSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED,\n+        DerSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED,\n                 \"rderiveddata\");\n         assertNotNull(schema);\n \n@@ -94,7 +94,7 @@ public void delete() {\n \n     @Test\n     public void update() {\n-        DerivedSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n+        DerSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.DERIVED,\n                 \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n@@ -117,7 +117,7 @@ public void update() {\n \n     @Test\n     public void issueSYNCOPE323() {\n-        DerivedSchemaTO actual = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n+        DerSchemaTO actual = schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n         assertNotNull(actual);\n \n         try {"},{"sha":"73ea69d8c4c9f12c60f0b22b4f68ef0890489761","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -194,7 +194,7 @@ public void selfRead() {\n         assertTrue(userTO.getMembershipMap().containsKey(1L));\n         assertFalse(userTO.getMembershipMap().containsKey(3L));\n \n-        RoleService roleService2 = setupCredentials(roleService, RoleService.class, \"rossini\", ADMIN_PWD);\n+        RoleService roleService2 = createServiceInstance(RoleService.class, \"rossini\", ADMIN_PWD);\n \n         SyncopeClientException exception = null;\n         try {\n@@ -297,7 +297,7 @@ public void updateAsRoleOwner() {\n         roleMod.setName(\"Managing Director\");\n \n         // 3. try to update as verdi, not owner of role 7 - fail\n-        RoleService roleService2 = setupCredentials(roleService, RoleService.class, \"verdi\", ADMIN_PWD);\n+        RoleService roleService2 = createServiceInstance(RoleService.class, \"verdi\", ADMIN_PWD);\n \n         try {\n             roleService2.update(roleMod.getId(), roleMod);\n@@ -308,9 +308,8 @@ public void updateAsRoleOwner() {\n             assertNotNull(e);\n         }\n \n-        // 4. update as puccini, owner of role 7 because owner of role 6 with\n-        // inheritance - success\n-        RoleService roleService3 = setupCredentials(roleService, RoleService.class, \"puccini\", ADMIN_PWD);\n+        // 4. update as puccini, owner of role 7 because owner of role 6 with inheritance - success\n+        RoleService roleService3 = createServiceInstance(RoleService.class, \"puccini\", ADMIN_PWD);\n \n         roleTO = roleService3.update(roleMod.getId(), roleMod);\n         assertEquals(\"Managing Director\", roleTO.getName());"},{"sha":"c7fc6bb09afa2fed2783db2cc51fb51d736938a4","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":16,"deletions":26,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -81,21 +81,18 @@ public void create() throws InvalidSearchConditionException {\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works\n-        UserRequestService userRequestService2 = setupCredentials(userRequestService, UserRequestService.class, null, null);\n+        UserRequestService userRequestService2 = createServiceInstance(UserRequestService.class, null, null);\n         response = createUserRequest(userRequestService2, new UserRequestTO(userTO));\n \n-        // 5. switch back to admin\n-        super.resetRestTemplate(); // TODO remove after CXF migration is complete\n-\n-        // 6. try to find user\n+        // 5. try to find user\n         AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n         attrCond.setSchema(\"userId\");\n         attrCond.setExpression(userTO.getUsername());\n \n         final List<UserTO> matchingUsers = userService.search(NodeCond.getLeafCond(attrCond));\n         assertTrue(matchingUsers.isEmpty());\n \n-        // 7. actually create user\n+        // 6. actually create user\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n     }\n@@ -122,7 +119,7 @@ public void update() {\n         }\n \n         // 3. auth as user just created\n-        UserRequestService userRequestService2 = setupCredentials(userRequestService, UserRequestService.class,\n+        UserRequestService userRequestService2 = createServiceInstance(UserRequestService.class,\n                 userTO.getUsername(), initialPassword);\n \n         // 4. update with same password: not matching password policy\n@@ -137,27 +134,23 @@ public void update() {\n         userMod.setPassword(\"new\" + initialPassword);\n         createUserRequest(userRequestService2, new UserRequestTO(userMod));\n \n-        // 6. switch back to admin\n-        super.resetRestTemplate();\n-\n-        // 7. user password has not changed yet\n-        UserService userService1 = super.setupCredentials(userService, UserService.class, userTO.getUsername(),\n-                userMod.getPassword());\n+        // 6. user password has not changed yet\n+        UserService userService1 = createServiceInstance(UserService.class,\n+                userTO.getUsername(), userMod.getPassword());\n         try {\n             userService1.readSelf();\n             fail(\"Credentials are not updated yet, thus request should raise AccessControlException\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n-        resetRestTemplate();\n \n-        // 8. actually update user\n+        // 7. actually update user\n         userTO = userService.update(userMod.getId(), userMod);\n         assertNotNull(userTO);\n \n-        // 9. user password has now changed\n-        UserService userService2 = super.setupCredentials(userService, UserService.class, userTO.getUsername(),\n-                userMod.getPassword());\n+        // 8. user password has now changed\n+        UserService userService2 = createServiceInstance(UserService.class,\n+                userTO.getUsername(), userMod.getPassword());\n         try {\n             UserTO user = userService2.readSelf();\n             assertNotNull(user);\n@@ -184,23 +177,20 @@ public void delete() {\n         }\n \n         // 3. auth as user just created\n-        UserRequestService userRequestService2 = setupCredentials(userRequestService, UserRequestService.class,\n+        UserRequestService userRequestService2 = createServiceInstance(UserRequestService.class,\n                 userTO.getUsername(), initialPassword);\n \n         // 4. now request user delete works\n         createUserRequest(userRequestService2, new UserRequestTO(userTO.getId()));\n \n-        // 5. switch back to admin\n-        super.resetRestTemplate();\n-\n-        // 6. user still exists\n+        // 5. user still exists\n         UserTO actual = userService.read(userTO.getId());\n         assertNotNull(actual);\n \n-        // 7. actually delete user\n+        // 6. actually delete user\n         userService.delete(userTO.getId());\n \n-        // 8. user does not exist any more\n+        // 7. user does not exist any more\n         try {\n             userService.read(userTO.getId());\n             fail();\n@@ -209,7 +199,7 @@ public void delete() {\n         }\n     }\n \n-    private Response createUserRequest(UserRequestService service, final UserRequestTO userRequestTO) {\n+    private Response createUserRequest(final UserRequestService service, final UserRequestTO userRequestTO) {\n         Response response = service.create(userRequestTO);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n             throw (RuntimeException) clientExceptionMapper.fromResponse(response);"},{"sha":"732e1cfb0ff8ad4363793a18c24969d11a585901","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":8,"deletions":21,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -128,7 +128,7 @@ public static UserTO getSampleTO(final String email) {\n \n     @Test\n     public void selfRead() {\n-        UserService userService2 = setupCredentials(userService, UserService.class, \"rossini\", ADMIN_PWD);\n+        UserService userService2 = createServiceInstance(UserService.class, \"rossini\", ADMIN_PWD);\n \n         try {\n             userService2.read(1L);\n@@ -452,7 +452,7 @@ public void create() {\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n-        UserService userService1 = super.setupCredentials(userService, UserService.class, newUserTO.getUsername(),\n+        UserService userService1 = createServiceInstance(UserService.class, newUserTO.getUsername(),\n                 \"password123\");\n         try {\n             UserTO user = userService1.readSelf();\n@@ -461,15 +461,14 @@ public void create() {\n             fail(\"Credentials should be valid and not cause AccessControlException\");\n         }\n \n-        UserService userService2 = super.setupCredentials(userService, UserService.class, newUserTO.getUsername(),\n+        UserService userService2 = createServiceInstance(UserService.class, newUserTO.getUsername(),\n                 \"passwordXX\");\n         try {\n             userService2.readSelf();\n             fail(\"Credentials are invalid, thus request should raise AccessControlException\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n-        resetRestTemplate();\n \n         // 4. try (and fail) to create another user with same (unique) values\n         userTO = getSampleTO(userTO.getUsername());\n@@ -560,8 +559,7 @@ public void createWithReject() {\n         assertNull(form.getOwner());\n \n         // 3. claim task from rossini, not in role 7 (designated for approval in workflow definition): fail\n-        UserWorkflowService userService2 =\n-                setupCredentials(userWorkflowService, UserWorkflowService.class, \"rossini\", ADMIN_PWD);\n+        UserWorkflowService userService2 = createServiceInstance(UserWorkflowService.class, \"rossini\", ADMIN_PWD);\n \n         try {\n             userService2.claimForm(form.getTaskId());\n@@ -571,8 +569,7 @@ public void createWithReject() {\n         }\n \n         // 4. claim task from bellini, in role 7\n-        UserWorkflowService userService3 =\n-                setupCredentials(userWorkflowService, UserWorkflowService.class, \"bellini\", ADMIN_PWD);\n+        UserWorkflowService userService3 = createServiceInstance(UserWorkflowService.class, \"bellini\", ADMIN_PWD);\n \n         form = userService3.claimForm(form.getTaskId());\n         assertNotNull(form);\n@@ -593,14 +590,11 @@ public void createWithReject() {\n         Exception exception = null;\n         try {\n             jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\",\n-                    new String[]{userTO.getUsername()}, Integer.class);\n+                    new String[] {userTO.getUsername()}, Integer.class);\n         } catch (EmptyResultDataAccessException e) {\n             exception = e;\n         }\n         assertNotNull(exception);\n-\n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n     }\n \n     @Test\n@@ -1828,15 +1822,8 @@ public void issueSYNCOPE122() {\n         userTO.getResources().clear();\n         userTO.addResource(RESOURCE_NAME_TESTDB);\n         userTO.addResource(\"resource-testdb2\");\n-        try {\n-            userTO = createUser(userTO);\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            // TODO Dirty workaround for AUTO generation Id strategy problem in AbstractVirAttr.\n-            // Must be removed after fix of SYNCOPE-298\n-            SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.DataIntegrityViolation);\n-            assertNotNull(sce);\n-            return;\n-        }\n+        \n+        userTO = createUser(userTO);\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n         assertTrue(userTO.getResources().contains(\"resource-testdb2\"));"},{"sha":"3270a39aa1413fbf51aecb4f3d5bd805902c1c7c","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -26,7 +26,7 @@\n \n import java.util.List;\n \n-import org.apache.syncope.common.to.VirtualSchemaTO;\n+import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n@@ -41,26 +41,26 @@ public class VirtualSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<VirtualSchemaTO> vSchemas = schemaService.list(AttributableType.USER, SchemaType.VIRTUAL);\n+        List<VirSchemaTO> vSchemas = schemaService.list(AttributableType.USER, SchemaType.VIRTUAL);\n         assertFalse(vSchemas.isEmpty());\n-        for (VirtualSchemaTO vSchemaTO : vSchemas) {\n+        for (VirSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n         }\n     }\n \n     @Test\n     public void read() {\n-        VirtualSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL,\n+        VirSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL,\n                 \"mvirtualdata\");\n         assertNotNull(vSchemaTO);\n     }\n \n     @Test\n     public void create() {\n-        VirtualSchemaTO schema = new VirtualSchemaTO();\n+        VirSchemaTO schema = new VirSchemaTO();\n         schema.setName(\"virtual\");\n \n-        VirtualSchemaTO actual = createSchema(AttributableType.USER, SchemaType.VIRTUAL, schema);\n+        VirSchemaTO actual = createSchema(AttributableType.USER, SchemaType.VIRTUAL, schema);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaType.VIRTUAL, actual.getName());\n@@ -69,7 +69,7 @@ public void create() {\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL,\n+        VirSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL,\n                 \"rvirtualdata\");\n         assertNotNull(schema);\n \n@@ -88,7 +88,7 @@ public void delete() {\n \n     @Test\n     public void issueSYNCOPE323() {\n-        VirtualSchemaTO actual = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, \"mvirtualdata\");\n+        VirSchemaTO actual = schemaService.read(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, \"mvirtualdata\");\n         assertNotNull(actual);\n \n         try {"},{"sha":"8eabdce277c2f9c168d53c995673201d544fa099","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/CXFPatchedAuthenticator.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FCXFPatchedAuthenticator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FCXFPatchedAuthenticator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FCXFPatchedAuthenticator.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,70 +0,0 @@\n-package org.apache.syncope.core.rest.jaxrs;\n-\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-import java.net.PasswordAuthentication;\n-\n-import org.apache.cxf.message.Exchange;\n-import org.apache.cxf.message.Message;\n-import org.apache.cxf.phase.PhaseInterceptorChain;\n-import org.apache.cxf.transport.Conduit;\n-import org.apache.cxf.transport.http.CXFAuthenticator;\n-import org.apache.cxf.transport.http.HTTPConduit;\n-\n-/**\n- * To workaround issue https://issues.apache.org/jira/browse/CXF-4815\n- * TODO: remove as soon as we switched to cxf 2.7.3\n- */\n-public class CXFPatchedAuthenticator extends CXFAuthenticator {\n-    \n-    public CXFPatchedAuthenticator() {\n-    }\n-    \n-    protected PasswordAuthentication getPasswordAuthentication() { \n-        PasswordAuthentication auth = null;\n-        Message m = PhaseInterceptorChain.getCurrentMessage();\n-        if (m != null) {\n-            Exchange exchange = m.getExchange();\n-            Conduit conduit = exchange.getConduit(m);\n-            if (conduit instanceof HTTPConduit) {\n-                HTTPConduit httpConduit = (HTTPConduit)conduit;\n-                if (getRequestorType() == RequestorType.PROXY\n-                    && httpConduit.getProxyAuthorization() != null) {\n-                    String un = httpConduit.getProxyAuthorization().getUserName();\n-                    String pwd =  httpConduit.getProxyAuthorization().getPassword();\n-                    if (un != null && pwd != null) {\n-                        auth = new PasswordAuthentication(un, pwd.toCharArray());\n-                    }\n-                } else if (getRequestorType() == RequestorType.SERVER\n-                    && httpConduit.getAuthorization() != null) {\n-                    \n-                    if (\"basic\".equals(getRequestingScheme())\n-                            || \"digest\".equals(getRequestingScheme())) {\n-                        return null;\n-                    }\n-                }\n-            }\n-        }\n-        // else PhaseInterceptorChain.getCurrentMessage() is null,\n-        // this HTTP call has therefore not been generated by CXF\n-        return auth;\n-    }\n-}\n-"},{"sha":"64c6f6129f8399fec2f9c4c810e5f84f4cd890f9","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/ConfigurationTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FConfigurationTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FConfigurationTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FConfigurationTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.ConfigurationTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class ConfigurationTestITCaseJAXRS extends ConfigurationTestITCase {\r\n-\r\n-    public ConfigurationTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"24557136a5383550b8e116de6cdff73a1e8cb049","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/ConnectorTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FConnectorTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FConnectorTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FConnectorTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.ConnInstanceTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class ConnectorTestITCaseJAXRS extends ConnInstanceTestITCase {\r\n-\r\n-    public ConnectorTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"183788e12184b49d6b25946d70ae09a0d858905b","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/DerivedSchemaTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FDerivedSchemaTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FDerivedSchemaTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FDerivedSchemaTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.DerivedSchemaTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class DerivedSchemaTestITCaseJAXRS extends DerivedSchemaTestITCase {\r\n-\r\n-    public DerivedSchemaTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"3a2a19376d6a626c271516f8f4768f9443aef0f5","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/EntitlementTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FEntitlementTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FEntitlementTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FEntitlementTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.AuthenticationTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class EntitlementTestITCaseJAXRS extends AuthenticationTestITCase {\r\n-\r\n-    public EntitlementTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"47fcea72be877172d091a37db88f48a016812dac","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/LoggerTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FLoggerTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FLoggerTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FLoggerTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.LoggerTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class LoggerTestITCaseJAXRS extends LoggerTestITCase {\r\n-\r\n-    public LoggerTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"4983ade4702516a3fcb7973ff89dbd2382e7d4b0","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/NotificationTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FNotificationTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FNotificationTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FNotificationTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.NotificationTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class NotificationTestITCaseJAXRS extends NotificationTestITCase {\r\n-\r\n-    public NotificationTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"3256a5459b923bc5bf1884cb54ec486238672633","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/PolicyTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FPolicyTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FPolicyTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FPolicyTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.PolicyTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class PolicyTestITCaseJAXRS extends PolicyTestITCase {\r\n-\r\n-    public PolicyTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"44e73d47512d178c36d9fde74b6359cb1304bdd7","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/ReportTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FReportTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FReportTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FReportTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.ReportTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class ReportTestITCaseJAXRS extends ReportTestITCase {\r\n-\r\n-    public ReportTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"24bcd27abbff9480e48d04fe087025d0e31b1ca9","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/ResourceTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FResourceTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FResourceTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FResourceTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.ResourceTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class ResourceTestITCaseJAXRS extends ResourceTestITCase {\r\n-\r\n-    public ResourceTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"470a21fd7fac1e32a817511f1df41bb2295b7d45","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/RoleTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FRoleTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FRoleTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FRoleTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.RoleTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class RoleTestITCaseJAXRS extends RoleTestITCase {\r\n-\r\n-    public RoleTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"3c0c642e78df03730625e0bacd10a4a6da8e9825","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/SchemaTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSchemaTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSchemaTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSchemaTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.SchemaTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class SchemaTestITCaseJAXRS extends SchemaTestITCase {\r\n-\r\n-    public SchemaTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"0a0c232de0142b27a31aa4664ddd867bda994035","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/SearchTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSearchTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSearchTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSearchTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.SearchTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class SearchTestITCaseJAXRS extends SearchTestITCase {\r\n-\r\n-    public SearchTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"34f5b59fae7f83b510a7df63a284326943321253","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/TaskTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FTaskTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FTaskTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FTaskTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.TaskTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class TaskTestITCaseJAXRS extends TaskTestITCase {\r\n-\r\n-    public TaskTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"342edf8306359550eb1bdcee01371bf47585d0b0","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/UserRequestTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FUserRequestTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FUserRequestTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FUserRequestTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.UserRequestTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class UserRequestTestITCaseJAXRS extends UserRequestTestITCase {\r\n-\r\n-    public UserRequestTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"11d47920423ef5cc6aaaa138c11e123188edc980","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/UserTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FUserTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FUserTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FUserTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.UserTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class UserTestITCaseJAXRS extends UserTestITCase {\r\n-\r\n-    public UserTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"b4c2cde7c815306bfeb7203b16ad778a111c075d","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/VirtualSchemaTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FVirtualSchemaTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FVirtualSchemaTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FVirtualSchemaTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.VirtualSchemaTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class VirtualSchemaTestITCaseJAXRS extends VirtualSchemaTestITCase {\r\n-\r\n-    public VirtualSchemaTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"465faacdc48850c6aa0e20616ba2faf536331b7d","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/WorkflowTestITCaseJAXRS.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FWorkflowTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2933aca8005d8d9daf93303e149dec0fbe642952/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FWorkflowTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FWorkflowTestITCaseJAXRS.java?ref=2933aca8005d8d9daf93303e149dec0fbe642952","patch":"@@ -1,32 +0,0 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.syncope.core.rest.jaxrs;\r\n-\r\n-import org.apache.syncope.core.rest.WorkflowTestITCase;\r\n-import org.junit.FixMethodOrder;\r\n-import org.junit.runners.MethodSorters;\r\n-\r\n-@FixMethodOrder(MethodSorters.JVM)\r\n-public class WorkflowTestITCaseJAXRS extends WorkflowTestITCase {\r\n-\r\n-    public WorkflowTestITCaseJAXRS() {\r\n-        super();\r\n-        setEnabledCXF(true);\r\n-    }\r\n-}\r"},{"sha":"a4e0ccfbde6c66cbb67563e91ad99fea821d9ca5","filename":"core/src/test/resources/restClientContext.xml","status":"modified","additions":1,"deletions":58,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -25,64 +25,8 @@ under the License.\n                            http://cxf.apache.org/core \n                            http://cxf.apache.org/schemas/core.xsd\">\n \n-  <bean id=\"httpClientConnManager\"\n-        class=\"org.apache.http.impl.conn.PoolingClientConnectionManager\"/>\n-\n-  <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n-    <property name=\"parameterMap\">\n-      <map key-type=\"java.lang.String\">\n-        <entry>\n-          <key>\n-            <value>http.protocol.handle-authentication</value>\n-          </key>\n-          <value type=\"java.lang.Boolean\">\n-            false\n-          </value>\n-        </entry>\n-      </map>\n-    </property>\n-  </bean>\n-\n-  <bean id=\"httpClientFactory\"\n-        class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n-    <constructor-arg value=\"localhost\"/>\n-    <constructor-arg value=\"9080\"/>\n-    <constructor-arg value=\"http\"/>\n-    <constructor-arg ref=\"httpClientConnManager\"/>\n-    <constructor-arg ref=\"httpClientParams\"/>\n-  </bean>\n-\n-  <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n-    <constructor-arg ref=\"httpClientFactory\"/>\n-    <property name=\"messageConverters\">\n-      <list>\n-        <ref bean=\"mappingJacksonHttpMessageConverter\"/>\n-        <ref bean=\"mappingXstreamHttpMessageConverter\"/>\n-      </list>\n-    </property>\n-    <property name=\"errorHandler\">\n-      <bean id=\"syncopeClientErrorHandler\"\n-            class=\"org.apache.syncope.common.validation.SyncopeClientErrorHandler\"/>\n-    </property>\n-  </bean>\n-\n-  <!-- JSON (via Jackson) -->\n   <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\"/>\n-  <bean id=\"mappingJacksonHttpMessageConverter\" \n-        class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n-    <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n-  </bean>\n-\n-  <!-- XML (via XStream) -->\n-  <bean id=\"xStreamXmlMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n-    <property name=\"autodetectAnnotations\" value=\"true\"/>\n-  </bean>\n-  <bean id=\"mappingXstreamHttpMessageConverter\"\n-        class=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n-    <constructor-arg ref=\"xStreamXmlMarshaller\"/>\n-  </bean>\n \n-  <!-- CXF Configuration - BEGIN -->\n   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n     <property name=\"depthProperties\">\n       <bean id=\"depthProperties\" class=\"org.apache.cxf.staxutils.DocumentDepthProperties\">\n@@ -105,7 +49,7 @@ under the License.\n   <bean id=\"exceptionMapper\" class=\"org.apache.syncope.client.rest.RestClientExceptionMapper\"/>\n \n   <bean id=\"restClientFactory\" class=\"org.apache.syncope.client.rest.RestClientFactoryBean\">\n-    <property name=\"address\" value=\"http://localhost:9080/syncope/cxf\"/>\n+    <property name=\"address\" value=\"http://localhost:9080/syncope/rest\"/>\n     <property name=\"threadSafe\" value=\"true\"/>\n     <property name=\"inheritHeaders\" value=\"true\"/>\n     <property name=\"contentType\" value=\"application/xml\"/>\n@@ -122,6 +66,5 @@ under the License.\n       </list>\n     </property>\n   </bean>\n-  <!-- CXF Configuration - END -->\n \n </beans>"},{"sha":"0d2674d9187e00e6c68d76ac1d2ab25218d9781c","filename":"pom.xml","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a653c92daef9621cc507c7621f0ec05bc2e6195/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a653c92daef9621cc507c7621f0ec05bc2e6195/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=2a653c92daef9621cc507c7621f0ec05bc2e6195","patch":"@@ -304,7 +304,7 @@ under the License.\n \n     <activiti.version>5.13</activiti.version>\n \n-    <cxf.version>2.7.6-SNAPSHOT</cxf.version>\t\n+    <cxf.version>2.7.7-SNAPSHOT</cxf.version>\t\n     <spring.version>3.2.3.RELEASE</spring.version>\n     <spring-security.version>3.1.4.RELEASE</spring-security.version>\n     <aspectj.version>1.7.3</aspectj.version>\n@@ -554,11 +554,6 @@ under the License.\n         <artifactId>spring-web</artifactId>\n         <version>${spring.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.springframework</groupId>\n-        <artifactId>spring-webmvc</artifactId>\n-        <version>${spring.version}</version>\n-      </dependency>\n       <dependency>\n         <groupId>org.springframework</groupId>\n         <artifactId>spring-oxm</artifactId>"}]}