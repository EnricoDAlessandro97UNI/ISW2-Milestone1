{"sha":"d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQyNjI5ZDlmNDY1ZjAzYzU0MDJiYjZjNzFjN2NiZTJjN2NkOGM1NzU=","commit":{"author":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-06-20T11:37:05Z"},"committer":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2014-06-20T11:37:05Z"},"message":"[SYNCOPE-505] - Finished with DB Propagation Action\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1604144 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a584d67d90a8137a24069da7a86a3a8fe025649d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a584d67d90a8137a24069da7a86a3a8fe025649d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"17fd6670657cff47ef5008d36fdf8d4a26aa2efd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/17fd6670657cff47ef5008d36fdf8d4a26aa2efd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/17fd6670657cff47ef5008d36fdf8d4a26aa2efd"}],"stats":{"total":75,"additions":61,"deletions":14},"files":[{"sha":"7157907ad634340e29004c5df3e3148c66c90a1c","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/DBPasswordPropagationActions.java","status":"modified","additions":45,"deletions":2,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FDBPasswordPropagationActions.java?ref=d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575","patch":"@@ -19,9 +19,13 @@\n package org.apache.syncope.core.propagation.impl;\n \n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.Set;\n \n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n@@ -38,9 +42,12 @@\n \n /**\n  * Propagate a non-cleartext password out to a resource, if the PropagationManager has not already\n- * added a password.\n+ * added a password. The CipherAlgorithm associated with the password must match the password\n+ * cipher algorithm property of the DB Connector.\n  */\n public class DBPasswordPropagationActions extends DefaultPropagationActions {\n+    \n+    private static final String CLEARTEXT = \"CLEARTEXT\";\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -52,12 +59,16 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n \n         if (AttributableType.USER == task.getSubjectType()) {\n             SyncopeUser user = userDAO.find(task.getSubjectId());\n+            \n             if (user != null && user.getPassword() != null) {\n                 Attribute missing = AttributeUtil.find(\n                         PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME,\n                         task.getAttributes());\n+                \n+                ConnInstance connInstance = task.getResource().getConnector();\n                 if (missing != null && missing.getValue() != null && missing.getValue().size() == 1\n-                        && missing.getValue().get(0).equals(OperationalAttributes.PASSWORD_NAME)) {\n+                        && missing.getValue().get(0).equals(OperationalAttributes.PASSWORD_NAME)\n+                        && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgorithm())) {\n \n                     Attribute passwordAttribute = AttributeBuilder.buildPassword(\n                             new GuardedString(user.getPassword().toCharArray()));\n@@ -75,5 +86,37 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n             }\n         }\n     }\n+    \n+    private String getCipherAlgorithm(ConnInstance connInstance) {\n+        String cipherAlgorithm = CLEARTEXT;\n+        for (Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n+                propertyIterator.hasNext();) {\n+\n+            ConnConfProperty property = propertyIterator.next();\n+            if (\"cipherAlgorithm\".equals(property.getSchema().getName())\n+                    && property.getValues() != null && !property.getValues().isEmpty()) {\n+\n+                return (String) property.getValues().get(0);\n+            }\n+        }\n+        return cipherAlgorithm;\n+    }\n+    \n+    private boolean cipherAlgorithmMatches(String connectorAlgorithm, CipherAlgorithm userAlgorithm) {\n+        if (userAlgorithm == null) {\n+            return false;\n+        }\n+    \n+        if (connectorAlgorithm.equals(userAlgorithm.name())) {\n+            return true;\n+        }\n+        \n+        // Special check for \"SHA\" (user sync'd from LDAP)\n+        if (\"SHA1\".equals(connectorAlgorithm) && \"SHA\".equals(userAlgorithm.name())) {\n+            return true;\n+        }\n+        \n+        return false;\n+    }\n \n }"},{"sha":"2b704e2f34ee6296d9c35a1a8126b70a361cad79","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/DBPasswordSyncActions.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FDBPasswordSyncActions.java?ref=d2629d9f465f03c5402bb6c71c7cbe2c7cd8c575","patch":"@@ -68,18 +68,7 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n                 Connector connector = handler.getConnector();\n                 ConnInstance connInstance = connector.getActiveConnInstance();\n                 \n-                String cipherAlgorithm = CLEARTEXT;\n-                boolean found = false;\n-                for (Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n-                        propertyIterator.hasNext() && !found;) {\n-\n-                    ConnConfProperty property = propertyIterator.next();\n-                    if (\"cipherAlgorithm\".equals(property.getSchema().getName())\n-                            && property.getValues() != null && !property.getValues().isEmpty()) {\n-\n-                        cipherAlgorithm = (String) property.getValues().get(0);\n-                    }\n-                }\n+                String cipherAlgorithm = getCipherAlgorithm(connInstance);\n                 if (!CLEARTEXT.equals(cipherAlgorithm)) {\n                     try {\n                         encodedPassword = password;\n@@ -94,6 +83,21 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n \n         return delta;\n     }\n+    \n+    private String getCipherAlgorithm(ConnInstance connInstance) {\n+        String cipherAlgorithm = CLEARTEXT;\n+        for (Iterator<ConnConfProperty> propertyIterator = connInstance.getConfiguration().iterator();\n+                propertyIterator.hasNext();) {\n+\n+            ConnConfProperty property = propertyIterator.next();\n+            if (\"cipherAlgorithm\".equals(property.getSchema().getName())\n+                    && property.getValues() != null && !property.getValues().isEmpty()) {\n+\n+                return (String) property.getValues().get(0);\n+            }\n+        }\n+        return cipherAlgorithm;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override"}]}