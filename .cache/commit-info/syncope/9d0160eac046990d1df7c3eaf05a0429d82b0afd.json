{"sha":"9d0160eac046990d1df7c3eaf05a0429d82b0afd","node_id":"C_kwDOJfYA1toAKDlkMDE2MGVhYzA0Njk5MGQxZGY3YzNlYWYwNWEwNDI5ZDgyYjBhZmQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-03-04T11:49:39Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-03-04T11:49:39Z"},"message":"[SYNCOPE-1652] Add missing conf items (#320)","tree":{"sha":"1f363348a49f616c9971b62ea6d7e3516a4221e4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1f363348a49f616c9971b62ea6d7e3516a4221e4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9d0160eac046990d1df7c3eaf05a0429d82b0afd","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIfzTCRBK7hj4Ov3rIwAAhFUIABDBLl9BlJUz0/GWmnt8DRUU\nMvFBlTA+6xcjREphnRP1zSx4XAeHNLLur7FZetgAFuwgNoxRFeU3n6M4vazCQpHS\nn0xWZvmdOMG5XDJZDw1DeU/z6TBOJuP3sk3pjTZZ7uLSEV+T/M3Frx/hkKjxCmHM\nkhr1tM5Qfm8RACml8Vu4q/UKQrDz8VnGSBBiDxVC7yaHxDIpZJmF7zQAXFRrrDYj\nC9aaFnfo0PAxRVbWohNHsFIrSOADJqckPknNHq6Ny+3PN/BXIfzmI52Y2fglHyRZ\n+XJwfWI0fH8Pk4IcCQ0faUd5l8/NDN1lbMOEnN4mmT6vQ0kUCCVotfS2RtQaj14=\n=3GS0\n-----END PGP SIGNATURE-----\n","payload":"tree 1f363348a49f616c9971b62ea6d7e3516a4221e4\nparent d7ea8bf986fea4885c91ce151b18a79da6bc5e5b\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1646394579 +0100\ncommitter GitHub <noreply@github.com> 1646394579 +0100\n\n[SYNCOPE-1652] Add missing conf items (#320)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9d0160eac046990d1df7c3eaf05a0429d82b0afd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9d0160eac046990d1df7c3eaf05a0429d82b0afd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9d0160eac046990d1df7c3eaf05a0429d82b0afd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"d7ea8bf986fea4885c91ce151b18a79da6bc5e5b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d7ea8bf986fea4885c91ce151b18a79da6bc5e5b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d7ea8bf986fea4885c91ce151b18a79da6bc5e5b"}],"stats":{"total":409,"additions":346,"deletions":63},"files":[{"sha":"c185b55d1a6edd7f96118eb56ede301afb3ccba5","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/commons/AMConstants.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -32,8 +32,7 @@ public final class AMConstants {\n \n     public static final String PREF_CLIENTAPP_PROPERTIES_PAGINATOR_ROWS = \"clientapp.properties.paginator.rows\";\n \n-    public static final String PREF_ACCESS_POLICY_CONF_REQUIRED_ATTRS_PAGINATOR_ROWS =\n-            \"accesspolicy.conf.requiredattrs.paginator.rows\";\n+    public static final String PREF_ACCESS_POLICY_CONF_ATTRS_PAGINATOR_ROWS = \"accesspolicy.conf.attrs.paginator.rows\";\n \n     public static final String PREF_SAML2_IDP_ENTITY_PAGINATOR_ROWS = \"saml2idpentity.properties.paginator.rows\";\n "},{"sha":"66bba51a52d9da0b4c0d907a3a8fc3a14371784d","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteWizardBuilder.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.net.URI;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.client.console.rest.SRARouteRestClient;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -82,16 +83,12 @@ public Profile(final SRARouteTO route) {\n \n                 @Override\n                 public String getObject() {\n-                    return route.getTarget() == null ? null : route.getTarget().toASCIIString();\n+                    return Optional.ofNullable(route.getTarget()).map(URI::toASCIIString).orElse(null);\n                 }\n \n                 @Override\n                 public void setObject(final String object) {\n-                    if (object == null) {\n-                        route.setTarget(null);\n-                    } else {\n-                        route.setTarget(URI.create(object));\n-                    }\n+                    route.setTarget(Optional.ofNullable(object).map(URI::create).orElse(null));\n                 }\n             }, false);\n             target.addRequiredLabel().setEnabled(true);"},{"sha":"2aa3058d0b01a8b72111b0a22c7206685908fddb","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyAttrsDirectoryPanel.java","status":"renamed","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyAttrsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyAttrsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyAttrsDirectoryPanel.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -18,44 +18,54 @@\n  */\n package org.apache.syncope.client.console.policies;\n \n+import java.io.Serializable;\n import java.util.List;\n+import java.util.function.Function;\n import org.apache.syncope.client.console.commons.AMConstants;\n import org.apache.syncope.client.console.panels.AttrListDirectoryPanel;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.model.IModel;\n \n-public class AccessPolicyRequiredAttrsDirectoryPanel extends AttrListDirectoryPanel {\n+public class AccessPolicyAttrsDirectoryPanel extends AttrListDirectoryPanel {\n \n-    private static final long serialVersionUID = 1L;\n+    public interface AttrsAccessor extends Function<AccessPolicyConf, List<Attr>>, Serializable {\n+    }\n+\n+    private static final long serialVersionUID = 33604877627114L;\n \n     private final BaseModal<AccessPolicyTO> wizardModal;\n \n     private final IModel<AccessPolicyTO> model;\n \n-    public AccessPolicyRequiredAttrsDirectoryPanel(\n+    private final AttrsAccessor attrsAccessor;\n+\n+    public AccessPolicyAttrsDirectoryPanel(\n             final String id,\n             final BaseModal<AccessPolicyTO> wizardModal,\n             final IModel<AccessPolicyTO> model,\n+            final AttrsAccessor attrsAccessor,\n             final PageReference pageRef) {\n \n         super(id, pageRef, false);\n \n         this.wizardModal = wizardModal;\n         this.model = model;\n+        this.attrsAccessor = attrsAccessor;\n \n         setOutputMarkupId(true);\n \n         enableUtilityButton();\n         setFooterVisibility(false);\n \n         addNewItemPanelBuilder(\n-                new AccessPolicyRequiredAttrsWizardBuilder(model.getObject(), new Attr(), pageRef), true);\n+                new AccessPolicyAttrsWizardBuilder(model.getObject(), attrsAccessor, new Attr(), pageRef), true);\n \n         initResultTable();\n     }\n@@ -75,25 +85,25 @@ public void onEvent(final IEvent<?> event) {\n \n     @Override\n     protected AttrListProvider dataProvider() {\n-        return new AccessPolicyRequiredAttrsProvider(rows);\n+        return new AccessPolicyAttrsProvider(rows);\n     }\n \n     @Override\n     protected String paginatorRowsKey() {\n-        return AMConstants.PREF_ACCESS_POLICY_CONF_REQUIRED_ATTRS_PAGINATOR_ROWS;\n+        return AMConstants.PREF_ACCESS_POLICY_CONF_ATTRS_PAGINATOR_ROWS;\n     }\n \n-    protected final class AccessPolicyRequiredAttrsProvider extends AttrListProvider {\n+    protected final class AccessPolicyAttrsProvider extends AttrListProvider {\n \n         private static final long serialVersionUID = -185944053385660794L;\n \n-        private AccessPolicyRequiredAttrsProvider(final int paginatorRows) {\n+        private AccessPolicyAttrsProvider(final int paginatorRows) {\n             super(paginatorRows);\n         }\n \n         @Override\n         protected List<Attr> list() {\n-            return model.getObject().getConf().getRequiredAttrs();\n+            return attrsAccessor.apply(model.getObject().getConf());\n         }\n     }\n }","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyRequiredAttrsDirectoryPanel.java"},{"sha":"61c9684f45686eea7550b8239583164ae2be3b4c","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyAttrsWizardBuilder.java","status":"renamed","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyAttrsWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyAttrsWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyAttrsWizardBuilder.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -26,25 +26,29 @@\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n \n-public class AccessPolicyRequiredAttrsWizardBuilder extends AttrWizardBuilder {\n+public class AccessPolicyAttrsWizardBuilder extends AttrWizardBuilder {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 33625775269155L;\n \n     private final AccessPolicyTO accessPolicy;\n \n-    public AccessPolicyRequiredAttrsWizardBuilder(\n+    private final AccessPolicyAttrsDirectoryPanel.AttrsAccessor attrsAccessor;\n+\n+    public AccessPolicyAttrsWizardBuilder(\n             final AccessPolicyTO accessPolicy,\n+            final AccessPolicyAttrsDirectoryPanel.AttrsAccessor attrsAccessor,\n             final Attr attr,\n             final PageReference pageRef) {\n \n         super(attr, pageRef);\n         this.accessPolicy = accessPolicy;\n+        this.attrsAccessor = attrsAccessor;\n     }\n \n     @Override\n     protected Serializable onApplyInternal(final Attr modelObject) {\n-        accessPolicy.getConf().getRequiredAttrs().removeIf(p -> modelObject.getSchema().equals(p.getSchema()));\n-        accessPolicy.getConf().getRequiredAttrs().add(modelObject);\n+        attrsAccessor.apply(accessPolicy.getConf()).removeIf(p -> modelObject.getSchema().equals(p.getSchema()));\n+        attrsAccessor.apply(accessPolicy.getConf()).add(modelObject);\n \n         PolicyRestClient.update(PolicyType.ACCESS, accessPolicy);\n ","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyRequiredAttrsWizardBuilder.java"},{"sha":"86fe8f414747baabb7691868f382712add4a129f","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/policies/AccessPolicyDirectoryPanel.java","status":"modified","additions":39,"deletions":3,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FAccessPolicyDirectoryPanel.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -32,6 +33,7 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n@@ -54,10 +56,15 @@ public AccessPolicyDirectoryPanel(final String id, final PageReference pageRef)\n \n     @Override\n     protected void addCustomColumnFields(final List<IColumn<AccessPolicyTO, String>> columns) {\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"order\", this), \"order\", \"order\"));\n         columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"enabled\", this), \"enabled\", \"enabled\"));\n         columns.add(new BooleanPropertyColumn<>(\n                 new StringResourceModel(\"ssoEnabled\", this), \"ssoEnabled\", \"ssoEnabled\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"requireAllAttributes\", this), \"requireAllAttributes\", \"requireAllAttributes\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"caseInsensitive\", this), \"caseInsensitive\", \"caseInsensitive\"));\n     }\n \n     @Override\n@@ -73,12 +80,41 @@ public void onClick(final AjaxRequestTarget target, final AccessPolicyTO ignore)\n                     model.getObject().setConf(new DefaultAccessPolicyConf());\n                 }\n                 target.add(ruleCompositionModal.setContent(new ModalDirectoryPanel<>(\n-                    ruleCompositionModal,\n-                    new AccessPolicyRequiredAttrsDirectoryPanel(\"panel\", ruleCompositionModal, model, pageRef),\n-                    pageRef)));\n+                        ruleCompositionModal,\n+                        new AccessPolicyAttrsDirectoryPanel(\n+                                \"panel\",\n+                                ruleCompositionModal,\n+                                model,\n+                                AccessPolicyConf::getRequiredAttrs,\n+                                pageRef),\n+                        pageRef)));\n                 ruleCompositionModal.header(new Model<>(getString(\"requiredAttrs.title\", model)));\n                 ruleCompositionModal.show(true);\n             }\n         }, ActionLink.ActionType.TYPE_EXTENSIONS, IdRepoEntitlement.POLICY_UPDATE);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final AccessPolicyTO ignore) {\n+                model.setObject(PolicyRestClient.read(type, model.getObject().getKey()));\n+                if (model.getObject().getConf() == null) {\n+                    model.getObject().setConf(new DefaultAccessPolicyConf());\n+                }\n+                target.add(ruleCompositionModal.setContent(new ModalDirectoryPanel<>(\n+                        ruleCompositionModal,\n+                        new AccessPolicyAttrsDirectoryPanel(\n+                                \"panel\",\n+                                ruleCompositionModal,\n+                                model,\n+                                AccessPolicyConf::getRejectedAttrs,\n+                                pageRef),\n+                        pageRef)));\n+                ruleCompositionModal.header(new Model<>(getString(\"rejectedAttrs.title\", model)));\n+                ruleCompositionModal.show(true);\n+            }\n+        }, ActionLink.ActionType.CLAIM, IdRepoEntitlement.POLICY_UPDATE);\n     }\n }"},{"sha":"6e3a06af83af6387976db7653cfd556b1e82ba42","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRA_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_it.properties?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -17,7 +17,7 @@\n sra=SRA\n routes=Rotte\n metrics=Metriche\n-order=Ordine\n+order=Ordinamento\n target=Obiettivo\n type=Tipo\n any.new=Nuova rotta del gateway"},{"sha":"f7807864d5b0d944b899a3884737c6e402a13350","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.client.console.policies;\n \n import java.io.Serializable;\n+import java.net.URI;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -39,14 +41,19 @@\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.Application;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n+import org.apache.wicket.core.util.lang.PropertyResolverConverter;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.validation.validator.UrlValidator;\n \n public class PolicyModalPanelBuilder<T extends PolicyTO> extends AbstractModalPanelBuilder<T> {\n \n@@ -140,6 +147,11 @@ protected List<String> load() {\n                     break;\n \n                 case ACCESS:\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                            \"field\",\n+                            \"order\",\n+                            Integer.class,\n+                            new PropertyModel<>(policyTO, \"order\")));\n                     fields.add(new AjaxCheckBoxPanel(\n                             \"field\",\n                             \"enabled\",\n@@ -150,6 +162,42 @@ protected List<String> load() {\n                             \"ssoEnabled\",\n                             new PropertyModel<>(policyTO, \"ssoEnabled\"),\n                             false));\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\",\n+                            \"requireAllAttributes\",\n+                            new PropertyModel<>(policyTO, \"requireAllAttributes\"),\n+                            false));\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\",\n+                            \"caseInsensitive\",\n+                            new PropertyModel<>(policyTO, \"caseInsensitive\"),\n+                            false));\n+                    AjaxTextFieldPanel unauthorizedRedirectUrl = new AjaxTextFieldPanel(\n+                            \"field\",\n+                            \"unauthorizedRedirectUrl\",\n+                            new IModel<>() {\n+\n+                        @Override\n+                        public String getObject() {\n+                            return Optional.ofNullable(\n+                                    (URI) PropertyResolver.getValue(\"unauthorizedRedirectUrl\", policyTO)).\n+                                    map(URI::toASCIIString).orElse(null);\n+                        }\n+\n+                        @Override\n+                        public void setObject(final String object) {\n+                            PropertyResolverConverter prc = new PropertyResolverConverter(\n+                                    Application.get().getConverterLocator(),\n+                                    SyncopeConsoleSession.get().getLocale());\n+                            PropertyResolver.setValue(\n+                                    \"unauthorizedRedirectUrl\",\n+                                    policyTO,\n+                                    Optional.ofNullable(object).map(URI::create).orElse(null),\n+                                    prc);\n+                        }\n+                    }, false);\n+                    unauthorizedRedirectUrl.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n+                    fields.add(unauthorizedRedirectUrl);\n                     break;\n \n                 case ATTR_RELEASE:"},{"sha":"ce8efc3c3436478ed34d818b8515ee8ae43e032d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -32,7 +32,10 @@ conflictResolutionAction=Conflict Resolution Action\n enabled=Enabled\n ssoEnabled=SSO Enabled\n requiredAttrs.title=Required Attributes\n-type_extensions.title=configuration\n+type_extensions.title=required attributes\n+type_extensions.class=fas fa-check-circle\n+claim.title=rejected attributes\n+claim.class=far fa-check-circle\n status=Status\n allowedAttrs=Allowed Attributes\n excludedAttrs=Excluded Attributes\n@@ -41,3 +44,8 @@ attrReleasePolicyConf.title=Attribute Release Configuration\n authPolicyConf.title=Authentication Configuration\n tryAll=Try All\n authModules=Authentication Modules\n+requireAllAttributes=Require All Attributes\n+caseInsensitive=Case Insensitive\n+order=Order\n+rejectedAttrs.title=Rejected Attributes\n+unauthorizedRedirectUrl=Unauthorized Redirect URL"},{"sha":"7058996edda02dce28198d1723eaf83af1dff20a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_fr_CA.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -32,7 +32,10 @@ conflictResolutionAction=Action de r\\u00e9solution des conflits\n enabled=Enabled\n ssoEnabled=SSO Enabled\n requiredAttrs.title=Required Attributes\n-type_extensions.title=configuration\n+type_extensions.title=required attributes\n+type_extensions.class=fas fa-check-circle\n+claim.title=rejected attributes\n+claim.class=far fa-check-circle\n status=Status\n allowedAttrs=Allowed Attributes\n excludedAttrs=Excluded Attributes\n@@ -41,3 +44,8 @@ attrReleasePolicyConf.title=Attribute Release Configuration\n authPolicyConf.title=Authentication Configuration\n tryAll=Try All\n authModules=Authentication Modules\n+requireAllAttributes=Require All Attributes\n+caseInsensitive=Case Insensitive\n+order=Order\n+rejectedAttrs.title=Rejected Attributes\n+unauthorizedRedirectUrl=Unauthorized Redirect URL"},{"sha":"284fdc3770d0aa344993faf59e81f02d46c90676","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -32,7 +32,10 @@ conflictResolutionAction=Azione di Risoluzione Conflitti\n enabled=Abilitata\n ssoEnabled=SSO Abilitato\n requiredAttrs.title=Attributi Richiesti\n-type_extensions.title=configurazione\n+type_extensions.title=attributi richiesti\n+type_extensions.class=fas fa-check-circle\n+claim.title=attributi rifiutati\n+claim.class=far fa-check-circle\n status=Stato\n allowedAttrs=Attributi Consentiti\n excludedAttrs=Attributi Esclusi\n@@ -41,3 +44,8 @@ attrReleasePolicyConf.title=Configurazione Rilascio Attributi\n authPolicyConf.title=Configurazione Autenticazione\n tryAll=Prova Tutti\n authModules=Moduli di Authenticazione\n+requireAllAttributes=Attributi Obbligatori\n+caseInsensitive=Case Insensitive\n+order=Ordinamento\n+rejectedAttrs.title=Attributi Rifiutati\n+unauthorizedRedirectUrl=URL di Ridirezione Per Mancata Autorizzazione"},{"sha":"dbf0ee14a3629d945f01e2cf8fd432cfa27bc671","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -32,7 +32,10 @@ conflictResolutionAction=\\u7af6\\u5408\\u89e3\\u6c7a\\u30a2\\u30af\\u30b7\\u30e7\\u30f3\n enabled=Enabled\n ssoEnabled=SSO Enabled\n requiredAttrs.title=Required Attributes\n-type_extensions.title=configuration\n+type_extensions.title=required attributes\n+type_extensions.class=fas fa-check-circle\n+claim.title=rejected attributes\n+claim.class=far fa-check-circle\n status=Status\n allowedAttrs=Allowed Attributes\n excludedAttrs=Excluded Attributes\n@@ -41,3 +44,8 @@ attrReleasePolicyConf.title=Attribute Release Configuration\n authPolicyConf.title=Authentication Configuration\n tryAll=Try All\n authModules=Authentication Modules\n+requireAllAttributes=Require All Attributes\n+caseInsensitive=Case Insensitive\n+order=Order\n+rejectedAttrs.title=Rejected Attributes\n+unauthorizedRedirectUrl=Unauthorized Redirect URL"},{"sha":"322079e233105f50324e16791b65eb30d427bd3b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -32,7 +32,10 @@ conflictResolutionAction=Conflict Resolution Action\n enabled=Enabled\n ssoEnabled=SSO Enabled\n requiredAttrs.title=Required Attributes\n-type_extensions.title=configuration\n+type_extensions.title=required attributes\n+type_extensions.class=fas fa-check-circle\n+claim.title=rejected attributes\n+claim.class=far fa-check-circle\n status=Status\n allowedAttrs=Allowed Attributes\n excludedAttrs=Excluded Attributes\n@@ -41,3 +44,8 @@ attrReleasePolicyConf.title=Attribute Release Configuration\n authPolicyConf.title=Authentication Configuration\n tryAll=Try All\n authModules=Authentication Modules\n+requireAllAttributes=Require All Attributes\n+caseInsensitive=Case Insensitive\n+order=Order\n+rejectedAttrs.title=Rejected Attributes\n+unauthorizedRedirectUrl=Unauthorized Redirect URL"},{"sha":"9c399562fb0026971513b6f1a5deaefbd291eb7e","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -33,7 +33,10 @@ conflictResolutionAction=Conflict Resolution Action\n enabled=Enabled\n ssoEnabled=SSO Enabled\n requiredAttrs.title=Required Attributes\n-type_extensions.title=configuration\n+type_extensions.title=required attributes\n+type_extensions.class=fas fa-check-circle\n+claim.title=rejected attributes\n+claim.class=far fa-check-circle\n status=Status\n allowedAttrs=Allowed Attributes\n excludedAttrs=Excluded Attributes\n@@ -42,3 +45,8 @@ attrReleasePolicyConf.title=Attribute Release Configuration\n authPolicyConf.title=Authentication Configuration\n tryAll=Try All\n authModules=Authentication Modules\n+requireAllAttributes=Require All Attributes\n+caseInsensitive=Case Insensitive\n+order=Order\n+rejectedAttrs.title=Rejected Attributes\n+unauthorizedRedirectUrl=Unauthorized Redirect URL"},{"sha":"e70468f52b16d747b62ad761eb16548cb637d305","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/Groups.java","status":"modified","additions":19,"deletions":25,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FGroups.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -124,39 +124,39 @@ public String getIdValue(final MembershipTO object, final int index) {\n \n                         @Override\n                         public MembershipTO getObject(\n-                            final String id, final IModel<? extends List<? extends MembershipTO>> choices) {\n+                                final String id, final IModel<? extends List<? extends MembershipTO>> choices) {\n \n                             return choices.getObject().stream().\n-                                filter(object -> id.equalsIgnoreCase(object.getGroupName())).findAny().orElse(null);\n+                                    filter(object -> id.equalsIgnoreCase(object.getGroupName())).findAny().orElse(null);\n                         }\n                     }).event(getEventFunction());\n \n             groupsContainer.add(builder.setAllowOrder(true).withFilter().build(\"groups\",\n-                new ListModel<>() {\n+                    new ListModel<>() {\n \n-                    private static final long serialVersionUID = -2583290457773357445L;\n+                private static final long serialVersionUID = -2583290457773357445L;\n \n-                    @Override\n-                    public List<MembershipTO> getObject() {\n-                        return Groups.this.groupsModel.getMemberships();\n-                    }\n+                @Override\n+                public List<MembershipTO> getObject() {\n+                    return Groups.this.groupsModel.getMemberships();\n+                }\n \n-                }, new AjaxPalettePanel.Builder.Query<>() {\n+            }, new AjaxPalettePanel.Builder.Query<>() {\n \n-                    private static final long serialVersionUID = -7223078772249308813L;\n+                private static final long serialVersionUID = -7223078772249308813L;\n \n-                    @Override\n-                    public List<MembershipTO> execute(final String filter) {\n-                        return (StringUtils.isEmpty(filter) || \"*\".equals(filter)\n+                @Override\n+                public List<MembershipTO> execute(final String filter) {\n+                    return (StringUtils.isEmpty(filter) || \"*\".equals(filter)\n                             ? groupsModel.getObject()\n                             : GroupRestClient.searchAssignableGroups(\n-                            anyTO.getRealm(),\n-                            filter,\n-                            1, MAX_GROUP_LIST_CARDINALITY)).stream()\n+                                    anyTO.getRealm(),\n+                                    filter,\n+                                    1, MAX_GROUP_LIST_CARDINALITY)).stream()\n                             .map(input -> new MembershipTO.Builder(input.getKey())\n-                                .groupName(input.getName()).build()).collect(Collectors.toList());\n-                    }\n-                }).hideLabel().setOutputMarkupId(true));\n+                            .groupName(input.getName()).build()).collect(Collectors.toList());\n+                }\n+            }).hideLabel().setOutputMarkupId(true));\n             // ---------------------------------\n         }\n     }\n@@ -171,12 +171,6 @@ protected class EnduserGroupsModel extends AbstractGroupsModel {\n \n         private static final long serialVersionUID = -4541954630939063927L;\n \n-        private List<GroupTO> groups;\n-\n-        private List<MembershipTO> memberships;\n-\n-        private String realm;\n-\n         @Override\n         public List<GroupTO> getObject() {\n             reload();"},{"sha":"24025d277472a478b2e0073749460ba8ec0ba1c2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyConf.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -27,4 +27,6 @@\n public interface AccessPolicyConf extends BaseBean {\n \n     List<Attr> getRequiredAttrs();\n+\n+    List<Attr> getRejectedAttrs();\n }"},{"sha":"ed672a71370181b2d01cf523d38d4c863d4a361d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyTO.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyTO.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -22,16 +22,25 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.net.URI;\n \n @Schema(allOf = { PolicyTO.class })\n public class AccessPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = -6711411162433533300L;\n \n+    private int order;\n+\n     private boolean enabled = true;\n \n     private boolean ssoEnabled = true;\n \n+    private boolean requireAllAttributes = true;\n+\n+    private boolean caseInsensitive;\n+\n+    private URI unauthorizedRedirectUrl;\n+\n     private AccessPolicyConf conf;\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n@@ -42,6 +51,14 @@ public String getDiscriminator() {\n         return getClass().getName();\n     }\n \n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(final int order) {\n+        this.order = order;\n+    }\n+\n     public boolean isEnabled() {\n         return enabled;\n     }\n@@ -58,6 +75,30 @@ public void setSsoEnabled(final boolean ssoEnabled) {\n         this.ssoEnabled = ssoEnabled;\n     }\n \n+    public boolean isRequireAllAttributes() {\n+        return requireAllAttributes;\n+    }\n+\n+    public void setRequireAllAttributes(final boolean requireAllAttributes) {\n+        this.requireAllAttributes = requireAllAttributes;\n+    }\n+\n+    public boolean isCaseInsensitive() {\n+        return caseInsensitive;\n+    }\n+\n+    public void setCaseInsensitive(final boolean caseInsensitive) {\n+        this.caseInsensitive = caseInsensitive;\n+    }\n+\n+    public URI getUnauthorizedRedirectUrl() {\n+        return unauthorizedRedirectUrl;\n+    }\n+\n+    public void setUnauthorizedRedirectUrl(final URI unauthorizedRedirectUrl) {\n+        this.unauthorizedRedirectUrl = unauthorizedRedirectUrl;\n+    }\n+\n     public AccessPolicyConf getConf() {\n         return conf;\n     }"},{"sha":"83685c6f4eeeb751fbf0e20443f3adcc9424978f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAccessPolicyConf.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAccessPolicyConf.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -30,10 +30,19 @@ public class DefaultAccessPolicyConf implements AccessPolicyConf {\n \n     private final List<Attr> requiredAttrs = new ArrayList<>();\n \n+    private final List<Attr> rejectedAttrs = new ArrayList<>();\n+\n     @JacksonXmlElementWrapper(localName = \"requiredAttrs\")\n     @JacksonXmlProperty(localName = \"requiredAttr\")\n     @Override\n     public List<Attr> getRequiredAttrs() {\n         return requiredAttrs;\n     }\n+\n+    @JacksonXmlElementWrapper(localName = \"rejectedAttrs\")\n+    @JacksonXmlProperty(localName = \"rejectedAttr\")\n+    @Override\n+    public List<Attr> getRejectedAttrs() {\n+        return rejectedAttrs;\n+    }\n }"},{"sha":"a3839aca64a9872d8cfd9d0db61e2a1778e65537","filename":"common/am/lib/src/test/java/org/apache/syncope/common/lib/SerializationTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -23,6 +23,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n import java.io.StringWriter;\n+import java.net.URI;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.junit.jupiter.api.Test;\n@@ -35,10 +36,13 @@ public abstract class SerializationTest {\n     public void accessPolicyConf() throws IOException {\n         AccessPolicyTO policy = new AccessPolicyTO();\n         policy.setName(\"Test Access policy\");\n+        policy.setOrder(11);\n         policy.setEnabled(true);\n+        policy.setUnauthorizedRedirectUrl(URI.create(\"https://syncope.apache.org\"));\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.getRequiredAttrs().add(new Attr.Builder(\"cn\").values(\"admin\", \"Admin\", \"TheAdmin\").build());\n+        conf.getRejectedAttrs().add(new Attr.Builder(\"uid\").values(\"plain\").build());\n         policy.setConf(conf);\n \n         StringWriter writer = new StringWriter();"},{"sha":"1dffe8508b3603639276272ec9ee8a0c54b3b534","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccessPolicy.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccessPolicy.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -18,10 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.policy;\n \n+import java.net.URI;\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n \n public interface AccessPolicy extends Policy {\n \n+    int getOrder();\n+\n+    void setOrder(int order);\n+\n     boolean isEnabled();\n \n     void setEnabled(boolean enabled);\n@@ -30,6 +35,18 @@ public interface AccessPolicy extends Policy {\n \n     void setSsoEnabled(boolean ssoEnabled);\n \n+    boolean isRequireAllAttributes();\n+\n+    void setRequireAllAttributes(boolean requireAllAttributes);\n+\n+    boolean isCaseInsensitive();\n+\n+    void setCaseInsensitive(boolean caseInsensitive);\n+\n+    URI getUnauthorizedRedirectUrl();\n+\n+    void setUnauthorizedRedirectUrl(URI unauthorizedRedirectUrl);\n+\n     AccessPolicyConf getConf();\n \n     void setConf(AccessPolicyConf conf);"},{"sha":"cda8808e0ec2facd10d396402d6f69eb13fdc0c3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASRARoute.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASRARoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASRARoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASRARoute.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.syncope.common.lib.types.SRARouteFilter;\n import org.apache.syncope.common.lib.types.SRARoutePredicate;\n import org.apache.syncope.common.lib.types.SRARouteType;\n@@ -85,7 +86,7 @@ public void setName(final String name) {\n \n     @Override\n     public URI getTarget() {\n-        return URI.create(target);\n+        return Optional.ofNullable(target).map(URI::create).orElse(null);\n     }\n \n     @Override\n@@ -115,7 +116,7 @@ public void setType(final SRARouteType type) {\n \n     @Override\n     public boolean isLogout() {\n-        return logout;\n+        return BooleanUtils.isNotFalse(logout);\n     }\n \n     @Override"},{"sha":"7159f52e44b2d14bfa220381de00870c24aa9b53","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccessPolicy.java","status":"modified","additions":55,"deletions":3,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccessPolicy.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.policy;\n \n+import java.net.URI;\n import java.util.Optional;\n import javax.persistence.Basic;\n import javax.persistence.Entity;\n@@ -36,15 +37,36 @@ public class JPAAccessPolicy extends AbstractPolicy implements AccessPolicy {\n \n     public static final String TABLE = \"AccessPolicy\";\n \n+    @Basic\n+    private Integer aporder = 0;\n+\n     @Basic\n     private Boolean enabled = true;\n \n     @Basic\n     private Boolean ssoEnabled = true;\n \n+    @Basic\n+    private Boolean requireAllAttributes = true;\n+\n+    @Basic\n+    private Boolean caseInsensitive;\n+\n+    private String unauthorizedRedirectUrl;\n+\n     @Lob\n     private String jsonConf;\n \n+    @Override\n+    public int getOrder() {\n+        return Optional.ofNullable(aporder).orElse(0);\n+    }\n+\n+    @Override\n+    public void setOrder(final int order) {\n+        this.aporder = order;\n+    }\n+\n     @Override\n     public boolean isEnabled() {\n         return BooleanUtils.isNotFalse(enabled);\n@@ -65,11 +87,41 @@ public void setSsoEnabled(final boolean ssoEnabled) {\n         this.ssoEnabled = ssoEnabled;\n     }\n \n+    @Override\n+    public boolean isRequireAllAttributes() {\n+        return BooleanUtils.isNotFalse(requireAllAttributes);\n+    }\n+\n+    @Override\n+    public void setRequireAllAttributes(final boolean requireAllAttributes) {\n+        this.requireAllAttributes = requireAllAttributes;\n+    }\n+\n+    @Override\n+    public boolean isCaseInsensitive() {\n+        return BooleanUtils.isNotFalse(caseInsensitive);\n+    }\n+\n+    @Override\n+    public void setCaseInsensitive(final boolean caseInsensitive) {\n+        this.caseInsensitive = caseInsensitive;\n+    }\n+\n+    @Override\n+    public URI getUnauthorizedRedirectUrl() {\n+        return Optional.ofNullable(unauthorizedRedirectUrl).\n+                map(URI::create).orElse(null);\n+    }\n+\n+    @Override\n+    public void setUnauthorizedRedirectUrl(final URI unauthorizedRedirectUrl) {\n+        this.unauthorizedRedirectUrl = Optional.ofNullable(unauthorizedRedirectUrl).\n+                map(URI::toASCIIString).orElse(null);\n+    }\n+\n     @Override\n     public AccessPolicyConf getConf() {\n-        return jsonConf == null\n-                ? null\n-                : POJOHelper.deserialize(jsonConf, AccessPolicyConf.class);\n+        return Optional.ofNullable(jsonConf).map(c -> POJOHelper.deserialize(c, AccessPolicyConf.class)).orElse(null);\n     }\n \n     @Override"},{"sha":"85e10712fa5d98c47070d5cc79ec1cce35502d19","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -223,8 +223,12 @@ protected <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO\n             AccessPolicyTO accessPolicyTO = AccessPolicyTO.class.cast(policyTO);\n \n             accessPolicy.setName(accessPolicyTO.getKey());\n+            accessPolicy.setOrder(accessPolicyTO.getOrder());\n             accessPolicy.setEnabled(accessPolicyTO.isEnabled());\n             accessPolicy.setSsoEnabled(accessPolicyTO.isSsoEnabled());\n+            accessPolicy.setRequireAllAttributes(accessPolicyTO.isRequireAllAttributes());\n+            accessPolicy.setCaseInsensitive(accessPolicyTO.isCaseInsensitive());\n+            accessPolicy.setUnauthorizedRedirectUrl(accessPolicyTO.getUnauthorizedRedirectUrl());\n             accessPolicy.setConf(accessPolicyTO.getConf());\n         } else if (policyTO instanceof AttrReleasePolicyTO) {\n             if (result == null) {\n@@ -311,8 +315,12 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n             policyTO = (T) accessPolicyTO;\n \n+            accessPolicyTO.setOrder(accessPolicy.getOrder());\n             accessPolicyTO.setEnabled(accessPolicy.isEnabled());\n             accessPolicyTO.setSsoEnabled(accessPolicy.isSsoEnabled());\n+            accessPolicyTO.setRequireAllAttributes(accessPolicy.isRequireAllAttributes());\n+            accessPolicyTO.setCaseInsensitive(accessPolicy.isCaseInsensitive());\n+            accessPolicyTO.setUnauthorizedRedirectUrl(accessPolicy.getUnauthorizedRedirectUrl());\n             accessPolicyTO.setConf(((AccessPolicy) policy).getConf());\n         } else if (policy instanceof AttrReleasePolicy) {\n             AttrReleasePolicyTO attrReleasePolicyTO = new AttrReleasePolicyTO();"},{"sha":"6c24e5eb033871f0f976fc638fd388824b798b01","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9d0160eac046990d1df7c3eaf05a0429d82b0afd/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9d0160eac046990d1df7c3eaf05a0429d82b0afd/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=9d0160eac046990d1df7c3eaf05a0429d82b0afd","patch":"@@ -29,10 +29,23 @@ public class DefaultAccessMapper implements AccessMapper {\n \n     @Override\n     public RegisteredServiceAccessStrategy build(final AccessPolicyTO policy) {\n-        RegisteredServiceAccessStrategy accessStrategy =\n+        DefaultRegisteredServiceAccessStrategy accessStrategy =\n                 new DefaultRegisteredServiceAccessStrategy(policy.isEnabled(), policy.isSsoEnabled());\n+\n+        accessStrategy.setOrder(policy.getOrder());\n+\n+        accessStrategy.setRequireAllAttributes(policy.isRequireAllAttributes());\n+\n+        accessStrategy.setCaseInsensitive(policy.isCaseInsensitive());\n+\n+        accessStrategy.setUnauthorizedRedirectUrl(policy.getUnauthorizedRedirectUrl());\n+\n         policy.getConf().getRequiredAttrs().forEach(\n                 attr -> accessStrategy.getRequiredAttributes().put(attr.getSchema(), new HashSet<>(attr.getValues())));\n+\n+        policy.getConf().getRejectedAttrs().forEach(\n+                attr -> accessStrategy.getRejectedAttributes().put(attr.getSchema(), new HashSet<>(attr.getValues())));\n+\n         return accessStrategy;\n     }\n }"}]}