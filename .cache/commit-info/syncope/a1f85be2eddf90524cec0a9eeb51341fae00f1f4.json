{"sha":"a1f85be2eddf90524cec0a9eeb51341fae00f1f4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmExZjg1YmUyZWRkZjkwNTI0Y2VjMGE5ZWViNTEzNDFmYWUwMGYxZjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-09T14:58:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-09T14:58:20Z"},"message":"[SYNCOPE-705] Put CXF's GZIPInInterceptor and GZIPOutInterceptor on both client and core","tree":{"sha":"6026579f793e4d466ae6f5a300a29fbc00f15d4a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6026579f793e4d466ae6f5a300a29fbc00f15d4a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a1f85be2eddf90524cec0a9eeb51341fae00f1f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1f85be2eddf90524cec0a9eeb51341fae00f1f4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a1f85be2eddf90524cec0a9eeb51341fae00f1f4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dd4dd571c8544803a99124cbc0a992b14a18ec7a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd4dd571c8544803a99124cbc0a992b14a18ec7a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dd4dd571c8544803a99124cbc0a992b14a18ec7a"}],"stats":{"total":78,"additions":62,"deletions":16},"files":[{"sha":"93aa39a51e96ea3c1c92f710e611755785365a71","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=a1f85be2eddf90524cec0a9eeb51341fae00f1f4","patch":"@@ -100,7 +100,7 @@ public SyncopeConsoleSession(final Request request) {\n \n         version = ctx.getBean(\"version\", String.class);\n \n-        SyncopeClient anonymousClient = clientFactory.create(anonymousUser, anonymousKey);\n+        SyncopeClient anonymousClient = clientFactory.setUseCompression(true).create(anonymousUser, anonymousKey);\n         syncopeTO = anonymousClient.getService(SyncopeService.class).info();\n         domains = new ArrayList<>();\n         domains.add(SyncopeConstants.MASTER_DOMAIN);\n@@ -139,7 +139,7 @@ public boolean authenticate(final String username, final String password) {\n         boolean authenticated = false;\n \n         try {\n-            client = clientFactory.setDomain(getDomain()).create(username, password);\n+            client = clientFactory.setDomain(getDomain()).setUseCompression(true).create(username, password);\n \n             Pair<Map<String, Set<String>>, UserTO> self = client.self();\n             auth = self.getKey();"},{"sha":"c126deb8ab2a08ec059824292fe20156f609b910","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientFactoryBean.java","status":"modified","additions":27,"deletions":7,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java?ref=a1f85be2eddf90524cec0a9eeb51341fae00f1f4","patch":"@@ -20,11 +20,16 @@\n \n import javax.ws.rs.core.MediaType;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.ClientConfiguration;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n+import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n \n /**\n- * Provides shortcuts for creating JAX-RS service instances via CXF's <tt>JAXRSClientFactoryBean</tt>.\n+ * Provides shortcuts for creating JAX-RS service instances via CXF's {@link JAXRSClientFactoryBean}.\n  */\n public class RestClientFactoryBean extends JAXRSClientFactoryBean {\n \n@@ -39,7 +44,7 @@ public class RestClientFactoryBean extends JAXRSClientFactoryBean {\n      * @return anonymous service instance of the given reference class\n      */\n     public <T> T createServiceInstance(final Class<T> serviceClass, final MediaType mediaType) {\n-        return createServiceInstance(serviceClass, mediaType, null, null);\n+        return createServiceInstance(serviceClass, mediaType, null, null, false);\n     }\n \n     /**\n@@ -50,22 +55,37 @@ public <T> T createServiceInstance(final Class<T> serviceClass, final MediaType\n      * @param mediaType XML or JSON are supported\n      * @param username username for REST authentication\n      * @param password password for REST authentication\n+     * @param useCompression whether transparent gzip <tt>Content-Encoding</tt> handling is to be enabled\n      * @return anonymous service instance of the given reference class\n      */\n     public <T> T createServiceInstance(\n-            final Class<T> serviceClass, final MediaType mediaType, final String username, final String password) {\n+            final Class<T> serviceClass,\n+            final MediaType mediaType,\n+            final String username,\n+            final String password,\n+            final boolean useCompression) {\n \n         if (StringUtils.isNotBlank(username)) {\n             setUsername(username);\n         }\n         if (StringUtils.isNotBlank(password)) {\n             setPassword(password);\n         }\n+\n         setServiceClass(serviceClass);\n-        final T serviceInstance = create(serviceClass);\n-        WebClient.client(serviceInstance).type(mediaType).accept(mediaType);\n-        WebClient.getConfig(WebClient.client(serviceInstance)).\n-                getRequestContext().put(HEADER_SPLIT_PROPERTY, true);\n+        T serviceInstance = create(serviceClass);\n+\n+        Client client = WebClient.client(serviceInstance);\n+        client.type(mediaType).accept(mediaType);\n+\n+        ClientConfiguration config = WebClient.getConfig(client);\n+        config.getRequestContext().put(HEADER_SPLIT_PROPERTY, true);\n+        config.getRequestContext().put(URLConnectionHTTPConduit.HTTPURL_CONNECTION_METHOD_REFLECTION, true);\n+        if (useCompression) {\n+            config.getInInterceptors().add(new GZIPInInterceptor());\n+            config.getOutInterceptors().add(new GZIPOutInterceptor());\n+        }\n+\n         return serviceInstance;\n     }\n }"},{"sha":"ca9f1c36b90f0f00f632a2293487c18cc408f803","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=a1f85be2eddf90524cec0a9eeb51341fae00f1f4","patch":"@@ -30,7 +30,6 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n import org.apache.syncope.client.lib.builders.AnyQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnyListQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnySearchQueryBuilder;\n@@ -61,17 +60,21 @@ public class SyncopeClient {\n \n     private final String password;\n \n+    private final boolean useCompression;\n+\n     public SyncopeClient(\n             final MediaType mediaType,\n             final RestClientFactoryBean restClientFactory,\n             final RestClientExceptionMapper exceptionMapper,\n-            final String username, final String password) {\n+            final String username, final String password,\n+            final boolean useCompression) {\n \n         this.mediaType = mediaType;\n         this.restClientFactory = restClientFactory;\n         this.exceptionMapper = exceptionMapper;\n         this.username = username;\n         this.password = password;\n+        this.useCompression = useCompression;\n     }\n \n     /**\n@@ -169,10 +172,7 @@ public static ConnObjectTOListQueryBuilder getConnObjectTOListQueryBuilder() {\n      */\n     public <T> T getService(final Class<T> serviceClass) {\n         synchronized (restClientFactory) {\n-            T service = restClientFactory.createServiceInstance(serviceClass, mediaType, username, password);\n-            WebClient.getConfig(WebClient.client(service)).getRequestContext().\n-                    put(URLConnectionHTTPConduit.HTTPURL_CONNECTION_METHOD_REFLECTION, true);\n-            return service;\n+            return restClientFactory.createServiceInstance(serviceClass, mediaType, username, password, useCompression);\n         }\n     }\n "},{"sha":"01a36ecd9c531ad6ad4e8f402967f017ce8083ee","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=a1f85be2eddf90524cec0a9eeb51341fae00f1f4","patch":"@@ -74,6 +74,8 @@ public static ContentType fromString(final String value) {\n \n     private String domain;\n \n+    private boolean useCompression;\n+\n     private RestClientFactoryBean restClientFactoryBean;\n \n     protected JacksonJaxbJsonProvider defaultJsonProvider() {\n@@ -197,6 +199,21 @@ public SyncopeClientFactoryBean setDomain(final String domain) {\n         return this;\n     }\n \n+    /**\n+     * Sets the given service instance for transparent gzip <tt>Content-Encoding</tt> handling.\n+     *\n+     * @param useCompression whether transparent gzip <tt>Content-Encoding</tt> handling is to be enabled\n+     * @return the current instance\n+     */\n+    public SyncopeClientFactoryBean setUseCompression(final boolean useCompression) {\n+        this.useCompression = useCompression;\n+        return this;\n+    }\n+\n+    public boolean isUseCompression() {\n+        return useCompression;\n+    }\n+\n     public RestClientFactoryBean getRestClientFactoryBean() {\n         return restClientFactoryBean == null\n                 ? defaultRestClientFactoryBean()\n@@ -218,6 +235,7 @@ public SyncopeClient create(final String username, final String password) {\n                 getRestClientFactoryBean(),\n                 getExceptionMapper(),\n                 username,\n-                password);\n+                password,\n+                useCompression);\n     }\n }"},{"sha":"cdfea0d17db62ce4b122e88081b9769dfb8377b3","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1f85be2eddf90524cec0a9eeb51341fae00f1f4/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=a1f85be2eddf90524cec0a9eeb51341fae00f1f4","patch":"@@ -76,6 +76,12 @@ under the License.\n     <property name=\"provider\" ref=\"validationProvider\"/>\n   </bean>   \n   \n+  <bean id=\"gzipInInterceptor\" class=\"org.apache.cxf.transport.common.gzip.GZIPInInterceptor\"/>\n+  <bean id=\"gzipOutInterceptor\" class=\"org.apache.cxf.transport.common.gzip.GZIPOutInterceptor\">\n+    <property name=\"threshold\" value=\"0\"/>\n+    <property name=\"force\" value=\"true\"/>\n+  </bean>\n+  \n   <bean id=\"searchContextProvider\" class=\"org.apache.cxf.jaxrs.ext.search.SearchContextProvider\"/>\n     \n   <bean id=\"addDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.AddDomainFilter\"/>\n@@ -114,9 +120,11 @@ under the License.\n       <entry key=\"convert.wadl.resources.to.dom\" value=\"false\"/>\n     </jaxrs:properties> \n     <jaxrs:inInterceptors>\n+      <ref bean=\"gzipInInterceptor\"/>\n       <ref bean=\"validationInInterceptor\"/>\n     </jaxrs:inInterceptors>         \n     <jaxrs:outInterceptors>\n+      <ref bean=\"gzipOutInterceptor\"/>\n       <ref bean=\"validationOutInterceptor\"/>\n     </jaxrs:outInterceptors>\n     <jaxrs:providers>"}]}