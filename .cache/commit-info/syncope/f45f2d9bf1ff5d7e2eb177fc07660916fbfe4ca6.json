{"sha":"f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY0NWYyZDliZjFmZjVkN2UyZWIxNzdmYzA3NjYwOTE2ZmJmZTRjYTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-13T09:17:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-13T09:17:16Z"},"message":"[SYNCOPE-678] Merge from 1_2_X","tree":{"sha":"138a1c401154a3271bb636671d6b775c136c9f75","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/138a1c401154a3271bb636671d6b775c136c9f75"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"aac331491a4d4ec95563437e48d3ce53c001a224","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aac331491a4d4ec95563437e48d3ce53c001a224","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aac331491a4d4ec95563437e48d3ce53c001a224"},{"sha":"73d0975b015308a673767cb5aa890782a75afde5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73d0975b015308a673767cb5aa890782a75afde5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/73d0975b015308a673767cb5aa890782a75afde5"}],"stats":{"total":103,"additions":64,"deletions":39},"files":[{"sha":"eab59bb2d2908b2b5a311c9c05d277fa7184ae6b","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6","patch":"@@ -35,6 +35,7 @@\n \n /**\n  * Generate random passwords according to given policies.\n+ * When no minimum and / or maximum length are specified, default values are set.\n  *\n  * @see org.apache.syncope.core.persistence.api.entity.PasswordPolicy\n  */\n@@ -43,6 +44,12 @@ public class PasswordGenerator {\n \n     private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n \n+    private static final int VERY_MIN_LENGTH = 0;\n+\n+    private static final int VERY_MAX_LENGTH = 64;\n+\n+    private static final int MIN_LENGTH_IF_ZERO = 6;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -87,8 +94,8 @@ public String generate(final User user)\n \n     private PasswordPolicySpec merge(final List<PasswordPolicySpec> ppSpecs) {\n         PasswordPolicySpec fpps = new PasswordPolicySpec();\n-        fpps.setMinLength(0);\n-        fpps.setMaxLength(1000);\n+        fpps.setMinLength(VERY_MIN_LENGTH);\n+        fpps.setMaxLength(VERY_MAX_LENGTH);\n \n         for (PasswordPolicySpec policySpec : ppSpecs) {\n             if (policySpec.getMinLength() > fpps.getMinLength()) {\n@@ -155,15 +162,17 @@ private PasswordPolicySpec merge(final List<PasswordPolicySpec> ppSpecs) {\n                 fpps.setMustntEndWithAlpha(policySpec.isMustntEndWithAlpha());\n             }\n         }\n+\n+        if (fpps.getMinLength() == 0) {\n+            fpps.setMinLength(fpps.getMaxLength() < MIN_LENGTH_IF_ZERO ? fpps.getMaxLength() : MIN_LENGTH_IF_ZERO);\n+        }\n+\n         return fpps;\n     }\n \n     private void check(final PasswordPolicySpec policySpec)\n             throws InvalidPasswordPolicySpecException {\n \n-        if (policySpec.getMinLength() == 0) {\n-            throw new InvalidPasswordPolicySpecException(\"Minimum length is zero\");\n-        }\n         if (policySpec.isMustEndWithAlpha() && policySpec.isMustntEndWithAlpha()) {\n             throw new InvalidPasswordPolicySpecException(\n                     \"mustEndWithAlpha and mustntEndWithAlpha are both true\");"},{"sha":"e3e26e02abcb8badc081d4993764a42c5e0e8123","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/security/PasswordGeneratorTest.java","status":"modified","additions":50,"deletions":34,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGeneratorTest.java?ref=f45f2d9bf1ff5d7e2eb177fc07660916fbfe4ca6","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.core.misc.security;\n \n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n@@ -31,10 +34,32 @@ public class PasswordGeneratorTest {\n \n     private final PasswordGenerator passwordGenerator = new PasswordGenerator();\n \n-    @Test\n-    public void startEndWithDigit()\n-            throws InvalidPasswordPolicySpecException {\n+    private PasswordPolicySpec createBasePasswordPolicySpec() {\n+        PasswordPolicySpec basePasswordPolicySpec = new PasswordPolicySpec();\n+        basePasswordPolicySpec.setAlphanumericRequired(false);\n+        basePasswordPolicySpec.setDigitRequired(false);\n+        basePasswordPolicySpec.setLowercaseRequired(false);\n+        basePasswordPolicySpec.setMaxLength(1000);\n+        basePasswordPolicySpec.setMinLength(8);\n+        basePasswordPolicySpec.setMustEndWithAlpha(false);\n+        basePasswordPolicySpec.setMustEndWithDigit(false);\n+        basePasswordPolicySpec.setMustEndWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustStartWithAlpha(false);\n+        basePasswordPolicySpec.setMustStartWithDigit(false);\n+        basePasswordPolicySpec.setMustStartWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustntEndWithAlpha(false);\n+        basePasswordPolicySpec.setMustntEndWithDigit(false);\n+        basePasswordPolicySpec.setMustntEndWithNonAlpha(false);\n+        basePasswordPolicySpec.setMustntStartWithAlpha(false);\n+        basePasswordPolicySpec.setMustntStartWithDigit(false);\n+        basePasswordPolicySpec.setMustntStartWithNonAlpha(false);\n+        basePasswordPolicySpec.setNonAlphanumericRequired(false);\n+        basePasswordPolicySpec.setUppercaseRequired(false);\n+        return basePasswordPolicySpec;\n+    }\n \n+    @Test\n+    public void startEndWithDigit() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n \n@@ -49,9 +74,7 @@ public void startEndWithDigit()\n     }\n \n     @Test\n-    public void startWithDigitAndWithAlpha()\n-            throws InvalidPasswordPolicySpecException {\n-\n+    public void startWithDigitAndWithAlpha() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMustStartWithDigit(true);\n \n@@ -66,9 +89,7 @@ public void startWithDigitAndWithAlpha()\n     }\n \n     @Test\n-    public void passwordWithNonAlpha()\n-            throws InvalidPasswordPolicySpecException {\n-\n+    public void passwordWithNonAlpha() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setNonAlphanumericRequired(true);\n \n@@ -83,9 +104,7 @@ public void passwordWithNonAlpha()\n     }\n \n     @Test(expected = InvalidPasswordPolicySpecException.class)\n-    public void incopatiblePolicies()\n-            throws InvalidPasswordPolicySpecException {\n-\n+    public void incopatiblePolicies() throws InvalidPasswordPolicySpecException {\n         PasswordPolicySpec passwordPolicySpec = createBasePasswordPolicySpec();\n         passwordPolicySpec.setMinLength(12);\n \n@@ -98,27 +117,24 @@ public void incopatiblePolicies()\n         passwordGenerator.generate(passwordPolicySpecs);\n     }\n \n-    private PasswordPolicySpec createBasePasswordPolicySpec() {\n-        PasswordPolicySpec basePasswordPolicySpec = new PasswordPolicySpec();\n-        basePasswordPolicySpec.setAlphanumericRequired(false);\n-        basePasswordPolicySpec.setDigitRequired(false);\n-        basePasswordPolicySpec.setLowercaseRequired(false);\n-        basePasswordPolicySpec.setMaxLength(1000);\n-        basePasswordPolicySpec.setMinLength(8);\n-        basePasswordPolicySpec.setMustEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustEndWithDigit(false);\n-        basePasswordPolicySpec.setMustEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustStartWithDigit(false);\n-        basePasswordPolicySpec.setMustStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithAlpha(false);\n-        basePasswordPolicySpec.setMustntEndWithDigit(false);\n-        basePasswordPolicySpec.setMustntEndWithNonAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithAlpha(false);\n-        basePasswordPolicySpec.setMustntStartWithDigit(false);\n-        basePasswordPolicySpec.setMustntStartWithNonAlpha(false);\n-        basePasswordPolicySpec.setNonAlphanumericRequired(false);\n-        basePasswordPolicySpec.setUppercaseRequired(false);\n-        return basePasswordPolicySpec;\n+    @Test\n+    public void issueSYNCOPE678() {\n+        String password = null;\n+        try {\n+            password = passwordGenerator.generate(Collections.<PasswordPolicySpec>emptyList());\n+        } catch (InvalidPasswordPolicySpecException e) {\n+            fail(e.getMessage());\n+        }\n+        assertNotNull(password);\n+\n+        PasswordPolicySpec ppSpec = createBasePasswordPolicySpec();\n+        ppSpec.setMinLength(0);\n+        password = null;\n+        try {\n+            password = passwordGenerator.generate(Collections.singletonList(ppSpec));\n+        } catch (InvalidPasswordPolicySpecException e) {\n+            fail(e.getMessage());\n+        }\n+        assertNotNull(password);\n     }\n }"}]}