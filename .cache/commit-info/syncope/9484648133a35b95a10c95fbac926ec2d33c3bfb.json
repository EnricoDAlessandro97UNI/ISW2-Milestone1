{"sha":"9484648133a35b95a10c95fbac926ec2d33c3bfb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk0ODQ2NDgxMzNhMzViOTVhMTBjOTVmYmFjOTI2ZWMyZDMzYzNiZmI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-04T13:06:37Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-04T13:06:37Z"},"message":"[SYNCOPE-766] Reportlet provided","tree":{"sha":"190a6adf15c3ab0ace41317b06a3c26eebae6c9e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/190a6adf15c3ab0ace41317b06a3c26eebae6c9e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9484648133a35b95a10c95fbac926ec2d33c3bfb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9484648133a35b95a10c95fbac926ec2d33c3bfb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9484648133a35b95a10c95fbac926ec2d33c3bfb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9484648133a35b95a10c95fbac926ec2d33c3bfb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"73526331bb895a29238f41493b2a187b24a4ded1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73526331bb895a29238f41493b2a187b24a4ded1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/73526331bb895a29238f41493b2a187b24a4ded1"}],"stats":{"total":606,"additions":601,"deletions":5},"files":[{"sha":"b6a682d8f7144b613c4cff4e57593f285ad9df67","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/ReconciliationReportletConf.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9484648133a35b95a10c95fbac926ec2d33c3bfb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReconciliationReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9484648133a35b95a10c95fbac926ec2d33c3bfb/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReconciliationReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReconciliationReportletConf.java?ref=9484648133a35b95a10c95fbac926ec2d33c3bfb","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"reconciliationReportletConf\")\n+@XmlType\n+public class ReconciliationReportletConf extends AbstractReportletConf {\n+\n+    private static final long serialVersionUID = 6602717600064602764L;\n+\n+    @XmlEnum\n+    @XmlType(name = \"reconciliationReportletConfFeature\")\n+    public enum Feature {\n+\n+        key,\n+        username,\n+        groupName,\n+        workflowId,\n+        status,\n+        creationDate,\n+        lastLoginDate,\n+        changePwdDate,\n+        passwordHistorySize,\n+        failedLoginCount;\n+\n+    }\n+\n+    private String userMatchingCond;\n+\n+    private String groupMatchingCond;\n+\n+    private String anyObjectMatchingCond;\n+\n+    private final List<Feature> features = new ArrayList<>();\n+\n+    public ReconciliationReportletConf() {\n+        super();\n+    }\n+\n+    public ReconciliationReportletConf(final String name) {\n+        super(name);\n+    }\n+\n+    public String getUserMatchingCond() {\n+        return userMatchingCond;\n+    }\n+\n+    public void setUserMatchingCond(final String userMatchingCond) {\n+        this.userMatchingCond = userMatchingCond;\n+    }\n+\n+    public String getGroupMatchingCond() {\n+        return groupMatchingCond;\n+    }\n+\n+    public void setGroupMatchingCond(final String groupMatchingCond) {\n+        this.groupMatchingCond = groupMatchingCond;\n+    }\n+\n+    public String getAnyObjectMatchingCond() {\n+        return anyObjectMatchingCond;\n+    }\n+\n+    public void setAnyObjectMatchingCond(final String anyObjectMatchingCond) {\n+        this.anyObjectMatchingCond = anyObjectMatchingCond;\n+    }\n+\n+    @XmlElementWrapper(name = \"features\")\n+    @XmlElement(name = \"feature\")\n+    @JsonProperty(\"features\")\n+    public List<Feature> getFeatures() {\n+        return features;\n+    }\n+}"},{"sha":"42f6e2f3ce750a76fc6adb74fd207fb514163181","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReconciliationReportlet.java","status":"added","additions":486,"deletions":0,"changes":486,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReconciliationReportlet.java?ref=9484648133a35b95a10c95fbac926ec2d33c3bfb","patch":"@@ -0,0 +1,486 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.report;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.report.ReconciliationReportletConf;\n+import org.apache.syncope.common.lib.report.ReconciliationReportletConf.Feature;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.misc.search.SearchCondConverter;\n+import org.apache.syncope.core.misc.utils.FormatUtils;\n+import org.apache.syncope.core.misc.utils.MappingUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.AttributesImpl;\n+\n+/**\n+ * Reportlet for extracting information for the current reconciliation status, e.g. the coherence between Syncope\n+ * information and mapped entities on external resources.\n+ */\n+@ReportletConfClass(ReconciliationReportletConf.class)\n+public class ReconciliationReportlet extends AbstractReportlet {\n+\n+    private static final int PAGE_SIZE = 10;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private AnySearchDAO searchDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private MappingUtils mappingUtils;\n+\n+    @Autowired\n+    private ConnectorFactory connFactory;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    private ReconciliationReportletConf conf;\n+\n+    private String getAnyElementName(final AnyTypeKind anyTypeKind) {\n+        String elementName;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                elementName = \"user\";\n+                break;\n+\n+            case GROUP:\n+                elementName = \"group\";\n+                break;\n+\n+            case ANY_OBJECT:\n+            default:\n+                elementName = \"anyObject\";\n+        }\n+\n+        return elementName;\n+    }\n+\n+    private void doExtract(\n+            final ContentHandler handler,\n+            final Any<?> any,\n+            final Set<Missing> missing,\n+            final Set<Misaligned> misaligned)\n+            throws SAXException {\n+\n+        AttributesImpl atts = new AttributesImpl();\n+\n+        for (Feature feature : conf.getFeatures()) {\n+            String type = null;\n+            String value = null;\n+            switch (feature) {\n+                case key:\n+                    type = ReportXMLConst.XSD_LONG;\n+                    value = String.valueOf(any.getKey());\n+                    break;\n+\n+                case username:\n+                    if (any instanceof User) {\n+                        type = ReportXMLConst.XSD_STRING;\n+                        value = User.class.cast(any).getUsername();\n+                    }\n+                    break;\n+\n+                case groupName:\n+                    if (any instanceof Group) {\n+                        type = ReportXMLConst.XSD_STRING;\n+                        value = Group.class.cast(any).getName();\n+                    }\n+                    break;\n+\n+                case workflowId:\n+                    type = ReportXMLConst.XSD_LONG;\n+                    value = String.valueOf(any.getWorkflowId());\n+                    break;\n+\n+                case status:\n+                    type = ReportXMLConst.XSD_STRING;\n+                    value = any.getStatus();\n+                    break;\n+\n+                case creationDate:\n+                    type = ReportXMLConst.XSD_DATETIME;\n+                    value = any.getCreationDate() == null\n+                            ? StringUtils.EMPTY\n+                            : FormatUtils.format(any.getCreationDate());\n+                    break;\n+\n+                case lastLoginDate:\n+                    if (any instanceof User) {\n+                        type = ReportXMLConst.XSD_DATETIME;\n+                        value = User.class.cast(any).getLastLoginDate() == null\n+                                ? StringUtils.EMPTY\n+                                : FormatUtils.format(User.class.cast(any).getLastLoginDate());\n+                    }\n+                    break;\n+\n+                case changePwdDate:\n+                    if (any instanceof User) {\n+                        type = ReportXMLConst.XSD_DATETIME;\n+                        value = User.class.cast(any).getChangePwdDate() == null\n+                                ? StringUtils.EMPTY\n+                                : FormatUtils.format(User.class.cast(any).getChangePwdDate());\n+                    }\n+                    break;\n+\n+                case passwordHistorySize:\n+                    if (any instanceof User) {\n+                        type = ReportXMLConst.XSD_INT;\n+                        value = String.valueOf(User.class.cast(any).getPasswordHistory().size());\n+                    }\n+                    break;\n+\n+                case failedLoginCount:\n+                    if (any instanceof User) {\n+                        type = ReportXMLConst.XSD_INT;\n+                        value = String.valueOf(User.class.cast(any).getFailedLogins());\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+\n+            if (type != null && value != null) {\n+                atts.addAttribute(\"\", \"\", feature.name(), type, value);\n+            }\n+        }\n+\n+        handler.startElement(\"\", \"\", getAnyElementName(any.getType().getKind()), atts);\n+\n+        for (Missing item : missing) {\n+            atts.clear();\n+            atts.addAttribute(\"\", \"\", \"resource\", ReportXMLConst.XSD_STRING, item.getResource());\n+            atts.addAttribute(\"\", \"\", \"connObjectKeyValue\", ReportXMLConst.XSD_STRING, item.getConnObjectKeyValue());\n+\n+            handler.startElement(\"\", \"\", \"missing\", atts);\n+            handler.endElement(\"\", \"\", \"missing\");\n+        }\n+        for (Misaligned item : misaligned) {\n+            atts.clear();\n+            atts.addAttribute(\"\", \"\", \"resource\", ReportXMLConst.XSD_STRING, item.getResource());\n+            atts.addAttribute(\"\", \"\", \"connObjectKeyValue\", ReportXMLConst.XSD_STRING, item.getConnObjectKeyValue());\n+            atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, item.getName());\n+\n+            handler.startElement(\"\", \"\", \"misaligned\", atts);\n+\n+            handler.startElement(\"\", \"\", \"onSyncope\", null);\n+            for (Object value : item.getOnSyncope()) {\n+                char[] asChars = value.toString().toCharArray();\n+\n+                handler.startElement(\"\", \"\", \"value\", null);\n+                handler.characters(asChars, 0, asChars.length);\n+                handler.endElement(\"\", \"\", \"value\");\n+            }\n+            handler.endElement(\"\", \"\", \"onSyncope\");\n+\n+            handler.startElement(\"\", \"\", \"onResource\", null);\n+            for (Object value : item.getOnResource()) {\n+                char[] asChars = value.toString().toCharArray();\n+\n+                handler.startElement(\"\", \"\", \"value\", null);\n+                handler.characters(asChars, 0, asChars.length);\n+                handler.endElement(\"\", \"\", \"value\");\n+            }\n+            handler.endElement(\"\", \"\", \"onResource\");\n+\n+            handler.endElement(\"\", \"\", \"misaligned\");\n+        }\n+\n+        handler.endElement(\"\", \"\", getAnyElementName(any.getType().getKind()));\n+    }\n+\n+    private void doExtract(final ContentHandler handler, final List<? extends Any<?>> anys)\n+            throws SAXException, ReportException {\n+\n+        final Set<Missing> missing = new HashSet<>();\n+        final Set<Misaligned> misaligned = new HashSet<>();\n+\n+        for (Any<?> any : anys) {\n+            missing.clear();\n+            misaligned.clear();\n+\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+            for (final ExternalResource resource : anyUtils.getAllResources(any)) {\n+                Provision provision = resource.getProvision(any.getType());\n+                MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n+                if (provision != null && connObjectKeyItem != null) {\n+                    // 1. build connObjectKeyValue\n+                    final String connObjectKeyValue = mappingUtils.getConnObjectKeyValue(any, provision);\n+\n+                    // 2. determine attributes to query\n+                    Set<MappingItem> linkinMappingItems = new HashSet<>();\n+                    for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                        linkinMappingItems.add(virSchema.asLinkingMappingItem());\n+                    }\n+                    Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                            provision.getMapping().getItems().iterator(),\n+                            linkinMappingItems.iterator());\n+\n+                    // 3. read from the underlying connector\n+                    Connector connector = connFactory.getConnector(resource);\n+                    ConnectorObject connectorObject = connector.getObject(\n+                            provision.getObjectClass(),\n+                            new Uid(connObjectKeyValue),\n+                            MappingUtils.buildOperationOptions(mapItems));\n+\n+                    if (connectorObject == null) {\n+                        // 4. not found on resource?\n+                        LOG.error(\"Object {} with class {} not found on resource {}\",\n+                                connObjectKeyValue, provision.getObjectClass(), resource);\n+\n+                        missing.add(new Missing(resource.getKey(), connObjectKeyValue));\n+                    } else {\n+                        // 5. found but misaligned?\n+\n+                        final Map<String, Set<Object>> syncopeAttrs = new HashMap<>();\n+                        for (Attribute attr : mappingUtils.prepareAttrs(any, null, false, null, provision).getRight()) {\n+                            syncopeAttrs.put(attr.getName(), new HashSet<>(attr.getValue()));\n+                        }\n+\n+                        final Map<String, Set<Object>> resourceAttrs = new HashMap<>();\n+                        for (Attribute attr : connectorObject.getAttributes()) {\n+                            if (!OperationalAttributes.PASSWORD_NAME.equals(attr.getName())\n+                                    && !OperationalAttributes.ENABLE_NAME.equals(attr.getName())) {\n+\n+                                resourceAttrs.put(attr.getName(), new HashSet<>(attr.getValue()));\n+                            }\n+                        }\n+\n+                        IterableUtils.forEach(CollectionUtils.subtract(syncopeAttrs.keySet(), resourceAttrs.keySet()),\n+                                new Closure<String>() {\n+\n+                            @Override\n+                            public void execute(final String name) {\n+                                misaligned.add(new Misaligned(\n+                                        resource.getKey(),\n+                                        connObjectKeyValue,\n+                                        name,\n+                                        syncopeAttrs.get(name),\n+                                        Collections.emptySet()));\n+                            }\n+                        });\n+\n+                        for (Map.Entry<String, Set<Object>> entry : resourceAttrs.entrySet()) {\n+                            if (syncopeAttrs.containsKey(entry.getKey())) {\n+                                if (!syncopeAttrs.get(entry.getKey()).equals(entry.getValue())) {\n+                                    misaligned.add(new Misaligned(\n+                                            resource.getKey(),\n+                                            connObjectKeyValue,\n+                                            entry.getKey(),\n+                                            syncopeAttrs.get(entry.getKey()),\n+                                            entry.getValue()));\n+                                }\n+                            } else {\n+                                misaligned.add(new Misaligned(\n+                                        resource.getKey(),\n+                                        connObjectKeyValue,\n+                                        entry.getKey(),\n+                                        Collections.emptySet(),\n+                                        entry.getValue()));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!missing.isEmpty() || !misaligned.isEmpty()) {\n+                doExtract(handler, any, missing, misaligned);\n+            }\n+        }\n+    }\n+\n+    private void doExtract(final ContentHandler handler, final SearchCond cond, final AnyTypeKind anyTypeKind)\n+            throws SAXException {\n+\n+        int count = searchDAO.count(\n+                SyncopeConstants.FULL_ADMIN_REALMS,\n+                cond,\n+                anyTypeKind);\n+\n+        for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n+            List<AnyObject> anys = searchDAO.search(\n+                    SyncopeConstants.FULL_ADMIN_REALMS,\n+                    cond,\n+                    page,\n+                    PAGE_SIZE,\n+                    Collections.<OrderByClause>emptyList(),\n+                    anyTypeKind);\n+\n+            doExtract(handler, anys);\n+        }\n+    }\n+\n+    @Override\n+    protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n+        if (conf instanceof ReconciliationReportletConf) {\n+            this.conf = ReconciliationReportletConf.class.cast(conf);\n+        } else {\n+            throw new ReportException(new IllegalArgumentException(\"Invalid configuration provided\"));\n+        }\n+\n+        handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + \"s\", null);\n+        if (StringUtils.isBlank(this.conf.getUserMatchingCond())) {\n+            doExtract(handler, userDAO.findAll());\n+        } else {\n+            SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n+            doExtract(handler, cond, AnyTypeKind.USER);\n+        }\n+        handler.endElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + \"s\");\n+\n+        handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + \"s\", null);\n+        if (StringUtils.isBlank(this.conf.getGroupMatchingCond())) {\n+            doExtract(handler, groupDAO.findAll());\n+        } else {\n+            SearchCond cond = SearchCondConverter.convert(this.conf.getUserMatchingCond());\n+            doExtract(handler, cond, AnyTypeKind.GROUP);\n+        }\n+        handler.endElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + \"s\");\n+\n+        AttributesImpl atts = new AttributesImpl();\n+\n+        for (AnyType anyType : anyTypeDAO.findAll()) {\n+            if (!anyType.equals(anyTypeDAO.findUser()) && !anyType.equals(anyTypeDAO.findGroup())) {\n+                atts.clear();\n+                atts.addAttribute(\"\", \"\", \"type\", ReportXMLConst.XSD_STRING, anyType.getKey());\n+                handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.ANY_OBJECT) + \"s\", atts);\n+\n+                AnyTypeCond anyTypeCond = new AnyTypeCond();\n+                anyTypeCond.setAnyTypeName(anyType.getKey());\n+                SearchCond cond = StringUtils.isBlank(this.conf.getAnyObjectMatchingCond())\n+                        ? SearchCond.getLeafCond(anyTypeCond)\n+                        : SearchCond.getAndCond(\n+                                SearchCond.getLeafCond(anyTypeCond),\n+                                SearchCondConverter.convert(this.conf.getAnyObjectMatchingCond()));\n+\n+                doExtract(handler, cond, AnyTypeKind.ANY_OBJECT);\n+\n+                handler.endElement(\"\", \"\", getAnyElementName(AnyTypeKind.ANY_OBJECT) + \"s\");\n+            }\n+        }\n+    }\n+\n+    private static class Missing {\n+\n+        private final String resource;\n+\n+        private final String connObjectKeyValue;\n+\n+        Missing(final String resource, final String connObjectKeyValue) {\n+            this.resource = resource;\n+            this.connObjectKeyValue = connObjectKeyValue;\n+        }\n+\n+        public String getResource() {\n+            return resource;\n+        }\n+\n+        public String getConnObjectKeyValue() {\n+            return connObjectKeyValue;\n+        }\n+\n+    }\n+\n+    private static class Misaligned extends Missing {\n+\n+        private final String name;\n+\n+        private final Set<Object> onSyncope;\n+\n+        private final Set<Object> onResource;\n+\n+        Misaligned(\n+                final String resource,\n+                final String connObjectKeyValue,\n+                final String name,\n+                final Set<Object> onSyncope,\n+                final Set<Object> onResource) {\n+\n+            super(resource, connObjectKeyValue);\n+\n+            this.name = name;\n+            this.onSyncope = onSyncope;\n+            this.onResource = onResource;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public Set<Object> getOnSyncope() {\n+            return onSyncope;\n+        }\n+\n+        public Set<Object> getOnResource() {\n+            return onResource;\n+        }\n+\n+    }\n+}"},{"sha":"71cc9b31570bd7a8edf1c6bc15feb18874e18f63","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=9484648133a35b95a10c95fbac926ec2d33c3bfb","patch":"@@ -373,7 +373,6 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n                         page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.USER);\n                 doExtract(handler, users);\n             }\n-\n         }\n     }\n }"},{"sha":"c5a6677b27cf1bb4c09e4d27f6fd6ed383f53df9","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=9484648133a35b95a10c95fbac926ec2d33c3bfb","patch":"@@ -165,4 +165,10 @@ we are happy to inform you that the password request was execute successfully fo\n                 traceLevel=\"FAILURES\"/> \n   <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n+  <ReportTemplate name=\"empty\"/>  \n+\n+  <Report id=\"1\" name=\"reconciliation\" active=\"1\" template_name=\"empty\"/>\n+  <ReportletConfInstance id=\"1\" Report_id=\"1\" \n+                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n+\n </dataset>"},{"sha":"a009f42d3e352f50de1c0e66537038e89e548e91","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ReportTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FReportTest.java?ref=9484648133a35b95a10c95fbac926ec2d33c3bfb","patch":"@@ -54,7 +54,7 @@ public void find() {\n     public void findAll() {\n         List<Report> reports = reportDAO.findAll();\n         assertNotNull(reports);\n-        assertEquals(1, reports.size());\n+        assertEquals(2, reports.size());\n     }\n \n     @Test"},{"sha":"da1bfef0a9a426e940b4e3381318a11d0f47f246","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9484648133a35b95a10c95fbac926ec2d33c3bfb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=9484648133a35b95a10c95fbac926ec2d33c3bfb","patch":"@@ -1212,7 +1212,8 @@ $$ }&#10;\n   <Notification_events Notification_id=\"10\" event=\"[CUSTOM]:[]:[]:[unexisting2]:[SUCCESS]\"/>\n     \n   <NotificationTask_recipients notificationtask_id=\"8\" address=\"recipient@prova.org\"/>  \n-  \n+\n+  <ReportTemplate name=\"empty\"/>  \n   <ReportTemplate name=\"sample\"\n                   htmlTemplate=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;\n &lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&#10;\n@@ -2312,6 +2313,10 @@ $$ }&#10;\n   <ReportletConfInstance id=\"1\" Report_id=\"1\" \n                          serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"plainAttrs\":[\"fullname\",\"gender\"],\"derAttrs\":[\"cn\"],\"virAttrs\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n   <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" start=\"2012-02-26 15:40:04\" end=\"2012-02-26 15:41:04\"/>\n+\n+  <Report id=\"2\" name=\"reconciliation\" active=\"1\" template_name=\"empty\"/>\n+  <ReportletConfInstance id=\"2\" Report_id=\"2\" \n+                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n   \n   <SyncopeLogger logName=\"syncope.audit.[REST]:[EntitlementLogic]:[]:[getOwn]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n   "},{"sha":"07b97471a1937bcaeb81058927a7248cf9ed5d55","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9484648133a35b95a10c95fbac926ec2d33c3bfb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9484648133a35b95a10c95fbac926ec2d33c3bfb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=9484648133a35b95a10c95fbac926ec2d33c3bfb","patch":"@@ -247,10 +247,10 @@ public void reportNotExists() {\n             PROCESS_BUILDER.command(getCommand(\n                     new ReportCommand().getClass().getAnnotation(Command.class).name(),\n                     ReportCommand.ReportOptions.READ.getOptionName(),\n-                    \"2\"));\n+                    \"72\"));\n             final Process process = PROCESS_BUILDER.start();\n             final String result = IOUtils.toString(process.getInputStream());\n-            assertTrue(result.contains(\"- Report 2 doesn't exist\"));\n+            assertTrue(result.contains(\"- Report 72 doesn't exist\"));\n \n             process.destroy();\n         } catch (IOException e) {"}]}