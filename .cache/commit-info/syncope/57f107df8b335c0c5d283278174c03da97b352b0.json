{"sha":"57f107df8b335c0c5d283278174c03da97b352b0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU3ZjEwN2RmOGIzMzVjMGM1ZDI4MzI3ODE3NGMwM2RhOTdiMzUyYjA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-02T12:40:45Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-04-02T12:40:45Z"},"message":"[SYNCOPE-276] Implemented feature for upgrading existing content of internal storage + authenticator with MD5 fallback\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1463506 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"78db19464ea5320dac44668c721a3961207ff2b8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/78db19464ea5320dac44668c721a3961207ff2b8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/57f107df8b335c0c5d283278174c03da97b352b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/57f107df8b335c0c5d283278174c03da97b352b0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/57f107df8b335c0c5d283278174c03da97b352b0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/57f107df8b335c0c5d283278174c03da97b352b0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1a32af978e4af9d6e90f7289dca8bc2e97dbb1cb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1a32af978e4af9d6e90f7289dca8bc2e97dbb1cb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1a32af978e4af9d6e90f7289dca8bc2e97dbb1cb"}],"stats":{"total":635,"additions":511,"deletions":124},"files":[{"sha":"5e44f879fb00f455d43e526bcb3a3b31d9f1f84c","filename":"core/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -1066,7 +1066,7 @@ under the License.\n         <dependency>\n           <groupId>mysql</groupId>\n           <artifactId>mysql-connector-java</artifactId>\n-          <version>5.1.23</version>\n+          <version>5.1.24</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>"},{"sha":"410eb3665ea7ed8d0a9669647deba12c7796aa36","filename":"core/src/main/java/org/apache/syncope/core/init/ContentUpgrader.java","status":"added","additions":304,"deletions":0,"changes":304,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -0,0 +1,304 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.init;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AbstractPolicySpec;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.core.persistence.beans.ConnInstance;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.Notification;\n+import org.apache.syncope.core.persistence.beans.Policy;\n+import org.apache.syncope.core.persistence.beans.SyncTask;\n+import org.apache.syncope.core.persistence.beans.SyncopeConf;\n+import org.apache.syncope.core.persistence.beans.UserRequest;\n+import org.apache.syncope.core.persistence.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.persistence.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.dao.UserRequestDAO;\n+import org.apache.syncope.core.persistence.dao.impl.AbstractContentDealer;\n+import org.apache.syncope.core.util.ConnIdBundleManager;\n+import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.core.workflow.ActivitiDetector;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ReflectionUtils;\n+\n+/**\n+ * Upgrade internal storage content according to format expected by this Syncope release.\n+ */\n+@Component\n+public class ContentUpgrader extends AbstractContentDealer {\n+\n+    @Autowired\n+    private DataSource dataSource;\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private NotificationDAO notificationDAO;\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private UserRequestDAO userRequestDAO;\n+\n+    private void upgradeActiviti() {\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        List<Map<String, Object>> byteArrays =\n+                jdbcTemplate.queryForList(\"SELECT ID_, BYTES_ FROM ACT_GE_BYTEARRAY\");\n+        for (Map<String, Object> row : byteArrays) {\n+            byte[] updated = new String((byte[]) row.get(\"BYTES_\")).replaceAll(\n+                    \"org\\\\.apache.syncope\\\\.core\\\\.workflow\\\\.activiti\\\\.\",\n+                    \"org.apache.syncope.core.workflow.user.activiti.task.\").\n+                    replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n+                    \"org.apache.syncope.common.to\").\n+                    replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.\",\n+                    \"org.apache.syncope.common.types\").\n+                    replaceAll(\"org/apache/syncope/types/\",\n+                    \"org/apache/syncope/common/types/\").\n+                    getBytes();\n+            jdbcTemplate.update(\"UPDATE ACT_GE_BYTEARRAY SET BYTES_=? WHERE ID_=?\",\n+                    new Object[] {updated, row.get(\"ID_\")});\n+        }\n+    }\n+\n+    private String upgradeSyncopeConf() {\n+        confDAO.delete(\"connid.bundles.directory\");\n+\n+        URI localConnIdLocation = null;\n+        for (URI location : ConnIdBundleManager.getConnManagers().keySet()) {\n+            if (\"file\".equals(location.getScheme())) {\n+                localConnIdLocation = location;\n+            }\n+        }\n+        if (localConnIdLocation == null) {\n+            throw new IllegalArgumentException(\"No local ConnId location was found, aborting\");\n+        }\n+\n+        SyncopeConf cipher = confDAO.find(\"password.cipher.algorithm\");\n+        if (\"MD5\".equals(cipher.getValue())) {\n+            cipher.setValue(CipherAlgorithm.SMD5.name());\n+        }\n+\n+        return localConnIdLocation.toString();\n+    }\n+\n+    private void upgradeConnInstance(final String localConnIdLocation) {\n+        Field xmlConfiguration = ReflectionUtils.findField(ConnInstance.class, \"xmlConfiguration\");\n+        xmlConfiguration.setAccessible(true);\n+        for (ConnInstance connInstance : connInstanceDAO.findAll()) {\n+            connInstance.setLocation(localConnIdLocation);\n+\n+            try {\n+                String oldConf = (String) xmlConfiguration.get(connInstance);\n+                connInstance.setConfiguration(\n+                        XMLSerializer.<HashSet<ConnConfProperty>>deserialize(\n+                        oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n+                        ConnConfProperty.class.getName())));\n+            } catch (Exception e) {\n+                LOG.error(\"While upgrading {}\", connInstance, e);\n+            }\n+        }\n+    }\n+\n+    private void upgradeExternalResource() {\n+        Field xmlConfiguration = ReflectionUtils.findField(ExternalResource.class, \"xmlConfiguration\");\n+        xmlConfiguration.setAccessible(true);\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            try {\n+                String oldConf = (String) xmlConfiguration.get(resource);\n+                if (StringUtils.isNotBlank(oldConf)) {\n+                    resource.setConnInstanceConfiguration(\n+                            XMLSerializer.<HashSet<ConnConfProperty>>deserialize(\n+                            oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n+                            ConnConfProperty.class.getName())));\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"While upgrading {}\", resource, e);\n+            }\n+        }\n+    }\n+\n+    private void upgradePolicy() {\n+        Field specification = ReflectionUtils.findField(Policy.class, \"specification\");\n+        specification.setAccessible(true);\n+        for (Policy policy : policyDAO.findAll()) {\n+            try {\n+                String oldConf = (String) specification.get(policy);\n+                policy.setSpecification(\n+                        XMLSerializer.<AbstractPolicySpec>deserialize(\n+                        oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.\",\n+                        \"org.apache.syncope.common.types.\").\n+                        replaceAll(\"alternativeSearchAttrs\", \"uAltSearchSchemas\")));\n+            } catch (Exception e) {\n+                LOG.error(\"While upgrading {}\", policy, e);\n+            }\n+        }\n+    }\n+\n+    private void upgradeNotification() {\n+        Field xmlAbout = ReflectionUtils.findField(Notification.class, \"xmlAbout\");\n+        xmlAbout.setAccessible(true);\n+        Field xmlRecipients = ReflectionUtils.findField(Notification.class, \"xmlRecipients\");\n+        xmlRecipients.setAccessible(true);\n+        for (Notification notification : notificationDAO.findAll()) {\n+            try {\n+                String oldAbout = (String) xmlAbout.get(notification);\n+                if (oldAbout != null) {\n+                    notification.setAbout(\n+                            XMLSerializer.<NodeCond>deserialize(\n+                            oldAbout.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n+                            \"org.apache.syncope.common.search.\")));\n+                }\n+                String oldRecipients = (String) xmlRecipients.get(notification);\n+                if (oldRecipients != null) {\n+                    notification.setRecipients(\n+                            XMLSerializer.<NodeCond>deserialize(\n+                            oldRecipients.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.search\\\\.\",\n+                            \"org.apache.syncope.common.search.\")));\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"While upgrading {}\", notification, e);\n+            }\n+        }\n+    }\n+\n+    private void upgradeSyncTask() {\n+        Field userTemplate = ReflectionUtils.findField(SyncTask.class, \"userTemplate\");\n+        userTemplate.setAccessible(true);\n+        for (SyncTask task : taskDAO.findAll(SyncTask.class)) {\n+            try {\n+                String oldUserTemplate = (String) userTemplate.get(task);\n+                if (oldUserTemplate != null) {\n+                    task.setUserTemplate(\n+                            XMLSerializer.<UserTO>deserialize(\n+                            oldUserTemplate.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n+                            \"org.apache.syncope.common.to.\").\n+                            replaceAll(\"propagationTOs\",\n+                            \"propagationStatusTOs\")));\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"While upgrading {}\", task, e);\n+            }\n+        }\n+    }\n+\n+    private void upgradeReportletConf() {\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        List<Map<String, Object>> rcInstances =\n+                jdbcTemplate.queryForList(\"SELECT id, serializedInstance FROM ReportletConfInstance\");\n+        for (Map<String, Object> row : rcInstances) {\n+            String updated = ((String) row.get(\"serializedInstance\")).\n+                    replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.report\\\\.\",\n+                    \"org.apache.syncope.common.report.\");\n+            jdbcTemplate.update(\"UPDATE ReportletConfInstance SET serializedInstance=? WHERE id=?\",\n+                    new Object[] {updated, row.get(\"id\")});\n+        }\n+    }\n+\n+    private void upgradeUserRequest() {\n+        Field payload = ReflectionUtils.findField(UserRequest.class, \"payload\");\n+        payload.setAccessible(true);\n+        for (UserRequest request : userRequestDAO.findAll()) {\n+            try {\n+                String oldPayload = (String) payload.get(request);\n+                if (oldPayload != null) {\n+                    payload.set(request,\n+                            oldPayload.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n+                            \"org.apache.syncope.common.to.\").\n+                            replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.mod\\\\.\",\n+                            \"org.apache.syncope.common.mod.\"));\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"While upgrading {}\", request, e);\n+            }\n+        }\n+    }\n+\n+    @Transactional\n+    public void upgrade() {\n+        if (ActivitiDetector.isActivitiEnabledForUsers()) {\n+            upgradeActiviti();\n+        }\n+\n+        final String localConnIdLocation = upgradeSyncopeConf();\n+\n+        upgradeConnInstance(localConnIdLocation);\n+\n+        upgradeExternalResource();\n+\n+        upgradePolicy();\n+\n+        upgradeNotification();\n+\n+        upgradeSyncTask();\n+\n+        upgradeReportletConf();\n+\n+        upgradeUserRequest();\n+\n+        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        try {\n+            createIndexes(conn);\n+            createViews(conn);\n+        } finally {\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+            if (conn != null) {\n+                try {\n+                    if (!conn.isClosed()) {\n+                        conn.close();\n+                    }\n+                } catch (SQLException e) {\n+                    LOG.error(\"While releasing connection\", e);\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"19953a00c4907d9b7d554ed1f078f04499467a20","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -212,11 +212,10 @@ public void unregisterJob(final Report report) {\n         unregisterJob(getJobName(report));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Transactional\n     public void load() {\n         // 1. jobs for SchedTasks\n-        Set<SchedTask> tasks = new HashSet(taskDAO.findAll(SchedTask.class));\n+        Set<SchedTask> tasks = new HashSet<SchedTask>(taskDAO.findAll(SchedTask.class));\n         tasks.addAll(taskDAO.findAll(SyncTask.class));\n         for (SchedTask task : tasks) {\n             try {"},{"sha":"7c7c44fa6e470418b213d88f6cc57c483209ff71","filename":"core/src/main/java/org/apache/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -22,14 +22,19 @@\n import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.stereotype.Component;\n \n /**\n  * Take care of all initializations needed by Syncope to run up and safe.\n  */\n @Component\n+@Configurable\n public class SpringContextInitializer implements InitializingBean {\n \n+    @Autowired\n+    private ContentUpgrader contentUpgrader;\n+\n     @Autowired\n     private ConnectorFactory connFactory;\n \n@@ -48,8 +53,18 @@ public class SpringContextInitializer implements InitializingBean {\n     @Autowired\n     private WorkflowAdapterLoader workflowAdapterLoader;\n \n+    private boolean upgrade = false;\n+\n+    public void setUpgrade(final boolean upgrade) {\n+        this.upgrade = upgrade;\n+    }\n+\n     @Override\n     public void afterPropertiesSet() throws Exception {\n+        if (upgrade) {\n+            contentUpgrader.upgrade();\n+        }\n+\n         workflowAdapterLoader.load();\n         contentLoader.load();\n         connFactory.load();"},{"sha":"26ee941294a35dfcf58b9b1a2fa1b293fa5e6cbd","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -312,25 +312,22 @@ public void setSyncPolicy(final SyncPolicy syncPolicy) {\n         this.syncPolicy = syncPolicy;\n     }\n \n-    public void setConnectorConfigurationProperties(final Set<ConnConfProperty> properties) {\n-        // create new set to make sure it's a serializable set implementation.\n-        xmlConfiguration = XMLSerializer.serialize(new HashSet<ConnConfProperty>(properties));\n-    }\n-\n-    public Set<ConnConfProperty> getConfiguration() {\n-        Set<ConnConfProperty> result = Collections.emptySet();\n-\n-        Set<ConnConfProperty> deserializedSet;\n+    public Set<ConnConfProperty> getConnInstanceConfiguration() {\n+        Set<ConnConfProperty> result = null;\n         if (StringUtils.isNotBlank(xmlConfiguration)) {\n-            deserializedSet = XMLSerializer.<HashSet<ConnConfProperty>>deserialize(xmlConfiguration);\n-            if (deserializedSet != null) {\n-                result = deserializedSet;\n-            }\n+            result = XMLSerializer.<HashSet<ConnConfProperty>>deserialize(xmlConfiguration);\n+        }\n+        if (result == null) {\n+            result = Collections.emptySet();\n         }\n \n         return result;\n     }\n \n+    public void setConnInstanceConfiguration(final Set<ConnConfProperty> properties) {\n+        xmlConfiguration = XMLSerializer.serialize(new HashSet<ConnConfProperty>(properties));\n+    }\n+\n     public String getUserializedSyncToken() {\n         return userializedSyncToken;\n     }\n@@ -346,7 +343,7 @@ public void setUserializedSyncToken(final String serializedSyncToken) {\n     }\n \n     public void setUsyncToken(final SyncToken syncToken) {\n-        userializedSyncToken = XMLSerializer.serialize(syncToken);\n+        this.userializedSyncToken = XMLSerializer.serialize(syncToken);\n     }\n \n     public String getRserializedSyncToken() {\n@@ -364,7 +361,7 @@ public void setRserializedSyncToken(final String serializedSyncToken) {\n     }\n \n     public void setRsyncToken(final SyncToken syncToken) {\n-        rserializedSyncToken = XMLSerializer.serialize(syncToken);\n+        this.rserializedSyncToken = XMLSerializer.serialize(syncToken);\n     }\n \n     public String getPropagationActionsClassName() {"},{"sha":"ed25c79c7b45dbd5481805ca8163e01db80b732e","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Policy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -69,6 +69,6 @@ public <T extends AbstractPolicySpec> T getSpecification() {\n     }\n \n     public <T extends AbstractPolicySpec> void setSpecification(final T policy) {\n-        specification = XMLSerializer.serialize(policy);\n+        this.specification = XMLSerializer.serialize(policy);\n     }\n }"},{"sha":"ce71a9a5508a2aba06fd87199ca30b35f0b14193","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ReportletConfInstance.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -59,7 +59,7 @@ public ReportletConf getInstance() {\n     }\n \n     public void setInstance(final ReportletConf instance) {\n-        serializedInstance = instance == null\n+        this.serializedInstance = instance == null\n                 ? null\n                 : XMLSerializer.serialize(instance);\n     }"},{"sha":"a65618de41c022562dc672394c705aaa9be257e0","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -84,7 +84,8 @@ public SyncTask() {\n     }\n \n     @Override\n-    public void setJobClassName(String jobClassName) {\n+    public void setJobClassName(final String jobClassName) {\n+        // fixed to SyncJob, cannot be changed\n     }\n \n     public ExternalResource getResource() {"},{"sha":"caca4cb4bdab850bb31bde9e7929ce45cd15ee0c","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AbstractContentDealer.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractContentDealer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractContentDealer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractContentDealer.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao.impl;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractContentDealer {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractContentDealer.class);\n+\n+    private static final String VIEWS_FILE = \"/views.xml\";\n+\n+    private static final String INDEXES_FILE = \"/indexes.xml\";\n+\n+    protected void createIndexes(final Connection conn) {\n+        LOG.debug(\"Creating indexes\");\n+\n+        InputStream indexesStream = null;\n+        Properties indexes = new Properties();\n+        try {\n+            indexesStream = getClass().getResourceAsStream(INDEXES_FILE);\n+            indexes.loadFromXML(indexesStream);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Error loading properties from stream\", e);\n+        } finally {\n+            IOUtils.closeQuietly(indexesStream);\n+        }\n+\n+        for (String idx : indexes.stringPropertyNames()) {\n+            LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n+            PreparedStatement statement = null;\n+            try {\n+                final String updateIndexed = indexes.get(idx).toString();\n+                statement = conn.prepareStatement(updateIndexed);\n+                statement.executeUpdate();\n+            } catch (SQLException e) {\n+                LOG.error(\"Could not create index \", e);\n+            } finally {\n+                closeStatement(statement);\n+            }\n+        }\n+    }\n+\n+    protected void createViews(final Connection conn) {\n+        LOG.debug(\"Creating views\");\n+        InputStream viewsStream = null;\n+        try {\n+            viewsStream = getClass().getResourceAsStream(VIEWS_FILE);\n+            Properties views = new Properties();\n+            views.loadFromXML(viewsStream);\n+\n+            for (String idx : views.stringPropertyNames()) {\n+                LOG.debug(\"Creating view {}\", views.get(idx).toString());\n+                PreparedStatement statement = null;\n+                try {\n+                    final String updateViews = views.get(idx).toString().replaceAll(\"\\\\n\", \" \");\n+                    statement = conn.prepareStatement(updateViews);\n+                    statement.executeUpdate();\n+                } catch (SQLException e) {\n+                    LOG.error(\"Could not create view \", e);\n+                } finally {\n+                    if (statement != null) {\n+                        statement.close();\n+                    }\n+                }\n+            }\n+\n+            LOG.debug(\"Views created, go for indexes\");\n+        } catch (Exception e) {\n+            LOG.error(\"While creating views\", e);\n+        } finally {\n+            IOUtils.closeQuietly(viewsStream);\n+        }\n+    }\n+\n+    protected void closeStatement(final PreparedStatement statement) {\n+        if (statement != null) {\n+            try {\n+                statement.close();\n+            } catch (SQLException e) {\n+                LOG.error(\"Error closing SQL statement\", e);\n+            }\n+        }\n+    }\n+}"},{"sha":"7a75048c2ea9bffc8dcda063aa852600f0da784a","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ContentLoader.java","status":"modified","additions":1,"deletions":81,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -23,15 +23,12 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.util.Properties;\n import javax.sql.DataSource;\n import javax.xml.parsers.SAXParser;\n import javax.xml.parsers.SAXParserFactory;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.util.ImportExport;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n@@ -41,13 +38,7 @@\n  * Initialize Database with default content if no data is present already.\n  */\n @Component\n-public class ContentLoader {\n-\n-    private static final String VIEWS_FILE = \"/views.xml\";\n-\n-    private static final String INDEXES_FILE = \"/indexes.xml\";\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ContentLoader.class);\n+public class ContentLoader extends AbstractContentDealer {\n \n     @Autowired\n     private DataSource dataSource;\n@@ -111,67 +102,6 @@ private boolean isDataPresent(final Connection conn) {\n         }\n     }\n \n-    private void createViews(final Connection conn) {\n-        LOG.debug(\"Creating views\");\n-        InputStream viewsStream = null;\n-        try {\n-            viewsStream = getClass().getResourceAsStream(VIEWS_FILE);\n-            Properties views = new Properties();\n-            views.loadFromXML(viewsStream);\n-\n-            for (String idx : views.stringPropertyNames()) {\n-                LOG.debug(\"Creating view {}\", views.get(idx).toString());\n-                PreparedStatement statement = null;\n-                try {\n-                    final String updateViews = views.get(idx).toString().replaceAll(\"\\\\n\", \" \");\n-                    statement = conn.prepareStatement(updateViews);\n-                    statement.executeUpdate();\n-                } catch (SQLException e) {\n-                    LOG.error(\"Could not create view \", e);\n-                } finally {\n-                    if (statement != null) {\n-                        statement.close();\n-                    }\n-                }\n-            }\n-\n-            LOG.debug(\"Views created, go for indexes\");\n-        } catch (Exception e) {\n-            LOG.error(\"While creating views\", e);\n-        } finally {\n-            IOUtils.closeQuietly(viewsStream);\n-        }\n-    }\n-\n-    private void createIndexes(final Connection conn) {\n-        LOG.debug(\"Creating indexes\");\n-\n-        InputStream indexesStream = null;\n-        Properties indexes = new Properties();\n-        try {\n-            indexesStream = getClass().getResourceAsStream(INDEXES_FILE);\n-            indexes.loadFromXML(indexesStream);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Error loading properties from stream\", e);\n-        } finally {\n-            IOUtils.closeQuietly(indexesStream);\n-        }\n-\n-        for (String idx : indexes.stringPropertyNames()) {\n-            LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n-            PreparedStatement statement = null;\n-            try {\n-                final String updateIndexed = indexes.get(idx).toString();\n-                statement = conn.prepareStatement(updateIndexed);\n-                statement.executeUpdate();\n-            } catch (SQLException e) {\n-                LOG.error(\"Could not create index \", e);\n-            } finally {\n-                closeStatement(statement);\n-            }\n-        }\n-    }\n-\n     private void loadDefaultContent() {\n         SAXParserFactory factory = SAXParserFactory.newInstance();\n         InputStream in = null;\n@@ -187,14 +117,4 @@ private void loadDefaultContent() {\n             IOUtils.closeQuietly(in);\n         }\n     }\n-\n-    private void closeStatement(final PreparedStatement statement) {\n-        if (statement != null) {\n-            try {\n-                statement.close();\n-            } catch (SQLException e) {\n-                LOG.error(\"Error closing SQL statement\", e);\n-            }\n-        }\n-    }\n }"},{"sha":"8e98fe26f86c79e4e5a3ad5a93dc06f06a0bc139","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -132,7 +132,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setSyncPolicy(resourceTO.getSyncPolicy() == null\n                 ? null : (SyncPolicy) policyDAO.find(resourceTO.getSyncPolicy()));\n \n-        resource.setConnectorConfigurationProperties(new HashSet<ConnConfProperty>(resourceTO.getConnConfProperties()));\n+        resource.setConnInstanceConfiguration(new HashSet<ConnConfProperty>(resourceTO.getConnConfProperties()));\n \n         if (resourceTO.getUsyncToken() == null) {\n             resource.setUserializedSyncToken(null);\n@@ -223,7 +223,7 @@ private AbstractMappingItem getMappingItem(final MappingItemTO itemTO, final Abs\n     public ConnInstance getConnInstance(final ExternalResource resource) {\n         final ConnInstance connInstanceClone = (ConnInstance) SerializationUtils.clone(resource.getConnector());\n \n-        return getConnInstance(connInstanceClone, resource.getConfiguration());\n+        return getConnInstance(connInstanceClone, resource.getConnInstanceConfiguration());\n     }\n \n     public ConnInstance getConnInstance(final ResourceTO resourceTO) {\n@@ -326,7 +326,7 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.setSyncPolicy(resource.getSyncPolicy() == null\n                 ? null : resource.getSyncPolicy().getId());\n \n-        resourceTO.setConnectorConfigurationProperties(resource.getConfiguration());\n+        resourceTO.setConnectorConfigurationProperties(resource.getConnInstanceConfiguration());\n \n         resourceTO.setUsyncToken(resource.getUserializedSyncToken());\n         resourceTO.setRsyncToken(resource.getRserializedSyncToken());"},{"sha":"5fca2c9c7b657cf9bd914b7953aff5bc414c48e0","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -45,7 +45,7 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeAuthenticationProvider.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeAuthenticationProvider.class);\n \n     @Autowired\n     private AuditManager auditManager;\n@@ -115,7 +115,7 @@ public Authentication authenticate(final Authentication authentication)\n \n         String username = authentication.getName();\n         if (adminUser.equals(username)) {\n-            authenticated = PasswordEncoder.verify(\n+            authenticated = authenticate(\n                     authentication.getCredentials().toString(),\n                     CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n                     adminPassword);\n@@ -126,7 +126,7 @@ public Authentication authenticate(final Authentication authentication)\n                 if (user.isSuspended()) {\n                     throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n                 }\n-                authenticated = PasswordEncoder.verify(\n+                authenticated = authenticate(\n                         authentication.getCredentials().toString(),\n                         user.getCipherAlgorithm(),\n                         user.getPassword());\n@@ -171,6 +171,12 @@ public Authentication authenticate(final Authentication authentication)\n         return token;\n     }\n \n+    protected boolean authenticate(final String password, final CipherAlgorithm cipherAlgorithm,\n+            final String digestedPassword) {\n+\n+        return PasswordEncoder.verify(password, cipherAlgorithm, digestedPassword);\n+    }\n+\n     @Override\n     public boolean supports(final Class<? extends Object> type) {\n         return type.equals(UsernamePasswordAuthenticationToken.class);"},{"sha":"b6a12b6cde75034af2427318a84c3bee212cfd15","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeMD5FallbackAuthenticationProvider.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeMD5FallbackAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeMD5FallbackAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeMD5FallbackAuthenticationProvider.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.security;\n+\n+import org.apache.syncope.common.types.CipherAlgorithm;\n+import org.jasypt.commons.CommonUtils;\n+import org.jasypt.digest.StandardStringDigester;\n+\n+/**\n+ * Extend standard authentication by checking passwords using MD5 (not supported anymore as per SYNCOPE-51).\n+ */\n+public class SyncopeMD5FallbackAuthenticationProvider extends SyncopeAuthenticationProvider {\n+\n+    @Override\n+    protected boolean authenticate(final String password, final CipherAlgorithm cipherAlgorithm,\n+            final String digestedPassword) {\n+\n+        boolean authenticated = super.authenticate(password, cipherAlgorithm, digestedPassword);\n+        // if \"normal\" authentication fails and cipher is SMD5, we're probably handling an \"old\" MD5 password\n+        if (!authenticated && CipherAlgorithm.SMD5 == cipherAlgorithm) {\n+            StandardStringDigester digester = new StandardStringDigester();\n+            digester.setAlgorithm(\"MD5\");\n+            digester.setIterations(1);\n+            digester.setSaltSizeBytes(0);\n+            digester.setStringOutputType(CommonUtils.STRING_OUTPUT_TYPE_HEXADECIMAL);\n+\n+            authenticated = digester.matches(password, digestedPassword);\n+        }\n+        return authenticated;\n+    }\n+}"},{"sha":"4e12bbc9ecb251cb55f4734d23ac573d56d7eeb4","filename":"core/src/main/java/org/apache/syncope/core/util/PasswordEncoder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordEncoder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordEncoder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordEncoder.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -31,6 +31,7 @@\n import javax.crypto.spec.SecretKeySpec;\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.syncope.common.types.CipherAlgorithm;\n+import org.jasypt.commons.CommonUtils;\n import org.jasypt.digest.StandardStringDigester;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -163,7 +164,7 @@ private static StandardStringDigester getDigester(final CipherAlgorithm cipherAl\n             digester.setSaltSizeBytes(0);\n         }\n \n-        digester.setStringOutputType(\"hexadecimal\");\n+        digester.setStringOutputType(CommonUtils.STRING_OUTPUT_TYPE_HEXADECIMAL);\n         return digester;\n     }\n "},{"sha":"fd7165db15152eccc3de28fb137904375bd72b3b","filename":"core/src/main/java/org/apache/syncope/core/workflow/ActivitiDetector.java","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/57f107df8b335c0c5d283278174c03da97b352b0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiDetector.java?ref=57f107df8b335c0c5d283278174c03da97b352b0","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.workflow;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.Properties;\n import org.apache.commons.io.IOUtils;\n@@ -31,32 +30,22 @@ public class ActivitiDetector {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ActivitiDetector.class);\n \n-    private static final String XX = \"/workflow.properties\";\n+    private static final String WORKFLOW_PROPERTIES = \"/workflow.properties\";\n \n     private static String uwfAdapterClassName;\n \n     private static String rwfAdapterClassName;\n \n     private static String activitiVersion;\n \n-    static {\n-        try {\n-            init();\n-        } catch (IOException e) {\n-            LOG.error(\"Could not read from {}\", XX, e);\n-        }\n-    }\n-\n     /**\n      * Read classpath:/workflow.properties in order to determine the configured workflow adapter class name.\n-     *\n-     * @throws IOException if anything goes wrong\n      */\n-    private static void init() throws IOException {\n-        Properties props = new java.util.Properties();\n+    static {\n+        Properties props = new Properties();\n         InputStream propStream = null;\n         try {\n-            propStream = ContentLoader.class.getResourceAsStream(XX);\n+            propStream = ContentLoader.class.getResourceAsStream(WORKFLOW_PROPERTIES);\n             props.load(propStream);\n             uwfAdapterClassName = props.getProperty(\"uwfAdapter\");\n             rwfAdapterClassName = props.getProperty(\"rwfAdapter\");"}]}