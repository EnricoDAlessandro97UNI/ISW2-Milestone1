{"sha":"a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE0ZmExOTViZjRlMDQzZTVhOGRmZmE2ZmU4ZGFkYjllZmQxM2U4ZWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-26T15:02:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-26T15:03:15Z"},"message":"[SYNCOPE-1124] Adding support for JEXL custom functions + providing fullPath2Dn utility","tree":{"sha":"b494c6077bb447fa781e292809009aa89963c460","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b494c6077bb447fa781e292809009aa89963c460"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"00617f7b9ad3ed540c8a1d4e22ab84b63f4a1158","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00617f7b9ad3ed540c8a1d4e22ab84b63f4a1158","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/00617f7b9ad3ed540c8a1d4e22ab84b63f4a1158"}],"stats":{"total":236,"additions":124,"deletions":112},"files":[{"sha":"f0279301521d4ec52f4aabf1ef8da5d1bf18dd8c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -293,15 +293,13 @@ public void updateRemoveOrgUnit() {\n         ExternalResource resource = resourceDAO.find(\"resource-ldap-orgunit\");\n         assertNotNull(resource);\n         assertNotNull(resource.getOrgUnit());\n-        assertTrue(resource.getPropagationActionsClassNames().size() == 1);\n \n         String orgUnitKey = resource.getOrgUnit().getKey();\n         assertNotNull(entityManager().find(JPAOrgUnit.class, orgUnitKey));\n \n         resource.getOrgUnit().setResource(null);\n         resource.setOrgUnit(null);\n-        resource.getPropagationActionsClassNames().clear();\n-        \n+\n         resourceDAO.save(resource);\n         resourceDAO.flush();\n "},{"sha":"5e9c46ed3ec505857c05e597f590c112b7a7efb2","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -751,12 +751,9 @@ under the License.\n                     propagationPriority=\"1\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\"\n                     jsonConf='[{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute. Default is \\\"entryUUID\\\".\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"overridable\":true,\"values\":[\"entryUUID\"]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":[]},\"overridable\":true,\"values\":[\"o=isp\"]}]'/>\n-  <OrgUnit id=\"599a59cf-9a23-4447-9a59-cf9a2334473a\" connObjectLink=\"'ou=' + name + ',o=isp'\"\n+  <OrgUnit id=\"599a59cf-9a23-4447-9a59-cf9a2334473a\" connObjectLink=\"syncope:fullPath2Dn(fullPath, 'ou') + ',o=isp'\"\n            extAttrName=\"ou\" objectClass=\"organizationalUnit\" resource_id=\"resource-ldap-orgunit\"/>\n \n-  <ExternalResource_PropActions resource_id=\"resource-ldap-orgunit\"\n-                                actionClassName=\"org.apache.syncope.core.provisioning.java.propagation.LDAPNestedRealmPropagationActions\"/>\n-  \n   <ExternalResource id=\"ws-target-resource-nopropagation\" connector_id=\"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\""},{"sha":"f68ec609fba7d4fcae8ef722ff6f25ecd7af1108","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -23,6 +23,7 @@\n import java.beans.PropertyDescriptor;\n import java.lang.reflect.Field;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -42,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -63,6 +65,7 @@ private static JexlEngine getEngine() {\n                 JEXL_ENGINE = new JexlBuilder().\n                         uberspect(new ClassFreeUberspect()).\n                         loader(new EmptyClassLoader()).\n+                        namespaces(Collections.<String, Object>singletonMap(\"syncope\", new SyncopeJexlFunctions())).\n                         cache(512).\n                         silent(false).\n                         strict(false).\n@@ -152,8 +155,11 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n         if (object instanceof Any) {\n             Any<?> any = (Any<?>) object;\n             if (any.getRealm() != null) {\n-                context.set(\"realm\", any.getRealm().getName());\n+                context.set(\"realm\", any.getRealm().getFullPath());\n             }\n+        } else if (object instanceof Realm) {\n+            Realm realm = (Realm) object;\n+            context.set(\"fullPath\", realm.getFullPath());\n         }\n \n         return context;"},{"sha":"a3b5c368312927323440dc3c3f15e351929c15b1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FSyncopeJexlFunctions.java?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.jexl;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Utility functions for usage with JEXL engine.\n+ *\n+ * @see JexlUtils#getEngine()\n+ */\n+public class SyncopeJexlFunctions {\n+\n+    /**\n+     * Converts realm's full path into the equivalent DN.\n+     *\n+     * Example: {@code}/a/b/c{@code} becomes {@code}ou=c,ou=b,ou=a{@code}.\n+     *\n+     * @param fullPath realm's full path\n+     * @param attr attribute name for DN\n+     * @return DN equivalent of the provided full path\n+     */\n+    public String fullPath2Dn(final String fullPath, final String attr) {\n+        return fullPath2Dn(fullPath, attr, StringUtils.EMPTY);\n+    }\n+\n+    /**\n+     * Converts realm's full path into the equivalent DN.\n+     *\n+     * Example: {@code}/a/b/c{@code} becomes {@code},ou=c,ou=b,ou=a{@code}, when {@code}prefix{@code} is\n+     * {@code}&quot;,&quot;{@code}\n+     *\n+     * @param fullPath realm's full path\n+     * @param attr attribute name for DN\n+     * @param prefix result's prefix\n+     * @return DN equivalent of the provided full path\n+     */\n+    public String fullPath2Dn(final String fullPath, final String attr, final String prefix) {\n+        String[] fullPathSplitted = fullPath.split(\"/\");\n+        if (fullPathSplitted == null || fullPathSplitted.length <= 1) {\n+            return prefix;\n+        }\n+\n+        List<String> headless = Arrays.asList(fullPathSplitted).subList(1, fullPathSplitted.length);\n+        return prefix + attr + \"=\" + StringUtils.join(IterableUtils.reversedIterable(headless), \",\" + attr + \"=\");\n+    }\n+\n+}"},{"sha":"8cd8fe1a4bc039a6d73cab6d7254ae41bb64b990","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPNestedRealmPropagationActions.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/00617f7b9ad3ed540c8a1d4e22ab84b63f4a1158/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPNestedRealmPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/00617f7b9ad3ed540c8a1d4e22ab84b63f4a1158/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPNestedRealmPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPNestedRealmPropagationActions.java?ref=00617f7b9ad3ed540c8a1d4e22ab84b63f4a1158","patch":"@@ -1,88 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.propagation;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.Name;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-/**\n- * Action for propagating realms to LDAP resource respecting realms hierarchy.\n- *\n- */\n-public class LDAPNestedRealmPropagationActions extends DefaultPropagationActions {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(LDAPNestedRealmPropagationActions.class);\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    @Override\n-    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        super.before(task, beforeObj);\n-        if (task.getAnyType() == null && task.getAnyTypeKind() == null && task.getResource().getOrgUnit() != null) {\n-            // search realm involved\n-            Realm realm = realmDAO.find(task.getEntityKey());\n-            Name objectLinkAttr = AttributeUtil.getNameFromAttributes(task.getAttributes());\n-            String oldObjectLink = objectLinkAttr.getNameValue();\n-            String extAttrName = task.getResource().getOrgUnit().getExtAttrName();\n-\n-            String[] fullPathSplitted = realm == null ? null : StringUtils.split(realm.getFullPath(), \"/\");\n-            if (fullPathSplitted != null\n-                    && fullPathSplitted.length > 1\n-                    && StringUtils.isNotBlank(oldObjectLink)\n-                    && StringUtils.isNotBlank(extAttrName)) {\n-                // if realm depth is greater than 1 adapt Object Link accordingly\n-                LOG.debug(\"{} has depth greater than 1, adapting Object Link.\", task.getConnObjectKey(),\n-                        fullPathSplitted);\n-                StringBuilder newOlPrefix = new StringBuilder();\n-\n-                for (int i = fullPathSplitted.length - 1; i >= 0; i--) {\n-                    newOlPrefix.append(extAttrName).append(\"=\").append(fullPathSplitted[i]).append(\",\");\n-                }\n-\n-                String[] olSplitted = oldObjectLink.split(extAttrName + \"=\" + \"[a-zA-Z0-9]*,\");\n-\n-                if (olSplitted.length < 2) {\n-                    LOG.error(\"Unable to generate new object link starting from {}\", oldObjectLink);\n-                } else {\n-                    // change Object Link name attribute\n-                    Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n-                    attributes.remove(objectLinkAttr);\n-                    attributes.add(new Name(newOlPrefix.append(olSplitted[1]).toString()));\n-                    task.setAttributes(attributes);\n-                }\n-            }\n-\n-        } else {\n-            LOG.debug(\"Object to propagte is not a Realm, nothing to do.\");\n-        }\n-    }\n-\n-}"},{"sha":"16e8ddf9b7f0e7acb8d1eaf6fba4fdce9ae4fecf","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingTest.java","status":"modified","additions":31,"deletions":2,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingTest.java?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -21,12 +21,17 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n+import org.apache.commons.jexl3.JexlContext;\n+import org.apache.commons.jexl3.MapContext;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Name;\n import org.junit.Test;\n@@ -42,11 +47,14 @@ public class MappingTest extends AbstractTest {\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n     @Test\n-    public void connObjectLink() {\n+    public void anyConnObjectLink() {\n         ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n         assertNotNull(ldap);\n \n@@ -61,9 +69,30 @@ public void connObjectLink() {\n         Name name = MappingUtils.evaluateNAME(user, provision, user.getUsername());\n         assertEquals(\"uid=rossini,ou=people,o=isp\", name.getNameValue());\n \n-        provision.getMapping().setConnObjectLink(\"'uid=' + username + ',o=' + realm + ',ou=people,o=isp'\");\n+        provision.getMapping().setConnObjectLink(\n+                \"'uid=' + username + realm.replaceAll('/', ',o=') + ',ou=people,o=isp'\");\n \n         name = MappingUtils.evaluateNAME(user, provision, user.getUsername());\n         assertEquals(\"uid=rossini,o=even,ou=people,o=isp\", name.getNameValue());\n     }\n+\n+    @Test\n+    public void realmConnObjectLink() {\n+        Realm realm = realmDAO.findByFullPath(\"/even/two\");\n+        assertNotNull(realm);\n+\n+        JexlContext jexlContext = new MapContext();\n+        JexlUtils.addFieldsToContext(realm, jexlContext);\n+\n+        String connObjectLink = \"syncope:fullPath2Dn(fullPath, 'ou') + ',o=isp'\";\n+        assertEquals(\"ou=two,ou=even,o=isp\", JexlUtils.evaluate(connObjectLink, jexlContext));\n+\n+        realm = realmDAO.findByFullPath(\"/even\");\n+        assertNotNull(realm);\n+\n+        jexlContext = new MapContext();\n+        JexlUtils.addFieldsToContext(realm, jexlContext);\n+\n+        assertEquals(\"ou=even,o=isp\", JexlUtils.evaluate(connObjectLink, jexlContext));\n+    }\n }"},{"sha":"ea86696cb5480e0a79d418ad43e1c6197ed0323b","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -56,7 +56,6 @@\n import org.apache.syncope.core.provisioning.java.data.DefaultMappingItemTransformer;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions;\n-import org.apache.syncope.core.provisioning.java.propagation.LDAPNestedRealmPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.pushpull.DBPasswordPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions;\n@@ -115,7 +114,6 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames.add(LDAPMembershipPropagationActions.class.getName());\n             classNames.add(LDAPPasswordPropagationActions.class.getName());\n             classNames.add(DBPasswordPropagationActions.class.getName());\n-            classNames.add(LDAPNestedRealmPropagationActions.class.getName());\n             put(Type.PROPAGATION_ACTIONS, classNames);\n \n             classNames = new HashSet<>();"},{"sha":"d1218422ac29153b20065242e24ca5ee6f6383aa","filename":"src/main/asciidoc/reference-guide/concepts/externalresources.adoc","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fexternalresources.adoc?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -174,3 +174,19 @@ to the selected `aLong` value before sending it out to the underlying connector.\n }\n ----\n ====\n+\n+[[object-link-realms-hierarchy]]\n+[TIP]\n+.Object link and Realms hierarchy\n+====\n+When Object link is applicable - typically with LDAP or Active Directory, as said - the need may arise to map the Realms\n+hierarchy into nested structures, as\n+https://en.wikipedia.org/wiki/Organizational_unit_(computing)[Organizational Units^].\n+\n+In such cases, the following JEXL expressions can be set for Object link (assuming `o=isp` is the root suffix), for\n+example, which leverage the `syncope:fullPath2Dn()` custom JEXL function:\n+\n+* Realms: `syncope:fullPath2Dn(fullPath, 'ou') + ',o=isp'`\n+* Users: `'uid=' + name + syncope:fullPath2Dn(realm, 'ou', ',') + ',o=isp'`\n+* Groups: `'cn=' + name + syncope:fullPath2Dn(realm, 'ou', ',') + ',o=isp'`\n+===="},{"sha":"649e4f8a1b16f8df78ff056efd1ac776f19201a5","filename":"src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpropagation.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpropagation.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpropagation.adoc?ref=a4fa195bf4e043e5a8dffa6fe8dadb9efd13e8eb","patch":"@@ -86,7 +86,7 @@ endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n https://github.com/apache/syncope/blob/master/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java[LDAPMembershipPropagationActions^]\n endif::[]\n-| If a User is associated with a Group in Syncope, keep the corresponding User as a amember of the corresponding Group in LDAP.\n+| If a User is associated with a Group in Syncope, keep the corresponding User as a member of the corresponding Group in LDAP.\n \n | \n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n@@ -99,17 +99,6 @@ endif::[]\n the cipher algorithm associated with the password must match the value of `passwordHashAlgorithm` for the \n https://connid.atlassian.net/wiki/display/BASE/LDAP#LDAP-Configuration[LDAP connector bundle^].\n \n-| \n-ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPNestedRealmPropagationActions.java[LDAPNestedRealmPropagationActions^]\n-endif::[]\n-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPNestedRealmPropagationActions.java[LDAPNestedRealmPropagationActions^]\n-endif::[]\n-| If a realm is child of some other realm (except root), i.e. has depth greater than 1, hence this hierarchy has to be \n-respected while propagating a realm to an LDAP resource.\n-This propagation action guarantees correct hierarchy propagation.\n-\n | \n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java[DBPasswordPropagationActions^]"}]}