{"sha":"6b7074a2f76b7e7a576670a1ee7984f51c7839fc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZiNzA3NGEyZjc2YjdlN2E1NzY2NzBhMWVlNzk4NGY1MWM3ODM5ZmM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-26T11:01:03Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-26T11:01:03Z"},"message":"Shortening bean names, preparing for bean validation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246660 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cfc43320dac0e57d0a6a7e6bfa1efa7f9f2d8f80","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cfc43320dac0e57d0a6a7e6bfa1efa7f9f2d8f80"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6b7074a2f76b7e7a576670a1ee7984f51c7839fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b7074a2f76b7e7a576670a1ee7984f51c7839fc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6b7074a2f76b7e7a576670a1ee7984f51c7839fc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/comments","author":null,"committer":null,"parents":[{"sha":"3159b010e54eca3992c7cb526f4f5e32815021cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3159b010e54eca3992c7cb526f4f5e32815021cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3159b010e54eca3992c7cb526f4f5e32815021cd"}],"stats":{"total":2111,"additions":1149,"deletions":962},"files":[{"sha":"b45a3f6adaffaa92623fddb56eb7a3c4b8830ace","filename":"client/src/main/java/org/syncope/types/SchemaType.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSchemaType.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -17,15 +17,16 @@\n public enum SchemaType {\n \n     UserSchema(\n-    \"org.syncope.core.persistence.beans.user.UserSchema\"),\n+    \"org.syncope.core.persistence.beans.user.USchema\"),\n     RoleSchema(\n-    \"org.syncope.core.persistence.beans.role.RoleSchema\"),\n+    \"org.syncope.core.persistence.beans.role.RSchema\"),\n     MembershipSchema(\n-    \"org.syncope.core.persistence.beans.membership.MembershipSchema\"),\n+    \"org.syncope.core.persistence.beans.membership.MSchema\"),\n     AccountId(\n     \"AccountId\"),\n     Password(\n     \"Password\");\n+\n     final private String className;\n \n     SchemaType(String className) {"},{"sha":"e6a713fa3956a70fac84a4e2485fccb1929037b1","filename":"core/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -159,6 +159,10 @@\n             <groupId>org.hibernate</groupId>\n             <artifactId>hibernate-entitymanager</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.hibernate</groupId>\n+            <artifactId>hibernate-validator</artifactId>\n+        </dependency>\n         <dependency>\n             <groupId>net.sf.ehcache</groupId>\n             <artifactId>ehcache-core</artifactId>"},{"sha":"14ffa2aa16755ce60b13b66030434a4a55ac00fa","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -30,7 +30,7 @@\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n@@ -58,7 +58,7 @@ public static ConnectorInfoManager getConnectorManager()\n         SyncopeConfigurationDAO syncopeConfigurationDAO =\n                 (SyncopeConfigurationDAO) context.getBean(\n                 \"syncopeConfigurationDAOImpl\");\n-        SyncopeConfiguration connectorBundleDir = null;\n+        SyncopeConf connectorBundleDir = null;\n         try {\n             connectorBundleDir = syncopeConfigurationDAO.find(\n                     \"identityconnectors.bundle.directory\");"},{"sha":"f5995237c5e976b18f142627254255fc22001984","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -35,7 +35,7 @@\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.context.support.WebApplicationContextUtils;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n \n /**\n  * Load default content in the database.\n@@ -94,13 +94,13 @@ public final void contextInitialized(final ServletContextEvent sce) {\n                     ResultSet.CONCUR_READ_ONLY);\n \n             resultSet = statement.executeQuery(\"SELECT * FROM \"\n-                    + SyncopeConfiguration.class.getSimpleName());\n+                    + SyncopeConf.class.getSimpleName());\n             resultSet.last();\n \n             existingData = resultSet.getRow() > 0;\n         } catch (SQLException e) {\n             LOG.error(\"Could not access to table \"\n-                    + SyncopeConfiguration.class.getSimpleName(), e);\n+                    + SyncopeConf.class.getSimpleName(), e);\n \n             // Setting this to true make nothing to be done below\n             existingData = true;"},{"sha":"985ebdbb2a90c45a8a5496ff9a20d36050d0e31d","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"renamed","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -22,16 +22,18 @@\n import org.syncope.core.rest.data.AttributableUtil;\n \n @MappedSuperclass\n-public abstract class AbstractAttribute extends AbstractBaseBean {\n+public abstract class AbstractAttr extends AbstractBaseBean {\n \n     public abstract Long getId();\n \n-    public <T extends AbstractAttributeValue> T addValue(final String value,\n+    public <T extends AbstractAttrValue> T addValue(final String value,\n             final AttributableUtil attributableUtil)\n             throws ParseException, ValidationFailedException {\n \n         T actualValue = getSchema().getValidator().getValue(value,\n-                (T) attributableUtil.newAttributeValue());\n+                getSchema().isUniqueConstraint()\n+                ? (T) attributableUtil.newAttributeUniqueValue()\n+                : (T) attributableUtil.newAttributeValue());\n         actualValue.setAttribute(this);\n \n         if (!getSchema().isMultivalue()) {\n@@ -51,13 +53,13 @@ public <T extends AbstractAttributeValue> T addValue(final String value,\n \n     public abstract <T extends AbstractSchema> void setSchema(T schema);\n \n-    public abstract <T extends AbstractAttributeValue> boolean addValue(\n+    public abstract <T extends AbstractAttrValue> boolean addValue(\n             T attributeValue);\n \n-    public abstract <T extends AbstractAttributeValue> boolean removeValue(\n+    public abstract <T extends AbstractAttrValue> boolean removeValue(\n             T attributeValue);\n \n-    public <T extends AbstractAttributeValue> List<String> getValuesAsStrings() {\n+    public <T extends AbstractAttrValue> List<String> getValuesAsStrings() {\n         List<T> values = getValues();\n \n         List<String> result = new ArrayList<String>(values.size());\n@@ -68,8 +70,13 @@ public <T extends AbstractAttributeValue> List<String> getValuesAsStrings() {\n         return result;\n     }\n \n-    public abstract <T extends AbstractAttributeValue> List<T> getValues();\n+    public abstract <T extends AbstractAttrValue> List<T> getValues();\n \n-    public abstract <T extends AbstractAttributeValue> void setValues(\n+    public abstract <T extends AbstractAttrValue> void setValues(\n             List<T> attributeValues);\n+\n+    public abstract <T extends AbstractAttrValue> T getUniqueValue();\n+\n+    public abstract <T extends AbstractAttrValue> void setUniqueValue(\n+            T uniqueAttributeValue);\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttribute.java"},{"sha":"42df8806af023735dcc845e789201c61c31e8008","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttrValue.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.lang.builder.ToStringStyle;\n \n @MappedSuperclass\n-public abstract class AbstractAttributeValue extends AbstractBaseBean {\n+public abstract class AbstractAttrValue extends AbstractBaseBean {\n \n     private String stringValue;\n \n@@ -127,9 +127,9 @@ public String getValueAsString() {\n         return result;\n     }\n \n-    public abstract <T extends AbstractAttribute> T getAttribute();\n+    public abstract <T extends AbstractAttr> T getAttribute();\n \n-    public abstract <T extends AbstractAttribute> void setAttribute(\n+    public abstract <T extends AbstractAttr> void setAttribute(\n             T attribute);\n \n     @Override","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributeValue.java"},{"sha":"4f6fe6577b2f28770a72243cb5658c62f2e34707","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -33,10 +33,10 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n     @ManyToMany(fetch = FetchType.EAGER)\n     protected Set<TargetResource> targetResources;\n \n-    public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n+    public <T extends AbstractAttr> T getAttribute(String schemaName) {\n         T result = null;\n         T attribute = null;\n-        for (Iterator<? extends AbstractAttribute> itor =\n+        for (Iterator<? extends AbstractAttr> itor =\n                 getAttributes().iterator();\n                 result == null && itor.hasNext();) {\n \n@@ -51,12 +51,12 @@ public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n         return result;\n     }\n \n-    public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n+    public <T extends AbstractDerAttr> T getDerivedAttribute(\n             String derivedSchemaName) throws NoSuchElementException {\n \n         T result = null;\n         T derivedAttribute = null;\n-        for (Iterator<? extends AbstractDerivedAttribute> itor =\n+        for (Iterator<? extends AbstractDerAttr> itor =\n                 getDerivedAttributes().iterator();\n                 result == null && itor.hasNext();) {\n \n@@ -107,25 +107,25 @@ public void setResources(Set<TargetResource> resources) {\n \n     public abstract Long getId();\n \n-    public abstract <T extends AbstractAttribute> boolean addAttribute(\n+    public abstract <T extends AbstractAttr> boolean addAttribute(\n             T attribute);\n \n-    public abstract <T extends AbstractAttribute> boolean removeAttribute(\n+    public abstract <T extends AbstractAttr> boolean removeAttribute(\n             T attribute);\n \n-    public abstract List<? extends AbstractAttribute> getAttributes();\n+    public abstract List<? extends AbstractAttr> getAttributes();\n \n     public abstract void setAttributes(\n-            List<? extends AbstractAttribute> attributes);\n+            List<? extends AbstractAttr> attributes);\n \n-    public abstract <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+    public abstract <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute);\n \n-    public abstract <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+    public abstract <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n             T derivedAttribute);\n \n-    public abstract List<? extends AbstractDerivedAttribute> getDerivedAttributes();\n+    public abstract List<? extends AbstractDerAttr> getDerivedAttributes();\n \n     public abstract void setDerivedAttributes(\n-            List<? extends AbstractDerivedAttribute> derivedAttributes);\n+            List<? extends AbstractDerAttr> derivedAttributes);\n }"},{"sha":"761bb084cb5ce8f7936f449c18a8e31943b5ce8e","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerAttr.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -33,7 +33,7 @@\n  * @see http://commons.apache.org/jexl/reference/index.html\n  */\n @MappedSuperclass\n-public abstract class AbstractDerivedAttribute extends AbstractBaseBean {\n+public abstract class AbstractDerAttr extends AbstractBaseBean {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n@@ -50,15 +50,15 @@ public Long getId() {\n      * @return the value of this derived attribute\n      */\n     public String getValue(\n-            final Collection<? extends AbstractAttribute> attributes) {\n+            final Collection<? extends AbstractAttr> attributes) {\n \n         JexlContext jexlContext = new MapContext();\n \n-        List<? extends AbstractAttributeValue> attributeValues = null;\n+        List<? extends AbstractAttrValue> attributeValues = null;\n         String expressionValue = null;\n-        AbstractAttribute attribute = null;\n-        AbstractAttributeValue attributeValue = null;\n-        for (Iterator<? extends AbstractAttribute> itor =\n+        AbstractAttr attribute = null;\n+        AbstractAttrValue attributeValue = null;\n+        for (Iterator<? extends AbstractAttr> itor =\n                 attributes.iterator(); itor.hasNext();) {\n \n             attribute = itor.next();\n@@ -96,8 +96,8 @@ public String getValue(\n \n     public abstract <T extends AbstractAttributable> void setOwner(T owner);\n \n-    public abstract <T extends AbstractDerivedSchema> T getDerivedSchema();\n+    public abstract <T extends AbstractDerSchema> T getDerivedSchema();\n \n-    public abstract <T extends AbstractDerivedSchema> void setDerivedSchema(\n+    public abstract <T extends AbstractDerSchema> void setDerivedSchema(\n             T derivedSchema);\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedAttribute.java"},{"sha":"0ef3a8cbecdb5362e2cecadf881c40118e3e6aa0","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerSchema.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -21,7 +21,7 @@\n import javax.persistence.MappedSuperclass;\n \n @MappedSuperclass\n-public abstract class AbstractDerivedSchema extends AbstractBaseBean {\n+public abstract class AbstractDerSchema extends AbstractBaseBean {\n \n     @Id\n     private String name;\n@@ -44,13 +44,13 @@ public void setExpression(String expression) {\n         this.expression = expression;\n     }\n \n-    public abstract <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(T derivedAttribute);\n+    public abstract <T extends AbstractDerAttr> boolean addDerivedAttribute(T derivedAttribute);\n \n-    public abstract <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(T derivedAttribute);\n+    public abstract <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute);\n \n-    public abstract List<? extends AbstractDerivedAttribute> getDerivedAttributes();\n+    public abstract List<? extends AbstractDerAttr> getDerivedAttributes();\n \n-    public abstract <T extends AbstractDerivedAttribute> void setDerivedAttributes(List<T> derivedAttributes);\n+    public abstract <T extends AbstractDerAttr> void setDerivedAttributes(List<T> derivedAttributes);\n \n     public abstract <T extends AbstractSchema> boolean addSchema(T schema);\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedSchema.java"},{"sha":"6f1a799928e1ed9710829d50e7f06bf02c2231f6","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -72,7 +72,7 @@ protected DecimalFormat initialValue() {\n     private Integer multivalue;\n \n     @Basic\n-    private Integer uniquevalue;\n+    private Integer uniqueConstraint;\n \n     @Basic\n     private Integer readonly;\n@@ -93,7 +93,7 @@ public AbstractSchema() {\n         virtual = getBooleanAsInteger(false);\n         mandatoryCondition = Boolean.FALSE.toString();\n         multivalue = getBooleanAsInteger(false);\n-        uniquevalue = getBooleanAsInteger(false);\n+        uniqueConstraint = getBooleanAsInteger(false);\n         readonly = getBooleanAsInteger(false);\n     }\n \n@@ -137,12 +137,12 @@ public void setMultivalue(boolean multivalue) {\n         this.multivalue = getBooleanAsInteger(multivalue);\n     }\n \n-    public boolean isUniquevalue() {\n-        return isBooleanAsInteger(uniquevalue);\n+    public boolean isUniqueConstraint() {\n+        return isBooleanAsInteger(uniqueConstraint);\n     }\n \n-    public void setUniquevalue(boolean uniquevalue) {\n-        this.uniquevalue = getBooleanAsInteger(uniquevalue);\n+    public void setUniqueConstraint(boolean uniquevalue) {\n+        this.uniqueConstraint = getBooleanAsInteger(uniquevalue);\n     }\n \n     public boolean isReadonly() {\n@@ -239,25 +239,25 @@ public <T extends Format> T getFormatter() {\n         return result;\n     }\n \n-    public abstract <T extends AbstractAttribute> boolean addAttribute(\n+    public abstract <T extends AbstractAttr> boolean addAttribute(\n             T attribute);\n \n-    public abstract <T extends AbstractAttribute> boolean removeAttribute(\n+    public abstract <T extends AbstractAttr> boolean removeAttribute(\n             T attribute);\n \n-    public abstract List<? extends AbstractAttribute> getAttributes();\n+    public abstract List<? extends AbstractAttr> getAttributes();\n \n     public abstract void setAttributes(\n-            List<? extends AbstractAttribute> attributes);\n+            List<? extends AbstractAttr> attributes);\n \n-    public abstract <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n+    public abstract <T extends AbstractDerSchema> boolean addDerivedSchema(\n             T derivedSchema);\n \n-    public abstract <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n+    public abstract <T extends AbstractDerSchema> boolean removeDerivedSchema(\n             T derivedSchema);\n \n-    public abstract List<? extends AbstractDerivedSchema> getDerivedSchemas();\n+    public abstract List<? extends AbstractDerSchema> getDerivedSchemas();\n \n     public abstract void setDerivedSchemas(\n-            List<? extends AbstractDerivedSchema> derivedSchemas);\n+            List<? extends AbstractDerSchema> derivedSchemas);\n }"},{"sha":"5a86f0dd78d87e1f708ea70ee090e6d3b09c727b","filename":"core/src/main/java/org/syncope/core/persistence/beans/IAttrUniqueValue.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FIAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FIAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FIAttrUniqueValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -0,0 +1,22 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+public interface IAttrUniqueValue {\n+\n+    <T extends AbstractSchema> T getSchema();\n+\n+    <T extends AbstractSchema> void setSchema(T schema);\n+}"},{"sha":"6a328ea74b4331cdecea5115d1895c08ff326ed3","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeConf.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConf.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,7 +18,7 @@\n import javax.persistence.Id;\n \n @Entity\n-public class SyncopeConfiguration extends AbstractBaseBean {\n+public class SyncopeConf extends AbstractBaseBean {\n \n     @Id\n     private String confKey;","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeConfiguration.java"},{"sha":"988b2e79ce24c8979834c3cd622581b3821e0509","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttr.java","status":"renamed","additions":33,"deletions":17,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -24,34 +24,39 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.TableGenerator;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n-public class MembershipAttribute extends AbstractAttribute {\n+public class MAttr extends AbstractAttr {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_MembershipAttribute\")\n-    @TableGenerator(name = \"SEQ_MembershipAttribute\", allocationSize = 20)\n+    generator = \"SEQ_MAttr\")\n+    @TableGenerator(name = \"SEQ_MAttr\", allocationSize = 20)\n     private Long id;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n     private Membership owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    private MembershipSchema schema;\n+    private MSchema schema;\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n-    private List<MembershipAttributeValue> values;\n+    private List<MAttrValue> values;\n \n-    public MembershipAttribute() {\n-        values = new ArrayList<MembershipAttributeValue>();\n+    @OneToOne(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    private MAttrUniqueValue uniqueValue;\n+\n+    public MAttr() {\n+        values = new ArrayList<MAttrValue>();\n     }\n \n     @Override\n@@ -76,34 +81,34 @@ public <T extends AbstractSchema> T getSchema() {\n \n     @Override\n     public <T extends AbstractSchema> void setSchema(T schema) {\n-        this.schema = (MembershipSchema) schema;\n+        this.schema = (MSchema) schema;\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean addValue(\n+    public <T extends AbstractAttrValue> boolean addValue(\n             final T attributeValue) {\n \n         attributeValue.setAttribute(this);\n-        return values.add((MembershipAttributeValue) attributeValue);\n+        return values.add((MAttrValue) attributeValue);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean removeValue(\n+    public <T extends AbstractAttrValue> boolean removeValue(\n             final T attributeValue) {\n \n         boolean result = values.remove(\n-                (MembershipAttributeValue) attributeValue);\n+                (MAttrValue) attributeValue);\n         attributeValue.setAttribute(null);\n         return result;\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> List<T> getValues() {\n+    public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> void setValues(\n+    public <T extends AbstractAttrValue> void setValues(\n             final List<T> attributeValues) {\n \n         this.values.clear();\n@@ -112,8 +117,19 @@ public <T extends AbstractAttributeValue> void setValues(\n                 mav.setAttribute(this);\n             }\n             this.values.addAll(\n-                    (List<MembershipAttributeValue>) attributeValues);\n+                    (List<MAttrValue>) attributeValues);\n         }\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttrValue> T getUniqueValue() {\n+        return (T) uniqueValue;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttrValue> void setUniqueValue(\n+            final T uniqueAttributeValue) {\n \n+        this.uniqueValue = (MAttrUniqueValue) uniqueAttributeValue;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttribute.java"},{"sha":"b683616c410a32fa81e17b17b00162ecf1853785","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrUniqueValue.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -0,0 +1,49 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.IAttrUniqueValue;\n+\n+@Entity\n+@Table(uniqueConstraints =\n+@UniqueConstraint(columnNames = {\n+    \"booleanValue\",\n+    \"dateValue\",\n+    \"doubleValue\",\n+    \"longValue\",\n+    \"StringValue\",\n+    \"schema_name\"\n+}))\n+public class MAttrUniqueValue extends MAttrValue\n+        implements IAttrUniqueValue {\n+\n+    @OneToOne\n+    private MSchema schema;\n+\n+    @Override\n+    public <T extends AbstractSchema> T getSchema() {\n+        return (T) schema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchema> void setSchema(final T schema) {\n+        this.schema = (MSchema) schema;\n+    }\n+}"},{"sha":"9d445ab40822b0920d92bcd91a6dcaff05c3847f","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MAttrValue.java","status":"renamed","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,35 +18,38 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.persistence.TableGenerator;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n @Entity\n-public class MembershipAttributeValue extends AbstractAttributeValue {\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class MAttrValue extends AbstractAttrValue {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_MembershipAttributeValue\")\n-    @TableGenerator(name = \"SEQ_MembershipAttributeValue\", allocationSize = 200)\n+    generator = \"SEQ_MAttrValue\")\n+    @TableGenerator(name = \"SEQ_MAttrValue\", allocationSize = 200)\n     private Long id;\n \n     @ManyToOne\n-    private MembershipAttribute attribute;\n+    private MAttr attribute;\n \n     @Override\n     public Long getId() {\n         return id;\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> T getAttribute() {\n+    public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> void setAttribute(T attribute) {\n-        this.attribute = (MembershipAttribute) attribute;\n+    public <T extends AbstractAttr> void setAttribute(T attribute) {\n+        this.attribute = (MAttr) attribute;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttributeValue.java"},{"sha":"dcc8f8a54e78488bd67c4db58c6582fac6c40f8b","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MDerAttr.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,16 +18,16 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n-public class MembershipDerivedAttribute extends AbstractDerivedAttribute {\n+public class MDerAttr extends AbstractDerAttr {\n \n     @ManyToOne\n     private Membership owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n-    MembershipDerivedSchema derivedSchema;\n+    MDerSchema derivedSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n@@ -40,14 +40,14 @@ public <T extends AbstractAttributable> void setOwner(T owner) {\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> T getDerivedSchema() {\n+    public <T extends AbstractDerSchema> T getDerivedSchema() {\n         return (T) derivedSchema;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> void setDerivedSchema(\n+    public <T extends AbstractDerSchema> void setDerivedSchema(\n             T derivedSchema) {\n \n-        this.derivedSchema = (MembershipDerivedSchema) derivedSchema;\n+        this.derivedSchema = (MDerSchema) derivedSchema;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipDerivedAttribute.java"},{"sha":"b9d7153f21393380ad127f30c8a16d39a7b17546","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MDerSchema.java","status":"renamed","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -23,69 +23,69 @@\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n-public class MembershipDerivedSchema extends AbstractDerivedSchema {\n+public class MDerSchema extends AbstractDerSchema {\n \n     @ManyToMany\n-    @JoinTable(name = \"MembershipSchemaDerivation\")\n-    private Set<MembershipSchema> schemas;\n+    @JoinTable(name = \"MSchemaDerivation\")\n+    private Set<MSchema> schemas;\n     @OneToMany(mappedBy = \"derivedSchema\")\n-    private List<MembershipDerivedAttribute> derivedAttributes;\n+    private List<MDerAttr> derivedAttributes;\n \n-    public MembershipDerivedSchema() {\n-        schemas = new HashSet<MembershipSchema>();\n-        derivedAttributes = new ArrayList<MembershipDerivedAttribute>();\n+    public MDerSchema() {\n+        schemas = new HashSet<MSchema>();\n+        derivedAttributes = new ArrayList<MDerAttr>();\n     }\n \n     @Override\n     public <T extends AbstractSchema> boolean addSchema(T schema) {\n-        return schemas.add((MembershipSchema) schema);\n+        return schemas.add((MSchema) schema);\n     }\n \n     @Override\n     public <T extends AbstractSchema> boolean removeSchema(T schema) {\n-        return schemas.remove((MembershipSchema) schema);\n+        return schemas.remove((MSchema) schema);\n     }\n \n     @Override\n-    public Set<MembershipSchema> getSchemas() {\n+    public Set<MSchema> getSchemas() {\n         return schemas;\n     }\n \n     @Override\n     public void setSchemas(Set<? extends AbstractSchema> schemas) {\n-        this.schemas = (Set<MembershipSchema>) schemas;\n+        this.schemas = (Set<MSchema>) schemas;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.add((MembershipDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.add((MDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.remove((MembershipDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.remove((MDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n+    public <T extends AbstractDerAttr> void setDerivedAttributes(\n             List<T> derivedAttributes) {\n \n-        this.derivedAttributes = (List<MembershipDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<MDerAttr>) derivedAttributes;\n     }\n \n     /**","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipDerivedSchema.java"},{"sha":"71a963e4678e5ee4109f3c6ca6f2467176cc9afd","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MSchema.java","status":"renamed","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -24,79 +24,79 @@\n import javax.persistence.QueryHint;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n @NamedQueries({\n-    @NamedQuery(name = \"MembershipSchema.findAll\",\n-    query = \"SELECT e FROM MembershipSchema e\",\n+    @NamedQuery(name = \"MSchema.findAll\",\n+    query = \"SELECT e FROM MSchema e\",\n     hints = {\n         @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n     })\n })\n-public class MembershipSchema extends AbstractSchema {\n+public class MSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n-    private List<MembershipAttribute> attributes;\n+    private List<MAttr> attributes;\n \n     @ManyToMany(mappedBy = \"schemas\")\n-    private List<MembershipDerivedSchema> derivedSchemas;\n+    private List<MDerSchema> derivedSchemas;\n \n-    public MembershipSchema() {\n-        attributes = new ArrayList<MembershipAttribute>();\n-        derivedSchemas = new ArrayList<MembershipDerivedSchema>();\n+    public MSchema() {\n+        attributes = new ArrayList<MAttr>();\n+        derivedSchemas = new ArrayList<MDerSchema>();\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n-        return attributes.add((MembershipAttribute) attribute);\n+    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        return attributes.add((MAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n-        return attributes.remove((MembershipAttribute) attribute);\n+    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        return attributes.remove((MAttr) attribute);\n     }\n \n     @Override\n-    public List<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n-        this.attributes = (List<MembershipAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttr> attributes) {\n+        this.attributes = (List<MAttr>) attributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n+    public <T extends AbstractDerSchema> boolean addDerivedSchema(\n             final T derivedSchema) {\n \n-        return derivedSchemas.add((MembershipDerivedSchema) derivedSchema);\n+        return derivedSchemas.add((MDerSchema) derivedSchema);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n+    public <T extends AbstractDerSchema> boolean removeDerivedSchema(\n             final T derivedSchema) {\n \n-        return derivedSchemas.remove((MembershipDerivedSchema) derivedSchema);\n+        return derivedSchemas.remove((MDerSchema) derivedSchema);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedSchema> getDerivedSchemas() {\n+    public List<? extends AbstractDerSchema> getDerivedSchemas() {\n         return derivedSchemas;\n     }\n \n     @Override\n     public void setDerivedSchemas(\n-            final List<? extends AbstractDerivedSchema> derivedSchemas) {\n+            final List<? extends AbstractDerSchema> derivedSchemas) {\n \n         this.derivedSchemas.clear();\n         if (derivedSchemas != null && !derivedSchemas.isEmpty()) {\n             this.derivedSchemas.addAll(\n-                    (List<MembershipDerivedSchema>) derivedSchemas);\n+                    (List<MDerSchema>) derivedSchemas);\n         }\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipSchema.java"},{"sha":"4c2169ed0dd054cf589b62c85a3fa810e82dfca6","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -28,8 +28,8 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -53,14 +53,14 @@ public class Membership extends AbstractAttributable {\n     private SyncopeRole syncopeRole;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    private List<MembershipAttribute> attributes;\n+    private List<MAttr> attributes;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    private List<MembershipDerivedAttribute> derivedAttributes;\n+    private List<MDerAttr> derivedAttributes;\n \n     public Membership() {\n-        attributes = new ArrayList<MembershipAttribute>();\n-        derivedAttributes = new ArrayList<MembershipDerivedAttribute>();\n+        attributes = new ArrayList<MAttr>();\n+        derivedAttributes = new ArrayList<MDerAttr>();\n         targetResources = Collections.EMPTY_SET;\n     }\n \n@@ -86,52 +86,52 @@ public void setSyncopeUser(SyncopeUser syncopeUser) {\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n-        return attributes.add((MembershipAttribute) attribute);\n+    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        return attributes.add((MAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n-        return attributes.remove((MembershipAttribute) attribute);\n+    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        return attributes.remove((MAttr) attribute);\n     }\n \n     @Override\n-    public List<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n-        this.attributes = (List<MembershipAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttr> attributes) {\n+        this.attributes = (List<MAttr>) attributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {\n \n         return derivedAttributes.add(\n-                (MembershipDerivedAttribute) derivedAttribute);\n+                (MDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n             T derivedAttribute) {\n \n         return derivedAttributes.remove(\n-                (MembershipDerivedAttribute) derivedAttribute);\n+                (MDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public void setDerivedAttributes(\n-            List<? extends AbstractDerivedAttribute> derivedAttributes) {\n+            List<? extends AbstractDerAttr> derivedAttributes) {\n \n         this.derivedAttributes =\n-                (List<MembershipDerivedAttribute>) derivedAttributes;\n+                (List<MDerAttr>) derivedAttributes;\n     }\n \n     @Override"},{"sha":"06eea47bbebd5314d22bdbcc81b752e2755a4a34","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttr.java","status":"renamed","additions":42,"deletions":20,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -24,34 +24,39 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.TableGenerator;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n-public class RoleAttribute extends AbstractAttribute {\n+public class RAttr extends AbstractAttr {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_RoleAttribute\")\n-    @TableGenerator(name = \"SEQ_RoleAttribute\", allocationSize = 20)\n+    generator = \"SEQ_RAttr\")\n+    @TableGenerator(name = \"SEQ_RAttr\", allocationSize = 20)\n     private Long id;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeRole owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    private RoleSchema schema;\n+    private RSchema schema;\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n-    private List<RoleAttributeValue> values;\n+    private List<RAttrValue> values;\n \n-    public RoleAttribute() {\n-        values = new ArrayList<RoleAttributeValue>();\n+    @OneToOne(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    private RAttrUniqueValue uniqueValue;\n+\n+    public RAttr() {\n+        values = new ArrayList<RAttrValue>();\n     }\n \n     @Override\n@@ -76,33 +81,50 @@ public <T extends AbstractSchema> T getSchema() {\n \n     @Override\n     public <T extends AbstractSchema> void setSchema(T schema) {\n-        this.schema = (RoleSchema) schema;\n+        this.schema = (RSchema) schema;\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean addValue(\n-            T attributeValue) {\n+    public <T extends AbstractAttrValue> boolean addValue(\n+            final T attributeValue) {\n \n-        return values.add((RoleAttributeValue) attributeValue);\n+        return values.add((RAttrValue) attributeValue);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean removeValue(\n-            T attributeValue) {\n+    public <T extends AbstractAttrValue> boolean removeValue(\n+            final T attributeValue) {\n \n-        return values.remove((RoleAttributeValue) attributeValue);\n+        return values.remove((RAttrValue) attributeValue);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> List<T> getValues() {\n+    public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> void setValues(\n-            List<T> attributeValues) {\n+    public <T extends AbstractAttrValue> void setValues(\n+            final List<T> attributeValues) {\n+\n+        this.values.clear();\n+        if (attributeValues != null && !attributeValues.isEmpty()) {\n+            for (T mav : attributeValues) {\n+                mav.setAttribute(this);\n+            }\n+            this.values.addAll((List<RAttrValue>) attributeValues);\n+        }\n+    }\n \n-        this.values = (List<RoleAttributeValue>) attributeValues;\n+    @Override\n+    public <T extends AbstractAttrValue> T getUniqueValue() {\n+        return (T) uniqueValue;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttrValue> void setUniqueValue(\n+            final T uniqueAttributeValue) {\n \n+        this.uniqueValue = (RAttrUniqueValue) uniqueAttributeValue;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleAttribute.java"},{"sha":"31382642ace6e61247619351c2e0664e1efa03c5","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrUniqueValue.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -0,0 +1,49 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.IAttrUniqueValue;\n+\n+@Entity\n+@Table(uniqueConstraints =\n+@UniqueConstraint(columnNames = {\n+    \"booleanValue\",\n+    \"dateValue\",\n+    \"doubleValue\",\n+    \"longValue\",\n+    \"StringValue\",\n+    \"schema_name\"\n+}))\n+public class RAttrUniqueValue extends RAttrValue\n+        implements IAttrUniqueValue {\n+\n+    @OneToOne\n+    private RSchema schema;\n+\n+    @Override\n+    public <T extends AbstractSchema> T getSchema() {\n+        return (T) schema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchema> void setSchema(final T schema) {\n+        this.schema = (RSchema) schema;\n+    }\n+}"},{"sha":"f5c7de1dcaf11aff9ecce7a0937bf13795a5b61c","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RAttrValue.java","status":"renamed","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,35 +18,38 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.persistence.TableGenerator;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n @Entity\n-public class RoleAttributeValue extends AbstractAttributeValue {\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class RAttrValue extends AbstractAttrValue {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_RoleAttributeValue\")\n-    @TableGenerator(name = \"SEQ_RoleAttributeValue\", allocationSize = 200)\n+    generator = \"SEQ_RAttrValue\")\n+    @TableGenerator(name = \"SEQ_RAttrValue\", allocationSize = 200)\n     private Long id;\n \n     @ManyToOne\n-    private RoleAttribute attribute;\n+    private RAttr attribute;\n \n     @Override\n     public Long getId() {\n         return id;\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> T getAttribute() {\n+    public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> void setAttribute(T attribute) {\n-        this.attribute = (RoleAttribute) attribute;\n+    public <T extends AbstractAttr> void setAttribute(T attribute) {\n+        this.attribute = (RAttr) attribute;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleAttributeValue.java"},{"sha":"6bcabca3e7a2a2e4485d821a12f03f9238216ffc","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RDerAttr.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,16 +18,16 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n-public class RoleDerivedAttribute extends AbstractDerivedAttribute {\n+public class RDerAttr extends AbstractDerAttr {\n \n     @ManyToOne\n     private SyncopeRole owner;\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n-    RoleDerivedSchema derivedSchema;\n+    RDerSchema derivedSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n@@ -40,14 +40,14 @@ public <T extends AbstractAttributable> void setOwner(T owner) {\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> T getDerivedSchema() {\n+    public <T extends AbstractDerSchema> T getDerivedSchema() {\n         return (T) derivedSchema;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> void setDerivedSchema(\n+    public <T extends AbstractDerSchema> void setDerivedSchema(\n             T derivedSchema) {\n \n-        this.derivedSchema = (RoleDerivedSchema) derivedSchema;\n+        this.derivedSchema = (RDerSchema) derivedSchema;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleDerivedAttribute.java"},{"sha":"a6450d6ef7fd356d3d03f80ab20e407fbc5408d0","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RDerSchema.java","status":"renamed","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -23,69 +23,69 @@\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n-public class RoleDerivedSchema extends AbstractDerivedSchema {\n+public class RDerSchema extends AbstractDerSchema {\n \n     @ManyToMany\n-    @JoinTable(name = \"RoleSchemaDerivation\")\n-    private Set<RoleSchema> schemas;\n+    @JoinTable(name = \"RSchemaDerivation\")\n+    private Set<RSchema> schemas;\n     @OneToMany(mappedBy = \"derivedSchema\")\n-    private List<RoleDerivedAttribute> derivedAttributes;\n+    private List<RDerAttr> derivedAttributes;\n \n-    public RoleDerivedSchema() {\n-        schemas = new HashSet<RoleSchema>();\n-        derivedAttributes = new ArrayList<RoleDerivedAttribute>();\n+    public RDerSchema() {\n+        schemas = new HashSet<RSchema>();\n+        derivedAttributes = new ArrayList<RDerAttr>();\n     }\n \n     @Override\n     public <T extends AbstractSchema> boolean addSchema(T schema) {\n-        return schemas.add((RoleSchema) schema);\n+        return schemas.add((RSchema) schema);\n     }\n \n     @Override\n     public <T extends AbstractSchema> boolean removeSchema(T schema) {\n-        return schemas.remove((RoleSchema) schema);\n+        return schemas.remove((RSchema) schema);\n     }\n \n     @Override\n-    public Set<RoleSchema> getSchemas() {\n+    public Set<RSchema> getSchemas() {\n         return schemas;\n     }\n \n     @Override\n     public void setSchemas(Set<? extends AbstractSchema> schemas) {\n-        this.schemas = (Set<RoleSchema>) schemas;\n+        this.schemas = (Set<RSchema>) schemas;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.add((RoleDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.add((RDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.remove((RoleDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.remove((RDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n+    public <T extends AbstractDerAttr> void setDerivedAttributes(\n             List<T> derivedAttributes) {\n \n-        this.derivedAttributes = (List<RoleDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<RDerAttr>) derivedAttributes;\n     }\n \n     /**","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleDerivedSchema.java"},{"sha":"5615439d9ea1d35fbf671558bbf1416ff2c8259f","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RSchema.java","status":"renamed","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -24,75 +24,75 @@\n import javax.persistence.QueryHint;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n @NamedQueries({\n-    @NamedQuery(name = \"RoleSchema.findAll\",\n-    query = \"SELECT e FROM RoleSchema e\",\n+    @NamedQuery(name = \"RSchema.findAll\",\n+    query = \"SELECT e FROM RSchema e\",\n     hints = {\n         @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n     })\n })\n-public class RoleSchema extends AbstractSchema {\n+public class RSchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n-    private List<RoleAttribute> attributes;\n+    private List<RAttr> attributes;\n \n     @ManyToMany(mappedBy = \"schemas\")\n-    private List<RoleDerivedSchema> derivedSchemas;\n+    private List<RDerSchema> derivedSchemas;\n \n-    public RoleSchema() {\n-        attributes = new ArrayList<RoleAttribute>();\n-        derivedSchemas = new ArrayList<RoleDerivedSchema>();\n+    public RSchema() {\n+        attributes = new ArrayList<RAttr>();\n+        derivedSchemas = new ArrayList<RDerSchema>();\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n-        return attributes.add((RoleAttribute) attribute);\n+    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        return attributes.add((RAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n-        return attributes.remove((RoleAttribute) attribute);\n+    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        return attributes.remove((RAttr) attribute);\n     }\n \n     @Override\n-    public List<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n-        this.attributes = (List<RoleAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttr> attributes) {\n+        this.attributes = (List<RAttr>) attributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n+    public <T extends AbstractDerSchema> boolean addDerivedSchema(\n             T derivedSchema) {\n \n-        return derivedSchemas.add((RoleDerivedSchema) derivedSchema);\n+        return derivedSchemas.add((RDerSchema) derivedSchema);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n+    public <T extends AbstractDerSchema> boolean removeDerivedSchema(\n             T derivedSchema) {\n \n-        return derivedSchemas.remove((RoleDerivedSchema) derivedSchema);\n+        return derivedSchemas.remove((RDerSchema) derivedSchema);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedSchema> getDerivedSchemas() {\n+    public List<? extends AbstractDerSchema> getDerivedSchemas() {\n         return derivedSchemas;\n     }\n \n     @Override\n     public void setDerivedSchemas(\n-            List<? extends AbstractDerivedSchema> derivedSchemas) {\n+            List<? extends AbstractDerSchema> derivedSchemas) {\n \n-        this.derivedSchemas = (List<RoleDerivedSchema>) derivedSchemas;\n+        this.derivedSchemas = (List<RDerSchema>) derivedSchemas;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleSchema.java"},{"sha":"42d74da8576742889cd45e06a4eddc5fdb85c84d","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -31,8 +31,8 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -61,10 +61,10 @@ public class SyncopeRole extends AbstractAttributable {\n     private Set<Entitlement> entitlements;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    private List<RoleAttribute> attributes;\n+    private List<RAttr> attributes;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    private List<RoleDerivedAttribute> derivedAttributes;\n+    private List<RDerAttr> derivedAttributes;\n \n     @Basic\n     private Integer inheritAttributes;\n@@ -77,8 +77,8 @@ public SyncopeRole() {\n \n         memberships = new ArrayList<Membership>();\n         entitlements = new HashSet<Entitlement>();\n-        attributes = new ArrayList<RoleAttribute>();\n-        derivedAttributes = new ArrayList<RoleDerivedAttribute>();\n+        attributes = new ArrayList<RAttr>();\n+        derivedAttributes = new ArrayList<RDerAttr>();\n         inheritAttributes = getBooleanAsInteger(false);\n         inheritDerivedAttributes = getBooleanAsInteger(false);\n     }\n@@ -148,50 +148,50 @@ public Set<SyncopeUser> getUsers() {\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n-        return attributes.add((RoleAttribute) attribute);\n+    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        return attributes.add((RAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n-        return attributes.remove((RoleAttribute) attribute);\n+    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        return attributes.remove((RAttr) attribute);\n     }\n \n     @Override\n-    public List<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n-        this.attributes = (List<RoleAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttr> attributes) {\n+        this.attributes = (List<RAttr>) attributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.add((RoleDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.add((RDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n             T derivedAttribute) {\n \n         return derivedAttributes.remove(\n-                (RoleDerivedAttribute) derivedAttribute);\n+                (RDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public void setDerivedAttributes(\n-            List<? extends AbstractDerivedAttribute> derivedAttributes) {\n+            List<? extends AbstractDerAttr> derivedAttributes) {\n \n-        this.derivedAttributes = (List<RoleDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<RDerAttr>) derivedAttributes;\n     }\n \n     public boolean isInheritAttributes() {"},{"sha":"4c1907ae199c15c6688cf762db06a0bbffc81c47","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -41,8 +41,8 @@\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -75,10 +75,10 @@ public class SyncopeUser extends AbstractAttributable {\n     private List<Membership> memberships;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    private List<UserAttribute> attributes;\n+    private List<UAttr> attributes;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    private List<UserDerivedAttribute> derivedAttributes;\n+    private List<UDerAttr> derivedAttributes;\n \n     @Column(nullable = true)\n     private Long workflowId;\n@@ -91,8 +91,8 @@ public class SyncopeUser extends AbstractAttributable {\n \n     public SyncopeUser() {\n         memberships = new ArrayList<Membership>();\n-        attributes = new ArrayList<UserAttribute>();\n-        derivedAttributes = new ArrayList<UserDerivedAttribute>();\n+        attributes = new ArrayList<UAttr>();\n+        derivedAttributes = new ArrayList<UDerAttr>();\n     }\n \n     @Override\n@@ -195,49 +195,49 @@ public void setPassword(final String password) {\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n-        return attributes.add((UserAttribute) attribute);\n+    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        return attributes.add((UAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n-        return attributes.remove((UserAttribute) attribute);\n+    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        return attributes.remove((UAttr) attribute);\n     }\n \n     @Override\n-    public List<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n-        this.attributes = (List<UserAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttr> attributes) {\n+        this.attributes = (List<UAttr>) attributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.add((UserDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.add((UDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.remove((UserDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.remove((UDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n     public void setDerivedAttributes(\n-            List<? extends AbstractDerivedAttribute> derivedAttributes) {\n+            List<? extends AbstractDerAttr> derivedAttributes) {\n \n-        this.derivedAttributes = (List<UserDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<UDerAttr>) derivedAttributes;\n     }\n \n     public Long getWorkflowId() {"},{"sha":"a2c3abf2cb4edbe805b7f3091e4d16ed8560ce9e","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttr.java","status":"renamed","additions":43,"deletions":21,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -24,34 +24,39 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.TableGenerator;\n import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n-public class UserAttribute extends AbstractAttribute {\n+public class UAttr extends AbstractAttr {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_UserAttribute\")\n-    @TableGenerator(name = \"SEQ_UserAttribute\", allocationSize = 200)\n+    generator = \"SEQ_UAttr\")\n+    @TableGenerator(name = \"SEQ_UAttr\", allocationSize = 200)\n     private Long id;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeUser owner;\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    private UserSchema schema;\n+    private USchema schema;\n \n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n     @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n-    private List<UserAttributeValue> values;\n+    private List<UAttrValue> values;\n \n-    public UserAttribute() {\n-        values = new ArrayList<UserAttributeValue>();\n+    @OneToOne(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n+    private UAttrUniqueValue uniqueValue;\n+\n+    public UAttr() {\n+        values = new ArrayList<UAttrValue>();\n     }\n \n     @Override\n@@ -65,7 +70,7 @@ public <T extends AbstractAttributable> T getOwner() {\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> void setOwner(T owner) {\n+    public <T extends AbstractAttributable> void setOwner(final T owner) {\n         this.owner = (SyncopeUser) owner;\n     }\n \n@@ -76,33 +81,50 @@ public <T extends AbstractSchema> T getSchema() {\n \n     @Override\n     public <T extends AbstractSchema> void setSchema(T schema) {\n-        this.schema = (UserSchema) schema;\n+        this.schema = (USchema) schema;\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean addValue(\n-            T attributeValue) {\n+    public <T extends AbstractAttrValue> boolean addValue(\n+            final T attributeValue) {\n \n-        return values.add((UserAttributeValue) attributeValue);\n+        return values.add((UAttrValue) attributeValue);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean removeValue(\n-            T attributeValue) {\n+    public <T extends AbstractAttrValue> boolean removeValue(\n+            final T attributeValue) {\n \n-        return values.remove((UserAttributeValue) attributeValue);\n+        return values.remove((UAttrValue) attributeValue);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> List<T> getValues() {\n+    public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> void setValues(\n-            List<T> attributeValues) {\n+    public <T extends AbstractAttrValue> void setValues(\n+            final List<T> attributeValues) {\n+\n+        this.values.clear();\n+        if (attributeValues != null && !attributeValues.isEmpty()) {\n+            for (T mav : attributeValues) {\n+                mav.setAttribute(this);\n+            }\n+            this.values.addAll((List<UAttrValue>) attributeValues);\n+        }\n+    }\n \n-        this.values = (List<UserAttributeValue>) attributeValues;\n+    @Override\n+    public <T extends AbstractAttrValue> T getUniqueValue() {\n+        return (T) uniqueValue;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttrValue> void setUniqueValue(\n+            final T uniqueAttributeValue) {\n \n+        this.uniqueValue = (UAttrUniqueValue) uniqueAttributeValue;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttribute.java"},{"sha":"b4d6a5d6a3164ce486317785ea5e5b58fe319586","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrUniqueValue.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -0,0 +1,49 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.IAttrUniqueValue;\n+\n+@Entity\n+@Table(uniqueConstraints =\n+@UniqueConstraint(columnNames = {\n+    \"booleanValue\",\n+    \"dateValue\",\n+    \"doubleValue\",\n+    \"longValue\",\n+    \"StringValue\",\n+    \"schema_name\"\n+}))\n+public class UAttrUniqueValue extends UAttrValue\n+        implements IAttrUniqueValue {\n+\n+    @OneToOne\n+    private USchema schema;\n+\n+    @Override\n+    public <T extends AbstractSchema> T getSchema() {\n+        return (T) schema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchema> void setSchema(final T schema) {\n+        this.schema = (USchema) schema;\n+    }\n+}"},{"sha":"f77b4f9307eda136ee9d3c43db5d216e2dd8fa18","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UAttrValue.java","status":"renamed","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,35 +18,38 @@\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.persistence.TableGenerator;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n @Entity\n-public class UserAttributeValue extends AbstractAttributeValue {\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class UAttrValue extends AbstractAttrValue {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.TABLE,\n-    generator = \"SEQ_UserAttributeValue\")\n-    @TableGenerator(name = \"SEQ_UserAttributeValue\", allocationSize = 200)\n+    generator = \"SEQ_UAttrValue\")\n+    @TableGenerator(name = \"SEQ_UAttrValue\", allocationSize = 200)\n     private Long id;\n \n     @ManyToOne\n-    private UserAttribute attribute;\n+    private UAttr attribute;\n \n     @Override\n     public Long getId() {\n         return id;\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> T getAttribute() {\n+    public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> void setAttribute(final T attribute) {\n-        this.attribute = (UserAttribute) attribute;\n+    public <T extends AbstractAttr> void setAttribute(final T attribute) {\n+        this.attribute = (UAttr) attribute;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttributeValue.java"},{"sha":"e3ece691dd387c7afb1b56b6f1383b0f99b99e9e","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerAttr.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,16 +18,16 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n @Entity\n-public class UserDerivedAttribute extends AbstractDerivedAttribute {\n+public class UDerAttr extends AbstractDerAttr {\n \n     @ManyToOne\n     private SyncopeUser owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n-    UserDerivedSchema derivedSchema;\n+    UDerSchema derivedSchema;\n \n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n@@ -40,14 +40,14 @@ public <T extends AbstractAttributable> void setOwner(T owner) {\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> T getDerivedSchema() {\n+    public <T extends AbstractDerSchema> T getDerivedSchema() {\n         return (T) derivedSchema;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> void setDerivedSchema(\n+    public <T extends AbstractDerSchema> void setDerivedSchema(\n             T derivedSchema) {\n \n-        this.derivedSchema = (UserDerivedSchema) derivedSchema;\n+        this.derivedSchema = (UDerSchema) derivedSchema;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserDerivedAttribute.java"},{"sha":"924e708980068c2f8c5aeaf26dabe09920eba06b","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UDerSchema.java","status":"renamed","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -23,70 +23,70 @@\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n-public class UserDerivedSchema extends AbstractDerivedSchema {\n+public class UDerSchema extends AbstractDerSchema {\n \n     @ManyToMany\n-    @JoinTable(name = \"UserSchemaDerivation\")\n-    private Set<UserSchema> schemas;\n+    @JoinTable(name = \"USchemaDerivation\")\n+    private Set<USchema> schemas;\n \n     @OneToMany(mappedBy = \"derivedSchema\")\n-    private List<UserDerivedAttribute> derivedAttributes;\n+    private List<UDerAttr> derivedAttributes;\n \n-    public UserDerivedSchema() {\n-        schemas = new HashSet<UserSchema>();\n-        derivedAttributes = new ArrayList<UserDerivedAttribute>();\n+    public UDerSchema() {\n+        schemas = new HashSet<USchema>();\n+        derivedAttributes = new ArrayList<UDerAttr>();\n     }\n \n     @Override\n     public <T extends AbstractSchema> boolean addSchema(T schema) {\n-        return schemas.add((UserSchema) schema);\n+        return schemas.add((USchema) schema);\n     }\n \n     @Override\n     public <T extends AbstractSchema> boolean removeSchema(T schema) {\n-        return schemas.remove((UserSchema) schema);\n+        return schemas.remove((USchema) schema);\n     }\n \n     @Override\n-    public Set<UserSchema> getSchemas() {\n+    public Set<USchema> getSchemas() {\n         return schemas;\n     }\n \n     @Override\n     public void setSchemas(Set<? extends AbstractSchema> schemas) {\n-        this.schemas = (Set<UserSchema>) schemas;\n+        this.schemas = (Set<USchema>) schemas;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.add((UserDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.add((UDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(\n             T derivedAttribute) {\n \n-        return derivedAttributes.remove((UserDerivedAttribute) derivedAttribute);\n+        return derivedAttributes.remove((UDerAttr) derivedAttribute);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+    public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n+    public <T extends AbstractDerAttr> void setDerivedAttributes(\n             List<T> derivedAttributes) {\n \n-        this.derivedAttributes = (List<UserDerivedAttribute>) derivedAttributes;\n+        this.derivedAttributes = (List<UDerAttr>) derivedAttributes;\n     }\n \n     /**","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserDerivedSchema.java"},{"sha":"0428d05551213b83a180d9e48091745b5054c592","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/USchema.java","status":"renamed","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -24,75 +24,75 @@\n import javax.persistence.QueryHint;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n @NamedQueries({\n-    @NamedQuery(name = \"UserSchema.findAll\",\n-    query = \"SELECT e FROM UserSchema e\",\n+    @NamedQuery(name = \"USchema.findAll\",\n+    query = \"SELECT e FROM USchema e\",\n     hints = {\n         @QueryHint(name = \"org.hibernate.cacheable\", value = \"true\")\n     })\n })\n-public class UserSchema extends AbstractSchema {\n+public class USchema extends AbstractSchema {\n \n     @OneToMany(mappedBy = \"schema\")\n-    private List<UserAttribute> attributes;\n+    private List<UAttr> attributes;\n \n     @ManyToMany(mappedBy = \"schemas\")\n-    private List<UserDerivedSchema> derivedSchemas;\n+    private List<UDerSchema> derivedSchemas;\n \n-    public UserSchema() {\n-        attributes = new ArrayList<UserAttribute>();\n-        derivedSchemas = new ArrayList<UserDerivedSchema>();\n+    public USchema() {\n+        attributes = new ArrayList<UAttr>();\n+        derivedSchemas = new ArrayList<UDerSchema>();\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n-        return attributes.add((UserAttribute) attribute);\n+    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+        return attributes.add((UAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n-        return attributes.remove((UserAttribute) attribute);\n+    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+        return attributes.remove((UAttr) attribute);\n     }\n \n     @Override\n-    public List<? extends AbstractAttribute> getAttributes() {\n+    public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttribute> attributes) {\n-        this.attributes = (List<UserAttribute>) attributes;\n+    public void setAttributes(List<? extends AbstractAttr> attributes) {\n+        this.attributes = (List<UAttr>) attributes;\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n+    public <T extends AbstractDerSchema> boolean addDerivedSchema(\n             T derivedSchema) {\n \n-        return derivedSchemas.add((UserDerivedSchema) derivedSchema);\n+        return derivedSchemas.add((UDerSchema) derivedSchema);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n+    public <T extends AbstractDerSchema> boolean removeDerivedSchema(\n             T derivedSchema) {\n \n-        return derivedSchemas.remove((UserDerivedSchema) derivedSchema);\n+        return derivedSchemas.remove((UDerSchema) derivedSchema);\n     }\n \n     @Override\n-    public List<? extends AbstractDerivedSchema> getDerivedSchemas() {\n+    public List<? extends AbstractDerSchema> getDerivedSchemas() {\n         return derivedSchemas;\n     }\n \n     @Override\n     public void setDerivedSchemas(\n-            List<? extends AbstractDerivedSchema> derivedSchemas) {\n+            List<? extends AbstractDerSchema> derivedSchemas) {\n \n-        this.derivedSchemas = (List<UserDerivedSchema>) derivedSchemas;\n+        this.derivedSchemas = (List<UDerSchema>) derivedSchemas;\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java"},{"sha":"72eea4c26ae364169a53090902e37e0c4645eb9d","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -15,17 +15,17 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n \n public interface AttributeDAO extends DAO {\n \n-    <T extends AbstractAttribute> T find(Long id, Class<T> reference);\n+    <T extends AbstractAttr> T find(Long id, Class<T> reference);\n \n-    <T extends AbstractAttribute> List<T> findAll(Class<T> reference);\n+    <T extends AbstractAttr> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractAttribute> T save(T attribute);\n+    <T extends AbstractAttr> T save(T attribute);\n \n-    <T extends AbstractAttribute> void delete(Long id, Class<T> reference);\n+    <T extends AbstractAttr> void delete(Long id, Class<T> reference);\n \n-    <T extends AbstractAttribute> void delete(T attribute);\n+    <T extends AbstractAttr> void delete(T attribute);\n }"},{"sha":"d07d61e33ac3453f082abc16fb09f317ada8287e","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeValueDAO.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -15,20 +15,17 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public interface AttributeValueDAO extends DAO {\n \n-    <T extends AbstractAttributeValue> T find(Long id, Class<T> reference);\n+    <T extends AbstractAttrValue> T find(Long id, Class<T> reference);\n \n-    <T extends AbstractAttributeValue> List<T> findAll(Class<T> reference);\n+    <T extends AbstractAttrValue> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractAttributeValue> boolean nonUniqueAttributeValue(\n-            T attributeValue);\n+    <T extends AbstractAttrValue> T save(T attributeValue);\n \n-    <T extends AbstractAttributeValue> T save(T attributeValue);\n+    <T extends AbstractAttrValue> void delete(Long id, Class<T> reference);\n \n-    <T extends AbstractAttributeValue> void delete(Long id, Class<T> reference);\n-\n-    <T extends AbstractAttributeValue> void delete(T attributeValue);\n+    <T extends AbstractAttrValue> void delete(T attributeValue);\n }"},{"sha":"19fa51e2542e68ab798104713f32c0b1a803880e","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedAttributeDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -15,17 +15,17 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n \n public interface DerivedAttributeDAO extends DAO {\n \n-    <T extends AbstractDerivedAttribute> T find(Long id, Class<T> reference);\n+    <T extends AbstractDerAttr> T find(Long id, Class<T> reference);\n \n-    <T extends AbstractDerivedAttribute> List<T> findAll(Class<T> reference);\n+    <T extends AbstractDerAttr> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractDerivedAttribute> T save(T derivedAttribute);\n+    <T extends AbstractDerAttr> T save(T derivedAttribute);\n \n-    <T extends AbstractDerivedAttribute> void delete(Long id, Class<T> reference);\n+    <T extends AbstractDerAttr> void delete(Long id, Class<T> reference);\n \n-    <T extends AbstractDerivedAttribute> void delete(T derivedAttribute);\n+    <T extends AbstractDerAttr> void delete(T derivedAttribute);\n }"},{"sha":"efccf4184c96e5aeb053e6e121ab362984b4a454","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedSchemaDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -15,16 +15,16 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n \n public interface DerivedSchemaDAO extends DAO {\n \n-    <T extends AbstractDerivedSchema> T find(String name, Class<T> reference);\n+    <T extends AbstractDerSchema> T find(String name, Class<T> reference);\n \n-    <T extends AbstractDerivedSchema> List<T> findAll(Class<T> reference);\n+    <T extends AbstractDerSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractDerivedSchema> T save(T derivedSchema);\n+    <T extends AbstractDerSchema> T save(T derivedSchema);\n \n-    <T extends AbstractDerivedSchema> void delete(\n+    <T extends AbstractDerSchema> void delete(\n             String name, Class<T> reference);\n }"},{"sha":"9e995911f2549939273d2b40fc8cca2ef455f63b","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeConfigurationDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -15,15 +15,15 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n \n public interface SyncopeConfigurationDAO extends DAO {\n \n-    SyncopeConfiguration find(String name) throws MissingConfKeyException;\n+    SyncopeConf find(String name) throws MissingConfKeyException;\n \n-    List<SyncopeConfiguration> findAll();\n+    List<SyncopeConf> findAll();\n \n-    SyncopeConfiguration save(SyncopeConfiguration syncopeConfiguration);\n+    SyncopeConf save(SyncopeConf syncopeConfiguration);\n \n     void delete(String name);\n }"},{"sha":"42768d0ce5b24be8ebaa86a9e3b84e3021adb847","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeRoleDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -15,8 +15,8 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.role.RoleAttribute;\n-import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n+import org.syncope.core.persistence.beans.role.RAttr;\n+import org.syncope.core.persistence.beans.role.RDerAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n \n public interface SyncopeRoleDAO extends DAO {\n@@ -27,9 +27,9 @@ public interface SyncopeRoleDAO extends DAO {\n \n     List<SyncopeRole> findChildren(Long roleId);\n \n-    List<RoleAttribute> findInheritedAttributes(SyncopeRole role);\n+    List<RAttr> findInheritedAttributes(SyncopeRole role);\n \n-    List<RoleDerivedAttribute> findInheritedDerivedAttributes(SyncopeRole role);\n+    List<RDerAttr> findInheritedDerivedAttributes(SyncopeRole role);\n \n     List<SyncopeRole> findAll();\n "},{"sha":"0bed4380a2c62c4e1532639aa301514e7a3bc35a","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -17,17 +17,17 @@\n import java.util.List;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n \n public interface SyncopeUserDAO extends DAO {\n \n     SyncopeUser find(Long id);\n \n     SyncopeUser findByWorkflowId(Long workflowId);\n \n-    List<SyncopeUser> findByAttributeValue(UserAttributeValue attributeValue);\n+    List<SyncopeUser> findByAttributeValue(UAttrValue attributeValue);\n \n-    List<SyncopeUser> findByAttributeValue(UserAttributeValue attributeValue,\n+    List<SyncopeUser> findByAttributeValue(UAttrValue attributeValue,\n             int page, int itemsPerPage);\n \n     List<SyncopeUser> findAll();"},{"sha":"8e3942b0c4f209b2c3047a97c7f0aa175d910e45","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeDAOImpl.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -17,36 +17,35 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.dao.AttributeDAO;\n \n @Repository\n public class AttributeDAOImpl extends AbstractDAOImpl\n         implements AttributeDAO {\n \n     @Override\n-    public <T extends AbstractAttribute> T find(final Long id,\n+    public <T extends AbstractAttr> T find(final Long id,\n             final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> List<T> findAll(\n-            final Class<T> reference) {\n+    public <T extends AbstractAttr> List<T> findAll(final Class<T> reference) {\n \n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> T save(final T attribute) {\n+    public <T extends AbstractAttr> T save(final T attribute) {\n         return entityManager.merge(attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> void delete(\n+    public <T extends AbstractAttr> void delete(\n             final Long id, final Class<T> reference) {\n \n         T attribute = find(id, reference);\n@@ -58,7 +57,7 @@ public <T extends AbstractAttribute> void delete(\n     }\n \n     @Override\n-    public <T extends AbstractAttribute> void delete(final T attribute) {\n+    public <T extends AbstractAttr> void delete(final T attribute) {\n         if (attribute.getOwner() != null) {\n             attribute.getOwner().removeAttribute(attribute);\n         }"},{"sha":"0afec2863da468cf643ead4588f4257a1bfd9549","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java","status":"modified","additions":6,"deletions":42,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -14,61 +14,25 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n \n @Repository\n public class AttributeValueDAOImpl extends AbstractDAOImpl\n         implements AttributeValueDAO {\n \n     @Override\n-    public <T extends AbstractAttributeValue> T find(\n+    public <T extends AbstractAttrValue> T find(\n             final Long id, final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> boolean nonUniqueAttributeValue(\n-            final T attributeValue) {\n-\n-        Query query = entityManager.createQuery(\n-                \"SELECT DISTINCT e FROM \"\n-                + attributeValue.getClass().getSimpleName()\n-                + \" e WHERE e.attribute.schema = :schema AND \"\n-                + \" ((e.stringValue IS NOT NULL \"\n-                + \"AND e.stringValue = :stringValue)\"\n-                + \" OR (e.booleanValue IS NOT NULL \"\n-                + \"AND e.booleanValue = :booleanValue)\"\n-                + \" OR (e.dateValue IS NOT NULL \"\n-                + \"AND e.dateValue = :dateValue)\"\n-                + \" OR (e.longValue IS NOT NULL \"\n-                + \"AND e.longValue = :longValue)\"\n-                + \" OR (e.doubleValue IS NOT NULL \"\n-                + \"AND e.doubleValue = :doubleValue))\");\n-\n-        query.setParameter(\"schema\", attributeValue.getAttribute().getSchema());\n-        query.setParameter(\"stringValue\", attributeValue.getStringValue());\n-        query.setParameter(\"booleanValue\", attributeValue.getBooleanValue());\n-        query.setParameter(\"dateValue\", attributeValue.getDateValue());\n-        query.setParameter(\"longValue\", attributeValue.getLongValue());\n-        query.setParameter(\"doubleValue\", attributeValue.getDoubleValue());\n-\n-        Set<Long> distinctOwners = new HashSet<Long>();\n-        for (Object foundValue : query.getResultList()) {\n-            distinctOwners.add(\n-                    ((T) foundValue).getAttribute().getOwner().getId());\n-        }\n-        return distinctOwners.size() > 1;\n-    }\n-\n-    @Override\n-    public <T extends AbstractAttributeValue> List<T> findAll(\n+    public <T extends AbstractAttrValue> List<T> findAll(\n             final Class<T> reference) {\n \n         Query query = entityManager.createQuery(\n@@ -77,12 +41,12 @@ public <T extends AbstractAttributeValue> List<T> findAll(\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> T save(final T attributeValue) {\n+    public <T extends AbstractAttrValue> T save(final T attributeValue) {\n         return entityManager.merge(attributeValue);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> void delete(final Long id,\n+    public <T extends AbstractAttrValue> void delete(final Long id,\n             final Class<T> reference) {\n \n         T attributeValue = find(id, reference);\n@@ -94,7 +58,7 @@ public <T extends AbstractAttributeValue> void delete(final Long id,\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> void delete(\n+    public <T extends AbstractAttrValue> void delete(\n             final T attributeValue) {\n \n         if (attributeValue.getAttribute() != null) {"},{"sha":"eb886cca7f206ad8469703b71231f34a5b3531e0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedAttributeDAOImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -17,22 +17,22 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n \n @Repository\n public class DerivedAttributeDAOImpl extends AbstractDAOImpl\n         implements DerivedAttributeDAO {\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> T find(\n+    public <T extends AbstractDerAttr> T find(\n             final Long id, final Class<T> reference) {\n \n         return entityManager.find(reference, id);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> List<T> findAll(\n+    public <T extends AbstractDerAttr> List<T> findAll(\n             final Class<T> reference) {\n \n         Query query = entityManager.createQuery(\n@@ -41,14 +41,14 @@ public <T extends AbstractDerivedAttribute> List<T> findAll(\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> T save(\n+    public <T extends AbstractDerAttr> T save(\n             final T derivedAttribute) {\n \n         return entityManager.merge(derivedAttribute);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> void delete(\n+    public <T extends AbstractDerAttr> void delete(\n             final Long id, final Class<T> reference) {\n \n         T derivedAttribute = find(id, reference);\n@@ -60,7 +60,7 @@ public <T extends AbstractDerivedAttribute> void delete(\n     }\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> void delete(\n+    public <T extends AbstractDerAttr> void delete(\n             final T derivedAttribute) {\n \n         if (derivedAttribute.getOwner() != null) {"},{"sha":"d5643d1432f2fcabfad531f503b00da97b44d53c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedSchemaDAOImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -20,8 +20,8 @@\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n@@ -34,14 +34,14 @@ public class DerivedSchemaDAOImpl extends AbstractDAOImpl\n     private DerivedAttributeDAO derivedAttributeDAO;\n \n     @Override\n-    public <T extends AbstractDerivedSchema> T find(final String name,\n+    public <T extends AbstractDerSchema> T find(final String name,\n             final Class<T> reference) {\n \n         return entityManager.find(reference, name);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> List<T> findAll(\n+    public <T extends AbstractDerSchema> List<T> findAll(\n             final Class<T> reference) {\n \n         Query query = entityManager.createQuery(\n@@ -50,12 +50,12 @@ public <T extends AbstractDerivedSchema> List<T> findAll(\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> T save(final T derivedSchema) {\n+    public <T extends AbstractDerSchema> T save(final T derivedSchema) {\n         return entityManager.merge(derivedSchema);\n     }\n \n     @Override\n-    public <T extends AbstractDerivedSchema> void delete(final String name,\n+    public <T extends AbstractDerSchema> void delete(final String name,\n             final Class<T> reference) {\n \n         T derivedSchema = find(name, reference);\n@@ -71,7 +71,7 @@ public <T extends AbstractDerivedSchema> void delete(final String name,\n         Set<Long> derivedAttributeIds =\n                 new HashSet<Long>(derivedSchema.getDerivedAttributes().size());\n         Class attributeClass = null;\n-        for (AbstractDerivedAttribute attribute :\n+        for (AbstractDerAttr attribute :\n                 derivedSchema.getDerivedAttributes()) {\n \n             derivedAttributeIds.add(attribute.getId());"},{"sha":"ea2790a4696d46aa2843c5385fb677d35fe42e10","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -20,8 +20,8 @@\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -60,7 +60,7 @@ public <T extends AbstractSchema> List<T> findAll(\n     public <T extends AbstractSchema> T save(final T schema)\n             throws MultiUniqueValueException {\n \n-        if (schema.isMultivalue() && schema.isUniquevalue()) {\n+        if (schema.isMultivalue() && schema.isUniqueConstraint()) {\n             throw new MultiUniqueValueException(schema);\n         }\n \n@@ -76,15 +76,15 @@ public <T extends AbstractSchema> void delete(String name,\n             return;\n         }\n \n-        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n+        for (AbstractDerSchema derivedSchema : schema.getDerivedSchemas()) {\n             derivedSchema.removeSchema(schema);\n         }\n         schema.getDerivedSchemas().clear();\n \n         Set<Long> attributeIds =\n                 new HashSet<Long>(schema.getAttributes().size());\n         Class attributeClass = null;\n-        for (AbstractAttribute attribute : schema.getAttributes()) {\n+        for (AbstractAttr attribute : schema.getAttributes()) {\n             attributeIds.add(attribute.getId());\n             attributeClass = attribute.getClass();\n         }"},{"sha":"0b16eafe5c469ca0a382dc5b543efdcb696f32c4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfigurationDAOImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n \n@@ -26,11 +26,11 @@ public class SyncopeConfigurationDAOImpl extends AbstractDAOImpl\n         implements SyncopeConfigurationDAO {\n \n     @Override\n-    public SyncopeConfiguration find(final String name)\n+    public SyncopeConf find(final String name)\n             throws MissingConfKeyException {\n \n-        SyncopeConfiguration syncopeConfiguration =\n-                entityManager.find(SyncopeConfiguration.class, name);\n+        SyncopeConf syncopeConfiguration =\n+                entityManager.find(SyncopeConf.class, name);\n \n         if (syncopeConfiguration == null) {\n             throw new MissingConfKeyException(name);\n@@ -40,15 +40,15 @@ public SyncopeConfiguration find(final String name)\n     }\n \n     @Override\n-    public List<SyncopeConfiguration> findAll() {\n+    public List<SyncopeConf> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM SyncopeConfiguration e\");\n         return query.getResultList();\n     }\n \n     @Override\n-    public SyncopeConfiguration save(\n-            final SyncopeConfiguration syncopeConfiguration) {\n+    public SyncopeConf save(\n+            final SyncopeConf syncopeConfiguration) {\n \n         return entityManager.merge(syncopeConfiguration);\n     }"},{"sha":"22491131af447f171facc942d6483b1cae5ed754","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -21,8 +21,8 @@\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.membership.Membership;\n-import org.syncope.core.persistence.beans.role.RoleAttribute;\n-import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n+import org.syncope.core.persistence.beans.role.RAttr;\n+import org.syncope.core.persistence.beans.role.RDerAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n@@ -32,8 +32,7 @@ public class SyncopeRoleDAOImpl extends AbstractDAOImpl\n \n     @Override\n     public SyncopeRole find(final String name, final Long parentId) {\n-        Query query = null;\n-\n+        Query query;\n         if (parentId != null) {\n             query = entityManager.createQuery(\n                     \"SELECT r FROM SyncopeRole r WHERE \"\n@@ -77,7 +76,7 @@ private List<Long> getAncestors(final SyncopeRole role,\n     }\n \n     @Override\n-    public List<RoleAttribute> findInheritedAttributes(final SyncopeRole role) {\n+    public List<RAttr> findInheritedAttributes(final SyncopeRole role) {\n         if (role.getParent() == null) {\n             return Collections.EMPTY_LIST;\n         }\n@@ -89,8 +88,9 @@ public List<RoleAttribute> findInheritedAttributes(final SyncopeRole role) {\n         }\n \n         StringBuilder queryExp = new StringBuilder();\n-        queryExp.append(\"SELECT ra FROM RoleAttribute ra \"\n-                + \"WHERE ra.owner.id = \");\n+        queryExp.append(\"SELECT ra \").\n+                append(\"FROM \" + RAttr.class.getSimpleName() + \" ra \").\n+                append(\"WHERE ra.owner.id = \");\n         queryExp.append(ancestors.get(0));\n \n         if (ancestors.size() > 1) {\n@@ -107,7 +107,7 @@ public List<RoleAttribute> findInheritedAttributes(final SyncopeRole role) {\n     }\n \n     @Override\n-    public List<RoleDerivedAttribute> findInheritedDerivedAttributes(\n+    public List<RDerAttr> findInheritedDerivedAttributes(\n             final SyncopeRole role) {\n \n         if (role.getParent() == null) {\n@@ -121,8 +121,9 @@ public List<RoleDerivedAttribute> findInheritedDerivedAttributes(\n         }\n \n         StringBuilder queryExp = new StringBuilder();\n-        queryExp.append(\"SELECT rda FROM RoleDerivedAttribute rda \"\n-                + \"WHERE rda.owner.id = \");\n+        queryExp.append(\"SELECT rda \").\n+                append(\"FROM \" + RDerAttr.class.getSimpleName() + \" rda \").\n+                append(\"WHERE rda.owner.id = \");\n         queryExp.append(ancestors.get(0));\n \n         if (ancestors.size() > 1) {"},{"sha":"d21e1b853f0b4d1c2705bbba3f551a60c3c50385","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -27,11 +27,11 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n@@ -70,14 +70,14 @@ public SyncopeUser findByWorkflowId(final Long workflowId) {\n \n     @Override\n     public List<SyncopeUser> findByAttributeValue(\n-            final UserAttributeValue attributeValue) {\n+            final UAttrValue attributeValue) {\n \n         return findByAttributeValue(attributeValue, -1, -1);\n     }\n \n     @Override\n     public final List<SyncopeUser> findByAttributeValue(\n-            final UserAttributeValue attributeValue,\n+            final UAttrValue attributeValue,\n             final int page, final int itemsPerPage) {\n \n         final Query query = entityManager.createQuery(\n@@ -297,16 +297,16 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                                 leafCond.getMembershipCond().getRoleName());\n                     }\n                 } else if (leafCond.getAttributeCond() != null) {\n-                        UserSchema userSchema = schemaDAO.find(\n+                        USchema userSchema = schemaDAO.find(\n                                 leafCond.getAttributeCond().getSchema(),\n-                                UserSchema.class);\n+                                USchema.class);\n                         if (userSchema == null) {\n                             LOG.warn(\"Ignoring invalid schema '\"\n                                     + leafCond.getAttributeCond().getSchema()\n                                     + \"'\");\n                         } else {\n-                            UserAttributeValue attributeValue =\n-                                    new UserAttributeValue();\n+                            UAttrValue attributeValue =\n+                                    new UAttrValue();\n                             try {\n                                 if (leafCond.getAttributeCond().getType()\n                                         == AttributeCond.Type.LIKE) {\n@@ -346,16 +346,16 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                         leafCond.getAttributeCond();\n \n                 if (attributeCondition != null) {\n-                    UserSchema userSchema = schemaDAO.find(\n+                    USchema userSchema = schemaDAO.find(\n                             leafCond.getAttributeCond().getSchema(),\n-                            UserSchema.class);\n+                            USchema.class);\n                     if (userSchema == null) {\n                         LOG.warn(\"Ignoring invalid schema '\"\n                                 + leafCond.getAttributeCond().getSchema()\n                                 + \"'\");\n                     } else {\n-                        UserAttributeValue attributeValue =\n-                                new UserAttributeValue();\n+                        UAttrValue attributeValue =\n+                                new UAttrValue();\n                         try {\n                             if (leafCond.getAttributeCond().getType()\n                                     == AttributeCond.Type.LIKE) {\n@@ -400,7 +400,7 @@ private Criterion getCriterion(final NodeCond leafCond) {\n     }\n \n     private Criterion getCriterion(final AttributeCond.Type type,\n-            final AbstractAttributeValue attributeValue) {\n+            final AbstractAttrValue attributeValue) {\n \n         Criterion result = null;\n         switch (type) {"},{"sha":"86ef0440377b6c7419e5618839e55ca4af5a08eb","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -42,8 +42,8 @@\n import org.syncope.core.persistence.beans.TaskExecution;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.rest.data.TaskDataBinder;\n@@ -270,11 +270,11 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n         Set objValues;\n \n         // syncope user attribute\n-        UserAttribute userAttribute;\n+        UAttr userAttribute;\n         // syncope user attribute schema type\n         SchemaValueType schemaValueType = null;\n         // syncope user attribute values\n-        List<UserAttributeValue> values;\n+        List<UAttrValue> values;\n \n         for (SchemaMapping mapping : resource.getMappings()) {\n             LOG.debug(\"Processing schema {} ({})\", mapping.getSchemaName(),\n@@ -316,8 +316,8 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                 } else {\n                     schemaValueType = SchemaValueType.String;\n \n-                    UserAttributeValue userAttributeValue =\n-                            new UserAttributeValue();\n+                    UAttrValue userAttributeValue =\n+                            new UAttrValue();\n \n                     if (SchemaType.AccountId.equals(mapping.getSchemaType())) {\n                         userAttributeValue.setStringValue(\n@@ -353,7 +353,7 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                 // -----------------------------\n                 objValues = new HashSet();\n \n-                for (UserAttributeValue value : values) {\n+                for (UAttrValue value : values) {\n                     castToBeApplied =\n                             Class.forName(schemaValueType.getClassName());\n "},{"sha":"39eb0dee31328d22c41a7e7f0ffd91603be57169","filename":"core/src/main/java/org/syncope/core/persistence/validation/AbstractAttributeValidator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAbstractAttributeValidator.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,7 +18,7 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public abstract class AbstractAttributeValidator implements AttributeValidator {\n \n@@ -29,7 +29,7 @@ public AbstractAttributeValidator(final AbstractSchema schema) {\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> T getValue(final String value,\n+    public <T extends AbstractAttrValue> T getValue(final String value,\n             T attributeValue)\n             throws ParseException, ValidationFailedException {\n \n@@ -39,7 +39,7 @@ public <T extends AbstractAttributeValue> T getValue(final String value,\n         return attributeValue;\n     }\n \n-    private <T extends AbstractAttributeValue> T parseValue(final String value,\n+    private <T extends AbstractAttrValue> T parseValue(final String value,\n             T attributeValue)\n             throws ParseException {\n \n@@ -94,7 +94,7 @@ private <T extends AbstractAttributeValue> T parseValue(final String value,\n         return attributeValue;\n     }\n \n-    protected abstract <T extends AbstractAttributeValue> void doValidate(\n+    protected abstract <T extends AbstractAttrValue> void doValidate(\n             T attributeValue)\n             throws ValidationFailedException;\n }"},{"sha":"dcbfc55bb5979cd421af28ce3366377bff372b9c","filename":"core/src/main/java/org/syncope/core/persistence/validation/AlwaysTrueValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -15,7 +15,7 @@\n package org.syncope.core.persistence.validation;\n \n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public class AlwaysTrueValidator extends AbstractAttributeValidator {\n \n@@ -25,7 +25,7 @@ public AlwaysTrueValidator(AbstractSchema schema) {\n     }\n \n     @Override\n-    protected void doValidate(AbstractAttributeValue attributeValue)\n+    protected void doValidate(AbstractAttrValue attributeValue)\n             throws ValidationFailedException {\n \n         Boolean value = attributeValue.getValue();"},{"sha":"95ed160019e48d7a80486ae855a692730298f8f1","filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -14,11 +14,11 @@\n  */\n package org.syncope.core.persistence.validation;\n \n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public interface AttributeValidator {\n \n-    <T extends AbstractAttributeValue> T getValue(String value,\n+    <T extends AbstractAttrValue> T getValue(String value,\n             T attributeValue)\n             throws ParseException, ValidationFailedException;\n }"},{"sha":"c3d345f94630d0313e811f20b5d502004474573f","filename":"core/src/main/java/org/syncope/core/persistence/validation/BasicAttributeValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FBasicAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FBasicAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FBasicAttributeValidator.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -15,7 +15,7 @@\n package org.syncope.core.persistence.validation;\n \n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public class BasicAttributeValidator extends AbstractAttributeValidator {\n \n@@ -25,7 +25,7 @@ public BasicAttributeValidator(AbstractSchema schema) {\n     }\n \n     @Override\n-    protected void doValidate(AbstractAttributeValue attributeValue)\n+    protected void doValidate(AbstractAttrValue attributeValue)\n             throws ValidationFailedException {\n     }\n }"},{"sha":"0e36fdebf4d01ed1a1d836010aab6940c951a87c","filename":"core/src/main/java/org/syncope/core/persistence/validation/EmailAddressValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -17,7 +17,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public class EmailAddressValidator extends AbstractAttributeValidator {\n \n@@ -31,7 +31,7 @@ public EmailAddressValidator(AbstractSchema schema) {\n     }\n \n     @Override\n-    protected void doValidate(AbstractAttributeValue attributeValue)\n+    protected void doValidate(AbstractAttrValue attributeValue)\n             throws ValidationFailedException {\n \n         CharSequence emailAddress = attributeValue.getValue();"},{"sha":"9a72575448a00a3825c431d51464464c0da64fc4","filename":"core/src/main/java/org/syncope/core/persistence/validation/ValidationFailedException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationFailedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationFailedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationFailedException.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -14,11 +14,11 @@\n  */\n package org.syncope.core.persistence.validation;\n \n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public class ValidationFailedException extends ValidationException {\n \n-    public ValidationFailedException(AbstractAttributeValue attributeValue) {\n+    public ValidationFailedException(AbstractAttrValue attributeValue) {\n         super(\"Could not validate \" + attributeValue);\n     }\n }"},{"sha":"8f466ddde4d847ac9b0fd1545eac823724782aa9","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -30,7 +30,7 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConfigurationTO;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n import org.syncope.core.persistence.validation.AttributeValidator;\n@@ -55,7 +55,7 @@ public ConfigurationTO create(HttpServletRequest request,\n             LOG.debug(\"create called with parameters \" + configurationTO);\n         }\n \n-        SyncopeConfiguration syncopeConfiguration =\n+        SyncopeConf syncopeConfiguration =\n                 configurationDataBinder.createSyncopeConfiguration(\n                 configurationTO);\n \n@@ -73,20 +73,20 @@ public void delete(HttpServletResponse response,\n             @PathVariable(\"confKey\") String confKey)\n             throws MissingConfKeyException {\n \n-        SyncopeConfiguration syncopeConfiguration =\n+        SyncopeConf syncopeConfiguration =\n                 syncopeConfigurationDAO.find(confKey);\n         syncopeConfigurationDAO.delete(confKey);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public List<ConfigurationTO> list(HttpServletRequest request) {\n-        List<SyncopeConfiguration> configurations =\n+        List<SyncopeConf> configurations =\n                 syncopeConfigurationDAO.findAll();\n         List<ConfigurationTO> configurationTOs =\n                 new ArrayList<ConfigurationTO>(configurations.size());\n \n-        for (SyncopeConfiguration configuration : configurations) {\n+        for (SyncopeConf configuration : configurations) {\n             configurationTOs.add(\n                     configurationDataBinder.getConfigurationTO(configuration));\n         }\n@@ -102,7 +102,7 @@ public ConfigurationTO read(HttpServletResponse response,\n \n         ConfigurationTO result = null;\n         try {\n-            SyncopeConfiguration syncopeConfiguration =\n+            SyncopeConf syncopeConfiguration =\n                     syncopeConfigurationDAO.find(confKey);\n             result = configurationDataBinder.getConfigurationTO(\n                     syncopeConfiguration);\n@@ -123,7 +123,7 @@ public ConfigurationTO update(HttpServletResponse response,\n             @RequestBody ConfigurationTO configurationTO)\n             throws MissingConfKeyException {\n \n-        SyncopeConfiguration syncopeConfiguration =\n+        SyncopeConf syncopeConfiguration =\n                 syncopeConfigurationDAO.find(configurationTO.getConfKey());\n \n         syncopeConfiguration.setConfValue(configurationTO.getConfValue());"},{"sha":"3e7a37641efe84edcb317e9cd41c3bfbeb2ca537","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -26,7 +26,7 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.rest.data.DerivedSchemaDataBinder;\n \n@@ -45,11 +45,11 @@ public DerivedSchemaTO create(final HttpServletResponse response,\n             @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException {\n \n-        AbstractDerivedSchema derivedSchema =\n+        AbstractDerSchema derivedSchema =\n                 derivedSchemaDataBinder.create(\n                 derivedSchemaTO,\n                 getAttributableUtil(kind).newDerivedSchema(),\n-                getAttributableUtil(kind).getSchemaClass());\n+                getAttributableUtil(kind).schemaClass());\n \n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n \n@@ -64,8 +64,8 @@ public void delete(HttpServletResponse response,\n             @PathVariable(\"schema\") final String derivedSchemaName)\n             throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n-        AbstractDerivedSchema derivedSchema =\n+        Class reference = getAttributableUtil(kind).derivedSchemaClass();\n+        AbstractDerSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             LOG.error(\"Could not find derived schema '\"\n@@ -79,13 +79,13 @@ public void delete(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n-        List<AbstractDerivedSchema> derivedAttributeSchemas =\n+        Class reference = getAttributableUtil(kind).derivedSchemaClass();\n+        List<AbstractDerSchema> derivedAttributeSchemas =\n                 derivedSchemaDAO.findAll(reference);\n \n         List<DerivedSchemaTO> derivedSchemaTOs =\n                 new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());\n-        for (AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {\n+        for (AbstractDerSchema derivedSchema : derivedAttributeSchemas) {\n \n             derivedSchemaTOs.add(derivedSchemaDataBinder.getDerivedSchemaTO(\n                     derivedSchema));\n@@ -100,8 +100,8 @@ public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"derivedSchema\") final String derivedSchemaName)\n             throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n-        AbstractDerivedSchema derivedSchema =\n+        Class reference = getAttributableUtil(kind).derivedSchemaClass();\n+        AbstractDerSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             LOG.error(\"Could not find derived schema '\"\n@@ -118,8 +118,8 @@ public DerivedSchemaTO update(\n             @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n-        AbstractDerivedSchema derivedSchema =\n+        Class reference = getAttributableUtil(kind).derivedSchemaClass();\n+        AbstractDerSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaTO.getName(), reference);\n         if (derivedSchema == null) {\n             LOG.error(\"Could not find derived schema '\"\n@@ -128,7 +128,7 @@ public DerivedSchemaTO update(\n         }\n \n         derivedSchema = derivedSchemaDataBinder.update(derivedSchemaTO,\n-                derivedSchema, getAttributableUtil(kind).getSchemaClass());\n+                derivedSchema, getAttributableUtil(kind).schemaClass());\n \n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);"},{"sha":"f67d7b60330bff33b60219b4ed96221db54f5caa","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -50,7 +50,7 @@ public SchemaTO create(final HttpServletResponse response,\n \n         AbstractSchema schema = schemaDataBinder.create(schemaTO,\n                 getAttributableUtil(kind).newSchema(),\n-                getAttributableUtil(kind).getDerivedSchemaClass());\n+                getAttributableUtil(kind).derivedSchemaClass());\n \n         schema = schemaDAO.save(schema);\n \n@@ -64,7 +64,7 @@ public void delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String schemaName)\n             throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).schemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n@@ -77,7 +77,7 @@ public void delete(@PathVariable(\"kind\") final String kind,\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        Class reference = getAttributableUtil(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).schemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n \n         List<SchemaTO> schemaTOs = new ArrayList<SchemaTO>(schemas.size());\n@@ -94,7 +94,7 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String schemaName)\n             throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).schemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n@@ -110,15 +110,15 @@ public SchemaTO update(@RequestBody final SchemaTO schemaTO,\n             throws SyncopeClientCompositeErrorException,\n             MultiUniqueValueException, NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).schemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaTO.getName(), reference);\n         if (schema == null) {\n             LOG.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n             throw new NotFoundException(\"Schema '\" + schemaTO.getName() + \"'\");\n         }\n \n         schema = schemaDataBinder.update(schemaTO,\n-                schema, getAttributableUtil(kind).getDerivedSchemaClass());\n+                schema, getAttributableUtil(kind).derivedSchemaClass());\n         schema = schemaDAO.save(schema);\n \n         return schemaDataBinder.getSchemaTO(schema);"},{"sha":"c860987d3339c5086e2f8374581dd902e18fd15d","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -455,9 +455,6 @@ public UserTO create(HttpServletResponse response,\n         user.setWorkflowId(workflowId);\n         user = syncopeUserDAO.save(user);\n \n-        // Check if attributes with unique schema have unique values\n-        userDataBinder.checkUniqueness(user);\n-\n         // Now that user is created locally, let's propagate\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);\n@@ -516,9 +513,6 @@ public UserTO update(@RequestBody UserMod userMod,\n                 userDataBinder.update(user, userMod);\n         user = syncopeUserDAO.save(user);\n \n-        // Check if attributes with unique schema have unique values\n-        userDataBinder.checkUniqueness(user);\n-\n         // Now that user is update locally, let's propagate\n         Set<String> syncResourceNames =\n                 getSyncResourceNames(user, syncRoles, syncResources);"},{"sha":"031c08d597cf9c427653646ff2cea7ef0b543cc9","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":49,"deletions":94,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -28,18 +28,17 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.syncope.client.mod.AbstractAttributableMod;\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.to.AbstractAttributableTO;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n@@ -106,28 +105,23 @@ private <T extends AbstractSchema> T getSchema(\n         // safely ignore invalid schemas from AttributeTO\n         // see http://code.google.com/p/syncope/issues/detail?id=17\n         if (schema == null) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Ignoring invalid schema \" + schemaName);\n-            }\n+            LOG.debug(\"Ignoring invalid schema {}\", schemaName);\n         } else if (schema.isVirtual() || schema.isReadonly()) {\n             schema = null;\n \n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Ignoring virtual or readonly schema \" + schemaName);\n-            }\n+            LOG.debug(\"Ignoring virtual or readonly schema {}\", schemaName);\n         }\n \n         return schema;\n     }\n \n-    private <T extends AbstractDerivedSchema> T getDerivedSchema(\n-            final String derivedSchemaName, final Class<T> reference) {\n+    private <T extends AbstractDerSchema> T getDerivedSchema(\n+            final String derSchemaName, final Class<T> reference) {\n \n-        T derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n+        T derivedSchema = derivedSchemaDAO.find(derSchemaName, reference);\n \n-        if (derivedSchema == null && LOG.isDebugEnabled()) {\n-            LOG.debug(\"Ignoring invalid derivedschema \"\n-                    + derivedSchemaName);\n+        if (derivedSchema == null) {\n+            LOG.debug(\"Ignoring invalid derivedschema {}\", derSchemaName);\n         }\n \n         return derivedSchema;\n@@ -143,11 +137,11 @@ private TargetResource getResource(final String resourceName) {\n         return resource;\n     }\n \n-    private void fillAttribute(List<String> values,\n-            AttributableUtil attributableUtil,\n-            AbstractSchema schema,\n-            AbstractAttribute attribute,\n-            SyncopeClientException invalidValues) {\n+    private void fillAttribute(final List<String> values,\n+            final AttributableUtil attributableUtil,\n+            final AbstractSchema schema,\n+            final AbstractAttr attribute,\n+            final SyncopeClientException invalidValues) {\n \n         // if the schema is multivalue, all values are considered for\n         // addition, otherwise only the fist one - if provided - is\n@@ -159,14 +153,12 @@ private void fillAttribute(List<String> values,\n                 : Collections.singletonList(\n                 values.iterator().next()));\n \n-        AbstractAttributeValue attributeValue;\n         for (String value : valuesProvided) {\n             if (value == null || value.isEmpty()) {\n                 LOG.debug(\"Null value for {}, ignoring\", schema.getName());\n             } else {\n                 try {\n-                    attributeValue = attribute.addValue(value,\n-                            attributableUtil);\n+                    attribute.addValue(value, attributableUtil);\n                 } catch (ValidationException e) {\n                     LOG.error(\"Invalid value for attribute \"\n                             + schema.getName() + \": \" + value, e);\n@@ -179,13 +171,13 @@ private void fillAttribute(List<String> values,\n \n     private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n             final String mandatoryCondition,\n-            final List<? extends AbstractAttribute> attributes,\n+            final List<? extends AbstractAttr> attributes,\n             final Class<T> referenceSchema) {\n \n         JexlContext jexlContext = new MapContext();\n \n         List<T> allSchemas = schemaDAO.findAll(referenceSchema);\n-        for (AbstractAttribute attribute : attributes) {\n+        for (AbstractAttr attribute : attributes) {\n             jexlContext.set(attribute.getSchema().getName(),\n                     attribute.getValues().isEmpty()\n                     ? null\n@@ -215,7 +207,7 @@ private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n \n     private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n             final String resourceName,\n-            final List<? extends AbstractAttribute> attributes,\n+            final List<? extends AbstractAttr> attributes,\n             final String schemaName,\n             final Class<T> referenceSchema) {\n \n@@ -240,7 +232,7 @@ private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n \n     private <T extends AbstractSchema> boolean evaluateMandatoryCondition(\n             final Set<TargetResource> resources,\n-            final List<? extends AbstractAttribute> attributes,\n+            final List<? extends AbstractAttr> attributes,\n             final String schemaName,\n             final Class<T> referenceSchema) {\n \n@@ -317,35 +309,33 @@ protected ResourceOperations fill(\n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n \n-        AbstractSchema schema = null;\n-        AbstractAttribute attribute = null;\n-        AbstractDerivedSchema derivedSchema = null;\n-        AbstractDerivedAttribute derivedAttribute = null;\n+        AbstractSchema schema;\n+        AbstractAttr attribute;\n+        AbstractDerSchema derivedSchema;\n+        AbstractDerAttr derivedAttribute;\n \n         // 1. attributes to be removed\n         for (String attributeToBeRemoved :\n                 attributableMod.getAttributesToBeRemoved()) {\n \n             schema = getSchema(\n-                    attributeToBeRemoved, attributableUtil.getSchemaClass());\n+                    attributeToBeRemoved, attributableUtil.schemaClass());\n \n             if (schema != null) {\n                 attribute = attributable.getAttribute(schema.getName());\n                 if (attribute == null) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"No attribute found for schema \" + schema);\n-                    }\n+                    LOG.debug(\"No attribute found for schema {}\", schema);\n                 } else {\n                     attributable.removeAttribute(attribute);\n \n                     attributeDAO.delete(attribute.getId(),\n-                            attributableUtil.getAttributeClass());\n+                            attributableUtil.attributeClass());\n                 }\n \n                 for (SchemaMapping mapping : resourceDAO.getMappings(\n                         schema.getName(),\n                         SchemaType.byClass(\n-                        attributableUtil.getSchemaClass()))) {\n+                        attributableUtil.schemaClass()))) {\n \n                     if (mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n@@ -365,23 +355,21 @@ protected ResourceOperations fill(\n             }\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"About attributes to be removed:\\n\" + resourceOperations);\n-        }\n+        LOG.debug(\"About attributes to be removed:\\n{}\", resourceOperations);\n \n         // 2. attributes to be updated\n         Set<Long> valuesToBeRemoved;\n         for (AttributeMod attributeMod :\n                 attributableMod.getAttributesToBeUpdated()) {\n \n             schema = getSchema(attributeMod.getSchema(),\n-                    attributableUtil.getSchemaClass());\n+                    attributableUtil.schemaClass());\n \n             if (schema != null) {\n                 for (SchemaMapping mapping : resourceDAO.getMappings(\n                         schema.getName(),\n                         SchemaType.byClass(\n-                        attributableUtil.getSchemaClass()))) {\n+                        attributableUtil.schemaClass()))) {\n \n                     if (mapping.getResource() != null\n                             && resources.contains(mapping.getResource())) {\n@@ -405,15 +393,15 @@ protected ResourceOperations fill(\n                 for (String valueToBeRemoved :\n                         attributeMod.getValuesToBeRemoved()) {\n \n-                    for (AbstractAttributeValue mav : attribute.getValues()) {\n+                    for (AbstractAttrValue mav : attribute.getValues()) {\n                         if (valueToBeRemoved.equals(mav.getValueAsString())) {\n                             valuesToBeRemoved.add(mav.getId());\n                         }\n                     }\n                 }\n                 for (Long attributeValueId : valuesToBeRemoved) {\n                     attributeValueDAO.delete(attributeValueId,\n-                            attributableUtil.getAttributeValueClass());\n+                            attributableUtil.attributeValueClass());\n                 }\n \n                 // 1.2 add values\n@@ -432,7 +420,7 @@ protected ResourceOperations fill(\n         }\n \n         SyncopeClientException requiredValuesMissing =\n-                checkMandatory(attributableUtil.getSchemaClass(), attributable);\n+                checkMandatory(attributableUtil.schemaClass(), attributable);\n         if (!requiredValuesMissing.getElements().isEmpty()) {\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n@@ -444,7 +432,7 @@ protected ResourceOperations fill(\n                 attributableMod.getDerivedAttributesToBeRemoved()) {\n \n             derivedSchema = getDerivedSchema(derivedAttributeToBeRemoved,\n-                    attributableUtil.getDerivedSchemaClass());\n+                    attributableUtil.derivedSchemaClass());\n             if (derivedSchema != null) {\n                 for (SchemaMapping mapping : derivedSchema.getMappings()) {\n                     if (mapping.getResource() != null\n@@ -473,7 +461,7 @@ protected ResourceOperations fill(\n                 attributableMod.getDerivedAttributesToBeAdded()) {\n \n             derivedSchema = getDerivedSchema(derivedAttributeToBeAdded,\n-                    attributableUtil.getDerivedSchemaClass());\n+                    attributableUtil.derivedSchemaClass());\n             if (derivedSchema != null) {\n                 for (SchemaMapping mapping : derivedSchema.getMappings()) {\n                     if (mapping.getResource() != null\n@@ -557,15 +545,16 @@ protected void fill(AbstractAttributable attributable,\n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n \n-        AbstractSchema schema = null;\n-        AbstractAttribute attribute = null;\n+        AbstractSchema schema;\n+        AbstractAttr attribute;\n+\n         // Only consider attributeTO with values\n         for (AttributeTO attributeTO : attributableTO.getAttributes()) {\n             if (attributeTO.getValues() != null\n                     && !attributeTO.getValues().isEmpty()) {\n \n                 schema = getSchema(attributeTO.getSchema(),\n-                        attributableUtil.getSchemaClass());\n+                        attributableUtil.schemaClass());\n \n                 if (schema != null) {\n                     attribute = attributable.getAttribute(schema.getName());\n@@ -593,18 +582,18 @@ protected void fill(AbstractAttributable attributable,\n         }\n \n         SyncopeClientException requiredValuesMissing =\n-                checkMandatory(attributableUtil.getSchemaClass(), attributable);\n+                checkMandatory(attributableUtil.schemaClass(), attributable);\n         if (!requiredValuesMissing.getElements().isEmpty()) {\n             compositeErrorException.addException(requiredValuesMissing);\n         }\n \n         // 2. derived attributes\n-        AbstractDerivedSchema derivedSchema;\n-        AbstractDerivedAttribute derivedAttribute;\n+        AbstractDerSchema derivedSchema;\n+        AbstractDerAttr derivedAttribute;\n         for (AttributeTO attributeTO : attributableTO.getDerivedAttributes()) {\n \n             derivedSchema = getDerivedSchema(attributeTO.getSchema(),\n-                    attributableUtil.getDerivedSchemaClass());\n+                    attributableUtil.derivedSchemaClass());\n \n             if (derivedSchema != null) {\n                 derivedAttribute = attributableUtil.newDerivedAttribute();\n@@ -640,12 +629,12 @@ protected void fill(AbstractAttributable attributable,\n \n     protected void fillTO(\n             AbstractAttributableTO abstractAttributableTO,\n-            Collection<? extends AbstractAttribute> attributes,\n-            Collection<? extends AbstractDerivedAttribute> derivedAttributes,\n+            Collection<? extends AbstractAttr> attributes,\n+            Collection<? extends AbstractDerAttr> derivedAttributes,\n             Collection<TargetResource> resources) {\n \n         AttributeTO attributeTO;\n-        for (AbstractAttribute attribute : attributes) {\n+        for (AbstractAttr attribute : attributes) {\n             attributeTO = new AttributeTO();\n             attributeTO.setSchema(attribute.getSchema().getName());\n             attributeTO.setValues(attribute.getValuesAsStrings());\n@@ -654,7 +643,7 @@ protected void fillTO(\n             abstractAttributableTO.addAttribute(attributeTO);\n         }\n \n-        for (AbstractDerivedAttribute derivedAttribute : derivedAttributes) {\n+        for (AbstractDerAttr derivedAttribute : derivedAttributes) {\n \n             attributeTO = new AttributeTO();\n             attributeTO.setSchema(\n@@ -669,38 +658,4 @@ protected void fillTO(\n             abstractAttributableTO.addResource(resource.getName());\n         }\n     }\n-\n-    public void checkUniqueness(AbstractAttributable attributable)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        SyncopeClientException invalidUniques = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidUniques);\n-\n-        for (AbstractAttribute attribute : attributable.getAttributes()) {\n-            for (AbstractAttributeValue attributeValue :\n-                    attribute.getValues()) {\n-\n-                if (attribute.getSchema().isUniquevalue()\n-                        && attributeValueDAO.nonUniqueAttributeValue(\n-                        attributeValue)) {\n-\n-                    LOG.error(\"Unique value schema \"\n-                            + attribute.getSchema().getName()\n-                            + \" with no unique value: \"\n-                            + attributeValue.getValueAsString());\n-\n-                    invalidUniques.addElement(attribute.getSchema().getName());\n-                }\n-            }\n-        }\n-\n-        if (!invalidUniques.getElements().isEmpty()) {\n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-            scce.addException(invalidUniques);\n-\n-            throw scce;\n-        }\n-    }\n }"},{"sha":"953225dd0ee2645b27ee160646b680ae12db46b1","filename":"core/src/main/java/org/syncope/core/rest/data/AttributableUtil.java","status":"modified","additions":79,"deletions":58,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -14,43 +14,46 @@\n  */\n package org.syncope.core.rest.data;\n \n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.membership.MembershipAttribute;\n-import org.syncope.core.persistence.beans.membership.MembershipAttributeValue;\n-import org.syncope.core.persistence.beans.membership.MembershipDerivedAttribute;\n-import org.syncope.core.persistence.beans.membership.MembershipDerivedSchema;\n-import org.syncope.core.persistence.beans.membership.MembershipSchema;\n-import org.syncope.core.persistence.beans.role.RoleAttribute;\n-import org.syncope.core.persistence.beans.role.RoleAttributeValue;\n-import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n-import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.membership.MAttr;\n+import org.syncope.core.persistence.beans.membership.MAttrUniqueValue;\n+import org.syncope.core.persistence.beans.membership.MAttrValue;\n+import org.syncope.core.persistence.beans.membership.MDerAttr;\n+import org.syncope.core.persistence.beans.membership.MDerSchema;\n+import org.syncope.core.persistence.beans.membership.MSchema;\n+import org.syncope.core.persistence.beans.role.RAttr;\n+import org.syncope.core.persistence.beans.role.RAttrUniqueValue;\n+import org.syncope.core.persistence.beans.role.RAttrValue;\n+import org.syncope.core.persistence.beans.role.RDerAttr;\n+import org.syncope.core.persistence.beans.role.RDerSchema;\n+import org.syncope.core.persistence.beans.role.RSchema;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.UDerAttr;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n \n public enum AttributableUtil {\n \n     USER, ROLE, MEMBERSHIP;\n \n-    public <T extends AbstractSchema> Class<T> getSchemaClass() {\n+    public <T extends AbstractSchema> Class<T> schemaClass() {\n         Class result = null;\n \n         switch (this) {\n             case USER:\n-                result = UserSchema.class;\n+                result = USchema.class;\n                 break;\n             case ROLE:\n-                result = RoleSchema.class;\n+                result = RSchema.class;\n                 break;\n             case MEMBERSHIP:\n-                result = MembershipSchema.class;\n+                result = MSchema.class;\n                 break;\n         }\n \n@@ -62,157 +65,175 @@ public <T extends AbstractSchema> T newSchema() {\n \n         switch (this) {\n             case USER:\n-                result = (T) new UserSchema();\n+                result = (T) new USchema();\n                 break;\n             case ROLE:\n-                result = (T) new RoleSchema();\n+                result = (T) new RSchema();\n                 break;\n             case MEMBERSHIP:\n-                result = (T) new MembershipSchema();\n+                result = (T) new MSchema();\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractDerivedSchema> Class<T> getDerivedSchemaClass() {\n+    public <T extends AbstractDerSchema> Class<T> derivedSchemaClass() {\n         Class result = null;\n \n         switch (this) {\n             case USER:\n-                result = UserDerivedSchema.class;\n+                result = UDerSchema.class;\n                 break;\n             case ROLE:\n-                result = RoleDerivedSchema.class;\n+                result = RDerSchema.class;\n                 break;\n             case MEMBERSHIP:\n-                result = MembershipDerivedSchema.class;\n+                result = MDerSchema.class;\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractDerivedSchema> T newDerivedSchema() {\n+    public <T extends AbstractDerSchema> T newDerivedSchema() {\n         T result = null;\n \n         switch (this) {\n             case USER:\n-                result = (T) new UserDerivedSchema();\n+                result = (T) new UDerSchema();\n                 break;\n             case ROLE:\n-                result = (T) new RoleDerivedSchema();\n+                result = (T) new RDerSchema();\n                 break;\n             case MEMBERSHIP:\n-                result = (T) new MembershipDerivedSchema();\n+                result = (T) new MDerSchema();\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractAttribute> Class<T> getAttributeClass() {\n+    public <T extends AbstractAttr> Class<T> attributeClass() {\n         Class result = null;\n \n         switch (this) {\n             case USER:\n-                result = UserAttribute.class;\n+                result = UAttr.class;\n                 break;\n             case ROLE:\n-                result = RoleAttribute.class;\n+                result = RAttr.class;\n                 break;\n             case MEMBERSHIP:\n-                result = MembershipAttribute.class;\n+                result = MAttr.class;\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractAttribute> T newAttribute() {\n+    public <T extends AbstractAttr> T newAttribute() {\n         T result = null;\n \n         switch (this) {\n             case USER:\n-                result = (T) new UserAttribute();\n+                result = (T) new UAttr();\n                 break;\n             case ROLE:\n-                result = (T) new RoleAttribute();\n+                result = (T) new RAttr();\n                 break;\n             case MEMBERSHIP:\n-                result = (T) new MembershipAttribute();\n+                result = (T) new MAttr();\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractDerivedAttribute> Class<T> getDerivedAttributeClass() {\n+    public <T extends AbstractDerAttr> Class<T> derivedAttributeClass() {\n         Class result = null;\n \n         switch (this) {\n             case USER:\n-                result = UserDerivedAttribute.class;\n+                result = UDerAttr.class;\n                 break;\n             case ROLE:\n-                result = RoleDerivedAttribute.class;\n+                result = RDerAttr.class;\n                 break;\n             case MEMBERSHIP:\n-                result = MembershipDerivedAttribute.class;\n+                result = MDerAttr.class;\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractDerivedAttribute> T newDerivedAttribute() {\n+    public <T extends AbstractDerAttr> T newDerivedAttribute() {\n         T result = null;\n \n         switch (this) {\n             case USER:\n-                result = (T) new UserDerivedAttribute();\n+                result = (T) new UDerAttr();\n                 break;\n             case ROLE:\n-                result = (T) new RoleDerivedAttribute();\n+                result = (T) new RDerAttr();\n                 break;\n             case MEMBERSHIP:\n-                result = (T) new MembershipDerivedAttribute();\n+                result = (T) new MDerAttr();\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractAttributeValue> Class<T> getAttributeValueClass() {\n+    public <T extends AbstractAttrValue> Class<T> attributeValueClass() {\n         Class result = null;\n \n         switch (this) {\n             case USER:\n-                result = UserAttributeValue.class;\n+                result = UAttrValue.class;\n                 break;\n             case ROLE:\n-                result = RoleAttributeValue.class;\n+                result = RAttrValue.class;\n                 break;\n             case MEMBERSHIP:\n-                result = MembershipAttributeValue.class;\n+                result = MAttrValue.class;\n                 break;\n         }\n \n         return result;\n     }\n \n-    public <T extends AbstractAttributeValue> T newAttributeValue() {\n+    public <T extends AbstractAttrValue> T newAttributeValue() {\n         T result = null;\n \n         switch (this) {\n             case USER:\n-                result = (T) new UserAttributeValue();\n+                result = (T) new UAttrValue();\n                 break;\n             case ROLE:\n-                result = (T) new RoleAttributeValue();\n+                result = (T) new RAttrValue();\n                 break;\n             case MEMBERSHIP:\n-                result = (T) new MembershipAttributeValue();\n+                result = (T) new MAttrValue();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractAttrValue> T newAttributeUniqueValue() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UAttrUniqueValue();\n+                break;\n+            case ROLE:\n+                result = (T) new RAttrUniqueValue();\n+                break;\n+            case MEMBERSHIP:\n+                result = (T) new MAttrUniqueValue();\n                 break;\n         }\n "},{"sha":"133e00613ddd51cbc8e5fc0fdd3660ed6fd7df5c","filename":"core/src/main/java/org/syncope/core/rest/data/ConfigurationDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -16,23 +16,23 @@\n \n import org.springframework.stereotype.Component;\n import org.syncope.client.to.ConfigurationTO;\n-import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n \n @Component\n public class ConfigurationDataBinder {\n \n-    public SyncopeConfiguration createSyncopeConfiguration(\n+    public SyncopeConf createSyncopeConfiguration(\n             final ConfigurationTO configurationTO) {\n \n-        SyncopeConfiguration syncopeConfiguration = new SyncopeConfiguration();\n+        SyncopeConf syncopeConfiguration = new SyncopeConf();\n         syncopeConfiguration.setConfKey(configurationTO.getConfKey());\n         syncopeConfiguration.setConfValue(configurationTO.getConfValue());\n \n         return syncopeConfiguration;\n     }\n \n     public ConfigurationTO getConfigurationTO(\n-            final SyncopeConfiguration syncopeConfiguration) {\n+            final SyncopeConf syncopeConfiguration) {\n \n         ConfigurationTO configurationTO = new ConfigurationTO();\n         configurationTO.setConfKey(syncopeConfiguration.getConfKey());"},{"sha":"055c06eee3940f2f0806e9bb2587f19af7ab505e","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -25,7 +25,7 @@\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -48,8 +48,8 @@ public class DerivedSchemaDataBinder {\n     @Autowired\n     private JexlEngine jexlEngine;\n \n-    private <T extends AbstractSchema> AbstractDerivedSchema populate(\n-            AbstractDerivedSchema derivedSchema,\n+    private <T extends AbstractSchema> AbstractDerSchema populate(\n+            AbstractDerSchema derivedSchema,\n             final DerivedSchemaTO derivedSchemaTO,\n             final Class<T> reference,\n             final SyncopeClientCompositeErrorException scce)\n@@ -99,27 +99,27 @@ private <T extends AbstractSchema> AbstractDerivedSchema populate(\n         return derivedSchema;\n     }\n \n-    public <T extends AbstractSchema> AbstractDerivedSchema create(\n+    public <T extends AbstractSchema> AbstractDerSchema create(\n             final DerivedSchemaTO derivedSchemaTO,\n-            AbstractDerivedSchema derivedSchema,\n+            AbstractDerSchema derivedSchema,\n             final Class<T> reference) {\n \n         return populate(derivedSchema, derivedSchemaTO, reference,\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST));\n     }\n \n-    public <K extends AbstractSchema> AbstractDerivedSchema update(\n+    public <K extends AbstractSchema> AbstractDerSchema update(\n             final DerivedSchemaTO derivedSchemaTO,\n-            AbstractDerivedSchema derivedSchema,\n+            AbstractDerSchema derivedSchema,\n             final Class<K> reference) {\n \n         return populate(derivedSchema, derivedSchemaTO, reference,\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST));\n     }\n \n-    public <T extends AbstractDerivedSchema> DerivedSchemaTO getDerivedSchemaTO(\n+    public <T extends AbstractDerSchema> DerivedSchemaTO getDerivedSchemaTO(\n             final T derivedSchema) {\n \n         DerivedSchemaTO derivedSchemaTO = new DerivedSchemaTO();"},{"sha":"db0afd3279949a5a6185b5abd8e5aa7cff10119c","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -26,9 +26,9 @@\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -51,7 +51,7 @@ public class SchemaDataBinder {\n     @Autowired\n     private JexlEngine jexlEngine;\n \n-    private <T extends AbstractDerivedSchema> AbstractSchema populate(\n+    private <T extends AbstractDerSchema> AbstractSchema populate(\n             final AbstractSchema schema,\n             final SchemaTO schemaTO,\n             final Class<T> derivedReference,\n@@ -88,7 +88,7 @@ private <T extends AbstractDerivedSchema> AbstractSchema populate(\n \n         BeanUtils.copyProperties(schemaTO, schema, ignoreSchemaProperties);\n \n-        AbstractDerivedSchema abstractDerivedSchema;\n+        AbstractDerSchema abstractDerivedSchema;\n         for (String derivedSchema : schemaTO.getDerivedSchemas()) {\n             abstractDerivedSchema =\n                     derivedSchemaDAO.find(derivedSchema, derivedReference);\n@@ -102,7 +102,7 @@ private <T extends AbstractDerivedSchema> AbstractSchema populate(\n         return schema;\n     }\n \n-    public <T extends AbstractDerivedSchema> AbstractSchema create(\n+    public <T extends AbstractDerSchema> AbstractSchema create(\n             final SchemaTO schemaTO,\n             AbstractSchema schema,\n             final Class<T> derivedReference)\n@@ -113,7 +113,7 @@ public <T extends AbstractDerivedSchema> AbstractSchema create(\n                 HttpStatus.BAD_REQUEST));\n     }\n \n-    public <T extends AbstractDerivedSchema> AbstractSchema update(\n+    public <T extends AbstractDerSchema> AbstractSchema update(\n             final SchemaTO schemaTO,\n             AbstractSchema schema,\n             final Class<T> derivedReference)\n@@ -126,14 +126,14 @@ public <T extends AbstractDerivedSchema> AbstractSchema update(\n         schema = populate(schema, schemaTO, derivedReference, scce);\n \n         boolean validationExceptionFound = false;\n-        AbstractAttribute attribute;\n-        AbstractAttributeValue attributeValue;\n-        for (Iterator<? extends AbstractAttribute> aItor =\n+        AbstractAttr attribute;\n+        AbstractAttrValue attributeValue;\n+        for (Iterator<? extends AbstractAttr> aItor =\n                 schema.getAttributes().iterator();\n                 aItor.hasNext() && !validationExceptionFound;) {\n \n             attribute = aItor.next();\n-            for (Iterator<? extends AbstractAttributeValue> avItor =\n+            for (Iterator<? extends AbstractAttrValue> avItor =\n                     attribute.getValues().iterator();\n                     avItor.hasNext() && !validationExceptionFound;) {\n \n@@ -164,7 +164,7 @@ public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema) {\n         SchemaTO schemaTO = new SchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO, ignoreSchemaProperties);\n \n-        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n+        for (AbstractDerSchema derivedSchema : schema.getDerivedSchemas()) {\n             schemaTO.addDerivedSchema(derivedSchema.getName());\n         }\n         schemaTO.setAttributes(schema.getAttributes().size());"},{"sha":"f8f650a6f80d164fef5b78e31a70c3f20866df50","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -30,12 +30,12 @@\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.membership.Membership;\n-import org.syncope.core.persistence.beans.membership.MembershipAttribute;\n-import org.syncope.core.persistence.beans.membership.MembershipDerivedAttribute;\n+import org.syncope.core.persistence.beans.membership.MAttr;\n+import org.syncope.core.persistence.beans.membership.MDerAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n@@ -166,26 +166,26 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n \n                     Set<Long> attributeIds = new HashSet<Long>(\n                             membership.getAttributes().size());\n-                    for (AbstractAttribute attribute :\n+                    for (AbstractAttr attribute :\n                             membership.getAttributes()) {\n \n                         attributeIds.add(attribute.getId());\n                     }\n                     for (Long attributeId : attributeIds) {\n                         attributeDAO.delete(attributeId,\n-                                MembershipAttribute.class);\n+                                MAttr.class);\n                     }\n \n                     Set<Long> derivedAttributeIds = new HashSet<Long>(\n                             membership.getDerivedAttributes().size());\n-                    for (AbstractDerivedAttribute derivedAttribute :\n+                    for (AbstractDerAttr derivedAttribute :\n                             membership.getDerivedAttributes()) {\n \n                         derivedAttributeIds.add(derivedAttribute.getId());\n                     }\n                     for (Long derivedAttributeId : derivedAttributeIds) {\n                         derivedAttributeDAO.delete(derivedAttributeId,\n-                                MembershipDerivedAttribute.class);\n+                                MDerAttr.class);\n                     }\n                 } else {\n                     user.removeMembership(membership);"},{"sha":"2787e82340070e41e792065dfe209c6f86a0b78c","filename":"core/src/main/java/org/syncope/core/workflow/AbstractStoreAttributeValue.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractStoreAttributeValue.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,7 +18,7 @@\n import com.opensymphony.workflow.WorkflowException;\n import java.util.Map;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -31,7 +31,7 @@ abstract class AbstractStoreAttributeValue extends OSWorkflowComponent\n \n     protected AttributableUtil attributableUtil;\n \n-    protected AbstractAttribute getAttribute(Map transientVars, Map args)\n+    protected AbstractAttr getAttribute(Map transientVars, Map args)\n             throws WorkflowException {\n \n         String schemaName = (String) args.get(\"schema\");\n@@ -68,12 +68,12 @@ protected AbstractAttribute getAttribute(Map transientVars, Map args)\n \n         SchemaDAO schemaDAO = (SchemaDAO) context.getBean(\"schemaDAOImpl\");\n         AbstractSchema schema = schemaDAO.find(schemaName,\n-                attributableUtil.getSchemaClass());\n+                attributableUtil.schemaClass());\n         if (schema == null) {\n             throw new WorkflowException(\"Invalid schema: \" + schemaName);\n         }\n \n-        AbstractAttribute attribute = attributable.getAttribute(schemaName);\n+        AbstractAttr attribute = attributable.getAttribute(schemaName);\n         if (attribute == null) {\n             attribute = attributableUtil.newAttribute();\n             attribute.setSchema(schema);"},{"sha":"d7ebdceaa55536e73c2dbfb8ee0e44d12519e32f","filename":"core/src/main/java/org/syncope/core/workflow/EmptyUser.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -22,12 +22,12 @@\n import java.util.Map;\n import java.util.Set;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n import org.syncope.core.persistence.dao.MembershipDAO;\n@@ -46,24 +46,24 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n         final AttributeDAO attributeDAO =\n                 (AttributeDAO) context.getBean(\"attributeDAOImpl\");\n         final Map<Long, String> attrsToRemove = new HashMap<Long, String>();\n-        for (AbstractAttribute attribute : user.getAttributes()) {\n+        for (AbstractAttr attribute : user.getAttributes()) {\n             attrsToRemove.put(attribute.getId(),\n                     attribute.getSchema().getName());\n         }\n         for (Long attrId : attrsToRemove.keySet()) {\n-            attributeDAO.delete(attrId, UserAttribute.class);\n+            attributeDAO.delete(attrId, UAttr.class);\n             user.removeAttribute(\n                     user.getAttribute(attrsToRemove.get(attrId)));\n         }\n \n         final DerivedAttributeDAO derivedAttributeDAO =\n                 (DerivedAttributeDAO) context.getBean(\n                 \"derivedAttributeDAOImpl\");\n-        for (AbstractDerivedAttribute derivedAttribute :\n+        for (AbstractDerAttr derivedAttribute :\n                 user.getDerivedAttributes()) {\n \n             derivedAttributeDAO.delete(derivedAttribute.getId(),\n-                    UserDerivedAttribute.class);\n+                    UDerAttr.class);\n         }\n         user.getDerivedAttributes().clear();\n "},{"sha":"74b84bb52e3e0c20899926ffc3d0958f00593ca2","filename":"core/src/main/java/org/syncope/core/workflow/StoreDate.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreDate.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -18,18 +18,18 @@\n import com.opensymphony.workflow.WorkflowException;\n import java.util.Date;\n import java.util.Map;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public class StoreDate extends AbstractStoreAttributeValue {\n \n     @Override\n     public void execute(Map transientVars, Map args, PropertySet ps)\n             throws WorkflowException {\n \n-        AbstractAttribute attribute = getAttribute(transientVars, args);\n+        AbstractAttr attribute = getAttribute(transientVars, args);\n \n-        AbstractAttributeValue date = attributableUtil.newAttributeValue();\n+        AbstractAttrValue date = attributableUtil.newAttributeValue();\n         date.setDateValue(new Date());\n         date.setAttribute(attribute);\n         if (!attribute.getSchema().isMultivalue()) {"},{"sha":"d4f8249b0b71b50de8db0a51efa87de96db1d6e8","filename":"core/src/main/java/org/syncope/core/workflow/StoreText.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreText.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -17,23 +17,23 @@\n import com.opensymphony.module.propertyset.PropertySet;\n import com.opensymphony.workflow.WorkflowException;\n import java.util.Map;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n+import org.syncope.core.persistence.beans.AbstractAttrValue;\n \n public class StoreText extends AbstractStoreAttributeValue {\n \n     @Override\n     public void execute(Map transientVars, Map args, PropertySet ps)\n             throws WorkflowException {\n \n-        AbstractAttribute attribute = getAttribute(transientVars, args);\n+        AbstractAttr attribute = getAttribute(transientVars, args);\n \n         String text = (String) transientVars.get(args.get(\"schema\"));\n         if (text == null) {\n             throw new WorkflowException(\"Missing text\");\n         }\n \n-        AbstractAttributeValue textAttributeValue =\n+        AbstractAttrValue textAttributeValue =\n                 attributableUtil.newAttributeValue();\n         textAttributeValue.setStringValue(text);\n         textAttributeValue.setAttribute(attribute);"},{"sha":"318b80473ffb7f5fb5a310229a6140371901d718","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttributeTest.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -20,8 +20,8 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.rest.data.AttributableUtil;\n@@ -37,28 +37,28 @@ public class AttributeTest extends AbstractTest {\n \n     @Test\n     public final void findAll() {\n-        List<UserAttribute> list = attributeDAO.findAll(UserAttribute.class);\n+        List<UAttr> list = attributeDAO.findAll(UAttr.class);\n         assertEquals(\"did not get expected number of attributes \",\n                 6, list.size());\n     }\n \n     @Test\n     public final void findById() {\n-        UserAttribute attribute = attributeDAO.find(100L, UserAttribute.class);\n+        UAttr attribute = attributeDAO.find(100L, UAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n-        attribute = attributeDAO.find(200L, UserAttribute.class);\n+        attribute = attributeDAO.find(200L, UAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n     }\n \n     @Test\n     public final void save()\n             throws ClassNotFoundException {\n-        UserSchema emailSchema = userSchemaDAO.find(\"email\", UserSchema.class);\n+        USchema emailSchema = userSchemaDAO.find(\"email\", USchema.class);\n         assertNotNull(emailSchema);\n \n-        UserAttribute attribute = new UserAttribute();\n+        UAttr attribute = new UAttr();\n         attribute.setSchema(emailSchema);\n \n         Exception thrown = null;\n@@ -80,22 +80,22 @@ public final void save()\n \n         attribute = attributeDAO.save(attribute);\n \n-        UserAttribute actual = attributeDAO.find(attribute.getId(),\n-                UserAttribute.class);\n+        UAttr actual = attributeDAO.find(attribute.getId(),\n+                UAttr.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attribute, actual);\n     }\n \n     @Test\n     public final void delete() {\n-        UserAttribute attribute = attributeDAO.find(200L, UserAttribute.class);\n+        UAttr attribute = attributeDAO.find(200L, UAttr.class);\n         String attributeSchemaName =\n                 attribute.getSchema().getName();\n \n-        attributeDAO.delete(attribute.getId(), UserAttribute.class);\n+        attributeDAO.delete(attribute.getId(), UAttr.class);\n \n-        UserSchema attributeSchema =\n-                userSchemaDAO.find(attributeSchemaName, UserSchema.class);\n+        USchema attributeSchema =\n+                userSchemaDAO.find(attributeSchemaName, USchema.class);\n         assertNotNull(\"user attribute schema deleted when deleting values\",\n                 attributeSchema);\n     }"},{"sha":"8e74e413845f590ebadb4d84aeb8af96c23fdcc5","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerivedAttributeTest.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -21,9 +21,9 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.UDerAttr;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n@@ -41,45 +41,45 @@ public class DerivedAttributeTest extends AbstractTest {\n \n     @Test\n     public final void findAll() {\n-        List<UserDerivedAttribute> list = derivedAttributeDAO.findAll(\n-                UserDerivedAttribute.class);\n+        List<UDerAttr> list = derivedAttributeDAO.findAll(\n+                UDerAttr.class);\n         assertEquals(\"did not get expected number of derived attributes \",\n                 1, list.size());\n     }\n \n     @Test\n     public final void findById() {\n-        UserDerivedAttribute attribute = derivedAttributeDAO.find(1000L,\n-                UserDerivedAttribute.class);\n+        UDerAttr attribute = derivedAttributeDAO.find(1000L,\n+                UDerAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n     }\n \n     @Test\n     public final void save() throws ClassNotFoundException {\n-        UserDerivedSchema cnSchema =\n-                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+        UDerSchema cnSchema =\n+                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNotNull(cnSchema);\n \n         SyncopeUser owner = syncopeUserDAO.find(3L);\n         assertNotNull(\"did not get expected user\", owner);\n \n-        UserDerivedAttribute derivedAttribute = new UserDerivedAttribute();\n+        UDerAttr derivedAttribute = new UDerAttr();\n         derivedAttribute.setOwner(owner);\n         derivedAttribute.setDerivedSchema(cnSchema);\n \n         derivedAttribute = derivedAttributeDAO.save(derivedAttribute);\n \n-        UserDerivedAttribute actual = derivedAttributeDAO.find(\n-                derivedAttribute.getId(), UserDerivedAttribute.class);\n+        UDerAttr actual = derivedAttributeDAO.find(\n+                derivedAttribute.getId(), UDerAttr.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(derivedAttribute, actual);\n \n-        UserAttributeValue firstnameAttribute =\n-                (UserAttributeValue) owner.getAttribute(\n+        UAttrValue firstnameAttribute =\n+                (UAttrValue) owner.getAttribute(\n                 \"firstname\").getValues().iterator().next();\n-        UserAttributeValue surnameAttribute =\n-                (UserAttributeValue) owner.getAttribute(\n+        UAttrValue surnameAttribute =\n+                (UAttrValue) owner.getAttribute(\n                 \"surname\").getValues().iterator().next();\n         \n         assertEquals(surnameAttribute.getValue() + \", \"\n@@ -89,21 +89,21 @@ public final void save() throws ClassNotFoundException {\n \n     @Test\n     public final void delete() {\n-        UserDerivedAttribute attribute = derivedAttributeDAO.find(1000L,\n-                UserDerivedAttribute.class);\n+        UDerAttr attribute = derivedAttributeDAO.find(1000L,\n+                UDerAttr.class);\n         String attributeSchemaName =\n                 attribute.getDerivedSchema().getName();\n \n         derivedAttributeDAO.delete(attribute.getId(),\n-                UserDerivedAttribute.class);\n+                UDerAttr.class);\n \n-        UserDerivedAttribute actual = derivedAttributeDAO.find(1000L,\n-                UserDerivedAttribute.class);\n+        UDerAttr actual = derivedAttributeDAO.find(1000L,\n+                UDerAttr.class);\n         assertNull(\"delete did not work\", actual);\n \n-        UserDerivedSchema attributeSchema =\n+        UDerSchema attributeSchema =\n                 derivedSchemaDAO.find(attributeSchemaName,\n-                UserDerivedSchema.class);\n+                UDerSchema.class);\n         assertNotNull(\"user derived attribute schema deleted \"\n                 + \"when deleting values\",\n                 attributeSchema);"},{"sha":"099c11591602af29fe7bf0856bb4d036206c164c","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerivedSchemaTest.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -20,8 +20,8 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.AbstractTest;\n@@ -36,49 +36,49 @@ public class DerivedSchemaTest extends AbstractTest {\n \n     @Test\n     public final void findAll() {\n-        List<UserDerivedSchema> list =\n-                derivedSchemaDAO.findAll(UserDerivedSchema.class);\n+        List<UDerSchema> list =\n+                derivedSchemaDAO.findAll(UDerSchema.class);\n         assertEquals(\"did not get expected number of derived attribute schemas \",\n                 1, list.size());\n     }\n \n     @Test\n     public final void findByName() {\n-        UserDerivedSchema attributeSchema =\n-                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+        UDerSchema attributeSchema =\n+                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNotNull(\"did not find expected derived attribute schema\",\n                 attributeSchema);\n     }\n \n     @Test\n     public final void save() {\n-        UserDerivedSchema derivedAttributeSchema =\n-                new UserDerivedSchema();\n+        UDerSchema derivedAttributeSchema =\n+                new UDerSchema();\n         derivedAttributeSchema.setName(\"cn2\");\n         derivedAttributeSchema.setExpression(\"firstname surname\");\n         derivedAttributeSchema.addSchema(\n-                schemaDAO.find(\"firstname\", UserSchema.class));\n+                schemaDAO.find(\"firstname\", USchema.class));\n         derivedAttributeSchema.addSchema(\n-                schemaDAO.find(\"surname\", UserSchema.class));\n+                schemaDAO.find(\"surname\", USchema.class));\n \n         derivedSchemaDAO.save(derivedAttributeSchema);\n \n-        UserDerivedSchema actual =\n-                derivedSchemaDAO.find(\"cn2\", UserDerivedSchema.class);\n+        UDerSchema actual =\n+                derivedSchemaDAO.find(\"cn2\", UDerSchema.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(derivedAttributeSchema, actual);\n     }\n \n     @Test\n     public final void delete() {\n-        UserDerivedSchema attributeSchema =\n-                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+        UDerSchema attributeSchema =\n+                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n \n         derivedSchemaDAO.delete(attributeSchema.getName(),\n-                UserDerivedSchema.class);\n+                UDerSchema.class);\n \n-        UserDerivedSchema actual =\n-                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+        UDerSchema actual =\n+                derivedSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n }"},{"sha":"52b7ff12c02b2f9b6fe8304812f96cb64100a3d8","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -20,8 +20,8 @@\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.role.RSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.validation.MultiUniqueValueException;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.types.SchemaValueType;\n@@ -37,24 +37,24 @@ public class SchemaTest extends AbstractTest {\n \n     @Test\n     public final void findAll() {\n-        List<UserSchema> userList = schemaDAO.findAll(UserSchema.class);\n+        List<USchema> userList = schemaDAO.findAll(USchema.class);\n         assertEquals(9, userList.size());\n \n-        List<RoleSchema> roleList = schemaDAO.findAll(RoleSchema.class);\n+        List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(2, roleList.size());\n     }\n \n     @Test\n     public final void findByName() {\n-        UserSchema attributeSchema =\n-                schemaDAO.find(\"username\", UserSchema.class);\n+        USchema attributeSchema =\n+                schemaDAO.find(\"username\", USchema.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attributeSchema);\n     }\n \n     @Test\n     public final void save() {\n-        UserSchema attributeSchema = new UserSchema();\n+        USchema attributeSchema = new USchema();\n         attributeSchema.setName(\"secondaryEmail\");\n         attributeSchema.setType(SchemaValueType.String);\n         attributeSchema.setValidatorClass(\n@@ -68,19 +68,19 @@ public final void save() {\n             LOG.error(\"Unexpected exception\", e);\n         }\n \n-        UserSchema actual = schemaDAO.find(\"secondaryEmail\", UserSchema.class);\n+        USchema actual = schemaDAO.find(\"secondaryEmail\", USchema.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attributeSchema, actual);\n     }\n \n     @Test\n     public final void delete() {\n-        UserSchema schema =\n-                schemaDAO.find(\"username\", UserSchema.class);\n+        USchema schema =\n+                schemaDAO.find(\"username\", USchema.class);\n \n-        schemaDAO.delete(schema.getName(), UserSchema.class);\n+        schemaDAO.delete(schema.getName(), USchema.class);\n \n-        UserSchema actual = schemaDAO.find(\"username\", UserSchema.class);\n+        USchema actual = schemaDAO.find(\"username\", USchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n }"},{"sha":"b5350ab184068b4f0d40cb43f689bc63e6fca1b0","filename":"core/src/test/java/org/syncope/core/persistence/dao/SyncopeUserTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -25,9 +25,9 @@\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.AbstractTest;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.USchema;\n \n @Transactional\n public class SyncopeUserTest extends AbstractTest {\n@@ -61,13 +61,13 @@ public final void findAllByPageAndSize() {\n     }\n \n     public final void findByAttribute() {\n-        final UserSchema schema = new UserSchema();\n+        final USchema schema = new USchema();\n         schema.setName(\"username\");\n \n-        final UserAttribute username = new UserAttribute();\n+        final UAttr username = new UAttr();\n         username.setSchema(schema);\n \n-        final UserAttributeValue usernameValue = new UserAttributeValue();\n+        final UAttrValue usernameValue = new UAttrValue();\n         usernameValue.setStringValue(\"chicchiricco\");\n         usernameValue.setAttribute(username);\n \n@@ -80,13 +80,13 @@ public final void findByAttribute() {\n     }\n \n     public final void findByAttributePageAndSize() {\n-        final UserSchema schema = new UserSchema();\n+        final USchema schema = new USchema();\n         schema.setName(\"username\");\n \n-        final UserAttribute username = new UserAttribute();\n+        final UAttr username = new UAttr();\n         username.setSchema(schema);\n \n-        final UserAttributeValue usernameValue = new UserAttributeValue();\n+        final UAttrValue usernameValue = new UAttrValue();\n         usernameValue.setStringValue(\"chicchiricco\");\n         usernameValue.setAttribute(username);\n "},{"sha":"bfa225b4a6812b1642088b86194db24d9d9736ff","filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttributeTest.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributeTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -19,8 +19,8 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.AbstractTest;\n@@ -35,28 +35,28 @@ public class AttributeTest extends AbstractTest {\n \n     @Test\n     public final void deleteAttribute() {\n-        attributeDAO.delete(550L, UserAttribute.class);\n+        attributeDAO.delete(550L, UAttr.class);\n \n         attributeDAO.flush();\n \n-        assertNull(attributeDAO.find(550L, UserAttribute.class));\n-        assertNull(attributeValueDAO.find(22L, UserAttributeValue.class));\n+        assertNull(attributeDAO.find(550L, UAttr.class));\n+        assertNull(attributeValueDAO.find(22L, UAttrValue.class));\n     }\n \n     @Test\n     public final void deleteAttributeValue() {\n-        UserAttributeValue value =\n-                attributeValueDAO.find(20L, UserAttributeValue.class);\n+        UAttrValue value =\n+                attributeValueDAO.find(20L, UAttrValue.class);\n         int attributeValueNumber =\n                 value.getAttribute().getValues().size();\n \n-        attributeValueDAO.delete(20L, UserAttributeValue.class);\n+        attributeValueDAO.delete(20L, UAttrValue.class);\n \n         attributeValueDAO.flush();\n \n-        assertNull(attributeValueDAO.find(20L, UserAttributeValue.class));\n+        assertNull(attributeValueDAO.find(20L, UAttrValue.class));\n \n-        UserAttribute attribute = attributeDAO.find(200L, UserAttribute.class);\n+        UAttr attribute = attributeDAO.find(200L, UAttr.class);\n         assertEquals(attribute.getValues().size(),\n                 attributeValueNumber - 1);\n     }"},{"sha":"6c02731891b4559574df8756dee29537ea7e0563","filename":"core/src/test/java/org/syncope/core/persistence/relationships/DerivedSchemaTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -19,9 +19,9 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.UDerAttr;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n@@ -45,16 +45,16 @@ public class DerivedSchemaTest extends AbstractTest {\n \n     @Test\n     public final void test() {\n-        derivedSchemaDAO.delete(\"cn\", UserDerivedSchema.class);\n+        derivedSchemaDAO.delete(\"cn\", UDerSchema.class);\n \n         derivedSchemaDAO.flush();\n \n-        assertNull(derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class));\n-        assertNull(derivedAttributeDAO.find(1000L, UserDerivedAttribute.class));\n+        assertNull(derivedSchemaDAO.find(\"cn\", UDerSchema.class));\n+        assertNull(derivedAttributeDAO.find(1000L, UDerAttr.class));\n         assertTrue(schemaDAO.find(\"surname\",\n-                UserSchema.class).getDerivedSchemas().isEmpty());\n+                USchema.class).getDerivedSchemas().isEmpty());\n         assertTrue(schemaDAO.find(\"firstname\",\n-                UserSchema.class).getDerivedSchemas().isEmpty());\n+                USchema.class).getDerivedSchemas().isEmpty());\n         assertNull(syncopeUserDAO.find(3L).getDerivedAttribute(\"cn\"));\n     }\n }"},{"sha":"fb6248f23257b1e3de3764b94009f461644cc19e","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -30,7 +30,7 @@\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -67,7 +67,7 @@ public class ResourceTest extends AbstractTest {\n      */\n     @Test\n     public final void issue42() {\n-        UserSchema userId = schemaDAO.find(\"userId\", UserSchema.class);\n+        USchema userId = schemaDAO.find(\"userId\", USchema.class);\n         int beforeUserIdMappings = resourceDAO.getMappings(\n                 userId.getName(),\n                 SchemaType.UserSchema).size();\n@@ -99,7 +99,7 @@ public final void issue42() {\n         TargetResource actual = resourceDAO.find(\"resource-issue42\");\n         assertEquals(resource, actual);\n \n-        userId = schemaDAO.find(\"userId\", UserSchema.class);\n+        userId = schemaDAO.find(\"userId\", USchema.class);\n         int afterUserIdMappings = resourceDAO.getMappings(\n                 userId.getName(),\n                 SchemaType.UserSchema).size();\n@@ -122,8 +122,8 @@ public final void save()\n         connector.addResource(resource);\n \n         // search for the user schema\n-        UserSchema userSchema =\n-                schemaDAO.find(\"username\", UserSchema.class);\n+        USchema userSchema =\n+                schemaDAO.find(\"username\", USchema.class);\n \n         SchemaMapping mapping = null;\n "},{"sha":"c7e6a9214b22cc935504ce39b20b89c1a17c3db8","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -19,9 +19,9 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.role.RoleAttribute;\n-import org.syncope.core.persistence.beans.role.RoleAttributeValue;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.role.RAttr;\n+import org.syncope.core.persistence.beans.role.RAttrValue;\n+import org.syncope.core.persistence.beans.role.RSchema;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n@@ -56,9 +56,9 @@ public final void delete() {\n         assertNull(syncopeRoleDAO.find(2L));\n         assertTrue(entitlementDAO.find(\"base\").getRoles().size() == 1);\n         assertTrue(syncopeUserDAO.find(2L).getRoles().size() == 1);\n-        assertNull(attributeDAO.find(700L, RoleAttribute.class));\n-        assertNull(attributeValueDAO.find(41L, RoleAttributeValue.class));\n-        assertNotNull(schemaDAO.find(\"icon\", RoleSchema.class));\n+        assertNull(attributeDAO.find(700L, RAttr.class));\n+        assertNull(attributeValueDAO.find(41L, RAttrValue.class));\n+        assertNotNull(schemaDAO.find(\"icon\", RSchema.class));\n     }\n \n     @Test"},{"sha":"5e8c17ca2976ad67e730dd8f58c57f52d8969b96","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -21,9 +21,9 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UDerSchema;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -53,7 +53,7 @@ public class SchemaTest extends AbstractTest {\n     @Test\n     public final void test1() {\n         // search for user schema username\n-        UserSchema schema = schemaDAO.find(\"username\", UserSchema.class);\n+        USchema schema = schemaDAO.find(\"username\", USchema.class);\n \n         assertNotNull(schema);\n \n@@ -64,12 +64,12 @@ public final void test1() {\n         assertFalse(mappings.isEmpty());\n \n         // delete user schema username\n-        schemaDAO.delete(\"username\", UserSchema.class);\n+        schemaDAO.delete(\"username\", USchema.class);\n \n         schemaDAO.flush();\n \n         // check for schema deletion\n-        schema = schemaDAO.find(\"username\", UserSchema.class);\n+        schema = schemaDAO.find(\"username\", USchema.class);\n \n         assertNull(schema);\n \n@@ -78,8 +78,8 @@ public final void test1() {\n                 SchemaType.UserSchema);\n         assertTrue(mappings.isEmpty());\n \n-        assertNull(attributeDAO.find(100L, UserAttribute.class));\n-        assertNull(attributeDAO.find(300L, UserAttribute.class));\n+        assertNull(attributeDAO.find(100L, UAttr.class));\n+        assertNull(attributeDAO.find(300L, UAttr.class));\n         assertNull(syncopeUserDAO.find(1L).getAttribute(\"username\"));\n         assertNull(syncopeUserDAO.find(3L).getAttribute(\"username\"));\n     }\n@@ -88,7 +88,7 @@ public final void test1() {\n     public void test2() {\n \n         // search for user schema username\n-        UserSchema schema = schemaDAO.find(\"surname\", UserSchema.class);\n+        USchema schema = schemaDAO.find(\"surname\", USchema.class);\n \n         assertNotNull(schema);\n \n@@ -99,18 +99,18 @@ public void test2() {\n         assertNotNull(mappings);\n \n         // delete user schema username\n-        schemaDAO.delete(\"surname\", UserSchema.class);\n+        schemaDAO.delete(\"surname\", USchema.class);\n \n         schemaDAO.flush();\n \n         // check for schema deletion\n-        schema = schemaDAO.find(\"surname\", UserSchema.class);\n+        schema = schemaDAO.find(\"surname\", USchema.class);\n \n         assertNull(schema);\n \n-        assertNull(schemaDAO.find(\"surname\", UserSchema.class));\n+        assertNull(schemaDAO.find(\"surname\", USchema.class));\n \n         assertEquals(1, derivedSchemaDAO.find(\"cn\",\n-                UserDerivedSchema.class).getSchemas().size());\n+                UDerSchema.class).getSchemas().size());\n     }\n }"},{"sha":"c252ac6d7250fbb41035fba86552f5cc89057ca6","filename":"core/src/test/java/org/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -19,9 +19,9 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.beans.user.UAttr;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -50,9 +50,9 @@ public final void test() {\n         syncopeUserDAO.flush();\n \n         assertNull(syncopeUserDAO.find(4L));\n-        assertNull(attributeDAO.find(550L, UserAttribute.class));\n-        assertNull(attributeValueDAO.find(22L, UserAttributeValue.class));\n-        assertNotNull(schemaDAO.find(\"loginDate\", UserSchema.class));\n+        assertNull(attributeDAO.find(550L, UAttr.class));\n+        assertNull(attributeValueDAO.find(22L, UAttrValue.class));\n+        assertNotNull(schemaDAO.find(\"loginDate\", USchema.class));\n         assertTrue(syncopeRoleDAO.find(7L).getUsers().isEmpty());\n     }\n }"},{"sha":"ff4126f1935b3f31e21b68d2fa16236110f8b496","filename":"core/src/test/resources/content.xml","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -20,31 +20,31 @@\n     <hibernate_sequences sequence_name=\"SyncopeUser\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SchemaMapping\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n-    <hibernate_sequences sequence_name=\"UserAttribute\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RoleAttribute\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MembershipAttribute\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"UserAttributeValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"RoleAttributeValue\" sequence_next_hi_value=\"1000\"/>\n-    <hibernate_sequences sequence_name=\"MembershipAttributeValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"UAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"RAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"MAttr\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"UAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"RAttrValue\" sequence_next_hi_value=\"1000\"/>\n+    <hibernate_sequences sequence_name=\"MAttrValue\" sequence_next_hi_value=\"1000\"/>\n     \n-    <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n-    <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n-    <SyncopeConfiguration confKey=\"token.encryption.key\" confValue=\"1abcdefghil3mnopqrstuvz2\"/>\n-    <SyncopeConfiguration confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n-    <SyncopeConfiguration confKey=\"mail.templates.url\" confValue=\"http://localhost:9080/syncope/mailTemplates/\"/>\n-    <SyncopeConfiguration confKey=\"activate.email.from\" confValue=\"syncope@googlecode.com\"/>\n-    <SyncopeConfiguration confKey=\"activate.email.subject\" confValue=\"Welcome to Syncope!\"/>\n-    <SyncopeConfiguration confKey=\"activate.email.template.html\" confValue=\"registration.html\"/>\n-    <SyncopeConfiguration confKey=\"activate.email.template.txt\" confValue=\"registration.txt\"/>\n-    <SyncopeConfiguration confKey=\"generateToken.email.from\" confValue=\"syncope@googlecode.com\"/>\n-    <SyncopeConfiguration confKey=\"generateToken.email.subject\" confValue=\"Syncope: reset requested\"/>\n-    <SyncopeConfiguration confKey=\"generateToken.email.template.html\" confValue=\"generateToken.html\"/>\n-    <SyncopeConfiguration confKey=\"generateToken.email.template.txt\" confValue=\"generateToken.txt\"/>\n-    <SyncopeConfiguration confKey=\"verifyToken.email.from\" confValue=\"syncope@googlecode.com\"/>\n-    <SyncopeConfiguration confKey=\"verifyToken.email.subject\" confValue=\"Syncope: reset successful\"/>\n-    <SyncopeConfiguration confKey=\"verifyToken.email.template.html\" confValue=\"verifyToken.html\"/>\n-    <SyncopeConfiguration confKey=\"verifyToken.email.template.txt\" confValue=\"verifyToken.txt\"/>\n-    <SyncopeConfiguration confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n+    <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n+    <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n+    <SyncopeConf confKey=\"token.encryption.key\" confValue=\"1abcdefghil3mnopqrstuvz2\"/>\n+    <SyncopeConf confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n+    <SyncopeConf confKey=\"mail.templates.url\" confValue=\"http://localhost:9080/syncope/mailTemplates/\"/>\n+    <SyncopeConf confKey=\"activate.email.from\" confValue=\"syncope@googlecode.com\"/>\n+    <SyncopeConf confKey=\"activate.email.subject\" confValue=\"Welcome to Syncope!\"/>\n+    <SyncopeConf confKey=\"activate.email.template.html\" confValue=\"registration.html\"/>\n+    <SyncopeConf confKey=\"activate.email.template.txt\" confValue=\"registration.txt\"/>\n+    <SyncopeConf confKey=\"generateToken.email.from\" confValue=\"syncope@googlecode.com\"/>\n+    <SyncopeConf confKey=\"generateToken.email.subject\" confValue=\"Syncope: reset requested\"/>\n+    <SyncopeConf confKey=\"generateToken.email.template.html\" confValue=\"generateToken.html\"/>\n+    <SyncopeConf confKey=\"generateToken.email.template.txt\" confValue=\"generateToken.txt\"/>\n+    <SyncopeConf confKey=\"verifyToken.email.from\" confValue=\"syncope@googlecode.com\"/>\n+    <SyncopeConf confKey=\"verifyToken.email.subject\" confValue=\"Syncope: reset successful\"/>\n+    <SyncopeConf confKey=\"verifyToken.email.template.html\" confValue=\"verifyToken.html\"/>\n+    <SyncopeConf confKey=\"verifyToken.email.template.txt\" confValue=\"verifyToken.txt\"/>\n+    <SyncopeConf confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n                           \n     <SyncopeUser id=\"1\" workflowId=\"0\" password=\"password\"/>\n     <SyncopeUser id=\"2\" workflowId=\"0\" password=\"password\"/>\n@@ -66,76 +66,76 @@\n     <Membership id=\"4\" syncopeUser_id=\"4\" syncopeRole_id=\"7\"/>\n     <Membership id=\"5\" syncopeUser_id=\"1\" syncopeRole_id=\"8\"/>\n \n-    <UserSchema name=\"username\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"true\" multivalue=\"0\" uniquevalue=\"1\" readonly=\"0\"/>\n-    <UserSchema name=\"userId\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"true\" multivalue=\"0\" uniquevalue=\"1\" readonly=\"0\"\n+    <USchema name=\"username\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n+    <USchema name=\"userId\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n-    <UserSchema name=\"loginDate\" type=\"Date\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"1\" uniquevalue=\"0\" readonly=\"0\"\n+    <USchema name=\"loginDate\" type=\"Date\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd\"/>\n-    <UserSchema name=\"firstname\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"/>\n-    <UserSchema name=\"surname\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"true\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"/>\n-    <UserSchema name=\"type\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"/>\n-    <UserSchema name=\"email\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"1\" readonly=\"0\"\n+    <USchema name=\"firstname\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+    <USchema name=\"surname\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+    <USchema name=\"type\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+    <USchema name=\"email\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n-    <UserSchema name=\"activationDate\" type=\"Date\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"\n+    <USchema name=\"activationDate\" type=\"Date\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                 conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n-    <UserSchema name=\"uselessReadonly\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"1\"/>\n+    <USchema name=\"uselessReadonly\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"1\"/>\n \n-    <RoleSchema name=\"icon\" type=\"String\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"/>\n-    <RoleSchema name=\"show\" type=\"Boolean\" virtual=\"0\"\n-                mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"/>\n+    <RSchema name=\"icon\" type=\"String\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+    <RSchema name=\"show\" type=\"Boolean\" virtual=\"0\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-    <MembershipSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\"\n-                      mandatoryCondition=\"false\" multivalue=\"0\" uniquevalue=\"0\" readonly=\"0\"\n+    <MSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"0\"\n+                      mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n \n-    <UserAttribute id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n-    <UserAttribute id=\"200\" owner_id=\"1\" schema_name=\"loginDate\"/>\n-    <UserAttribute id=\"300\" owner_id=\"2\" schema_name=\"username\"/>\n-    <UserAttribute id=\"400\" owner_id=\"3\" schema_name=\"firstname\"/>\n-    <UserAttribute id=\"500\" owner_id=\"3\" schema_name=\"surname\"/>\n-    <UserAttribute id=\"550\" owner_id=\"4\" schema_name=\"loginDate\"/>\n-\n-    <RoleAttribute id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n-    <RoleAttribute id=\"700\" owner_id=\"2\" schema_name=\"icon\"/>\n-    <RoleAttribute id=\"800\" owner_id=\"1\" schema_name=\"show\"/>\n-    <RoleAttribute id=\"900\" owner_id=\"6\" schema_name=\"icon\"/>\n-    <RoleAttribute id=\"950\" owner_id=\"4\" schema_name=\"icon\"/>\n-\n-    <MembershipAttribute id=\"1000\" owner_id=\"4\" schema_name=\"subscriptionDate\"/>\n-\n-    <UserAttributeValue attribute_id=\"100\" id=\"10\" stringValue=\"chicchiricco\"/>\n-    <UserAttributeValue attribute_id=\"300\" id=\"11\" stringValue=\"fabio.martelli\"/>\n-    <UserAttributeValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n-    <UserAttributeValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>\n-    <UserAttributeValue attribute_id=\"400\" id=\"30\" stringValue=\"John\"/>\n-    <UserAttributeValue attribute_id=\"500\" id=\"31\" stringValue=\"Doe\"/>\n-    <UserAttributeValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n-\n-    <RoleAttributeValue attribute_id=\"600\" id=\"40\" stringValue=\"niceIcon\"/>\n-    <RoleAttributeValue attribute_id=\"700\" id=\"41\" stringValue=\"badIcon\"/>\n-    <RoleAttributeValue attribute_id=\"800\" id=\"42\" booleanValue=\"1\"/>\n-    <RoleAttributeValue attribute_id=\"900\" id=\"43\" stringValue=\"icon6\"/>\n-    <RoleAttributeValue attribute_id=\"950\" id=\"44\" stringValue=\"icon4\"/>\n-\n-    <MembershipAttributeValue attribute_id=\"1000\" id=\"90\" dateValue=\"2009-05-26\"/>\n-    <MembershipAttributeValue attribute_id=\"1000\" id=\"91\" dateValue=\"2010-05-26 15:40:04\"/>\n-\n-    <UserDerivedSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n+    <UAttr id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n+    <UAttr id=\"200\" owner_id=\"1\" schema_name=\"loginDate\"/>\n+    <UAttr id=\"300\" owner_id=\"2\" schema_name=\"username\"/>\n+    <UAttr id=\"400\" owner_id=\"3\" schema_name=\"firstname\"/>\n+    <UAttr id=\"500\" owner_id=\"3\" schema_name=\"surname\"/>\n+    <UAttr id=\"550\" owner_id=\"4\" schema_name=\"loginDate\"/>\n+\n+    <RAttr id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n+    <RAttr id=\"700\" owner_id=\"2\" schema_name=\"icon\"/>\n+    <RAttr id=\"800\" owner_id=\"1\" schema_name=\"show\"/>\n+    <RAttr id=\"900\" owner_id=\"6\" schema_name=\"icon\"/>\n+    <RAttr id=\"950\" owner_id=\"4\" schema_name=\"icon\"/>\n+\n+    <MAttr id=\"1000\" owner_id=\"4\" schema_name=\"subscriptionDate\"/>\n+\n+    <UAttrValue attribute_id=\"100\" id=\"10\" stringValue=\"chicchiricco\"/>\n+    <UAttrValue attribute_id=\"300\" id=\"11\" stringValue=\"fabio.martelli\"/>\n+    <UAttrValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n+    <UAttrValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>\n+    <UAttrValue attribute_id=\"400\" id=\"30\" stringValue=\"John\"/>\n+    <UAttrValue attribute_id=\"500\" id=\"31\" stringValue=\"Doe\"/>\n+    <UAttrValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n+\n+    <RAttrValue attribute_id=\"600\" id=\"40\" stringValue=\"niceIcon\"/>\n+    <RAttrValue attribute_id=\"700\" id=\"41\" stringValue=\"badIcon\"/>\n+    <RAttrValue attribute_id=\"800\" id=\"42\" booleanValue=\"1\"/>\n+    <RAttrValue attribute_id=\"900\" id=\"43\" stringValue=\"icon6\"/>\n+    <RAttrValue attribute_id=\"950\" id=\"44\" stringValue=\"icon4\"/>\n+\n+    <MAttrValue attribute_id=\"1000\" id=\"90\" dateValue=\"2009-05-26\"/>\n+    <MAttrValue attribute_id=\"1000\" id=\"91\" dateValue=\"2010-05-26 15:40:04\"/>\n+\n+    <UDerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n     \n-    <UserSchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"surname\"/>\n-    <UserSchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"firstname\"/>\n+    <USchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"surname\"/>\n+    <USchemaDerivation derivedSchemas_name=\"cn\" schemas_name=\"firstname\"/>\n                                             \n-    <UserDerivedAttribute id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n+    <UDerAttr id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n     <ConnectorInstance id=\"100\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n@@ -288,12 +288,12 @@\n     <SyncopeRole_Entitlement entitlements_name=\"advanced\" roles_id=\"1\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"2\"/>\n \n-    <RoleDerivedSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n+    <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n-    <RoleSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"icon\" />\n-    <RoleSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"show\" />\n+    <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"icon\" />\n+    <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"show\" />\n \n-    <RoleDerivedAttribute id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>\n-    <RoleDerivedAttribute id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n+    <RDerAttr id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>\n+    <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n </dataset>"},{"sha":"31884a8a83f8adc6919abada531bfa996ad1485c","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6b7074a2f76b7e7a576670a1ee7984f51c7839fc/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=6b7074a2f76b7e7a576670a1ee7984f51c7839fc","patch":"@@ -111,6 +111,7 @@\n         <aspectj.version>1.6.9</aspectj.version>\n \n         <hibernate.version>3.4.0.GA</hibernate.version>\n+        <hibernate-validator.version>4.0.2.GA</hibernate-validator.version>\n         <ehcache.version>2.3.0</ehcache.version>\n         <ehcache-jgroupsreplication.version>1.4</ehcache-jgroupsreplication.version>\n \n@@ -198,6 +199,11 @@\n                 <artifactId>hibernate-entitymanager</artifactId>\n                 <version>${hibernate.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.hibernate</groupId>\n+                <artifactId>hibernate-validator</artifactId>\n+                <version>${hibernate-validator.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>net.sf.ehcache</groupId>\n                 <artifactId>ehcache-core</artifactId>"}]}