{"sha":"e624f369d6a2df12ddc516e6b50ff5cb9d30747b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU2MjRmMzY5ZDZhMmRmMTJkZGM1MTZlNmI1MGZmNWNiOWQzMDc0N2I=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-03T10:51:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-03T10:53:58Z"},"message":"[SYNCOPE-1185] SAMLSSOResponseValidator in action","tree":{"sha":"a1dbd7b02ab590e7c8574612cbd7dc306ad37fb5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a1dbd7b02ab590e7c8574612cbd7dc306ad37fb5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e624f369d6a2df12ddc516e6b50ff5cb9d30747b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e624f369d6a2df12ddc516e6b50ff5cb9d30747b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e624f369d6a2df12ddc516e6b50ff5cb9d30747b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e3467bf4bfa58db7788f3993c3b333a41e9d37f1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3467bf4bfa58db7788f3993c3b333a41e9d37f1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e3467bf4bfa58db7788f3993c3b333a41e9d37f1"}],"stats":{"total":190,"additions":130,"deletions":60},"files":[{"sha":"ecc14fe144498977b2faac727b8578abccc6896c","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AbstractSAML2SPServlet.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -76,7 +76,12 @@ protected void prepare(final HttpServletResponse response, final SAML2RequestTO\n         }\n     }\n \n-    protected SAML2ReceivedResponseTO extract(final InputStream response) throws IOException {\n+    protected SAML2ReceivedResponseTO extract(\n+            final String spEntityID,\n+            final String urlContext,\n+            final String clientAddress,\n+            final InputStream response) throws IOException {\n+\n         String strForm = IOUtils.toString(response);\n         MultivaluedMap<String, String> params = JAXRSUtils.getStructuredParams(strForm, \"&\", false, false);\n \n@@ -90,6 +95,9 @@ protected SAML2ReceivedResponseTO extract(final InputStream response) throws IOE\n         LOG.debug(\"Received Relay State: {}\", relayState);\n \n         SAML2ReceivedResponseTO receivedResponseTO = new SAML2ReceivedResponseTO();\n+        receivedResponseTO.setSpEntityID(spEntityID);\n+        receivedResponseTO.setUrlContext(urlContext);\n+        receivedResponseTO.setClientAddress(clientAddress);\n         receivedResponseTO.setSamlResponse(samlResponse);\n         receivedResponseTO.setRelayState(relayState);\n         return receivedResponseTO;"},{"sha":"a2fec3a5fdbc1eb479ff6f69ab60320265189773","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AssertionConsumer.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -25,6 +25,7 @@\n import javax.servlet.annotation.WebServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n@@ -42,7 +43,11 @@ protected void doPost(final HttpServletRequest request, final HttpServletRespons\n                 getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n         try {\n             SAML2LoginResponseTO responseTO = anonymous.getService(SAML2SPService.class).\n-                    validateLoginResponse(extract(request.getInputStream()));\n+                    validateLoginResponse(extract(\n+                            StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"),\n+                            \"saml2sp\",\n+                            request.getRemoteAddr(),\n+                            request.getInputStream()));\n \n             request.getSession(true).setAttribute(Constants.SAML2SPJWT, responseTO.getAccessToken());\n             request.getSession(true).setAttribute(Constants.SAML2SPJWT_EXPIRE, responseTO.getAccessTokenExpiryTime());"},{"sha":"8008b0c7f1bd0d9849862138906017bf5e678935","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Logout.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -125,7 +125,11 @@ protected void doPost(final HttpServletRequest request, final HttpServletRespons\n             throws ServletException, IOException {\n \n         // process POST binding logout response\n-        SAML2ReceivedResponseTO receivedResponse = extract(request.getInputStream());\n+        SAML2ReceivedResponseTO receivedResponse = extract(\n+                StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"),\n+                \"saml2sp\",\n+                request.getRemoteAddr(),\n+                request.getInputStream());\n         doLogout(receivedResponse, request, response);\n     }\n "},{"sha":"4ea2deca5e7943afc3cbc6fdf14cf11bff3de8d0","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2ReceivedResponseTO.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -20,6 +20,7 @@\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"saml2ReceivedResponse\")\n@@ -28,10 +29,40 @@ public class SAML2ReceivedResponseTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 6102419133516694822L;\n \n+    private String spEntityID;\n+\n+    private String urlContext;\n+\n+    private String clientAddress;\n+\n     private String samlResponse;\n \n     private String relayState;\n \n+    public String getSpEntityID() {\n+        return spEntityID;\n+    }\n+\n+    public void setSpEntityID(final String spEntityID) {\n+        this.spEntityID = StringUtils.appendIfMissing(spEntityID, \"/\");\n+    }\n+\n+    public String getUrlContext() {\n+        return urlContext;\n+    }\n+\n+    public void setUrlContext(final String urlContext) {\n+        this.urlContext = urlContext;\n+    }\n+\n+    public String getClientAddress() {\n+        return clientAddress;\n+    }\n+\n+    public void setClientAddress(final String clientAddress) {\n+        this.clientAddress = clientAddress;\n+    }\n+\n     public String getSamlResponse() {\n         return samlResponse;\n     }"},{"sha":"a9b63ed47b241bf02d3c57b7673738301d5a8b59","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -117,7 +117,6 @@\n import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -176,6 +175,10 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n     @Resource(name = \"syncopeJWTSSOProviderDelegate\")\n     private JwsSignatureVerifier jwsSignatureVerifier;\n \n+    private String getAssertionConsumerURL(final String spEntityID, final String urlContext) {\n+        return spEntityID + urlContext + \"/assertion-consumer\";\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n     public void getMetadata(final String spEntityID, final String urlContext, final OutputStream os) {\n         check();\n@@ -209,7 +212,7 @@ public void getMetadata(final String spEntityID, final String urlContext, final\n                 AssertionConsumerService assertionConsumerService = new AssertionConsumerServiceBuilder().buildObject();\n                 assertionConsumerService.setIndex(bindingType.ordinal());\n                 assertionConsumerService.setBinding(bindingType.getUri());\n-                assertionConsumerService.setLocation(spEntityID + urlContext + \"/assertion-consumer\");\n+                assertionConsumerService.setLocation(getAssertionConsumerURL(spEntityID, urlContext));\n                 spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService);\n                 spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor);\n \n@@ -450,32 +453,27 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n             throw sce;\n         }\n \n-        // 3. further checks:\n-        //   3a. the SAML Reponse's InResponseTo\n-        if (!relayState.getJwtClaims().getSubject().equals(samlResponse.getInResponseTo())) {\n-            throw new IllegalArgumentException(\"Unmatching request ID: \" + samlResponse.getInResponseTo());\n-        }\n-        //   3b. the SAML Response status\n-        if (!StatusCode.SUCCESS.equals(samlResponse.getStatus().getStatusCode().getValue())) {\n-            throw new BadCredentialsException(\"The SAML IdP replied with \"\n-                    + samlResponse.getStatus().getStatusCode().getValue());\n-        }\n-\n-        // 4. validate the SAML response and, if needed, decrypt the provided assertion(s)\n+        // 3. validate the SAML response and, if needed, decrypt the provided assertion(s)\n         SAML2IdPEntity idp = getIdP(samlResponse.getIssuer().getValue());\n         if (idp.getConnObjectKeyItem() == null) {\n             throw new IllegalArgumentException(\"No mapping provided for SAML 2.0 IdP '\" + idp.getId() + \"'\");\n         }\n         try {\n-            saml2rw.validate(samlResponse, idp.getTrustStore());\n+            saml2rw.validate(\n+                    samlResponse,\n+                    idp,\n+                    getAssertionConsumerURL(response.getSpEntityID(), response.getUrlContext()),\n+                    response.getClientAddress(),\n+                    relayState.getJwtClaims().getSubject(),\n+                    response.getSpEntityID());\n         } catch (Exception e) {\n             LOG.error(\"While validating AuthnResponse\", e);\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n             sce.getElements().add(e.getMessage());\n             throw sce;\n         }\n \n-        // 5. prepare the result: find matching user (if any) and return the received attributes\n+        // 4. prepare the result: find matching user (if any) and return the received attributes\n         SAML2LoginResponseTO responseTO = new SAML2LoginResponseTO();\n         responseTO.setIdp(idp.getId());\n         responseTO.setSloSupported(idp.getSLOLocation(idp.getBindingType()) != null);\n@@ -541,7 +539,8 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         responseTO.setUsername(userDAO.find(matchingUsers.get(0)).getUsername());\n \n         responseTO.setNameID(nameID.getValue());\n-        // 6. generate JWT for further access\n+\n+        // 5. generate JWT for further access\n         Map<String, Object> claims = new HashMap<>();\n         claims.put(JWT_CLAIM_IDP_ENTITYID, idp.getId());\n         claims.put(JWT_CLAIM_NAMEID_FORMAT, nameID.getFormat());"},{"sha":"1852a3965cae1ae804f28a8b2b9829a75fd0c25e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -28,7 +28,6 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.security.InvalidKeyException;\n-import java.security.KeyStore;\n import java.util.Base64;\n import java.security.NoSuchAlgorithmException;\n import java.security.PrivateKey;\n@@ -44,8 +43,10 @@\n import javax.xml.transform.stream.StreamResult;\n import org.apache.cxf.rs.security.saml.DeflateEncoderDecoder;\n import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n+import org.apache.cxf.rs.security.saml.sso.SAMLSSOResponseValidator;\n import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.syncope.common.lib.SSOConstants;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.logic.init.SAML2SPLoader;\n import org.apache.wss4j.common.crypto.Merlin;\n import org.apache.wss4j.common.ext.WSSecurityException;\n@@ -91,6 +92,8 @@ public class SAML2ReaderWriter {\n \n     private SAMLProtocolResponseValidator protocolValidator;\n \n+    private SAMLSSOResponseValidator ssoResponseValidator;\n+\n     private SAMLSPCallbackHandler callbackHandler;\n \n     public void init() {\n@@ -109,6 +112,8 @@ public void init() {\n         protocolValidator = new SAMLProtocolResponseValidator();\n         protocolValidator.setKeyInfoMustBeAvailable(true);\n \n+        ssoResponseValidator = new SAMLSSOResponseValidator();\n+\n         callbackHandler = new SAMLSPCallbackHandler(loader.getKeyPass());\n     }\n \n@@ -205,14 +210,28 @@ public String encode(final RequestAbstractType request, final boolean useDeflate\n         return Base64.getEncoder().encodeToString(deflatedBytes);\n     }\n \n-    public void validate(final Response samlResponse, final KeyStore idpTrustStore) throws WSSecurityException {\n+    public void validate(\n+            final Response samlResponse,\n+            final SAML2IdPEntity idp,\n+            final String assertionConsumerURL,\n+            final String clientAddress,\n+            final String requestId,\n+            final String spEntityID)\n+            throws WSSecurityException {\n+\n         // validate the SAML response and, if needed, decrypt the provided assertion(s)\n         Merlin crypto = new Merlin();\n         crypto.setKeyStore(loader.getKeyStore());\n-        crypto.setTrustStore(idpTrustStore);\n+        crypto.setTrustStore(idp.getTrustStore());\n \n         protocolValidator.validateSamlResponse(samlResponse, crypto, callbackHandler);\n \n+        ssoResponseValidator.setAssertionConsumerURL(assertionConsumerURL);\n+        ssoResponseValidator.setIssuerIDP(idp.getId());\n+        ssoResponseValidator.setRequestId(requestId);\n+        ssoResponseValidator.setSpIdentifier(spEntityID);\n+        ssoResponseValidator.validateSamlResponse(samlResponse, idp.getBindingType() == SAML2BindingType.POST);\n+\n         if (LOG.isDebugEnabled()) {\n             try {\n                 StringWriter writer = new StringWriter();"},{"sha":"5762a33fbf0a0dea106a25dc6e0cacda50878695","filename":"fit/core-reference/pom.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -363,15 +363,13 @@ under the License.\n         <filtering>true</filtering>\n         <excludes>\n           <exclude>keystore</exclude>\n-          <exclude>**/*.jks</exclude>\n         </excludes>\n       </testResource>\n       <testResource>\n         <directory>src/test/resources</directory>\n         <filtering>false</filtering>\n         <includes>\n           <include>keystore</include>\n-          <include>**/*.jks</include>\n         </includes>\n       </testResource>\n       <testResource>"},{"sha":"f0cd386fbca0ddea2c0fa4ecf50a809977f94901","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":41,"deletions":35,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e624f369d6a2df12ddc516e6b50ff5cb9d30747b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=e624f369d6a2df12ddc516e6b50ff5cb9d30747b","patch":"@@ -165,7 +165,8 @@ public void setIdPMapping() {\n         Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         Optional<SAML2IdPTO> ssoCircleOpt =\n-            saml2IdPService.list().stream().filter(o -> \"https://idp.ssocircle.com\".equals(o.getEntityID())).findFirst();\n+                saml2IdPService.list().stream().filter(o -> \"https://idp.ssocircle.com\".equals(o.getEntityID())).\n+                        findFirst();\n         assertTrue(ssoCircleOpt.isPresent());\n \n         SAML2IdPTO ssoCircle = ssoCircleOpt.get();\n@@ -195,8 +196,7 @@ public void validateLoginResponse() throws Exception {\n \n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-        SAML2RequestTO loginRequest =\n-                saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        SAML2RequestTO loginRequest = saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n         assertNotNull(loginRequest);\n \n         assertEquals(\"https://localhost:8443/fediz-idp/saml/up\", loginRequest.getIdpServiceAddress());\n@@ -206,28 +206,31 @@ public void validateLoginResponse() throws Exception {\n \n         // Check a null relaystate\n         SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        response.setSpEntityID(\"http://recipient.apache.org/\");\n+        response.setUrlContext(\"saml2sp\");\n         try {\n             saml2Service.validateLoginResponse(response);\n             fail(\"Failure expected on no Relay State\");\n-        } catch (SyncopeClientException ex) {\n-            assertTrue(ex.getMessage().contains(\"No Relay State was provided\"));\n+        } catch (SyncopeClientException e) {\n+            assertTrue(e.getMessage().contains(\"No Relay State was provided\"));\n         }\n \n         // Check a null Response\n         response.setRelayState(loginRequest.getRelayState());\n         try {\n             saml2Service.validateLoginResponse(response);\n             fail(\"Failure expected on no SAML Response\");\n-        } catch (SyncopeClientException ex) {\n-            assertTrue(ex.getMessage().contains(\"No SAML Response was provided\"));\n+        } catch (SyncopeClientException e) {\n+            assertTrue(e.getMessage().contains(\"No SAML Response was provided\"));\n         }\n \n         // Create a SAML Response using WSS4J\n-        Document doc = DOMUtils.newDocument();\n         JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n         String inResponseTo = relayState.getJwtClaims().getSubject();\n \n         org.opensaml.saml.saml2.core.Response samlResponse = createResponse(inResponseTo);\n+\n+        Document doc = DOMUtils.newDocument();\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n         String responseStr = DOM2Writer.nodeToString(responseElement);\n \n@@ -239,26 +242,27 @@ public void validateLoginResponse() throws Exception {\n     }\n \n     @Test\n-    @org.junit.Ignore\n-    public void testUnsignedAssertionInLoginResponse() throws Exception {\n+    public void unsignedAssertionInLoginResponse() throws Exception {\n         Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-        SAML2RequestTO loginRequest =\n-                saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        SAML2RequestTO loginRequest = saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n         assertNotNull(loginRequest);\n \n         SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        response.setSpEntityID(\"http://recipient.apache.org/\");\n+        response.setUrlContext(\"saml2sp\");\n         response.setRelayState(loginRequest.getRelayState());\n \n         // Create a SAML Response using WSS4J\n-        Document doc = DOMUtils.newDocument();\n         JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n         String inResponseTo = relayState.getJwtClaims().getSubject();\n \n         org.opensaml.saml.saml2.core.Response samlResponse =\n                 createResponse(inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES);\n+\n+        Document doc = DOMUtils.newDocument();\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n         String responseStr = DOM2Writer.nodeToString(responseElement);\n \n@@ -267,35 +271,35 @@ public void testUnsignedAssertionInLoginResponse() throws Exception {\n         try {\n             saml2Service.validateLoginResponse(response);\n             fail(\"Failure expected on an unsigned Assertion\");\n-        } catch (SyncopeClientException ex) {\n-            // expected\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n         }\n     }\n \n     @Test\n-    @org.junit.Ignore\n-    public void testLoginResponseWrappingAttack() throws Exception {\n+    public void loginResponseWrappingAttack() throws Exception {\n         Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n \n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n-        SAML2RequestTO loginRequest =\n-                saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        SAML2RequestTO loginRequest = saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n         assertNotNull(loginRequest);\n \n         SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        response.setSpEntityID(\"http://recipient.apache.org/\");\n+        response.setUrlContext(\"saml2sp\");\n         response.setRelayState(loginRequest.getRelayState());\n \n         // Create a SAML Response using WSS4J\n-        Document doc = DOMUtils.newDocument();\n         JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n         String inResponseTo = relayState.getJwtClaims().getSubject();\n \n         org.opensaml.saml.saml2.core.Response samlResponse = createResponse(inResponseTo);\n-        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n \n-        doc.appendChild(responseElement);\n+        Document doc = DOMUtils.newDocument();\n+        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n         assertNotNull(responseElement);\n+        doc.appendChild(responseElement);\n \n         // Get Assertion Element\n         Element assertionElement =\n@@ -326,9 +330,12 @@ public void testLoginResponseWrappingAttack() throws Exception {\n \n         // Validate the SAML Response\n         response.setSamlResponse(java.util.Base64.getEncoder().encodeToString(responseStr.getBytes()));\n-        SAML2LoginResponseTO loginResponse = saml2Service.validateLoginResponse(response);\n-        assertNotNull(loginResponse.getAccessToken());\n-        assertEquals(\"puccini\", loginResponse.getNameID());\n+        try {\n+            saml2Service.validateLoginResponse(response);\n+            fail(\"Failure expected on an unsigned Assertion\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n     }\n \n     private org.opensaml.saml.saml2.core.Response createResponse(final String inResponseTo) throws Exception {\n@@ -340,9 +347,8 @@ private org.opensaml.saml.saml2.core.Response createResponse(\n \n         Status status = SAML2PResponseComponentBuilder.createStatus(\n                 SAMLProtocolResponseValidator.SAML2_STATUSCODE_SUCCESS, null);\n-        org.opensaml.saml.saml2.core.Response response =\n-                SAML2PResponseComponentBuilder.createSAMLResponse(\n-                        inResponseTo, \"urn:org:apache:cxf:fediz:idp:realm-A\", status);\n+        org.opensaml.saml.saml2.core.Response response = SAML2PResponseComponentBuilder.createSAMLResponse(\n+                inResponseTo, \"urn:org:apache:cxf:fediz:idp:realm-A\", status);\n         response.setDestination(\"http://recipient.apache.org\");\n \n         // Create an AuthenticationAssertion\n@@ -353,17 +359,17 @@ private org.opensaml.saml.saml2.core.Response createResponse(\n \n         SubjectConfirmationDataBean subjectConfirmationData = new SubjectConfirmationDataBean();\n         subjectConfirmationData.setAddress(\"http://apache.org\");\n-        subjectConfirmationData.setInResponseTo(\"12345\");\n+        subjectConfirmationData.setInResponseTo(inResponseTo);\n         subjectConfirmationData.setNotAfter(new DateTime().plusMinutes(5));\n-        subjectConfirmationData.setRecipient(\"http://recipient.apache.org\");\n+        subjectConfirmationData.setRecipient(\"http://recipient.apache.org/saml2sp/assertion-consumer\");\n         callbackHandler.setSubjectConfirmationData(subjectConfirmationData);\n \n         ConditionsBean conditions = new ConditionsBean();\n         conditions.setNotBefore(new DateTime());\n         conditions.setNotAfter(new DateTime().plusMinutes(5));\n \n         AudienceRestrictionBean audienceRestriction = new AudienceRestrictionBean();\n-        audienceRestriction.setAudienceURIs(Collections.singletonList(\"http://service.apache.org\"));\n+        audienceRestriction.setAudienceURIs(Collections.singletonList(\"http://recipient.apache.org/\"));\n         conditions.setAudienceRestrictions(Collections.singletonList(audienceRestriction));\n         callbackHandler.setConditions(conditions);\n \n@@ -374,12 +380,12 @@ private org.opensaml.saml.saml2.core.Response createResponse(\n         if (signAssertion) {\n             Crypto issuerCrypto = new Merlin();\n             KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n-            ClassLoader loader = Loader.getClassLoader(SAML2ITCase.class);\n-            InputStream input = Merlin.loadInputStream(loader, \"stsrealm_a.jks\");\n-            keyStore.load(input, \"storepass\".toCharArray());\n+            ClassLoader loader = Loader.getClassLoader(getClass());\n+            InputStream input = Merlin.loadInputStream(loader, \"keystore\");\n+            keyStore.load(input, \"changeit\".toCharArray());\n             ((Merlin) issuerCrypto).setKeyStore(keyStore);\n \n-            assertion.signAssertion(\"realma\", \"realma\", issuerCrypto, false);\n+            assertion.signAssertion(\"sp\", \"changeit\", issuerCrypto, false);\n         }\n \n         response.getAssertions().add(assertion.getSaml2());"},{"sha":"fde29282cfb1423bd72440ae2814f69e95e1c756","filename":"fit/core-reference/src/test/resources/stsrealm_a.jks","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fstsrealm_a.jks","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fstsrealm_a.jks","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fstsrealm_a.jks?ref=e3467bf4bfa58db7788f3993c3b333a41e9d37f1"}]}