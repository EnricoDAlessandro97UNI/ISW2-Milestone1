{"sha":"31f14930a922767739bda12d46c96bc4962e3977","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMxZjE0OTMwYTkyMjc2NzczOWJkYTEyZDQ2Yzk2YmM0OTYyZTM5Nzc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-11-21T10:58:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-11-21T11:13:11Z"},"message":"JEXL: various enhancements and cleanup, especially for templates","tree":{"sha":"bb6070d33c8c77b745ec06f84a2122b8d4dba21a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bb6070d33c8c77b745ec06f84a2122b8d4dba21a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/31f14930a922767739bda12d46c96bc4962e3977","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31f14930a922767739bda12d46c96bc4962e3977","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/31f14930a922767739bda12d46c96bc4962e3977","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31f14930a922767739bda12d46c96bc4962e3977/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f670e2fa38d0862c9b5d15639e8fb8dee5770936","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f670e2fa38d0862c9b5d15639e8fb8dee5770936","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f670e2fa38d0862c9b5d15639e8fb8dee5770936"}],"stats":{"total":203,"additions":111,"deletions":92},"files":[{"sha":"67c34398cc742967d08add092be8a9e88f141d4b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java?ref=31f14930a922767739bda12d46c96bc4962e3977","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -87,16 +88,22 @@ public List<Object> beforePull(\n                 JexlContext jexlContext = new MapContext();\n                 jexlContext.set(\"value\", value);\n                 if (entityTO instanceof AnyTO) {\n-                    newValues.add(JexlUtils.evaluate(pullJEXL, (AnyTO) entityTO, jexlContext));\n-                } else {\n+                    JexlUtils.addFieldsToContext((AnyTO) entityTO, jexlContext);\n+                    JexlUtils.addAttrTOsToContext(((AnyTO) entityTO).getPlainAttrs(), jexlContext);\n+                    JexlUtils.addAttrTOsToContext(((AnyTO) entityTO).getDerAttrs(), jexlContext);\n+                    JexlUtils.addAttrTOsToContext(((AnyTO) entityTO).getVirAttrs(), jexlContext);\n+                } else if (entityTO instanceof RealmTO) {\n+                    JexlUtils.addFieldsToContext((RealmTO) entityTO, jexlContext);\n                     newValues.add(JexlUtils.evaluate(pullJEXL, jexlContext));\n                 }\n+\n+                newValues.add(JexlUtils.evaluate(pullJEXL, jexlContext));\n             });\n \n             return newValues;\n         }\n \n-        return values;\n+        return JEXLItemTransformer.super.beforePull(item, entityTO, values);\n     }\n \n }"},{"sha":"11090701b0e495d4b3e4fe93ef03fe0d29a18a15","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java","status":"modified","additions":70,"deletions":78,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java?ref=31f14930a922767739bda12d46c96bc4962e3977","patch":"@@ -25,8 +25,11 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.commons.jexl3.JexlBuilder;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.JexlEngine;\n@@ -37,6 +40,8 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -56,6 +61,10 @@ public final class JexlUtils {\n \n     private static final String[] IGNORE_FIELDS = { \"password\", \"clearPassword\", \"serialVersionUID\", \"class\" };\n \n+    private static final Map<Class<?>, Set<PropertyDescriptor>> FIELD_CACHE =\n+            Collections.<Class<?>, Set<PropertyDescriptor>>synchronizedMap(\n+                    new HashMap<Class<?>, Set<PropertyDescriptor>>());\n+\n     private static JexlEngine JEXL_ENGINE;\n \n     private static JexlEngine getEngine() {\n@@ -112,56 +121,77 @@ public static String evaluate(final String expression, final JexlContext jexlCon\n         return result;\n     }\n \n-    public static JexlContext addFieldsToContext(final Object object, final JexlContext jexlContext) {\n-        JexlContext context = jexlContext == null ? new MapContext() : jexlContext;\n+    public static void addFieldsToContext(final Object object, final JexlContext jexlContext) {\n+        Set<PropertyDescriptor> cached = FIELD_CACHE.get(object.getClass());\n+        if (cached == null) {\n+            cached = new HashSet<>();\n+            FIELD_CACHE.put(object.getClass(), cached);\n \n-        try {\n-            for (PropertyDescriptor desc : Introspector.getBeanInfo(object.getClass()).getPropertyDescriptors()) {\n-                Class<?> type = desc.getPropertyType();\n-                String fieldName = desc.getName();\n-\n-                if ((!fieldName.startsWith(\"pc\"))\n-                        && (!ArrayUtils.contains(IGNORE_FIELDS, fieldName))\n-                        && (!Iterable.class.isAssignableFrom(type))\n-                        && (!type.isArray())) {\n-\n-                    try {\n-                        Object fieldValue;\n-                        if (desc.getReadMethod() == null) {\n-                            final Field field = object.getClass().getDeclaredField(fieldName);\n-                            field.setAccessible(true);\n-                            fieldValue = field.get(object);\n-                        } else {\n-                            fieldValue = desc.getReadMethod().invoke(object);\n-                        }\n-\n-                        context.set(fieldName, fieldValue == null\n-                                ? StringUtils.EMPTY\n-                                : (type.equals(Date.class)\n-                                ? FormatUtils.format((Date) fieldValue, false)\n-                                : fieldValue));\n-\n-                        LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);\n-                    } catch (Exception iae) {\n-                        LOG.error(\"Reading '{}' value error\", fieldName, iae);\n+            try {\n+                for (PropertyDescriptor desc : Introspector.getBeanInfo(object.getClass()).getPropertyDescriptors()) {\n+                    if ((!desc.getName().startsWith(\"pc\"))\n+                            && (!ArrayUtils.contains(IGNORE_FIELDS, desc.getName()))\n+                            && (!Iterable.class.isAssignableFrom(desc.getPropertyType()))\n+                            && (!desc.getPropertyType().isArray())) {\n+\n+                        cached.add(desc);\n                     }\n                 }\n+            } catch (IntrospectionException ie) {\n+                LOG.error(\"Reading class attributes error\", ie);\n             }\n-        } catch (IntrospectionException ie) {\n-            LOG.error(\"Reading class attributes error\", ie);\n         }\n \n-        if (object instanceof Any) {\n-            Any<?> any = (Any<?>) object;\n-            if (any.getRealm() != null) {\n-                context.set(\"realm\", any.getRealm().getFullPath());\n+        for (PropertyDescriptor desc : cached) {\n+            String fieldName = desc.getName();\n+            Class<?> fieldType = desc.getPropertyType();\n+\n+            try {\n+                Object fieldValue;\n+                if (desc.getReadMethod() == null) {\n+                    final Field field = object.getClass().getDeclaredField(fieldName);\n+                    field.setAccessible(true);\n+                    fieldValue = field.get(object);\n+                } else {\n+                    fieldValue = desc.getReadMethod().invoke(object);\n+                }\n+                fieldValue = fieldValue == null\n+                        ? StringUtils.EMPTY\n+                        : (fieldType.equals(Date.class)\n+                        ? FormatUtils.format((Date) fieldValue, false)\n+                        : fieldValue);\n+\n+                jexlContext.set(fieldName, fieldValue);\n+\n+                LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);\n+            } catch (Exception iae) {\n+                LOG.error(\"Reading '{}' value error\", fieldName, iae);\n             }\n+        }\n+\n+        if (object instanceof Any && ((Any<?>) object).getRealm() != null) {\n+            jexlContext.set(\"realm\", ((Any<?>) object).getRealm().getFullPath());\n+        } else if (object instanceof AnyTO && ((AnyTO) object).getRealm() != null) {\n+            jexlContext.set(\"realm\", ((AnyTO) object).getRealm());\n         } else if (object instanceof Realm) {\n-            Realm realm = (Realm) object;\n-            context.set(\"fullPath\", realm.getFullPath());\n+            jexlContext.set(\"fullPath\", ((Realm) object).getFullPath());\n+        } else if (object instanceof RealmTO) {\n+            jexlContext.set(\"fullPath\", ((RealmTO) object).getFullPath());\n         }\n+    }\n \n-        return context;\n+    public static void addAttrTOsToContext(final Collection<AttrTO> attrs, final JexlContext jexlContext) {\n+        for (AttrTO attr : attrs) {\n+            if (attr.getSchema() != null) {\n+                String expressionValue = attr.getValues().isEmpty()\n+                        ? StringUtils.EMPTY\n+                        : attr.getValues().get(0);\n+\n+                LOG.debug(\"Add attribute {} with value {}\", attr.getSchema(), expressionValue);\n+\n+                jexlContext.set(attr.getSchema(), expressionValue);\n+            }\n+        }\n     }\n \n     public static void addPlainAttrsToContext(\n@@ -196,44 +226,6 @@ public static boolean evaluateMandatoryCondition(final String mandatoryCondition\n         return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n     }\n \n-    public static String evaluate(final String expression, final AnyTO anyTO, final JexlContext context) {\n-        addFieldsToContext(anyTO, context);\n-\n-        anyTO.getPlainAttrs().forEach(plainAttr -> {\n-            List<String> values = plainAttr.getValues();\n-            String expressionValue = values.isEmpty()\n-                    ? StringUtils.EMPTY\n-                    : values.get(0);\n-\n-            LOG.debug(\"Add plain attribute {} with value {}\", plainAttr.getSchema(), expressionValue);\n-\n-            context.set(plainAttr.getSchema(), expressionValue);\n-        });\n-        anyTO.getDerAttrs().forEach(derAttr -> {\n-            List<String> values = derAttr.getValues();\n-            String expressionValue = values.isEmpty()\n-                    ? StringUtils.EMPTY\n-                    : values.get(0);\n-\n-            LOG.debug(\"Add derived attribute {} with value {}\", derAttr.getSchema(), expressionValue);\n-\n-            context.set(derAttr.getSchema(), expressionValue);\n-        });\n-        anyTO.getVirAttrs().forEach(virAttr -> {\n-            List<String> values = virAttr.getValues();\n-            String expressionValue = values.isEmpty()\n-                    ? StringUtils.EMPTY\n-                    : values.get(0);\n-\n-            LOG.debug(\"Add virtual attribute {} with value {}\", virAttr.getSchema(), expressionValue);\n-\n-            context.set(virAttr.getSchema(), expressionValue);\n-        });\n-\n-        // Evaluate expression using the context prepared before\n-        return evaluate(expression, context);\n-    }\n-\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"d8624e3031b8cdb571ac73ad1983731990ec0409","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=31f14930a922767739bda12d46c96bc4962e3977","patch":"@@ -78,7 +78,7 @@ public static List<? extends Item> getPullItems(final List<? extends Item> items\n                 || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n-    private static Name evaluateNAME(final String evalConnObjectLink, final String connObjectKey) {\n+    private static Name getName(final String evalConnObjectLink, final String connObjectKey) {\n         // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n         // otherwise evaluated connObjectLink expression is taken as Name().\n         Name name;\n@@ -126,7 +126,7 @@ public static Name evaluateNAME(final Any<?> any, final Provision provision, fin\n             evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n         }\n \n-        return evaluateNAME(evalConnObjectLink, connObjectKey);\n+        return getName(evalConnObjectLink, connObjectKey);\n     }\n \n     /**\n@@ -156,7 +156,7 @@ public static Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final\n             evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n         }\n \n-        return evaluateNAME(evalConnObjectLink, connObjectKey);\n+        return getName(evalConnObjectLink, connObjectKey);\n     }\n \n     public static List<ItemTransformer> getItemTransformers(final Item item) {"},{"sha":"4c07bd99fae1de7a0a4713c5ae79a04d44fed811","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":28,"deletions":8,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31f14930a922767739bda12d46c96bc4962e3977/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=31f14930a922767739bda12d46c96bc4962e3977","patch":"@@ -50,13 +50,13 @@ public class TemplateUtils {\n     @Autowired\n     private GroupDAO groupDAO;\n \n-    private AttrTO evaluateAttr(final AnyTO anyTO, final AttrTO template) {\n+    private AttrTO evaluateAttr(final AttrTO template, final MapContext jexlContext) {\n         AttrTO result = new AttrTO();\n         result.setSchema(template.getSchema());\n \n         if (template.getValues() != null && !template.getValues().isEmpty()) {\n             template.getValues().forEach(value -> {\n-                String evaluated = JexlUtils.evaluate(value, anyTO, new MapContext());\n+                String evaluated = JexlUtils.evaluate(value, jexlContext);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     result.getValues().add(evaluated);\n                 }\n@@ -67,8 +67,14 @@ private AttrTO evaluateAttr(final AnyTO anyTO, final AttrTO template) {\n     }\n \n     private void fill(final AnyTO anyTO, final AnyTO template) {\n+        MapContext jexlContext = new MapContext();\n+        JexlUtils.addFieldsToContext(anyTO, jexlContext);\n+        JexlUtils.addAttrTOsToContext(anyTO.getPlainAttrs(), jexlContext);\n+        JexlUtils.addAttrTOsToContext(anyTO.getDerAttrs(), jexlContext);\n+        JexlUtils.addAttrTOsToContext(anyTO.getVirAttrs(), jexlContext);\n+\n         if (template.getRealm() != null) {\n-            String evaluated = JexlUtils.evaluate(template.getRealm(), anyTO, new MapContext());\n+            String evaluated = JexlUtils.evaluate(template.getRealm(), jexlContext);\n             if (StringUtils.isNotBlank(evaluated)) {\n                 anyTO.setRealm(evaluated);\n             }\n@@ -80,7 +86,11 @@ private void fill(final AnyTO anyTO, final AnyTO template) {\n                     && (!currentAttrMap.containsKey(templatePlainAttr.getSchema())\n                     || currentAttrMap.get(templatePlainAttr.getSchema()).getValues().isEmpty())) {\n \n-                anyTO.getPlainAttrs().add(evaluateAttr(anyTO, templatePlainAttr));\n+                AttrTO evaluated = evaluateAttr(templatePlainAttr, jexlContext);\n+                if (!evaluated.getValues().isEmpty()) {\n+                    anyTO.getPlainAttrs().add(evaluated);\n+                    jexlContext.set(evaluated.getSchema(), evaluated.getValues().get(0));\n+                }\n             }\n         }\n \n@@ -97,7 +107,11 @@ private void fill(final AnyTO anyTO, final AnyTO template) {\n                     && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n                     || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {\n \n-                anyTO.getVirAttrs().add(evaluateAttr(anyTO, templateVirAttr));\n+                AttrTO evaluated = evaluateAttr(templateVirAttr, jexlContext);\n+                if (!evaluated.getValues().isEmpty()) {\n+                    anyTO.getVirAttrs().add(evaluated);\n+                    jexlContext.set(evaluated.getSchema(), evaluated.getValues().get(0));\n+                }\n             }\n         }\n \n@@ -134,19 +148,25 @@ public <T extends AnyTO> void apply(final T anyTO, final Optional<? extends AnyT\n     public <T extends AnyTO> void apply(final T anyTO, final AnyTO template) {\n         fill(anyTO, template);\n \n+        MapContext jexlContext = new MapContext();\n+        JexlUtils.addFieldsToContext(anyTO, jexlContext);\n+        JexlUtils.addAttrTOsToContext(anyTO.getPlainAttrs(), jexlContext);\n+        JexlUtils.addAttrTOsToContext(anyTO.getDerAttrs(), jexlContext);\n+        JexlUtils.addAttrTOsToContext(anyTO.getVirAttrs(), jexlContext);\n+\n         if (template instanceof AnyObjectTO) {\n             fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n             fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n         } else if (template instanceof UserTO) {\n             if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO, new MapContext());\n+                String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), jexlContext);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     ((UserTO) anyTO).setUsername(evaluated);\n                 }\n             }\n \n             if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO, new MapContext());\n+                String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), jexlContext);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     ((UserTO) anyTO).setPassword(evaluated);\n                 }\n@@ -156,7 +176,7 @@ public <T extends AnyTO> void apply(final T anyTO, final AnyTO template) {\n             fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n         } else if (template instanceof GroupTO) {\n             if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n-                String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO, new MapContext());\n+                String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), jexlContext);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     ((GroupTO) anyTO).setName(evaluated);\n                 }"}]}