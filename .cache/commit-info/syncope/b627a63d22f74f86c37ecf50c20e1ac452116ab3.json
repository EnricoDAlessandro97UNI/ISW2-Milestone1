{"sha":"b627a63d22f74f86c37ecf50c20e1ac452116ab3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI2MjdhNjNkMjJmNzRmODZjMzdlY2Y1MGMyMGUxYWM0NTIxMTZhYjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-11T14:34:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-11T14:34:17Z"},"message":"Build with JDK 8","tree":{"sha":"f3da5edcaae2fc0d8d9592e369d4e7ed6bfa3b1e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f3da5edcaae2fc0d8d9592e369d4e7ed6bfa3b1e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b627a63d22f74f86c37ecf50c20e1ac452116ab3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b627a63d22f74f86c37ecf50c20e1ac452116ab3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b627a63d22f74f86c37ecf50c20e1ac452116ab3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b627a63d22f74f86c37ecf50c20e1ac452116ab3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"81515d7e243e8116409e2be2cb6bf036a305f988","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/81515d7e243e8116409e2be2cb6bf036a305f988","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/81515d7e243e8116409e2be2cb6bf036a305f988"}],"stats":{"total":14,"additions":7,"deletions":7},"files":[{"sha":"e20c77c462811bd7f442330057f99040466a4104","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b627a63d22f74f86c37ecf50c20e1ac452116ab3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b627a63d22f74f86c37ecf50c20e1ac452116ab3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=b627a63d22f74f86c37ecf50c20e1ac452116ab3","patch":"@@ -41,13 +41,13 @@\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n+import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n import java.util.Optional;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.xml.namespace.QName;\n-import org.apache.commons.codec.binary.Base64;\n import org.apache.cxf.helpers.DOMUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n@@ -203,7 +203,7 @@ public void createLoginRequest() {\n \n         assertEquals(\"https://idp.testshib.org/idp/profile/SAML2/POST/SSO\", loginRequest.getIdpServiceAddress());\n         assertNotNull(loginRequest.getContent());\n-        assertTrue(Base64.isBase64(loginRequest.getContent()));\n+        assertTrue(org.apache.commons.codec.binary.Base64.isBase64(loginRequest.getContent()));\n         assertNotNull(loginRequest.getRelayState());\n     }\n \n@@ -257,7 +257,7 @@ public void validateLoginResponse() throws Exception {\n \n         assertEquals(\"https://localhost:8443/fediz-idp/saml/up\", loginRequest.getIdpServiceAddress());\n         assertNotNull(loginRequest.getContent());\n-        assertTrue(Base64.isBase64(loginRequest.getContent()));\n+        assertTrue(org.apache.commons.codec.binary.Base64.isBase64(loginRequest.getContent()));\n         assertNotNull(loginRequest.getRelayState());\n \n         // Check a null relaystate\n@@ -291,7 +291,7 @@ public void validateLoginResponse() throws Exception {\n         String responseStr = DOM2Writer.nodeToString(responseElement);\n \n         // Validate the SAML Response\n-        response.setSamlResponse(java.util.Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n         SAML2LoginResponseTO loginResponse = saml2Service.validateLoginResponse(response);\n         assertNotNull(loginResponse.getAccessToken());\n         assertEquals(\"puccini\", loginResponse.getNameID());\n@@ -323,7 +323,7 @@ public void unsignedAssertionInLoginResponse() throws Exception {\n         String responseStr = DOM2Writer.nodeToString(responseElement);\n \n         // Validate the SAML Response\n-        response.setSamlResponse(java.util.Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n         try {\n             saml2Service.validateLoginResponse(response);\n             fail(\"Failure expected on an unsigned Assertion\");\n@@ -385,7 +385,7 @@ public void loginResponseWrappingAttack() throws Exception {\n         String responseStr = DOM2Writer.nodeToString(responseElement);\n \n         // Validate the SAML Response\n-        response.setSamlResponse(java.util.Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n         try {\n             saml2Service.validateLoginResponse(response);\n             fail(\"Failure expected on an unsigned Assertion\");\n@@ -500,7 +500,7 @@ private static void updateMetadataWithCert() throws Exception {\n         InputStream input = Files.newInputStream(truststorePath);\n         keyStore.load(input, \"security\".toCharArray());\n         X509Certificate cert = (X509Certificate) keyStore.getCertificate(\"subject\");\n-        String certEncoded = java.util.Base64.getMimeEncoder().encodeToString(cert.getEncoded());\n+        String certEncoded = Base64.getMimeEncoder().encodeToString(cert.getEncoded());\n \n         // Replace the \"cert-placeholder\" string in the metadata with the actual cert\n         String basedir = System.getProperty(\"basedir\");"}]}