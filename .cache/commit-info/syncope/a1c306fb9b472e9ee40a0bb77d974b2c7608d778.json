{"sha":"a1c306fb9b472e9ee40a0bb77d974b2c7608d778","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmExYzMwNmZiOWI0NzJlOWVlNDBhMGJiNzdkOTc0YjJjNzYwOGQ3Nzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-03-15T19:56:42Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-03-15T19:56:42Z"},"message":"[SYNCOPE-1545] Refactor and cleanup the new REST services (#245)","tree":{"sha":"c745dab4a5d2a4c760916d79cd14f678c36e4d1c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c745dab4a5d2a4c760916d79cd14f678c36e4d1c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a1c306fb9b472e9ee40a0bb77d974b2c7608d778","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT7v6CRBK7hj4Ov3rIwAAdHIIAItv2s6qNN15Q7Pa0fLr0+YP\n/cHM9+m/1LjuyN75v4fs9nDhAvIxB5W6Hpngjicjg+aqwuQ/0BuhF/i/r8xc6LT2\nahQwCIikMuUiwoAUfYTfBV6qr1IqrEgIQV23ccgFX7qNWSC9ykk6IjryH0Izo8Mu\n/pLgnSRLcPramcfy0HtHCq0XrHbeO+oRdA78g4pCaGSK2U6m5KeEefL9p1F2TFqE\nhtqtVkJRC7aEk9FRm/hfn+aikCL+RKH3ctuo8N7tiFzYPliv6T6BSwgpdzOFx8Qh\nHT5z83AGFy32jXfiJ/gjZJwgqDDiUh91m+TxoNXNApbEA2KfPVbGPu1ncPSnVEo=\n=0di3\n-----END PGP SIGNATURE-----\n","payload":"tree c745dab4a5d2a4c760916d79cd14f678c36e4d1c\nparent 54307db09634af08f0d61680ee9487ee19b43fd6\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1615838202 +0100\ncommitter GitHub <noreply@github.com> 1615838202 +0100\n\n[SYNCOPE-1545] Refactor and cleanup the new REST services (#245)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1c306fb9b472e9ee40a0bb77d974b2c7608d778","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a1c306fb9b472e9ee40a0bb77d974b2c7608d778","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"54307db09634af08f0d61680ee9487ee19b43fd6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54307db09634af08f0d61680ee9487ee19b43fd6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/54307db09634af08f0d61680ee9487ee19b43fd6"}],"stats":{"total":6016,"additions":2465,"deletions":3551},"files":[{"sha":"3fd55d41b9654c1dfcdbab98cd5192a5b29f5823","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -122,7 +122,7 @@ default List<String> properties() {\n         }\n \n         default void setFieldAccess(\n-                FieldPanel value,\n+                FieldPanel<String> value,\n                 AjaxTextFieldPanel property,\n                 LoadableDetachableModel<List<String>> properties) {\n "},{"sha":"3d81d94f67e7758ac91f8e8041907fb14b17f8a9","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthProfileTO.java","status":"modified","additions":116,"deletions":30,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthProfileTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthProfileTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthProfileTO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -22,21 +22,100 @@\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import javax.ws.rs.PathParam;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n \n public class AuthProfileTO implements EntityTO {\n \n     private static final long serialVersionUID = -6543425997956703057L;\n \n-    private final List<GoogleMfaAuthToken> googleMfaAuthTokens = new ArrayList<>();\n+    public static class Builder {\n+\n+        private final AuthProfileTO instance = new AuthProfileTO();\n+\n+        public AuthProfileTO.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder googleMfaAuthToken(final GoogleMfaAuthToken token) {\n+            instance.getGoogleMfaAuthTokens().add(token);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder googleMfaAuthTokens(final GoogleMfaAuthToken... tokens) {\n+            instance.getGoogleMfaAuthTokens().addAll(List.of(tokens));\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder googleMfaAuthTokens(final Collection<GoogleMfaAuthToken> tokens) {\n+            instance.getGoogleMfaAuthTokens().addAll(tokens);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder googleMfaAuthAccount(final GoogleMfaAuthAccount account) {\n+            instance.getGoogleMfaAuthAccounts().add(account);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder googleMfaAuthAccounts(final GoogleMfaAuthAccount... accounts) {\n+            instance.getGoogleMfaAuthAccounts().addAll(List.of(accounts));\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder googleMfaAuthAccounts(final Collection<GoogleMfaAuthAccount> accounts) {\n+            instance.getGoogleMfaAuthAccounts().addAll(accounts);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder u2fRegisteredDevice(final U2FDevice device) {\n+            instance.getU2FRegisteredDevices().add(device);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder u2fRegisteredDevices(final U2FDevice... devices) {\n+            instance.getU2FRegisteredDevices().addAll(List.of(devices));\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder u2fRegisteredDevices(final Collection<U2FDevice> devices) {\n+            instance.getU2FRegisteredDevices().addAll(devices);\n+            return this;\n+        }\n+\n+        public AuthProfileTO.Builder webAuthnAccount(final WebAuthnAccount webAuthnAccount) {\n+            instance.setWebAuthnAccount(webAuthnAccount);\n+            return this;\n+        }\n+\n+        public AuthProfileTO build() {\n+            return instance;\n+        }\n+    }\n \n     private String key;\n \n     private String owner;\n \n+    private final List<GoogleMfaAuthToken> googleMfaAuthTokens = new ArrayList<>();\n+\n+    private final List<GoogleMfaAuthAccount> googleMfaAuthAccounts = new ArrayList<>();\n+\n+    private final List<U2FDevice> u2fRegisteredDevices = new ArrayList<>();\n+\n+    private WebAuthnAccount webAuthnAccount;\n+\n     @Override\n     public String getKey() {\n         return key;\n@@ -61,14 +140,37 @@ public void setOwner(final String owner) {\n     public List<GoogleMfaAuthToken> getGoogleMfaAuthTokens() {\n         return googleMfaAuthTokens;\n     }\n-    \n+\n+    @JacksonXmlElementWrapper(localName = \"googleMfaAuthAccounts\")\n+    @JacksonXmlProperty(localName = \"googleMfaAuthAccount\")\n+    public List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts() {\n+        return googleMfaAuthAccounts;\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"u2fRegisteredDevices\")\n+    @JacksonXmlProperty(localName = \"u2fRegisteredDevice\")\n+    public List<U2FDevice> getU2FRegisteredDevices() {\n+        return u2fRegisteredDevices;\n+    }\n+\n+    public WebAuthnAccount getWebAuthnAccount() {\n+        return webAuthnAccount;\n+    }\n+\n+    public void setWebAuthnAccount(final WebAuthnAccount webAuthnAccount) {\n+        this.webAuthnAccount = webAuthnAccount;\n+    }\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n-            append(key).\n-            append(owner).\n-            append(googleMfaAuthTokens).\n-            build();\n+                append(key).\n+                append(owner).\n+                append(googleMfaAuthTokens).\n+                append(googleMfaAuthAccounts).\n+                append(u2fRegisteredDevices).\n+                append(webAuthnAccount).\n+                build();\n     }\n \n     @Override\n@@ -84,28 +186,12 @@ public boolean equals(final Object obj) {\n         }\n         AuthProfileTO other = (AuthProfileTO) obj;\n         return new EqualsBuilder().\n-            append(key, other.key).\n-            append(owner, other.owner).\n-            append(googleMfaAuthTokens, other.googleMfaAuthTokens).\n-            build();\n-    }\n-\n-    public static class Builder {\n-\n-        private final AuthProfileTO instance = new AuthProfileTO();\n-\n-        public AuthProfileTO.Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public AuthProfileTO.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public AuthProfileTO build() {\n-            return instance;\n-        }\n+                append(key, other.key).\n+                append(owner, other.owner).\n+                append(googleMfaAuthTokens, other.googleMfaAuthTokens).\n+                append(googleMfaAuthAccounts, other.googleMfaAuthAccounts).\n+                append(u2fRegisteredDevices, other.u2fRegisteredDevices).\n+                append(webAuthnAccount, other.webAuthnAccount).\n+                build();\n     }\n }"},{"sha":"f940618b1398b5068f3e99e1ec3340778419ba16","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/CASSPTO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCASSPTO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to.client;\n+package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/CASSPTO.java"},{"sha":"574403834cc40655e3b9b18c7a94e048f314862d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/ClientAppTO.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to.client;\n+package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n@@ -26,7 +26,6 @@\n import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.to.EntityTO;\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"_class\")\n @JsonPropertyOrder(value = { \"_class\", \"key\", \"description\" })","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/ClientAppTO.java"},{"sha":"3d4c3b1748195d4a74c030f6ea6ac068139eafe5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCRPTO.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPTO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to.client;\n+package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/OIDCRPTO.java"},{"sha":"82a7987db94e1880e001722294225a9f7b47326e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPTO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to.client;\n+package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.XmlSecAlgorithms;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n \n import java.util.ArrayList;","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/SAML2SPTO.java"},{"sha":"103400acffbcd8adf9c82998c158ffd112c8a7fe","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":11,"deletions":23,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -56,31 +56,25 @@ public final class AMEntitlement {\n \n     public static final String AUTH_MODULE_DELETE = \"AUTH_MODULE_DELETE\";\n \n-    public static final String SAML2_IDP_METADATA_CREATE = \"SAML2_IDP_METADATA_CREATE\";\n-\n-    public static final String SAML2_IDP_METADATA_UPDATE = \"SAML2_IDP_METADATA_UPDATE\";\n+    public static final String SAML2_IDP_METADATA_SET = \"SAML2_IDP_METADATA_SET\";\n \n     public static final String SAML2_IDP_METADATA_READ = \"SAML2_IDP_METADATA_READ\";\n \n-    public static final String SAML2_SP_METADATA_CREATE = \"SAML2_SP_METADATA_CREATE\";\n-\n-    public static final String SAML2_SP_METADATA_UPDATE = \"SAML2_SP_METADATA_UPDATE\";\n+    public static final String SAML2_SP_METADATA_SET = \"SAML2_SP_METADATA_SET\";\n \n     public static final String SAML2_SP_METADATA_READ = \"SAML2_SP_METADATA_READ\";\n \n-    public static final String SAML2_SP_KEYSTORE_CREATE = \"SAML2_SP_KEYSTORE_CREATE\";\n-\n-    public static final String SAML2_SP_KEYSTORE_UPDATE = \"SAML2_SP_KEYSTORE_UPDATE\";\n+    public static final String SAML2_SP_KEYSTORE_SET = \"SAML2_SP_KEYSTORE_SET\";\n \n     public static final String SAML2_SP_KEYSTORE_READ = \"SAML2_SP_KEYSTORE_READ\";\n \n     public static final String GOOGLE_MFA_DELETE_TOKEN = \"GOOGLE_MFA_DELETE_TOKEN\";\n \n-    public static final String GOOGLE_MFA_SAVE_TOKEN = \"GOOGLE_MFA_SAVE_TOKEN\";\n+    public static final String GOOGLE_MFA_STORE_TOKEN = \"GOOGLE_MFA_STORE_TOKEN\";\n \n     public static final String GOOGLE_MFA_READ_TOKEN = \"GOOGLE_MFA_READ_TOKEN\";\n \n-    public static final String GOOGLE_MFA_COUNT_TOKEN = \"GOOGLE_MFA_COUNT_TOKEN\";\n+    public static final String GOOGLE_MFA_LIST_TOKENS = \"GOOGLE_MFA_LIST_TOKENS\";\n \n     public static final String AUTH_PROFILE_DELETE = \"AUTH_PROFILE_DELETE\";\n \n@@ -90,43 +84,37 @@ public final class AMEntitlement {\n \n     public static final String GOOGLE_MFA_DELETE_ACCOUNT = \"GOOGLE_MFA_DELETE_ACCOUNT\";\n \n-    public static final String GOOGLE_MFA_SAVE_ACCOUNT = \"GOOGLE_MFA_SAVE_ACCOUNT\";\n+    public static final String GOOGLE_MFA_CREATE_ACCOUNT = \"GOOGLE_MFA_CREATE_ACCOUNT\";\n \n     public static final String GOOGLE_MFA_UPDATE_ACCOUNT = \"GOOGLE_MFA_UPDATE_ACCOUNT\";\n \n     public static final String GOOGLE_MFA_READ_ACCOUNT = \"GOOGLE_MFA_READ_ACCOUNT\";\n \n-    public static final String GOOGLE_MFA_COUNT_ACCOUNTS = \"GOOGLE_MFA_COUNT_ACCOUNTS\";\n-\n     public static final String GOOGLE_MFA_LIST_ACCOUNTS = \"GOOGLE_MFA_LIST_ACCOUNTS\";\n \n-    public static final String OIDC_JWKS_CREATE = \"OIDC_JWKS_CREATE\";\n+    public static final String OIDC_JWKS_GENERATE = \"OIDC_JWKS_GENERATE\";\n \n     public static final String OIDC_JWKS_READ = \"OIDC_JWKS_READ\";\n \n-    public static final String OIDC_JWKS_UPDATE = \"OIDC_JWKS_UPDATE\";\n-\n     public static final String OIDC_JWKS_DELETE = \"OIDC_JWKS_DELETE\";\n \n     public static final String U2F_DELETE_DEVICE = \"U2F_DELETE_DEVICE\";\n \n-    public static final String U2F_SAVE_DEVICE = \"U2F_SAVE_DEVICE\";\n+    public static final String U2F_CREATE_DEVICE = \"U2F_CREATE_DEVICE\";\n \n     public static final String U2F_READ_DEVICE = \"U2F_READ_DEVICE\";\n \n-    public static final String U2F_SEARCH = \"U2F_SEARCH\";\n+    public static final String U2F_SEARCH_DEVICES = \"U2F_SEARCH_DEVICES\";\n \n     public static final String U2F_UPDATE_DEVICE = \"U2F_UPDATE_DEVICE\";\n \n     public static final String WA_CONFIG_LIST = \"WA_CONFIG_LIST\";\n \n-    public static final String WA_CONFIG_UPDATE = \"WA_CONFIG_UPDATE\";\n+    public static final String WA_CONFIG_SET = \"WA_CONFIG_SET\";\n \n     public static final String WA_CONFIG_DELETE = \"WA_CONFIG_DELETE\";\n \n-    public static final String WA_CONFIG_READ = \"WA_CONFIG_READ\";\n-\n-    public static final String WA_CONFIG_CREATE = \"WA_CONFIG_CREATE\";\n+    public static final String WA_CONFIG_GET = \"WA_CONFIG_GET\";\n \n     public static final String WA_CONFIG_PUSH = \"WA_CONFIG_PUSH\";\n "},{"sha":"5fa0658998996102ceaeb1d7f4d61307ab4f873f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/XmlSecAlgorithms.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FXmlSecAlgorithms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FXmlSecAlgorithms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FXmlSecAlgorithms.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,8 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n-package org.apache.syncope.common.lib;\n+package org.apache.syncope.common.lib.types;\n \n public enum XmlSecAlgorithms {\n ","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/XmlSecAlgorithms.java"},{"sha":"aa48e9870e2b33547386cb085576021fea8dac74","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/GoogleMfaAuthAccount.java","status":"renamed","additions":78,"deletions":97,"changes":175,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthAccount.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,22 +16,65 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n-package org.apache.syncope.common.lib.types;\n-\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ToStringBuilder;\n-import org.apache.syncope.common.lib.BaseBean;\n+package org.apache.syncope.common.lib.wa;\n \n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n \n public class GoogleMfaAuthAccount implements BaseBean {\n+\n     private static final long serialVersionUID = 1274073386484048953L;\n \n+    public static class Builder {\n+\n+        private final GoogleMfaAuthAccount instance = new GoogleMfaAuthAccount();\n+\n+        public GoogleMfaAuthAccount.Builder registrationDate(final Date date) {\n+            instance.setRegistrationDate(date);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder scratchCodes(final List<Integer> codes) {\n+            instance.setScratchCodes(codes);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder secretKey(final String key) {\n+            instance.setSecretKey(key);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder validationCode(final Integer code) {\n+            instance.setValidationCode(code);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder id(final Long id) {\n+            instance.setId(id);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder name(final String name) {\n+            instance.setName(name);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount build() {\n+            return instance;\n+        }\n+    }\n+\n     private String key;\n \n     private String secretKey;\n@@ -44,8 +87,6 @@ public class GoogleMfaAuthAccount implements BaseBean {\n \n     private List<Integer> scratchCodes = new ArrayList<>(0);\n \n-    private String owner;\n-\n     private Date registrationDate;\n \n     public String getKey() {\n@@ -72,14 +113,6 @@ public void setId(final long id) {\n         this.id = id;\n     }\n \n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n-    }\n-\n     public String getSecretKey() {\n         return secretKey;\n     }\n@@ -106,27 +139,26 @@ public void setScratchCodes(final List<Integer> scratchCodes) {\n \n     public Date getRegistrationDate() {\n         return Optional.ofNullable(this.registrationDate).\n-            map(date -> new Date(date.getTime())).orElse(null);\n+                map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setRegistrationDate(final Date registrationDate) {\n         this.registrationDate = Optional.ofNullable(registrationDate).\n-            map(date -> new Date(date.getTime())).orElse(null);\n+                map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()\n-            .appendSuper(super.hashCode())\n-            .append(key)\n-            .append(secretKey)\n-            .append(owner)\n-            .append(name)\n-            .append(id)\n-            .append(scratchCodes)\n-            .append(validationCode)\n-            .append(registrationDate)\n-            .toHashCode();\n+                .appendSuper(super.hashCode())\n+                .append(key)\n+                .append(secretKey)\n+                .append(name)\n+                .append(id)\n+                .append(scratchCodes)\n+                .append(validationCode)\n+                .append(registrationDate)\n+                .toHashCode();\n     }\n \n     @Override\n@@ -142,78 +174,27 @@ public boolean equals(final Object obj) {\n         }\n         GoogleMfaAuthAccount rhs = (GoogleMfaAuthAccount) obj;\n         return new EqualsBuilder()\n-            .appendSuper(super.equals(obj))\n-            .append(this.key, rhs.key)\n-            .append(this.secretKey, rhs.secretKey)\n-            .append(this.owner, rhs.owner)\n-            .append(this.name, rhs.name)\n-            .append(this.id, rhs.id)\n-            .append(this.scratchCodes, rhs.scratchCodes)\n-            .append(this.registrationDate, rhs.registrationDate)\n-            .append(this.validationCode, rhs.validationCode)\n-            .isEquals();\n+                .appendSuper(super.equals(obj))\n+                .append(this.key, rhs.key)\n+                .append(this.secretKey, rhs.secretKey)\n+                .append(this.name, rhs.name)\n+                .append(this.id, rhs.id)\n+                .append(this.scratchCodes, rhs.scratchCodes)\n+                .append(this.registrationDate, rhs.registrationDate)\n+                .append(this.validationCode, rhs.validationCode)\n+                .isEquals();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-            .append(\"key\", key)\n-            .append(\"name\", name)\n-            .append(\"secretKey\", secretKey)\n-            .append(\"owner\", owner)\n-            .append(\"id\", id)\n-            .append(\"scratchCodes\", scratchCodes)\n-            .append(\"registrationDate\", registrationDate)\n-            .append(\"validationCode\", validationCode)\n-            .toString();\n-    }\n-\n-    public static class Builder {\n-\n-        private final GoogleMfaAuthAccount instance = new GoogleMfaAuthAccount();\n-\n-        public GoogleMfaAuthAccount.Builder registrationDate(final Date date) {\n-            instance.setRegistrationDate(date);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount.Builder scratchCodes(final List<Integer> codes) {\n-            instance.setScratchCodes(codes);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount.Builder secretKey(final String key) {\n-            instance.setSecretKey(key);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount.Builder validationCode(final Integer code) {\n-            instance.setValidationCode(code);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount.Builder id(final Long id) {\n-            instance.setId(id);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount.Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount.Builder name(final String name) {\n-            instance.setName(name);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthAccount build() {\n-            return instance;\n-        }\n+                .append(\"key\", key)\n+                .append(\"name\", name)\n+                .append(\"secretKey\", secretKey)\n+                .append(\"id\", id)\n+                .append(\"scratchCodes\", scratchCodes)\n+                .append(\"registrationDate\", registrationDate)\n+                .append(\"validationCode\", validationCode)\n+                .toString();\n     }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GoogleMfaAuthAccount.java"},{"sha":"6d2a26c51bfd50aeb3a190c4dcd22e540b1da0a2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/GoogleMfaAuthToken.java","status":"renamed","additions":33,"deletions":51,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FGoogleMfaAuthToken.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.common.lib.wa;\n \n import java.util.Date;\n import java.util.Optional;\n@@ -29,11 +29,33 @@ public class GoogleMfaAuthToken implements BaseBean {\n \n     private static final long serialVersionUID = 2185073386484048953L;\n \n-    private String key;\n+    public static class Builder {\n+\n+        private final GoogleMfaAuthToken instance = new GoogleMfaAuthToken();\n+\n+        public GoogleMfaAuthToken.Builder issueDate(final Date issued) {\n+            instance.setIssueDate(issued);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthToken.Builder token(final int otp) {\n+            instance.setOtp(otp);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthToken.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n \n-    private Integer token;\n+        public GoogleMfaAuthToken build() {\n+            return instance;\n+        }\n+    }\n+\n+    private String key;\n \n-    private String owner;\n+    private int otp;\n \n     private Date issueDate;\n \n@@ -45,20 +67,12 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public Integer getToken() {\n-        return token;\n-    }\n-\n-    public void setToken(final Integer token) {\n-        this.token = token;\n-    }\n-\n-    public String getOwner() {\n-        return owner;\n+    public int getOtp() {\n+        return otp;\n     }\n \n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n+    public void setOtp(final int otp) {\n+        this.otp = otp;\n     }\n \n     public Date getIssueDate() {\n@@ -76,8 +90,7 @@ public int hashCode() {\n         return new HashCodeBuilder()\n                 .appendSuper(super.hashCode())\n                 .append(key)\n-                .append(token)\n-                .append(owner)\n+                .append(otp)\n                 .append(issueDate)\n                 .toHashCode();\n     }\n@@ -97,8 +110,7 @@ public boolean equals(final Object obj) {\n         return new EqualsBuilder()\n                 .appendSuper(super.equals(obj))\n                 .append(this.key, rhs.key)\n-                .append(this.token, rhs.token)\n-                .append(this.owner, rhs.owner)\n+                .append(this.otp, rhs.otp)\n                 .append(this.issueDate, rhs.issueDate)\n                 .isEquals();\n     }\n@@ -107,38 +119,8 @@ public boolean equals(final Object obj) {\n     public String toString() {\n         return new ToStringBuilder(this)\n                 .append(\"key\", key)\n-                .append(\"token\", token)\n-                .append(\"owner\", owner)\n+                .append(\"token\", otp)\n                 .append(\"issueDate\", issueDate)\n                 .toString();\n     }\n-\n-    public static class Builder {\n-\n-        private final GoogleMfaAuthToken instance = new GoogleMfaAuthToken();\n-\n-        public GoogleMfaAuthToken.Builder issueDate(final Date issued) {\n-            instance.setIssueDate(issued);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthToken.Builder token(final Integer token) {\n-            instance.setToken(token);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthToken.Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthToken.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public GoogleMfaAuthToken build() {\n-            return instance;\n-        }\n-    }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GoogleMfaAuthToken.java"},{"sha":"a37e471276f92186985626482fb3f50ddede75a1","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/U2FDevice.java","status":"renamed","additions":55,"deletions":72,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FU2FDevice.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,34 +16,62 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.common.lib.wa;\n \n+import java.util.Date;\n+import java.util.Optional;\n+import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.syncope.common.lib.BaseBean;\n \n-import java.util.Date;\n-import java.util.Optional;\n-\n-public class U2FRegisteredDevice implements BaseBean {\n+public class U2FDevice implements BaseBean {\n \n     private static final long serialVersionUID = 1185073386484048953L;\n \n+    public static class Builder {\n+\n+        private final U2FDevice instance = new U2FDevice();\n+\n+        public U2FDevice.Builder issueDate(final Date issued) {\n+            instance.setIssueDate(issued);\n+            return this;\n+        }\n+\n+        public U2FDevice.Builder record(final String record) {\n+            instance.setRecord(record);\n+            return this;\n+        }\n+\n+        public U2FDevice.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public U2FDevice.Builder id(final long id) {\n+            instance.setId(id);\n+            return this;\n+        }\n+\n+        public U2FDevice build() {\n+            return instance;\n+        }\n+    }\n+\n     private long id;\n \n     private String key;\n \n     private String record;\n \n-    private String owner;\n-\n     private Date issueDate;\n \n     public String getKey() {\n         return key;\n     }\n \n+    @PathParam(\"key\")\n     public void setKey(final String key) {\n         this.key = key;\n     }\n@@ -56,14 +84,6 @@ public void setRecord(final String record) {\n         this.record = record;\n     }\n \n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n-    }\n-\n     public long getId() {\n         return id;\n     }\n@@ -74,24 +94,23 @@ public void setId(final long id) {\n \n     public Date getIssueDate() {\n         return Optional.ofNullable(this.issueDate).\n-            map(date -> new Date(date.getTime())).orElse(null);\n+                map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     public void setIssueDate(final Date issueDate) {\n         this.issueDate = Optional.ofNullable(issueDate).\n-            map(date -> new Date(date.getTime())).orElse(null);\n+                map(date -> new Date(date.getTime())).orElse(null);\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()\n-            .appendSuper(super.hashCode())\n-            .append(key)\n-            .append(record)\n-            .append(owner)\n-            .append(id)\n-            .append(issueDate)\n-            .toHashCode();\n+                .appendSuper(super.hashCode())\n+                .append(key)\n+                .append(record)\n+                .append(id)\n+                .append(issueDate)\n+                .toHashCode();\n     }\n \n     @Override\n@@ -105,59 +124,23 @@ public boolean equals(final Object obj) {\n         if (obj.getClass() != getClass()) {\n             return false;\n         }\n-        U2FRegisteredDevice rhs = (U2FRegisteredDevice) obj;\n+        U2FDevice rhs = (U2FDevice) obj;\n         return new EqualsBuilder()\n-            .appendSuper(super.equals(obj))\n-            .append(this.key, rhs.key)\n-            .append(this.record, rhs.record)\n-            .append(this.owner, rhs.owner)\n-            .append(this.id, rhs.id)\n-            .append(this.issueDate, rhs.issueDate)\n-            .isEquals();\n+                .appendSuper(super.equals(obj))\n+                .append(this.key, rhs.key)\n+                .append(this.record, rhs.record)\n+                .append(this.id, rhs.id)\n+                .append(this.issueDate, rhs.issueDate)\n+                .isEquals();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-            .append(\"key\", key)\n-            .append(\"record\", record)\n-            .append(\"owner\", owner)\n-            .append(\"id\", id)\n-            .append(\"issueDate\", issueDate)\n-            .toString();\n-    }\n-\n-    public static class Builder {\n-\n-        private final U2FRegisteredDevice instance = new U2FRegisteredDevice();\n-\n-        public U2FRegisteredDevice.Builder issueDate(final Date issued) {\n-            instance.setIssueDate(issued);\n-            return this;\n-        }\n-\n-        public U2FRegisteredDevice.Builder record(final String record) {\n-            instance.setRecord(record);\n-            return this;\n-        }\n-\n-        public U2FRegisteredDevice.Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public U2FRegisteredDevice.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public U2FRegisteredDevice.Builder id(final long id) {\n-            instance.setId(id);\n-            return this;\n-        }\n-\n-        public U2FRegisteredDevice build() {\n-            return instance;\n-        }\n+                .append(\"key\", key)\n+                .append(\"record\", record)\n+                .append(\"id\", id)\n+                .append(\"issueDate\", issueDate)\n+                .toString();\n     }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/U2FRegisteredDevice.java"},{"sha":"ee4cda871e0a0e7824a7338cd73f2a1f8c14fda7","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WAClientApp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n \n public class WAClientApp implements BaseBean {\n "},{"sha":"f5f816945b4022e03404dd00fd41d9aa68b3f0b5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WebAuthnAccount.java","status":"renamed","additions":50,"deletions":57,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnAccount.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,57 +16,76 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.common.lib.wa;\n \n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.syncope.common.lib.BaseBean;\n-\n import java.util.List;\n \n public class WebAuthnAccount implements BaseBean {\n \n     private static final long serialVersionUID = 2285073386484048953L;\n \n-    private String key;\n+    public static class Builder {\n \n-    private List<WebAuthnDeviceCredential> records;\n+        private final WebAuthnAccount instance = new WebAuthnAccount();\n \n-    private String owner;\n+        public WebAuthnAccount.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n \n-    public String getKey() {\n-        return key;\n-    }\n+        public WebAuthnAccount.Builder credential(final WebAuthnDeviceCredential credential) {\n+            instance.getCredentials().add(credential);\n+            return this;\n+        }\n \n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n+        public WebAuthnAccount.Builder credentials(final WebAuthnDeviceCredential... credentials) {\n+            instance.getCredentials().addAll(List.of(credentials));\n+            return this;\n+        }\n \n-    public List<WebAuthnDeviceCredential> getRecords() {\n-        return records;\n+        public WebAuthnAccount.Builder credentials(final Collection<WebAuthnDeviceCredential> credentials) {\n+            instance.getCredentials().addAll(credentials);\n+            return this;\n+        }\n+\n+        public WebAuthnAccount build() {\n+            return instance;\n+        }\n     }\n \n-    public void setRecords(final List<WebAuthnDeviceCredential> record) {\n-        this.records = record;\n+    private String key;\n+\n+    private final List<WebAuthnDeviceCredential> credentials = new ArrayList<>();\n+\n+    public String getKey() {\n+        return key;\n     }\n \n-    public String getOwner() {\n-        return owner;\n+    public void setKey(final String key) {\n+        this.key = key;\n     }\n \n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n+    @JacksonXmlElementWrapper(localName = \"credentials\")\n+    @JacksonXmlProperty(localName = \"credential\")\n+    public List<WebAuthnDeviceCredential> getCredentials() {\n+        return credentials;\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()\n-            .appendSuper(super.hashCode())\n-            .append(key)\n-            .append(records)\n-            .append(owner)\n-            .toHashCode();\n+                .appendSuper(super.hashCode())\n+                .append(key)\n+                .append(credentials)\n+                .toHashCode();\n     }\n \n     @Override\n@@ -82,43 +101,17 @@ public boolean equals(final Object obj) {\n         }\n         WebAuthnAccount rhs = (WebAuthnAccount) obj;\n         return new EqualsBuilder()\n-            .appendSuper(super.equals(obj))\n-            .append(this.key, rhs.key)\n-            .append(this.records, rhs.records)\n-            .append(this.owner, rhs.owner)\n-            .isEquals();\n+                .appendSuper(super.equals(obj))\n+                .append(this.key, rhs.key)\n+                .append(this.credentials, rhs.credentials)\n+                .isEquals();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-            .append(\"key\", key)\n-            .append(\"records\", records)\n-            .append(\"owner\", owner)\n-            .toString();\n-    }\n-\n-    public static class Builder {\n-\n-        private final WebAuthnAccount instance = new WebAuthnAccount();\n-\n-        public WebAuthnAccount.Builder records(final List<WebAuthnDeviceCredential> records) {\n-            instance.setRecords(records);\n-            return this;\n-        }\n-\n-        public WebAuthnAccount.Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public WebAuthnAccount.Builder key(final String key) {\n-            instance.setKey(key);\n-            return this;\n-        }\n-\n-        public WebAuthnAccount build() {\n-            return instance;\n-        }\n+                .append(\"key\", key)\n+                .append(\"records\", credentials)\n+                .toString();\n     }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/WebAuthnAccount.java"},{"sha":"14fdb78289ae87169aa17749b953079d6d7456b0","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WebAuthnDeviceCredential.java","status":"renamed","additions":31,"deletions":49,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnDeviceCredential.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnDeviceCredential.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWebAuthnDeviceCredential.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.common.lib.wa;\n \n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n@@ -27,9 +27,26 @@ public class WebAuthnDeviceCredential implements BaseBean {\n \n     private static final long serialVersionUID = 1185073386484048953L;\n \n-    private String json;\n+    public static class Builder {\n+\n+        private final WebAuthnDeviceCredential instance = new WebAuthnDeviceCredential();\n \n-    private String owner;\n+        public WebAuthnDeviceCredential.Builder json(final String json) {\n+            instance.setJson(json);\n+            return this;\n+        }\n+\n+        public WebAuthnDeviceCredential.Builder identifier(final String identifier) {\n+            instance.setIdentifier(identifier);\n+            return this;\n+        }\n+\n+        public WebAuthnDeviceCredential build() {\n+            return instance;\n+        }\n+    }\n+\n+    private String json;\n \n     private String identifier;\n \n@@ -49,22 +66,13 @@ public void setJson(final String json) {\n         this.json = json;\n     }\n \n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setOwner(final String owner) {\n-        this.owner = owner;\n-    }\n-\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()\n-            .appendSuper(super.hashCode())\n-            .append(json)\n-            .append(identifier)\n-            .append(owner)\n-            .toHashCode();\n+                .appendSuper(super.hashCode())\n+                .append(json)\n+                .append(identifier)\n+                .toHashCode();\n     }\n \n     @Override\n@@ -80,43 +88,17 @@ public boolean equals(final Object obj) {\n         }\n         WebAuthnDeviceCredential rhs = (WebAuthnDeviceCredential) obj;\n         return new EqualsBuilder()\n-            .appendSuper(super.equals(obj))\n-            .append(this.json, rhs.json)\n-            .append(this.identifier, rhs.identifier)\n-            .append(this.owner, rhs.owner)\n-            .isEquals();\n+                .appendSuper(super.equals(obj))\n+                .append(this.json, rhs.json)\n+                .append(this.identifier, rhs.identifier)\n+                .isEquals();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-            .append(\"records\", json)\n-            .append(\"identifier\", identifier)\n-            .append(\"owner\", owner)\n-            .toString();\n-    }\n-\n-    public static class Builder {\n-\n-        private final WebAuthnDeviceCredential instance = new WebAuthnDeviceCredential();\n-\n-        public WebAuthnDeviceCredential.Builder json(final String json) {\n-            instance.setJson(json);\n-            return this;\n-        }\n-\n-        public WebAuthnDeviceCredential.Builder owner(final String owner) {\n-            instance.setOwner(owner);\n-            return this;\n-        }\n-\n-        public WebAuthnDeviceCredential.Builder identifier(final String identifier) {\n-            instance.setIdentifier(identifier);\n-            return this;\n-        }\n-\n-        public WebAuthnDeviceCredential build() {\n-            return instance;\n-        }\n+                .append(\"records\", json)\n+                .append(\"identifier\", identifier)\n+                .toString();\n     }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/WebAuthnDeviceCredential.java"},{"sha":"20115389e5a73d7924ab6a3dcec1a53d35bdd905","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/U2FDeviceQuery.java","status":"renamed","additions":40,"deletions":38,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FU2FDeviceQuery.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,22 +16,47 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n-package org.apache.syncope.common.rest.api.service.wa;\n+package org.apache.syncope.common.rest.api.beans;\n \n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import org.apache.syncope.common.rest.api.beans.AbstractQuery;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n-import javax.ws.rs.QueryParam;\n-\n import java.util.Date;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public class U2FDeviceQuery extends AbstractQuery {\n+\n     private static final long serialVersionUID = -7381828286332101171L;\n \n+    public static class Builder extends AbstractQuery.Builder<U2FDeviceQuery, U2FDeviceQuery.Builder> {\n+\n+        @Override\n+        protected U2FDeviceQuery newInstance() {\n+            return new U2FDeviceQuery();\n+        }\n+\n+        public U2FDeviceQuery.Builder entityKey(final String entityKey) {\n+            getInstance().setEntityKey(entityKey);\n+            return this;\n+        }\n+\n+        public U2FDeviceQuery.Builder owner(final String owner) {\n+            getInstance().setOwner(owner);\n+            return this;\n+        }\n+\n+        public U2FDeviceQuery.Builder id(final Long id) {\n+            getInstance().setId(id);\n+            return this;\n+        }\n+\n+        public U2FDeviceQuery.Builder expirationDate(final Date date) {\n+            getInstance().setExpirationDate(date);\n+            return this;\n+        }\n+    }\n+\n     private Long id;\n \n     private String entityKey;\n@@ -41,7 +66,8 @@ public class U2FDeviceQuery extends AbstractQuery {\n     private String owner;\n \n     @Parameter(name = JAXRSService.PARAM_ENTITY_KEY, in = ParameterIn.QUERY,\n-        schema = @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n+            schema =\n+            @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n     public String getEntityKey() {\n         return entityKey;\n     }\n@@ -51,7 +77,8 @@ public void setEntityKey(final String entityKey) {\n         this.entityKey = entityKey;\n     }\n \n-    @Parameter(name = \"id\", in = ParameterIn.QUERY, schema = @Schema(implementation = Long.class))\n+    @Parameter(name = \"id\", in = ParameterIn.QUERY, schema =\n+            @Schema(implementation = Long.class))\n     public Long getId() {\n         return id;\n     }\n@@ -61,7 +88,8 @@ public void setId(final Long id) {\n         this.id = id;\n     }\n \n-    @Parameter(name = \"expirationDate\", in = ParameterIn.QUERY, schema = @Schema(implementation = Date.class))\n+    @Parameter(name = \"expirationDate\", in = ParameterIn.QUERY, schema =\n+            @Schema(implementation = Date.class))\n     public Date getExpirationDate() {\n         return expirationDate;\n     }\n@@ -71,7 +99,8 @@ public void setExpirationDate(final Date expirationDate) {\n         this.expirationDate = expirationDate;\n     }\n \n-    @Parameter(name = \"owner\", in = ParameterIn.QUERY, schema = @Schema(implementation = String.class))\n+    @Parameter(name = \"owner\", in = ParameterIn.QUERY, schema =\n+            @Schema(implementation = String.class))\n     public String getOwner() {\n         return owner;\n     }\n@@ -80,31 +109,4 @@ public String getOwner() {\n     public void setOwner(final String owner) {\n         this.owner = owner;\n     }\n-\n-    public static class Builder extends AbstractQuery.Builder<U2FDeviceQuery, U2FDeviceQuery.Builder> {\n-        @Override\n-        protected U2FDeviceQuery newInstance() {\n-            return new U2FDeviceQuery();\n-        }\n-\n-        public U2FDeviceQuery.Builder entityKey(final String entityKey) {\n-            getInstance().setEntityKey(entityKey);\n-            return this;\n-        }\n-\n-        public U2FDeviceQuery.Builder owner(final String owner) {\n-            getInstance().setOwner(owner);\n-            return this;\n-        }\n-\n-        public U2FDeviceQuery.Builder id(final Long id) {\n-            getInstance().setId(id);\n-            return this;\n-        }\n-\n-        public U2FDeviceQuery.Builder expirationDate(final Date date) {\n-            getInstance().setExpirationDate(date);\n-            return this;\n-        }\n-    }\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/U2FDeviceQuery.java"},{"sha":"4f6a89dd729d755d849dc1120b0718774d42f39b","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthProfileService.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -26,7 +26,6 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import java.util.List;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n@@ -49,26 +48,26 @@ public interface AuthProfileService extends JAXRSService {\n     List<AuthProfileTO> list();\n \n     @GET\n-    @Path(\"owners/{owner}\")\n+    @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    AuthProfileTO findByOwner(@NotNull @PathParam(\"owner\") String owner);\n+    AuthProfileTO read(@NotNull @PathParam(\"key\") String key);\n \n     @GET\n-    @Path(\"{key}\")\n+    @Path(\"owners/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    AuthProfileTO findByKey(@NotNull @PathParam(\"key\") String key);\n+    AuthProfileTO readByOwner(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response deleteByKey(@NotNull @PathParam(\"key\") String key);\n+    void delete(@NotNull @PathParam(\"key\") String key);\n \n     @DELETE\n     @Path(\"owners/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response deleteByOwner(@NotNull @PathParam(\"owner\") String owner);\n+    void deleteByOwner(@NotNull @PathParam(\"owner\") String owner);\n }"},{"sha":"8ef62ffcfa804ce5e005d5abb6b95887c888f92f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ClientAppService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FClientAppService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FClientAppService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FClientAppService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -40,7 +40,7 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n "},{"sha":"edf20cc3764d93e274eecdc32eaa926465a9d64b","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCJWKSService.java","status":"modified","additions":29,"deletions":4,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,18 +18,27 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n-import javax.ws.rs.PUT;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n @Tag(name = \"OpenID Connect 1.0\")\n@@ -39,11 +48,27 @@\n @Path(\"oidc/jwks\")\n public interface OIDCJWKSService extends JAXRSService {\n \n-    @ApiResponse(responseCode = \"204\", description = \"Operation was successful\")\n-    @PUT\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    OIDCJWKSTO get();\n+\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+                description = \"JWKS successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n+        @ApiResponse(responseCode = \"409\",\n+                description = \"JWKS already exists\") })\n+    @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull OIDCJWKSTO jwksTO);\n+    Response generate(\n+            @NotNull @QueryParam(\"size\") @DefaultValue(\"2048\") int size,\n+            @NotNull @QueryParam(\"algorithm\") @DefaultValue(\"RS256\") JWSAlgorithm algorithm);\n \n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"1bf105a2df4ba2fb9fbf89cd643d5394c85d945c","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataService.java","status":"modified","additions":47,"deletions":12,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n@@ -28,36 +27,72 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n-import javax.ws.rs.PUT;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SAML 2.0 IdP metadata.\n  */\n-@FunctionalInterface\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n @Path(\"saml2idp/metadata\")\n public interface SAML2IdPMetadataService extends JAXRSService {\n \n+    String DEFAULT_OWNER = \"Syncope\";\n+\n+    /**\n+     * Returns a document outlining keys and metadata of Syncope as SAML 2.0 IdP.\n+     *\n+     * @param appliesTo indicates the SAML 2.0 IdP metadata document owner and applicability, where a value of 'Syncope'\n+     * indicates the Syncope server as the global owner of the metadata and keys.\n+     * @return SAML 2.0 IdP metadata\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2IdPMetadataTO readFor(@QueryParam(\"appliesTo\") @DefaultValue(DEFAULT_OWNER) String appliesTo);\n+\n     /**\n-     * Updates SAML 2.0 IdP metadata matching the given key.\n+     * Returns the SAML 2.0 IdP metadata matching the given key.\n      *\n-     * @param saml2IdPMetadataTO SAML2IdPMetadata to replace existing SAML 2.0 IdP metadata\n+     * @param key key of requested SAML 2.0 IdP metadata\n+     * @return SAML 2.0 IdP metadata with matching id\n      */\n-    @Parameter(name = \"key\", description = \"SAML2IdPMetadata's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n+    @GET\n     @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2IdPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Store the metadata and keys to finalize the metadata generation process.\n+     *\n+     * @param saml2IdPMetadataTO SAML2IdPMetadata to be created\n+     * @return Response object featuring Location header of created SAML 2.0 IdP metadata\n+     */\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+                description = \"SAML2IdPMetadata successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n+        @ApiResponse(responseCode = \"409\",\n+                description = \"Metadata already existing\") })\n+    @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull SAML2IdPMetadataTO saml2IdPMetadataTO);\n+    Response set(@NotNull SAML2IdPMetadataTO saml2IdPMetadataTO);\n }"},{"sha":"96bb97d816cebd352a0134f3cb54f14802862da5","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPKeystoreService.java","status":"modified","additions":43,"deletions":12,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n@@ -28,17 +27,21 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n-import javax.ws.rs.PUT;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SAML 2.0 SP Keystore.\n  */\n-@FunctionalInterface\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n@@ -47,17 +50,45 @@\n public interface SAML2SPKeystoreService extends JAXRSService {\n \n     /**\n-     * Updates SAML 2.0 SP keystore matching the given key.\n+     * Returns a document outlining keystore for Syncope as SAML 2.0 SP.\n      *\n-     * @param keystoreTO SAML2SPKeystoreTO to replace existing SAML 2.0 SP metadata\n+     * @param name indicates the SAML 2.0 SP keystore document owner.\n+     * @return SAML 2.0 SP keystore\n      */\n-    @Parameter(name = \"key\", description = \"SAML2SPKeystoreTO's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPKeystoreTO readFor(@QueryParam(\"name\") String name);\n+\n+    /**\n+     * Returns the SAML 2.0 SP keystore matching the given key.\n+     *\n+     * @param key key of requested SAML 2.0 SP keystore\n+     * @return SAML 2.0 SP keystore with matching id\n+     */\n+    @GET\n     @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPKeystoreTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Store the keystore to finalize the keystore generation process.\n+     *\n+     * @param keystoreTO SAML2SPMetadataKeystoreTO to be created\n+     * @return Response object featuring Location header of created SAML 2.0 SP keystore\n+     */\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+                description = \"SAML2SPKeystoreTO successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n+        @ApiResponse(responseCode = \"409\",\n+                description = \"Metadata already existing\") })\n+    @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull SAML2SPKeystoreTO keystoreTO);\n+    Response set(@NotNull SAML2SPKeystoreTO keystoreTO);\n }"},{"sha":"733f7ea343f8e366a2e2a767b33145b2433a36e3","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPMetadataService.java","status":"modified","additions":43,"deletions":12,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n@@ -28,17 +27,21 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n-import javax.ws.rs.PUT;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SAML 2.0 SP metadata.\n  */\n-@FunctionalInterface\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n@@ -47,17 +50,45 @@\n public interface SAML2SPMetadataService extends JAXRSService {\n \n     /**\n-     * Updates SAML 2.0 SP metadata matching the given key.\n+     * Returns a document outlining metadata for Syncope as SAML 2.0 SP.\n      *\n-     * @param metadataTO SAML2SPMetadata to replace existing SAML 2.0 SP metadata\n+     * @param name indicates the SAML 2.0 SP metadata document owner.\n+     * @return SAML 2.0 SP metadata\n      */\n-    @Parameter(name = \"key\", description = \"SAML2SPMetadata's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPMetadataTO readFor(@QueryParam(\"name\") String name);\n+\n+    /**\n+     * Returns the SAML 2.0 SP metadata matching the given key.\n+     *\n+     * @param key key of requested SAML 2.0 SP metadata\n+     * @return SAML 2.0 SP metadata with matching id\n+     */\n+    @GET\n     @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    SAML2SPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Store the metadata to finalize the metadata generation process.\n+     *\n+     * @param metadataTO SAML2SPMetadataTO to be created\n+     * @return Response object featuring Location header of created SAML 2.0 SP metadata\n+     */\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+                description = \"SAML2SPMetadata successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n+        @ApiResponse(responseCode = \"409\",\n+                description = \"Metadata already existing\") })\n+    @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull SAML2SPMetadataTO metadataTO);\n+    Response set(@NotNull SAML2SPMetadataTO metadataTO);\n }"},{"sha":"16c9d6ed53fecd09bf194edb18d4dd3f5d4ad952","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthAccountService.java","status":"modified","additions":16,"deletions":29,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -25,7 +25,6 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -38,11 +37,11 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-@Tag(name = \"Google MFA Accounts\")\n+@Tag(name = \"WA\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n@@ -52,20 +51,20 @@ public interface GoogleMfaAuthAccountService extends JAXRSService {\n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/owners/${owner}\")\n-    Response deleteAccountsFor(@NotNull @PathParam(\"owner\") String owner);\n+    @Path(\"accts/owners/{owner}\")\n+    void deleteFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/${key}\")\n-    Response deleteAccountBy(@NotNull @PathParam(\"key\") String key);\n+    @Path(\"accts/{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n \n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts\")\n-    Response deleteAll();\n+    void delete();\n \n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n@@ -74,50 +73,38 @@ public interface GoogleMfaAuthAccountService extends JAXRSService {\n                             @Schema(type = \"string\"),\n                             description = \"UUID generated for the entity created\") }) })\n     @POST\n+    @Path(\"accts/owners/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts\")\n-    Response save(@NotNull GoogleMfaAuthAccount acct);\n+    Response create(@NotNull @PathParam(\"owner\") String owner, @NotNull GoogleMfaAuthAccount acct);\n \n     @PUT\n-    @Path(\"accts\")\n+    @Path(\"accts/owners/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull GoogleMfaAuthAccount acct);\n+    void update(@NotNull @PathParam(\"owner\") String owner, @NotNull GoogleMfaAuthAccount acct);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/owners/${owner}\")\n-    List<GoogleMfaAuthAccount> findAccountsFor(@NotNull @PathParam(\"owner\") String owner);\n+    @Path(\"accts/owners/{owner}\")\n+    PagedResult<GoogleMfaAuthAccount> readFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Path(\"accts/{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    GoogleMfaAuthAccount findAccountBy(@NotNull @PathParam(\"key\") String key);\n+    GoogleMfaAuthAccount read(@NotNull @PathParam(\"key\") String key);\n \n     @GET\n     @Path(\"accts/id/{id}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    GoogleMfaAuthAccount findAccountBy(@NotNull @PathParam(\"id\") long id);\n-\n-    @GET\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/count\")\n-    PagedResult<GoogleMfaAuthAccount> countAll();\n-\n-    @GET\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"accts/count/{owner}\")\n-    PagedResult<GoogleMfaAuthAccount> countFor(@NotNull @PathParam(\"owner\") String owner);\n+    GoogleMfaAuthAccount read(@NotNull @PathParam(\"id\") long id);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts\")\n-    List<GoogleMfaAuthAccount> list();\n+    PagedResult<GoogleMfaAuthAccount> list();\n }"},{"sha":"8ce865a438859711f6841e38e723822833e21724","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthTokenService.java","status":"modified","additions":20,"deletions":39,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -22,98 +22,79 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n import java.util.Date;\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.ws.rs.PUT;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-@Tag(name = \"Google MFA Tokens\")\n+@Tag(name = \"WA\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/gauth\")\n public interface GoogleMfaAuthTokenService extends JAXRSService {\n \n     @DELETE\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"tokens\")\n-    Response deleteTokensByDate(@NotNull @QueryParam(\"expirationDate\") Date expirationDate);\n-\n-    @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/${owner}/${token}\")\n-    Response deleteToken(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"token\") Integer token);\n+    void delete(@QueryParam(\"expirationDate\") Date expirationDate);\n \n     @DELETE\n+    @Path(\"tokens/owners/{owner}/{otp}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/owners/${owner}\")\n-    Response deleteTokensFor(@NotNull @PathParam(\"owner\") String owner);\n+    void delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"otp\") int otp);\n \n     @DELETE\n+    @Path(\"tokens/owners/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/${token}\")\n-    Response deleteToken(@NotNull @PathParam(\"token\") Integer token);\n+    void deleteFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n+    @Path(\"tokens/{otp}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens\")\n-    Response deleteTokens();\n+    void delete(@NotNull @PathParam(\"otp\") int otp);\n \n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"GoogleMfaAuthToken successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\") }) })\n-    @POST\n+    @PUT\n+    @Path(\"tokens/owners/{owner}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens\")\n-    Response save(@NotNull GoogleMfaAuthToken token);\n+    void store(@NotNull @PathParam(\"owner\") String owner, @NotNull GoogleMfaAuthToken token);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/${owner}/${token}\")\n-    GoogleMfaAuthToken findTokenFor(\n-            @NotNull @PathParam(\"owner\") String owner,\n-            @NotNull @PathParam(\"token\") Integer token);\n+    @Path(\"tokens/owners/{owner}/{otp}\")\n+    GoogleMfaAuthToken readFor(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"otp\") int otp);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/owners/${owner}\")\n-    PagedResult<GoogleMfaAuthToken> findTokensFor(@NotNull @PathParam(\"owner\") String owner);\n+    @Path(\"tokens/owners/{owner}\")\n+    PagedResult<GoogleMfaAuthToken> readFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Path(\"tokens/{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    GoogleMfaAuthToken findTokenFor(@NotNull @PathParam(\"key\") String key);\n+    GoogleMfaAuthToken read(@NotNull @PathParam(\"key\") String key);\n \n     @GET\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Path(\"tokens/count\")\n-    PagedResult<GoogleMfaAuthToken> countTokens();\n+    @Path(\"tokens\")\n+    PagedResult<GoogleMfaAuthToken> list();\n }"},{"sha":"1826f2da8895c83324c06c65838efa1cd169f212","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/U2FRegistrationService.java","status":"modified","additions":28,"deletions":30,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FU2FRegistrationService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,19 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service.wa;\n \n-\n import io.swagger.v3.oas.annotations.headers.Header;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -43,46 +37,50 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.U2FDeviceQuery;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-@Tag(name = \"U2F Registrations\")\n+@Tag(name = \"WA\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/u2f\")\n public interface U2FRegistrationService extends JAXRSService {\n+\n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Path(\"devices\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response delete(@BeanParam U2FDeviceQuery query);\n \n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n-            description = \"U2FRegistration successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\")})})\n+                description = \"U2FRegistration successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\") }) })\n     @POST\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Path(\"devices\")\n-    Response create(@NotNull U2FRegisteredDevice acct);\n+    @Path(\"owners/{owner}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull @PathParam(\"owner\") String owner, @NotNull U2FDevice device);\n \n     @PUT\n-    @Path(\"devices\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    void update(@NotNull U2FRegisteredDevice acct);\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull U2FDevice device);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Path(\"devices\")\n-    PagedResult<U2FRegisteredDevice> search(@BeanParam U2FDeviceQuery query);\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    PagedResult<U2FDevice> search(@BeanParam U2FDeviceQuery query);\n \n     @GET\n     @Path(\"{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    U2FRegisteredDevice read(@NotNull @PathParam(\"key\") String key);\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    U2FDevice read(@NotNull @PathParam(\"key\") String key);\n }"},{"sha":"171d2b49780aba8bf67bb1dd1c1019654f2ed63f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WAClientAppService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAClientAppService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAClientAppService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAClientAppService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n /**\n- * REST operations for WA.\n+ * REST operations for WA to read client applications.\n  */\n @Tag(name = \"WA\")\n @SecurityRequirements({"},{"sha":"548a9b3276404b686e4d1f81039fa49efff33e6f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WAConfigService.java","status":"modified","additions":43,"deletions":40,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAConfigService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAConfigService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAConfigService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,17 +18,15 @@\n  */\n package org.apache.syncope.common.rest.api.service.wa;\n \n-import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -38,62 +36,67 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n-import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-\n-import java.util.List;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n /**\n  * REST operations for WA Configuration.\n  */\n @Tag(name = \"WA\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/config\")\n public interface WAConfigService extends JAXRSService {\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<Attr> list();\n \n+    /**\n+     * Returns configuration parameter with matching schema.\n+     *\n+     * @param schema identifier of configuration to be read\n+     * @return configuration parameter with matching schema\n+     */\n     @GET\n-    @Path(\"{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    Attr read(@NotNull @PathParam(\"key\") String key);\n+    @Path(\"{schema}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Attr get(@NotNull @PathParam(\"schema\") String schema);\n \n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-            description = \"WAConfigTO successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\"),\n-            @Header(name = HttpHeaders.LOCATION, schema =\n-            @Schema(type = \"string\"),\n-                description = \"URL of the entity created\")}),\n-        @ApiResponse(responseCode = \"409\",\n-            description = \"Config already existing\")})\n-    @POST\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    Response create(@NotNull Attr configTO);\n-    \n+    /**\n+     * Creates / updates the configuration parameter with the given schema.\n+     *\n+     * @param value parameter value\n+     */\n+    @Parameter(name = \"schema\", description = \"Configuration schema\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    void update(Attr configTO);\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Path(\"{schema}\")\n+    void set(@NotNull Attr value);\n \n+    /**\n+     * Deletes the configuration parameter with matching schema.\n+     *\n+     * @param schema configuration parameter schema\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Path(\"{key}\")\n-    void delete(@NotNull @PathParam(\"key\") String key);\n+    @Path(\"{schema}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(@NotNull @PathParam(\"schema\") String schema);\n \n     @ApiResponses(\n-        @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n     @Path(\"push\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"b3d511da01e73c14f2dc6b5cb09bf6c96db1a12d","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WAOIDCJWKSService.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAOIDCJWKSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAOIDCJWKSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAOIDCJWKSService.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,73 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service.wa;\n-\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.types.JWSAlgorithm;\n-\n-@Tag(name = \"OpenID Connect 1.0\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"wa/oidc/jwks\")\n-public interface WAOIDCJWKSService extends JAXRSService {\n-\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    OIDCJWKSTO get();\n-\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"JWKS successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\"),\n-                    @Header(name = HttpHeaders.LOCATION, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"URL of the entity created\") }),\n-        @ApiResponse(responseCode = \"409\",\n-                description = \"JWKS already exists\") })\n-    @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response set(\n-            @NotNull @QueryParam(\"size\") @DefaultValue(\"2048\") int size,\n-            @NotNull @QueryParam(\"algorithm\") @DefaultValue(\"RS256\") JWSAlgorithm algorithm);\n-}"},{"sha":"f5b73d4a747b78d40848ea5d5f9246c97b245aed","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WASAML2IdPMetadataService.java","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,100 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service.wa;\n-\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n-/**\n- * REST operations for SAML 2.0 IdP metadata.\n- */\n-@Tag(name = \"SAML 2.0\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"wa/saml2idp/metadata\")\n-public interface WASAML2IdPMetadataService extends JAXRSService {\n-\n-    String DEFAULT_OWNER = \"Syncope\";\n-\n-    /**\n-     * Returns a document outlining keys and metadata of Syncope as SAML 2.0 IdP.\n-     *\n-     * @param appliesTo indicates the SAML 2.0 IdP metadata document owner and applicability, where a value of 'Syncope'\n-     * indicates the Syncope server as the global owner of the metadata and keys.\n-     * @return SAML 2.0 IdP metadata\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2IdPMetadataTO getByOwner(@QueryParam(\"appliesTo\") @DefaultValue(DEFAULT_OWNER) String appliesTo);\n-\n-    /**\n-     * Returns the SAML 2.0 IdP metadata matching the given key.\n-     *\n-     * @param key key of requested SAML 2.0 IdP metadata\n-     * @return SAML 2.0 IdP metadata with matching id\n-     */\n-    @GET\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2IdPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n-\n-    /**\n-     * Store the metadata and keys to finalize the metadata generation process.\n-     *\n-     * @param saml2IdPMetadataTO SAML2IdPMetadata to be created\n-     * @return Response object featuring Location header of created SAML 2.0 IdP metadata\n-     */\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"SAML2IdPMetadata successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\"),\n-                    @Header(name = HttpHeaders.LOCATION, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"URL of the entity created\") }),\n-        @ApiResponse(responseCode = \"409\",\n-                description = \"Metadata already existing\") })\n-    @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response set(@NotNull SAML2IdPMetadataTO saml2IdPMetadataTO);\n-\n-}"},{"sha":"05e2021014d047a938807e72d09b494a7b4afa51","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WASAML2SPKeystoreService.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPKeystoreService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPKeystoreService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPKeystoreService.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,95 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service.wa;\n-\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n-/**\n- * REST operations for SAML 2.0 IdP keystore.\n- */\n-@Tag(name = \"SAML 2.0\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"wa/saml2sp/keystore\")\n-public interface WASAML2SPKeystoreService extends JAXRSService {\n-\n-    /**\n-     * Returns a document outlining keystore for Syncope as SAML 2.0 SP.\n-     *\n-     * @param name indicates the SAML 2.0 SP keystore document owner.\n-     * @return SAML 2.0 SP keystore\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPKeystoreTO getByOwner(@QueryParam(\"name\") String name);\n-\n-    /**\n-     * Returns the SAML 2.0 SP keystore matching the given key.\n-     *\n-     * @param key key of requested SAML 2.0 SP keystore\n-     * @return SAML 2.0 SP keystore with matching id\n-     */\n-    @GET\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPKeystoreTO read(@NotNull @PathParam(\"key\") String key);\n-\n-    /**\n-     * Store the keystore to finalize the keystore generation process.\n-     *\n-     * @param keystoreTO SAML2SPMetadataKeystoreTO to be created\n-     * @return Response object featuring Location header of created SAML 2.0 SP keystore\n-     */\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"SAML2SPKeystoreTO successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\"),\n-                    @Header(name = HttpHeaders.LOCATION, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"URL of the entity created\") }),\n-        @ApiResponse(responseCode = \"409\",\n-                description = \"Metadata already existing\") })\n-    @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response set(@NotNull SAML2SPKeystoreTO keystoreTO);\n-}"},{"sha":"f3c84b22216c78c10ddc5b5605ff5b172a770e0f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WASAML2SPMetadataService.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPMetadataService.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,95 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service.wa;\n-\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n-/**\n- * REST operations for SAML 2.0 SP metadata.\n- */\n-@Tag(name = \"SAML 2.0\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"wa/saml2sp/metadata\")\n-public interface WASAML2SPMetadataService extends JAXRSService {\n-\n-    /**\n-     * Returns a document outlining metadata for Syncope as SAML 2.0 SP.\n-     *\n-     * @param name indicates the SAML 2.0 SP metadata document owner.\n-     * @return SAML 2.0 SP metadata\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPMetadataTO getByOwner(@QueryParam(\"name\") String name);\n-\n-    /**\n-     * Returns the SAML 2.0 SP metadata matching the given key.\n-     *\n-     * @param key key of requested SAML 2.0 SP metadata\n-     * @return SAML 2.0 SP metadata with matching id\n-     */\n-    @GET\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    SAML2SPMetadataTO read(@NotNull @PathParam(\"key\") String key);\n-\n-    /**\n-     * Store the metadata to finalize the metadata generation process.\n-     *\n-     * @param metadataTO SAML2SPMetadataTO to be created\n-     * @return Response object featuring Location header of created SAML 2.0 SP metadata\n-     */\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"201\",\n-                description = \"SAML2SPMetadata successfully created\", headers = {\n-                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"UUID generated for the entity created\"),\n-                    @Header(name = HttpHeaders.LOCATION, schema =\n-                            @Schema(type = \"string\"),\n-                            description = \"URL of the entity created\") }),\n-        @ApiResponse(responseCode = \"409\",\n-                description = \"Metadata already existing\") })\n-    @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response set(@NotNull SAML2SPMetadataTO metadataTO);\n-}"},{"sha":"4d38434fe9dbfee8cedeb9c6db39ee511be0691e","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WebAuthnRegistrationService.java","status":"modified","additions":32,"deletions":33,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWebAuthnRegistrationService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.common.rest.api.service.wa;\n \n import io.swagger.v3.oas.annotations.headers.Header;\n@@ -26,10 +25,7 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -41,58 +37,61 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n-import java.util.List;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n @Tag(name = \"WA\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/webauthn\")\n public interface WebAuthnRegistrationService extends JAXRSService {\n+\n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<WebAuthnAccount> list();\n \n     @GET\n     @Path(\"{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     WebAuthnAccount read(@NotNull @PathParam(\"key\") String key);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Path(\"users/${owner}\")\n-    WebAuthnAccount findAccountFor(@NotNull @PathParam(\"owner\") String owner);\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Path(\"owners/{owner}\")\n+    WebAuthnAccount readFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Path(\"${owner}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Path(\"owners/{owner}\")\n     Response delete(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Path(\"${owner}/${credentialId}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Path(\"owners/{owner}/{credentialId}\")\n     Response delete(@NotNull @PathParam(\"owner\") String owner, @NotNull @PathParam(\"credentialId\") String credentialId);\n \n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n-            description = \"WebAuthn successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\")})})\n+                description = \"WebAuthn successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\") }) })\n     @POST\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    Response create(WebAuthnAccount account);\n+    @Path(\"owners/{owner}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull @PathParam(\"owner\") String owner, @NotNull WebAuthnAccount account);\n \n     @PUT\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    void update(@NotNull WebAuthnAccount account);\n-\n+    @Path(\"owners/{owner}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull @PathParam(\"owner\") String owner, @NotNull WebAuthnAccount account);\n }"},{"sha":"eaaba70fb5d676f45a669bbb11834955f28ac6d0","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AbstractAuthProfileLogic.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuthProfileLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n+\n+    @Autowired\n+    protected AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    protected AuthProfileDataBinder binder;\n+\n+    @Override\n+    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuthProfileTO) {\n+                    key = ((AuthProfileTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getAuthProfileTO(authProfileDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"d311a48481fc0248408e563998efe1f3eeeedf80","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthProfileLogic.java","status":"modified","additions":20,"deletions":57,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,92 +16,55 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.logic;\n \n-import org.apache.commons.lang3.ArrayUtils;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n-\n-import java.lang.reflect.Method;\n-import java.util.List;\n-import java.util.stream.Collectors;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class AuthProfileLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n-    @Autowired\n-    private AuthProfileDAO authProfileDAO;\n-\n-    @Autowired\n-    private AuthProfileDataBinder authProfileDataBinder;\n+public class AuthProfileLogic extends AbstractAuthProfileLogic {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_DELETE + \"') \")\n-    public void deleteByKey(final String key) {\n-        authProfileDAO.deleteByKey(key);\n+    public void delete(final String key) {\n+        authProfileDAO.delete(key);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_DELETE + \"') \")\n     public void deleteByOwner(final String owner) {\n-        authProfileDAO.deleteByOwner(owner);\n+        authProfileDAO.findByOwner(owner).ifPresent(authProfileDAO::delete);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_READ + \"') \")\n-    public AuthProfileTO findByOwner(final String owner) {\n-        AuthProfile authProfile = authProfileDAO.findByOwner(owner).orElse(null);\n-        if (authProfile == null) {\n-            throw new NotFoundException(owner + \" not found\");\n-        }\n-        return authProfileDataBinder.getAuthProfileTO(authProfile);\n+    @Transactional(readOnly = true)\n+    public AuthProfileTO readByOwner(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+                map(binder::getAuthProfileTO).\n+                orElseThrow(() -> new NotFoundException(owner + \" not found\"));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_READ + \"') \")\n-    public AuthProfileTO findByKey(final String key) {\n-        AuthProfile authProfile = authProfileDAO.findByKey(key).orElse(null);\n+    @Transactional(readOnly = true)\n+    public AuthProfileTO read(final String key) {\n+        AuthProfile authProfile = authProfileDAO.find(key);\n         if (authProfile == null) {\n             throw new NotFoundException(key + \" not found\");\n         }\n-        return authProfileDataBinder.getAuthProfileTO(authProfile);\n+        return binder.getAuthProfileTO(authProfile);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_LIST + \"')\")\n+    @Transactional(readOnly = true)\n     public List<AuthProfileTO> list() {\n         return authProfileDAO.findAll().\n-            stream().\n-            map(authProfileDataBinder::getAuthProfileTO).\n-            collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n-        String key = null;\n-\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof AuthProfileTO) {\n-                    key = ((AuthProfileTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                return findByKey(key);\n-            } catch (Throwable ignore) {\n-                LOG.debug(\"Unresolved reference\", ignore);\n-                throw new UnresolvedReferenceException(ignore);\n-            }\n-        }\n-\n-        throw new UnresolvedReferenceException();\n+                stream().\n+                map(binder::getAuthProfileTO).\n+                collect(Collectors.toList());\n     }\n }"},{"sha":"df0dc1109677d18bb3f9295d9e2b9f46a75b49b9","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/ClientAppLogic.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -27,14 +27,17 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import javax.annotation.Resource;\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.core.HttpHeaders;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.transport.http.auth.DefaultBasicAuthSupplier;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -54,10 +57,6 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-import javax.annotation.Resource;\n-import javax.ws.rs.InternalServerErrorException;\n-import javax.ws.rs.core.HttpHeaders;\n-\n @Component\n public class ClientAppLogic extends AbstractTransactionalLogic<ClientAppTO> {\n \n@@ -259,12 +258,12 @@ public void pushToWA() {\n         try {\n             NetworkService wa = serviceOps.get(NetworkService.Type.WA);\n             HttpClient.newBuilder().build().send(\n-                HttpRequest.newBuilder(URI.create(\n-                    StringUtils.appendIfMissing(wa.getAddress(), \"/\") + \"actuator/registeredServices\")).\n-                    header(HttpHeaders.AUTHORIZATION,\n-                        DefaultBasicAuthSupplier.getBasicAuthHeader(anonymousUser, anonymousKey)).\n-                    GET().build(),\n-                HttpResponse.BodyHandlers.discarding());\n+                    HttpRequest.newBuilder(URI.create(\n+                            StringUtils.appendIfMissing(wa.getAddress(), \"/\") + \"actuator/registeredServices\")).\n+                            header(HttpHeaders.AUTHORIZATION,\n+                                    DefaultBasicAuthSupplier.getBasicAuthHeader(anonymousUser, anonymousKey)).\n+                            GET().build(),\n+                    HttpResponse.BodyHandlers.discarding());\n         } catch (KeymasterException e) {\n             throw new NotFoundException(\"Could not find any WA instance\", e);\n         } catch (IOException | InterruptedException e) {"},{"sha":"b799695e72839642a3d983024e0518ff678db95b","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthAccountLogic.java","status":"removed","additions":0,"deletions":229,"changes":229,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,229 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.syncope.core.logic;\n-\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.lang.reflect.Method;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n-@Component\n-public class GoogleMfaAuthAccountLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n-    @Autowired\n-    private AuthProfileDAO authProfileDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AuthProfileDataBinder authProfileDataBinder;\n-\n-    @Override\n-    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n-        String key = null;\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof AuthProfileTO) {\n-                    key = ((AuthProfileTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                return authProfileDAO.findByKey(key).\n-                    map(authProfileDataBinder::getAuthProfileTO).\n-                    orElseThrow();\n-            } catch (final Throwable e) {\n-                LOG.debug(\"Unresolved reference\", e);\n-                throw new UnresolvedReferenceException(e);\n-            }\n-        }\n-        throw new UnresolvedReferenceException();\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void deleteAccountsFor(final String owner) {\n-        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n-            profile.setGoogleMfaAuthAccounts(List.of());\n-            authProfileDAO.save(profile);\n-        });\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void deleteAll() {\n-        authProfileDAO.findAll().\n-            forEach(profile -> {\n-                profile.setGoogleMfaAuthAccounts(List.of());\n-                authProfileDAO.save(profile);\n-            });\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_SAVE_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public GoogleMfaAuthAccount save(final GoogleMfaAuthAccount acct) {\n-        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n-            orElseGet(() -> {\n-                final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n-                authProfile.setOwner(acct.getOwner());\n-                return authProfile;\n-            });\n-\n-        if (acct.getKey() == null) {\n-            acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-        profile.add(acct);\n-        profile = authProfileDAO.save(profile);\n-        return profile.getGoogleMfaAuthAccounts().\n-            stream().\n-            filter(t -> t.getKey().equals(acct.getKey())).\n-            findFirst().\n-            orElse(null);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_UPDATE_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void update(final GoogleMfaAuthAccount account) {\n-        AuthProfile authProfile = authProfileDAO.findByOwner(account.getOwner()).\n-            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + account.getOwner()));\n-        final List<GoogleMfaAuthAccount> accounts = authProfile.getGoogleMfaAuthAccounts();\n-        if (accounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n-            accounts.add(account);\n-            authProfile.setGoogleMfaAuthAccounts(accounts);\n-            authProfileDAO.save(authProfile);\n-        }\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public List<GoogleMfaAuthAccount> findAccountsFor(final String owner) {\n-        return authProfileDAO.findByOwner(owner).\n-            stream().\n-            map(AuthProfile::getGoogleMfaAuthAccounts).\n-            filter(Objects::nonNull).\n-            filter(accounts -> !accounts.isEmpty()).\n-            findFirst().\n-            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public GoogleMfaAuthAccount findAccountBy(final String key) {\n-        return authProfileDAO.findAll().\n-            stream().\n-            map(AuthProfile::getGoogleMfaAuthAccounts).\n-            filter(Objects::nonNull).\n-            map(accounts -> accounts.stream().\n-                filter(acct -> acct.getKey().equals(key)).\n-                findFirst().\n-                orElse(null)).\n-            filter(Objects::nonNull).\n-            findFirst().\n-            orElse(null);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public GoogleMfaAuthAccount findAccountBy(final long id) {\n-        return authProfileDAO.findAll().\n-            stream().\n-            map(AuthProfile::getGoogleMfaAuthAccounts).\n-            filter(Objects::nonNull).\n-            map(accounts -> accounts.stream().\n-                filter(acct -> acct.getId() == id).\n-                findFirst().\n-                orElse(null)).\n-            filter(Objects::nonNull).\n-            findFirst().\n-            orElse(null);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_COUNT_ACCOUNTS + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public long countAll() {\n-        return authProfileDAO.findAll().\n-            stream().\n-            filter(profile -> profile.getGoogleMfaAuthAccounts() != null).\n-            mapToInt(profile -> profile.getGoogleMfaAuthAccounts().size()).\n-            sum();\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_COUNT_ACCOUNTS + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public long countFor(final String owner) {\n-        return authProfileDAO.findByOwner(owner).\n-            stream().\n-            filter(profile -> profile.getGoogleMfaAuthAccounts() != null).\n-            mapToInt(profile -> profile.getGoogleMfaAuthAccounts().size()).\n-            sum();\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void deleteAccountBy(final String key) {\n-        authProfileDAO.findAll().\n-            stream().\n-            filter(profile -> profile.getGoogleMfaAuthAccounts() != null\n-                && profile.getGoogleMfaAuthAccounts().stream().anyMatch(acct -> acct.getKey().equals(key))).\n-            findFirst().\n-            ifPresent(profile -> {\n-                List<GoogleMfaAuthAccount> accounts = profile.getGoogleMfaAuthAccounts();\n-                boolean removed = accounts.removeIf(acct -> acct.getKey().equals(key));\n-                if (removed) {\n-                    authProfileDAO.save(profile);\n-                }\n-            });\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_LIST_ACCOUNTS + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<GoogleMfaAuthAccount> list() {\n-        return authProfileDAO.findAll().\n-            stream().\n-            map(AuthProfile::getGoogleMfaAuthAccounts).\n-            filter(Objects::nonNull).\n-            flatMap(List::stream).\n-            collect(Collectors.toList());\n-    }\n-}"},{"sha":"6ee3fbfa94ff449e5fec69e1ebf6ccc1621b950d","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/OIDCJWKSLogic.java","status":"modified","additions":9,"deletions":17,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.util.Optional;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -42,34 +43,25 @@ public class OIDCJWKSLogic extends AbstractTransactionalLogic<OIDCJWKSTO> {\n     @Autowired\n     private OIDCJWKSDAO dao;\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_READ + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_READ + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public OIDCJWKSTO get() {\n-        OIDCJWKS jwks = dao.get();\n-        if (jwks != null) {\n-            return binder.get(jwks);\n-        }\n-        throw new NotFoundException(\"OIDC JWKS not found\");\n+        return Optional.ofNullable(dao.get()).\n+                map(binder::get).\n+                orElseThrow(() -> new NotFoundException(\"OIDC JWKS not found\"));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_CREATE + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public OIDCJWKSTO set(final int size, final JWSAlgorithm algorithm) {\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_GENERATE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public OIDCJWKSTO generate(final int size, final JWSAlgorithm algorithm) {\n         OIDCJWKS jwks = dao.get();\n         if (jwks == null) {\n             return binder.get(dao.save(binder.create(size, algorithm)));\n         }\n         throw new DuplicateException(\"OIDC JWKS already set\");\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_UPDATE + \"')\")\n-    public OIDCJWKSTO update(final OIDCJWKSTO jwksTO) {\n-        OIDCJWKS jwks = dao.get();\n-        if (jwks == null) {\n-            throw new NotFoundException(\"OIDC JWKS not found\");\n-        }\n-        return binder.get(dao.save(binder.update(jwks, jwksTO)));\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_DELETE + \"')\")\n     public void delete() {\n         dao.delete();"},{"sha":"e6e5b400e6ffa11dd357c814926c05ce33f96697","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPMetadataLogic.java","status":"modified","additions":11,"deletions":28,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPMetadataLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.util.Optional;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPMetadataDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPMetadata;\n@@ -47,45 +47,28 @@ public class SAML2IdPMetadataLogic extends AbstractTransactionalLogic<SAML2IdPMe\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public SAML2IdPMetadataTO read(final String key) {\n-        SAML2IdPMetadata sAML2IdPMetadata = saml2IdPMetadataDAO.find(key);\n-        if (sAML2IdPMetadata == null) {\n-            throw new NotFoundException(\"AuthModule \" + key + \" not found\");\n-        }\n-\n-        return binder.getSAML2IdPMetadataTO(sAML2IdPMetadata);\n+        return Optional.ofNullable(saml2IdPMetadataDAO.find(key)).\n+                map(binder::getSAML2IdPMetadataTO).\n+                orElseThrow(() -> new NotFoundException(\"SAML2 IdP Metadata \" + key + \" not found\"));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_READ + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public SAML2IdPMetadataTO get(final String appliesTo) {\n-        SAML2IdPMetadata saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(appliesTo);\n-        if (saml2IdPMetadata == null) {\n-            throw new NotFoundException(\"SAML2 IdP Metadata owned by \" + appliesTo + \" not found\");\n-        }\n-\n-        return binder.getSAML2IdPMetadataTO(saml2IdPMetadata);\n+    public SAML2IdPMetadataTO readFor(final String appliesTo) {\n+        return Optional.ofNullable(saml2IdPMetadataDAO.findByOwner(appliesTo)).\n+                map(binder::getSAML2IdPMetadataTO).\n+                orElseThrow(() -> new NotFoundException(\"SAML2 IdP Metadata owned by \" + appliesTo + \" not found\"));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_CREATE + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_SET + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public SAML2IdPMetadataTO set(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n         SAML2IdPMetadata saml2IdPMetadata = saml2IdPMetadataDAO.findByOwner(saml2IdPMetadataTO.getAppliesTo());\n         if (saml2IdPMetadata == null) {\n             return binder.getSAML2IdPMetadataTO(saml2IdPMetadataDAO.save(binder.create(saml2IdPMetadataTO)));\n         }\n-\n-        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_METADATA_UPDATE + \"')\")\n-    public SAML2IdPMetadataTO update(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        SAML2IdPMetadata authModule = saml2IdPMetadataDAO.findByOwner(saml2IdPMetadataTO.getAppliesTo());\n-        if (authModule == null) {\n-            throw new NotFoundException(\"AuthModule \" + saml2IdPMetadataTO.getKey() + \" not found\");\n-        }\n-\n-        return binder.getSAML2IdPMetadataTO(saml2IdPMetadataDAO.save(binder.update(authModule, saml2IdPMetadataTO)));\n+        throw new DuplicateException(\"SAML 2.0 IdP metadata for \" + saml2IdPMetadataTO.getAppliesTo());\n     }\n \n     @Override"},{"sha":"b8aaa5b8be172024a664708949bb670c22a086ab","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPKeystoreLogic.java","status":"modified","additions":13,"deletions":26,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPKeystoreLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -34,6 +34,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n import java.lang.reflect.Method;\n+import java.util.Optional;\n \n @Component\n public class SAML2SPKeystoreLogic extends AbstractTransactionalLogic<SAML2SPKeystoreTO> {\n@@ -45,50 +46,36 @@ public class SAML2SPKeystoreLogic extends AbstractTransactionalLogic<SAML2SPKeys\n     private SAML2SPKeystoreDAO saml2SPKeystoreDAO;\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_READ + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public SAML2SPKeystoreTO read(final String key) {\n-        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.find(key);\n-        if (keystore == null) {\n-            throw new NotFoundException(key + \" not found\");\n-        }\n-        return binder.getSAML2SPKeystoreTO(keystore);\n+        return Optional.ofNullable(saml2SPKeystoreDAO.find(key)).\n+                map(binder::getSAML2SPKeystoreTO).\n+                orElseThrow(() -> new NotFoundException(key + \" not found\"));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_READ + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public SAML2SPKeystoreTO get(final String name) {\n-        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.findByOwner(name);\n-        if (keystore == null) {\n-            throw new NotFoundException(\"SAML2 SP keystore owned by \" + name + \" not found\");\n-        }\n-\n-        return binder.getSAML2SPKeystoreTO(keystore);\n+        return Optional.ofNullable(saml2SPKeystoreDAO.findByOwner(name)).\n+                map(binder::getSAML2SPKeystoreTO).\n+                orElseThrow(() -> new NotFoundException(\"SAML2 SP keystore owned by \" + name + \" not found\"));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_CREATE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_SET + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public SAML2SPKeystoreTO set(final SAML2SPKeystoreTO keystoreTO) {\n-        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.findByOwner(keystoreTO.getOwner());\n+        SAML2SPKeystore keystore = saml2SPKeystoreDAO.findByOwner(keystoreTO.getOwner());\n         if (keystore == null) {\n             return binder.getSAML2SPKeystoreTO(saml2SPKeystoreDAO.save(binder.create(keystoreTO)));\n         }\n         throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_KEYSTORE_UPDATE + \"')\")\n-    public SAML2SPKeystoreTO update(final SAML2SPKeystoreTO keystoreTO) {\n-        final SAML2SPKeystore keystore = saml2SPKeystoreDAO.find(keystoreTO.getKey());\n-        if (keystore == null) {\n-            throw new NotFoundException(keystoreTO.getKey() + \" not found\");\n-        }\n-        return binder.getSAML2SPKeystoreTO(saml2SPKeystoreDAO.save(binder.update(keystore, keystoreTO)));\n-    }\n-\n     @Override\n     protected SAML2SPKeystoreTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n+            throws UnresolvedReferenceException {\n         String name = null;\n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; name == null && i < args.length; i++) {"},{"sha":"c9dca18b4cde8396d077ce8d00bbfc7053331423","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPMetadataLogic.java","status":"modified","additions":14,"deletions":28,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPMetadataLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import java.lang.reflect.Method;\n+import java.util.Optional;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n@@ -33,8 +35,6 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.lang.reflect.Method;\n-\n @Component\n public class SAML2SPMetadataLogic extends AbstractTransactionalLogic<SAML2SPMetadataTO> {\n \n@@ -45,30 +45,25 @@ public class SAML2SPMetadataLogic extends AbstractTransactionalLogic<SAML2SPMeta\n     private SAML2SPMetadataDAO saml2SPMetadataDAO;\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_READ + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public SAML2SPMetadataTO read(final String key) {\n-        final SAML2SPMetadata metadata = saml2SPMetadataDAO.find(key);\n-        if (metadata == null) {\n-            throw new NotFoundException(key + \" not found\");\n-        }\n-        return binder.getSAML2SPMetadataTO(metadata);\n+        return Optional.ofNullable(saml2SPMetadataDAO.find(key)).\n+                map(binder::getSAML2SPMetadataTO).\n+                orElseThrow(() -> new NotFoundException(key + \" not found\"));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_READ + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public SAML2SPMetadataTO get(final String name) {\n-        final SAML2SPMetadata metadata = saml2SPMetadataDAO.findByOwner(name);\n-        if (metadata == null) {\n-            throw new NotFoundException(\"SAML2 SP Metadata owned by \" + name + \" not found\");\n-        }\n-\n-        return binder.getSAML2SPMetadataTO(metadata);\n+    public SAML2SPMetadataTO readFor(final String name) {\n+        return Optional.ofNullable(saml2SPMetadataDAO.findByOwner(name)).\n+                map(binder::getSAML2SPMetadataTO).\n+                orElseThrow(() -> new NotFoundException(\"SAML2 SP Metadata owned by \" + name + \" not found\"));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_CREATE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_SET + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public SAML2SPMetadataTO set(final SAML2SPMetadataTO metadataTO) {\n         SAML2SPMetadata metadata = saml2SPMetadataDAO.findByOwner(metadataTO.getOwner());\n         if (metadata == null) {\n@@ -77,18 +72,9 @@ public SAML2SPMetadataTO set(final SAML2SPMetadataTO metadataTO) {\n         throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_METADATA_UPDATE + \"')\")\n-    public SAML2SPMetadataTO update(final SAML2SPMetadataTO metadataTO) {\n-        final SAML2SPMetadata metadata = saml2SPMetadataDAO.find(metadataTO.getKey());\n-        if (metadata == null) {\n-            throw new NotFoundException(metadataTO.getKey() + \" not found\");\n-        }\n-        return binder.getSAML2SPMetadataTO(saml2SPMetadataDAO.save(binder.update(metadata, metadataTO)));\n-    }\n-\n     @Override\n     protected SAML2SPMetadataTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n+            throws UnresolvedReferenceException {\n         String name = null;\n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; name == null && i < args.length; i++) {"},{"sha":"f644460a4f4501d9f4fa592e06327811ca45cf03","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/WebAuthnRegistrationServiceLogic.java","status":"removed","additions":0,"deletions":172,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWebAuthnRegistrationServiceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWebAuthnRegistrationServiceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FWebAuthnRegistrationServiceLogic.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,172 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.syncope.core.logic;\n-\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n-import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.lang.reflect.Method;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-\n-@Component\n-public class WebAuthnRegistrationServiceLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n-    @Autowired\n-    private AuthProfileDAO authProfileDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Autowired\n-    private AuthProfileDataBinder authProfileDataBinder;\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public WebAuthnAccount read(final String key) {\n-        return authProfileDAO.findAll().\n-            stream().\n-            map(AuthProfile::getWebAuthnAccount).\n-            filter(Objects::nonNull).\n-            filter(record -> record.getKey().equals(key)).\n-            findFirst().\n-            orElse(null);\n-    }\n-\n-    @Override\n-    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n-        String key = null;\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof AuthProfileTO) {\n-                    key = ((AuthProfileTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                return authProfileDAO.findByKey(key).\n-                    map(authProfileDataBinder::getAuthProfileTO).\n-                    orElseThrow();\n-            } catch (final Throwable e) {\n-                LOG.debug(\"Unresolved reference\", e);\n-                throw new UnresolvedReferenceException(e);\n-            }\n-        }\n-        throw new UnresolvedReferenceException();\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_LIST_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<WebAuthnAccount> list() {\n-        return authProfileDAO.findAll().stream().\n-            map(AuthProfile::getWebAuthnAccount).\n-            filter(Objects::nonNull).\n-            collect(Collectors.toList());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public WebAuthnAccount findAccountBy(final String owner) {\n-        return authProfileDAO.findByOwner(owner).\n-            stream().\n-            map(AuthProfile::getWebAuthnAccount).\n-            filter(Objects::nonNull).\n-            findFirst().\n-            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_DELETE_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final String owner) {\n-        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n-            profile.setWebAuthnAccount(null);\n-            authProfileDAO.save(profile);\n-        });\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_DELETE_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final String owner, final String credentialId) {\n-        authProfileDAO.findByOwner(owner).\n-            stream().\n-            filter(Objects::nonNull).\n-            findFirst().\n-            ifPresent(profile -> {\n-                WebAuthnAccount webAuthnAccount = profile.getWebAuthnAccount();\n-                final List<WebAuthnDeviceCredential> accounts = webAuthnAccount.getRecords();\n-                if (accounts.removeIf(acct -> acct.getIdentifier().equals(credentialId))) {\n-                    profile.setWebAuthnAccount(webAuthnAccount);\n-                    authProfileDAO.save(profile);\n-                }\n-            });\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_CREATE_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public WebAuthnAccount create(final WebAuthnAccount acct) {\n-        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n-            orElseGet(() -> {\n-                final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n-                authProfile.setOwner(acct.getOwner());\n-                return authProfile;\n-            });\n-\n-        if (acct.getKey() == null) {\n-            acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-        profile.setWebAuthnAccount(acct);\n-        authProfileDAO.save(profile);\n-        return profile.getWebAuthnAccount();\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_UPDATE_DEVICE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void update(final WebAuthnAccount account) {\n-        List<AuthProfile> profiles = authProfileDAO.findAll();\n-        profiles.forEach(profile -> {\n-            if (profile.getWebAuthnAccount() != null) {\n-                profile.setWebAuthnAccount(account);\n-                authProfileDAO.save(profile);\n-            }\n-        });\n-    }\n-}"},{"sha":"07e896917dddfc930977255717977b57c1d5fddb","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthAccountLogic.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.wa;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class GoogleMfaAuthAccountLogic extends AbstractAuthProfileLogic {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void deleteFor(final String owner) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n+            profile.setGoogleMfaAuthAccounts(List.of());\n+            authProfileDAO.save(profile);\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void deleteAll() {\n+        authProfileDAO.findAll().forEach(profile -> {\n+            profile.setGoogleMfaAuthAccounts(List.of());\n+            authProfileDAO.save(profile);\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_CREATE_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public String create(final String owner, final GoogleMfaAuthAccount account) {\n+        if (account.getKey() == null) {\n+            account.setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+\n+        AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n+            AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+            authProfile.setOwner(owner);\n+            return authProfile;\n+        });\n+\n+        List<GoogleMfaAuthAccount> accounts = profile.getGoogleMfaAuthAccounts();\n+        accounts.add(account);\n+        profile.setGoogleMfaAuthAccounts(accounts);\n+        authProfileDAO.save(profile);\n+        return account.getKey();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_UPDATE_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void update(final String owner, final GoogleMfaAuthAccount account) {\n+        AuthProfile authProfile = authProfileDAO.findByOwner(owner).\n+                orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n+        final List<GoogleMfaAuthAccount> accounts = authProfile.getGoogleMfaAuthAccounts();\n+        if (accounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n+            accounts.add(account);\n+            authProfile.setGoogleMfaAuthAccounts(accounts);\n+            authProfileDAO.save(authProfile);\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public List<GoogleMfaAuthAccount> readFor(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+                stream().\n+                map(AuthProfile::getGoogleMfaAuthAccounts).\n+                filter(Objects::nonNull).\n+                filter(accounts -> !accounts.isEmpty()).\n+                findFirst().\n+                orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public GoogleMfaAuthAccount read(final String key) {\n+        return authProfileDAO.findAll().\n+                stream().\n+                map(AuthProfile::getGoogleMfaAuthAccounts).\n+                filter(Objects::nonNull).\n+                map(accounts -> accounts.stream().\n+                filter(acct -> acct.getKey().equals(key)).\n+                findFirst().\n+                orElse(null)).\n+                filter(Objects::nonNull).\n+                findFirst().\n+                orElse(null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public GoogleMfaAuthAccount read(final long id) {\n+        return authProfileDAO.findAll().\n+                stream().\n+                map(AuthProfile::getGoogleMfaAuthAccounts).\n+                filter(Objects::nonNull).\n+                map(accounts -> accounts.stream().\n+                filter(acct -> acct.getId() == id).\n+                findFirst().\n+                orElse(null)).\n+                filter(Objects::nonNull).\n+                findFirst().\n+                orElse(null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String key) {\n+        authProfileDAO.findAll().\n+                stream().\n+                filter(profile -> profile.getGoogleMfaAuthAccounts() != null\n+                && profile.getGoogleMfaAuthAccounts().stream().anyMatch(acct -> acct.getKey().equals(key))).\n+                findFirst().\n+                ifPresent(profile -> {\n+                    List<GoogleMfaAuthAccount> accounts = profile.getGoogleMfaAuthAccounts();\n+                    boolean removed = accounts.removeIf(acct -> acct.getKey().equals(key));\n+                    if (removed) {\n+                        authProfileDAO.save(profile);\n+                    }\n+                });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_LIST_ACCOUNTS + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<GoogleMfaAuthAccount> list() {\n+        return authProfileDAO.findAll().\n+                stream().\n+                map(AuthProfile::getGoogleMfaAuthAccounts).\n+                filter(Objects::nonNull).\n+                flatMap(List::stream).\n+                collect(Collectors.toList());\n+    }\n+}"},{"sha":"3a7812d30a2477b80b45effaf1329d749d335e1a","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthTokenLogic.java","status":"renamed","additions":45,"deletions":91,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,61 +16,48 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic;\n+package org.apache.syncope.core.logic.wa;\n \n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.function.Predicate;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class GoogleMfaAuthTokenLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n-\n-    @Autowired\n-    private AuthProfileDAO authProfileDAO;\n+public class GoogleMfaAuthTokenLogic extends AbstractAuthProfileLogic {\n \n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private AuthProfileDataBinder authProfileDataBinder;\n-\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void delete(final Date expirationDate) {\n-        authProfileDAO.\n-                findAll().\n-                forEach(profile -> removeTokenAndSave(profile,\n-                token -> token.getIssueDate().compareTo(expirationDate) >= 0));\n+        authProfileDAO.findAll().forEach(profile -> removeTokenAndSave(\n+                profile, token -> token.getIssueDate().compareTo(expirationDate) >= 0));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final String owner, final Integer otp) {\n-        authProfileDAO.findByOwner(owner).\n-                ifPresent(profile -> removeTokenAndSave(profile,\n-                token -> token.getToken().equals(otp)));\n+    public void delete(final String owner, final int otp) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> removeTokenAndSave(\n+                profile, token -> token.getOtp() == otp));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final String owner) {\n+    public void deleteFor(final String owner) {\n         authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n             profile.setGoogleMfaAuthTokens(List.of());\n             authProfileDAO.save(profile);\n@@ -79,53 +66,49 @@ public void delete(final String owner) {\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void delete(final Integer otp) {\n-        authProfileDAO.findAll().\n-                forEach(profile -> removeTokenAndSave(profile,\n-                token -> token.getToken().equals(otp)));\n+    public void delete(final int otp) {\n+        authProfileDAO.findAll().forEach(profile -> removeTokenAndSave(\n+                profile, token -> token.getOtp() == otp));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void deleteAll() {\n-        authProfileDAO.findAll().\n-                forEach(profile -> {\n-                    profile.setGoogleMfaAuthTokens(List.of());\n-                    authProfileDAO.save(profile);\n-                });\n+        authProfileDAO.findAll().forEach(profile -> {\n+            profile.setGoogleMfaAuthTokens(List.of());\n+            authProfileDAO.save(profile);\n+        });\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_SAVE_TOKEN + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_STORE_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public GoogleMfaAuthToken save(final GoogleMfaAuthToken token) {\n-        AuthProfile profile = authProfileDAO.findByOwner(token.getOwner()).\n-                orElseGet(() -> {\n-                    final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n-                    authProfile.setOwner(token.getOwner());\n-                    return authProfile;\n-                });\n-\n+    public String store(final String owner, final GoogleMfaAuthToken token) {\n         if (token.getKey() == null) {\n             token.setKey(SecureRandomUtils.generateRandomUUID().toString());\n         }\n-        profile.add(token);\n-        profile = authProfileDAO.save(profile);\n-        return profile.getGoogleMfaAuthTokens().\n-                stream().\n-                filter(t -> t.getToken().equals(token.getToken())).\n-                findFirst().\n-                orElse(null);\n+\n+        AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n+            AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+            authProfile.setOwner(owner);\n+            return authProfile;\n+        });\n+\n+        List<GoogleMfaAuthToken> tokens = profile.getGoogleMfaAuthTokens();\n+        tokens.add(token);\n+        profile.setGoogleMfaAuthTokens(tokens);\n+        authProfileDAO.save(profile);\n+        return token.getKey();\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public GoogleMfaAuthToken read(final String owner, final Integer otp) {\n+    public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n         return authProfileDAO.findByOwner(owner).\n                 stream().\n                 map(AuthProfile::getGoogleMfaAuthTokens).\n                 flatMap(List::stream).\n-                filter(token -> token.getToken().equals(otp)).\n+                filter(token -> token.getOtp() == otp).\n                 findFirst().\n                 orElseThrow(() -> new NotFoundException(\"Could not find token for Owner \" + owner + \" and otp \" + otp));\n     }\n@@ -140,62 +123,33 @@ public GoogleMfaAuthToken read(final String key) {\n                 flatMap(List::stream).\n                 filter(token -> token.getKey().equals(key)).\n                 findFirst().\n-                orElse(null);\n+                orElseThrow(() -> new NotFoundException(\"Could not find token for \" + key));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_COUNT_TOKEN + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_LIST_TOKENS + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public int countAll() {\n-        return authProfileDAO.findAll().\n-                stream().\n-                mapToInt(profile -> profile.getGoogleMfaAuthTokens().size()).\n-                sum();\n+    public List<GoogleMfaAuthToken> list() {\n+        return authProfileDAO.findAll().stream().\n+                map(AuthProfile::getGoogleMfaAuthTokens).\n+                flatMap(List::stream).\n+                collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_TOKEN + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public List<GoogleMfaAuthToken> findTokensFor(final String owner) {\n+    public List<GoogleMfaAuthToken> readFor(final String owner) {\n         return authProfileDAO.findByOwner(owner).\n-                map(profile -> new ArrayList<>(profile.getGoogleMfaAuthTokens())).\n-                orElse(new ArrayList<>(0));\n+                map(AuthProfile::getGoogleMfaAuthTokens).\n+                orElse(List.of());\n     }\n \n     private void removeTokenAndSave(final AuthProfile profile, final Predicate<GoogleMfaAuthToken> criteria) {\n         List<GoogleMfaAuthToken> tokens = profile.getGoogleMfaAuthTokens();\n-        boolean removed = tokens.removeIf(criteria);\n-        if (removed) {\n+        if (tokens.removeIf(criteria)) {\n             profile.setGoogleMfaAuthTokens(tokens);\n             authProfileDAO.save(profile);\n         }\n     }\n-\n-    @Override\n-    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-        String key = null;\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof AuthProfileTO) {\n-                    key = ((AuthProfileTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                return authProfileDAO.findByKey(key).\n-                        map(authProfileDataBinder::getAuthProfileTO).\n-                        orElseThrow();\n-            } catch (final Throwable ex) {\n-                LOG.debug(\"Unresolved reference\", ex);\n-                throw new UnresolvedReferenceException(ex);\n-            }\n-        }\n-\n-        throw new UnresolvedReferenceException();\n-    }\n }","previous_filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthTokenLogic.java"},{"sha":"cf7a0c43e84cb145bff99e373897e4cc385c38da","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/U2FRegistrationLogic.java","status":"renamed","additions":40,"deletions":88,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,100 +16,60 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic;\n+package org.apache.syncope.core.logic.wa;\n \n-import java.lang.reflect.Method;\n import java.util.Comparator;\n import java.util.Date;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.CompareToBuilder;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.to.AuthProfileTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n-import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class U2FRegistrationLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n-\n-    @Autowired\n-    private AuthProfileDAO authProfileDAO;\n+public class U2FRegistrationLogic extends AbstractAuthProfileLogic {\n \n     @Autowired\n     private EntityFactory entityFactory;\n \n-    @Autowired\n-    private AuthProfileDataBinder authProfileDataBinder;\n-\n-    @Override\n-    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-        String key = null;\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof AuthProfileTO) {\n-                    key = ((AuthProfileTO) args[i]).getKey();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                return authProfileDAO.findByKey(key).\n-                        map(authProfileDataBinder::getAuthProfileTO).\n-                        orElseThrow();\n-            } catch (final Throwable e) {\n-                LOG.debug(\"Unresolved reference\", e);\n-                throw new UnresolvedReferenceException(e);\n-            }\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_CREATE_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public String create(final String owner, final U2FDevice device) {\n+        if (device.getKey() == null) {\n+            device.setKey(SecureRandomUtils.generateRandomUUID().toString());\n         }\n-        throw new UnresolvedReferenceException();\n-    }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SAVE_DEVICE + \"') \"\n-            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public U2FRegisteredDevice save(final U2FRegisteredDevice acct) {\n-        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n-                orElseGet(() -> {\n-                    final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n-                    authProfile.setOwner(acct.getOwner());\n-                    return authProfile;\n-                });\n+        AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n+            AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+            authProfile.setOwner(owner);\n+            return authProfile;\n+        });\n \n-        if (acct.getKey() == null) {\n-            acct.setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-        profile.add(acct);\n-        profile = authProfileDAO.save(profile);\n-        return profile.getU2FRegisteredDevices().\n-                stream().\n-                filter(Objects::nonNull).\n-                filter(t -> t.getKey().equals(acct.getKey())).\n-                findFirst().\n-                orElse(null);\n+        List<U2FDevice> devices = profile.getU2FRegisteredDevices();\n+        devices.add(device);\n+        profile.setU2FRegisteredDevices(devices);\n+        authProfileDAO.save(profile);\n+        return device.getKey();\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_READ_DEVICE + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n-    public U2FRegisteredDevice read(final String key) {\n+    public U2FDevice read(final String key) {\n         return authProfileDAO.findAll().\n                 stream().\n                 map(AuthProfile::getU2FRegisteredDevices).\n@@ -125,7 +85,7 @@ public U2FRegisteredDevice read(final String key) {\n     public void delete(final String entityKey, final Long id, final Date expirationDate) {\n         List<AuthProfile> profiles = authProfileDAO.findAll();\n         profiles.forEach(profile -> {\n-            List<U2FRegisteredDevice> devices = profile.getU2FRegisteredDevices();\n+            List<U2FDevice> devices = profile.getU2FRegisteredDevices();\n             if (devices != null) {\n                 if (StringUtils.isNotBlank(entityKey)) {\n                     devices.removeIf(device -> device.getKey().equals(entityKey));\n@@ -142,24 +102,20 @@ public void delete(final String entityKey, final Long id, final Date expirationD\n         });\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SEARCH + \"') \"\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_SEARCH_DEVICES + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public Pair<Integer, List<U2FRegisteredDevice>> search(final String entityKey, final Integer page,\n+    public Pair<Integer, List<U2FDevice>> search(final String entityKey, final Integer page,\n             final Integer itemsPerPage, final Long id,\n             final Date expirationDate,\n             final List<OrderByClause> orderByClauses) {\n-        List<Comparator<U2FRegisteredDevice>> comparatorList = orderByClauses.\n+        List<Comparator<U2FDevice>> comparatorList = orderByClauses.\n                 stream().\n                 map(orderByClause -> {\n-                    Comparator<U2FRegisteredDevice> comparator = null;\n+                    Comparator<U2FDevice> comparator = null;\n                     if (orderByClause.getField().equals(\"id\")) {\n                         comparator = (o1, o2) -> new CompareToBuilder().\n                                 append(o1.getId(), o2.getId()).toComparison();\n                     }\n-                    if (orderByClause.getField().equals(\"owner\")) {\n-                        comparator = (o1, o2) -> new CompareToBuilder().\n-                                append(o1.getOwner(), o2.getOwner()).toComparison();\n-                    }\n                     if (orderByClause.getField().equals(\"key\")) {\n                         comparator = (o1, o2) -> new CompareToBuilder().\n                                 append(o1.getKey(), o2.getKey()).toComparison();\n@@ -183,7 +139,7 @@ public Pair<Integer, List<U2FRegisteredDevice>> search(final String entityKey, f\n                 filter(Objects::nonNull).\n                 collect(Collectors.toList());\n \n-        List<U2FRegisteredDevice> devices = authProfileDAO.findAll().\n+        List<U2FDevice> devices = authProfileDAO.findAll().\n                 stream().\n                 map(AuthProfile::getU2FRegisteredDevices).\n                 filter(Objects::nonNull).\n@@ -204,36 +160,32 @@ public Pair<Integer, List<U2FRegisteredDevice>> search(final String entityKey, f\n                 filter(Objects::nonNull).\n                 collect(Collectors.toList());\n \n-        List<U2FRegisteredDevice> pagedResults = devices.\n-                stream().\n+        List<U2FDevice> result = devices.stream().\n                 limit(itemsPerPage).\n                 skip(itemsPerPage * (page <= 0 ? 0L : page.longValue() - 1L)).\n                 sorted((o1, o2) -> {\n-                    int result;\n-                    for (Comparator<U2FRegisteredDevice> comparator : comparatorList) {\n-                        result = comparator.compare(o1, o2);\n-                        if (result != 0) {\n-                            return result;\n+                    int compare;\n+                    for (Comparator<U2FDevice> comparator : comparatorList) {\n+                        compare = comparator.compare(o1, o2);\n+                        if (compare != 0) {\n+                            return compare;\n                         }\n                     }\n                     return 0;\n                 })\n                 .collect(Collectors.toList());\n-        return Pair.of(devices.size(), pagedResults);\n+        return Pair.of(devices.size(), result);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.U2F_UPDATE_DEVICE + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public void update(final U2FRegisteredDevice acct) {\n-        List<AuthProfile> profiles = authProfileDAO.findAll();\n-        profiles.forEach(profile -> {\n-            List<U2FRegisteredDevice> devices = profile.getU2FRegisteredDevices();\n-            if (devices != null) {\n-                if (devices.removeIf(device -> device.getKey().equals(acct.getKey()))) {\n-                    devices.add(acct);\n-                    profile.setU2FRegisteredDevices(devices);\n-                    authProfileDAO.save(profile);\n-                }\n+    public void update(final U2FDevice device) {\n+        authProfileDAO.findAll().forEach(profile -> {\n+            List<U2FDevice> devices = profile.getU2FRegisteredDevices();\n+            if (devices.removeIf(d -> d.getKey().equals(device.getKey()))) {\n+                devices.add(device);\n+                profile.setU2FRegisteredDevices(devices);\n+                authProfileDAO.save(profile);\n             }\n         });\n     }","previous_filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/U2FRegistrationLogic.java"},{"sha":"4f5d0d3f1ecb6a2bcd31403305625be54fb3241e","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAConfigLogic.java","status":"renamed","additions":43,"deletions":86,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,10 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+package org.apache.syncope.core.logic.wa;\n \n-package org.apache.syncope.core.logic;\n-\n-import org.apache.commons.lang3.ArrayUtils;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import javax.ws.rs.InternalServerErrorException;\n+import javax.ws.rs.core.HttpHeaders;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.transport.http.auth.DefaultBasicAuthSupplier;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n@@ -29,133 +39,80 @@\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.logic.AbstractTransactionalLogic;\n+import org.apache.syncope.core.logic.UnresolvedReferenceException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-import javax.annotation.Resource;\n-import javax.ws.rs.InternalServerErrorException;\n-import javax.ws.rs.core.HttpHeaders;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Method;\n-import java.net.URI;\n-import java.net.http.HttpClient;\n-import java.net.http.HttpRequest;\n-import java.net.http.HttpResponse;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n @Component\n public class WAConfigLogic extends AbstractTransactionalLogic<EntityTO> {\n+\n     @Autowired\n     private ServiceOps serviceOps;\n \n     @Autowired\n     private WAConfigDataBinder binder;\n \n     @Autowired\n-    private WAConfigDAO configDAO;\n+    private WAConfigDAO waConfigDAO;\n \n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n     @Resource(name = \"anonymousKey\")\n     private String anonymousKey;\n \n-    @Override\n-    protected EntityTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n-        String key = null;\n-        if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof String) {\n-                    key = (String) args[i];\n-                } else if (args[i] instanceof Attr) {\n-                    key = ((Attr) args[i]).getSchema();\n-                }\n-            }\n-        }\n-\n-        if (key != null) {\n-            try {\n-                Attr attr = binder.getAttr(configDAO.find(key));\n-                return new EntityTO() {\n-                    private static final long serialVersionUID = -2683326649597260323L;\n-                    @Override\n-                    public String getKey() {\n-                        return attr.getSchema();\n-                    }\n-\n-                    @Override\n-                    public void setKey(final String key) {\n-                    }\n-                };\n-            } catch (final Throwable e) {\n-                LOG.debug(\"Unresolved reference\", e);\n-                throw new UnresolvedReferenceException(e);\n-            }\n-        }\n-\n-        throw new UnresolvedReferenceException();\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_LIST + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public List<Attr> list() {\n-        return configDAO.findAll().stream().map(binder::getAttr).collect(Collectors.toList());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_UPDATE + \"')\")\n-    public void update(final Attr configTO) {\n-        WAConfigEntry entry = configDAO.find(configTO.getSchema());\n-        if (entry == null) {\n-            throw new NotFoundException(\"Configuration entry \" + configTO.getSchema() + \" not found\");\n-        }\n-        binder.update(entry, configTO);\n-        configDAO.save(entry);\n+        return waConfigDAO.findAll().stream().map(binder::get).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_DELETE + \"')\")\n-    public void delete(final String key) {\n-        configDAO.delete(key);\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_GET + \"')\")\n+    @Transactional(readOnly = true)\n+    public Attr get(final String schema) {\n+        return Optional.ofNullable(waConfigDAO.find(schema)).\n+                map(binder::get).\n+                orElseThrow(() -> new NotFoundException(\"Configuration entry \" + schema + \" not found\"));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_READ + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public Attr read(final String key) {\n-        WAConfigEntry entry = configDAO.find(key);\n-        if (entry == null) {\n-            throw new NotFoundException(\"Configuration entry \" + key + \" not found\");\n-        }\n-        return binder.getAttr(entry);\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_SET + \"')\")\n+    public void set(final Attr value) {\n+        waConfigDAO.save(binder.set(value));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_CREATE + \"')\")\n-    public Attr create(final Attr configTO) {\n-        return binder.getAttr(configDAO.save(binder.create(configTO)));\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_DELETE + \"')\")\n+    public void delete(final String key) {\n+        waConfigDAO.delete(key);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_PUSH + \"')\")\n     public void pushToWA() {\n         try {\n             NetworkService wa = serviceOps.get(NetworkService.Type.WA);\n             HttpClient.newBuilder().build().send(\n-                HttpRequest.newBuilder(URI.create(\n-                    StringUtils.appendIfMissing(wa.getAddress(), \"/\") + \"actuator/refresh\")).\n-                    header(HttpHeaders.AUTHORIZATION,\n-                        DefaultBasicAuthSupplier.getBasicAuthHeader(anonymousUser, anonymousKey)).\n-                    POST(HttpRequest.BodyPublishers.noBody()).build(),\n-                HttpResponse.BodyHandlers.discarding());\n+                    HttpRequest.newBuilder(URI.create(\n+                            StringUtils.appendIfMissing(wa.getAddress(), \"/\") + \"actuator/refresh\")).\n+                            header(HttpHeaders.AUTHORIZATION,\n+                                    DefaultBasicAuthSupplier.getBasicAuthHeader(anonymousUser, anonymousKey)).\n+                            POST(HttpRequest.BodyPublishers.noBody()).build(),\n+                    HttpResponse.BodyHandlers.discarding());\n         } catch (KeymasterException e) {\n             throw new NotFoundException(\"Could not find any WA instance\", e);\n         } catch (IOException | InterruptedException e) {\n             throw new InternalServerErrorException(\"Errors while communicating with WA instance\", e);\n         }\n     }\n+\n+    @Override\n+    protected EntityTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        throw new UnresolvedReferenceException();\n+    }\n }","previous_filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/WAConfigLogic.java"},{"sha":"63667fbeb728273303e5976648fa2bdb82290571","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WebAuthnRegistrationLogic.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.wa;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n+import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n+import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class WebAuthnRegistrationLogic extends AbstractAuthProfileLogic {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public WebAuthnAccount read(final String key) {\n+        return authProfileDAO.findAll().\n+                stream().\n+                map(AuthProfile::getWebAuthnAccount).\n+                filter(record -> record.getKey().equals(key)).\n+                findFirst().\n+                orElseThrow(() -> new NotFoundException(\"Could not find account with key \" + key));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_LIST_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<WebAuthnAccount> list() {\n+        return authProfileDAO.findAll().stream().\n+                map(AuthProfile::getWebAuthnAccount).\n+                collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_READ_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public WebAuthnAccount findAccountBy(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+                stream().\n+                map(AuthProfile::getWebAuthnAccount).\n+                findFirst().\n+                orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_DELETE_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String owner) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n+            profile.setWebAuthnAccount(null);\n+            authProfileDAO.save(profile);\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_DELETE_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final String owner, final String credentialId) {\n+        authProfileDAO.findByOwner(owner).\n+                stream().\n+                findFirst().\n+                ifPresent(profile -> {\n+                    WebAuthnAccount webAuthnAccount = profile.getWebAuthnAccount();\n+                    List<WebAuthnDeviceCredential> accounts = webAuthnAccount.getCredentials();\n+                    if (accounts.removeIf(acct -> acct.getIdentifier().equals(credentialId))) {\n+                        profile.setWebAuthnAccount(webAuthnAccount);\n+                        authProfileDAO.save(profile);\n+                    }\n+                });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_CREATE_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public WebAuthnAccount create(final String owner, final WebAuthnAccount account) {\n+        if (account.getKey() == null) {\n+            account.setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+\n+        AuthProfile profile = authProfileDAO.findByOwner(owner).orElseGet(() -> {\n+            AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+            authProfile.setOwner(owner);\n+            return authProfile;\n+        });\n+        profile.setWebAuthnAccount(account);\n+        authProfileDAO.save(profile);\n+        return profile.getWebAuthnAccount();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.WEBAUTHN_UPDATE_DEVICE + \"') \"\n+            + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void update(final String owner, final WebAuthnAccount account) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n+            profile.setWebAuthnAccount(account);\n+            authProfileDAO.save(profile);\n+        });\n+    }\n+}"},{"sha":"58e7a637ff566daf5292e5efb217682080dbfe73","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuthProfileServiceImpl.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -24,8 +24,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import javax.ws.rs.core.Response;\n-\n import java.util.List;\n \n @Service\n@@ -35,25 +33,23 @@ public class AuthProfileServiceImpl extends AbstractServiceImpl implements AuthP\n     private AuthProfileLogic logic;\n \n     @Override\n-    public Response deleteByKey(final String key) {\n-        logic.deleteByKey(key);\n-        return Response.noContent().build();\n+    public void delete(final String key) {\n+        logic.delete(key);\n     }\n \n     @Override\n-    public Response deleteByOwner(final String owner) {\n+    public void deleteByOwner(final String owner) {\n         logic.deleteByOwner(owner);\n-        return Response.noContent().build();\n     }\n \n     @Override\n-    public AuthProfileTO findByOwner(final String owner) {\n-        return logic.findByOwner(owner);\n+    public AuthProfileTO readByOwner(final String owner) {\n+        return logic.readByOwner(owner);\n     }\n \n     @Override\n-    public AuthProfileTO findByKey(final String key) {\n-        return logic.findByKey(key);\n+    public AuthProfileTO read(final String key) {\n+        return logic.read(key);\n     }\n \n     @Override"},{"sha":"052ec3169fe744fe93a600eed306e3ee8f366328","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ClientAppServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -21,7 +21,7 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ClientAppService;"},{"sha":"dceca86fdd3987d1e9fa40e4ebaef533e9ede338","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCJWKSServiceImpl.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.logic.OIDCJWKSLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -31,8 +35,18 @@ public class OIDCJWKSServiceImpl extends AbstractServiceImpl implements OIDCJWKS\n     private OIDCJWKSLogic logic;\n \n     @Override\n-    public void update(final OIDCJWKSTO jwksTO) {\n-        logic.update(jwksTO);\n+    public OIDCJWKSTO get() {\n+        return logic.get();\n+    }\n+\n+    @Override\n+    public Response generate(final int size, final JWSAlgorithm algorithm) {\n+        OIDCJWKSTO jwks = logic.generate(size, algorithm);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(jwks.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, jwks.getKey()).\n+                entity(jwks).\n+                build();\n     }\n \n     @Override"},{"sha":"285b0add633ca8b4c980544b4165faa63192a863","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPMetadataServiceImpl.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -31,7 +34,21 @@ public class SAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements\n     private SAML2IdPMetadataLogic logic;\n \n     @Override\n-    public void update(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        logic.update(saml2IdPMetadataTO);\n+    public SAML2IdPMetadataTO readFor(final String appliesTo) {\n+        return logic.readFor(appliesTo);\n+    }\n+\n+    @Override\n+    public SAML2IdPMetadataTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response set(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        SAML2IdPMetadataTO saml2IdPMetadata = logic.set(saml2IdPMetadataTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(saml2IdPMetadata.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, saml2IdPMetadata.getKey()).\n+                build();\n     }\n }"},{"sha":"0e68a6739ffff3832204c6589bffca1672cf9e1b","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPKeystoreServiceImpl.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.logic.SAML2SPKeystoreLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -31,7 +34,21 @@ public class SAML2SPKeystoreServiceImpl extends AbstractServiceImpl implements S\n     private SAML2SPKeystoreLogic logic;\n \n     @Override\n-    public void update(final SAML2SPKeystoreTO metadataTO) {\n-        logic.update(metadataTO);\n+    public SAML2SPKeystoreTO readFor(final String name) {\n+        return logic.get(name);\n+    }\n+\n+    @Override\n+    public SAML2SPKeystoreTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response set(final SAML2SPKeystoreTO keystoreTO) {\n+        SAML2SPKeystoreTO keystore = logic.set(keystoreTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(keystore.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, keystore.getKey()).\n+                build();\n     }\n }"},{"sha":"bbe775ba071117d4f946ec12cb76f927679d3b4e","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPMetadataServiceImpl.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.logic.SAML2SPMetadataLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -31,7 +34,21 @@ public class SAML2SPMetadataServiceImpl extends AbstractServiceImpl implements S\n     private SAML2SPMetadataLogic logic;\n \n     @Override\n-    public void update(final SAML2SPMetadataTO metadataTO) {\n-        logic.update(metadataTO);\n+    public SAML2SPMetadataTO readFor(final String name) {\n+        return logic.readFor(name);\n+    }\n+\n+    @Override\n+    public SAML2SPMetadataTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response set(final SAML2SPMetadataTO metadataTO) {\n+        SAML2SPMetadataTO spMetadata = logic.set(metadataTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(spMetadata.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, spMetadata.getKey()).\n+                build();\n     }\n }"},{"sha":"e16da6f626ef11bb6f5457acf1c57eebb9419f29","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthAccountServiceImpl.java","status":"modified","additions":33,"deletions":47,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,95 +16,81 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n-import org.apache.syncope.core.logic.GoogleMfaAuthAccountLogic;\n+import org.apache.syncope.core.logic.wa.GoogleMfaAuthAccountLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.util.List;\n-\n @Service\n public class GoogleMfaAuthAccountServiceImpl extends AbstractServiceImpl implements GoogleMfaAuthAccountService {\n+\n     @Autowired\n     private GoogleMfaAuthAccountLogic logic;\n \n     @Override\n-    public Response deleteAccountsFor(final String owner) {\n-        logic.deleteAccountsFor(owner);\n-        return Response.noContent().build();\n+    public void deleteFor(final String owner) {\n+        logic.deleteFor(owner);\n     }\n \n     @Override\n-    public Response deleteAccountBy(final String key) {\n-        logic.deleteAccountBy(key);\n-        return Response.noContent().build();\n+    public void delete(final String key) {\n+        logic.delete(key);\n     }\n \n     @Override\n-    public Response deleteAll() {\n+    public void delete() {\n         logic.deleteAll();\n-        return Response.noContent().build();\n     }\n \n     @Override\n-    public Response save(final GoogleMfaAuthAccount acct) {\n-        final GoogleMfaAuthAccount account = logic.save(acct);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(account.getKey()).build();\n+    public Response create(final String owner, final GoogleMfaAuthAccount acct) {\n+        String key = logic.create(owner, acct);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(key).build();\n         return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, account.getKey()).\n-            build();\n+                header(RESTHeaders.RESOURCE_KEY, key).\n+                build();\n     }\n \n     @Override\n-    public void update(final GoogleMfaAuthAccount acct) {\n-        logic.update(acct);\n+    public void update(final String owner, final GoogleMfaAuthAccount acct) {\n+        logic.update(owner, acct);\n     }\n \n-    @Override\n-    public List<GoogleMfaAuthAccount> findAccountsFor(final String owner) {\n-        return logic.findAccountsFor(owner);\n-    }\n-\n-    @Override\n-    public GoogleMfaAuthAccount findAccountBy(final String key) {\n-        return logic.findAccountBy(key);\n+    private PagedResult<GoogleMfaAuthAccount> build(final List<GoogleMfaAuthAccount> read) {\n+        PagedResult<GoogleMfaAuthAccount> result = new PagedResult<>();\n+        result.setPage(1);\n+        result.setSize(read.size());\n+        result.setTotalCount(read.size());\n+        result.getResult().addAll(read);\n+        return result;\n     }\n \n     @Override\n-    public GoogleMfaAuthAccount findAccountBy(final long id) {\n-        return logic.findAccountBy(id);\n+    public PagedResult<GoogleMfaAuthAccount> readFor(final String owner) {\n+        return build(logic.readFor(owner));\n     }\n \n     @Override\n-    public PagedResult<GoogleMfaAuthAccount> countAll() {\n-        PagedResult<GoogleMfaAuthAccount> result = new PagedResult<>();\n-        result.setSize(Long.valueOf(logic.countAll()).intValue());\n-        result.setPage(1);\n-        result.setTotalCount(result.getSize());\n-        return result;\n+    public GoogleMfaAuthAccount read(final String key) {\n+        return logic.read(key);\n     }\n \n     @Override\n-    public PagedResult<GoogleMfaAuthAccount> countFor(final String owner) {\n-        PagedResult<GoogleMfaAuthAccount> result = new PagedResult<>();\n-        result.setSize(Long.valueOf(logic.countFor(owner)).intValue());\n-        result.setPage(1);\n-        result.setTotalCount(result.getSize());\n-        return result;\n+    public GoogleMfaAuthAccount read(final long id) {\n+        return logic.read(id);\n     }\n \n     @Override\n-    public List<GoogleMfaAuthAccount> list() {\n-        return logic.list();\n+    public PagedResult<GoogleMfaAuthAccount> list() {\n+        return build(logic.list());\n     }\n }"},{"sha":"da5375c28108ab2ba6caef4f780d7f0a3e11d333","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthTokenServiceImpl.java","status":"modified","additions":28,"deletions":46,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,15 +18,12 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n-import java.net.URI;\n import java.util.Date;\n import java.util.List;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n-import org.apache.syncope.core.logic.GoogleMfaAuthTokenLogic;\n+import org.apache.syncope.core.logic.wa.GoogleMfaAuthTokenLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -38,75 +35,60 @@ public class GoogleMfaAuthTokenServiceImpl extends AbstractServiceImpl implement\n     private GoogleMfaAuthTokenLogic logic;\n \n     @Override\n-    public Response deleteTokensByDate(final Date expirationDate) {\n-        logic.delete(expirationDate);\n-        return Response.noContent().build();\n+    public void delete(final Date expirationDate) {\n+        if (expirationDate == null) {\n+            logic.deleteAll();\n+        } else {\n+            logic.delete(expirationDate);\n+        }\n     }\n \n     @Override\n-    public Response deleteToken(final String owner, final Integer otp) {\n+    public void delete(final String owner, final int otp) {\n         logic.delete(owner, otp);\n-        return Response.noContent().build();\n     }\n \n     @Override\n-    public Response deleteTokensFor(final String owner) {\n-        logic.delete(owner);\n-        return Response.noContent().build();\n+    public void deleteFor(final String owner) {\n+        logic.deleteFor(owner);\n     }\n \n     @Override\n-    public Response deleteToken(final Integer otp) {\n+    public void delete(final int otp) {\n         logic.delete(otp);\n-        return Response.noContent().build();\n     }\n \n     @Override\n-    public Response deleteTokens() {\n-        logic.deleteAll();\n-        return Response.noContent().build();\n+    public void store(final String owner, final GoogleMfaAuthToken token) {\n+        logic.store(owner, token);\n     }\n \n     @Override\n-    public Response save(final GoogleMfaAuthToken tokenTO) {\n-        final GoogleMfaAuthToken token = logic.save(tokenTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n-                build();\n+    public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n+        return logic.readFor(owner, otp);\n     }\n \n-    @Override\n-    public GoogleMfaAuthToken findTokenFor(final String owner, final Integer otp) {\n-        return logic.read(owner, otp);\n-    }\n-\n-    @Override\n-    public PagedResult<GoogleMfaAuthToken> findTokensFor(final String owner) {\n-        List<GoogleMfaAuthToken> tokens = logic.findTokensFor(owner);\n-\n+    private PagedResult<GoogleMfaAuthToken> build(final List<GoogleMfaAuthToken> read) {\n         PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n-        result.getResult().addAll(tokens);\n-\n         result.setPage(1);\n-        result.setSize(result.getResult().size());\n-        result.setTotalCount(result.getSize());\n-\n+        result.setSize(read.size());\n+        result.setTotalCount(read.size());\n+        result.getResult().addAll(read);\n         return result;\n     }\n \n     @Override\n-    public GoogleMfaAuthToken findTokenFor(final String key) {\n-        return logic.read(key);\n+    public PagedResult<GoogleMfaAuthToken> readFor(final String owner) {\n+        return build(logic.readFor(owner));\n     }\n \n     @Override\n-    public PagedResult<GoogleMfaAuthToken> countTokens() {\n-        PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n-\n-        result.setSize(logic.countAll());\n-        result.setTotalCount(result.getSize());\n+    public GoogleMfaAuthToken read(final String key) {\n+        return logic.read(key);\n+    }\n \n-        return result;\n+    @Override\n+    public PagedResult<GoogleMfaAuthToken> list() {\n+        return build(logic.list());\n     }\n }"},{"sha":"9c94e8766945317b0ff94c9dcccde04023a5652f","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/U2FRegistrationServiceImpl.java","status":"modified","additions":24,"deletions":27,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,27 +16,25 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.wa.U2FDeviceQuery;\n+import org.apache.syncope.common.rest.api.beans.U2FDeviceQuery;\n import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n-import org.apache.syncope.core.logic.U2FRegistrationLogic;\n+import org.apache.syncope.core.logic.wa.U2FRegistrationLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.util.List;\n-\n @Service\n public class U2FRegistrationServiceImpl extends AbstractServiceImpl implements U2FRegistrationService {\n+\n     @Autowired\n     private U2FRegistrationLogic logic;\n \n@@ -47,34 +45,33 @@ public Response delete(final U2FDeviceQuery query) {\n     }\n \n     @Override\n-    public void update(final U2FRegisteredDevice acct) {\n-        logic.update(acct);\n+    public void update(final U2FDevice device) {\n+        logic.update(device);\n     }\n \n     @Override\n-    public Response create(final U2FRegisteredDevice acct) {\n-        final U2FRegisteredDevice token = logic.save(acct);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n+    public Response create(final String owner, final U2FDevice device) {\n+        String key = logic.create(owner, device);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(key).build();\n         return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n-            entity(token).\n-            build();\n+                header(RESTHeaders.RESOURCE_KEY, key).\n+                build();\n     }\n \n     @Override\n-    public PagedResult<U2FRegisteredDevice> search(final U2FDeviceQuery query) {\n-        Pair<Integer, List<U2FRegisteredDevice>> result = logic.search(\n-            query.getEntityKey(),\n-            query.getPage(),\n-            query.getSize(),\n-            query.getId(),\n-            query.getExpirationDate(),\n-            getOrderByClauses(query.getOrderBy()));\n+    public PagedResult<U2FDevice> search(final U2FDeviceQuery query) {\n+        Pair<Integer, List<U2FDevice>> result = logic.search(\n+                query.getEntityKey(),\n+                query.getPage(),\n+                query.getSize(),\n+                query.getId(),\n+                query.getExpirationDate(),\n+                getOrderByClauses(query.getOrderBy()));\n         return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n     }\n-    \n+\n     @Override\n-    public U2FRegisteredDevice read(final String key) {\n+    public U2FDevice read(final String key) {\n         return logic.read(key);\n     }\n }"},{"sha":"81d53038b88ec5affdee6e8ef18ff6da18251004","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WAConfigServiceImpl.java","status":"modified","additions":9,"deletions":24,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,24 +16,19 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n+import java.util.List;\n import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n-import org.apache.syncope.core.logic.WAConfigLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.util.List;\n+import org.apache.syncope.core.logic.wa.WAConfigLogic;\n \n @Service\n public class WAConfigServiceImpl extends AbstractServiceImpl implements WAConfigService {\n+\n     @Autowired\n     private WAConfigLogic logic;\n \n@@ -43,28 +38,18 @@ public List<Attr> list() {\n     }\n \n     @Override\n-    public Attr read(final String key) {\n-        return logic.read(key);\n-    }\n-\n-    @Override\n-    public Response create(final Attr configTO) {\n-        final Attr config = logic.create(configTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(config.getSchema()).build();\n-        return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, config.getSchema()).\n-            entity(config).\n-            build();\n+    public void delete(final String schema) {\n+        logic.delete(schema);\n     }\n \n     @Override\n-    public void update(final Attr configTO) {\n-        logic.update(configTO);\n+    public Attr get(final String schema) {\n+        return logic.get(schema);\n     }\n \n     @Override\n-    public void delete(final String key) {\n-        logic.delete(key);\n+    public void set(final Attr value) {\n+        logic.set(value);\n     }\n \n     @Override"},{"sha":"fa3fb69574126a84f8269d4083808afb4ce72c1c","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WAOIDCJWKSServiceImpl.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAOIDCJWKSServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAOIDCJWKSServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAOIDCJWKSServiceImpl.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service.wa;\n-\n-import java.net.URI;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n-import org.apache.syncope.common.lib.types.JWSAlgorithm;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.logic.OIDCJWKSLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.wa.WAOIDCJWKSService;\n-\n-@Service\n-public class WAOIDCJWKSServiceImpl extends AbstractServiceImpl implements WAOIDCJWKSService {\n-\n-    @Autowired\n-    private OIDCJWKSLogic logic;\n-\n-    @Override\n-    public OIDCJWKSTO get() {\n-        return logic.get();\n-    }\n-\n-    @Override\n-    public Response set(final int size, final JWSAlgorithm algorithm) {\n-        OIDCJWKSTO jwks = logic.set(size, algorithm);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(jwks.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, jwks.getKey()).\n-                entity(jwks).\n-                build();\n-    }\n-}"},{"sha":"cef4562be4ab4439db0e24d6684f94ee762e32ba","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WASAML2IdPMetadataServiceImpl.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2IdPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2IdPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2IdPMetadataServiceImpl.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service.wa;\n-\n-import java.net.URI;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n-\n-@Service\n-public class WASAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements WASAML2IdPMetadataService {\n-\n-    @Autowired\n-    private SAML2IdPMetadataLogic logic;\n-\n-    @Override\n-    public SAML2IdPMetadataTO getByOwner(final String appliesTo) {\n-        return logic.get(appliesTo);\n-    }\n-\n-    @Override\n-    public SAML2IdPMetadataTO read(final String key) {\n-        return logic.read(key);\n-    }\n-\n-    @Override\n-    public Response set(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        SAML2IdPMetadataTO saml2IdPMetadata = logic.set(saml2IdPMetadataTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(saml2IdPMetadata.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, saml2IdPMetadata.getKey()).\n-                build();\n-    }\n-}"},{"sha":"64a69187c4706a7261b21c7609f241c399c58dc3","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WASAML2SPKeystoreServiceImpl.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPKeystoreServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPKeystoreServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPKeystoreServiceImpl.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service.wa;\n-\n-import java.net.URI;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.logic.SAML2SPKeystoreLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n-\n-@Service\n-public class WASAML2SPKeystoreServiceImpl extends AbstractServiceImpl implements WASAML2SPKeystoreService {\n-\n-    @Autowired\n-    private SAML2SPKeystoreLogic logic;\n-\n-    @Override\n-    public SAML2SPKeystoreTO getByOwner(final String name) {\n-        return logic.get(name);\n-    }\n-\n-    @Override\n-    public SAML2SPKeystoreTO read(final String key) {\n-        return logic.read(key);\n-    }\n-\n-    @Override\n-    public Response set(final SAML2SPKeystoreTO keystoreTO) {\n-        SAML2SPKeystoreTO keystore = logic.set(keystoreTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(keystore.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, keystore.getKey()).\n-                build();\n-    }\n-}"},{"sha":"67fa859b8132da73b70dd4ddde0b74638c7f6870","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WASAML2SPMetadataServiceImpl.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPMetadataServiceImpl.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service.wa;\n-\n-import java.net.URI;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.logic.SAML2SPMetadataLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-\n-@Service\n-public class WASAML2SPMetadataServiceImpl extends AbstractServiceImpl implements WASAML2SPMetadataService {\n-\n-    @Autowired\n-    private SAML2SPMetadataLogic logic;\n-\n-    @Override\n-    public SAML2SPMetadataTO getByOwner(final String name) {\n-        return logic.get(name);\n-    }\n-\n-    @Override\n-    public SAML2SPMetadataTO read(final String key) {\n-        return logic.read(key);\n-    }\n-\n-    @Override\n-    public Response set(final SAML2SPMetadataTO metadataTO) {\n-        SAML2SPMetadataTO spMetadata = logic.set(metadataTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(spMetadata.getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, spMetadata.getKey()).\n-                build();\n-    }\n-}"},{"sha":"acd8cb9fc182756787ca70ae8269d182511e0dca","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WebAuthnRegistrationServiceImpl.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,26 +16,24 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n-import org.apache.syncope.core.logic.WebAuthnRegistrationServiceLogic;\n+import org.apache.syncope.core.logic.wa.WebAuthnRegistrationLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.util.List;\n-\n @Service\n public class WebAuthnRegistrationServiceImpl extends AbstractServiceImpl implements WebAuthnRegistrationService {\n+\n     @Autowired\n-    private WebAuthnRegistrationServiceLogic logic;\n+    private WebAuthnRegistrationLogic logic;\n \n     @Override\n     public List<WebAuthnAccount> list() {\n@@ -48,7 +46,7 @@ public WebAuthnAccount read(final String key) {\n     }\n \n     @Override\n-    public WebAuthnAccount findAccountFor(final String owner) {\n+    public WebAuthnAccount readFor(final String owner) {\n         return logic.findAccountBy(owner);\n     }\n \n@@ -65,17 +63,17 @@ public Response delete(final String owner, final String credentialId) {\n     }\n \n     @Override\n-    public Response create(final WebAuthnAccount account) {\n-        final WebAuthnAccount token = logic.create(account);\n+    public Response create(final String owner, final WebAuthnAccount account) {\n+        WebAuthnAccount token = logic.create(owner, account);\n         URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n         return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n-            entity(token).\n-            build();\n+                header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n+                entity(token).\n+                build();\n     }\n \n     @Override\n-    public void update(final WebAuthnAccount account) {\n-        logic.update(account);\n+    public void update(final String owner, final WebAuthnAccount account) {\n+        logic.update(owner, account);\n     }\n }"},{"sha":"7452835f76e85d3b6f5ddaa33e5e7da15a100b8f","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -29,7 +29,7 @@\n  *\n  * @param <T> transfer object used for input / output\n  */\n-abstract class AbstractLogic<T extends EntityTO> {\n+public abstract class AbstractLogic<T extends EntityTO> {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractLogic.class);\n "},{"sha":"fb8c22cdc33e0fed50a3e3e05595d0a7b8be7fbe","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractTransactionalLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTransactionalLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTransactionalLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTransactionalLogic.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -27,5 +27,5 @@\n  * @param <T> transfer object used for input / output\n  */\n @Transactional(rollbackFor = { Throwable.class })\n-abstract class AbstractTransactionalLogic<T extends EntityTO> extends AbstractLogic<T> {\n+public abstract class AbstractTransactionalLogic<T extends EntityTO> extends AbstractLogic<T> {\n }"},{"sha":"c4bdf9ffba01188befc8344cc74cdd413c2ea830","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/AuthProfileDAO.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,30 +16,24 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.persistence.api.dao.auth;\n \n-import org.apache.syncope.core.persistence.api.dao.DAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-\n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n \n public interface AuthProfileDAO extends DAO<AuthProfile> {\n \n+    AuthProfile find(String key);\n+\n     List<AuthProfile> findAll();\n \n     Optional<AuthProfile> findByOwner(String owner);\n \n-    Optional<AuthProfile> findByKey(String key);\n-\n     AuthProfile save(AuthProfile profile);\n \n-    void deleteByKey(String key);\n-\n-    void deleteByOwner(String owner);\n+    void delete(String key);\n \n     void delete(AuthProfile authProfile);\n-\n-    void deleteAll();\n }"},{"sha":"3eb899ddcdbe1ff3ba577928040a79bc100fe937","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/WAConfigDAO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FWAConfigDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FWAConfigDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FWAConfigDAO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -32,9 +32,4 @@ public interface WAConfigDAO extends DAO<WAConfigEntry> {\n     WAConfigEntry save(WAConfigEntry configEntry);\n \n     void delete(String key);\n-\n-    void delete(WAConfigEntry configEntry);\n-\n-    void deleteAll();\n-\n }"},{"sha":"3316176726dda8404dde619dcd3d913b2900f531","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-\n import java.util.List;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n \n public interface AuthProfile extends Entity {\n \n@@ -37,9 +35,9 @@ public interface AuthProfile extends Entity {\n \n     void setGoogleMfaAuthTokens(List<GoogleMfaAuthToken> tokens);\n \n-    List<U2FRegisteredDevice> getU2FRegisteredDevices();\n+    List<U2FDevice> getU2FRegisteredDevices();\n \n-    void setU2FRegisteredDevices(List<U2FRegisteredDevice> records);\n+    void setU2FRegisteredDevices(List<U2FDevice> records);\n \n     List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts();\n \n@@ -48,10 +46,4 @@ public interface AuthProfile extends Entity {\n     WebAuthnAccount getWebAuthnAccount();\n \n     void setWebAuthnAccount(WebAuthnAccount accounts);\n-\n-    void add(GoogleMfaAuthToken token);\n-\n-    void add(GoogleMfaAuthAccount account);\n-\n-    void add(U2FRegisteredDevice account);\n }"},{"sha":"3968b46b255d3fbdbb3a54bd84690129d909d72e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/ClientAppUtilsFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtilsFactory.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n \n public interface ClientAppUtilsFactory {"},{"sha":"b58c662ebe4a54142969e7e2247caf63ba9e06bd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SP.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-import org.apache.syncope.common.lib.XmlSecAlgorithms;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n \n import java.util.List;"},{"sha":"1b17fd85a8dfb24967fb61ebc88407bb6c375f83","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/WAConfigEntry.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FWAConfigEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FWAConfigEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FWAConfigEntry.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n-\n import java.util.List;\n \n public interface WAConfigEntry extends ProvidedKeyEntity {"},{"sha":"f765b5f3aedb7d4f2abbfcbe69f4f96708137814","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -567,7 +567,7 @@ public Optional<? extends LinkedAccount> findLinkedAccount(\n         query.setParameter(\"connObjectKeyValue\", connObjectKeyValue);\n \n         List<LinkedAccount> result = query.getResultList();\n-        return query.getResultList().isEmpty() ? Optional.empty() : Optional.of(result.get(0));\n+        return result.isEmpty() ? Optional.empty() : Optional.of(result.get(0));\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"277ece01a3b0a11dcebb4be8f94466f13f0399c8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthProfileDAO.java","status":"modified","additions":21,"deletions":44,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,55 +18,40 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao.auth;\n \n+import java.util.List;\n+import java.util.Optional;\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import javax.persistence.NoResultException;\n-import javax.persistence.TypedQuery;\n-\n-import java.util.List;\n-import java.util.Optional;\n \n @Repository\n public class JPAAuthProfileDAO extends AbstractDAO<AuthProfile> implements AuthProfileDAO {\n \n     @Override\n-    @Transactional(readOnly = true)\n+    public AuthProfile find(final String key) {\n+        return entityManager().find(JPAAuthProfile.class, key);\n+    }\n+\n+    @Override\n     public List<AuthProfile> findAll() {\n         TypedQuery<AuthProfile> query = entityManager().createQuery(\n-            \"SELECT e FROM \" + JPAAuthProfile.class.getSimpleName() + \" e \",\n-            AuthProfile.class);\n+                \"SELECT e FROM \" + JPAAuthProfile.class.getSimpleName() + \" e \",\n+                AuthProfile.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    @Transactional(readOnly = true)\n     public Optional<AuthProfile> findByOwner(final String owner) {\n-        try {\n-            TypedQuery<AuthProfile> query = entityManager().createQuery(\n+        TypedQuery<AuthProfile> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAAuthProfile.class.getSimpleName()\n-                    + \" e WHERE e.owner=:owner\", AuthProfile.class);\n-            query.setParameter(\"owner\", owner);\n-            return Optional.ofNullable(query.getSingleResult());\n-        } catch (final NoResultException e) {\n-            LOG.debug(\"No auth profile could be found for owner {}\", owner);\n-        }\n-        return Optional.empty();\n-    }\n+                + \" e WHERE e.owner=:owner\", AuthProfile.class);\n+        query.setParameter(\"owner\", owner);\n \n-    @Override\n-    @Transactional(readOnly = true)\n-    public Optional<AuthProfile> findByKey(final String key) {\n-        try {\n-            return Optional.ofNullable(entityManager().find(JPAAuthProfile.class, key));\n-        } catch (final NoResultException e) {\n-            LOG.debug(\"No auth profile could be found for {}\", key);\n-        }\n-        return Optional.empty();\n+        List<AuthProfile> result = query.getResultList();\n+        return result.isEmpty() ? Optional.empty() : Optional.of(result.get(0));\n     }\n \n     @Override\n@@ -75,24 +60,16 @@ public AuthProfile save(final AuthProfile profile) {\n     }\n \n     @Override\n-    public void deleteByKey(final String key) {\n-        findByKey(key).ifPresent(this::delete);\n-    }\n-\n-    @Override\n-    public void deleteByOwner(final String owner) {\n-        findByOwner(owner).ifPresent(this::delete);\n+    public void delete(final String key) {\n+        AuthProfile authProfile = find(key);\n+        if (authProfile == null) {\n+            return;\n+        }\n+        delete(authProfile);\n     }\n \n     @Override\n     public void delete(final AuthProfile authProfile) {\n         entityManager().remove(authProfile);\n     }\n-\n-    @Override\n-    public void deleteAll() {\n-        entityManager().\n-            createQuery(\"DELETE FROM \" + JPAAuthProfile.class.getSimpleName()).\n-            executeUpdate();\n-    }\n }"},{"sha":"d9c5dbc4265162259c78c37fa8987b98e6723f08","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAWAConfigDAO.java","status":"modified","additions":3,"deletions":17,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.persistence.jpa.dao.auth;\n \n import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n@@ -25,14 +24,12 @@\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-\n-import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-\n import java.util.List;\n \n @Repository\n public class JPAWAConfigDAO extends AbstractDAO<WAConfigEntry> implements WAConfigDAO {\n+\n     @Transactional(readOnly = true)\n     @Override\n     public WAConfigEntry find(final String key) {\n@@ -43,7 +40,7 @@ public WAConfigEntry find(final String key) {\n     @Override\n     public List<WAConfigEntry> findAll() {\n         TypedQuery<WAConfigEntry> query = entityManager().createQuery(\n-            \"SELECT e FROM \" + JPAWAConfigEntry.class.getSimpleName() + \" e\", WAConfigEntry.class);\n+                \"SELECT e FROM \" + JPAWAConfigEntry.class.getSimpleName() + \" e\", WAConfigEntry.class);\n         return query.getResultList();\n     }\n \n@@ -58,17 +55,6 @@ public void delete(final String key) {\n         if (entry == null) {\n             return;\n         }\n-        delete(entry);\n-    }\n-\n-    @Override\n-    public void delete(final WAConfigEntry configEntry) {\n-        entityManager().remove(configEntry);\n-    }\n-\n-    @Override\n-    public void deleteAll() {\n-        Query delete = entityManager().createQuery(\"DELETE FROM \" + JPAWAConfigEntry.class.getSimpleName());\n-        delete.executeUpdate();\n+        entityManager().remove(entry);\n     }\n }"},{"sha":"8956bcd584f7c0f79083a7db73e648520e9d2703","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":10,"deletions":34,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -26,10 +26,10 @@\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -95,52 +95,28 @@ public void setGoogleMfaAuthAccounts(final List<GoogleMfaAuthAccount> accounts)\n     }\n \n     @Override\n-    public void add(final GoogleMfaAuthToken token) {\n-        checkType(token, GoogleMfaAuthToken.class);\n-        List<GoogleMfaAuthToken> tokens = getGoogleMfaAuthTokens();\n-        tokens.add(token);\n-        setGoogleMfaAuthTokens(tokens);\n-    }\n-\n-    @Override\n-    public List<U2FRegisteredDevice> getU2FRegisteredDevices() {\n+    public List<U2FDevice> getU2FRegisteredDevices() {\n         return u2fRegisteredDevices == null\n                 ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(u2fRegisteredDevices, new TypeReference<List<U2FRegisteredDevice>>() {\n+                : POJOHelper.deserialize(u2fRegisteredDevices, new TypeReference<List<U2FDevice>>() {\n                 });\n     }\n \n     @Override\n-    public void setU2FRegisteredDevices(final List<U2FRegisteredDevice> records) {\n+    public void setU2FRegisteredDevices(final List<U2FDevice> records) {\n         this.u2fRegisteredDevices = POJOHelper.serialize(records);\n     }\n \n     @Override\n     public WebAuthnAccount getWebAuthnAccount() {\n         return webAuthnAccount == null\n-            ? null\n-            : POJOHelper.deserialize(webAuthnAccount, new TypeReference<WebAuthnAccount>() {\n-        });\n+                ? null\n+                : POJOHelper.deserialize(webAuthnAccount, new TypeReference<WebAuthnAccount>() {\n+                });\n     }\n \n     @Override\n     public void setWebAuthnAccount(final WebAuthnAccount accounts) {\n         this.webAuthnAccount = POJOHelper.serialize(accounts);\n     }\n-\n-    @Override\n-    public void add(final GoogleMfaAuthAccount account) {\n-        checkType(account, GoogleMfaAuthAccount.class);\n-        List<GoogleMfaAuthAccount> accounts = getGoogleMfaAuthAccounts();\n-        accounts.add(account);\n-        setGoogleMfaAuthAccounts(accounts);\n-    }\n-\n-    @Override\n-    public void add(final U2FRegisteredDevice registration) {\n-        checkType(registration, U2FRegisteredDevice.class);\n-        List<U2FRegisteredDevice> records = getU2FRegisteredDevices();\n-        records.add(registration);\n-        setU2FRegisteredDevices(records);\n-    }\n }"},{"sha":"6754fe6e6bd5624f27acde611c93cf81eda73595","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtilsFactory.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n-import org.apache.syncope.common.lib.to.client.CASSPTO;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.core.persistence.api.entity.auth.CASSP;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;"},{"sha":"8e94d11f6c2d9efa24b1790af116cff6b3be981a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SP.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -27,7 +27,7 @@\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n-import org.apache.syncope.common.lib.XmlSecAlgorithms;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n \n import java.util.ArrayList;\n import java.util.List;"},{"sha":"dc73a4a7f56bbf3bcb9c7da961fd528d869cdf83","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAWAConfigEntry.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAWAConfigEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAWAConfigEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAWAConfigEntry.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,38 +18,36 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n-import java.util.ArrayList;\n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.List;\n-import javax.persistence.CollectionTable;\n-import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n-import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Table(name = JPAWAConfigEntry.TABLE)\n public class JPAWAConfigEntry extends AbstractProvidedKeyEntity implements WAConfigEntry {\n \n-    public static final String TABLE = \"ConfigEntry\";\n+    public static final String TABLE = \"WAConfigEntry\";\n \n     private static final long serialVersionUID = 6422422526695279794L;\n \n-    @ElementCollection\n-    @CollectionTable(name = TABLE + \"Values\", joinColumns =\n-            @JoinColumn(name = \"id\"))\n-    @Column(nullable = false)\n-    private List<String> values = new ArrayList<>();\n+    @Lob\n+    private String waConfigValues;\n \n     @Override\n     public List<String> getValues() {\n-        return values;\n+        return waConfigValues == null\n+                ? List.of()\n+                : POJOHelper.deserialize(waConfigValues, new TypeReference<List<String>>() {\n+                });\n     }\n \n     @Override\n     public void setValues(final List<String> values) {\n-        this.values = values;\n+        this.waConfigValues = POJOHelper.serialize(values);\n     }\n }"},{"sha":"56adb12cc2f24ae49e60e3dc3ca2f6ea99348d1d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":51,"deletions":63,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,42 +18,37 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n-import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n+import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.Date;\n-import java.util.List;\n-import java.util.Optional;\n-\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n @Transactional(\"Master\")\n public class AuthProfileTest extends AbstractTest {\n \n     @Autowired\n     private AuthProfileDAO authProfileDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n     @BeforeEach\n     public void beforeEach() {\n-        authProfileDAO.deleteAll();\n+        entityManager().createQuery(\"DELETE FROM \" + JPAAuthProfile.class.getSimpleName()).executeUpdate();\n     }\n \n     @Test\n@@ -68,7 +63,7 @@ public void googleMfaToken() {\n         assertFalse(authProfileDAO.findAll().isEmpty());\n \n         AuthProfile authProfile = result.get();\n-        result = authProfileDAO.findByKey(authProfile.getKey());\n+        result = Optional.ofNullable(authProfileDAO.find(authProfile.getKey()));\n         assertTrue(result.isPresent());\n \n         authProfile.setOwner(\"SyncopeCreate-New\");\n@@ -89,7 +84,7 @@ public void u2fRegisteredDevice() {\n         assertFalse(authProfileDAO.findAll().isEmpty());\n \n         AuthProfile authProfile = result.get();\n-        result = authProfileDAO.findByKey(authProfile.getKey());\n+        result = Optional.ofNullable(authProfileDAO.find(authProfile.getKey()));\n         assertTrue(result.isPresent());\n \n         authProfile.setOwner(\"SyncopeCreate-NewU2F\");\n@@ -102,23 +97,22 @@ public void u2fRegisteredDevice() {\n     @Test\n     public void webAuthnRegisteredDevice() {\n         String id = SecureRandomUtils.generateRandomUUID().toString();\n-        String record = \"[ {\" +\n-            \"    \\\"userIdentity\\\" : {\" +\n-            \"      \\\"name\\\" : \\\"casuser\\\",\" +\n-            \"      \\\"displayName\\\" : \\\"casuser\\\"\" +\n-            \"    },\" +\n-            \"    \\\"credential\\\" : {\" +\n-            \"      \\\"credentialId\\\" : \\\"fFGyV3K5x1\\\"\" +\n-            \"    },\" +\n-            \"    \\\"username\\\" : \\\"casuser\\\"\" +\n-            \"  } ]\";\n+        String record = \"[ {\"\n+                + \"    \\\"userIdentity\\\" : {\"\n+                + \"      \\\"name\\\" : \\\"casuser\\\",\"\n+                + \"      \\\"displayName\\\" : \\\"casuser\\\"\"\n+                + \"    },\"\n+                + \"    \\\"credential\\\" : {\"\n+                + \"      \\\"credentialId\\\" : \\\"fFGyV3K5x1\\\"\"\n+                + \"    },\"\n+                + \"    \\\"username\\\" : \\\"casuser\\\"\"\n+                + \"  } ]\";\n \n         WebAuthnDeviceCredential credential = new WebAuthnDeviceCredential.Builder().\n-            json(record).\n-            owner(id).\n-            identifier(\"fFGyV3K5x1\").\n-            build();\n-        \n+                json(record).\n+                identifier(\"fFGyV3K5x1\").\n+                build();\n+\n         createAuthProfileWithWebAuthnDevice(id, List.of(credential));\n \n         Optional<AuthProfile> result = authProfileDAO.findByOwner(id);\n@@ -127,7 +121,7 @@ public void webAuthnRegisteredDevice() {\n         assertFalse(authProfileDAO.findAll().isEmpty());\n \n         AuthProfile authProfile = result.get();\n-        result = authProfileDAO.findByKey(authProfile.getKey());\n+        result = Optional.ofNullable(authProfileDAO.find(authProfile.getKey()));\n         assertTrue(result.isPresent());\n \n         authProfile.setOwner(\"SyncopeCreate-NewU2F\");\n@@ -149,14 +143,14 @@ public void googleMfaAccount() {\n         assertFalse(authProfileDAO.findAll().isEmpty());\n \n         AuthProfile authProfile = result.get();\n-        result = authProfileDAO.findByKey(authProfile.getKey());\n+        result = Optional.ofNullable(authProfileDAO.find(authProfile.getKey()));\n         assertTrue(result.isPresent());\n \n         String secret = SecureRandomUtils.generateRandomUUID().toString();\n         List<GoogleMfaAuthAccount> googleMfaAuthAccounts = authProfile.getGoogleMfaAuthAccounts();\n         GoogleMfaAuthAccount googleMfaAuthAccount = googleMfaAuthAccounts.get(0);\n         googleMfaAuthAccount.setSecretKey(secret);\n-        \n+\n         authProfile.setGoogleMfaAuthAccounts(googleMfaAuthAccounts);\n         authProfile = authProfileDAO.save(authProfile);\n         assertEquals(secret, authProfile.getGoogleMfaAuthAccounts().get(0).getSecretKey());\n@@ -166,33 +160,28 @@ private AuthProfile createAuthProfileWithToken(final String owner, final Integer\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n         GoogleMfaAuthToken token = new GoogleMfaAuthToken.Builder()\n-            .issueDate(new Date())\n-            .token(otp)\n-            .owner(owner)\n-            .build();\n-        profile.add(token);\n+                .issueDate(new Date())\n+                .token(otp)\n+                .build();\n+        profile.setGoogleMfaAuthTokens(List.of(token));\n         return authProfileDAO.save(profile);\n     }\n \n     private AuthProfile createAuthProfileWithU2FDevice(final String owner, final String record) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n-        U2FRegisteredDevice token = new U2FRegisteredDevice.Builder()\n-            .issueDate(new Date())\n-            .record(record)\n-            .owner(owner)\n-            .build();\n-        profile.add(token);\n+        U2FDevice device = new U2FDevice.Builder().issueDate(new Date()).record(record).build();\n+        profile.setU2FRegisteredDevices(List.of(device));\n         return authProfileDAO.save(profile);\n     }\n \n-    private AuthProfile createAuthProfileWithWebAuthnDevice(final String owner, final List<WebAuthnDeviceCredential> records) {\n+    private AuthProfile createAuthProfileWithWebAuthnDevice(\n+            final String owner,\n+            final List<WebAuthnDeviceCredential> credentials) {\n+\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n-        WebAuthnAccount account = new WebAuthnAccount.Builder()\n-            .records(records)\n-            .owner(owner)\n-            .build();\n+        WebAuthnAccount account = new WebAuthnAccount.Builder().credentials(credentials).build();\n         profile.setWebAuthnAccount(account);\n         return authProfileDAO.save(profile);\n     }\n@@ -201,14 +190,13 @@ private AuthProfile createAuthProfileWithAccount(final String owner) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n         GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n-            .registrationDate(new Date())\n-            .scratchCodes(List.of(1, 2, 3, 4, 5))\n-            .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n-            .validationCode(123456)\n-            .owner(owner)\n-            .name(SecureRandomUtils.generateRandomUUID().toString())\n-            .build();\n-        profile.add(account);\n+                .registrationDate(new Date())\n+                .scratchCodes(List.of(1, 2, 3, 4, 5))\n+                .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n+                .validationCode(123456)\n+                .name(SecureRandomUtils.generateRandomUUID().toString())\n+                .build();\n+        profile.setGoogleMfaAuthAccounts(List.of(account));\n         return authProfileDAO.save(profile);\n     }\n }"},{"sha":"c6c3c25c0f33f863a0f451c258fcb2b4db44de25","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import org.apache.syncope.common.lib.XmlSecAlgorithms;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;"},{"sha":"411a73eed07cc0874431bbfefa1e85858f5d65f6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/WAConfigTest.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FWAConfigTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,22 +18,22 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-\n @Transactional(\"Master\")\n public class WAConfigTest extends AbstractTest {\n \n@@ -42,7 +42,7 @@ public class WAConfigTest extends AbstractTest {\n \n     @BeforeEach\n     public void beforeEach() {\n-        configDAO.deleteAll();\n+        entityManager().createQuery(\"DELETE FROM \" + JPAWAConfigEntry.class.getSimpleName()).executeUpdate();\n     }\n \n     @Test\n@@ -94,5 +94,4 @@ private WAConfigEntry create(final String name, final List<String> value) {\n         assertNotNull(configDAO.find(entry.getKey()));\n         return entry;\n     }\n-\n }"},{"sha":"a4bf6bc0c2230d65c7a4e253e75fcf90e0835d83","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ClientAppDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n \n public interface ClientAppDataBinder {"},{"sha":"0b13cf7e3a4331132ef0427eab091fa79541eb97","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/WAConfigDataBinder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FWAConfigDataBinder.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,16 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n \n public interface WAConfigDataBinder {\n-    Attr getAttr(WAConfigEntry waConfigEntry);\n \n-    WAConfigEntry create(Attr config);\n+    Attr get(WAConfigEntry waConfigEntry);\n \n-    WAConfigEntry update(WAConfigEntry entry, Attr config);\n+    WAConfigEntry set(Attr value);\n }"},{"sha":"e73ea1f99a1d5f85147c8b56c26562d3dd7ebc28","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthProfileDataBinderImpl.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.provisioning.java.data;\n \n import org.apache.syncope.common.lib.to.AuthProfileTO;\n@@ -28,6 +27,7 @@\n \n @Component\n public class AuthProfileDataBinderImpl implements AuthProfileDataBinder {\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -37,6 +37,9 @@ public AuthProfileTO getAuthProfileTO(final AuthProfile authProfile) {\n         authProfileTO.setKey(authProfile.getKey());\n         authProfileTO.setOwner(authProfile.getOwner());\n         authProfileTO.getGoogleMfaAuthTokens().addAll(authProfile.getGoogleMfaAuthTokens());\n+        authProfileTO.getGoogleMfaAuthAccounts().addAll(authProfile.getGoogleMfaAuthAccounts());\n+        authProfileTO.getU2FRegisteredDevices().addAll(authProfile.getU2FRegisteredDevices());\n+        authProfileTO.setWebAuthnAccount(authProfile.getWebAuthnAccount());\n         return authProfileTO;\n     }\n \n@@ -45,6 +48,9 @@ public AuthProfile create(final AuthProfileTO authProfileTO) {\n         AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n         authProfile.setOwner(authProfileTO.getOwner());\n         authProfile.setGoogleMfaAuthTokens(authProfileTO.getGoogleMfaAuthTokens());\n+        authProfile.setGoogleMfaAuthAccounts(authProfileTO.getGoogleMfaAuthAccounts());\n+        authProfile.setU2FRegisteredDevices(authProfileTO.getU2FRegisteredDevices());\n+        authProfile.setWebAuthnAccount(authProfileTO.getWebAuthnAccount());\n         return authProfile;\n     }\n }"},{"sha":"061f07671044c733248b1c87456d11fa4f4eaa2f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.client.CASSPTO;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;"},{"sha":"48507f835f19bc2ef397f31060d8acc7e800f729","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/WAConfigDataBinderImpl.java","status":"modified","additions":15,"deletions":22,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,10 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Optional;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n@@ -28,34 +29,26 @@\n \n @Component\n public class WAConfigDataBinderImpl implements WAConfigDataBinder {\n+\n+    @Autowired\n+    private WAConfigDAO waConfigDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n     @Override\n-    public Attr getAttr(final WAConfigEntry waConfigEntry) {\n+    public Attr get(final WAConfigEntry waConfigEntry) {\n         return new Attr.Builder(waConfigEntry.getKey()).values(waConfigEntry.getValues()).build();\n     }\n \n     @Override\n-    public WAConfigEntry create(final Attr configTO) {\n-        return update(entityFactory.newEntity(WAConfigEntry.class), configTO);\n-    }\n-\n-    @Override\n-    public WAConfigEntry update(final WAConfigEntry entry, final Attr configTO) {\n-        return getConfigEntry(entry, configTO);\n-    }\n-\n-    private WAConfigEntry getConfigEntry(\n-        final WAConfigEntry configEntry,\n-        final Attr config) {\n-\n-        WAConfigEntry result = configEntry;\n-        if (result == null) {\n-            result = entityFactory.newEntity(WAConfigEntry.class);\n-        }\n-        result.setValues(config.getValues());\n-        result.setKey(config.getSchema());\n-        return result;\n+    public WAConfigEntry set(final Attr attr) {\n+        WAConfigEntry entry = Optional.ofNullable(waConfigDAO.find(attr.getSchema())).orElseGet(() -> {\n+            WAConfigEntry waConfigEntry = entityFactory.newEntity(WAConfigEntry.class);\n+            waConfigEntry.setKey(attr.getSchema());\n+            return waConfigEntry;\n+        });\n+        entry.setValues(attr.getValues());\n+        return entry;\n     }\n }"},{"sha":"6db57270fb326864a5651bf5901d06c32f06fb79","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ClientCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -50,7 +50,7 @@\n @Component\n public class SAML2ClientCache {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(SAML2ClientCache.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2ClientCache.class);\n \n     private static Path METADATA_PATH;\n "},{"sha":"8100299bce3e536b1d8b60ae7c1cd192ed2e26d4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -86,9 +86,9 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;"},{"sha":"826d305c79dfd683700ef07403bffad3346ce27a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -29,9 +29,9 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n-import org.apache.syncope.common.lib.to.client.CASSPTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.fit.AbstractITCase;"},{"sha":"1b8143e1e8c4b28d298813a77599145836268a3a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GoogleMfaAuthAccountITCase.java","status":"removed","additions":0,"deletions":109,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,109 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import javax.ws.rs.core.Response;\n-\n-import java.util.Date;\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-public class GoogleMfaAuthAccountITCase extends AbstractITCase {\n-\n-    private static GoogleMfaAuthAccount createGoogleMfaAuthAccount() {\n-        String id = SecureRandomUtils.generateRandomUUID().toString();\n-        return new GoogleMfaAuthAccount.Builder()\n-            .registrationDate(new Date())\n-            .scratchCodes(List.of(1, 2, 3, 4, 5))\n-            .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n-            .validationCode(123456)\n-            .owner(id)\n-            .name(SecureRandomUtils.generateRandomUUID().toString())\n-            .build();\n-    }\n-\n-    @BeforeEach\n-    public void setup() {\n-        googleMfaAuthAccountService.deleteAll();\n-    }\n-\n-    @Test\n-    public void create() {\n-        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n-        assertDoesNotThrow(() -> {\n-            Response response = googleMfaAuthAccountService.save(acct);\n-            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            }\n-        });\n-    }\n-\n-    @Test\n-    public void count() {\n-        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n-        googleMfaAuthAccountService.save(acct);\n-        assertFalse(googleMfaAuthAccountService.list().isEmpty());\n-        assertEquals(1, googleMfaAuthAccountService.countAll().getTotalCount());\n-        assertEquals(1, googleMfaAuthAccountService.countFor(acct.getOwner()).getTotalCount());\n-        assertFalse(googleMfaAuthAccountService.findAccountsFor(acct.getOwner()).isEmpty());\n-    }\n-\n-    @Test\n-    public void deleteByOwner() {\n-        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n-        Response response = googleMfaAuthAccountService.save(acct);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(key);\n-        response = googleMfaAuthAccountService.deleteAccountsFor(acct.getOwner());\n-        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n-        assertThrows(SyncopeClientException.class, () -> googleMfaAuthAccountService.findAccountsFor(acct.getOwner()));\n-    }\n-\n-    @Test\n-    public void update() {\n-        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n-        Response response = googleMfaAuthAccountService.save(acct);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        acct = googleMfaAuthAccountService.findAccountBy(key);\n-        acct = googleMfaAuthAccountService.findAccountBy(acct.getId());\n-        acct.setSecretKey(\"NewSecret\");\n-        acct.setScratchCodes(List.of(9, 8, 7, 6, 5));\n-        googleMfaAuthAccountService.update(acct);\n-        assertEquals(1, googleMfaAuthAccountService.countAll().getTotalCount());\n-        acct = googleMfaAuthAccountService.findAccountsFor(acct.getOwner()).get(0);\n-        assertEquals(acct.getSecretKey(), acct.getSecretKey());\n-        googleMfaAuthAccountService.deleteAccountBy(acct.getKey());\n-    }\n-}"},{"sha":"1a40ee57d162f0efd7338bc277e2c88508fed21e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GoogleMfaAuthTokenITCase.java","status":"removed","additions":0,"deletions":141,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,141 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-import javax.ws.rs.core.Response;\n-import java.security.SecureRandom;\n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.UUID;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-public class GoogleMfaAuthTokenITCase extends AbstractITCase {\n-\n-    private static final SecureRandom SECURE_RANDOM = new SecureRandom();\n-\n-    private static GoogleMfaAuthToken createGoogleMfaAuthToken() {\n-        Integer token = SECURE_RANDOM.ints(100_000, 999_999)\n-                .findFirst()\n-                .getAsInt();\n-        return new GoogleMfaAuthToken.Builder()\n-                .owner(UUID.randomUUID().toString())\n-                .token(token)\n-                .issueDate(new Date())\n-                .build();\n-    }\n-\n-    @BeforeEach\n-    public void setup() {\n-        googleMfaAuthTokenService.deleteTokens();\n-    }\n-\n-    @Test\n-    public void create() {\n-        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        assertDoesNotThrow(() -> {\n-            Response response = googleMfaAuthTokenService.save(token);\n-            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            }\n-        });\n-    }\n-\n-    @Test\n-    public void count() {\n-        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        googleMfaAuthTokenService.save(token);\n-        assertEquals(1, googleMfaAuthTokenService.countTokens().getTotalCount());\n-        assertEquals(1, googleMfaAuthTokenService.findTokensFor(token.getOwner()).getTotalCount());\n-    }\n-\n-    @Test\n-    public void verifyProfile() {\n-        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        googleMfaAuthTokenService.save(token);\n-        List<AuthProfileTO> results = authProfileService.list();\n-        assertFalse(results.isEmpty());\n-        AuthProfileTO profileTO = results.get(0);\n-        assertNotNull(authProfileService.findByKey(profileTO.getKey()));\n-        assertNotNull(authProfileService.findByOwner(profileTO.getOwner()));\n-        Response response = authProfileService.deleteByOwner(token.getOwner());\n-        assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n-        assertThrows(SyncopeClientException.class, () -> authProfileService.findByOwner(token.getOwner()));\n-    }\n-\n-    @Test\n-    public void deleteByToken() {\n-        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        Response response = googleMfaAuthTokenService.save(token);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(key);\n-        response = googleMfaAuthTokenService.deleteToken(token.getToken());\n-        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n-        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).getResult().isEmpty());\n-    }\n-\n-    @Test\n-    public void deleteByOwner() {\n-        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        Response response = googleMfaAuthTokenService.save(token);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(key);\n-        response = googleMfaAuthTokenService.deleteTokensFor(token.getOwner());\n-        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n-        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).getResult().isEmpty());\n-    }\n-\n-    @Test\n-    public void deleteByOwnerAndToken() {\n-        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        Response response = googleMfaAuthTokenService.save(token);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(key);\n-        response = googleMfaAuthTokenService.deleteToken(token.getOwner(), token.getToken());\n-        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n-        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).getResult().isEmpty());\n-    }\n-\n-    @Test\n-    public void deleteByDate() {\n-        Date dateTime = Date.from(LocalDateTime.now().minusDays(1).atZone(ZoneId.systemDefault()).toInstant());\n-        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n-        Response response = googleMfaAuthTokenService.deleteTokensByDate(dateTime);\n-        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n-        assertTrue(googleMfaAuthTokenService.findTokensFor(token.getOwner()).getResult().isEmpty());\n-        assertEquals(0, googleMfaAuthTokenService.findTokensFor(token.getOwner()).getTotalCount());\n-    }\n-}"},{"sha":"9f800df9422f5bd46c337cb1455eb224db962d08","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCJWKSITCase.java","status":"modified","additions":5,"deletions":45,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,42 +18,34 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n-import com.nimbusds.jose.jwk.JWKSet;\n-import com.nimbusds.jose.jwk.KeyUse;\n-import com.nimbusds.jose.jwk.RSAKey;\n-import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n-import java.util.UUID;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n-import org.apache.syncope.common.rest.api.service.wa.WAOIDCJWKSService;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.springframework.http.HttpStatus;\n \n public class OIDCJWKSITCase extends AbstractITCase {\n \n-    private static WAOIDCJWKSService waOIDCJWKSService;\n+    private static OIDCJWKSService waOIDCJWKSService;\n \n     @BeforeAll\n     public static void setup() {\n         assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n \n         SyncopeClient anonymous = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        waOIDCJWKSService = anonymous.getService(WAOIDCJWKSService.class);\n+        waOIDCJWKSService = anonymous.getService(OIDCJWKSService.class);\n     }\n \n     @Test\n@@ -67,45 +59,13 @@ public void deleteGetSet() {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n \n-        Response response = waOIDCJWKSService.set(2048, JWSAlgorithm.RS256);\n+        Response response = waOIDCJWKSService.generate(2048, JWSAlgorithm.RS256);\n         assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n         try {\n-            waOIDCJWKSService.set(2048, JWSAlgorithm.RS512);\n+            waOIDCJWKSService.generate(2048, JWSAlgorithm.RS512);\n             fail(\"Should not recreate an OIDC JWKS\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n     }\n-\n-    private static OIDCJWKSTO getCurrentJwksTO() {\n-        try {\n-            return waOIDCJWKSService.get();\n-        } catch (final SyncopeClientException e) {\n-            if (e.getType() == ClientExceptionType.NotFound) {\n-                Response response = waOIDCJWKSService.set(2048, JWSAlgorithm.RS256);\n-                assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n-                return waOIDCJWKSService.get();\n-            }\n-        }\n-        throw new NotFoundException(\"Unable to locate current OIDC JWKS\");\n-    }\n-\n-    @Test\n-    public void update() throws Exception {\n-        oidcJWKSService.delete();\n-\n-        RSAKey jwk = new RSAKeyGenerator(2048)\n-                .keyUse(KeyUse.SIGNATURE)\n-                .keyID(UUID.randomUUID().toString())\n-                .generate();\n-        String json = new JWKSet(jwk).toString();\n-\n-        assertDoesNotThrow(() -> {\n-            OIDCJWKSTO currentTO = getCurrentJwksTO();\n-            currentTO.setJson(json);\n-            oidcJWKSService.update(currentTO);\n-        });\n-        OIDCJWKSTO currentTO = getCurrentJwksTO();\n-        assertEquals(json, currentTO.getJson());\n-    }\n }"},{"sha":"8ce1688a3803cb8f2e022f65d83512faf1d45777","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2IdPMetadataITCase.java","status":"modified","additions":6,"deletions":25,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -33,22 +33,21 @@\n import org.junit.jupiter.api.Test;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.platform.commons.util.StringUtils;\n \n public class SAML2IdPMetadataITCase extends AbstractITCase {\n \n-    private static WASAML2IdPMetadataService waSAML2IdPMetadataService;\n+    private static SAML2IdPMetadataService waSAML2IdPMetadataService;\n \n     @BeforeAll\n     public static void setup() {\n         assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n \n         SyncopeClient anonymous = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        waSAML2IdPMetadataService = anonymous.getService(WASAML2IdPMetadataService.class);\n+        waSAML2IdPMetadataService = anonymous.getService(SAML2IdPMetadataService.class);\n     }\n \n     private static void testIsValid(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n@@ -68,7 +67,7 @@ private SAML2IdPMetadataTO createSAML2IdPMetadata(final SAML2IdPMetadataTO saml2\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return getObject(response.getLocation(), WASAML2IdPMetadataService.class, saml2IdPMetadata.getClass());\n+        return getObject(response.getLocation(), SAML2IdPMetadataService.class, saml2IdPMetadata.getClass());\n     }\n \n     private SAML2IdPMetadataTO createSAML2IdPMetadata() {\n@@ -90,7 +89,7 @@ private SAML2IdPMetadataTO createSAML2IdPMetadata() {\n     public void read() {\n         SAML2IdPMetadataTO saml2IdPMetadataTO;\n         try {\n-            saml2IdPMetadataTO = waSAML2IdPMetadataService.getByOwner(OWNER);\n+            saml2IdPMetadataTO = waSAML2IdPMetadataService.readFor(OWNER);\n         } catch (SyncopeClientException e) {\n             saml2IdPMetadataTO = createSAML2IdPMetadata();\n         }\n@@ -103,7 +102,7 @@ public void read() {\n     @Test\n     public void create() {\n         try {\n-            waSAML2IdPMetadataService.getByOwner(OWNER);\n+            waSAML2IdPMetadataService.readFor(OWNER);\n         } catch (SyncopeClientException e) {\n             createSAML2IdPMetadata();\n         }\n@@ -118,22 +117,4 @@ public void create() {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n     }\n-\n-    @Test\n-    public void update() {\n-        SAML2IdPMetadataTO saml2IdPMetadataTO;\n-        try {\n-            saml2IdPMetadataTO = waSAML2IdPMetadataService.getByOwner(OWNER);\n-        } catch (NotFoundException e) {\n-            saml2IdPMetadataTO = createSAML2IdPMetadata();\n-        }\n-\n-        assertNotNull(saml2IdPMetadataTO);\n-        saml2IdPMetadataTO.setEncryptionKey(\"newKey\");\n-        saml2IdPMetadataService.update(saml2IdPMetadataTO);\n-        saml2IdPMetadataTO = waSAML2IdPMetadataService.getByOwner(saml2IdPMetadataTO.getAppliesTo());\n-        assertNotNull(saml2IdPMetadataTO);\n-\n-        assertEquals(\"newKey\", saml2IdPMetadataTO.getEncryptionKey());\n-    }\n }"},{"sha":"2bc92fcdba466bcab8f386daff23033c48410fc1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPKeystoreITCase.java","status":"modified","additions":9,"deletions":29,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -32,27 +32,26 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n public class SAML2SPKeystoreITCase extends AbstractITCase {\n \n-    private static WASAML2SPKeystoreService waSAML2SPKeystoreService;\n+    private static SAML2SPKeystoreService waSAML2SPKeystoreService;\n \n-    private static WASAML2SPMetadataService waSAML2SPMetadataService;\n+    private static SAML2SPMetadataService waSAML2SPMetadataService;\n \n     @BeforeAll\n     public static void setup() {\n         assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n \n         SyncopeClient anonymous = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        waSAML2SPKeystoreService = anonymous.getService(WASAML2SPKeystoreService.class);\n-        waSAML2SPMetadataService = anonymous.getService(WASAML2SPMetadataService.class);\n+        waSAML2SPKeystoreService = anonymous.getService(SAML2SPKeystoreService.class);\n+        waSAML2SPMetadataService = anonymous.getService(SAML2SPMetadataService.class);\n     }\n \n     private static void testIsValid(final SAML2SPKeystoreTO keystoreTO) {\n@@ -68,7 +67,7 @@ private SAML2SPKeystoreTO createSAML2SPKeystore(final SAML2SPKeystoreTO keystore\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return getObject(response.getLocation(), WASAML2SPKeystoreService.class, keystoreTO.getClass());\n+        return getObject(response.getLocation(), SAML2SPKeystoreService.class, keystoreTO.getClass());\n     }\n \n     private SAML2SPKeystoreTO createSAML2SPKeystore() {\n@@ -85,7 +84,7 @@ private SAML2SPKeystoreTO createSAML2SPKeystore() {\n     public void read() {\n         SAML2SPKeystoreTO keystoreTO;\n         try {\n-            keystoreTO = waSAML2SPKeystoreService.getByOwner(OWNER);\n+            keystoreTO = waSAML2SPKeystoreService.readFor(OWNER);\n         } catch (SyncopeClientException e) {\n             keystoreTO = createSAML2SPKeystore();\n         }\n@@ -97,7 +96,7 @@ public void read() {\n     @Test\n     public void create() {\n         try {\n-            waSAML2SPMetadataService.getByOwner(OWNER);\n+            waSAML2SPMetadataService.readFor(OWNER);\n         } catch (SyncopeClientException e) {\n             createSAML2SPKeystore();\n         }\n@@ -112,23 +111,4 @@ public void create() {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n     }\n-\n-    @Test\n-    public void update() {\n-        SAML2SPKeystoreTO keystoreTO;\n-        try {\n-            keystoreTO = waSAML2SPKeystoreService.getByOwner(OWNER);\n-        } catch (NotFoundException e) {\n-            keystoreTO = createSAML2SPKeystore();\n-        }\n-        assertNotNull(keystoreTO);\n-        keystoreTO.setKeystore(\"new-keystore\");\n-        keystoreTO.setOwner(\"Syncope4\");\n-\n-        saml2SPKeystoreService.update(keystoreTO);\n-        keystoreTO = waSAML2SPKeystoreService.read(keystoreTO.getKey());\n-        assertNotNull(keystoreTO);\n-        assertEquals(\"new-keystore\", keystoreTO.getKeystore());\n-        assertEquals(\"Syncope4\", keystoreTO.getOwner());\n-    }\n }"},{"sha":"a7b5e4407ebac33c18d65fb8dd9c9f695524ccb1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPMetadataITCase.java","status":"modified","additions":6,"deletions":26,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -32,23 +32,22 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n public class SAML2SPMetadataITCase extends AbstractITCase {\n \n-    private static WASAML2SPMetadataService waSAML2SPMetadataService;\n+    private static SAML2SPMetadataService waSAML2SPMetadataService;\n \n     @BeforeAll\n     public static void setup() {\n         assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n \n         SyncopeClient anonymous = clientFactory.create(\n                 new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        waSAML2SPMetadataService = anonymous.getService(WASAML2SPMetadataService.class);\n+        waSAML2SPMetadataService = anonymous.getService(SAML2SPMetadataService.class);\n     }\n \n     private SAML2SPMetadataTO createSAML2SPMetadata(final SAML2SPMetadataTO metadata) {\n@@ -59,7 +58,7 @@ private SAML2SPMetadataTO createSAML2SPMetadata(final SAML2SPMetadataTO metadata\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return getObject(response.getLocation(), WASAML2SPMetadataService.class, metadata.getClass());\n+        return getObject(response.getLocation(), SAML2SPMetadataService.class, metadata.getClass());\n     }\n \n     private static void testIsValid(final SAML2SPMetadataTO metadataTO) {\n@@ -81,7 +80,7 @@ private SAML2SPMetadataTO createSAML2SPMetadata() {\n     public void read() {\n         SAML2SPMetadataTO metadataTO;\n         try {\n-            metadataTO = waSAML2SPMetadataService.getByOwner(OWNER);\n+            metadataTO = waSAML2SPMetadataService.readFor(OWNER);\n         } catch (SyncopeClientException e) {\n             metadataTO = createSAML2SPMetadata();\n         }\n@@ -93,7 +92,7 @@ public void read() {\n     @Test\n     public void create() {\n         try {\n-            waSAML2SPMetadataService.getByOwner(OWNER);\n+            waSAML2SPMetadataService.readFor(OWNER);\n         } catch (SyncopeClientException e) {\n             createSAML2SPMetadata();\n         }\n@@ -108,23 +107,4 @@ public void create() {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n     }\n-\n-    @Test\n-    public void update() {\n-        SAML2SPMetadataTO metadataTO;\n-        try {\n-            metadataTO = waSAML2SPMetadataService.getByOwner(OWNER);\n-        } catch (NotFoundException e) {\n-            metadataTO = createSAML2SPMetadata();\n-        }\n-        assertNotNull(metadataTO);\n-        metadataTO.setMetadata(\"new-metadata\");\n-        metadataTO.setOwner(\"Syncope4\");\n-\n-        saml2SPMetadataService.update(metadataTO);\n-        metadataTO = waSAML2SPMetadataService.read(metadataTO.getKey());\n-        assertNotNull(metadataTO);\n-        assertEquals(\"new-metadata\", metadataTO.getMetadata());\n-        assertEquals(\"Syncope4\", metadataTO.getOwner());\n-    }\n }"},{"sha":"4d75b8f9f849352127ae346a1a41532e44d8deb6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/U2FRegistrationITCase.java","status":"removed","additions":0,"deletions":138,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FU2FRegistrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FU2FRegistrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FU2FRegistrationITCase.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -1,138 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.apache.syncope.fit.core;\n-\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.wa.U2FDeviceQuery;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import javax.ws.rs.core.Response;\n-\n-import java.time.LocalDate;\n-import java.time.ZoneId;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-public class U2FRegistrationITCase extends AbstractITCase {\n-    private static U2FRegisteredDevice createDeviceRegistration() {\n-        return new U2FRegisteredDevice.Builder()\n-            .owner(UUID.randomUUID().toString())\n-            .issueDate(new Date())\n-            .id(System.currentTimeMillis())\n-            .record(\"{\\\"keyHandle\\\":\\\"2_QYgDSPYcOgYBGBe8c9PVCunjigbD-3o5HcliXhu-Up_GKckYMxxVF6AgSPWubqfWy8WmJNDYQEJ1QKZe343Q\\\",\" +\n-                \"\\\"publicKey\\\":\\\"BMj46cH-lHkRMovZhrusmm_fYL_sFausDPJIDZfx4pIiRqRNtasd4vU3yJyrTXXbdxyD36GZLx1WKLHGmApv7Nk\\\"\" +\n-                \",\\\"counter\\\":-1,\\\"compromised\\\":false}\")\n-            .build();\n-    }\n-\n-    @BeforeEach\n-    public void setup() {\n-        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().build());\n-    }\n-\n-    @Test\n-    public void create() {\n-        U2FRegisteredDevice acct = createDeviceRegistration();\n-        assertDoesNotThrow(() -> {\n-            Response response = u2FRegistrationService.create(acct);\n-            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            }\n-        });\n-    }\n-\n-    @Test\n-    public void count() {\n-        U2FRegisteredDevice acct = createDeviceRegistration();\n-        Response response = u2FRegistrationService.create(acct);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(u2FRegistrationService.read(key));\n-        Date date = Date.from(LocalDate.now().minusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant());\n-\n-        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-            .owner(acct.getOwner())\n-            .expirationDate(date)\n-            .build();\n-        List<U2FRegisteredDevice> devices = u2FRegistrationService.search(query).getResult();\n-        assertEquals(1, devices.size());\n-\n-        query = new U2FDeviceQuery.Builder()\n-            .id(acct.getId())\n-            .build();\n-        u2FRegistrationService.delete(query);\n-\n-        query = new U2FDeviceQuery.Builder().build();\n-        devices = u2FRegistrationService.search(query).getResult();\n-        assertTrue(devices.isEmpty());\n-    }\n-\n-    @Test\n-    public void delete() {\n-        U2FRegisteredDevice acct1 = createDeviceRegistration();\n-        Response response = u2FRegistrationService.create(acct1);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(u2FRegistrationService.read(key));\n-\n-        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-            .entityKey(key)\n-            .build();\n-        u2FRegistrationService.delete(query);\n-        assertNull(u2FRegistrationService.read(key));\n-\n-        Date date = Date.from(LocalDate.now().plusDays(1)\n-            .atStartOfDay(ZoneId.systemDefault()).toInstant());\n-        query = new U2FDeviceQuery.Builder()\n-            .expirationDate(date)\n-            .build();\n-        u2FRegistrationService.delete(query);\n-\n-        query = new U2FDeviceQuery.Builder()\n-            .expirationDate(date)\n-            .build();\n-        assertTrue(u2FRegistrationService.search(query).getResult().isEmpty());\n-    }\n-\n-    @Test\n-    public void update() {\n-        U2FRegisteredDevice acct1 = createDeviceRegistration();\n-        Response response = u2FRegistrationService.create(acct1);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        acct1 = u2FRegistrationService.read(key);\n-        assertNotNull(acct1);\n-        acct1.setOwner(\"NewOwner\");\n-        u2FRegistrationService.update(acct1);\n-        acct1 = u2FRegistrationService.read(key);\n-        assertEquals(\"NewOwner\", acct1.getOwner());\n-\n-    }\n-}"},{"sha":"2efb4e8f010159da73b10fdfee507473cd87cd94","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/GoogleMfaAuthAccountITCase.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthAccountITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.wa;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class GoogleMfaAuthAccountITCase extends AbstractITCase {\n+\n+    private static GoogleMfaAuthAccount createGoogleMfaAuthAccount() {\n+        return new GoogleMfaAuthAccount.Builder()\n+                .registrationDate(new Date())\n+                .scratchCodes(List.of(1, 2, 3, 4, 5))\n+                .secretKey(SecureRandomUtils.generateRandomUUID().toString())\n+                .validationCode(123456)\n+                .name(SecureRandomUtils.generateRandomUUID().toString())\n+                .build();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        googleMfaAuthAccountService.delete();\n+    }\n+\n+    @Test\n+    public void create() {\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        assertDoesNotThrow(() -> googleMfaAuthAccountService.create(UUID.randomUUID().toString(), acct));\n+    }\n+\n+    @Test\n+    public void count() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        googleMfaAuthAccountService.create(owner, acct);\n+        PagedResult<GoogleMfaAuthAccount> list = googleMfaAuthAccountService.list();\n+        assertFalse(list.getResult().isEmpty());\n+        assertEquals(1, list.getTotalCount());\n+\n+        PagedResult<GoogleMfaAuthAccount> read = googleMfaAuthAccountService.readFor(owner);\n+        assertEquals(1, read.getTotalCount());\n+        assertFalse(read.getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void deleteFor() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        googleMfaAuthAccountService.create(owner, acct);\n+        googleMfaAuthAccountService.deleteFor(owner);\n+        assertThrows(SyncopeClientException.class, () -> googleMfaAuthAccountService.readFor(owner));\n+    }\n+\n+    @Test\n+    public void update() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        googleMfaAuthAccountService.create(owner, acct);\n+        acct = googleMfaAuthAccountService.read(acct.getId());\n+        acct.setSecretKey(\"NewSecret\");\n+        acct.setScratchCodes(List.of(9, 8, 7, 6, 5));\n+        googleMfaAuthAccountService.update(owner, acct);\n+        assertEquals(1, googleMfaAuthAccountService.list().getTotalCount());\n+        acct = googleMfaAuthAccountService.readFor(owner).getResult().get(0);\n+        assertEquals(acct.getSecretKey(), acct.getSecretKey());\n+        googleMfaAuthAccountService.delete(acct.getKey());\n+    }\n+}"},{"sha":"95f6290011cf3a7e2343fc192edb04ceecb7c788","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/GoogleMfaAuthTokenITCase.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FGoogleMfaAuthTokenITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.wa;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.security.SecureRandom;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class GoogleMfaAuthTokenITCase extends AbstractITCase {\n+\n+    private static final SecureRandom SECURE_RANDOM = new SecureRandom();\n+\n+    private static GoogleMfaAuthToken createGoogleMfaAuthToken() {\n+        int token = SECURE_RANDOM.ints(100_000, 999_999).findFirst().getAsInt();\n+        return new GoogleMfaAuthToken.Builder().token(token).issueDate(new Date()).build();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        googleMfaAuthTokenService.delete(null);\n+    }\n+\n+    @Test\n+    public void create() {\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        assertDoesNotThrow(() -> googleMfaAuthTokenService.store(UUID.randomUUID().toString(), token));\n+    }\n+\n+    @Test\n+    public void count() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.store(owner, token);\n+        assertEquals(1, googleMfaAuthTokenService.list().getTotalCount());\n+        assertEquals(1, googleMfaAuthTokenService.readFor(owner).getTotalCount());\n+    }\n+\n+    @Test\n+    public void verifyProfile() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.store(owner, token);\n+        List<AuthProfileTO> results = authProfileService.list();\n+        assertFalse(results.isEmpty());\n+        AuthProfileTO profileTO = results.get(0);\n+        assertNotNull(authProfileService.read(profileTO.getKey()));\n+        assertNotNull(authProfileService.readByOwner(profileTO.getOwner()));\n+        authProfileService.deleteByOwner(owner);\n+        assertThrows(SyncopeClientException.class, () -> authProfileService.readByOwner(owner));\n+    }\n+\n+    @Test\n+    public void deleteByToken() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.store(owner, token);\n+        googleMfaAuthTokenService.delete(token.getOtp());\n+        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void deleteByOwner() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.store(owner, token);\n+        googleMfaAuthTokenService.deleteFor(owner);\n+        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void deleteByOwnerAndToken() {\n+        String owner = UUID.randomUUID().toString();\n+        GoogleMfaAuthToken token = createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.store(owner, token);\n+        googleMfaAuthTokenService.delete(owner, token.getOtp());\n+        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void deleteByDate() {\n+        String owner = UUID.randomUUID().toString();\n+        Date dateTime = Date.from(LocalDateTime.now().minusDays(1).atZone(ZoneId.systemDefault()).toInstant());\n+        createGoogleMfaAuthToken();\n+        googleMfaAuthTokenService.delete(dateTime);\n+        assertTrue(googleMfaAuthTokenService.readFor(owner).getResult().isEmpty());\n+        assertEquals(0, googleMfaAuthTokenService.readFor(owner).getTotalCount());\n+    }\n+}"},{"sha":"1d82680130494411b8aba8ad36a9c5adbaa3b118","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/U2FRegistrationITCase.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FU2FRegistrationITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.wa;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.U2FDeviceQuery;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class U2FRegistrationITCase extends AbstractITCase {\n+\n+    private static U2FDevice createDeviceRegistration() {\n+        return new U2FDevice.Builder()\n+                .issueDate(new Date())\n+                .id(System.currentTimeMillis())\n+                .record(\"{\\\"keyHandle\\\":\\\"2_QYgDSPYcOgYBGBe8c9PVCunjigbD-3o5HcliXhu-Up_GKckYMxxVF6AgSPWubqfWy8WmJNDYQE\"\n+                        + \"J1QKZe343Q\\\",\"\n+                        + \"\\\"publicKey\\\":\\\"BMj46cH-lHkRMovZhrusmm_fYL_sFausDPJIDZfx4pIiRqRNtasd4vU3yJyrTXXbdxyD36GZLx1\"\n+                        + \"WKLHGmApv7Nk\\\"\"\n+                        + \",\\\"counter\\\":-1,\\\"compromised\\\":false}\")\n+                .build();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().build());\n+    }\n+\n+    @Test\n+    public void create() {\n+        assertDoesNotThrow(() -> u2FRegistrationService.create(\n+                UUID.randomUUID().toString(), createDeviceRegistration()));\n+    }\n+\n+    @Test\n+    public void count() {\n+        String owner = UUID.randomUUID().toString();\n+        U2FDevice device = createDeviceRegistration();\n+        Response response = u2FRegistrationService.create(owner, device);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(u2FRegistrationService.read(key));\n+\n+        List<U2FDevice> devices = u2FRegistrationService.search(\n+                new U2FDeviceQuery.Builder().owner(owner).expirationDate(\n+                        Date.from(LocalDate.now().minusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant())).\n+                        build()).getResult();\n+        assertEquals(1, devices.size());\n+\n+        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().id(device.getId()).build());\n+\n+        devices = u2FRegistrationService.search(new U2FDeviceQuery.Builder().build()).getResult();\n+        assertTrue(devices.isEmpty());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        U2FDevice device = createDeviceRegistration();\n+        Response response = u2FRegistrationService.create(UUID.randomUUID().toString(), device);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(u2FRegistrationService.read(key));\n+\n+        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().entityKey(key).build());\n+        assertNull(u2FRegistrationService.read(key));\n+\n+        Date date = Date.from(LocalDate.now().plusDays(1)\n+                .atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\n+        u2FRegistrationService.delete(new U2FDeviceQuery.Builder().expirationDate(date).build());\n+\n+        assertTrue(u2FRegistrationService.search(\n+                new U2FDeviceQuery.Builder().expirationDate(date).build()).getResult().isEmpty());\n+    }\n+\n+    @Test\n+    public void update() {\n+        U2FDevice device = createDeviceRegistration();\n+        Response response = u2FRegistrationService.create(UUID.randomUUID().toString(), device);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        device = u2FRegistrationService.read(key);\n+        assertNotNull(device);\n+\n+        device.setRecord(\"newRecord\");\n+        u2FRegistrationService.update(device);\n+\n+        device = u2FRegistrationService.read(key);\n+        assertEquals(\"newRecord\", device.getRecord());\n+    }\n+}"},{"sha":"87a96bf8d6b6f668872429d417433cd4bf3da2c5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/WAClientAppITCase.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAClientAppITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.fit.core;\n+package org.apache.syncope.fit.core.wa;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -34,8 +34,8 @@\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.fit.AbstractITCase;","previous_filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAClientAppITCase.java"},{"sha":"54cafbebdebb4e7a4ed1bfe0f89544365cd857ca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/WAConfigITCase.java","status":"renamed","additions":17,"deletions":26,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAConfigITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAConfigITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWAConfigITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,52 +16,43 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.fit.core;\n+package org.apache.syncope.fit.core.wa;\n \n-import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Test;\n-\n-import javax.ws.rs.core.Response;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n \n public class WAConfigITCase extends AbstractITCase {\n+\n     private static Attr runTest(final List<String> initialValue, final List<String> updatedValue) {\n-        Attr configTO = new Attr.Builder(UUID.randomUUID().toString())\n-            .values(initialValue)\n-            .build();\n-        Response response = waConfigService.create(configTO);\n-        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n-        assertNotNull(key);\n+        Attr config = new Attr.Builder(UUID.randomUUID().toString()).values(initialValue).build();\n+        waConfigService.set(config);\n \n         assertFalse(waConfigService.list().isEmpty());\n \n-        configTO = waConfigService.read(key);\n-        assertNotNull(configTO);\n+        config = waConfigService.get(config.getSchema());\n+        assertNotNull(config);\n \n-        configTO = new Attr.Builder(configTO.getSchema())\n-            .values(updatedValue)\n-            .build();\n-        waConfigService.update(configTO);\n+        config = new Attr.Builder(config.getSchema()).values(updatedValue).build();\n+        waConfigService.set(config);\n \n-        Attr updatedTO = waConfigService.read(key);\n+        Attr updatedTO = waConfigService.get(config.getSchema());\n         updatedTO.getValues().stream().allMatch(((Collection) updatedValue)::contains);\n         return updatedTO;\n     }\n \n     private static <T extends Serializable> void deleteEntry(final Attr configTO) {\n         waConfigService.delete(configTO.getSchema());\n-        assertThrows(SyncopeClientException.class, () -> waConfigService.read(configTO.getSchema()));\n+        assertThrows(SyncopeClientException.class, () -> waConfigService.get(configTO.getSchema()));\n     }\n \n     @Test","previous_filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAConfigITCase.java"},{"sha":"81e541966614fb6ee8265a9b05f36a9526c7dd98","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/WebAuthnAccountITCase.java","status":"renamed","additions":36,"deletions":49,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWebAuthnAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWebAuthnAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FWebAuthnAccountITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,87 +16,74 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n-package org.apache.syncope.fit.core;\n-\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n-import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Test;\n-\n-import javax.ws.rs.core.Response;\n-\n-import java.util.List;\n+package org.apache.syncope.fit.core.wa;\n \n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.util.UUID;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n+import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n public class WebAuthnAccountITCase extends AbstractITCase {\n \n     private static WebAuthnAccount createWebAuthnRegisteredAccount() {\n         String id = SecureRandomUtils.generateRandomUUID().toString();\n-        String record = \"[ {\" +\n-            \"    \\\"userIdentity\\\" : {\" +\n-            \"      \\\"name\\\" : \\\"%s\\\",\" +\n-            \"      \\\"displayName\\\" : \\\"%s\\\"\" +\n-            \"    },\" +\n-            \"    \\\"credential\\\" : {\" +\n-            \"      \\\"credentialId\\\" : \\\"fFGyV3K5x1\\\"\" +\n-            \"    },\" +\n-            \"    \\\"username\\\" : \\\"%s\\\"\" +\n-            \"  } ]\";\n+        String record = \"[ {\"\n+                + \"    \\\"userIdentity\\\" : {\"\n+                + \"      \\\"name\\\" : \\\"%s\\\",\"\n+                + \"      \\\"displayName\\\" : \\\"%s\\\"\"\n+                + \"    },\"\n+                + \"    \\\"credential\\\" : {\"\n+                + \"      \\\"credentialId\\\" : \\\"fFGyV3K5x1\\\"\"\n+                + \"    },\"\n+                + \"    \\\"username\\\" : \\\"%s\\\"\"\n+                + \"  } ]\";\n         WebAuthnDeviceCredential credential = new WebAuthnDeviceCredential.Builder().\n-            json(String.format(record, id, id, id)).\n-            owner(id).\n-            identifier(\"fFGyV3K5x1\").\n-            build();\n-        return new WebAuthnAccount.Builder()\n-            .owner(id)\n-            .records(List.of(credential))\n-            .build();\n+                json(String.format(record, id, id, id)).\n+                identifier(\"fFGyV3K5x1\").\n+                build();\n+        return new WebAuthnAccount.Builder().credential(credential).build();\n     }\n \n     @Test\n     public void listAndFind() {\n+        String owner = UUID.randomUUID().toString();\n         WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n-        webAuthnRegistrationService.create(acct);\n+        webAuthnRegistrationService.create(owner, acct);\n         assertFalse(webAuthnRegistrationService.list().isEmpty());\n-        assertNotNull(webAuthnRegistrationService.findAccountFor(acct.getOwner()));\n+        assertNotNull(webAuthnRegistrationService.readFor(owner));\n     }\n \n     @Test\n     public void deleteByOwner() {\n+        String owner = UUID.randomUUID().toString();\n         WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n-        webAuthnRegistrationService.create(acct);\n-        assertNotNull(webAuthnRegistrationService.delete(acct.getOwner()));\n-        assertThrows(SyncopeClientException.class, () -> webAuthnRegistrationService.findAccountFor(acct.getOwner()));\n+        webAuthnRegistrationService.create(owner, acct);\n+        assertNotNull(webAuthnRegistrationService.delete(owner));\n+        assertThrows(SyncopeClientException.class, () -> webAuthnRegistrationService.readFor(owner));\n     }\n \n     @Test\n     public void deleteByAcct() {\n+        String owner = UUID.randomUUID().toString();\n         WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n-        webAuthnRegistrationService.create(acct);\n-        assertNotNull(webAuthnRegistrationService.delete(acct.getOwner(), acct.getRecords().get(0).getIdentifier()));\n-        acct = webAuthnRegistrationService.findAccountFor(acct.getOwner());\n-        assertTrue(acct.getRecords().isEmpty());\n+        webAuthnRegistrationService.create(owner, acct);\n+        assertNotNull(webAuthnRegistrationService.delete(owner, acct.getCredentials().get(0).getIdentifier()));\n+        acct = webAuthnRegistrationService.readFor(owner);\n+        assertTrue(acct.getCredentials().isEmpty());\n     }\n \n     @Test\n     public void create() {\n         WebAuthnAccount acct = createWebAuthnRegisteredAccount();\n-        assertDoesNotThrow(() -> {\n-            Response response = webAuthnRegistrationService.create(acct);\n-            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            }\n-        });\n+        assertDoesNotThrow(() -> webAuthnRegistrationService.create(UUID.randomUUID().toString(), acct));\n     }\n }","previous_filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WebAuthnAccountITCase.java"},{"sha":"38a7dc9b6e328c5dc2ecfaf93b188e4d7eb2a27c","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -43,14 +43,14 @@\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n import org.apache.syncope.fit.sra.AbstractSRAITCase;\n import org.junit.jupiter.api.BeforeAll;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.syncope.common.rest.api.service.SAML2SP4UIIdPService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.common.rest.api.service.OIDCC4UIProviderService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n \n public class AbstractITCase {\n \n@@ -101,12 +101,12 @@ public static void restSetup() {\n \n     @BeforeAll\n     public static void waitForWARefresh() {\n-        WASAML2IdPMetadataService samlIdPMetadataService = adminClient.getService(WASAML2IdPMetadataService.class);\n+        SAML2IdPMetadataService samlIdPMetadataService = adminClient.getService(SAML2IdPMetadataService.class);\n \n         await().atMost(50, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n             boolean refreshed = false;\n             try {\n-                samlIdPMetadataService.getByOwner(\"Syncope\");\n+                samlIdPMetadataService.readFor(SAML2IdPMetadataService.DEFAULT_OWNER);\n                 refreshed = true;\n             } catch (Exception e) {\n                 // ignore"},{"sha":"e72b14473e79d850243c66854eb4de4889054c0b","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/CASSRAITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FCASSRAITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -45,7 +45,7 @@\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.client.CASSPTO;\n+import org.apache.syncope.common.lib.to.CASSPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.junit.jupiter.api.BeforeAll;"},{"sha":"db4fb8bcf6df23eb75233688349c81a5ec4faa30","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -57,7 +57,7 @@\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.rest.api.RESTHeaders;"},{"sha":"b39d35bb1f051c3f6953bacbf922ff3758dd7dd8","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -46,7 +46,7 @@\n import org.apache.http.impl.client.HttpClients;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.http.util.EntityUtils;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.rest.api.RESTHeaders;"},{"sha":"7430dcb2b211e117db18a88f77ec3c1a87949458","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/OIDC4UIITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FOIDC4UIITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.client.ui.commons.panels.OIDCC4UIConstants;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.rest.api.RESTHeaders;"},{"sha":"068afa095b4d404ed0bebafa634e6f013686815e","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/SAML2SP4UIITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -49,7 +49,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2SP4UIIdPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.ClientAppType;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.rest.api.RESTHeaders;"},{"sha":"8ee38849f9430b04e8ce79d2a75c72349d3a00dc","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -483,7 +483,7 @@ public PropertySource<?> locate(final Environment environment) {\n         });\n \n         syncopeClient.getService(WAConfigService.class).list().\n-                forEach(configTO -> properties.put(configTO.getSchema(), configTO.getValues()));\n+                forEach(attr -> properties.put(attr.getSchema(), attr.getValues()));\n         LOG.debug(\"Collected WA properties: {}\", properties);\n         return new MapPropertySource(getClass().getName(), properties);\n     }"},{"sha":"17c9542d68820e7f75bf021ebb8e82a48e3e2dfd","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -32,8 +32,7 @@\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.audit.SyncopeWAAuditTrailManager;\n-import org.apache.syncope.wa.starter.gauth.credential.SyncopeWAGoogleMfaAuthCredentialRepository;\n-import org.apache.syncope.wa.starter.gauth.token.SyncopeWAGoogleMfaAuthTokenRepository;\n+import org.apache.syncope.wa.starter.gauth.SyncopeWAGoogleMfaAuthCredentialRepository;\n import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n import org.apache.syncope.wa.starter.mapping.AccessMapper;\n import org.apache.syncope.wa.starter.mapping.AllowedAttrReleaseMapper;\n@@ -88,6 +87,7 @@\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.syncope.wa.starter.events.SyncopeWAEventRepository;\n+import org.apache.syncope.wa.starter.gauth.SyncopeWAGoogleMfaAuthTokenRepository;\n import org.apereo.cas.support.events.CasEventRepository;\n import org.apereo.cas.support.events.CasEventRepositoryFilter;\n import org.apereo.cas.webauthn.storage.WebAuthnCredentialRepository;\n@@ -252,7 +252,6 @@ public CasEventRepository casEventRepository(final WARestClient restClient) {\n         return new SyncopeWAEventRepository(syncopeWAEventRepositoryFilter(), restClient);\n     }\n \n-\n     @Autowired\n     @Bean\n     public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient restClient) {"},{"sha":"c7cfdc00fafc2b0c4fe84778011a740b1a8e902d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthCredentialRepository.java","status":"renamed","additions":64,"deletions":73,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthCredentialRepository.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,71 +16,66 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n-package org.apache.syncope.wa.starter.gauth.credential;\n-\n-import org.apereo.cas.authentication.OneTimeTokenAccount;\n-import org.apereo.cas.gauth.credential.BaseGoogleAuthenticatorTokenCredentialRepository;\n-import org.apereo.cas.gauth.credential.GoogleAuthenticatorAccount;\n-import org.apereo.cas.util.crypto.CipherExecutor;\n+package org.apache.syncope.wa.starter.gauth;\n \n import com.warrenstrange.googleauth.IGoogleAuthenticator;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n-import org.apache.syncope.wa.starter.gauth.token.SyncopeWAGoogleMfaAuthTokenRepository;\n+import org.apereo.cas.authentication.OneTimeTokenAccount;\n+import org.apereo.cas.gauth.credential.BaseGoogleAuthenticatorTokenCredentialRepository;\n+import org.apereo.cas.gauth.credential.GoogleAuthenticatorAccount;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n public class SyncopeWAGoogleMfaAuthCredentialRepository extends BaseGoogleAuthenticatorTokenCredentialRepository {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAGoogleMfaAuthTokenRepository.class);\n \n     private final WARestClient waRestClient;\n \n-    public SyncopeWAGoogleMfaAuthCredentialRepository(final WARestClient waRestClient,\n-                                                      final IGoogleAuthenticator googleAuthenticator) {\n+    public SyncopeWAGoogleMfaAuthCredentialRepository(\n+            final WARestClient waRestClient, final IGoogleAuthenticator googleAuthenticator) {\n+\n         super(CipherExecutor.noOpOfStringToString(), googleAuthenticator);\n         this.waRestClient = waRestClient;\n     }\n \n     private static GoogleMfaAuthAccount mapGoogleMfaAuthAccount(final OneTimeTokenAccount account) {\n         return new GoogleMfaAuthAccount.Builder()\n-            .owner(account.getUsername())\n-            .registrationDate(new Date())\n-            .scratchCodes(account.getScratchCodes())\n-            .validationCode(account.getValidationCode())\n-            .secretKey(account.getSecretKey())\n-            .id(account.getId())\n-            .build();\n+                .registrationDate(new Date())\n+                .scratchCodes(account.getScratchCodes())\n+                .validationCode(account.getValidationCode())\n+                .secretKey(account.getSecretKey())\n+                .id(account.getId())\n+                .build();\n     }\n \n     private static GoogleAuthenticatorAccount mapGoogleMfaAuthAccount(final GoogleMfaAuthAccount account) {\n         return GoogleAuthenticatorAccount.builder().\n-            username(account.getOwner()).\n-            secretKey(account.getSecretKey()).\n-            validationCode(account.getValidationCode()).\n-            scratchCodes(account.getScratchCodes()).\n-            name(account.getName()).\n-            id(account.getId()).\n-            build();\n+                secretKey(account.getSecretKey()).\n+                validationCode(account.getValidationCode()).\n+                scratchCodes(account.getScratchCodes()).\n+                name(account.getName()).\n+                id(account.getId()).\n+                build();\n     }\n \n     @Override\n     public OneTimeTokenAccount get(final long id) {\n         try {\n             GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-            GoogleMfaAuthAccount account = googleService.findAccountBy(id);\n+                    getService(GoogleMfaAuthAccountService.class);\n+            GoogleMfaAuthAccount account = googleService.read(id);\n             if (account != null) {\n                 return mapGoogleMfaAuthAccount(account);\n             }\n@@ -98,12 +93,11 @@ public OneTimeTokenAccount get(final long id) {\n     public OneTimeTokenAccount get(final String username, final long id) {\n         try {\n             GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-            googleService.findAccountsFor(username).\n-                stream().\n-                filter(account -> account.getId() == id).\n-                map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n-                collect(Collectors.toList());\n+                    getService(GoogleMfaAuthAccountService.class);\n+            googleService.readFor(username).getResult().stream().\n+                    filter(account -> account.getId() == id).\n+                    map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n+                    collect(Collectors.toList());\n         } catch (final SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 LOG.info(\"Could not locate account for owner {} and id {}\", username, id);\n@@ -118,11 +112,10 @@ public OneTimeTokenAccount get(final String username, final long id) {\n     public Collection<? extends OneTimeTokenAccount> get(final String username) {\n         try {\n             GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-                getService(GoogleMfaAuthAccountService.class);\n-            googleService.findAccountsFor(username).\n-                stream().\n-                map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n-                collect(Collectors.toList());\n+                    getService(GoogleMfaAuthAccountService.class);\n+            googleService.readFor(username).getResult().stream().\n+                    map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n+                    collect(Collectors.toList());\n         } catch (final SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 LOG.info(\"Could not locate account for owner {}\", username);\n@@ -136,66 +129,64 @@ public Collection<? extends OneTimeTokenAccount> get(final String username) {\n     @Override\n     public Collection<? extends OneTimeTokenAccount> load() {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-            getService(GoogleMfaAuthAccountService.class);\n-        return googleService.list().\n-            stream().\n-            map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n-            collect(Collectors.toList());\n+                getService(GoogleMfaAuthAccountService.class);\n+        return googleService.list().getResult().stream().\n+                map(SyncopeWAGoogleMfaAuthCredentialRepository::mapGoogleMfaAuthAccount).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n     public OneTimeTokenAccount save(final OneTimeTokenAccount tokenAccount) {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-            getService(GoogleMfaAuthAccountService.class);\n+                getService(GoogleMfaAuthAccountService.class);\n         GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n-            .owner(tokenAccount.getUsername())\n-            .registrationDate(new Date())\n-            .scratchCodes(tokenAccount.getScratchCodes())\n-            .validationCode(tokenAccount.getValidationCode())\n-            .secretKey(tokenAccount.getSecretKey())\n-            .name(tokenAccount.getName())\n-            .id(tokenAccount.getId())\n-            .build();\n-        Response response = googleService.save(account);\n+                .registrationDate(new Date())\n+                .scratchCodes(tokenAccount.getScratchCodes())\n+                .validationCode(tokenAccount.getValidationCode())\n+                .secretKey(tokenAccount.getSecretKey())\n+                .name(tokenAccount.getName())\n+                .id(tokenAccount.getId())\n+                .build();\n+        Response response = googleService.create(tokenAccount.getUsername(), account);\n         String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n         account.setKey(key);\n         return mapGoogleMfaAuthAccount(account);\n     }\n \n     @Override\n-    public OneTimeTokenAccount update(final OneTimeTokenAccount account) {\n+    public OneTimeTokenAccount update(final OneTimeTokenAccount tokenAccount) {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-            getService(GoogleMfaAuthAccountService.class);\n-        GoogleMfaAuthAccount acct = mapGoogleMfaAuthAccount(account);\n-        googleService.update(acct);\n-        return account;\n+                getService(GoogleMfaAuthAccountService.class);\n+        GoogleMfaAuthAccount acct = mapGoogleMfaAuthAccount(tokenAccount);\n+        googleService.update(tokenAccount.getUsername(), acct);\n+        return tokenAccount;\n     }\n \n     @Override\n     public void deleteAll() {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-            getService(GoogleMfaAuthAccountService.class);\n-        googleService.deleteAll();\n+                getService(GoogleMfaAuthAccountService.class);\n+        googleService.delete();\n     }\n \n     @Override\n     public void delete(final String username) {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-            getService(GoogleMfaAuthAccountService.class);\n-        googleService.deleteAccountsFor(username);\n+                getService(GoogleMfaAuthAccountService.class);\n+        googleService.deleteFor(username);\n     }\n \n     @Override\n     public long count() {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-            getService(GoogleMfaAuthAccountService.class);\n-        return googleService.countAll().getTotalCount();\n+                getService(GoogleMfaAuthAccountService.class);\n+        return googleService.list().getTotalCount();\n     }\n \n     @Override\n     public long count(final String username) {\n         GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n-            getService(GoogleMfaAuthAccountService.class);\n-        return googleService.countFor(username).getTotalCount();\n+                getService(GoogleMfaAuthAccountService.class);\n+        return googleService.readFor(username).getTotalCount();\n     }\n }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/credential/SyncopeWAGoogleMfaAuthCredentialRepository.java"},{"sha":"ac2563d9307953c90dd47cbf2794144f4f11c6ad","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/SyncopeWAGoogleMfaAuthTokenRepository.java","status":"renamed","additions":12,"deletions":26,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2FSyncopeWAGoogleMfaAuthTokenRepository.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,13 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.starter.gauth.token;\n+package org.apache.syncope.wa.starter.gauth;\n \n import java.time.LocalDateTime;\n import java.time.ZoneOffset;\n import java.util.Date;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.authentication.OneTimeToken;\n@@ -55,28 +54,27 @@ protected void cleanInternal() {\n                 toInstant(ZoneOffset.UTC));\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        tokenService.deleteTokensByDate(expirationDate);\n+        tokenService.delete(expirationDate);\n     }\n \n     @Override\n     public void store(final OneTimeToken token) {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n         GoogleMfaAuthToken tokenTO = new GoogleMfaAuthToken.Builder()\n-                .owner(token.getUserId())\n                 .token(token.getToken())\n                 .issueDate(Date.from(token.getIssuedDateTime().toInstant(ZoneOffset.UTC)))\n                 .build();\n-        tokenService.save(tokenTO);\n+        tokenService.store(token.getUserId(), tokenTO);\n     }\n \n     @Override\n     public OneTimeToken get(final String username, final Integer otp) {\n         try {\n             GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                     getService(GoogleMfaAuthTokenService.class);\n-            GoogleMfaAuthToken tokenTO = tokenService.findTokenFor(username, otp);\n-            GoogleAuthenticatorToken token = new GoogleAuthenticatorToken(tokenTO.getToken(), tokenTO.getOwner());\n+            GoogleMfaAuthToken tokenTO = tokenService.readFor(username, otp);\n+            GoogleAuthenticatorToken token = new GoogleAuthenticatorToken(tokenTO.getOtp(), username);\n             LocalDateTime dateTime = tokenTO.getIssueDate().toInstant().atZone(ZoneOffset.UTC).toLocalDateTime();\n             token.setIssuedDateTime(dateTime);\n             return token;\n@@ -90,53 +88,41 @@ public OneTimeToken get(final String username, final Integer otp) {\n     public void remove(final String username, final Integer otp) {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        Response response = tokenService.deleteToken(username, otp);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n-            throw new RuntimeException(\"Unable to remove token \" + otp + \" for user \" + username);\n-        }\n+        tokenService.delete(username, otp);\n     }\n \n     @Override\n     public void remove(final String username) {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        Response response = tokenService.deleteTokensFor(username);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n-            throw new RuntimeException(\"Unable to remove tokens for user \" + username);\n-        }\n+        tokenService.deleteFor(username);\n     }\n \n     @Override\n     public void remove(final Integer otp) {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        Response response = tokenService.deleteToken(otp);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n-            throw new RuntimeException(\"Unable to remove token \" + otp);\n-        }\n+        tokenService.delete(otp);\n     }\n \n     @Override\n     public void removeAll() {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        Response response = tokenService.deleteTokens();\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.NO_CONTENT.getStatusCode()) {\n-            throw new RuntimeException(\"Unable to remove tokens\");\n-        }\n+        tokenService.delete(null);\n     }\n \n     @Override\n     public long count(final String username) {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        return tokenService.findTokensFor(username).getTotalCount();\n+        return tokenService.readFor(username).getTotalCount();\n     }\n \n     @Override\n     public long count() {\n         GoogleMfaAuthTokenService tokenService = waRestClient.getSyncopeClient().\n                 getService(GoogleMfaAuthTokenService.class);\n-        return tokenService.countTokens().getTotalCount();\n+        return tokenService.list().getTotalCount();\n     }\n }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/token/SyncopeWAGoogleMfaAuthTokenRepository.java"},{"sha":"7393a309f1d2b7f3bd205425b57df981e6003e47","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPTOMapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.to.client.CASSPTO;\n+import org.apache.syncope.common.lib.to.CASSPTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegexRegisteredService;\n import org.apereo.cas.services.RegisteredService;"},{"sha":"5bd1b073584bef69a9226975be5a96e8a06878f0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapFor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -22,7 +22,7 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)"},{"sha":"e78b1697b9a236c75c14db0a197f624f86b9b807","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPTOMapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.oidc.claims.OidcAddressScopeAttributeReleasePolicy;"},{"sha":"5ab5990b9dac4e9f4d69d8c8b4d36427c4f8dff0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPTOMapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;"},{"sha":"23f254d513f6b9aecc30e46f2a0a59bb652e18b8","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/oidc/SyncopeWAOIDCJWKSGeneratorService.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -19,20 +19,23 @@\n package org.apache.syncope.wa.starter.oidc;\n \n import java.nio.charset.StandardCharsets;\n-import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n-import org.apache.syncope.common.rest.api.service.wa.WAOIDCJWKSService;\n+import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.core.io.ByteArrayResource;\n import org.springframework.core.io.Resource;\n \n public class SyncopeWAOIDCJWKSGeneratorService implements OidcJsonWebKeystoreGeneratorService {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAOIDCJWKSGeneratorService.class);\n+\n     private final WARestClient waRestClient;\n \n     private final int size;\n@@ -53,19 +56,25 @@ public Resource generate() {\n             throw new RuntimeException(\"Syncope core is not yet ready\");\n         }\n \n-        WAOIDCJWKSService service = waRestClient.getSyncopeClient().getService(WAOIDCJWKSService.class);\n+        OIDCJWKSService service = waRestClient.getSyncopeClient().getService(OIDCJWKSService.class);\n+        OIDCJWKSTO jwksTO = null;\n         try {\n-            Response response = service.set(size, algorithm);\n-            OIDCJWKSTO jwksTO = response.readEntity(new GenericType<OIDCJWKSTO>() {\n-            });\n-            return new ByteArrayResource(jwksTO.getJson().getBytes(StandardCharsets.UTF_8), \"OIDC JWKS\");\n+            jwksTO = service.get();\n         } catch (SyncopeClientException e) {\n-            if (e.getType() == ClientExceptionType.EntityExists) {\n-                OIDCJWKSTO jwksTO = service.get();\n-                return new ByteArrayResource(jwksTO.getJson().getBytes(StandardCharsets.UTF_8), \"OIDC JWKS\");\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                try {\n+                    Response response = service.generate(size, algorithm);\n+                    jwksTO = response.readEntity(OIDCJWKSTO.class);\n+                } catch (Exception ge) {\n+                    LOG.error(\"While generating new OIDC JWKS\", ge);\n+                }\n+            } else {\n+                LOG.error(\"While reading OIDC JWKS\", e);\n             }\n-\n-            throw new RuntimeException(\"Unable to determine OIDC JWKS resource\", e);\n         }\n+        if (jwksTO == null) {\n+            throw new RuntimeException(\"Unable to determine OIDC JWKS resource\");\n+        }\n+        return new ByteArrayResource(jwksTO.getJson().getBytes(StandardCharsets.UTF_8), \"OIDC JWKS\");\n     }\n }"},{"sha":"589720808f98399266364cdcab81d66e3c216a81","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGenerator.java","status":"modified","additions":20,"deletions":22,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,30 +16,28 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.InputStream;\n-import java.security.KeyStore;\n-import java.security.PrivateKey;\n-import java.security.cert.X509Certificate;\n-import java.util.Base64;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n-\n public class SyncopeWASAML2ClientKeystoreGenerator extends BaseSAML2KeystoreGenerator {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientKeystoreGenerator.class);\n \n     private final WARestClient restClient;\n@@ -59,21 +57,21 @@ public boolean shouldGenerate() {\n \n     @Override\n     protected void store(final KeyStore ks, final X509Certificate certificate,\n-                         final PrivateKey privateKey) throws Exception {\n+            final PrivateKey privateKey) throws Exception {\n         try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n             char[] password = saml2Configuration.getKeystorePassword().toCharArray();\n             ks.store(out, password);\n             out.flush();\n             String encodedKeystore = Base64.getEncoder().encodeToString(out.toByteArray());\n             LOG.debug(\"Encoded keystore {}\", encodedKeystore);\n \n-            WASAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n-                getService(WASAML2SPKeystoreService.class);\n+            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n+                    getService(SAML2SPKeystoreService.class);\n \n             SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder().\n-                keystore(encodedKeystore).\n-                owner(saml2Client.getName()).\n-                build();\n+                    keystore(encodedKeystore).\n+                    owner(saml2Client.getName()).\n+                    build();\n \n             LOG.debug(\"Storing keystore {}\", keystoreTO);\n             Response response = keystoreService.set(keystoreTO);\n@@ -83,7 +81,7 @@ protected void store(final KeyStore ks, final X509Certificate certificate,\n                 LOG.info(\"Stored keystore for SAML2 SP {} already exists\", saml2Client.getName());\n             } else {\n                 LOG.error(\"Unexpected response when storing SAML2 SP keystore: {}\\n{}\",\n-                    response.getStatus(), response.getHeaders());\n+                        response.getStatus(), response.getHeaders());\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n                 sce.getElements().add(\"Unexpected response when storing SAML2 SP keystore\");\n                 throw sce;\n@@ -94,9 +92,9 @@ protected void store(final KeyStore ks, final X509Certificate certificate,\n     @Override\n     public InputStream retrieve() throws Exception {\n         try {\n-            WASAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n-                getService(WASAML2SPKeystoreService.class);\n-            SAML2SPKeystoreTO keystoreTO = keystoreService.getByOwner(saml2Client.getName());\n+            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n+                    getService(SAML2SPKeystoreService.class);\n+            SAML2SPKeystoreTO keystoreTO = keystoreService.readFor(saml2Client.getName());\n             LOG.debug(\"Retrieved keystore {}\", keystoreTO);\n             byte[] decode = Base64.getDecoder().decode(keystoreTO.getKeystore());\n             return new ByteArrayInputStream(decode);"},{"sha":"fadda29491c8eee3369a14dd6013ea742cbf2f8d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGenerator.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,12 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.opensaml.saml.metadata.resolver.impl.AbstractBatchMetadataResolver;\n import org.pac4j.saml.client.SAML2Client;\n@@ -30,10 +31,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.core.io.Resource;\n \n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-\n public class SyncopeWASAML2ClientMetadataGenerator extends BaseSAML2MetadataGenerator {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientMetadataGenerator.class);\n \n     private final WARestClient restClient;\n@@ -52,14 +51,13 @@ protected AbstractBatchMetadataResolver createMetadataResolver(final Resource me\n \n     @Override\n     public boolean storeMetadata(final String metadata, final Resource resource, final boolean force) throws Exception {\n-        WASAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n-            getService(WASAML2SPMetadataService.class);\n         SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder().\n-            metadata(metadata).\n-            owner(saml2Client.getName()).\n-            build();\n+                metadata(metadata).\n+                owner(saml2Client.getName()).\n+                build();\n         LOG.debug(\"Storing metadata {}\", metadataTO);\n-        Response response = metadataService.set(metadataTO);\n+        Response response = restClient.getSyncopeClient().\n+                getService(SAML2SPMetadataService.class).set(metadataTO);\n         if (response.getStatus() == Response.Status.CREATED.getStatusCode()) {\n             LOG.info(\"Stored metadata for SAML2 SP {}\", saml2Client.getName());\n             return true;\n@@ -69,7 +67,7 @@ public boolean storeMetadata(final String metadata, final Resource resource, fin\n             return true;\n         }\n         LOG.error(\"Unexpected response when storing SAML2 SP metadata: {}\\n{}\",\n-            response.getStatus(), response.getHeaders());\n+                response.getStatus(), response.getHeaders());\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n         sce.getElements().add(\"Unexpected response when storing SAML2 SP metadata\");\n         throw sce;"},{"sha":"7d5983a3cf30ddb59e428e284d68dff8c21d2630","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolver.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,21 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import java.nio.charset.StandardCharsets;\n import net.shibboleth.utilities.java.support.resolver.ResolverException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.opensaml.saml.metadata.resolver.impl.AbstractReloadingMetadataResolver;\n import org.pac4j.saml.client.SAML2Client;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.nio.charset.StandardCharsets;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-\n public class SyncopeWASAML2MetadataResolver extends AbstractReloadingMetadataResolver {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2MetadataResolver.class);\n \n     private final WARestClient restClient;\n@@ -50,9 +49,8 @@ protected String getMetadataIdentifier() {\n     @Override\n     protected byte[] fetchMetadata() throws ResolverException {\n         try {\n-            WASAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n-                getService(WASAML2SPMetadataService.class);\n-            SAML2SPMetadataTO metadataTO = metadataService.getByOwner(saml2Client.getName());\n+            SAML2SPMetadataTO metadataTO = restClient.getSyncopeClient().\n+                    getService(SAML2SPMetadataService.class).readFor(saml2Client.getName());\n             return metadataTO.getMetadata().getBytes(StandardCharsets.UTF_8);\n         } catch (final Exception e) {\n             final String message = \"Unable to fetch SP metadata for \" + saml2Client.getName();"},{"sha":"358c69d2819e920e04298cc7fe109663ced5140c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -31,7 +31,7 @@\n import org.springframework.http.HttpStatus;\n import javax.ws.rs.core.Response;\n import java.util.Optional;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n \n public class RestfulSamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerator {\n \n@@ -53,7 +53,7 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n             final Optional<SamlRegisteredService> registeredService) {\n \n         LOG.info(\"Generating new SAML2 IdP metadata document\");\n-        doc.setAppliesTo(WASAML2IdPMetadataService.DEFAULT_OWNER);\n+        doc.setAppliesTo(SAML2IdPMetadataService.DEFAULT_OWNER);\n         SAML2IdPMetadataTO metadataTO = new SAML2IdPMetadataTO.Builder().\n                 metadata(doc.getMetadata()).\n                 encryptionKey(doc.getEncryptionKey()).\n@@ -66,7 +66,7 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n         SyncopeClient client = getSyncopeClient();\n         Response response = null;\n         try {\n-            response = client.getService(WASAML2IdPMetadataService.class).set(metadataTO);\n+            response = client.getService(SAML2IdPMetadataService.class).set(metadataTO);\n         } catch (Exception e) {\n             LOG.warn(\"While generating SAML2 IdP metadata document\", e);\n         }"},{"sha":"2ca9575251b461bd59aa88c44ee1c1200ec11785","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -31,7 +31,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import java.util.Optional;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n \n public class RestfulSamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocator {\n \n@@ -85,13 +85,13 @@ private SAML2IdPMetadataTO fetchFromCore(final Optional<SamlRegisteredService> r\n         SAML2IdPMetadataTO result = null;\n \n         String appliesToFor = registeredService.map(SamlRegisteredService::getName).\n-                orElse(WASAML2IdPMetadataService.DEFAULT_OWNER);\n+                orElse(SAML2IdPMetadataService.DEFAULT_OWNER);\n+        SAML2IdPMetadataService service = getSyncopeClient().getService(SAML2IdPMetadataService.class);\n         try {\n-            result = getSyncopeClient().getService(WASAML2IdPMetadataService.class).getByOwner(appliesToFor);\n+            result = service.readFor(appliesToFor);\n         } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound && registeredService.isPresent()) {\n-                result = getSyncopeClient().getService(WASAML2IdPMetadataService.class).\n-                        getByOwner(WASAML2IdPMetadataService.DEFAULT_OWNER);\n+                result = service.readFor(SAML2IdPMetadataService.DEFAULT_OWNER);\n             } else {\n                 throw e;\n             }"},{"sha":"b62724a7ef96198ab4f1d0cb3628359bbf29ddea","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/services/SyncopeWAServiceRegistry.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -112,7 +112,8 @@ public <T extends RegisteredService> T findServiceById(final long id, final Clas\n                 return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(id, ClientAppType.SAML2SP));\n             } else {\n-                return null;\n+                return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n+                        getService(WAClientAppService.class).read(id, ClientAppType.CASSP));\n             }\n         }\n     }\n@@ -133,7 +134,8 @@ public <T extends RegisteredService> T findServiceByExactServiceName(final Strin\n                 return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n                         getService(WAClientAppService.class).read(name, ClientAppType.SAML2SP));\n             } else {\n-                return null;\n+                return (T) registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n+                        getService(WAClientAppService.class).read(name, ClientAppType.CASSP));\n             }\n         }\n     }\n@@ -150,6 +152,4 @@ public RegisteredService findServiceByExactServiceName(final String name) {\n                     getService(WAClientAppService.class).read(name, null));\n         }\n     }\n-\n-\n }"},{"sha":"0e4c8d2ada74df27f44d0a5725491976029d22a7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/u2f/SyncopeWAU2FDeviceRepository.java","status":"modified","additions":55,"deletions":66,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fu2f%2FSyncopeWAU2FDeviceRepository.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,61 +16,57 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.u2f;\n \n-import org.apereo.cas.adaptors.u2f.storage.BaseU2FDeviceRepository;\n-import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRegistration;\n-import org.apereo.cas.util.crypto.CipherExecutor;\n-\n import com.github.benmanes.caffeine.cache.LoadingCache;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n-import org.apache.syncope.common.rest.api.service.wa.U2FDeviceQuery;\n-import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n-import org.apache.syncope.wa.bootstrap.WARestClient;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.ws.rs.core.GenericType;\n-import javax.ws.rs.core.Response;\n-\n import java.time.Instant;\n import java.time.LocalDate;\n import java.time.ZoneId;\n import java.util.Collection;\n import java.util.Date;\n-import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.wa.U2FDevice;\n+import org.apache.syncope.common.rest.api.beans.U2FDeviceQuery;\n+import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.adaptors.u2f.storage.BaseU2FDeviceRepository;\n+import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRegistration;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n \n public class SyncopeWAU2FDeviceRepository extends BaseU2FDeviceRepository {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAU2FDeviceRepository.class);\n \n     private final WARestClient waRestClient;\n \n     private final LocalDate expirationDate;\n \n-    public SyncopeWAU2FDeviceRepository(final LoadingCache<String, String> requestStorage,\n-                                        final WARestClient waRestClient,\n-                                        final LocalDate expirationDate) {\n+    public SyncopeWAU2FDeviceRepository(\n+            final LoadingCache<String, String> requestStorage,\n+            final WARestClient waRestClient,\n+            final LocalDate expirationDate) {\n+\n         super(requestStorage, CipherExecutor.noOpOfSerializableToString());\n         this.waRestClient = waRestClient;\n         this.expirationDate = expirationDate;\n     }\n \n-    private static U2FDeviceRegistration parseRegistrationRecord(final U2FRegisteredDevice record) {\n+    private static U2FDeviceRegistration parseRegistrationRecord(final String owner, final U2FDevice device) {\n         try {\n             return U2FDeviceRegistration.builder().\n-                id(record.getId()).\n-                username(record.getOwner()).\n-                record(record.getRecord()).\n-                createdDate(record.getIssueDate().\n-                    toInstant().\n-                    atZone(ZoneId.systemDefault()).\n-                    toLocalDate()).\n-                build();\n+                    id(device.getId()).\n+                    username(owner).\n+                    record(device.getRecord()).\n+                    createdDate(device.getIssueDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate()).\n+                    build();\n         } catch (final Exception e) {\n             LOG.error(e.getMessage(), e);\n         }\n@@ -80,58 +76,51 @@ private static U2FDeviceRegistration parseRegistrationRecord(final U2FRegistered\n     @Override\n     public Collection<? extends U2FDeviceRegistration> getRegisteredDevices(final String owner) {\n         U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-            .owner(owner)\n-            .expirationDate(Date.from(Instant.from(expirationDate)))\n-            .build();\n-        final List<U2FRegisteredDevice> records = getU2FService().search(query).getResult();\n-        return records.\n-            stream().\n-            map(SyncopeWAU2FDeviceRepository::parseRegistrationRecord).\n-            filter(Objects::nonNull).\n-            collect(Collectors.toList());\n+                .owner(owner)\n+                .expirationDate(Date.from(Instant.from(expirationDate)))\n+                .build();\n+        return getU2FService().search(query).getResult().\n+                stream().\n+                map(device -> parseRegistrationRecord(owner, device)).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n     public Collection<? extends U2FDeviceRegistration> getRegisteredDevices() {\n         U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-            .expirationDate(Date.from(Instant.from(expirationDate)))\n-            .build();\n-        final List<U2FRegisteredDevice> records = getU2FService().search(query).getResult();\n-        return records.\n-            stream().\n-            map(SyncopeWAU2FDeviceRepository::parseRegistrationRecord).\n-            filter(Objects::nonNull).\n-            collect(Collectors.toList());\n+                .expirationDate(Date.from(Instant.from(expirationDate)))\n+                .build();\n+        return getU2FService().search(query).getResult().\n+                stream().\n+                map(device -> parseRegistrationRecord(\"\", device)).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n     }\n \n     @Override\n     public U2FDeviceRegistration registerDevice(final U2FDeviceRegistration registration) {\n-        U2FRegisteredDevice record = new U2FRegisteredDevice.Builder().\n-            issueDate(Date.from(registration.getCreatedDate().atStartOfDay()\n-                .atZone(ZoneId.systemDefault())\n-                .toInstant())).\n-            owner(registration.getUsername()).\n-            record(registration.getRecord()).\n-            id(registration.getId()).\n-            build();\n-        Response response = getU2FService().create(record);\n-        return parseRegistrationRecord(response.readEntity(new GenericType<U2FRegisteredDevice>() {\n+        U2FDevice record = new U2FDevice.Builder().\n+                issueDate(Date.from(registration.getCreatedDate().atStartOfDay()\n+                        .atZone(ZoneId.systemDefault()).toInstant())).\n+                record(registration.getRecord()).\n+                id(registration.getId()).\n+                build();\n+        Response response = getU2FService().create(registration.getUsername(), record);\n+        return parseRegistrationRecord(registration.getUsername(), response.readEntity(new GenericType<U2FDevice>() {\n         }));\n     }\n \n     @Override\n     public void deleteRegisteredDevice(final U2FDeviceRegistration registration) {\n-        U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-            .id(registration.getId())\n-            .build();\n-        getU2FService().delete(query);\n+        getU2FService().delete(new U2FDeviceQuery.Builder().id(registration.getId()).build());\n     }\n \n     @Override\n     public boolean isDeviceRegisteredFor(final String owner) {\n         try {\n             Collection<? extends U2FDeviceRegistration> devices = getRegisteredDevices(owner);\n-            return devices != null && !devices.isEmpty();\n+            return !CollectionUtils.isEmpty(devices);\n         } catch (final SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 LOG.info(\"Could not locate account for owner {}\", owner);\n@@ -145,11 +134,11 @@ public boolean isDeviceRegisteredFor(final String owner) {\n     @Override\n     public void clean() {\n         Date date = Date.from(expirationDate.atStartOfDay()\n-            .atZone(ZoneId.systemDefault())\n-            .toInstant());\n+                .atZone(ZoneId.systemDefault())\n+                .toInstant());\n         U2FDeviceQuery query = new U2FDeviceQuery.Builder()\n-            .expirationDate(date)\n-            .build();\n+                .expirationDate(date)\n+                .build();\n         getU2FService().delete(query);\n     }\n "},{"sha":"e7aa625cb0a630d48d368e649dcc8947df277c52","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/webauthn/SyncopeWAWebAuthnCredentialRepository.java","status":"modified","additions":39,"deletions":49,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fwebauthn%2FSyncopeWAWebAuthnCredentialRepository.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,46 +16,43 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.webauthn;\n \n-import org.apereo.cas.configuration.CasConfigurationProperties;\n-import org.apereo.cas.util.crypto.CipherExecutor;\n-import org.apereo.cas.webauthn.WebAuthnUtils;\n-import org.apereo.cas.webauthn.storage.BaseWebAuthnCredentialRepository;\n-\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.yubico.data.CredentialRegistration;\n-\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.WebAuthnDeviceCredential;\n-import org.apache.syncope.common.lib.types.WebAuthnAccount;\n+import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n+import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+import org.apereo.cas.webauthn.WebAuthnUtils;\n+import org.apereo.cas.webauthn.storage.BaseWebAuthnCredentialRepository;\n import org.jooq.lambda.Unchecked;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.util.Collection;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n public class SyncopeWAWebAuthnCredentialRepository extends BaseWebAuthnCredentialRepository {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAWebAuthnCredentialRepository.class);\n \n     private final WARestClient waRestClient;\n \n     public SyncopeWAWebAuthnCredentialRepository(final CasConfigurationProperties properties,\n-                                                 final WARestClient waRestClient) {\n+            final WARestClient waRestClient) {\n         super(properties, CipherExecutor.noOpOfStringToString());\n         this.waRestClient = waRestClient;\n     }\n \n     @Override\n     public boolean removeRegistrationByUsername(final String username,\n-                                                final CredentialRegistration credentialRegistration) {\n+            final CredentialRegistration credentialRegistration) {\n         String id = credentialRegistration.getCredential().getCredentialId().getHex();\n         getService().delete(username, id);\n         return true;\n@@ -70,41 +67,37 @@ public boolean removeAllRegistrations(final String username) {\n     @Override\n     protected Stream<CredentialRegistration> load() {\n         return getService().list().\n-            stream().\n-            map(WebAuthnAccount::getRecords).\n-            flatMap(Collection::stream).\n-            map(Unchecked.function(record -> {\n-                String json = getCipherExecutor().decode(record.getJson());\n-                return WebAuthnUtils.getObjectMapper().readValue(json, new TypeReference<>() {\n-                });\n-            }));\n+                stream().\n+                map(WebAuthnAccount::getCredentials).\n+                flatMap(Collection::stream).\n+                map(Unchecked.function(record -> {\n+                    String json = getCipherExecutor().decode(record.getJson());\n+                    return WebAuthnUtils.getObjectMapper().readValue(json, new TypeReference<>() {\n+                    });\n+                }));\n     }\n \n     @Override\n     protected void update(final String username, final Collection<CredentialRegistration> records) {\n         try {\n-            List<WebAuthnDeviceCredential> devices = records.stream().\n-                map(Unchecked.function(record -> {\n-                    String json = getCipherExecutor().encode(WebAuthnUtils.getObjectMapper().\n-                        writeValueAsString(record));\n-                    return new WebAuthnDeviceCredential.Builder().\n-                        json(json).\n-                        owner(username).\n-                        identifier(record.getCredential().getCredentialId().getHex()).\n-                        build();\n-                })).\n-                collect(Collectors.toList());\n+            List<WebAuthnDeviceCredential> credentials = records.stream().\n+                    map(Unchecked.function(record -> {\n+                        String json = getCipherExecutor().encode(WebAuthnUtils.getObjectMapper().\n+                                writeValueAsString(record));\n+                        return new WebAuthnDeviceCredential.Builder().\n+                                json(json).\n+                                identifier(record.getCredential().getCredentialId().getHex()).\n+                                build();\n+                    })).\n+                    collect(Collectors.toList());\n \n-            WebAuthnAccount account = getService().findAccountFor(username);\n+            WebAuthnAccount account = getService().readFor(username);\n             if (account != null) {\n-                account.setRecords(devices);\n-                getService().update(account);\n+                account.getCredentials().addAll(credentials);\n+                getService().update(username, account);\n             } else {\n-                account = new WebAuthnAccount.Builder()\n-                    .owner(username)\n-                    .records(devices)\n-                    .build();\n-                getService().create(account);\n+                account = new WebAuthnAccount.Builder().credentials(credentials).build();\n+                getService().create(username, account);\n             }\n         } catch (final Exception e) {\n             LOG.error(e.getMessage(), e);\n@@ -114,17 +107,14 @@ protected void update(final String username, final Collection<CredentialRegistra\n     @Override\n     public Collection<CredentialRegistration> getRegistrationsByUsername(final String username) {\n         try {\n-            WebAuthnAccount account = getService().findAccountFor(username);\n-            if (account != null) {\n-\n-                return account.getRecords().stream().\n+            return getService().readFor(username).getCredentials().stream().\n                     map(Unchecked.function(record -> {\n                         String json = getCipherExecutor().decode(record.getJson());\n                         return WebAuthnUtils.getObjectMapper()\n-                            .readValue(json, new TypeReference<CredentialRegistration>() { });\n+                                .readValue(json, new TypeReference<CredentialRegistration>() {\n+                                });\n                     })).\n                     collect(Collectors.toList());\n-            }\n         } catch (final SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound) {\n                 LOG.info(\"Could not locate account for {}\", username);"},{"sha":"3e691b4c7a985c4b6749ec162a94d5f295d0a0c1","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":47,"deletions":53,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -19,31 +19,29 @@\n package org.apache.syncope.wa.starter;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import javax.ws.rs.NotFoundException;\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n \n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.NotFoundException;\n-import javax.ws.rs.core.Response;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-\n public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n     public static final List<WAClientApp> APPS = new ArrayList<>();\n@@ -62,11 +60,11 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n                 sf.setAddress(ADDRESS);\n                 sf.setResourceClasses(WAClientAppService.class, GoogleMfaAuthTokenService.class);\n                 sf.setResourceProvider(\n-                    WAClientAppService.class,\n-                    new SingletonResourceProvider(new StubWAClientAppService(), true));\n+                        WAClientAppService.class,\n+                        new SingletonResourceProvider(new StubWAClientAppService(), true));\n                 sf.setResourceProvider(\n-                    GoogleMfaAuthTokenService.class,\n-                    new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n+                        GoogleMfaAuthTokenService.class,\n+                        new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n                 sf.setProviders(List.of(new JacksonJsonProvider()));\n                 sf.create();\n \n@@ -81,75 +79,71 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n \n     public static class StubGoogleMfaAuthTokenService implements GoogleMfaAuthTokenService {\n \n-        private final List<GoogleMfaAuthToken> tokens = new ArrayList<>();\n+        private final Map<String, GoogleMfaAuthToken> tokens = new HashMap<>();\n \n         @Override\n-        public Response deleteTokensByDate(@NotNull final Date expirationDate) {\n-            tokens.removeIf(token -> token.getIssueDate().compareTo(expirationDate) >= 0);\n-            return Response.noContent().build();\n-        }\n-\n-        @Override\n-        public Response deleteToken(@NotNull final String owner, @NotNull final Integer token) {\n-            tokens.removeIf(to -> to.getToken().equals(token) && to.getOwner().equalsIgnoreCase(owner));\n-            return Response.noContent().build();\n+        public void delete(final Date expirationDate) {\n+            if (expirationDate == null) {\n+                tokens.clear();\n+            } else {\n+                tokens.entrySet().removeIf(token -> token.getValue().getIssueDate().compareTo(expirationDate) >= 0);\n+            }\n         }\n \n         @Override\n-        public Response deleteTokensFor(@NotNull final String owner) {\n-            tokens.removeIf(to -> to.getOwner().equalsIgnoreCase(owner));\n-            return Response.noContent().build();\n+        public void delete(final String owner, final int otp) {\n+            tokens.entrySet().\n+                    removeIf(e -> e.getValue().getOtp() == otp && e.getKey().equalsIgnoreCase(owner));\n         }\n \n         @Override\n-        public Response deleteToken(@NotNull final Integer token) {\n-            tokens.removeIf(to -> to.getToken().equals(token));\n-            return Response.noContent().build();\n+        public void deleteFor(final String owner) {\n+            tokens.entrySet().removeIf(e -> e.getKey().equalsIgnoreCase(owner));\n         }\n \n         @Override\n-        public Response deleteTokens() {\n-            tokens.clear();\n-            return Response.noContent().build();\n+        public void delete(final int otp) {\n+            tokens.entrySet().removeIf(to -> to.getValue().getOtp() == otp);\n         }\n \n         @Override\n-        public Response save(@NotNull final GoogleMfaAuthToken tokenTO) {\n+        public void store(final String owner, final GoogleMfaAuthToken tokenTO) {\n             tokenTO.setKey(UUID.randomUUID().toString());\n-            tokens.add(tokenTO);\n-            return Response.ok().build();\n+            tokens.put(owner, tokenTO);\n         }\n \n         @Override\n-        public GoogleMfaAuthToken findTokenFor(@NotNull final String owner, @NotNull final Integer token) {\n-            return tokens.stream()\n-                .filter(to -> to.getToken().equals(token) && to.getOwner().equalsIgnoreCase(owner))\n-                .findFirst().get();\n+        public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n+            return tokens.entrySet().stream()\n+                    .filter(to -> to.getValue().getOtp() == otp && to.getKey().equalsIgnoreCase(owner))\n+                    .findFirst().get().getValue();\n         }\n \n         @Override\n-        public PagedResult<GoogleMfaAuthToken> findTokensFor(@NotNull final String user) {\n+        public PagedResult<GoogleMfaAuthToken> readFor(final String user) {\n             PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n-            result.getResult().addAll(tokens.stream().\n-                filter(to -> to.getOwner().equalsIgnoreCase(user)).\n-                collect(Collectors.toList()));\n+            result.getResult().addAll(tokens.entrySet().stream().\n+                    filter(to -> to.getKey().equalsIgnoreCase(user)).\n+                    map(Map.Entry::getValue).\n+                    collect(Collectors.toList()));\n             result.setSize(result.getResult().size());\n             result.setTotalCount(result.getSize());\n             return result;\n         }\n \n         @Override\n-        public GoogleMfaAuthToken findTokenFor(@NotNull final String key) {\n-            return tokens.stream()\n-                .filter(to -> to.getKey().equalsIgnoreCase(key))\n-                .findFirst().get();\n+        public GoogleMfaAuthToken read(final String key) {\n+            return tokens.entrySet().stream()\n+                    .filter(to -> to.getKey().equalsIgnoreCase(key))\n+                    .findFirst().get().getValue();\n         }\n \n         @Override\n-        public PagedResult<GoogleMfaAuthToken> countTokens() {\n+        public PagedResult<GoogleMfaAuthToken> list() {\n             PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n             result.setSize(tokens.size());\n             result.setTotalCount(tokens.size());\n+            result.getResult().addAll(tokens.values());\n             return result;\n         }\n     }\n@@ -164,13 +158,13 @@ public List<WAClientApp> list() {\n         @Override\n         public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n-                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n         }\n \n         @Override\n         public WAClientApp read(final String name, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n-                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n         }\n     }\n }"},{"sha":"dfb0e47421eb6784aaf131cdb4de7b8de1a7bc7d","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -32,8 +32,8 @@\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.wa.WAClientApp;"},{"sha":"73a7a0ed62171429f6b52ade7367944e617760d5","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizerTest.java","status":"modified","additions":28,"deletions":29,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,59 +16,58 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.pac4j.saml.client.SAML2Client;\n import org.springframework.core.io.ClassPathResource;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-\n public class SyncopeWASAML2ClientCustomizerTest extends BaseSyncopeWASAML2ClientTest {\n \n     @Test\n     public void customize() throws Exception {\n \n         SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder()\n-            .keystore(getKeystoreAsString())\n-            .owner(\"CAS\")\n-            .build();\n-        WASAML2SPKeystoreService saml2SPKeystoreService = mock(WASAML2SPKeystoreService.class);\n-        when(saml2SPKeystoreService.getByOwner(anyString())).thenReturn(keystoreTO);\n-        when(saml2SPKeystoreService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).build());\n+                .keystore(getKeystoreAsString())\n+                .owner(\"CAS\")\n+                .build();\n+        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n+        when(saml2SPKeystoreService.readFor(anyString())).thenReturn(keystoreTO);\n+        when(saml2SPKeystoreService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).\n+                build());\n \n         SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-            .owner(\"Syncope\")\n-            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n-            .build();\n+                .owner(\"Syncope\")\n+                .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n+                        StandardCharsets.UTF_8))\n+                .build();\n \n-        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n-        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).build());\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n+        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).\n+                build());\n \n         WARestClient restClient = mock(WARestClient.class);\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(WASAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n-        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n         SyncopeWASAML2ClientCustomizer customizer = new SyncopeWASAML2ClientCustomizer(restClient);"},{"sha":"0bee72f86b0f17f7b88734412af405c930ce127b","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGeneratorTest.java","status":"modified","additions":31,"deletions":32,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,62 +16,59 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.function.Executable;\n-import org.pac4j.saml.exceptions.SAMLException;\n import org.pac4j.saml.client.SAML2Client;\n+import org.pac4j.saml.exceptions.SAMLException;\n import org.pac4j.saml.metadata.keystore.SAML2KeystoreGenerator;\n import org.springframework.core.io.ClassPathResource;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-\n public class SyncopeWASAML2ClientKeystoreGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n+\n     private static WARestClient getWaRestClient(final Response response) throws Exception {\n         WARestClient restClient = mock(WARestClient.class);\n \n         SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder()\n-            .keystore(getKeystoreAsString())\n-            .owner(\"CAS\")\n-            .build();\n-        WASAML2SPKeystoreService saml2SPKeystoreService = mock(WASAML2SPKeystoreService.class);\n-        when(saml2SPKeystoreService.getByOwner(anyString())).thenReturn(keystoreTO);\n+                .keystore(getKeystoreAsString())\n+                .owner(\"CAS\")\n+                .build();\n+        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n+        when(saml2SPKeystoreService.readFor(anyString())).thenReturn(keystoreTO);\n         when(saml2SPKeystoreService.set(any())).thenReturn(response);\n \n         SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-            .owner(\"Syncope\")\n-            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n-            .build();\n+                .owner(\"Syncope\")\n+                .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n+                        StandardCharsets.UTF_8))\n+                .build();\n \n-        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n         when(saml2SPMetadataService.set(any())).thenReturn(response);\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n \n-        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n-        when(syncopeClient.getService(WASAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n \n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n         return restClient;\n@@ -81,14 +78,16 @@ private static WARestClient getWaRestClient(final Response response) throws Exce\n     public void generate() throws Exception {\n         SAML2Client client = getSAML2Client();\n         SAML2KeystoreGenerator generator1 = new SyncopeWASAML2ClientKeystoreGenerator(\n-            getWaRestClient(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build()), client);\n+                getWaRestClient(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build()), client);\n         assertDoesNotThrow(new Executable() {\n+\n             @Override\n             public void execute() throws Throwable {\n                 generator1.generate();\n             }\n         });\n-        SAML2KeystoreGenerator generator2 = new SyncopeWASAML2ClientKeystoreGenerator(getWaRestClient(Response.serverError().build()), client);\n+        SAML2KeystoreGenerator generator2 = new SyncopeWASAML2ClientKeystoreGenerator(\n+                getWaRestClient(Response.serverError().build()), client);\n         assertThrows(SAMLException.class, () -> generator2.generate());\n     }\n }"},{"sha":"c80a58cdf4dc280c69a1f0505e823f3af0d794ee","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGeneratorTest.java","status":"modified","additions":22,"deletions":24,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,50 +16,48 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.metadata.SAML2MetadataGenerator;\n import org.springframework.core.io.ClassPathResource;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-\n public class SyncopeWASAML2ClientMetadataGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n+\n     private static WARestClient getWaRestClient(final Response response) throws IOException {\n         WARestClient restClient = mock(WARestClient.class);\n         SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-            .owner(\"Syncope\")\n-            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n-            .build();\n+                .owner(\"Syncope\")\n+                .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n+                        StandardCharsets.UTF_8))\n+                .build();\n \n-        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n         when(saml2SPMetadataService.set(any())).thenReturn(response);\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n         return restClient;\n     }\n@@ -71,7 +69,7 @@ public void storeMetadata() throws Exception {\n         client.getConfiguration().setKeystoreResourceFilepath(keystoreFile);\n \n         SAML2MetadataGenerator generator = new SyncopeWASAML2ClientMetadataGenerator(\n-            getWaRestClient(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).build()), client);\n+                getWaRestClient(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).build()), client);\n         EntityDescriptor entityDescriptor = generator.buildEntityDescriptor();\n         String metadata = generator.getMetadata(entityDescriptor);\n         assertNotNull(generator.storeMetadata(metadata, null, false));"},{"sha":"e403a6fb092d7e8f586ca2e9387747618698468f","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolverTest.java","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a1c306fb9b472e9ee40a0bb77d974b2c7608d778/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java?ref=a1c306fb9b472e9ee40a0bb77d974b2c7608d778","patch":"@@ -16,32 +16,29 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.pac4j.saml.client.SAML2Client;\n import org.springframework.core.io.ClassPathResource;\n \n-import javax.ws.rs.core.Response;\n-\n-import java.io.File;\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n-\n public class SyncopeWASAML2MetadataResolverTest extends BaseSyncopeWASAML2ClientTest {\n+\n     @Test\n     public void fetchMetadata() throws Exception {\n         SAML2Client client = getSAML2Client();\n@@ -50,16 +47,18 @@ public void fetchMetadata() throws Exception {\n         WARestClient restClient = mock(WARestClient.class);\n \n         SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder()\n-            .owner(\"Syncope\")\n-            .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n-            .build();\n+                .owner(\"Syncope\")\n+                .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(),\n+                        StandardCharsets.UTF_8))\n+                .build();\n \n-        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n-        when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n-        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).build());\n+        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        when(saml2SPMetadataService.readFor(anyString())).thenReturn(metadataTO);\n+        when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9081/syncop-wa\")).\n+                build());\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n         SyncopeWASAML2MetadataResolver resolver = new SyncopeWASAML2MetadataResolver(restClient, client);"}]}