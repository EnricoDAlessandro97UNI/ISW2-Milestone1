{"sha":"d310af8337e3fbc410d70e21f62e6bd40ffd753e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQzMTBhZjgzMzdlM2ZiYzQxMGQ3MGUyMWY2MmU2YmQ0MGZmZDc1M2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-13T09:14:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-13T11:23:14Z"},"message":"Always conditionally handling notification and audit events in a Quartz job","tree":{"sha":"9e3d624d2802cdb84321bcd6fe7a0ece3ade35e3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9e3d624d2802cdb84321bcd6fe7a0ece3ade35e3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d310af8337e3fbc410d70e21f62e6bd40ffd753e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d310af8337e3fbc410d70e21f62e6bd40ffd753e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d310af8337e3fbc410d70e21f62e6bd40ffd753e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d310af8337e3fbc410d70e21f62e6bd40ffd753e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c6262057436ec99ee9d6b7b7c6665f824ce32b28","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c6262057436ec99ee9d6b7b7c6665f824ce32b28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c6262057436ec99ee9d6b7b7c6665f824ce32b28"}],"stats":{"total":96,"additions":68,"deletions":28},"files":[{"sha":"d84fa25bd989b4fe727e492417340cfee6954d32","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":41,"deletions":14,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d310af8337e3fbc410d70e21f62e6bd40ffd753e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d310af8337e3fbc410d70e21f62e6bd40ffd753e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=d310af8337e3fbc410d70e21f62e6bd40ffd753e","patch":"@@ -46,9 +46,11 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n@@ -66,6 +68,18 @@\n public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions>\n         implements SyncopePushResultHandler {\n \n+    /**\n+     * Notification Manager.\n+     */\n+    @Autowired\n+    protected NotificationManager notificationManager;\n+\n+    /**\n+     * Audit Manager.\n+     */\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n     @Autowired\n     protected MappingManager mappingManager;\n \n@@ -196,7 +210,6 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n         Object output = null;\n         Result resultStatus = null;\n-        String operation = null;\n \n         // Try to read remote object BEFORE any actual operation\n         Provision provision = profile.getTask().getResource().getProvision(any.getType());\n@@ -214,9 +227,22 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n             }\n             result.setStatus(ProvisioningReport.Status.SUCCESS);\n         } else {\n+            String operation = beforeObj == null\n+                    ? UnmatchingRule.toEventName(profile.getTask().getUnmatchingRule())\n+                    : MatchingRule.toEventName(profile.getTask().getMatchingRule());\n+\n+            boolean notificationsAvailable = notificationManager.notificationsAvailable(\n+                    AuditElements.EventCategoryType.PUSH,\n+                    any.getType().getKind().name().toLowerCase(),\n+                    profile.getTask().getResource().getKey(),\n+                    operation);\n+            boolean auditRequested = auditManager.auditRequested(\n+                    AuditElements.EventCategoryType.PUSH,\n+                    any.getType().getKind().name().toLowerCase(),\n+                    profile.getTask().getResource().getKey(),\n+                    operation);\n             try {\n                 if (beforeObj == null) {\n-                    operation = UnmatchingRule.toEventName(profile.getTask().getUnmatchingRule());\n                     result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n \n                     switch (profile.getTask().getUnmatchingRule()) {\n@@ -266,7 +292,6 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n                         // do nothing\n                     }\n                 } else {\n-                    operation = MatchingRule.toEventName(profile.getTask().getMatchingRule());\n                     result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n \n                     switch (profile.getTask().getMatchingRule()) {\n@@ -365,17 +390,19 @@ private void doHandle(final Any<?> any) throws JobExecutionException {\n \n                 throw new JobExecutionException(e);\n             } finally {\n-                Map<String, Object> jobMap = new HashMap<>();\n-                jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n-                        AuditElements.EventCategoryType.PUSH,\n-                        any.getType().getKind().name().toLowerCase(),\n-                        profile.getTask().getResource().getKey(),\n-                        operation,\n-                        resultStatus,\n-                        beforeObj,\n-                        output,\n-                        any));\n-                AfterHandlingJob.schedule(scheduler, jobMap);\n+                if (notificationsAvailable || auditRequested) {\n+                    Map<String, Object> jobMap = new HashMap<>();\n+                    jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n+                            AuditElements.EventCategoryType.PUSH,\n+                            any.getType().getKind().name().toLowerCase(),\n+                            profile.getTask().getResource().getKey(),\n+                            operation,\n+                            resultStatus,\n+                            beforeObj,\n+                            output,\n+                            any));\n+                    AfterHandlingJob.schedule(scheduler, jobMap);\n+                }\n             }\n         }\n     }"},{"sha":"50e68f0e23ceb4efb46435bb31945372c3fa1dc6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPushResultHandlerImpl.java","status":"modified","additions":27,"deletions":14,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d310af8337e3fbc410d70e21f62e6bd40ffd753e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d310af8337e3fbc410d70e21f62e6bd40ffd753e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java?ref=d310af8337e3fbc410d70e21f62e6bd40ffd753e","patch":"@@ -152,7 +152,6 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n         Object output = null;\n         Result resultStatus = null;\n-        String operation = null;\n \n         // Try to read remote object BEFORE any actual operation\n         ConnectorObject beforeObj = getRemoteObject(\n@@ -168,9 +167,22 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n             }\n             result.setStatus(ProvisioningReport.Status.SUCCESS);\n         } else {\n+            String operation = beforeObj == null\n+                    ? UnmatchingRule.toEventName(profile.getTask().getUnmatchingRule())\n+                    : MatchingRule.toEventName(profile.getTask().getMatchingRule());\n+\n+            boolean notificationsAvailable = notificationManager.notificationsAvailable(\n+                    AuditElements.EventCategoryType.PUSH,\n+                    REALM_TYPE.toLowerCase(),\n+                    profile.getTask().getResource().getKey(),\n+                    operation);\n+            boolean auditRequested = auditManager.auditRequested(\n+                    AuditElements.EventCategoryType.PUSH,\n+                    REALM_TYPE.toLowerCase(),\n+                    profile.getTask().getResource().getKey(),\n+                    operation);\n             try {\n                 if (beforeObj == null) {\n-                    operation = UnmatchingRule.toEventName(profile.getTask().getUnmatchingRule());\n                     result.setOperation(getResourceOperation(profile.getTask().getUnmatchingRule()));\n \n                     switch (profile.getTask().getUnmatchingRule()) {\n@@ -220,7 +232,6 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                         // do nothing\n                     }\n                 } else {\n-                    operation = MatchingRule.toEventName(profile.getTask().getMatchingRule());\n                     result.setOperation(getResourceOperation(profile.getTask().getMatchingRule()));\n \n                     switch (profile.getTask().getMatchingRule()) {\n@@ -322,17 +333,19 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n \n                 throw new JobExecutionException(e);\n             } finally {\n-                Map<String, Object> jobMap = new HashMap<>();\n-                jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n-                        AuditElements.EventCategoryType.PUSH,\n-                        REALM_TYPE.toLowerCase(),\n-                        profile.getTask().getResource().getKey(),\n-                        operation,\n-                        resultStatus,\n-                        beforeObj,\n-                        output,\n-                        realm));\n-                AfterHandlingJob.schedule(scheduler, jobMap);\n+                if (notificationsAvailable || auditRequested) {\n+                    Map<String, Object> jobMap = new HashMap<>();\n+                    jobMap.put(AfterHandlingEvent.JOBMAP_KEY, new AfterHandlingEvent(\n+                            AuditElements.EventCategoryType.PUSH,\n+                            REALM_TYPE.toLowerCase(),\n+                            profile.getTask().getResource().getKey(),\n+                            operation,\n+                            resultStatus,\n+                            beforeObj,\n+                            output,\n+                            realm));\n+                    AfterHandlingJob.schedule(scheduler, jobMap);\n+                }\n             }\n         }\n     }"}]}