{"sha":"c60fd59463cbd1a606bccba0cb7431ab356ceada","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM2MGZkNTk0NjNjYmQxYTYwNmJjY2JhMGNiNzQzMWFiMzU2Y2VhZGE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-10T14:06:32Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-10T14:06:32Z"},"message":"Update issue 75\n\nEverything ready on core & client, let's move to console...\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247187 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1bb0e3c516f810a32f5507aedfdc6fb6801cea8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a1bb0e3c516f810a32f5507aedfdc6fb6801cea8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c60fd59463cbd1a606bccba0cb7431ab356ceada","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c60fd59463cbd1a606bccba0cb7431ab356ceada","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c60fd59463cbd1a606bccba0cb7431ab356ceada","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c60fd59463cbd1a606bccba0cb7431ab356ceada/comments","author":null,"committer":null,"parents":[{"sha":"4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ef50444a8edfd1c0177a7fa8b0166632a2bc43b"}],"stats":{"total":909,"additions":825,"deletions":84},"files":[{"sha":"74a3e5d0ebeb0d2f317cf206c67c41decfc59bd9","filename":"client/src/main/java/org/syncope/client/to/MembershipTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -19,6 +19,8 @@\n \n public class MembershipTO extends AbstractAttributableTO {\n \n+    private static final long serialVersionUID = 5992828670273935861L;\n+\n     private Long roleId;\n \n     private String roleName;"},{"sha":"04644171fdff1056ee698ca83a818432e03914c5","filename":"client/src/main/java/org/syncope/client/to/NotificationTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNotificationTO.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -21,6 +21,8 @@\n \n public class NotificationTO extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -6145117115632592612L;\n+\n     private Long id;\n \n     private List<String> events;"},{"sha":"00dd351b03ed7afcb4b7063a4497582c3fd2d856","filename":"client/src/main/java/org/syncope/client/to/UserRequestTO.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserRequestTO.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.types.UserRequestType;\n+\n+public class UserRequestTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 1228351243795629329L;\n+\n+    private UserTO userTO;\n+\n+    private UserMod userMod;\n+\n+    private Long userId;\n+\n+    private UserRequestType type;\n+\n+    public UserRequestType getType() {\n+        return type;\n+    }\n+\n+    public void setType(UserRequestType type) {\n+        this.type = type;\n+    }\n+\n+    public UserTO getUserTO() {\n+        return type != UserRequestType.CREATE\n+                ? null\n+                : userTO;\n+    }\n+\n+    public void setUserTO(UserTO userTO) {\n+        this.userTO = userTO;\n+    }\n+\n+    public UserMod getUserMod() {\n+        return type != UserRequestType.UPDATE\n+                ? null\n+                : userMod;\n+    }\n+\n+    public void setUserMod(UserMod userMod) {\n+        this.userMod = userMod;\n+    }\n+\n+    public Long getUserId() {\n+        return type != UserRequestType.DELETE\n+                ? null\n+                : userId;\n+    }\n+\n+    public void setUserId(Long userId) {\n+        this.userId = userId;\n+    }\n+}"},{"sha":"d6b24a55f8ed4b0c101885b68106933374da6f47","filename":"client/src/main/java/org/syncope/types/UserRequestType.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FUserRequestType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FUserRequestType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FUserRequestType.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,22 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum UserRequestType {\n+\n+    CREATE,\n+    UPDATE,\n+    DELETE\n+\n+}\n\\ No newline at end of file"},{"sha":"89c046ae29335528fe6060367393fd1beb21fb3b","filename":"core/src/main/java/org/syncope/core/persistence/beans/UserRequest.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.validation.constraints.NotNull;\n+import org.hibernate.annotations.Type;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.util.XmlSerializer;\n+import org.syncope.types.UserRequestType;\n+\n+@Entity\n+public class UserRequest extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 4977358381988835119L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+\n+    @NotNull\n+    @Lob\n+    @Type(type = \"org.hibernate.type.StringClobType\")\n+    private String payload;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private UserRequestType type;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public UserRequestType getType() {\n+        return type;\n+    }\n+\n+    public UserTO getUserTO() {\n+        return type != UserRequestType.CREATE\n+                ? null\n+                : XmlSerializer.<UserTO>deserialize(payload);\n+    }\n+\n+    public void setUserTO(final UserTO userTO) {\n+        type = UserRequestType.CREATE;\n+        payload = XmlSerializer.serialize(userTO);\n+    }\n+\n+    public UserMod getUserMod() {\n+        return type != UserRequestType.UPDATE\n+                ? null\n+                : XmlSerializer.<UserMod>deserialize(payload);\n+    }\n+\n+    public void setUserMod(final UserMod userMod) {\n+        type = UserRequestType.UPDATE;\n+        payload = XmlSerializer.serialize(userMod);\n+    }\n+\n+    public Long getUserId() {\n+        return type != UserRequestType.DELETE\n+                ? null\n+                : Long.valueOf(payload);\n+    }\n+\n+    public void setUserId(final Long userId) {\n+        type = UserRequestType.DELETE;\n+        payload = String.valueOf(userId);\n+    }\n+}"},{"sha":"37aceedb686c53f3b6477eca72c6469d677d8661","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserRequestDAO.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserRequestDAO.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.UserRequest;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+public interface UserRequestDAO extends DAO {\n+\n+    UserRequest find(Long id);\n+\n+    List<UserRequest> findAll();\n+\n+    UserRequest save(UserRequest userRequest)\n+            throws InvalidEntityException;\n+\n+    void delete(Long id);\n+}"},{"sha":"4e7ba135816adb0ba21b4d8168bf189124a8c510","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserRequestDAOImpl.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.UserRequest;\n+import org.syncope.core.persistence.dao.UserRequestDAO;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+@Repository\n+@Transactional(noRollbackFor = {Throwable.class})\n+public class UserRequestDAOImpl extends AbstractDAOImpl\n+        implements UserRequestDAO {\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public UserRequest find(Long id) {\n+        return entityManager.find(UserRequest.class, id);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<UserRequest> findAll() {\n+        Query query = entityManager.createQuery(\"SELECT e \"\n+                + \"FROM \" + UserRequest.class.getSimpleName() + \" e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public UserRequest save(UserRequest userRequest)\n+            throws InvalidEntityException {\n+\n+        return entityManager.merge(userRequest);\n+    }\n+\n+    @Override\n+    public void delete(Long id) {\n+        entityManager.remove(find(id));\n+    }\n+}"},{"sha":"f6aa9aa212c649ebe609566692b54ea204f24e56","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PropagationTaskValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -20,7 +20,7 @@\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.types.EntityViolationType;\n-import org.syncope.types.PropagationTaskExecStatus;\n+import org.syncope.core.propagation.PropagationTaskExecStatus;\n \n public class PropagationTaskValidator extends AbstractValidator\n         implements ConstraintValidator<PropagationTaskCheck, PropagationTask> {"},{"sha":"3cc971a6787668f8143e532474af20a59292e2d0","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -69,7 +69,6 @@\n import org.syncope.types.PropagationOperation;\n import org.syncope.types.IntMappingType;\n import org.syncope.types.SchemaType;\n-import org.syncope.types.PropagationTaskExecStatus;\n import org.syncope.types.TraceLevel;\n \n /**"},{"sha":"2f3d33b4342b8c7fc87b60ad352553a872866cc8","filename":"core/src/main/java/org/syncope/core/propagation/PropagationTaskExecStatus.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationTaskExecStatus.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.types;\n+package org.syncope.core.propagation;\n \n /**\n  * Status of a TaskExecution.","previous_filename":"client/src/main/java/org/syncope/types/PropagationTaskExecStatus.java"},{"sha":"8fa5876ef47f4763c75909bec7861ed71f995220","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -64,7 +64,7 @@\n import org.syncope.core.util.TaskUtil;\n import org.syncope.types.EntityViolationType;\n import org.syncope.types.PropagationMode;\n-import org.syncope.types.PropagationTaskExecStatus;\n+import org.syncope.core.propagation.PropagationTaskExecStatus;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller"},{"sha":"863f2249ba2da67d61937982ab5eb732cf51baf8","filename":"core/src/main/java/org/syncope/core/rest/controller/UserRequestController.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,165 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javassist.NotFoundException;\n+import javax.persistence.RollbackException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserRequestTO;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.SyncopeConf;\n+import org.syncope.core.persistence.beans.UserRequest;\n+import org.syncope.core.persistence.dao.ConfDAO;\n+import org.syncope.core.persistence.dao.UserRequestDAO;\n+import org.syncope.core.rest.data.UserRequestDataBinder;\n+\n+@Controller\n+@RequestMapping(\"/user/request\")\n+public class UserRequestController {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(UserRequestController.class);\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    @Autowired\n+    private UserRequestDAO userRequestDAO;\n+\n+    @Autowired\n+    private UserRequestDataBinder dataBinder;\n+\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n+    public UserRequestTO create(@RequestBody final UserTO userTO)\n+            throws UnauthorizedRoleException {\n+\n+        SyncopeConf createRequestAllowed =\n+                confDAO.find(\"createRequest.allowed\", \"false\");\n+        if (!Boolean.valueOf(createRequestAllowed.getValue())) {\n+            LOG.error(\"Create requests are not allowed\");\n+\n+            throw new UnauthorizedRoleException(-1L);\n+        }\n+\n+        LOG.debug(\"Request user create called with {}\", userTO);\n+\n+        try {\n+            dataBinder.testCreate(userTO);\n+        } catch (RollbackException e) {\n+        }\n+\n+        UserRequest request = new UserRequest();\n+        request.setUserTO(userTO);\n+        request = userRequestDAO.save(request);\n+\n+        return dataBinder.getUserRequestTO(request);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n+    public UserRequestTO update(@RequestBody final UserMod userMod)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        LOG.debug(\"Request user update called with {}\", userMod);\n+\n+        try {\n+            dataBinder.testUpdate(userMod);\n+        } catch (RollbackException e) {\n+        }\n+\n+        UserRequest request = new UserRequest();\n+        request.setUserMod(userMod);\n+        request = userRequestDAO.save(request);\n+\n+        return dataBinder.getUserRequestTO(request);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/delete\")\n+    public UserRequestTO delete(@RequestBody final Long userId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        LOG.debug(\"Request user delete called with {}\", userId);\n+\n+        try {\n+            dataBinder.testDelete(userId);\n+        } catch (RollbackException e) {\n+        }\n+\n+        UserRequest request = new UserRequest();\n+        request.setUserId(userId);\n+        request = userRequestDAO.save(request);\n+\n+        return dataBinder.getUserRequestTO(request);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    @Transactional(readOnly = true)\n+    public List<UserRequestTO> list() {\n+        List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n+\n+        for (UserRequest request : userRequestDAO.findAll()) {\n+            result.add(dataBinder.getUserRequestTO(request));\n+        }\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_REQUEST_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{requestId}\")\n+    @Transactional(readOnly = true)\n+    public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId)\n+            throws NotFoundException {\n+\n+        UserRequest request = userRequestDAO.find(requestId);\n+        if (request == null) {\n+            throw new NotFoundException(\"User request \" + requestId);\n+        }\n+\n+        return dataBinder.getUserRequestTO(request);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/deleteRequest/{requestId}\")\n+    public void deleteRequest(@PathVariable(\"requestId\") final Long requestId)\n+            throws NotFoundException {\n+\n+        UserRequest request = userRequestDAO.find(requestId);\n+        if (request == null) {\n+            throw new NotFoundException(\"User request \" + requestId);\n+        }\n+\n+        userRequestDAO.delete(requestId);\n+    }\n+}"},{"sha":"20dda5a03a6936099b29b1519aa40572a7881f8f","filename":"core/src/main/java/org/syncope/core/rest/data/UserRequestDataBinder.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import javassist.NotFoundException;\n+import javax.persistence.RollbackException;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserRequestTO;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.UserRequest;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.UserDAO;\n+import org.syncope.core.rest.controller.UnauthorizedRoleException;\n+\n+@Component\n+public class UserRequestDataBinder {\n+\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    public SyncopeUser getUserFromId(final Long userId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        if (userId == null) {\n+            throw new NotFoundException(\"Null user id\");\n+        }\n+\n+        SyncopeUser user = userDAO.find(userId);\n+        if (user == null) {\n+            throw new NotFoundException(\"User \" + userId);\n+        }\n+\n+        if (!user.getUsername().equals(SecurityContextHolder.getContext().\n+                getAuthentication().getName())) {\n+\n+            throw new UnauthorizedRoleException(-1L);\n+        }\n+\n+        return user;\n+    }\n+\n+    public UserRequestTO getUserRequestTO(final UserRequest request) {\n+        UserRequestTO result = new UserRequestTO();\n+        BeanUtils.copyProperties(request, result);\n+\n+        return result;\n+    }\n+\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public void testCreate(final UserTO userTO) {\n+        SyncopeUser user = new SyncopeUser();\n+        userDataBinder.create(user, userTO);\n+        userDAO.save(user);\n+\n+        throw new RollbackException();\n+    }\n+\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public void testUpdate(final UserMod userMod)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeUser user = getUserFromId(userMod.getId());\n+        userDataBinder.update(user, userMod);\n+        userDAO.save(user);\n+\n+        throw new RollbackException();\n+    }\n+\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public void testDelete(final Long userId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeUser user = getUserFromId(userId);\n+        userDAO.delete(user);\n+\n+        throw new RollbackException();\n+    }\n+}"},{"sha":"a7cc61364c10971398c4bf61ddc1f628f4a34f1d","filename":"core/src/main/resources/content.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -20,6 +20,7 @@\n     <SyncopeConf confKey=\"email.schema\" confValue=\"email\"/>\n     <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n     <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"MD5\"/>\n+    <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"false\"/>\n \n     <USchema name=\"surname\" type=\"String\"\n                 mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -95,5 +96,8 @@\n     <Entitlement name=\"NOTIFICATION_READ\"/>\n     <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n     <Entitlement name=\"NOTIFICATION_DELETE\"/>\n+    <Entitlement name=\"USER_REQUEST_LIST\"/>\n+    <Entitlement name=\"USER_REQUEST_READ\"/>\n+    <Entitlement name=\"USER_REQUEST_DELETE\"/>\n     \n </dataset>"},{"sha":"70e1130af613baaffdf981f6e783a6a27e388f48","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -34,9 +34,9 @@ public class EntitlementTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        // 53 real entitlements + 9 role entitlements\n+        // 62 real entitlements + 9 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n-                68, list.size());\n+                71, list.size());\n     }\n \n     @Test"},{"sha":"92354919d2a0eb26ec428107ea8a04175edf9ec1","filename":"core/src/test/java/org/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -33,7 +33,7 @@\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.types.PropagationMode;\n-import org.syncope.types.PropagationTaskExecStatus;\n+import org.syncope.core.propagation.PropagationTaskExecStatus;\n import org.syncope.types.PropagationOperation;\n \n @Transactional"},{"sha":"25705ba607b5d6dbbfbf6d058e28037970549b52","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -37,13 +37,13 @@\n import org.syncope.types.SchemaType;\n \n public class AuthenticationTestITCase extends AbstractTest {\n-\n+    \n     @Test\n     public void testEntitlements() {\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user1\", \"password\"));\n-\n+        \n         String[] entsArray = restTemplate.getForObject(BASE_URL\n                 + \"auth/entitlements.json\", String[].class);\n         Set<String> authEnts = new HashSet<String>(entsArray.length);\n@@ -57,7 +57,7 @@ public void testEntitlements() {\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-\n+        \n         Set<String> dbEnts = new HashSet<String>();\n         dbEnts.add(\"base\");\n         dbEnts.add(\"advanced\");\n@@ -69,18 +69,18 @@ public void testEntitlements() {\n         for (RoleTO roleTO : roleTOs) {\n             dbEnts.add(EntitlementUtil.getEntitlementName(roleTO.getId()));\n         }\n-\n+        \n         assertEquals(authEnts, dbEnts);\n     }\n-\n+    \n     @Test\n     public void testUserSchemaAuthorization() {\n         // 0. create a role that can only read schemas\n         RoleTO authRoleTO = new RoleTO();\n         authRoleTO.setName(\"authRole\");\n         authRoleTO.setParent(8L);\n         authRoleTO.addEntitlement(\"SCHEMA_READ\");\n-\n+        \n         authRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n                 authRoleTO, RoleTO.class);\n         assertNotNull(authRoleTO);\n@@ -90,22 +90,22 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setName(\"authTestSchema\");\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n-\n+        \n         SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n                 + \"schema/user/create\", schemaTO, SchemaTO.class);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n         UserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n-\n+        \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(authRoleTO.getId());\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-\n+        \n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n@@ -120,7 +120,7 @@ public void testUserSchemaAuthorization() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         schemaTO = restTemplate.getForObject(BASE_URL\n                 + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n         assertNotNull(schemaTO);\n@@ -138,44 +138,44 @@ public void testUserSchemaAuthorization() {\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-\n+        \n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-\n+        \n         assertNotNull(userTO);\n         assertNotNull(userTO.getLastLoginDate());\n         assertEquals(new Integer(0), userTO.getFailedLogins());\n     }\n-\n+    \n     @Test\n     public void testUserRead() {\n         UserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n-\n+        \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-\n+        \n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n         assertNotNull(readUserTO);\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user2\", \"password\"));\n-\n+        \n         HttpClientErrorException exception = null;\n         try {\n             restTemplate.getForObject(\n@@ -189,33 +189,33 @@ public void testUserRead() {\n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n     }\n-\n+    \n     @Test\n     public void testUserSearch() {\n         UserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n-\n+        \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-\n+        \n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         AttributeCond isNullCond = new AttributeCond(\n                 AttributeCond.Type.ISNOTNULL);\n         isNullCond.setSchema(\"loginDate\");\n         NodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n-\n+        \n         List<UserTO> matchedUsers = Arrays.asList(\n                 restTemplate.postForObject(BASE_URL + \"user/search\",\n                 searchCondition, UserTO[].class));\n@@ -226,11 +226,11 @@ public void testUserSearch() {\n             userIds.add(user.getId());\n         }\n         assertTrue(userIds.contains(1L));\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user2\", \"password\"));\n-\n+        \n         matchedUsers = Arrays.asList(\n                 restTemplate.postForObject(BASE_URL + \"user/search\",\n                 searchCondition, UserTO[].class));\n@@ -244,33 +244,33 @@ public void testUserSearch() {\n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n     }\n-\n+    \n     @Test\n     public void checkFailedLogins() {\n         UserTO userTO =\n                 UserTestITCase.getSampleTO(\"checkFailedLogin@syncope-idm.org\");\n-\n+        \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-\n+        \n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-\n+        \n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(0), readUserTO.getFailedLogins());\n@@ -281,9 +281,9 @@ public void checkFailedLogins() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n-\n+        \n         Throwable t = null;\n-\n+        \n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n@@ -292,10 +292,10 @@ public void checkFailedLogins() {\n         } catch (Exception e) {\n             t = e;\n         }\n-\n+        \n         assertNotNull(t);\n         t = null;\n-\n+        \n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n@@ -307,134 +307,134 @@ public void checkFailedLogins() {\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-\n+        \n         readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(2), readUserTO.getFailedLogins());\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(0), readUserTO.getFailedLogins());\n     }\n-\n+    \n     @Test\n     public void checkUserSuspension() {\n         UserTO userTO =\n                 UserTestITCase.getSampleTO(\"checkSuspension@syncope-idm.org\");\n-\n+        \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-\n+        \n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-\n+        \n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n-        assertEquals(new Integer(0), userTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n \n         // authentications failed ...\n \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n-\n+        \n         Throwable t = null;\n-\n+        \n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-\n+        \n         assertNotNull(t);\n         t = null;\n-\n+        \n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-\n+        \n         assertNotNull(t);\n         t = null;\n-\n+        \n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-\n+        \n         assertNotNull(t);\n         t = null;\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-\n+        \n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-\n+        \n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n-        assertEquals(new Integer(3), userTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n \n         // last authentication before suspension\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n-\n+        \n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-\n+        \n         assertNotNull(t);\n         t = null;\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-\n+        \n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-\n+        \n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n         assertEquals(new Integer(3), userTO.getFailedLogins());\n@@ -446,7 +446,7 @@ public void checkUserSuspension() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n@@ -455,28 +455,28 @@ public void checkUserSuspension() {\n         } catch (Exception e) {\n             t = e;\n         }\n-\n+        \n         assertNotNull(t);\n         t = null;\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-\n+        \n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n-\n+        \n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n-\n+        \n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-\n+        \n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-\n+        \n         assertNotNull(userTO);\n         assertEquals(new Integer(0), userTO.getFailedLogins());\n     }"},{"sha":"845e200992aafccfee067f84766fca5f9e23273d","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -26,7 +26,7 @@\n import org.syncope.client.to.SchedTaskTO;\n import org.syncope.client.to.SyncTaskTO;\n import org.syncope.client.to.TaskTO;\n-import org.syncope.types.PropagationTaskExecStatus;\n+import org.syncope.core.propagation.PropagationTaskExecStatus;\n \n public class TaskTestITCase extends AbstractTest {\n "},{"sha":"a407828599e0498c46ee89c0a82d0cfc41267561","filename":"core/src/test/java/org/syncope/core/rest/UserRequestTestITCase.java","status":"added","additions":205,"deletions":0,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -0,0 +1,205 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.httpclient.UsernamePasswordCredentials;\n+import static org.junit.Assert.*;\n+\n+import org.apache.commons.httpclient.auth.AuthScope;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.CommonsClientHttpRequestFactory;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.UserRequestTO;\n+import org.syncope.client.to.UserTO;\n+\n+public class UserRequestTestITCase extends AbstractTest {\n+\n+    @Test\n+    public void create() {\n+        // 1. set create request not allowed\n+        ConfigurationTO configurationTO = new ConfigurationTO();\n+        configurationTO.setKey(\"createRequest.allowed\");\n+        configurationTO.setValue(\"false\");\n+\n+        configurationTO = restTemplate.postForObject(\n+                BASE_URL + \"configuration/create\",\n+                configurationTO, ConfigurationTO.class);\n+        assertNotNull(configurationTO);\n+\n+        UserTO userTO = UserTestITCase.getSampleTO(\n+                \"selfcreate@syncope-idm.org\");\n+\n+        // 2. get unauthorized when trying to request user create\n+        try {\n+            restTemplate.postForObject(BASE_URL + \"user/request/create\",\n+                    userTO, UserRequestTO.class);\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.UNAUTHORIZED, e.getStatusCode());\n+        }\n+\n+        // 3. set create request allowed\n+        configurationTO.setValue(\"true\");\n+\n+        configurationTO = restTemplate.postForObject(\n+                BASE_URL + \"configuration/create\",\n+                configurationTO, ConfigurationTO.class);\n+        assertNotNull(configurationTO);\n+\n+        // 4. be anonymous\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY, null);\n+\n+        // 5. now request user create works\n+        UserRequestTO request = restTemplate.postForObject(\n+                BASE_URL + \"user/request/create\", userTO, UserRequestTO.class);\n+        assertNotNull(request);\n+\n+        // 6. switch back to admin\n+        super.setupRestTemplate();\n+\n+        // 7. try to find user\n+        AttributeCond attrCond = new AttributeCond(AttributeCond.Type.EQ);\n+        attrCond.setSchema(\"userId\");\n+        attrCond.setExpression(\"selfcreate@syncope-idm.org\");\n+\n+        final List<UserTO> matchingUsers = Arrays.asList(\n+                restTemplate.postForObject(BASE_URL + \"user/search\",\n+                NodeCond.getLeafCond(attrCond), UserTO[].class));\n+        assertTrue(matchingUsers.isEmpty());\n+\n+        // 8. actually create user\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", request.getUserTO(), UserTO.class);\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void update() {\n+        // 1. create an user (as admin)\n+        UserTO userTO = UserTestITCase.getSampleTO(\n+                \"selfupdate@syncope-idm.org\");\n+        String initialPassword = userTO.getPassword();\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(\"new\" + initialPassword);\n+\n+        // 2. try to request user update as admin: failure\n+        try {\n+            restTemplate.postForObject(BASE_URL + \"user/request/update\",\n+                    userMod, UserRequestTO.class);\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.UNAUTHORIZED, e.getStatusCode());\n+        }\n+\n+        // 3. auth as user just created\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(userTO.getUsername(),\n+                initialPassword));\n+\n+        // 4. now request user update works\n+        UserRequestTO request = restTemplate.postForObject(\n+                BASE_URL + \"user/request/update\",\n+                userMod, UserRequestTO.class);\n+        assertNotNull(request);\n+\n+        // 5. switch back to admin\n+        super.setupRestTemplate();\n+\n+        // 6. user password has not changed yet\n+        Boolean verify = restTemplate.getForObject(\n+                BASE_URL + \"user/verifyPassword/{userId}?password=\"\n+                + userMod.getPassword(),\n+                Boolean.class, userTO.getId());\n+        assertFalse(verify);\n+\n+        // 7. actually update user\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n+                userMod, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        // 8. user password has now changed\n+        verify = restTemplate.getForObject(\n+                BASE_URL + \"user/verifyPassword/{userId}?password=\"\n+                + userMod.getPassword(),\n+                Boolean.class, userTO.getId());\n+        assertTrue(verify);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        // 1. create an user (as admin)\n+        UserTO userTO = UserTestITCase.getSampleTO(\n+                \"selfdelete@syncope-idm.org\");\n+        String initialPassword = userTO.getPassword();\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        // 2. try to request user delete as admin: failure\n+        try {\n+            restTemplate.postForObject(BASE_URL + \"user/request/delete/\",\n+                    userTO.getId(), UserRequestTO.class);\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.UNAUTHORIZED, e.getStatusCode());\n+        }\n+\n+        // 3. auth as user just created\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(userTO.getUsername(),\n+                initialPassword));\n+\n+        // 4. now request user delete works\n+        UserRequestTO request = restTemplate.postForObject(\n+                BASE_URL + \"user/request/delete\",\n+                userTO.getId(), UserRequestTO.class);\n+        assertNotNull(request);\n+\n+        // 5. switch back to admin\n+        super.setupRestTemplate();\n+\n+        // 6. user still exists\n+        UserTO actual = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+        assertNotNull(actual);\n+\n+        // 7. actually delete user\n+        restTemplate.delete(BASE_URL + \"user/delete/{userId}\", userTO.getId());\n+\n+        // 8. user does not exist any more\n+        try {\n+            actual = restTemplate.getForObject(BASE_URL\n+                    + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+            fail();\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+    }\n+}"},{"sha":"71378a1dc6f0c68e7cb345775481e02d9bdd22d6","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -509,8 +509,7 @@ public final void create() {\n         // 2. check for virtual attribute value\n         newUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n-                UserTO.class,\n-                newUserTO.getId());\n+                UserTO.class, newUserTO.getId());\n         assertNotNull(newUserTO);\n \n         assertNotNull(newUserTO.getVirtualAttributeMap());\n@@ -864,15 +863,15 @@ public final void searchByUsernameAndId() {\n \n         assertTrue(searchCondition.checkValidity());\n \n-        final List<UserTO> matchedUsers = Arrays.asList(\n+        final List<UserTO> matchingUsers = Arrays.asList(\n                 restTemplate.postForObject(\n                 BASE_URL + \"user/search\",\n                 searchCondition, UserTO[].class));\n \n-        assertNotNull(matchedUsers);\n-        assertEquals(1, matchedUsers.size());\n-        assertEquals(\"user1\", matchedUsers.iterator().next().getUsername());\n-        assertEquals(1L, matchedUsers.iterator().next().getId());\n+        assertNotNull(matchingUsers);\n+        assertEquals(1, matchingUsers.size());\n+        assertEquals(\"user1\", matchingUsers.iterator().next().getUsername());\n+        assertEquals(1L, matchingUsers.iterator().next().getId());\n     }\n \n     @Test"},{"sha":"d7996063d68235e819d947e78cf2a9e14520c38a","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -20,6 +20,7 @@\n     <SyncopeConf confKey=\"email.schema\" confValue=\"email\"/>\n     <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n     <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"MD5\"/>\n+    <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n \n     <!-- sample policies -->\n     <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22/%3E%0A%3C/java%3E+%0A\"/>\n@@ -487,6 +488,9 @@\n     <Entitlement name=\"NOTIFICATION_READ\"/>\n     <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n     <Entitlement name=\"NOTIFICATION_DELETE\"/>\n+    <Entitlement name=\"USER_REQUEST_LIST\"/>\n+    <Entitlement name=\"USER_REQUEST_READ\"/>\n+    <Entitlement name=\"USER_REQUEST_DELETE\"/>\n     <Entitlement name=\"ROLE_1\"/>\n     <Entitlement name=\"ROLE_2\"/>\n     <Entitlement name=\"ROLE_3\"/>"},{"sha":"5e4192e9c173a06a6287f4e5cbb07766606ee3ea","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c60fd59463cbd1a606bccba0cb7431ab356ceada/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c60fd59463cbd1a606bccba0cb7431ab356ceada/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=c60fd59463cbd1a606bccba0cb7431ab356ceada","patch":"@@ -103,7 +103,7 @@\n \n         <wicket.version>1.5.2</wicket.version>\n \n-        <groovy.version>1.8.3</groovy.version>\n+        <groovy.version>1.8.4</groovy.version>\n \n         <h2.version>1.3.160</h2.version>\n "}]}