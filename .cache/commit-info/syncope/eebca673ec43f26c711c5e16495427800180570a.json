{"sha":"eebca673ec43f26c711c5e16495427800180570a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVlYmNhNjczZWM0M2YyNmM3MTFjNWUxNjQ5NTQyNzgwMDE4MDU3MGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-18T10:20:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-18T10:22:30Z"},"message":"[SYNCOPE-1164] Realm provisioning now features complete mapping, as Anys","tree":{"sha":"ff361dfcd1863512faad92a0ffd1f8f8e1d35fe0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ff361dfcd1863512faad92a0ffd1f8f8e1d35fe0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/eebca673ec43f26c711c5e16495427800180570a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eebca673ec43f26c711c5e16495427800180570a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eebca673ec43f26c711c5e16495427800180570a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eebca673ec43f26c711c5e16495427800180570a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3faef350fd2d9fdaf3d20ab6bd73ce6b83e4c695","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3faef350fd2d9fdaf3d20ab6bd73ce6b83e4c695","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3faef350fd2d9fdaf3d20ab6bd73ce6b83e4c695"}],"stats":{"total":3874,"additions":2282,"deletions":1592},"files":[{"sha":"7df6fb7257e289c823842a4233ec045fe466aff7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/Info.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -131,7 +131,7 @@ public void logicActions() {\n \n     public void mappingItemTransformers() {\n         try {\n-            infoResultManager.printMappingItemTransformers(platformInfo.getMappingItemTransformers());\n+            infoResultManager.printMappingItemTransformers(platformInfo.getItemTransformers());\n         } catch (final Exception ex) {\n             LOG.error(\"Information error\", ex);\n             infoResultManager.genericError(ex.getMessage());"},{"sha":"7e57e016df8b263fd342ccd7422c75eaed5dfe81","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceResultManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -74,8 +74,8 @@ private void printMapping(final MappingTO mappingTO) {\n         printMappingItem(mappingTO.getItems());\n     }\n \n-    private void printMappingItem(final List<MappingItemTO> mappingItemTOs) {\n-        for (final MappingItemTO mappingItemTO : mappingItemTOs) {\n+    private void printMappingItem(final List<ItemTO> mappingItemTOs) {\n+        for (final ItemTO mappingItemTO : mappingItemTOs) {\n             System.out.println(\"             mapping key: \" + mappingItemTO.getKey());\n             System.out.println(\"             internal attribute name: \" + mappingItemTO.getIntAttrName());\n             System.out.println(\"             external attribute name: \" + mappingItemTO.getExtAttrName());\n@@ -85,7 +85,7 @@ private void printMappingItem(final List<MappingItemTO> mappingItemTOs) {\n             System.out.println(\"             JEXL pull transformer: \"\n                     + mappingItemTO.getPullJEXLTransformer());\n             System.out.println(\"             transformers classes: \"\n-                    + mappingItemTO.getMappingItemTransformerClassNames());\n+                    + mappingItemTO.getTransformerClassNames());\n             System.out.println(\"             purpose: \" + mappingItemTO.getPurpose());\n             System.out.println(\"             connector object key: \" + mappingItemTO.isConnObjectKey());\n             System.out.println(\"             password: \" + mappingItemTO.isPassword());"},{"sha":"de3ceb758409e5d9076a6926c867fdce815ea0f3","filename":"client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -171,11 +171,11 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                             for (T bean : items) {\n                                 final StatusBean sb = StatusBean.class.cast(bean);\n                                 final List<StatusBean> sblist;\n-                                if (beans.containsKey(sb.getAnyKey())) {\n-                                    sblist = beans.get(sb.getAnyKey());\n+                                if (beans.containsKey(sb.getKey())) {\n+                                    sblist = beans.get(sb.getKey());\n                                 } else {\n                                     sblist = new ArrayList<>();\n-                                    beans.put(sb.getAnyKey(), sblist);\n+                                    beans.put(sb.getKey(), sblist);\n                                 }\n                                 sblist.add(sb);\n                             }"},{"sha":"c8bba79105780829b5bf4436829f36286f97bd94","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusBean.java","status":"modified","additions":19,"deletions":12,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -25,17 +25,18 @@\n import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n public class StatusBean implements Serializable {\n \n     private static final long serialVersionUID = -5207260204921071129L;\n \n-    private final String anyKey;\n+    private final String key;\n \n-    private final String anyName;\n+    private final String name;\n \n-    private final String resourceName;\n+    private final String resource;\n \n     private String connObjectLink;\n \n@@ -44,11 +45,17 @@ public class StatusBean implements Serializable {\n     private boolean linked = true;\n \n     public StatusBean(final AnyTO any, final String resourceName) {\n-        this.anyKey = any.getKey();\n-        this.anyName = any instanceof UserTO\n+        this.key = any.getKey();\n+        this.name = any instanceof UserTO\n                 ? ((UserTO) any).getUsername()\n                 : any instanceof GroupTO ? ((GroupTO) any).getName() : String.valueOf(any.getKey());\n-        this.resourceName = resourceName;\n+        this.resource = resourceName;\n+    }\n+\n+    public StatusBean(final RealmTO realm, final String resourceName) {\n+        this.key = realm.getKey();\n+        this.name = realm.getFullPath();\n+        this.resource = resourceName;\n     }\n \n     public String getConnObjectLink() {\n@@ -59,8 +66,8 @@ public void setConnObjectLink(final String connObjectLink) {\n         this.connObjectLink = connObjectLink;\n     }\n \n-    public String getResourceName() {\n-        return resourceName;\n+    public String getResource() {\n+        return resource;\n     }\n \n     public Status getStatus() {\n@@ -71,12 +78,12 @@ public void setStatus(final Status status) {\n         this.status = status;\n     }\n \n-    public String getAnyKey() {\n-        return anyKey;\n+    public String getKey() {\n+        return key;\n     }\n \n-    public String getAnyName() {\n-        return anyName;\n+    public String getName() {\n+        return name;\n     }\n \n     public boolean isLinked() {"},{"sha":"8a9aa092f21111037ec0dd516b80daedabf56e61","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"modified","additions":32,"deletions":6,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -88,15 +89,40 @@ public StatusBean getStatusBean(\n             final AnyTO anyTO,\n             final String resourceName,\n             final ConnObjectTO objectTO,\n-            final boolean isGroup) {\n+            final boolean notUser) {\n \n         final StatusBean statusBean = new StatusBean(anyTO, resourceName);\n \n         if (objectTO != null) {\n             final Boolean enabled = isEnabled(objectTO);\n \n             final Status status = enabled == null\n-                    ? (isGroup ? Status.ACTIVE : Status.UNDEFINED)\n+                    ? (notUser ? Status.ACTIVE : Status.UNDEFINED)\n+                    : enabled\n+                            ? Status.ACTIVE\n+                            : Status.SUSPENDED;\n+\n+            String connObjectLink = getConnObjectLink(objectTO);\n+\n+            statusBean.setStatus(status);\n+            statusBean.setConnObjectLink(connObjectLink);\n+        }\n+\n+        return statusBean;\n+    }\n+\n+    public StatusBean getStatusBean(\n+            final RealmTO anyTO,\n+            final String resourceName,\n+            final ConnObjectTO objectTO) {\n+\n+        final StatusBean statusBean = new StatusBean(anyTO, resourceName);\n+\n+        if (objectTO != null) {\n+            final Boolean enabled = isEnabled(objectTO);\n+\n+            final Status status = enabled == null\n+                    ? Status.ACTIVE\n                     : enabled\n                             ? Status.ACTIVE\n                             : Status.SUSPENDED;\n@@ -129,10 +155,10 @@ public static PasswordPatch buildPasswordPatch(final String password, final Coll\n         builder.value(password);\n \n         for (StatusBean status : statuses) {\n-            if (Constants.SYNCOPE.equalsIgnoreCase(status.getResourceName())) {\n+            if (Constants.SYNCOPE.equalsIgnoreCase(status.getResource())) {\n                 builder.onSyncope(true);\n             } else {\n-                builder.resource(status.getResourceName());\n+                builder.resource(status.getResource());\n             }\n         }\n         return builder.build();\n@@ -150,10 +176,10 @@ public static StatusPatch buildStatusPatch(final Collection<StatusBean> statuses\n             if (enable == null\n                     || (enable && !status.getStatus().isActive()) || (!enable && status.getStatus().isActive())) {\n \n-                if (\"syncope\".equalsIgnoreCase(status.getResourceName())) {\n+                if (\"syncope\".equalsIgnoreCase(status.getResource())) {\n                     statusPatch.setOnSyncope(true);\n                 } else {\n-                    statusPatch.getResources().add(status.getResourceName());\n+                    statusPatch.getResources().add(status.getResource());\n                 }\n \n             }"},{"sha":"d29ce1aff534d54e8f36674e35f6b8ddc4b41746","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjects.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -48,16 +50,17 @@ public class ConnObjects extends Panel implements ModalPanel {\n     public ConnObjects(final ResourceTO resource, final PageReference pageRef) {\n         super(BaseModal.CONTENT_ID);\n \n-        List<String> availableAnyTypes = CollectionUtils.collect(resource.getProvisions(),\n-                new Transformer<ProvisionTO, String>() {\n+        List<String> availableAnyTypes = CollectionUtils.collect(\n+                resource.getProvisions(), new Transformer<ProvisionTO, String>() {\n \n             @Override\n             public String transform(final ProvisionTO provision) {\n                 return provision.getAnyType();\n             }\n         }, new ArrayList<String>());\n+        Collections.sort(availableAnyTypes, new AnyTypeRestClient.AnyTypeKeyComparator());\n         if (resource.getOrgUnit() != null) {\n-            availableAnyTypes.add(SyncopeConstants.REALM_ANYTYPE);\n+            availableAnyTypes.add(0, SyncopeConstants.REALM_ANYTYPE);\n         }\n \n         anyTypes = new AjaxDropDownChoicePanel<>(\"anyTypes\", \"anyTypes\", new Model<String>());"},{"sha":"e028cc341318ae16496f3613275619c4dba6dc03","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -241,7 +241,7 @@ public Builder(final Class<T> reference, final PageReference pageRef) {\n             super(pageRef);\n             this.reference = reference;\n             this.items = null;\n-            this.actions = new ActionsPanel<T>(\"actions\", null);\n+            this.actions = new ActionsPanel<>(\"actions\", null);\n         }\n \n         public Builder<T> setModel(final IModel<? extends Collection<T>> model) {\n@@ -376,7 +376,7 @@ protected WizardMgtPanel<T> newInstance(final String id, final boolean wizardInM\n             return new ListViewPanel<T>(\n                     id, items, reference, includes, actions, check, reuseItem, wizardInModal, model) {\n \n-                private static final long serialVersionUID = 1L;\n+                private static final long serialVersionUID = -1715389337530657988L;\n \n                 @Override\n                 protected Component getValueComponent(final String key, final T bean) {"},{"sha":"574939aa15cc1af0a302492520969eed0ec9d288","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"modified","additions":21,"deletions":8,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.console.panels;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n@@ -27,6 +28,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n \n@@ -47,16 +49,27 @@ public ProvisionAuxClassesPanel(final String id, final ProvisionTO provisionTO)\n     protected void onBeforeRender() {\n         super.onBeforeRender();\n \n-        AnyTypeTO anyType = new AnyTypeRestClient().read(provisionTO.getAnyType());\n-        List<String> choices = new ArrayList<>();\n-        for (AnyTypeClassTO aux : new AnyTypeClassRestClient().list()) {\n-            if (!anyType.getClasses().contains(aux.getKey())) {\n-                choices.add(aux.getKey());\n+        IModel<List<String>> model;\n+        List<String> choices;\n+        if (provisionTO == null) {\n+            model = new ListModel<>(Collections.<String>emptyList());\n+            choices = Collections.emptyList();\n+        } else {\n+            model = new PropertyModel<>(provisionTO, \"auxClasses\");\n+\n+            AnyTypeTO anyType = new AnyTypeRestClient().read(provisionTO.getAnyType());\n+            choices = new ArrayList<>();\n+            for (AnyTypeClassTO aux : new AnyTypeClassRestClient().list()) {\n+                if (!anyType.getClasses().contains(aux.getKey())) {\n+                    choices.add(aux.getKey());\n+                }\n             }\n         }\n-        addOrReplace(new AjaxPalettePanel.Builder<String>().build(\"auxClasses\",\n-                new PropertyModel<List<String>>(provisionTO, \"auxClasses\"),\n-                new ListModel<>(choices)).hideLabel().setOutputMarkupId(true));\n+        addOrReplace(\n+                new AjaxPalettePanel.Builder<String>().build(\"auxClasses\", model, new ListModel<>(choices)).\n+                        hideLabel().\n+                        setOutputMarkupId(true).\n+                        setEnabled(provisionTO != null));\n     }\n \n }"},{"sha":"1386e62b15ba35a2a146687bc1117dd851100a83","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n@@ -188,8 +187,4 @@ public BulkActionResult assign(final String etag, final String key, final List<S\n         }\n         return result;\n     }\n-\n-    public BulkActionResult bulkAction(final BulkAction action) {\n-        return getService(getAnyServiceClass()).bulk(action).readEntity(BulkActionResult.class);\n-    }\n }"},{"sha":"fc1e0045bedd2b21361fe13b341f838c7d6c9826","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -24,6 +24,7 @@\n import java.util.List;\n import org.apache.commons.collections4.ComparatorUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n@@ -103,6 +104,12 @@ public static class AnyTypeKeyComparator implements Comparator<String>, Serializ\n \n         @Override\n         public int compare(final String o1, final String o2) {\n+            if (SyncopeConstants.REALM_ANYTYPE.equals(o1)) {\n+                return -1;\n+            }\n+            if (SyncopeConstants.REALM_ANYTYPE.equals(o2)) {\n+                return 1;\n+            }\n             if (AnyTypeKind.USER.name().equals(o1)) {\n                 return -1;\n             }"},{"sha":"6fcc84b2f9fcdd3e0763cee2dfa5d4ed4dac2148","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -121,7 +121,7 @@ public void populateItem(\n                     final String componentId,\n                     final IModel<StatusBean> model) {\n \n-                cellItem.add(new Label(componentId, model.getObject().getResourceName()) {\n+                cellItem.add(new Label(componentId, model.getObject().getResource()) {\n \n                     private static final long serialVersionUID = 8432079838783825801L;\n \n@@ -171,14 +171,14 @@ public ActionsPanel<StatusBean> getActions(final IModel<StatusBean> model) {\n             @Override\n             protected boolean statusCondition(final StatusBean bean) {\n                 return bean != null && bean.getConnObjectLink() != null\n-                        && !bean.getResourceName().equalsIgnoreCase(Constants.SYNCOPE);\n+                        && !bean.getResource().equalsIgnoreCase(Constants.SYNCOPE);\n             }\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n-                multiLevelPanelRef.next(bean.getResourceName(),\n+                multiLevelPanelRef.next(bean.getResource(),\n                         new ConnObjectDetails(resourceRestClient.readConnObject(\n-                                bean.getResourceName(), anyTO.getType(), anyTO.getKey())), target);\n+                                bean.getResource(), anyTO.getType(), anyTO.getKey())), target);\n                 target.add(multiLevelPanelRef);\n                 AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n             }"},{"sha":"336f4d1360c8b0d2890493a6daca0d5b57d74148","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ChangePasswordModal.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -80,10 +80,10 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 final List<String> resources = new ArrayList<String>();\n                 boolean isOnSyncope = false;\n                 for (StatusBean sb : statusModel.getObject()) {\n-                    if (sb.getResourceName().equals(Constants.SYNCOPE)) {\n+                    if (sb.getResource().equals(Constants.SYNCOPE)) {\n                         isOnSyncope = true;\n                     } else {\n-                        resources.add(sb.getResourceName());\n+                        resources.add(sb.getResource());\n                     }\n                 }\n "},{"sha":"2844a74e5cdcbcaf9857546d857e1a51a43b644c","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -145,7 +146,7 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n \n     @Override\n     protected ResourceStatusDataProvider dataProvider() {\n-        return new ResourceStatusDataProvider(type, resourceTO.getKey(), rows, \"/\");\n+        return new ResourceStatusDataProvider(type, resourceTO.getKey(), rows, SyncopeConstants.ROOT_REALM);\n     }\n \n     @Override"},{"sha":"960bd12047ffecda3171db8e0c46b285cd55f736","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java","status":"modified","additions":18,"deletions":10,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.client.console.status;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n@@ -28,11 +32,12 @@\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n \n public class ResourceStatusModal extends StatusModal<ResourceTO> {\n@@ -44,23 +49,26 @@ public class ResourceStatusModal extends StatusModal<ResourceTO> {\n     public ResourceStatusModal(\n             final BaseModal<?> baseModal,\n             final PageReference pageReference,\n-            final ResourceTO resourceTO) {\n+            final ResourceTO resource) {\n \n-        super(baseModal, pageReference, resourceTO, null, false);\n+        super(baseModal, pageReference, resource, null, false);\n \n-        final LoadableDetachableModel<List<String>> types = new LoadableDetachableModel<List<String>>() {\n-\n-            private static final long serialVersionUID = 5275935387613157437L;\n+        List<String> availableAnyTypes = CollectionUtils.collect(\n+                resource.getProvisions(), new Transformer<ProvisionTO, String>() {\n \n             @Override\n-            protected List<String> load() {\n-                return new AnyTypeRestClient().list();\n+            public String transform(final ProvisionTO provision) {\n+                return provision.getAnyType();\n             }\n-        };\n+        }, new ArrayList<String>());\n+        Collections.sort(availableAnyTypes, new AnyTypeRestClient.AnyTypeKeyComparator());\n+        if (resource.getOrgUnit() != null) {\n+            availableAnyTypes.add(0, SyncopeConstants.REALM_ANYTYPE);\n+        }\n \n         AjaxDropDownChoicePanel<String> anyTypes =\n                 new AjaxDropDownChoicePanel<>(\"anyTypes\", \"anyTypes\", typeModel, false);\n-        anyTypes.setChoices(types);\n+        anyTypes.setChoices(availableAnyTypes);\n         anyTypes.hideLabel();\n         add(anyTypes);\n "},{"sha":"fb8ab83c25115ca39e051f0ffc05cc71976b2737","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -99,7 +99,7 @@ public void toggleWithContent(\n         } else if (modelObject instanceof EntityTO) {\n             header = ((EntityTO) modelObject).getKey();\n         } else if (modelObject instanceof StatusBean) {\n-            header = ((StatusBean) modelObject).getResourceName();\n+            header = ((StatusBean) modelObject).getResource();\n         } else if (modelObject instanceof PolicyRuleWrapper) {\n             header = ((PolicyRuleWrapper) modelObject).getName();\n         } else if (modelObject instanceof PolicyRuleWrapper) {"},{"sha":"9aa41427c7d2f52f5acba6db98f58186d09e195b","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ItemTransformerWidget.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -21,29 +21,29 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.Icon;\n import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesomeIconTypeBuilder;\n import java.util.List;\n-import org.apache.syncope.client.console.wizards.resources.MappingItemTransformersTogglePanel;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.markup.html.link.AbstractLink;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n \n-public class MappingItemTransformerWidget extends AlertWidget<String> {\n+public class ItemTransformerWidget extends AlertWidget<String> {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n-    private final MappingItemTO mapItem;\n+    private final ItemTO item;\n \n-    private final MappingItemTransformersTogglePanel transformers;\n+    private final ItemTransformersTogglePanel transformers;\n \n-    public MappingItemTransformerWidget(\n+    public ItemTransformerWidget(\n             final String id,\n-            final MappingItemTO mapItem,\n-            final MappingItemTransformersTogglePanel transformers) {\n+            final ItemTO item,\n+            final ItemTransformersTogglePanel transformers) {\n \n         super(id);\n-        this.mapItem = mapItem;\n+        this.item = item;\n         this.transformers = transformers;\n         setOutputMarkupId(true);\n     }\n@@ -56,7 +56,7 @@ protected IModel<List<String>> getLatestAlerts() {\n \n             @Override\n             public List<String> getObject() {\n-                return mapItem.getMappingItemTransformerClassNames();\n+                return item.getTransformerClassNames();\n             }\n         };\n     }\n@@ -69,7 +69,7 @@ protected AbstractLink getEventsLink(final String linkid) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                transformers.setMappingItem(target, MappingItemTransformerWidget.this.mapItem);\n+                transformers.setItem(target, ItemTransformerWidget.this.item);\n                 transformers.toggle(target, true);\n             }\n         };","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/MappingItemTransformerWidget.java"},{"sha":"6c4dd7b8681f5aabf26e17eabd343b658ca006cb","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JEXLTransformerWidget.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJEXLTransformerWidget.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -24,7 +24,7 @@\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.markup.html.link.AbstractLink;\n@@ -35,21 +35,21 @@ public class JEXLTransformerWidget extends AlertWidget<String> {\n \n     private static final long serialVersionUID = 7667120094526529934L;\n \n-    private final MappingItemTO mapItem;\n+    private final ItemTO item;\n \n     private final JEXLTransformersTogglePanel transformers;\n \n     public JEXLTransformerWidget(\n             final String id,\n-            final MappingItemTO mapItem,\n+            final ItemTO item,\n             final JEXLTransformersTogglePanel transformers) {\n \n         super(id);\n         setOutputMarkupId(true);\n \n-        this.mapItem = mapItem;\n+        this.item = item;\n         this.transformers = transformers;\n-        \n+\n         this.latestAlertsList.setVisible(false);\n     }\n \n@@ -62,11 +62,11 @@ protected IModel<List<String>> getLatestAlerts() {\n             @Override\n             public List<String> getObject() {\n                 List<String> result = new ArrayList<>();\n-                if (StringUtils.isNotBlank(mapItem.getPropagationJEXLTransformer())) {\n-                    result.add(mapItem.getPropagationJEXLTransformer());\n+                if (StringUtils.isNotBlank(item.getPropagationJEXLTransformer())) {\n+                    result.add(item.getPropagationJEXLTransformer());\n                 }\n-                if (StringUtils.isNotBlank(mapItem.getPullJEXLTransformer())) {\n-                    result.add(mapItem.getPullJEXLTransformer());\n+                if (StringUtils.isNotBlank(item.getPullJEXLTransformer())) {\n+                    result.add(item.getPullJEXLTransformer());\n                 }\n                 return result;\n             }\n@@ -81,7 +81,7 @@ protected AbstractLink getEventsLink(final String linkid) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                transformers.setMappingItem(target, JEXLTransformerWidget.this.mapItem);\n+                transformers.setItem(target, JEXLTransformerWidget.this.item);\n                 transformers.toggle(target, true);\n             }\n         };"},{"sha":"5532f86f418d632c215b865a94b1190e9fb4a086","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/AbstractMappingPanel.java","status":"modified","additions":30,"deletions":34,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -44,12 +44,12 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MappingPurposePanel;\n import org.apache.syncope.client.console.widgets.JEXLTransformerWidget;\n-import org.apache.syncope.client.console.widgets.MappingItemTransformerWidget;\n+import org.apache.syncope.client.console.widgets.ItemTransformerWidget;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n-import org.apache.syncope.client.console.wizards.resources.MappingItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -120,29 +120,25 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n     /**\n      * All mappings.\n      */\n-    protected final ListView<MappingItemTO> mappings;\n+    protected final ListView<ItemTO> mappings;\n \n     /**\n      * Mapping container.\n      */\n     protected final WebMarkupContainer mappingContainer;\n \n-    protected final IModel<List<MappingItemTO>> model;\n-\n     public AbstractMappingPanel(\n             final String id,\n-            final MappingItemTransformersTogglePanel mapItemTransformers,\n+            final ItemTransformersTogglePanel itemTransformers,\n             final JEXLTransformersTogglePanel jexlTransformers,\n-            final IModel<List<MappingItemTO>> model,\n+            final IModel<List<ItemTO>> model,\n             final boolean addMappingBtnVisible,\n             final boolean hidePurpose,\n             final MappingPurpose defaultPurpose) {\n \n         super(id);\n         setOutputMarkupId(true);\n \n-        this.model = model;\n-\n         mappingContainer = new WebMarkupContainer(\"mappingContainer\");\n         mappingContainer.setOutputMarkupId(true);\n         add(mappingContainer);\n@@ -173,10 +169,10 @@ protected String createRelAttribute() {\n \n         mappingContainer.add(Constants.getJEXLPopover(this, TooltipConfig.Placement.bottom));\n \n-        Collections.sort(model.getObject(), new Comparator<MappingItemTO>() {\n+        Collections.sort(model.getObject(), new Comparator<ItemTO>() {\n \n             @Override\n-            public int compare(final MappingItemTO left, final MappingItemTO right) {\n+            public int compare(final ItemTO left, final ItemTO right) {\n                 int compared;\n                 if (left == null && right == null) {\n                     compared = 0;\n@@ -216,15 +212,15 @@ public int compare(final MappingItemTO left, final MappingItemTO right) {\n             }\n         });\n \n-        mappings = new ListView<MappingItemTO>(\"mappings\", model.getObject()) {\n+        mappings = new ListView<ItemTO>(\"mappings\", model) {\n \n             private static final long serialVersionUID = 4949588177564901031L;\n \n             @Override\n-            protected void populateItem(final ListItem<MappingItemTO> item) {\n-                final MappingItemTO mapItem = item.getModelObject();\n-                if (mapItem.getPurpose() == null) {\n-                    mapItem.setPurpose(defaultPurpose);\n+            protected void populateItem(final ListItem<ItemTO> item) {\n+                final ItemTO itemTO = item.getModelObject();\n+                if (itemTO.getPurpose() == null) {\n+                    itemTO.setPurpose(defaultPurpose);\n                 }\n \n                 //--------------------------------\n@@ -233,7 +229,7 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 AjaxTextFieldPanel intAttrName = new AjaxTextFieldPanel(\n                         \"intAttrName\",\n                         getString(\"intAttrName\"),\n-                        new PropertyModel<String>(mapItem, \"intAttrName\"),\n+                        new PropertyModel<String>(itemTO, \"intAttrName\"),\n                         false);\n                 intAttrName.setChoices(Collections.<String>emptyList());\n                 intAttrName.setRequired(true).hideLabel();\n@@ -246,10 +242,10 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 final AjaxTextFieldPanel extAttrName = new AjaxTextFieldPanel(\n                         \"extAttrName\",\n                         getString(\"extAttrName\"),\n-                        new PropertyModel<String>(mapItem, \"extAttrName\"));\n+                        new PropertyModel<String>(itemTO, \"extAttrName\"));\n                 extAttrName.setChoices(getExtAttrNames().getObject());\n \n-                boolean required = !mapItem.isPassword();\n+                boolean required = !itemTO.isPassword();\n                 extAttrName.setRequired(required).hideLabel();\n                 extAttrName.setEnabled(required);\n                 item.add(extAttrName);\n@@ -259,14 +255,14 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 // JEXL transformers\n                 // -------------------------------\n                 item.add(new JEXLTransformerWidget(\n-                        \"jexlTransformers\", mapItem, jexlTransformers).setRenderBodyOnly(true));\n+                        \"jexlTransformers\", itemTO, jexlTransformers).setRenderBodyOnly(true));\n                 // -------------------------------\n \n                 //--------------------------------\n                 // Mapping item transformers\n                 // -------------------------------\n-                item.add(new MappingItemTransformerWidget(\n-                        \"mappingItemTransformers\", mapItem, mapItemTransformers).setRenderBodyOnly(true));\n+                item.add(new ItemTransformerWidget(\n+                        \"itemTransformers\", itemTO, itemTransformers).setRenderBodyOnly(true));\n                 // -------------------------------\n \n                 //--------------------------------\n@@ -275,10 +271,10 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 final AjaxTextFieldPanel mandatory = new AjaxTextFieldPanel(\n                         \"mandatoryCondition\",\n                         new ResourceModel(\"mandatoryCondition\", \"mandatoryCondition\").getObject(),\n-                        new PropertyModel<String>(mapItem, \"mandatoryCondition\"));\n+                        new PropertyModel<String>(itemTO, \"mandatoryCondition\"));\n                 mandatory.hideLabel();\n                 mandatory.setChoices(Arrays.asList(new String[] { \"true\", \"false\" }));\n-                mandatory.setEnabled(!mapItem.isConnObjectKey());\n+                mandatory.setEnabled(!itemTO.isConnObjectKey());\n                 item.add(mandatory);\n                 // -------------------------------\n \n@@ -288,7 +284,7 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 final AjaxCheckBoxPanel connObjectKey = new AjaxCheckBoxPanel(\n                         \"connObjectKey\",\n                         new ResourceModel(\"connObjectKey\", \"connObjectKey\").getObject(),\n-                        new PropertyModel<Boolean>(mapItem, \"connObjectKey\"), false);\n+                        new PropertyModel<Boolean>(itemTO, \"connObjectKey\"), false);\n                 connObjectKey.hideLabel();\n                 item.add(connObjectKey);\n                 // -------------------------------\n@@ -299,7 +295,7 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 final AjaxCheckBoxPanel password = new AjaxCheckBoxPanel(\n                         \"password\",\n                         new ResourceModel(\"password\", \"password\").getObject(),\n-                        new PropertyModel<Boolean>(mapItem, \"password\"), false);\n+                        new PropertyModel<Boolean>(itemTO, \"password\"), false);\n                 item.add(password.hideLabel());\n                 // -------------------------------\n \n@@ -310,7 +306,7 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                 purpose.setOutputMarkupId(true);\n \n                 final MappingPurposePanel purposeActions = new MappingPurposePanel(\n-                        \"purposeActions\", new PropertyModel<MappingPurpose>(mapItem, \"purpose\"), purpose);\n+                        \"purposeActions\", new PropertyModel<MappingPurpose>(itemTO, \"purpose\"), purpose);\n                 purpose.add(purposeActions.setRenderBodyOnly(true));\n                 item.add(purpose);\n                 // -------------------------------\n@@ -327,7 +323,7 @@ protected void populateItem(final ListItem<MappingItemTO> item) {\n                     public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         int index = -1;\n                         for (int i = 0; i < model.getObject().size() && index == -1; i++) {\n-                            if (mapItem.equals(model.getObject().get(i))) {\n+                            if (itemTO.equals(model.getObject().get(i))) {\n                                 index = i;\n                             }\n                         }\n@@ -358,11 +354,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n                         if (connObjectKey.getModelObject()) {\n-                            mapItem.setMandatoryCondition(\"true\");\n+                            itemTO.setMandatoryCondition(\"true\");\n                             mandatory.setModelObject(\"true\");\n                             mandatory.setEnabled(false);\n                         } else {\n-                            mapItem.setMandatoryCondition(\"false\");\n+                            itemTO.setMandatoryCondition(\"false\");\n                             mandatory.setModelObject(\"false\");\n                             mandatory.setEnabled(true);\n                         }\n@@ -395,11 +391,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n                     // Changes required by clone ....\n                     extAttrName.setEnabled(true);\n-                    if (mapItem.isPassword()) {\n+                    if (itemTO.isPassword()) {\n                         // re-enable if and only if cloned object mapping item was a password\n                         intAttrName.setEnabled(true);\n                     }\n-                    mapItem.setPassword(false);\n+                    itemTO.setPassword(false);\n                 }\n \n                 if (hidePurpose) {\n@@ -417,7 +413,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n-                model.getObject().add(new MappingItemTO());\n+                model.getObject().add(new ItemTO());\n                 target.add(AbstractMappingPanel.this);\n             }\n         };"},{"sha":"565c9852ac54c803a33f72d829b1136752bc15a1","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/StatusPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -121,7 +121,7 @@ private void init(\n         }\n \n         statusBeans.add(syncope);\n-        initialStatusBeanMap.put(syncope.getResourceName(), syncope);\n+        initialStatusBeanMap.put(syncope.getResource(), syncope);\n \n         for (Pair<ConnObjectTO, ConnObjectWrapper> pair : connObjects) {\n             ConnObjectWrapper entry = pair.getRight();\n@@ -164,14 +164,14 @@ protected Component getValueComponent(final String key, final StatusBean bean) {\n             @Override\n             protected boolean statusCondition(final StatusBean bean) {\n                 final Pair<ConnObjectTO, ConnObjectTO> pair\n-                        = getConnObjectTO(bean.getAnyKey(), bean.getResourceName(), connObjects);\n+                        = getConnObjectTO(bean.getKey(), bean.getResource(), connObjects);\n \n                 return pair != null && pair.getRight() != null;\n             }\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n-                mlp.next(bean.getResourceName(), new RemoteAnyPanel(bean, connObjects), target);\n+                mlp.next(bean.getResource(), new RemoteAnyPanel(bean, connObjects), target);\n             }\n         };\n \n@@ -225,7 +225,7 @@ public RemoteAnyPanel(final StatusBean bean, final List<Pair<ConnObjectTO, ConnO\n \n         @Override\n         protected final Pair<ConnObjectTO, ConnObjectTO> getConnObjectTO() {\n-            return StatusPanel.this.getConnObjectTO(bean.getAnyKey(), bean.getResourceName(), connObjects);\n+            return StatusPanel.this.getConnObjectTO(bean.getKey(), bean.getResource(), connObjects);\n         }\n     }\n }"},{"sha":"44be25212ccf488ec42e9c4d5d89c941fa1aa93d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -39,7 +39,7 @@ public class UserWizardBuilder extends AnyWizardBuilder<UserTO> implements UserF\n     private final UserRestClient userRestClient = new UserRestClient();\n \n     /**\n-     * Costructor to be used for templating only.\n+     * Constructor to be used for templating only.\n      *\n      * @param anyTypeClasses any type classes.\n      * @param formLayoutInfo form layout."},{"sha":"6e37955acb4abd4549aa9a8a762545be851c0d80","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.java","status":"renamed","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.TogglePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -37,14 +37,14 @@\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.util.ListModel;\n \n-public class MappingItemTransformersTogglePanel extends TogglePanel<Serializable> {\n+public class ItemTransformersTogglePanel extends TogglePanel<Serializable> {\n \n     private static final long serialVersionUID = -3195479265440591519L;\n \n-    private MappingItemTO mapItem;\n+    private ItemTO item;\n \n-    public MappingItemTransformersTogglePanel(final WebMarkupContainer container, final PageReference pageRef) {\n-        super(\"outer\", \"mappingItemTransformersTogglePanel\", pageRef);\n+    public ItemTransformersTogglePanel(final WebMarkupContainer container, final PageReference pageRef) {\n+        super(\"outer\", \"itemTransformersTogglePanel\", pageRef);\n \n         final LoadableDetachableModel<List<String>> model = new LoadableDetachableModel<List<String>>() {\n \n@@ -53,9 +53,9 @@ public MappingItemTransformersTogglePanel(final WebMarkupContainer container, fi\n             @Override\n             protected List<String> load() {\n                 // [!] this is required to disable changed with close button\n-                return mapItem == null\n+                return item == null\n                         ? Collections.<String>emptyList()\n-                        : new ArrayList<>(mapItem.getMappingItemTransformerClassNames());\n+                        : new ArrayList<>(item.getTransformerClassNames());\n             }\n         };\n \n@@ -89,8 +89,7 @@ public String getObject(final String id, final IModel<? extends List<? extends S\n         }).build(\n                 \"classes\",\n                 model,\n-                new ListModel<>(\n-                        new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getMappingItemTransformers()))).\n+                new ListModel<>(new ArrayList<>(SyncopeConsoleSession.get().getPlatformInfo().getItemTransformers()))).\n                 hideLabel().setEnabled(true).setOutputMarkupId(true));\n \n         form.add(new AjaxSubmitLink(\"submit\", form) {\n@@ -102,19 +101,17 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 toggle(target, false);\n \n                 // [!] this is required to disable changed with close button\n-                mapItem.getMappingItemTransformerClassNames().clear();\n-                mapItem.getMappingItemTransformerClassNames().addAll(model.getObject());\n+                item.getTransformerClassNames().clear();\n+                item.getTransformerClassNames().addAll(model.getObject());\n \n                 target.add(container);\n             }\n \n         });\n     }\n \n-    public MappingItemTransformersTogglePanel setMappingItem(\n-            final AjaxRequestTarget target, final MappingItemTO mapItem) {\n-\n-        this.mapItem = mapItem;\n+    public ItemTransformersTogglePanel setItem(final AjaxRequestTarget target, final ItemTO item) {\n+        this.item = item;\n         setHeader(target, StringUtils.EMPTY);\n         return this;\n     }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/MappingItemTransformersTogglePanel.java"},{"sha":"da3847bf8e034fcbcac93db5c578b35802851725","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/JEXLTransformersTogglePanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FJEXLTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FJEXLTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FJEXLTransformersTogglePanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -22,7 +22,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.panels.TogglePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -69,9 +69,9 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         });\n     }\n \n-    public JEXLTransformersTogglePanel setMappingItem(final AjaxRequestTarget target, final MappingItemTO mapItem) {\n-        this.propagationJEXLTransformer.setNewModel(new PropertyModel<String>(mapItem, \"propagationJEXLTransformer\"));\n-        this.pullJEXLTransformer.setNewModel(new PropertyModel<String>(mapItem, \"pullJEXLTransformer\"));\n+    public JEXLTransformersTogglePanel setItem(final AjaxRequestTarget target, final ItemTO item) {\n+        this.propagationJEXLTransformer.setNewModel(new PropertyModel<String>(item, \"propagationJEXLTransformer\"));\n+        this.pullJEXLTransformer.setNewModel(new PropertyModel<String>(item, \"pullJEXLTransformer\"));\n         setHeader(target, StringUtils.EMPTY);\n         return this;\n     }"},{"sha":"e13d6bbd72a7e0ad99d55fcfb5e1c917a6225469","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":65,"deletions":37,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -52,7 +53,7 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.StringResourceModel;\n \n-public class ProvisionWizardBuilder extends AjaxWizardBuilder<ProvisionTO> {\n+public class ProvisionWizardBuilder extends AjaxWizardBuilder<ResourceProvision> {\n \n     private static final long serialVersionUID = 3739399543837732640L;\n \n@@ -76,13 +77,18 @@ public String transform(final ProvisionTO provisionTO) {\n                 }\n             }, currentlyAdded);\n \n-            return ListUtils.select(new AnyTypeRestClient().list(), new Predicate<String>() {\n+            List<String> result = ListUtils.select(new AnyTypeRestClient().list(), new Predicate<String>() {\n \n                 @Override\n                 public boolean evaluate(final String key) {\n                     return !currentlyAdded.contains(key);\n                 }\n             });\n+            if (resourceTO.getOrgUnit() == null) {\n+                result.add(0, SyncopeConstants.REALM_ANYTYPE);\n+            }\n+\n+            return result;\n         }\n     };\n \n@@ -93,7 +99,7 @@ private final class ObjectType extends WizardStep {\n \n         private static final long serialVersionUID = -1657800545799468278L;\n \n-        ObjectType(final ProvisionTO item) {\n+        ObjectType(final ResourceProvision item) {\n             super(new ResourceModel(\"type.title\", StringUtils.EMPTY),\n                     new ResourceModel(\"type.summary\", StringUtils.EMPTY), new Model<>(item));\n \n@@ -135,14 +141,23 @@ protected void onUpdate(final AjaxRequestTarget target) {\n     /**\n      * AuxClasses definition step.\n      */\n-    private static final class AuxClasses extends WizardStep {\n+    private static final class AuxClasses extends WizardStep implements WizardModel.ICondition {\n \n         private static final long serialVersionUID = 5315236191866427500L;\n \n-        AuxClasses(final ProvisionTO item) {\n+        private final ResourceProvision provision;\n+\n+        AuxClasses(final ResourceProvision item) {\n+            this.provision = item;\n+\n             setTitleModel(new ResourceModel(\"auxClasses.title\"));\n             setSummaryModel(new StringResourceModel(\"auxClasses.summary\", this, new Model<>(item)));\n-            add(new ProvisionAuxClassesPanel(\"auxClasses\", item));\n+            add(new ProvisionAuxClassesPanel(\"auxClasses\", item.getProvisionTO()));\n+        }\n+\n+        @Override\n+        public boolean evaluate() {\n+            return provision.getProvisionTO() != null;\n         }\n     }\n \n@@ -153,7 +168,7 @@ private static final class Mapping extends WizardStep {\n \n         private static final long serialVersionUID = 3454904947720856253L;\n \n-        Mapping(final ProvisionTO item) {\n+        Mapping(final ResourceProvision item) {\n             setTitleModel(Model.of(\"Mapping\"));\n             setSummaryModel(Model.of(StringUtils.EMPTY));\n         }\n@@ -166,7 +181,7 @@ private final class ConnObjectLink extends WizardStep {\n \n         private static final long serialVersionUID = 2359955465172450478L;\n \n-        ConnObjectLink(final ProvisionTO item) {\n+        ConnObjectLink(final ResourceProvision item) {\n             super(new ResourceModel(\"link.title\", StringUtils.EMPTY),\n                     new ResourceModel(\"link.summary\", StringUtils.EMPTY));\n \n@@ -175,7 +190,7 @@ private final class ConnObjectLink extends WizardStep {\n             add(connObjectLinkContainer);\n \n             boolean connObjectLinkEnabled = false;\n-            if (StringUtils.isNotBlank(item.getMapping().getConnObjectLink())) {\n+            if (StringUtils.isNotBlank(item.getConnObjectLink())) {\n                 connObjectLinkEnabled = true;\n             }\n \n@@ -191,8 +206,9 @@ private final class ConnObjectLink extends WizardStep {\n             final AjaxTextFieldPanel connObjectLink = new AjaxTextFieldPanel(\n                     \"connObjectLink\",\n                     new ResourceModel(\"connObjectLink\", \"connObjectLink\").getObject(),\n-                    new PropertyModel<String>(item.getMapping(), \"connObjectLink\"),\n+                    new PropertyModel<String>(item, \"connObjectLink\"),\n                     false);\n+            connObjectLink.enableJexlHelp();\n             connObjectLink.setEnabled(connObjectLinkEnabled);\n             connObjectLinkContainer.add(connObjectLink);\n \n@@ -218,28 +234,27 @@ protected void onUpdate(final AjaxRequestTarget target) {\n      * @param pageRef Caller page reference.\n      */\n     public ProvisionWizardBuilder(final ResourceTO resurceTO, final PageReference pageRef) {\n-        super(new ProvisionTO(), pageRef);\n+        super(new ResourceProvision(), pageRef);\n         this.resourceTO = resurceTO;\n     }\n \n     @Override\n-    protected WizardModel buildModelSteps(final ProvisionTO modelObject, final WizardModel wizardModel) {\n+    protected WizardModel buildModelSteps(final ResourceProvision modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new ObjectType(modelObject));\n         wizardModel.add(new AuxClasses(modelObject));\n \n         Mapping mapping = new Mapping(modelObject);\n         mapping.setOutputMarkupId(true);\n \n-        MappingItemTransformersTogglePanel mapItemTransformers =\n-                new MappingItemTransformersTogglePanel(mapping, pageRef);\n-        addOuterObject(mapItemTransformers);\n+        ItemTransformersTogglePanel itemTransformers = new ItemTransformersTogglePanel(mapping, pageRef);\n+        addOuterObject(itemTransformers);\n         JEXLTransformersTogglePanel jexlTransformers = new JEXLTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(jexlTransformers);\n-        if (modelObject.getMapping() == null) {\n-            modelObject.setMapping(new MappingTO());\n+        if (modelObject.getProvisionTO() != null && modelObject.getProvisionTO().getMapping() == null) {\n+            modelObject.getProvisionTO().setMapping(new MappingTO());\n         }\n         mapping.add(new ResourceMappingPanel(\n-                \"mapping\", resourceTO, modelObject, mapItemTransformers, jexlTransformers));\n+                \"mapping\", resourceTO, modelObject, itemTransformers, jexlTransformers));\n \n         wizardModel.add(mapping);\n \n@@ -248,28 +263,41 @@ protected WizardModel buildModelSteps(final ProvisionTO modelObject, final Wizar\n     }\n \n     @Override\n-    protected Serializable onApplyInternal(final ProvisionTO modelObject) {\n-        final List<ProvisionTO> provisions;\n-        if (modelObject.getKey() == null) {\n-            provisions = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n+    protected Serializable onApplyInternal(final ResourceProvision modelObject) {\n+        if (modelObject.getOrgUnitTO() != null) {\n+            this.resourceTO.setOrgUnit(modelObject.getOrgUnitTO());\n+\n+            this.resourceTO.getOrgUnit().getItems().clear();\n+            this.resourceTO.getOrgUnit().getItems().addAll(modelObject.getItems());\n+        } else if (modelObject.getProvisionTO() != null) {\n+            final List<ProvisionTO> provisions;\n+            if (modelObject.getKey() == null) {\n+                provisions = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n+\n+                    @Override\n+                    public boolean evaluate(final ProvisionTO object) {\n+                        return !modelObject.getAnyType().equals(object.getAnyType());\n+                    }\n+                });\n+            } else {\n+                provisions = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n \n-                @Override\n-                public boolean evaluate(final ProvisionTO object) {\n-                    return !modelObject.getAnyType().equals(object.getAnyType());\n-                }\n-            });\n-        } else {\n-            provisions = ListUtils.select(this.resourceTO.getProvisions(), new Predicate<ProvisionTO>() {\n+                    @Override\n+                    public boolean evaluate(final ProvisionTO object) {\n+                        return !modelObject.getKey().equals(object.getKey());\n+                    }\n+                });\n+            }\n \n-                @Override\n-                public boolean evaluate(final ProvisionTO object) {\n-                    return !modelObject.getKey().equals(object.getKey());\n-                }\n-            });\n+            ProvisionTO provisionTO = modelObject.getProvisionTO();\n+            provisionTO.getMapping().getItems().clear();\n+            provisionTO.getMapping().getItems().addAll(modelObject.getItems());\n+            provisions.add(provisionTO);\n+\n+            this.resourceTO.getProvisions().clear();\n+            this.resourceTO.getProvisions().addAll(provisions);\n         }\n-        provisions.add(modelObject);\n-        this.resourceTO.getProvisions().clear();\n-        this.resourceTO.getProvisions().addAll(provisions);\n+\n         return modelObject;\n     }\n }"},{"sha":"853873e6bdef9457bdb862a1878e60ac1128cc7e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java","status":"modified","additions":40,"deletions":35,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -26,10 +26,10 @@\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AbstractMappingPanel;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n-import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -47,7 +47,7 @@ public class ResourceMappingPanel extends AbstractMappingPanel {\n     /**\n      * External resource provisioning configuration instance to be updated.\n      */\n-    private final ProvisionTO provisionTO;\n+    private final ResourceProvision provision;\n \n     private final LoadableDetachableModel<List<String>> extAttrNames;\n \n@@ -56,28 +56,28 @@ public class ResourceMappingPanel extends AbstractMappingPanel {\n      *\n      * @param id panel id\n      * @param resourceTO external resource to be updated\n-     * @param provisionTO external resource provisioning configuration instance\n-     * @param mapItemTransformers mapping item transformers toggle panel\n+     * @param provision external resource provisioning configuration instance\n+     * @param itemTransformers mapping item transformers toggle panel\n      * @param jexlTransformers JEXL transformers toggle panel\n      */\n     public ResourceMappingPanel(\n             final String id,\n             final ResourceTO resourceTO,\n-            final ProvisionTO provisionTO,\n-            final MappingItemTransformersTogglePanel mapItemTransformers,\n+            final ResourceProvision provision,\n+            final ItemTransformersTogglePanel itemTransformers,\n             final JEXLTransformersTogglePanel jexlTransformers) {\n \n         super(id,\n-                mapItemTransformers,\n+                itemTransformers,\n                 jexlTransformers,\n-                new ListModel<MappingItemTO>(provisionTO.getMapping().getItems()),\n+                new ListModel<ItemTO>(provision.getItems()),\n                 resourceTO.getConnector() != null,\n                 false,\n                 MappingPurpose.BOTH);\n \n         setOutputMarkupId(true);\n \n-        this.provisionTO = provisionTO;\n+        this.provision = provision;\n \n         extAttrNames = new LoadableDetachableModel<List<String>>() {\n \n@@ -86,7 +86,7 @@ public ResourceMappingPanel(\n             @Override\n             protected List<String> load() {\n                 return new ConnectorRestClient().getExtAttrNames(\n-                        provisionTO.getObjectClass(),\n+                        provision.getObjectClass(),\n                         resourceTO.getConnector(),\n                         resourceTO.getConfOverride());\n             }\n@@ -95,7 +95,7 @@ protected List<String> load() {\n \n     @Override\n     protected boolean hidePassword() {\n-        return !AnyTypeKind.USER.name().equals(provisionTO.getAnyType());\n+        return !AnyTypeKind.USER.name().equals(provision.getAnyType());\n     }\n \n     @Override\n@@ -106,41 +106,46 @@ protected IModel<List<String>> getExtAttrNames() {\n     @Override\n     protected void onBeforeRender() {\n         super.onBeforeRender();\n-        passwordLabel.setVisible(AnyTypeKind.USER.name().equals(this.provisionTO.getAnyType()));\n+        passwordLabel.setVisible(AnyTypeKind.USER.name().equals(this.provision.getAnyType()));\n     }\n \n     @Override\n     protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n         toBeUpdated.setRequired(true);\n         toBeUpdated.setEnabled(true);\n \n-        AnyTypeTO anyTypeTO = anyTypeRestClient.read(provisionTO.getAnyType());\n-\n-        List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n-        anyTypeClassTOs.addAll(anyTypeClassRestClient.list(anyTypeTO.getClasses()));\n-        for (String auxClass : provisionTO.getAuxClasses()) {\n-            anyTypeClassTOs.add(anyTypeClassRestClient.read(auxClass));\n-        }\n-\n         Set<String> choices = new HashSet<>();\n+        if (SyncopeConstants.REALM_ANYTYPE.equals(provision.getAnyType())) {\n+            choices.add(\"key\");\n+            choices.add(\"name\");\n+            choices.add(\"fullpath\");\n+        } else {\n+            AnyTypeTO anyTypeTO = anyTypeRestClient.read(provision.getAnyType());\n+\n+            List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n+            anyTypeClassTOs.addAll(anyTypeClassRestClient.list(anyTypeTO.getClasses()));\n+            for (String auxClass : provision.getAuxClasses()) {\n+                anyTypeClassTOs.add(anyTypeClassRestClient.read(auxClass));\n+            }\n \n-        switch (provisionTO.getAnyType()) {\n-            case \"USER\":\n-                choices.addAll(USER_FIELD_NAMES);\n-                break;\n+            switch (provision.getAnyType()) {\n+                case \"USER\":\n+                    choices.addAll(USER_FIELD_NAMES);\n+                    break;\n \n-            case \"GROUP\":\n-                choices.addAll(GROUP_FIELD_NAMES);\n-                break;\n+                case \"GROUP\":\n+                    choices.addAll(GROUP_FIELD_NAMES);\n+                    break;\n \n-            default:\n-                choices.addAll(ANY_OBJECT_FIELD_NAMES);\n-        }\n+                default:\n+                    choices.addAll(ANY_OBJECT_FIELD_NAMES);\n+            }\n \n-        for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n-            choices.addAll(anyTypeClassTO.getPlainSchemas());\n-            choices.addAll(anyTypeClassTO.getDerSchemas());\n-            choices.addAll(anyTypeClassTO.getVirSchemas());\n+            for (AnyTypeClassTO anyTypeClassTO : anyTypeClassTOs) {\n+                choices.addAll(anyTypeClassTO.getPlainSchemas());\n+                choices.addAll(anyTypeClassTO.getDerSchemas());\n+                choices.addAll(anyTypeClassTO.getVirSchemas());\n+            }\n         }\n \n         final List<String> names = new ArrayList<>(choices);"},{"sha":"796fb76364af70c4e9290b7be10a3d8bb88962f8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvision.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvision.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.resources;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.OrgUnitTO;\n+import org.apache.syncope.common.lib.to.ProvisionTO;\n+\n+public class ResourceProvision implements Serializable {\n+\n+    private static final long serialVersionUID = 1103991919577739952L;\n+\n+    private ProvisionTO provisionTO;\n+\n+    private OrgUnitTO orgUnitTO;\n+\n+    private List<ItemTO> items;\n+\n+    public ResourceProvision() {\n+        this.items = new ArrayList<>();\n+    }\n+\n+    public ResourceProvision(final ProvisionTO provisionTO) {\n+        setProvisionTO(provisionTO);\n+    }\n+\n+    public ResourceProvision(final OrgUnitTO orgUnitTO) {\n+        setOrgUnitTO(orgUnitTO);\n+    }\n+\n+    public ProvisionTO getProvisionTO() {\n+        return provisionTO;\n+    }\n+\n+    public final void setProvisionTO(final ProvisionTO provisionTO) {\n+        this.provisionTO = provisionTO;\n+        this.orgUnitTO = null;\n+\n+        if (this.items == null) {\n+            this.items = new ArrayList<>();\n+        } else {\n+            this.items.clear();\n+        }\n+        if (provisionTO.getMapping() != null) {\n+            this.items.addAll(provisionTO.getMapping().getItems());\n+        }\n+    }\n+\n+    public OrgUnitTO getOrgUnitTO() {\n+        return orgUnitTO;\n+    }\n+\n+    public final void setOrgUnitTO(final OrgUnitTO orgUnitTO) {\n+        this.orgUnitTO = orgUnitTO;\n+        this.provisionTO = null;\n+\n+        if (this.items == null) {\n+            this.items = new ArrayList<>();\n+        } else {\n+            this.items.clear();\n+        }\n+        this.items.addAll(orgUnitTO.getItems());\n+    }\n+\n+    public String getKey() {\n+        return provisionTO == null\n+                ? orgUnitTO == null\n+                        ? null\n+                        : orgUnitTO.getKey()\n+                : provisionTO.getKey();\n+    }\n+\n+    public String getAnyType() {\n+        return provisionTO == null\n+                ? orgUnitTO == null\n+                        ? null\n+                        : SyncopeConstants.REALM_ANYTYPE : provisionTO.getAnyType();\n+    }\n+\n+    public void setAnyType(final String anyType) {\n+        if (SyncopeConstants.REALM_ANYTYPE.equals(anyType)) {\n+            setOrgUnitTO(new OrgUnitTO());\n+        } else {\n+            setProvisionTO(new ProvisionTO());\n+            getProvisionTO().setAnyType(anyType);\n+            getProvisionTO().setMapping(new MappingTO());\n+        }\n+    }\n+\n+    public String getObjectClass() {\n+        return provisionTO == null\n+                ? orgUnitTO == null\n+                        ? null\n+                        : orgUnitTO.getObjectClass() : provisionTO.getObjectClass();\n+    }\n+\n+    public void setObjectClass(final String objectClass) {\n+        if (provisionTO == null) {\n+            orgUnitTO.setObjectClass(objectClass);\n+        } else {\n+            provisionTO.setObjectClass(objectClass);\n+        }\n+    }\n+\n+    public List<String> getAuxClasses() {\n+        return provisionTO == null ? Collections.<String>emptyList() : provisionTO.getAuxClasses();\n+    }\n+\n+    public String getConnObjectLink() {\n+        return provisionTO == null\n+                ? orgUnitTO == null\n+                        ? null\n+                        : orgUnitTO.getConnObjectLink()\n+                : provisionTO.getMapping().getConnObjectLink();\n+    }\n+\n+    public void setConnObjectLink(final String connObjectLink) {\n+        if (provisionTO == null) {\n+            orgUnitTO.setConnObjectLink(connObjectLink);\n+        } else {\n+            provisionTO.getMapping().setConnObjectLink(connObjectLink);\n+        }\n+    }\n+\n+    public List<ItemTO> getItems() {\n+        return items;\n+    }\n+\n+}"},{"sha":"26ce5d5c3c635c63098e0ff8e30a56009979e9b8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":66,"deletions":181,"changes":247,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -20,14 +20,12 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -36,45 +34,33 @@\n import org.apache.syncope.client.console.panels.ListViewPanel;\n import org.apache.syncope.client.console.panels.ListViewPanel.ListViewReload;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n-import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n-import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.to.OrgUnitTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n-import org.apache.wicket.event.IEvent;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.StringResourceModel;\n \n public class ResourceProvisionPanel extends AbstractModalPanel<Serializable> {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n     private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n \n     private final ResourceTO resourceTO;\n \n-    private Model<OrgUnitTO> baseModel;\n-\n-    private final WebMarkupContainer aboutRealmProvison;\n+    private final List<ResourceProvision> provisions;\n \n     public ResourceProvisionPanel(\n             final BaseModal<Serializable> modal,\n@@ -84,108 +70,25 @@ public ResourceProvisionPanel(\n         super(modal, pageRef);\n         this.resourceTO = resourceTO;\n \n-        baseModel = Model.of(resourceTO.getOrgUnit() == null ? new OrgUnitTO() : resourceTO.getOrgUnit());\n-\n         setOutputMarkupId(true);\n \n-        // ----------------------------------------------------------------------\n-        // Realms provisioning\n-        // ----------------------------------------------------------------------\n-        aboutRealmProvison = new WebMarkupContainer(\"aboutRealmProvison\");\n-        aboutRealmProvison.setOutputMarkupPlaceholderTag(true);\n-        add(aboutRealmProvison);\n-\n-        boolean realmProvisionEnabled = resourceTO.getOrgUnit() != null;\n-\n-        final AjaxCheckBoxPanel enableRealmsProvision = new AjaxCheckBoxPanel(\n-                \"enableRealmsProvision\",\n-                \"enableRealmsProvision\",\n-                Model.of(realmProvisionEnabled),\n-                false);\n-        aboutRealmProvison.add(enableRealmsProvision);\n-        enableRealmsProvision.setIndex(1).setTitle(getString(\"enableRealmsProvision.title\"));\n-\n-        final WebMarkupContainer realmsProvisionContainer = new WebMarkupContainer(\"realmsProvisionContainer\");\n-        realmsProvisionContainer.setOutputMarkupPlaceholderTag(true);\n-        realmsProvisionContainer.setEnabled(realmProvisionEnabled).setVisible(realmProvisionEnabled);\n-        aboutRealmProvison.add(realmsProvisionContainer);\n-\n-        final AjaxTextFieldPanel objectClass = new AjaxTextFieldPanel(\n-                \"objectClass\",\n-                getString(\"objectClass\"),\n-                new PropertyModel<String>(baseModel.getObject(), \"objectClass\"),\n-                false);\n-        realmsProvisionContainer.add(objectClass.addRequiredLabel());\n-\n-        final AjaxTextFieldPanel extAttrName = new AjaxTextFieldPanel(\n-                \"extAttrName\",\n-                getString(\"extAttrName\"),\n-                new PropertyModel<String>(baseModel.getObject(), \"extAttrName\"),\n-                false);\n-        if (resourceTO.getOrgUnit() != null) {\n-            extAttrName.setChoices(connectorRestClient.getExtAttrNames(\n-                    resourceTO.getOrgUnit().getObjectClass(),\n-                    resourceTO.getConnector(),\n-                    resourceTO.getConfOverride()));\n-        }\n-        realmsProvisionContainer.add(extAttrName.addRequiredLabel());\n-\n-        objectClass.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_BLUR) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                extAttrName.setChoices(connectorRestClient.getExtAttrNames(\n-                        objectClass.getModelObject(),\n-                        resourceTO.getConnector(),\n-                        resourceTO.getConfOverride()));\n-                target.focusComponent(extAttrName);\n-            }\n-        });\n-\n-        final AjaxTextFieldPanel connObjectLink = new AjaxTextFieldPanel(\n-                \"connObjectLink\",\n-                new ResourceModel(\"connObjectLink\", \"connObjectLink\").getObject(),\n-                new PropertyModel<String>(baseModel.getObject(), \"connObjectLink\"),\n-                false);\n-        realmsProvisionContainer.add(connObjectLink.addRequiredLabel());\n-\n-        enableRealmsProvision.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                boolean realmProvisionEnabled = enableRealmsProvision.getModelObject();\n-                realmsProvisionContainer.setEnabled(realmProvisionEnabled).setVisible(realmProvisionEnabled);\n-                target.add(realmsProvisionContainer);\n-\n-                if (realmProvisionEnabled) {\n-                    resourceTO.setOrgUnit(baseModel.getObject());\n-                } else {\n-                    resourceTO.setOrgUnit(null);\n-                }\n-\n-            }\n-        });\n-        // ----------------------------------------------------------------------\n-\n         final ProvisionWizardBuilder wizard = new ProvisionWizardBuilder(resourceTO, pageRef);\n \n-        final ListViewPanel.Builder<ProvisionTO> builder = new ListViewPanel.Builder<ProvisionTO>(\n-                ProvisionTO.class, pageRef) {\n+        final ListViewPanel.Builder<ResourceProvision> builder = new ListViewPanel.Builder<ResourceProvision>(\n+                ResourceProvision.class, pageRef) {\n \n             private static final long serialVersionUID = 4907732721283972943L;\n \n             @Override\n-            protected ProvisionTO getActualItem(final ProvisionTO item, final List<ProvisionTO> list) {\n+            protected ResourceProvision getActualItem(\n+                    final ResourceProvision item, final List<ResourceProvision> list) {\n+\n                 return item == null\n                         ? null\n-                        : IteratorUtils.find(list.iterator(), new Predicate<ProvisionTO>() {\n+                        : IteratorUtils.find(list.iterator(), new Predicate<ResourceProvision>() {\n \n                             @Override\n-                            public boolean evaluate(final ProvisionTO in) {\n+                            public boolean evaluate(final ResourceProvision in) {\n                                 return ((item.getKey() == null && in.getKey() == null)\n                                         || (in.getKey() != null && in.getKey().equals(item.getKey())))\n                                         && ((item.getAnyType() == null && in.getAnyType() == null)\n@@ -202,45 +105,46 @@ protected void customActionCallback(final AjaxRequestTarget target) {\n \n             @Override\n             protected void customActionOnCancelCallback(final AjaxRequestTarget target) {\n-                ResourceProvisionPanel.this.aboutRealmProvison.setVisible(true);\n-                target.add(ResourceProvisionPanel.this.aboutRealmProvison);\n-\n                 // change modal footer visibility\n                 send(ResourceProvisionPanel.this, Broadcast.BUBBLE, new BaseModal.ChangeFooterVisibilityEvent(target));\n             }\n \n             @Override\n             protected void customActionOnFinishCallback(final AjaxRequestTarget target) {\n-                ResourceProvisionPanel.this.aboutRealmProvison.setVisible(true);\n-                target.add(ResourceProvisionPanel.this.aboutRealmProvison);\n-\n                 // keep list ordered - SYNCOPE-1154\n-                sortProvisionList();\n+                sortProvisions();\n \n                 // change modal footer visibility\n                 send(ResourceProvisionPanel.this, Broadcast.BUBBLE, new BaseModal.ChangeFooterVisibilityEvent(target));\n             }\n         };\n \n+        provisions = new ArrayList<>();\n+        if (resourceTO.getOrgUnit() != null) {\n+            provisions.add(new ResourceProvision(resourceTO.getOrgUnit()));\n+        }\n+        for (ProvisionTO provision : resourceTO.getProvisions()) {\n+            provisions.add(new ResourceProvision(provision));\n+        }\n         // keep list ordered - SYNCOPE-1154\n-        sortProvisionList();\n+        sortProvisions();\n \n-        builder.setItems(resourceTO.getProvisions());\n+        builder.setItems(provisions);\n         builder.includes(\"anyType\", \"objectClass\", \"auxClasses\");\n         builder.setReuseItem(false);\n \n-        builder.addAction(new ActionLink<ProvisionTO>() {\n+        builder.addAction(new ActionLink<ResourceProvision>() {\n \n             private static final long serialVersionUID = -3722207913631435504L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+            public void onClick(final AjaxRequestTarget target, final ResourceProvision provision) {\n                 try {\n                     send(ResourceProvisionPanel.this, Broadcast.DEPTH,\n-                            new AjaxWizard.NewItemActionEvent<>(provisionTO, 2, target).setResourceModel(\n+                            new AjaxWizard.NewItemActionEvent<>(provision, 2, target).setResourceModel(\n                                     new StringResourceModel(\"inner.provision.mapping\",\n                                             ResourceProvisionPanel.this,\n-                                            Model.of(provisionTO))));\n+                                            Model.of(provision))));\n                 } catch (SyncopeClientException e) {\n                     LOG.error(\"While contacting resource\", e);\n                     SyncopeConsoleSession.get().error(\n@@ -249,105 +153,97 @@ public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionT\n                 }\n             }\n         }, ActionLink.ActionType.MAPPING, StandardEntitlement.RESOURCE_UPDATE).\n-                addAction(new ActionLink<ProvisionTO>() {\n+                addAction(new ActionLink<ResourceProvision>() {\n \n                     private static final long serialVersionUID = -7780999687733432439L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                    public void onClick(final AjaxRequestTarget target, final ResourceProvision provision) {\n                         try {\n-                            resourceRestClient.setLatestSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n+                            resourceRestClient.setLatestSyncToken(resourceTO.getKey(), provision.getAnyType());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (Exception e) {\n                             LOG.error(\"While setting latest sync token for {}/{}\",\n-                                    resourceTO.getKey(), provisionTO.getAnyType(), e);\n+                                    resourceTO.getKey(), provision.getAnyType(), e);\n                             SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n                                     ? e.getClass().getName() : e.getMessage());\n                         }\n                         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                     }\n                 }, ActionLink.ActionType.SET_LATEST_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n-                addAction(new ActionLink<ProvisionTO>() {\n+                addAction(new ActionLink<ResourceProvision>() {\n \n                     private static final long serialVersionUID = -7780999687733432439L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n+                    public void onClick(final AjaxRequestTarget target, final ResourceProvision provision) {\n                         try {\n-                            resourceRestClient.removeSyncToken(resourceTO.getKey(), provisionTO.getAnyType());\n+                            resourceRestClient.removeSyncToken(resourceTO.getKey(), provision.getAnyType());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (Exception e) {\n                             LOG.error(\"While removing sync token for {}/{}\",\n-                                    resourceTO.getKey(), provisionTO.getAnyType(), e);\n+                                    resourceTO.getKey(), provision.getAnyType(), e);\n                             SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n                                     ? e.getClass().getName() : e.getMessage());\n                         }\n                         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                     }\n                 }, ActionLink.ActionType.REMOVE_SYNC_TOKEN, StandardEntitlement.RESOURCE_UPDATE).\n-                addAction(new ActionLink<ProvisionTO>() {\n-\n-                    private static final long serialVersionUID = -3722207913631435534L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        final ProvisionTO clone = SerializationUtils.clone(provisionTO);\n-                        clone.setKey(null);\n-                        clone.setAnyType(null);\n-                        clone.setObjectClass(null);\n-                        send(ResourceProvisionPanel.this, Broadcast.DEPTH,\n-                                new AjaxWizard.NewItemActionEvent<>(clone, target).setResourceModel(\n-                                        new StringResourceModel(\"inner.provision.clone\",\n-                                                ResourceProvisionPanel.this,\n-                                                Model.of(provisionTO))));\n-                    }\n-                }, ActionLink.ActionType.CLONE, StandardEntitlement.RESOURCE_CREATE).\n-                addAction(new ActionLink<ProvisionTO>() {\n+                addAction(new ActionLink<ResourceProvision>() {\n \n                     private static final long serialVersionUID = -3722207913631435544L;\n \n                     @Override\n-                    public void onClick(final AjaxRequestTarget target, final ProvisionTO provisionTO) {\n-                        resourceTO.getProvisions().remove(provisionTO);\n+                    public void onClick(final AjaxRequestTarget target, final ResourceProvision provision) {\n+                        if (provision.getOrgUnitTO() != null) {\n+                            resourceTO.setOrgUnit(null);\n+                        } else if (provision.getProvisionTO() != null) {\n+                            resourceTO.getProvisions().remove(provision.getProvisionTO());\n+                        }\n+                        provisions.remove(provision);\n                         send(ResourceProvisionPanel.this, Broadcast.DEPTH, new ListViewReload<>(target));\n                     }\n-                }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_DELETE);\n+                }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_UPDATE);\n \n         builder.addNewItemPanelBuilder(wizard);\n \n-        final WizardMgtPanel<ProvisionTO> list = builder.build(\"provision\");\n+        final WizardMgtPanel<ResourceProvision> list = builder.build(\"provision\");\n         add(list);\n     }\n \n+    private void checkConnObjectKeyCount(final String anyType, final List<ItemTO> items) {\n+        long connObjectKeyCount = IterableUtils.countMatches(items, new Predicate<ItemTO>() {\n+\n+            @Override\n+            public boolean evaluate(final ItemTO item) {\n+                return item.isConnObjectKey();\n+            }\n+        });\n+\n+        if (connObjectKeyCount != 1) {\n+            throw new IllegalArgumentException(anyType + \": \"\n+                    + new StringResourceModel(\"connObjectKeyValidation\", ResourceProvisionPanel.this).getString());\n+        }\n+    }\n+\n     @Override\n     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         try {\n-            final Collection<ProvisionTO> provisions = new ArrayList<>(resourceTO.getProvisions());\n+            if (resourceTO.getOrgUnit() != null) {\n+                checkConnObjectKeyCount(SyncopeConstants.REALM_ANYTYPE, resourceTO.getOrgUnit().getItems());\n+            }\n \n-            for (ProvisionTO provision : provisions) {\n+            for (ProvisionTO provision : new ArrayList<>(resourceTO.getProvisions())) {\n                 if (provision != null) {\n                     if (provision.getMapping() == null || provision.getMapping().getItems().isEmpty()) {\n                         resourceTO.getProvisions().remove(provision);\n                     } else {\n-                        long connObjectKeyCount = IterableUtils.countMatches(\n-                                provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n-\n-                            @Override\n-                            public boolean evaluate(final MappingItemTO item) {\n-                                return item.isConnObjectKey();\n-                            }\n-                        });\n-\n-                        if (connObjectKeyCount != 1) {\n-                            throw new IllegalArgumentException(provision.getAnyType() + \": \"\n-                                    + new StringResourceModel(\"connObjectKeyValidation\", ResourceProvisionPanel.this).\n-                                            getString());\n-                        }\n+                        checkConnObjectKeyCount(provision.getAnyType(), provision.getMapping().getItems());\n                     }\n                 }\n             }\n \n-            new ResourceRestClient().update(resourceTO);\n+            resourceRestClient.update(resourceTO);\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             modal.close(target);\n         } catch (Exception e) {\n@@ -358,24 +254,13 @@ public boolean evaluate(final MappingItemTO item) {\n         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n     }\n \n-    private void sortProvisionList() {\n-        Collections.sort(resourceTO.getProvisions(), new Comparator<ProvisionTO>() {\n+    private void sortProvisions() {\n+        Collections.sort(provisions, new Comparator<ResourceProvision>() {\n \n             @Override\n-            public int compare(final ProvisionTO o1, final ProvisionTO o2) {\n+            public int compare(final ResourceProvision o1, final ResourceProvision o2) {\n                 return new AnyTypeRestClient.AnyTypeKeyComparator().compare(o1.getAnyType(), o2.getAnyType());\n             }\n         });\n     }\n-\n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof AjaxWizard.NewItemActionEvent) {\n-            aboutRealmProvison.setVisible(false);\n-            final AjaxRequestTarget target = ((AjaxWizard.NewItemEvent) event.getPayload()).getTarget();\n-            target.add(aboutRealmProvison);\n-        }\n-\n-        super.onEvent(event);\n-    }\n }"},{"sha":"8763e9af2e8012b11b04a77b2b3c1a21a5eee511","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -575,7 +575,7 @@ div#startAt {\n   z-index: 6000 !important;\n }\n \n-div#mappingItemTransformersTogglePanel {\n+div#itemTransformersTogglePanel {\n   min-width: 1000px;\n }\n \n@@ -994,12 +994,12 @@ div.transformersContainer #body {\n   display: block;\n }\n \n-div.mappingItemTransformersContainer #body select {\n+div.itemTransformersContainer #body select {\n   border: 1px solid #ccc !important;\n   background: rgba(240, 240, 240, 0.95) !important\n }\n \n-div.mappingItemTransformersContainer #body a {\n+div.itemTransformersContainer #body a {\n   color: #ccc !important;\n   cursor: pointer !important;\n }"},{"sha":"5c2d15d2f7251c96e03fe2eb1e1a538fe784e6da","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/ItemTransformerWidget.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/MappingItemTransformerWidget.properties"},{"sha":"8e23aefedf123d8f14644fcd9cb3e44e197f2d66","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/ItemTransformerWidget_it.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_it.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/MappingItemTransformerWidget_it.properties"},{"sha":"0fd94d7f91062b3d6e657ae967b2c8376c5c28c7","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/ItemTransformerWidget_pt_BR.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_pt_BR.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/MappingItemTransformerWidget_pt_BR.properties"},{"sha":"e79d679914692b9cbcd91a8e505f3cfe6b2dec71","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/ItemTransformerWidget_ru.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FItemTransformerWidget_ru.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/MappingItemTransformerWidget_ru.properties"},{"sha":"57339ddacfbf38e216896a436ef85a6730dbcad3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/AbstractMappingPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAbstractMappingPanel.html?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -57,7 +57,7 @@\n               </td>\n               <td>\n                 <div class=\"alert-widget dropdown tasks-menu\">\n-                  <span wicket:id=\"mappingItemTransformers\">[Mapping Item Transformers]</span>\n+                  <span wicket:id=\"itemTransformers\">[Mapping Item Transformers]</span>\n                 </div>\n               </td>\n               <td>"},{"sha":"01ef6530476ece499289c4ec1462b0799373d704","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.html","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.html?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,7 +18,7 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:extend>\n-    <div id=\"mappingItemTransformersContainer\" class=\"transformersContainer\">\n+    <div id=\"itemTransformersContainer\" class=\"transformersContainer\">\n       <form wicket:id=\"form\">\n         <div id=\"body\">\n           <span wicket:id=\"classes\"/>","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/MappingItemTransformersTogglePanel.html"},{"sha":"06d3702737b31e684e10ad75482925825905a3b5","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/MappingItemTransformersTogglePanel.properties"},{"sha":"9e80b996f42ff36fd386b0734b1b43da2e4ab1a3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel_it.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_it.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/MappingItemTransformersTogglePanel_it.properties"},{"sha":"d5a72dc1e4cb63f9366497b0931652b87f92836d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel_pt_BR.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_pt_BR.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/MappingItemTransformersTogglePanel_pt_BR.properties"},{"sha":"5f823ee837781b9f495a8a2e4c8e8cc65f2fd579","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel_ru.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel_ru.properties?ref=eebca673ec43f26c711c5e16495427800180570a","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/MappingItemTransformersTogglePanel_ru.properties"},{"sha":"ef243a833ec1a2b850cff198bdc5227b7877264b","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.html","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.html?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,14 +18,6 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n-    <div wicket:id=\"aboutRealmProvison\" class=\"col-xs-12 panel-body\">\n-      <span wicket:id=\"enableRealmsProvision\"/>\n-      <div wicket:id=\"realmsProvisionContainer\">\n-        <span wicket:id=\"objectClass\"/>\n-        <span wicket:id=\"extAttrName\"/>\n-        <span wicket:id=\"connObjectLink\"/>\n-      </div>\n-    </div>\n     <span wicket:id=\"provision\">[PROVISION]</span>\n   </wicket:panel>\n </html>"},{"sha":"47bfff5bf8340647c9a6e104dece353ec9d44886","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.properties?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,13 +18,8 @@ anyType=Object Type\n objectClass= Object Class\n auxClasses=Auxiliary Classes\n \n-extAttrName=External attribute\n-\n connObjectKeyValidation=There must be exactly one Remote Key\n propagationMode=Propagation mode\n-connObjectLink=Object Link\n enable=Enable\n inner.provision.mapping=${anyType} provision\n inner.provision.clone=Clone provision '${key}'\n-enableRealmsProvision=Enable realm provisioning\n-enableRealmsProvision.title=Enable the possibility to provision realms towards external resource"},{"sha":"da47b7f66ac2bbe3d5950b5cffec4e8daea50543","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel_it.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_it.properties?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,13 +18,8 @@ anyType=Tipo oggetto\n objectClass=Classe\n auxClasses=Classi Ausiliarie\n \n-extAttrName=Attributo esterno\n-\n connObjectKeyValidation=Deve essere definito esattamente una Chiave remota\n propagationMode=Modalit\\u00e0 di propagazione\n-connObjectLink=ID Remoto\n enable=Abilita\n inner.provision.mapping=Provision ${anyType}\n inner.provision.clone=Clona il provision '${key}'\n-enableRealmsProvision=Abilita il provisioning dei realm\n-enableRealmsProvision.title=Abilita la possibilit\\u00e0 di effettuare il provisioning dei realm verso la risorsa esterna"},{"sha":"9f49625384c46aaa1ef1f062e801704812f25782","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel_pt_BR.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_pt_BR.properties?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,13 +18,8 @@ anyType=Object Type\n objectClass=Classe\n auxClasses=Classes Auxiliares\n \n-extAttrName=Atributo Externo\n-\n connObjectKeyValidation=Precisa ser exatamente um Remote Key\n propagationMode=Modo de propaga\\u00e7\\u00e3o\n-connObjectLink=Remote ID\n enable=Habilitado\n inner.provision.mapping=${anyType} provision\n inner.provision.clone=Clone provision '${key}'\n-enableRealmsProvision=Enable realm provisioning\n-enableRealmsProvision.title=Enable the possibility to provision realms towards external resource"},{"sha":"919bd00b255ad22c16abe90680b16407f81efb75","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel_ru.properties","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel_ru.properties?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,13 +18,8 @@ anyType=\\u0422\\u0438\\u043f \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430\n objectClass=\\u041a\\u043b\\u0430\\u0441\\u0441 \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u0430\n auxClasses=\\u0434\\u0438\\u0441\\u0442\\u0430\\u043d\\u0446\\u0438\\u043e\\u043d\\u043d\\u044b\\u0439 \\u043a\\u043b\\u044e\\u0447\n \n-extAttrName=\\u0412\\u043d\\u0435\\u0448\\u043d\\u0438\\u0435 \\u0430\\u0442\\u0440\\u0438\\u0431\\u0443\\u0442\\u044b\n-\n connObjectKeyValidation=\\u0422\\u0430\\u043c \\u0434\\u043e\\u043b\\u0436\\u043d\\u043e \\u0431\\u044b\\u0442\\u044c \\u0440\\u043e\\u0432\\u043d\\u043e \\u043e\\u0434\\u0438\\u043d \\u0434\\u0438\\u0441\\u0442\\u0430\\u043d\\u0446\\u0438\\u043e\\u043d\\u043d\\u043e\\u0433\\u043e \\u043a\\u043b\\u044e\\u0447\\u0430\n propagationMode=\\u0420\\u0435\\u0436\\u0438\\u043c \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d\\u0438\\u044f \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0439\n-connObjectLink=\\u0421\\u0432\\u044f\\u0437\\u044c \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u043e\\u0432\n enable=\\u0412\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c\n inner.provision.mapping=\\u041f\\u0440\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u0435 ${anyType}\n inner.provision.clone=\\u0414\\u0443\\u0431\\u043b\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u043f\\u0440\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u0435 '${key}'\n-enableRealmsProvision=\\u0412\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c \\u043f\\u0440\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u0435 \\u0434\\u043b\\u044f \\u043e\\u0431\\u043b\\u0430\\u0441\\u0442\\u0438\n-enableRealmsProvision.title=\\u0412\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c \\u0432\\u043e\\u0437\\u043c\\u043e\\u0436\\u043d\\u043e\\u0441\\u0442\\u044c \\u043f\\u0440\\u0435\\u0434\\u043e\\u0441\\u0442\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u044f \\u043e\\u0431\\u043b\\u0430\\u0441\\u0442\\u0438 \\u0434\\u043b\\u044f \\u0432\\u043d\\u0435\\u0448\\u043d\\u0435\\u0433\\u043e \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\\u0430"},{"sha":"76495b770aca27566de46a8a58c7dcf3679e0ce9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/info/PlatformInfo.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Finfo%2FPlatformInfo.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -81,7 +81,7 @@ public class PlatformInfo extends AbstractBaseBean {\n \n     private final Set<String> passwordRules = new HashSet<>();\n \n-    private final Set<String> mappingItemTransformers = new HashSet<>();\n+    private final Set<String> itemTransformers = new HashSet<>();\n \n     private final Set<String> taskJobs = new HashSet<>();\n \n@@ -233,11 +233,11 @@ public Set<String> getPasswordRules() {\n         return passwordRules;\n     }\n \n-    @XmlElementWrapper(name = \"mappingItemTransformers\")\n-    @XmlElement(name = \"mappingItemTransformer\")\n-    @JsonProperty(\"mappingItemTransformers\")\n-    public Set<String> getMappingItemTransformers() {\n-        return mappingItemTransformers;\n+    @XmlElementWrapper(name = \"itemTransformers\")\n+    @XmlElement(name = \"itemTransformer\")\n+    @JsonProperty(\"itemTransformers\")\n+    public Set<String> getItemTransformers() {\n+        return itemTransformers;\n     }\n \n     @XmlElementWrapper(name = \"taskJobs\")"},{"sha":"6975b2cdb2133a5b69834fc5fd162f89d86899d8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ItemContainerTO.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemContainerTO.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.util.List;\n+\n+public interface ItemContainerTO {\n+\n+    void setConnObjectLink(String connObjectLink);\n+\n+    boolean setConnObjectKeyItem(ItemTO connObjectKeyItem);\n+\n+    boolean add(ItemTO item);\n+\n+    List<ItemTO> getItems();\n+}"},{"sha":"603b4d3b879f39a76fe76d3b2dbb5f85d7afad21","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ItemTO.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -28,9 +28,9 @@\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n \n-@XmlRootElement(name = \"mappingItem\")\n+@XmlRootElement(name = \"item\")\n @XmlType\n-public class MappingItemTO extends AbstractBaseBean implements EntityTO {\n+public class ItemTO extends AbstractBaseBean implements EntityTO {\n \n     private static final long serialVersionUID = 2983498836767176862L;\n \n@@ -77,7 +77,7 @@ public class MappingItemTO extends AbstractBaseBean implements EntityTO {\n      */\n     private String pullJEXLTransformer;\n \n-    private final List<String> mappingItemTransformerClassNames = new ArrayList<>();\n+    private final List<String> transformerClassNames = new ArrayList<>();\n \n     public boolean isConnObjectKey() {\n         return connObjectKey;\n@@ -153,11 +153,11 @@ public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n         this.pullJEXLTransformer = pullJEXLTransformer;\n     }\n \n-    @XmlElementWrapper(name = \"mappingItemTransformerClassNames\")\n-    @XmlElement(name = \"className\")\n-    @JsonProperty(\"mappingItemTransformerClassNames\")\n-    public List<String> getMappingItemTransformerClassNames() {\n-        return mappingItemTransformerClassNames;\n+    @XmlElementWrapper(name = \"transformerClassNames\")\n+    @XmlElement(name = \"transformerClassName\")\n+    @JsonProperty(\"transformerClassNames\")\n+    public List<String> getTransformerClassNames() {\n+        return transformerClassNames;\n     }\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingItemTO.java"},{"sha":"8fe6224ffb2e3733e3a62875da12ab56a597c040","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -31,42 +31,44 @@\n \n @XmlRootElement(name = \"mapping\")\n @XmlType\n-public class MappingTO extends AbstractBaseBean {\n+public class MappingTO extends AbstractBaseBean implements ItemContainerTO {\n \n     private static final long serialVersionUID = 8447688036282611118L;\n \n     private String connObjectLink;\n \n-    private final List<MappingItemTO> items = new ArrayList<>();\n+    private final List<ItemTO> items = new ArrayList<>();\n \n-    private final List<MappingItemTO> linkingItems = new ArrayList<>();\n+    private final List<ItemTO> linkingItems = new ArrayList<>();\n \n     public String getConnObjectLink() {\n         return connObjectLink;\n     }\n \n+    @Override\n     public void setConnObjectLink(final String connObjectLink) {\n         this.connObjectLink = connObjectLink;\n     }\n \n-    public MappingItemTO getConnObjectKeyItem() {\n-        return IterableUtils.find(getItems(), new Predicate<MappingItemTO>() {\n+    public ItemTO getConnObjectKeyItem() {\n+        return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n \n             @Override\n-            public boolean evaluate(final MappingItemTO item) {\n+            public boolean evaluate(final ItemTO item) {\n                 return item.isConnObjectKey();\n             }\n         });\n     }\n \n-    protected boolean addConnObjectKeyItem(final MappingItemTO connObjectItem) {\n+    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n         connObjectItem.setMandatoryCondition(\"true\");\n         connObjectItem.setConnObjectKey(true);\n \n         return this.add(connObjectItem);\n     }\n \n-    public boolean setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n+    @Override\n+    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n         return connObjectKeyItem == null\n                 ? remove(getConnObjectKeyItem())\n                 : addConnObjectKeyItem(connObjectKeyItem);\n@@ -75,22 +77,24 @@ public boolean setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n     @XmlElementWrapper(name = \"items\")\n     @XmlElement(name = \"item\")\n     @JsonProperty(\"items\")\n-    public List<MappingItemTO> getItems() {\n+    @Override\n+    public List<ItemTO> getItems() {\n         return items;\n     }\n \n-    public boolean add(final MappingItemTO item) {\n+    @Override\n+    public boolean add(final ItemTO item) {\n         return item == null ? false : this.items.contains(item) || this.items.add(item);\n     }\n \n-    public boolean remove(final MappingItemTO item) {\n+    public boolean remove(final ItemTO item) {\n         return this.items.remove(item);\n     }\n \n     @XmlElementWrapper(name = \"linkingItems\")\n     @XmlElement(name = \"item\")\n     @JsonProperty(\"linkingItems\")\n-    public List<MappingItemTO> getLinkingItems() {\n+    public List<ItemTO> getLinkingItems() {\n         return linkingItems;\n     }\n }"},{"sha":"1290c0c302d723279cec53634085b02c1b9bb69b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"modified","additions":51,"deletions":11,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,13 +18,20 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"orgUnit\")\n @XmlType\n-public class OrgUnitTO extends AbstractBaseBean implements EntityTO {\n+public class OrgUnitTO extends AbstractBaseBean implements EntityTO, ItemContainerTO {\n \n     private static final long serialVersionUID = -1868877794174953177L;\n \n@@ -34,10 +41,10 @@ public class OrgUnitTO extends AbstractBaseBean implements EntityTO {\n \n     private String syncToken;\n \n-    private String extAttrName;\n-\n     private String connObjectLink;\n \n+    private final List<ItemTO> items = new ArrayList<>();\n+\n     @Override\n     public String getKey() {\n         return key;\n@@ -64,20 +71,53 @@ public void setSyncToken(final String syncToken) {\n         this.syncToken = syncToken;\n     }\n \n-    public String getExtAttrName() {\n-        return extAttrName;\n-    }\n-\n-    public void setExtAttrName(final String extAttrName) {\n-        this.extAttrName = extAttrName;\n-    }\n-\n     public String getConnObjectLink() {\n         return connObjectLink;\n     }\n \n+    @Override\n     public void setConnObjectLink(final String connObjectLink) {\n         this.connObjectLink = connObjectLink;\n     }\n \n+    public ItemTO getConnObjectKeyItem() {\n+        return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n+\n+            @Override\n+            public boolean evaluate(final ItemTO item) {\n+                return item.isConnObjectKey();\n+            }\n+        });\n+    }\n+\n+    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n+        connObjectItem.setMandatoryCondition(\"true\");\n+        connObjectItem.setConnObjectKey(true);\n+\n+        return this.add(connObjectItem);\n+    }\n+\n+    @Override\n+    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n+        return connObjectKeyItem == null\n+                ? remove(getConnObjectKeyItem())\n+                : addConnObjectKeyItem(connObjectKeyItem);\n+    }\n+\n+    @XmlElementWrapper(name = \"items\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"items\")\n+    @Override\n+    public List<ItemTO> getItems() {\n+        return items;\n+    }\n+\n+    @Override\n+    public boolean add(final ItemTO item) {\n+        return item == null ? false : this.items.contains(item) || this.items.add(item);\n+    }\n+\n+    public boolean remove(final ItemTO item) {\n+        return this.items.remove(item);\n+    }\n }"},{"sha":"4593b7702ca8b03689de184727578eb49b7a9cdb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":43,"deletions":23,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -179,19 +179,6 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n-        AnyType anyType = anyTypeDAO.find(anyTypeKey);\n-        if (anyType == null) {\n-            throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n-        }\n-        Provision provision = resource.getProvision(anyType);\n-        if (provision == null) {\n-            throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n-        }\n-\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n-                resource.getConnector().getAdminRealm().getFullPath());\n-        securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n         Connector connector;\n         try {\n@@ -202,7 +189,30 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n             throw sce;\n         }\n \n-        provision.setSyncToken(connector.getLatestSyncToken(provision.getObjectClass()));\n+        if (SyncopeConstants.REALM_ANYTYPE.equals(anyTypeKey)) {\n+            if (resource.getOrgUnit() == null) {\n+                throw new NotFoundException(\"Realm provision not enabled for Resource '\" + key + \"'\");\n+            }\n+\n+            resource.getOrgUnit().setSyncToken(connector.getLatestSyncToken(resource.getOrgUnit().getObjectClass()));\n+        } else {\n+            AnyType anyType = anyTypeDAO.find(anyTypeKey);\n+            if (anyType == null) {\n+                throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n+            }\n+            Provision provision = resource.getProvision(anyType);\n+            if (provision == null) {\n+                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n+            }\n+\n+            provision.setSyncToken(connector.getLatestSyncToken(provision.getObjectClass()));\n+        }\n+\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n+                resource.getConnector().getAdminRealm().getFullPath());\n+        securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n+\n         resourceDAO.save(resource);\n     }\n \n@@ -212,21 +222,30 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n-        AnyType anyType = anyTypeDAO.find(anyTypeKey);\n-        if (anyType == null) {\n-            throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n-        }\n-        Provision provision = resource.getProvision(anyType);\n-        if (provision == null) {\n-            throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n+        if (SyncopeConstants.REALM_ANYTYPE.equals(anyTypeKey)) {\n+            if (resource.getOrgUnit() == null) {\n+                throw new NotFoundException(\"Realm provision not enabled for Resource '\" + key + \"'\");\n+            }\n+\n+            resource.getOrgUnit().setSyncToken(null);\n+        } else {\n+            AnyType anyType = anyTypeDAO.find(anyTypeKey);\n+            if (anyType == null) {\n+                throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n+            }\n+            Provision provision = resource.getProvision(anyType);\n+            if (provision == null) {\n+                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n+            }\n+\n+            provision.setSyncToken(null);\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n-        provision.setSyncToken(null);\n         resourceDAO.save(resource);\n     }\n \n@@ -364,7 +383,8 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n             }\n \n             objectClass = resource.getOrgUnit().getObjectClass();\n-            options = MappingUtils.buildOperationOptions(resource.getOrgUnit());\n+            options = MappingUtils.buildOperationOptions(\n+                    MappingUtils.getPropagationItems(resource.getOrgUnit()).iterator());\n         } else {\n             Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n             resource = init.getLeft();"},{"sha":"c3733112f0fdef71e2ffcaf687568d527a561890","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -220,8 +220,8 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.getReportletConfs().addAll(implLookup.getClassNames(Type.REPORTLET_CONF));\n                 PLATFORM_INFO.getAccountRules().addAll(implLookup.getClassNames(Type.ACCOUNT_RULE_CONF));\n                 PLATFORM_INFO.getPasswordRules().addAll(implLookup.getClassNames(Type.PASSWORD_RULE_CONF));\n-                PLATFORM_INFO.getMappingItemTransformers().addAll(\n-                        implLookup.getClassNames(Type.MAPPING_ITEM_TRANSFORMER));\n+                PLATFORM_INFO.getItemTransformers().addAll(\n+                        implLookup.getClassNames(Type.ITEM_TRANSFORMER));\n                 PLATFORM_INFO.getTaskJobs().addAll(implLookup.getClassNames(Type.TASKJOBDELEGATE));\n                 PLATFORM_INFO.getReconciliationFilterBuilders().\n                         addAll(implLookup.getClassNames(Type.RECONCILIATION_FILTER_BUILDER));"},{"sha":"2bc1eca862cd4740a8433621bf357393016878d8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -38,15 +38,15 @@\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationRecipientsProvider;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconciliationFilterBuilder;\n-import org.apache.syncope.core.provisioning.java.data.JEXLMappingItemTransformerImpl;\n+import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;\n import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PlainAttrsPullCorrelationRule;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n@@ -113,7 +113,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(MappingItemTransformer.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(ItemTransformer.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(ReconciliationFilterBuilder.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(LogicActions.class));\n@@ -166,10 +166,10 @@ public void load() {\n                     }\n                 }\n \n-                if (MappingItemTransformer.class.isAssignableFrom(clazz) && !isAbstractClazz\n-                        && !clazz.equals(JEXLMappingItemTransformerImpl.class)) {\n+                if (ItemTransformer.class.isAssignableFrom(clazz) && !isAbstractClazz\n+                        && !clazz.equals(JEXLItemTransformerImpl.class)) {\n \n-                    classNames.get(Type.MAPPING_ITEM_TRANSFORMER).add(clazz.getName());\n+                    classNames.get(Type.ITEM_TRANSFORMER).add(clazz.getName());\n                 }\n \n                 if (SchedTaskJobDelegate.class.isAssignableFrom(clazz) && !isAbstractClazz"},{"sha":"a81a2d6a50181c169233c1d60c63865f08f0a09a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -34,7 +34,7 @@ enum Type {\n         REPORTLET_CONF,\n         ACCOUNT_RULE_CONF,\n         PASSWORD_RULE_CONF,\n-        MAPPING_ITEM_TRANSFORMER,\n+        ITEM_TRANSFORMER,\n         TASKJOBDELEGATE,\n         RECONCILIATION_FILTER_BUILDER,\n         LOGIC_ACTIONS,"},{"sha":"de236014cc8a920b669427173219ad185c36c9cf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -34,6 +34,8 @@ public interface RealmDAO extends DAO<Realm> {\n \n     Realm findByFullPath(String fullPath);\n \n+    List<Realm> findByName(String name);\n+\n     List<Realm> findByResource(ExternalResource resource);\n \n     <T extends Policy> List<Realm> findByPolicy(T policy);"},{"sha":"48ce512b93b0bf0b95968a25a139604b70aeae81","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/LinkingMappingItem.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -133,7 +133,7 @@ public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n     }\n \n     @Override\n-    public List<String> getMappingItemTransformerClassNames() {\n+    public List<String> getTransformerClassNames() {\n         return Collections.emptyList();\n     }\n }"},{"sha":"e8bf03786c15340309d16ddb8901044060e3d74f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Item.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FItem.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.resource;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public interface Item extends Entity {\n+\n+    String getExtAttrName();\n+\n+    void setExtAttrName(String extAttrName);\n+\n+    String getIntAttrName();\n+\n+    void setIntAttrName(String intAttrName);\n+\n+    String getMandatoryCondition();\n+\n+    void setMandatoryCondition(String condition);\n+\n+    MappingPurpose getPurpose();\n+\n+    void setPurpose(MappingPurpose purpose);\n+\n+    boolean isConnObjectKey();\n+\n+    void setConnObjectKey(boolean connObjectKey);\n+\n+    boolean isPassword();\n+\n+    void setPassword(boolean password);\n+\n+    String getPropagationJEXLTransformer();\n+\n+    void setPropagationJEXLTransformer(String propagationJEXLTransformer);\n+\n+    String getPullJEXLTransformer();\n+\n+    void setPullJEXLTransformer(String pullJEXLTransformer);\n+\n+    List<String> getTransformerClassNames();\n+}"},{"sha":"92940a0a6707aa05347433b2866cdba94dad955b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Mapping.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -27,15 +27,15 @@ public interface Mapping extends Entity {\n \n     void setProvision(Provision provision);\n \n+    String getConnObjectLink();\n+\n+    void setConnObjectLink(String connObjectLink);\n+\n     boolean add(MappingItem item);\n \n     MappingItem getConnObjectKeyItem();\n \n     void setConnObjectKeyItem(MappingItem item);\n \n-    String getConnObjectLink();\n-\n-    void setConnObjectLink(String connObjectLink);\n-\n     List<? extends MappingItem> getItems();\n }"},{"sha":"24dc15df427cfa9295347e30448c78c7fd62cb51","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/MappingItem.java","status":"modified","additions":1,"deletions":39,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMappingItem.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,48 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.resource;\n \n-import java.util.List;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n-\n-public interface MappingItem extends Entity {\n+public interface MappingItem extends Item {\n \n     Mapping getMapping();\n \n     void setMapping(Mapping mapping);\n \n-    String getExtAttrName();\n-\n-    void setExtAttrName(String extAttrName);\n-\n-    String getIntAttrName();\n-\n-    void setIntAttrName(String intAttrName);\n-\n-    String getMandatoryCondition();\n-\n-    void setMandatoryCondition(String condition);\n-\n-    MappingPurpose getPurpose();\n-\n-    void setPurpose(MappingPurpose purpose);\n-\n-    boolean isConnObjectKey();\n-\n-    void setConnObjectKey(boolean connObjectKey);\n-\n-    boolean isPassword();\n-\n-    void setPassword(boolean password);\n-\n-    String getPropagationJEXLTransformer();\n-\n-    void setPropagationJEXLTransformer(String propagationJEXLTransformer);\n-\n-    String getPullJEXLTransformer();\n-\n-    void setPullJEXLTransformer(String pullJEXLTransformer);\n-\n-    List<String> getMappingItemTransformerClassNames();\n-\n }"},{"sha":"cdb0504b52aadf2ee7fe78e2c303eb6254c27265","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/OrgUnit.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnit.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.resource;\n \n+import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.SyncToken;\n@@ -38,12 +39,15 @@ public interface OrgUnit extends Entity {\n \n     void setSyncToken(SyncToken syncToken);\n \n-    String getExtAttrName();\n-\n-    void setExtAttrName(String extAttrName);\n-\n     String getConnObjectLink();\n \n     void setConnObjectLink(String connObjectLink);\n \n+    boolean add(OrgUnitItem item);\n+\n+    OrgUnitItem getConnObjectKeyItem();\n+\n+    void setConnObjectKeyItem(OrgUnitItem item);\n+\n+    List<? extends OrgUnitItem> getItems();\n }"},{"sha":"d25e0bcff3780d299019e2f73dbca26807105258","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/OrgUnitItem.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FOrgUnitItem.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.resource;\n+\n+public interface OrgUnitItem extends Item {\n+\n+    OrgUnit getOrgUnit();\n+\n+    void setOrgUnit(OrgUnit orgUnit);\n+}"},{"sha":"0f4cb62a06acf3d66f1ffb0e66b159022732a31a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -63,6 +63,7 @@ public Realm getRoot() {\n         return result;\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public Realm find(final String key) {\n         return entityManager().find(JPARealm.class, key);\n@@ -117,6 +118,15 @@ private <T extends Policy> List<Realm> findSamePolicyChildren(final Realm realm,\n         return result;\n     }\n \n+    @Override\n+    public List<Realm> findByName(final String name) {\n+        TypedQuery<Realm> query = entityManager().createQuery(\"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"\n+                + \"WHERE e.name=:name\", Realm.class);\n+        query.setParameter(\"name\", name);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<Realm> findByResource(final ExternalResource resource) {\n         TypedQuery<Realm> query = entityManager().createQuery(\"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e \"\n@@ -186,6 +196,7 @@ public List<Realm> findDescendants(final Realm realm) {\n         return result;\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public List<Realm> findAll() {\n         return findDescendants(getRoot());"},{"sha":"66894e585b894ee4a1ad4878978facee23248c4b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -127,7 +127,9 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n \n @Component\n public class JPAEntityFactory implements EntityFactory {\n@@ -219,6 +221,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAMapping();\n         } else if (reference.equals(MappingItem.class)) {\n             result = (E) new JPAMappingItem();\n+        } else if (reference.equals(OrgUnitItem.class)) {\n+            result = (E) new JPAOrgUnitItem();\n         } else if (reference.equals(GPlainAttr.class)) {\n             result = (E) new JPAGPlainAttr();\n         } else if (reference.equals(GPlainAttrValue.class)) {"},{"sha":"5bb91b9b48b7b032238290907f2baed7a95b7ebd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractItem.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractItem.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.resource;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+\n+@MappedSuperclass\n+public abstract class AbstractItem extends AbstractGeneratedKeyEntity implements Item {\n+\n+    private static final long serialVersionUID = 5552380143129988272L;\n+\n+    @NotNull\n+    private String intAttrName;\n+\n+    /**\n+     * Target resource's field to be mapped.\n+     */\n+    @NotNull\n+    private String extAttrName;\n+\n+    /**\n+     * Specify if the mapped target resource's field is nullable.\n+     */\n+    @NotNull\n+    private String mandatoryCondition;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the id.\n+     */\n+    @NotNull\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer connObjectKey;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the password.\n+     */\n+    @NotNull\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer password;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private MappingPurpose purpose;\n+\n+    /**\n+     * (Optional) JEXL expression to apply to values before propagation.\n+     */\n+    @Column(name = \"propJEXL\")\n+    private String propagationJEXLTransformer;\n+\n+    /**\n+     * (Optional) JEXL expression to apply to values before pull.\n+     */\n+    @Column(name = \"pullJEXL\")\n+    private String pullJEXLTransformer;\n+\n+    public AbstractItem() {\n+        super();\n+\n+        mandatoryCondition = Boolean.FALSE.toString();\n+\n+        connObjectKey = getBooleanAsInteger(false);\n+        password = getBooleanAsInteger(false);\n+    }\n+\n+    @Override\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n+    @Override\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n+    }\n+\n+    @Override\n+    public void setMandatoryCondition(final String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n+    }\n+\n+    @Override\n+    public String getIntAttrName() {\n+        return intAttrName;\n+    }\n+\n+    @Override\n+    public void setIntAttrName(final String intAttrName) {\n+        this.intAttrName = intAttrName;\n+    }\n+\n+    @Override\n+    public boolean isConnObjectKey() {\n+        return isBooleanAsInteger(connObjectKey);\n+    }\n+\n+    @Override\n+    public void setConnObjectKey(final boolean connObjectKey) {\n+        this.connObjectKey = getBooleanAsInteger(connObjectKey);\n+    }\n+\n+    @Override\n+    public boolean isPassword() {\n+        return isBooleanAsInteger(password);\n+    }\n+\n+    @Override\n+    public void setPassword(final boolean password) {\n+        this.password = getBooleanAsInteger(password);\n+    }\n+\n+    @Override\n+    public MappingPurpose getPurpose() {\n+        return purpose;\n+    }\n+\n+    @Override\n+    public void setPurpose(final MappingPurpose purpose) {\n+        this.purpose = purpose;\n+    }\n+\n+    @Override\n+    public String getPropagationJEXLTransformer() {\n+        return propagationJEXLTransformer;\n+    }\n+\n+    @Override\n+    public void setPropagationJEXLTransformer(final String propagationJEXLTransformer) {\n+        this.propagationJEXLTransformer = propagationJEXLTransformer;\n+    }\n+\n+    @Override\n+    public String getPullJEXLTransformer() {\n+        return pullJEXLTransformer;\n+    }\n+\n+    @Override\n+    public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n+        this.pullJEXLTransformer = pullJEXLTransformer;\n+    }\n+\n+}"},{"sha":"bac3955f66613384402ec4c56be780f1627134ef","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -27,7 +27,6 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n-import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -44,8 +43,7 @@ public class JPAMapping extends AbstractGeneratedKeyEntity implements Mapping {\n \n     public static final String TABLE = \"Mapping\";\n \n-    @NotNull\n-    @OneToOne\n+    @OneToOne(optional = false)\n     private JPAProvision provision;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")"},{"sha":"8624a704d8f88d8960e03e49941c0d2ef58bc7cc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":5,"deletions":152,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -20,30 +20,22 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.Table;\n-import javax.validation.constraints.Max;\n-import javax.validation.constraints.Min;\n-import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n \n @Entity\n @Table(name = JPAMappingItem.TABLE)\n @Cacheable\n-public class JPAMappingItem extends AbstractGeneratedKeyEntity implements MappingItem {\n+public class JPAMappingItem extends AbstractItem implements MappingItem {\n \n     private static final long serialVersionUID = 7383601853619332424L;\n \n@@ -52,73 +44,15 @@ public class JPAMappingItem extends AbstractGeneratedKeyEntity implements Mappin\n     @ManyToOne\n     private JPAMapping mapping;\n \n-    @NotNull\n-    private String intAttrName;\n-\n-    /**\n-     * Target resource's field to be mapped.\n-     */\n-    @NotNull\n-    private String extAttrName;\n-\n-    /**\n-     * Specify if the mapped target resource's field is nullable.\n-     */\n-    @NotNull\n-    private String mandatoryCondition;\n-\n-    /**\n-     * Specify if the mapped target resource's field is the id.\n-     */\n-    @NotNull\n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer connObjectKey;\n-\n-    /**\n-     * Specify if the mapped target resource's field is the password.\n-     */\n-    @NotNull\n-    @Basic\n-    @Min(0)\n-    @Max(1)\n-    private Integer password;\n-\n-    @NotNull\n-    @Enumerated(EnumType.STRING)\n-    private MappingPurpose purpose;\n-\n-    /**\n-     * (Optional) JEXL expression to apply to values before propagation.\n-     */\n-    @Column(name = \"propJEXL\")\n-    private String propagationJEXLTransformer;\n-\n-    /**\n-     * (Optional) JEXL expression to apply to values before pull.\n-     */\n-    @Column(name = \"pullJEXL\")\n-    private String pullJEXLTransformer;\n-\n     /**\n      * (Optional) classes for MappingItem transformation.\n      */\n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"transformerClassName\")\n-    @CollectionTable(name = \"MappingItem_Transformer\",\n+    @CollectionTable(name = TABLE + \"_Transformer\",\n             joinColumns =\n             @JoinColumn(name = \"mappingItem_id\", referencedColumnName = \"id\"))\n-    private List<String> mappingItemTransformerClassNames = new ArrayList<>();\n-\n-    public JPAMappingItem() {\n-        super();\n-\n-        mandatoryCondition = Boolean.FALSE.toString();\n-\n-        connObjectKey = getBooleanAsInteger(false);\n-        password = getBooleanAsInteger(false);\n-    }\n+    private List<String> transformerClassNames = new ArrayList<>();\n \n     @Override\n     public Mapping getMapping() {\n@@ -132,88 +66,7 @@ public void setMapping(final Mapping mapping) {\n     }\n \n     @Override\n-    public String getExtAttrName() {\n-        return extAttrName;\n-    }\n-\n-    @Override\n-    public void setExtAttrName(final String extAttrName) {\n-        this.extAttrName = extAttrName;\n-    }\n-\n-    @Override\n-    public String getMandatoryCondition() {\n-        return mandatoryCondition;\n-    }\n-\n-    @Override\n-    public void setMandatoryCondition(final String mandatoryCondition) {\n-        this.mandatoryCondition = mandatoryCondition;\n+    public List<String> getTransformerClassNames() {\n+        return transformerClassNames;\n     }\n-\n-    @Override\n-    public String getIntAttrName() {\n-        return intAttrName;\n-    }\n-\n-    @Override\n-    public void setIntAttrName(final String intAttrName) {\n-        this.intAttrName = intAttrName;\n-    }\n-\n-    @Override\n-    public boolean isConnObjectKey() {\n-        return isBooleanAsInteger(connObjectKey);\n-    }\n-\n-    @Override\n-    public void setConnObjectKey(final boolean connObjectKey) {\n-        this.connObjectKey = getBooleanAsInteger(connObjectKey);\n-    }\n-\n-    @Override\n-    public boolean isPassword() {\n-        return isBooleanAsInteger(password);\n-    }\n-\n-    @Override\n-    public void setPassword(final boolean password) {\n-        this.password = getBooleanAsInteger(password);\n-    }\n-\n-    @Override\n-    public MappingPurpose getPurpose() {\n-        return purpose;\n-    }\n-\n-    @Override\n-    public void setPurpose(final MappingPurpose purpose) {\n-        this.purpose = purpose;\n-    }\n-\n-    @Override\n-    public String getPropagationJEXLTransformer() {\n-        return propagationJEXLTransformer;\n-    }\n-\n-    @Override\n-    public void setPropagationJEXLTransformer(final String propagationJEXLTransformer) {\n-        this.propagationJEXLTransformer = propagationJEXLTransformer;\n-    }\n-\n-    @Override\n-    public String getPullJEXLTransformer() {\n-        return pullJEXLTransformer;\n-    }\n-\n-    @Override\n-    public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n-        this.pullJEXLTransformer = pullJEXLTransformer;\n-    }\n-\n-    @Override\n-    public List<String> getMappingItemTransformerClassNames() {\n-        return mappingItemTransformerClassNames;\n-    }\n-\n }"},{"sha":"ab4398da73aefa5fb31154717276a18f763c89c8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnit.java","status":"modified","additions":36,"deletions":11,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnit.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,13 +18,21 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.resource;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -49,12 +57,12 @@ public class JPAOrgUnit extends AbstractGeneratedKeyEntity implements OrgUnit {\n     @Lob\n     private String serializedSyncToken;\n \n-    @NotNull\n-    private String extAttrName;\n-\n     @NotNull\n     private String connObjectLink;\n \n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"orgUnit\")\n+    private List<JPAOrgUnitItem> items = new ArrayList<>();\n+\n     @Override\n     public ExternalResource getResource() {\n         return resource;\n@@ -96,23 +104,40 @@ public void setSyncToken(final SyncToken syncToken) {\n     }\n \n     @Override\n-    public String getExtAttrName() {\n-        return extAttrName;\n+    public String getConnObjectLink() {\n+        return connObjectLink;\n     }\n \n     @Override\n-    public void setExtAttrName(final String extAttrName) {\n-        this.extAttrName = extAttrName;\n+    public void setConnObjectLink(final String connObjectLink) {\n+        this.connObjectLink = connObjectLink;\n     }\n \n     @Override\n-    public String getConnObjectLink() {\n-        return connObjectLink;\n+    public boolean add(final OrgUnitItem item) {\n+        checkType(item, JPAOrgUnitItem.class);\n+        return items.contains((JPAOrgUnitItem) item) || items.add((JPAOrgUnitItem) item);\n     }\n \n     @Override\n-    public void setConnObjectLink(final String connObjectLink) {\n-        this.connObjectLink = connObjectLink;\n+    public List<? extends OrgUnitItem> getItems() {\n+        return items;\n+    }\n+\n+    @Override\n+    public OrgUnitItem getConnObjectKeyItem() {\n+        return IterableUtils.find(getItems(), new Predicate<OrgUnitItem>() {\n+\n+            @Override\n+            public boolean evaluate(final OrgUnitItem item) {\n+                return item.isConnObjectKey();\n+            }\n+        });\n     }\n \n+    @Override\n+    public void setConnObjectKeyItem(final OrgUnitItem item) {\n+        item.setConnObjectKey(true);\n+        this.add(item);\n+    }\n }"},{"sha":"e356ff2c98eb0f224146e1f0870211b23cd9944e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAOrgUnitItem.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAOrgUnitItem.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.resource;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n+\n+@Entity\n+@Table(name = JPAOrgUnitItem.TABLE)\n+@Cacheable\n+public class JPAOrgUnitItem extends AbstractItem implements OrgUnitItem {\n+\n+    private static final long serialVersionUID = 7872073846646341777L;\n+\n+    public static final String TABLE = \"OrgUnitItem\";\n+\n+    @ManyToOne\n+    private JPAOrgUnit orgUnit;\n+\n+    /**\n+     * (Optional) classes for MappingItem transformation.\n+     */\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"transformerClassName\")\n+    @CollectionTable(name = TABLE + \"_Transformer\",\n+            joinColumns =\n+            @JoinColumn(name = \"orgUnitItem_id\", referencedColumnName = \"id\"))\n+    private List<String> transformerClassNames = new ArrayList<>();\n+\n+    @Override\n+    public OrgUnit getOrgUnit() {\n+        return orgUnit;\n+    }\n+\n+    @Override\n+    public void setOrgUnit(final OrgUnit mapping) {\n+        checkType(mapping, JPAOrgUnit.class);\n+        this.orgUnit = (JPAOrgUnit) mapping;\n+    }\n+\n+    @Override\n+    public List<String> getTransformerClassNames() {\n+        return transformerClassNames;\n+    }\n+}"},{"sha":"719a240906d551a150bbdd280c1b9f747f147336","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":46,"deletions":28,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,31 +19,30 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n-    private boolean isValid(final Mapping mapping, final ConstraintValidatorContext context) {\n-        if (mapping == null) {\n-            return true;\n-        }\n-\n-        long connObjectKeys = IterableUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n+    private boolean isValid(final List<? extends Item> items, final ConstraintValidatorContext context) {\n+        long connObjectKeys = IterableUtils.countMatches(items, new Predicate<Item>() {\n \n             @Override\n-            public boolean evaluate(final MappingItem item) {\n+            public boolean evaluate(final Item item) {\n                 return item.isConnObjectKey();\n             }\n         });\n@@ -56,36 +55,22 @@ public boolean evaluate(final MappingItem item) {\n \n         boolean isValid = true;\n \n-        long passwords = IterableUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n-\n-            @Override\n-            public boolean evaluate(final MappingItem item) {\n-                return item.isPassword();\n-            }\n-        });\n-        if (passwords > 1) {\n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, \"One password mapping is allowed at most\")).\n-                    addPropertyNode(\"password.size\").addConstraintViolation();\n-            isValid = false;\n-        }\n-\n-        for (MappingItem item : mapping.getItems()) {\n-            for (String className : item.getMappingItemTransformerClassNames()) {\n+        for (Item item : items) {\n+            for (String className : item.getTransformerClassNames()) {\n                 Class<?> actionsClass = null;\n                 boolean isAssignable = false;\n                 try {\n                     actionsClass = Class.forName(className);\n-                    isAssignable = MappingItemTransformer.class.isAssignableFrom(actionsClass);\n+                    isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n                 } catch (Exception e) {\n-                    LOG.error(\"Invalid MappingItemTransformer specified: {}\", className, e);\n+                    LOG.error(\"Invalid ItemTransformer specified: {}\", className, e);\n                 }\n \n                 if (actionsClass == null || !isAssignable) {\n                     context.buildConstraintViolationWithTemplate(\n                             getTemplate(EntityViolationType.InvalidMapping,\n-                                    \"Invalid mapping item trasformer class name\")).\n-                            addPropertyNode(\"mappingItemTransformerClassName\").addConstraintViolation();\n+                                    \"Invalid item trasformer class name\")).\n+                            addPropertyNode(\"itemTransformerClassName\").addConstraintViolation();\n                     isValid = false;\n                 }\n             }\n@@ -94,6 +79,38 @@ public boolean evaluate(final MappingItem item) {\n         return isValid;\n     }\n \n+    private boolean isValid(final OrgUnit orgUnit, final ConstraintValidatorContext context) {\n+        if (orgUnit == null) {\n+            return true;\n+        }\n+\n+        return isValid(orgUnit.getItems(), context);\n+    }\n+\n+    private boolean isValid(final Mapping mapping, final ConstraintValidatorContext context) {\n+        if (mapping == null) {\n+            return true;\n+        }\n+\n+        boolean isValid = true;\n+\n+        long passwords = IterableUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.isPassword();\n+            }\n+        });\n+        if (passwords > 1) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping, \"One password mapping is allowed at most\")).\n+                    addPropertyNode(\"password.size\").addConstraintViolation();\n+            isValid = false;\n+        }\n+\n+        return isValid && isValid(mapping.getItems(), context);\n+    }\n+\n     @Override\n     public boolean isValid(final ExternalResource resource, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n@@ -138,6 +155,7 @@ public boolean evaluate(final Provision provision) {\n                 return isValid(provision.getMapping(), context);\n             }\n         });\n+        validMappings &= isValid(resource.getOrgUnit(), context);\n \n         if (anyTypes.size() < resource.getProvisions().size()) {\n             context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidResource,"},{"sha":"0e1598e7d3c192290314439aaae89c18fe0fec8d","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -799,10 +799,16 @@ under the License.\n                     randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     propagationPriority=\"1\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\"\n-                    jsonConf='[{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute. Default is \\\"entryUUID\\\".\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"overridable\":true,\"values\":[\"entryUUID\"]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":[]},\"overridable\":true,\"values\":[\"o=isp\"]}]'/>\n+                    jsonConf='[{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute. Default is \\\"entryUUID\\\".\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"overridable\":true,\"values\":[\"l\"]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":[]},\"overridable\":true,\"values\":[\"o=isp\"]}]'/>\n   <OrgUnit id=\"599a59cf-9a23-4447-9a59-cf9a2334473a\" connObjectLink=\"syncope:fullPath2Dn(fullPath, 'ou') + ',o=isp'\"\n-           extAttrName=\"ou\" objectClass=\"organizationalUnit\" resource_id=\"resource-ldap-orgunit\"/>\n-\n+           objectClass=\"organizationalUnit\" resource_id=\"resource-ldap-orgunit\"/>\n+  <OrgUnitItem id=\"5d0e7ad0-9026-42ad-be8a-32539389e7bd\" connObjectKey=\"1\" extAttrName=\"l\"\n+               intAttrName=\"fullpath\" mandatoryCondition=\"true\" purpose=\"BOTH\"\n+               orgUnit_id=\"599a59cf-9a23-4447-9a59-cf9a2334473a\"/>\n+  <OrgUnitItem id=\"1df556d3-bc23-48b7-a09b-fc3794a00019\" connObjectKey=\"0\" extAttrName=\"ou\"\n+               intAttrName=\"name\" mandatoryCondition=\"true\" purpose=\"BOTH\"\n+               orgUnit_id=\"599a59cf-9a23-4447-9a59-cf9a2334473a\"/>\n+  \n   <ExternalResource id=\"ws-target-resource-nopropagation\" connector_id=\"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" overrideCapabilities=\"0\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\""},{"sha":"daa09e2203b0af1f268bf52107de85847f6681b6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -22,10 +22,14 @@\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n@@ -40,6 +44,15 @@ public interface MappingManager {\n      */\n     String getConnObjectKeyValue(Any<?> any, Provision provision);\n \n+    /**\n+     * Get connObjectKey internal value.\n+     *\n+     * @param realm realm\n+     * @param orgUnit orgUnit information\n+     * @return connObjectKey internal value\n+     */\n+    String getConnObjectKeyValue(Realm realm, OrgUnit orgUnit);\n+\n     /**\n      * Get attribute values for the given {@link MappingItem} and any object.\n      *\n@@ -64,6 +77,15 @@ public interface MappingManager {\n     Pair<String, Set<Attribute>> prepareAttrs(\n             Any<?> any, String password, boolean changePwd, Boolean enable, Provision provision);\n \n+    /**\n+     * Prepare attributes for sending to a connector instance.\n+     *\n+     * @param realm Realm\n+     * @param orgUnit provision information\n+     * @return connObjectLink + prepared attributes\n+     */\n+    Pair<String, Set<Attribute>> prepareAttrs(Realm realm, OrgUnit orgUnit);\n+\n     /**\n      * Set attribute values, according to the given {@link MappingItem}, to any object from attribute received from\n      * connector.\n@@ -76,4 +98,14 @@ Pair<String, Set<Attribute>> prepareAttrs(\n      */\n     <T extends AnyTO> void setIntValues(MappingItem mapItem, Attribute attr, T anyTO, AnyUtils anyUtils);\n \n+    /**\n+     * Set attribute values, according to the given {@link OrgUnitItem}, to realm from attribute received from\n+     * connector.\n+     *\n+     * @param orgUnitItem mapping item\n+     * @param attr attribute received from connector\n+     * @param realmTO realm\n+     */\n+    void setIntValues(OrgUnitItem orgUnitItem, Attribute attr, RealmTO realmTO);\n+\n }"},{"sha":"1ec16c3970bdc51c305226dd44ecf70efefdac50","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ItemTransformer.java","status":"renamed","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FItemTransformer.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,42 +19,42 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n \n /**\n  * Transforms values to be propagated to (or pulling from) external resources right before they leave (or enter)\n  * the Syncope internal storage.\n  *\n  * These transformations are not applied to virtual attribute values.\n  */\n-public interface MappingItemTransformer {\n+public interface ItemTransformer {\n \n     /**\n      * Invoked while preparing attribute values to be sent out to external resource during propagation.\n      *\n-     * @param mappingItem mapping item\n-     * @param any any object\n+     * @param item mapping item\n+     * @param entity entity\n      * @param values original values\n      * @return transformed values\n      */\n     List<PlainAttrValue> beforePropagation(\n-            MappingItem mappingItem,\n-            Any<?> any,\n+            Item item,\n+            Entity entity,\n             List<PlainAttrValue> values);\n \n     /**\n      * Invoked while reading attribute values from external resource during pull.\n      *\n-     * @param mappingItem mapping item\n-     * @param anyTO any object\n+     * @param item mapping item\n+     * @param entityTO entity\n      * @param values original values\n      * @return transformed values\n      */\n     List<Object> beforePull(\n-            MappingItem mappingItem,\n-            AnyTO anyTO,\n+            Item item,\n+            EntityTO entityTO,\n             List<Object> values);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/MappingItemTransformer.java"},{"sha":"3194454de00f48b85095c653e4d491961f6e5506","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/JEXLItemTransformer.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FJEXLItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FJEXLItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FJEXLItemTransformer.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n /**\n- * {@link MappingItemTransformer} implementing evaluation of JEXL expression defined for a given\n+ * {@link ItemTransformer} implementing evaluation of JEXL expression defined for a given\n  * {@link org.apache.syncope.core.persistence.api.entity.resource.MappingItem}.\n  */\n-public interface JEXLMappingItemTransformer extends MappingItemTransformer {\n+public interface JEXLItemTransformer extends ItemTransformer {\n \n     void setPropagationJEXL(String propagationJEXL);\n ","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/JEXLMappingItemTransformer.java"},{"sha":"b2907c4756982889bf7b9ca430bd8de89c7fba0f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n@@ -132,19 +131,18 @@ SyncDelta beforeLink(\n      * The entity is updated upon pull in case of the matching rule\n      * {@link org.apache.syncope.common.lib.types.MatchingRule#UPDATE} (default matching rule) is applied.\n      *\n-     * @param <M> concrete any object\n      * @param <P> any object modifications\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n-     * @param any any object\n+     * @param entityTO entity\n      * @param anyPatch modification\n      * @return pull information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    <M extends AnyTO, P extends AnyPatch> SyncDelta beforeUpdate(\n+    <P extends AnyPatch> SyncDelta beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            M any,\n+            EntityTO entityTO,\n             P anyPatch)\n             throws JobExecutionException;\n "},{"sha":"54ada9802cb844e6b7662537d004415446ff6e46","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":143,"deletions":30,"changes":173,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -23,55 +23,60 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.reflect.FieldUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n-import org.apache.syncope.core.spring.security.Encryptor;\n-import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -82,7 +87,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n @Component\n public class MappingManagerImpl implements MappingManager {\n@@ -109,6 +114,9 @@ public class MappingManagerImpl implements MappingManager {\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private DerAttrHandler derAttrHandler;\n \n@@ -145,7 +153,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         Set<Attribute> attributes = new HashSet<>();\n         String connObjectKey = null;\n \n-        for (MappingItem mapItem : MappingUtils.getPropagationMappingItems(provision)) {\n+        for (MappingItem mapItem : MappingUtils.getPropagationItems(provision)) {\n             LOG.debug(\"Processing expression '{}'\", mapItem.getIntAttrName());\n \n             try {\n@@ -164,7 +172,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n                             attributes.remove(alreadyAdded);\n \n                             Set<Object> values = new HashSet<>();\n-                            if (alreadyAdded.getValue() != null && !alreadyAdded.getValue().isEmpty()) {\n+                            if (CollectionUtils.isNotEmpty(alreadyAdded.getValue())) {\n                                 values.addAll(alreadyAdded.getValue());\n                             }\n \n@@ -198,7 +206,75 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n             }\n         }\n \n-        return new ImmutablePair<>(connObjectKey, attributes);\n+        return Pair.of(connObjectKey, attributes);\n+    }\n+\n+    private String getIntValue(final Realm realm, final OrgUnitItem orgUnitItem) {\n+        String value = null;\n+        switch (orgUnitItem.getIntAttrName()) {\n+            case \"key\":\n+                value = realm.getKey();\n+                break;\n+\n+            case \"name\":\n+                value = realm.getName();\n+                break;\n+\n+            case \"fullpath\":\n+                value = realm.getFullPath();\n+                break;\n+\n+            default:\n+        }\n+\n+        return value;\n+    }\n+\n+    @Override\n+    public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUnit orgUnit) {\n+        LOG.debug(\"Preparing resource attributes for {} with orgUnit {}\", realm, orgUnit);\n+\n+        Set<Attribute> attributes = new HashSet<>();\n+        String connObjectKey = null;\n+\n+        for (OrgUnitItem orgUnitItem : MappingUtils.getPropagationItems(orgUnit)) {\n+            LOG.debug(\"Processing expression '{}'\", orgUnitItem.getIntAttrName());\n+\n+            String value = getIntValue(realm, orgUnitItem);\n+\n+            if (orgUnitItem.isConnObjectKey()) {\n+                connObjectKey = value;\n+            }\n+\n+            Attribute alreadyAdded = AttributeUtil.find(orgUnitItem.getExtAttrName(), attributes);\n+            if (alreadyAdded == null) {\n+                if (value == null) {\n+                    attributes.add(AttributeBuilder.build(orgUnitItem.getExtAttrName()));\n+                } else {\n+                    attributes.add(AttributeBuilder.build(orgUnitItem.getExtAttrName(), value));\n+                }\n+            } else if (value != null) {\n+                attributes.remove(alreadyAdded);\n+\n+                Set<Object> values = new HashSet<>();\n+                if (CollectionUtils.isNotEmpty(alreadyAdded.getValue())) {\n+                    values.addAll(alreadyAdded.getValue());\n+                }\n+                values.add(value);\n+\n+                attributes.add(AttributeBuilder.build(orgUnitItem.getExtAttrName(), values));\n+            }\n+        }\n+\n+        Attribute connObjectKeyExtAttr =\n+                AttributeUtil.find(orgUnit.getConnObjectKeyItem().getExtAttrName(), attributes);\n+        if (connObjectKeyExtAttr != null) {\n+            attributes.remove(connObjectKeyExtAttr);\n+            attributes.add(AttributeBuilder.build(orgUnit.getConnObjectKeyItem().getExtAttrName(), connObjectKey));\n+        }\n+        attributes.add(MappingUtils.evaluateNAME(realm, orgUnit, connObjectKey));\n+\n+        return Pair.of(connObjectKey, attributes);\n     }\n \n     /**\n@@ -263,7 +339,7 @@ private Pair<String, Attribute> prepareAttr(\n             }\n \n             if (mapItem.isConnObjectKey()) {\n-                result = new ImmutablePair<>(objValues.isEmpty() ? null : objValues.iterator().next().toString(), null);\n+                result = Pair.of(objValues.isEmpty() ? null : objValues.iterator().next().toString(), null);\n             } else if (mapItem.isPassword() && any instanceof User) {\n                 String passwordAttrValue = password;\n                 if (StringUtils.isBlank(passwordAttrValue)) {\n@@ -286,15 +362,12 @@ private Pair<String, Attribute> prepareAttr(\n                 if (passwordAttrValue == null) {\n                     result = null;\n                 } else {\n-                    result = new ImmutablePair<>(\n-                            null, AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n+                    result = Pair.of(null, AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n             } else if (schema != null && schema.isMultivalue()) {\n-                result = new ImmutablePair<>(\n-                        null, AttributeBuilder.build(mapItem.getExtAttrName(), objValues));\n+                result = Pair.of(null, AttributeBuilder.build(mapItem.getExtAttrName(), objValues));\n             } else {\n-                result = new ImmutablePair<>(\n-                        null, objValues.isEmpty()\n+                result = Pair.of(null, objValues.isEmpty()\n                         ? AttributeBuilder.build(mapItem.getExtAttrName())\n                         : AttributeBuilder.build(mapItem.getExtAttrName(), objValues.iterator().next()));\n             }\n@@ -484,7 +557,7 @@ public List<PlainAttrValue> getIntValues(\n \n         List<PlainAttrValue> transformed = values;\n         if (transform) {\n-            for (MappingItemTransformer transformer : MappingUtils.getMappingItemTransformers(mapItem)) {\n+            for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem)) {\n                 transformed = transformer.beforePropagation(mapItem, any, transformed);\n             }\n             LOG.debug(\"Transformed values: {}\", values);\n@@ -517,6 +590,14 @@ public String getConnObjectKeyValue(final Any<?> any, final Provision provision)\n                 : values.get(0).getValueAsString();\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public String getConnObjectKeyValue(final Realm realm, final OrgUnit orgUnit) {\n+        OrgUnitItem orgUnitItem = orgUnit.getConnObjectKeyItem();\n+\n+        return getIntValue(realm, orgUnitItem);\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public void setIntValues(\n@@ -525,7 +606,7 @@ public void setIntValues(\n         List<Object> values = null;\n         if (attr != null) {\n             values = attr.getValue();\n-            for (MappingItemTransformer transformer : MappingUtils.getMappingItemTransformers(mapItem)) {\n+            for (ItemTransformer transformer : MappingUtils.getItemTransformers(mapItem)) {\n                 values = transformer.beforePull(mapItem, anyTO, values);\n             }\n         }\n@@ -679,4 +760,36 @@ public void setIntValues(\n             }\n         }\n     }\n+\n+    @Override\n+    public void setIntValues(final OrgUnitItem orgUnitItem, final Attribute attr, final RealmTO realmTO) {\n+        List<Object> values = null;\n+        if (attr != null) {\n+            values = attr.getValue();\n+            for (ItemTransformer transformer : MappingUtils.getItemTransformers(orgUnitItem)) {\n+                values = transformer.beforePull(orgUnitItem, realmTO, values);\n+            }\n+        }\n+\n+        if (values != null && !values.isEmpty() && values.get(0) != null) {\n+            switch (orgUnitItem.getIntAttrName()) {\n+                case \"name\":\n+                    realmTO.setName(values.get(0).toString());\n+                    break;\n+\n+                case \"fullpath\":\n+                    String parentFullPath = StringUtils.substringBeforeLast(values.get(0).toString(), \"/\");\n+                    Realm parent = realmDAO.findByFullPath(parentFullPath);\n+                    if (parent == null) {\n+                        LOG.warn(\"Could not find Realm with path {}, ignoring\", parentFullPath);\n+                    } else {\n+                        realmTO.setParent(parent.getFullPath());\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        }\n+    }\n+\n }"},{"sha":"108b530077da41d24b65c1bde3278ecf9f02f16b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -226,7 +226,7 @@ private void fillAttr(\n     private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?> any) {\n         List<String> missingAttrNames = new ArrayList<>();\n \n-        for (MappingItem mapItem : MappingUtils.getPropagationMappingItems(provision)) {\n+        for (MappingItem mapItem : MappingUtils.getPropagationItems(provision)) {\n             IntAttrName intAttrName =\n                     intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind());\n             if (intAttrName.getSchemaType() != null) {\n@@ -346,7 +346,7 @@ protected void processAttrPatch(\n         }\n \n         for (ExternalResource resource : resources) {\n-            for (MappingItem item : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+            for (MappingItem item : MappingUtils.getPropagationItems(resource.getProvision(any.getType()))) {\n                 if (schema.getKey().equals(item.getIntAttrName())) {\n                     propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n "},{"sha":"230962a56a8cdf63637169d666de8d688829a974","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DefaultItemTransformer.java","status":"renamed","additions":9,"deletions":16,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDefaultItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDefaultItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDefaultItemTransformer.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,35 +19,28 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n- * Default (empty) implementation of {@link MappingItemTransformer}.\n+ * Default (empty) implementation of {@link ItemTransformer}.\n  */\n-public class DefaultMappingItemTransformer implements MappingItemTransformer {\n+@Transactional(readOnly = true)\n+public class DefaultItemTransformer implements ItemTransformer {\n \n-    @Transactional(readOnly = true)\n     @Override\n     public List<PlainAttrValue> beforePropagation(\n-            final MappingItem mappingItem,\n-            final Any<?> any,\n-            final List<PlainAttrValue> values) {\n+            final Item item, final Entity entity, final List<PlainAttrValue> values) {\n \n         return values;\n     }\n \n-    @Transactional(readOnly = true)\n     @Override\n-    public List<Object> beforePull(\n-            final MappingItem mappingItem,\n-            final AnyTO anyTO,\n-            final List<Object> values) {\n-\n+    public List<Object> beforePull(final Item item, final EntityTO entityTO, final List<Object> values) {\n         return values;\n     }\n ","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DefaultMappingItemTransformer.java"},{"sha":"ae31618bca1db757a5b4b439e325762df8005643","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java","status":"renamed","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -24,14 +24,15 @@\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.provisioning.api.data.JEXLMappingItemTransformer;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.data.JEXLItemTransformer;\n \n-public class JEXLMappingItemTransformerImpl\n-        extends DefaultMappingItemTransformer implements JEXLMappingItemTransformer {\n+public class JEXLItemTransformerImpl extends DefaultItemTransformer implements JEXLItemTransformer {\n \n     private String propagationJEXL;\n \n@@ -49,17 +50,19 @@ public void setPullJEXL(final String pullJEXL) {\n \n     @Override\n     public List<PlainAttrValue> beforePropagation(\n-            final MappingItem mappingItem,\n-            final Any<?> any,\n+            final Item item,\n+            final Entity entity,\n             final List<PlainAttrValue> values) {\n \n         if (StringUtils.isNotBlank(propagationJEXL) && values != null) {\n             for (PlainAttrValue value : values) {\n                 JexlContext jexlContext = new MapContext();\n-                if (any != null) {\n-                    JexlUtils.addFieldsToContext(any, jexlContext);\n-                    JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n-                    JexlUtils.addDerAttrsToContext(any, jexlContext);\n+                if (entity != null) {\n+                    JexlUtils.addFieldsToContext(entity, jexlContext);\n+                    if (entity instanceof Any) {\n+                        JexlUtils.addPlainAttrsToContext(((Any<?>) entity).getPlainAttrs(), jexlContext);\n+                        JexlUtils.addDerAttrsToContext(((Any<?>) entity), jexlContext);\n+                    }\n                 }\n                 jexlContext.set(\"value\", value.getValueAsString());\n \n@@ -69,31 +72,31 @@ public List<PlainAttrValue> beforePropagation(\n             return values;\n         }\n \n-        return super.beforePropagation(mappingItem, any, values);\n+        return super.beforePropagation(item, entity, values);\n     }\n \n     @Override\n     public List<Object> beforePull(\n-            final MappingItem mappingItem,\n-            final AnyTO anyTO,\n+            final Item item,\n+            final EntityTO entityTO,\n             final List<Object> values) {\n \n         if (StringUtils.isNotBlank(pullJEXL) && values != null) {\n             List<Object> newValues = new ArrayList<>(values.size());\n             for (Object value : values) {\n                 JexlContext jexlContext = new MapContext();\n                 jexlContext.set(\"value\", value);\n-                if (anyTO == null) {\n-                    newValues.add(JexlUtils.evaluate(pullJEXL, jexlContext));\n+                if (entityTO instanceof AnyTO) {\n+                    newValues.add(JexlUtils.evaluate(pullJEXL, (AnyTO) entityTO, jexlContext));\n                 } else {\n-                    newValues.add(JexlUtils.evaluate(pullJEXL, anyTO, jexlContext));\n+                    newValues.add(JexlUtils.evaluate(pullJEXL, jexlContext));\n                 }\n             }\n \n             return newValues;\n         }\n \n-        return super.beforePull(mappingItem, anyTO, values);\n+        return super.beforePull(item, entityTO, values);\n     }\n \n }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLMappingItemTransformerImpl.java"},{"sha":"ba6da6334c0bf6fec7c200e1b410739442ea110e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":69,"deletions":26,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -27,7 +27,8 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemContainerTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.OrgUnitTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n@@ -58,7 +59,9 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n@@ -76,7 +79,7 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\" };\n+    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\" };\n \n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n@@ -126,7 +129,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             List<ExternalResourceHistoryConf> history = resourceHistoryConfDAO.findByEntity(resource);\n             long maxHistorySize = confDAO.find(\"resource.conf.history.size\", \"10\").getValues().get(0).getLongValue();\n             if (maxHistorySize < history.size()) {\n-            // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n+                // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n                 for (int i = 0; i < history.size() - maxHistorySize; i++) {\n                     resourceHistoryConfDAO.delete(history.get(history.size() - 1).getKey());\n                 }\n@@ -275,19 +278,60 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n             }\n             orgUnit.setObjectClass(new ObjectClass(orgUnitTO.getObjectClass()));\n \n-            if (orgUnitTO.getExtAttrName() == null) {\n-                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidOrgUnit);\n-                sce.getElements().add(\"Null extAttrName\");\n-                throw sce;\n-            }\n-            orgUnit.setExtAttrName(orgUnitTO.getExtAttrName());\n-\n             if (orgUnitTO.getConnObjectLink() == null) {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidOrgUnit);\n                 sce.getElements().add(\"Null connObjectLink\");\n                 throw sce;\n             }\n             orgUnit.setConnObjectLink(orgUnitTO.getConnObjectLink());\n+\n+            SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+            SyncopeClientException invalidMapping = SyncopeClientException.build(\n+                    ClientExceptionType.InvalidMapping);\n+            SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n+                    ClientExceptionType.RequiredValuesMissing);\n+\n+            orgUnit.getItems().clear();\n+            for (ItemTO itemTO : orgUnitTO.getItems()) {\n+                if (itemTO == null) {\n+                    LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n+                    invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n+                } else if (itemTO.getIntAttrName() == null) {\n+                    requiredValuesMissing.getElements().add(\"intAttrName\");\n+                    scce.addException(requiredValuesMissing);\n+                } else {\n+                    if (!\"name\".equals(itemTO.getIntAttrName()) && !\"fullpath\".equals(itemTO.getIntAttrName())) {\n+                        LOG.error(\"Only 'name' and 'fullpath' are supported for Realms\");\n+                        invalidMapping.getElements().add(\"Only 'name' and 'fullpath' are supported for Realms\");\n+                    } else {\n+                        // no mandatory condition implies mandatory condition false\n+                        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                                ? \"false\" : itemTO.getMandatoryCondition())) {\n+\n+                            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n+                                    ClientExceptionType.InvalidValues);\n+                            invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                            scce.addException(invalidMandatoryCondition);\n+                        }\n+\n+                        OrgUnitItem item = entityFactory.newEntity(OrgUnitItem.class);\n+                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n+                        item.setOrgUnit(orgUnit);\n+                        if (item.isConnObjectKey()) {\n+                            orgUnit.setConnObjectKeyItem(item);\n+                        } else {\n+                            orgUnit.add(item);\n+                        }\n+\n+                    }\n+                }\n+            }\n+            if (!invalidMapping.getElements().isEmpty()) {\n+                scce.addException(invalidMapping);\n+            }\n+            if (scce.hasExceptions()) {\n+                throw scce;\n+            }\n         }\n \n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n@@ -328,10 +372,10 @@ private void populateMapping(\n         SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n                 ClientExceptionType.RequiredValuesMissing);\n \n-        for (MappingItemTO itemTO : mappingTO.getItems()) {\n+        for (ItemTO itemTO : mappingTO.getItems()) {\n             if (itemTO == null) {\n-                LOG.error(\"Null {}\", MappingItemTO.class.getSimpleName());\n-                invalidMapping.getElements().add(\"Null \" + MappingItemTO.class.getSimpleName());\n+                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n             } else if (itemTO.getIntAttrName() == null) {\n                 requiredValuesMissing.getElements().add(\"intAttrName\");\n                 scce.addException(requiredValuesMissing);\n@@ -377,7 +421,7 @@ private void populateMapping(\n                         }\n \n                         MappingItem item = entityFactory.newEntity(MappingItem.class);\n-                        BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n+                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n                         item.setMapping(mapping);\n                         if (item.isConnObjectKey()) {\n                             if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n@@ -442,18 +486,16 @@ private void populateMapping(\n         }\n     }\n \n-    private void populateMappingTO(final Mapping mapping, final MappingTO mappingTO) {\n-        mappingTO.setConnObjectLink(mapping.getConnObjectLink());\n-\n-        for (MappingItem item : mapping.getItems()) {\n-            MappingItemTO itemTO = new MappingItemTO();\n+    private void populateItems(final List<? extends Item> items, final ItemContainerTO containerTO) {\n+        for (Item item : items) {\n+            ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n-            BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n \n             if (itemTO.isConnObjectKey()) {\n-                mappingTO.setConnObjectKeyItem(itemTO);\n+                containerTO.setConnObjectKeyItem(itemTO);\n             } else {\n-                mappingTO.add(itemTO);\n+                containerTO.add(itemTO);\n             }\n         }\n     }\n@@ -484,17 +526,18 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n             if (provision.getMapping() != null) {\n                 MappingTO mappingTO = new MappingTO();\n                 provisionTO.setMapping(mappingTO);\n-                populateMappingTO(provision.getMapping(), mappingTO);\n+                mappingTO.setConnObjectLink(provision.getMapping().getConnObjectLink());\n+                populateItems(provision.getMapping().getItems(), mappingTO);\n             }\n \n             for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n                 provisionTO.getVirSchemas().add(virSchema.getKey());\n \n                 MappingItem linkingMappingItem = virSchema.asLinkingMappingItem();\n \n-                MappingItemTO itemTO = new MappingItemTO();\n+                ItemTO itemTO = new ItemTO();\n                 itemTO.setKey(linkingMappingItem.getKey());\n-                BeanUtils.copyProperties(linkingMappingItem, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+                BeanUtils.copyProperties(linkingMappingItem, itemTO, ITEM_IGNORE_PROPERTIES);\n \n                 provisionTO.getMapping().getLinkingItems().add(itemTO);\n             }\n@@ -509,8 +552,8 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n             orgUnitTO.setKey(orgUnit.getKey());\n             orgUnitTO.setObjectClass(orgUnit.getObjectClass().getObjectClassValue());\n             orgUnitTO.setSyncToken(orgUnit.getSerializedSyncToken());\n-            orgUnitTO.setExtAttrName(orgUnit.getExtAttrName());\n             orgUnitTO.setConnObjectLink(orgUnit.getConnObjectLink());\n+            populateItems(orgUnit.getItems(), orgUnitTO);\n \n             resourceTO.setOrgUnit(orgUnitTO);\n         }"},{"sha":"b24c85c52f0c2d5586bd503a4af4bd0958b1bce3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":15,"deletions":32,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -51,9 +51,7 @@\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -69,15 +67,12 @@\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.ResultsHandler;\n import org.identityconnectors.framework.common.objects.Uid;\n-import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -119,12 +114,6 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected GroupDAO groupDAO;\n \n-    /**\n-     * Realm DAO.\n-     */\n-    @Autowired\n-    protected RealmDAO realmDAO;\n-\n     /**\n      * Task DAO.\n      */\n@@ -396,7 +385,7 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n                     ? null\n                     : orgUnit == null\n                             ? getRemoteObject(task, connector, provision, false)\n-                            : getRemoteObject(task, connector, orgUnit);\n+                            : getRemoteObject(task, connector, orgUnit, false);\n \n             for (PropagationActions action : actions) {\n                 action.before(task, beforeObj);\n@@ -463,7 +452,7 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n                             ? null\n                             : orgUnit == null\n                                     ? getRemoteObject(task, connector, provision, true)\n-                                    : getRemoteObject(task, connector, orgUnit);\n+                                    : getRemoteObject(task, connector, orgUnit, true);\n                 } catch (Exception ignore) {\n                     // ignore exception\n                     LOG.error(\"Error retrieving after object\", ignore);\n@@ -621,7 +610,7 @@ protected ConnectorObject getRemoteObject(\n             obj = connector.getObject(new ObjectClass(task.getObjectClassName()),\n                     new Uid(connObjectKey),\n                     MappingUtils.buildOperationOptions(IteratorUtils.chainedIterator(\n-                            MappingUtils.getPropagationMappingItems(provision).iterator(),\n+                            MappingUtils.getPropagationItems(provision).iterator(),\n                             linkingMappingItems.iterator())));\n \n             for (MappingItem item : linkingMappingItems) {\n@@ -650,37 +639,31 @@ protected ConnectorObject getRemoteObject(\n      * @param connector connector facade proxy.\n      * @param task current propagation task.\n      * @param orgUnit orgUnit\n+     * @param latest 'FALSE' to retrieve object using old connObjectKey if not null.\n      * @return remote connector object.\n      */\n     protected ConnectorObject getRemoteObject(\n             final PropagationTask task,\n             final Connector connector,\n-            final OrgUnit orgUnit) {\n+            final OrgUnit orgUnit,\n+            final boolean latest) {\n \n-        Realm realm = realmDAO.find(task.getEntityKey());\n-        if (realm == null) {\n-            return null;\n-        }\n+        String connObjectKey = latest || task.getOldConnObjectKey() == null\n+                ? task.getConnObjectKey()\n+                : task.getOldConnObjectKey();\n \n-        final ConnectorObject[] obj = new ConnectorObject[1];\n+        ConnectorObject obj = null;\n         try {\n-            connector.search(new ObjectClass(task.getObjectClassName()),\n-                    new EqualsFilter(AttributeBuilder.build(orgUnit.getExtAttrName(), realm.getName())),\n-                    new ResultsHandler() {\n-\n-                @Override\n-                public boolean handle(final ConnectorObject connectorObject) {\n-                    obj[0] = connectorObject;\n-                    return false;\n-                }\n-            }, MappingUtils.buildOperationOptions(orgUnit));\n+            obj = connector.getObject(new ObjectClass(task.getObjectClassName()),\n+                    new Uid(connObjectKey),\n+                    MappingUtils.buildOperationOptions(MappingUtils.getPropagationItems(orgUnit).iterator()));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;\n         } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", task.getConnObjectKey(), ignore);\n+            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n         }\n \n-        return obj[0];\n+        return obj;\n     }\n }"},{"sha":"c826f6b275d28a7d6b3b6103cfcb37b7bbd74cd4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":8,"deletions":28,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -28,8 +28,6 @@\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.jexl3.JexlContext;\n-import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n@@ -68,7 +66,6 @@\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -204,8 +201,8 @@ public List<PropagationTask> getUserUpdateTasks(\n         return getUpdateTasks(\n                 userDAO.authFind(wfResult.getResult().getKey().getKey()),\n                 wfResult.getResult().getKey().getPassword() == null\n-                        ? null\n-                        : wfResult.getResult().getKey().getPassword().getValue(),\n+                ? null\n+                : wfResult.getResult().getKey().getPassword().getValue(),\n                 changePwd,\n                 wfResult.getResult().getValue(),\n                 wfResult.getPropByRes(),\n@@ -381,9 +378,9 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n         for (Map.Entry<String, ResourceOperation> entry : propByRes.asMap().entrySet()) {\n             ExternalResource resource = resourceDAO.find(entry.getKey());\n             Provision provision = resource == null ? null : resource.getProvision(any.getType());\n-            List<MappingItem> mappingItems = provision == null\n+            List<? extends MappingItem> mappingItems = provision == null\n                     ? Collections.<MappingItem>emptyList()\n-                    : MappingUtils.getPropagationMappingItems(provision);\n+                    : MappingUtils.getPropagationItems(provision);\n \n             if (resource == null) {\n                 LOG.error(\"Invalid resource name specified: {}, ignoring...\", entry.getKey());\n@@ -484,28 +481,11 @@ public List<PropagationTask> createTasks(\n                 task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());\n                 task.setEntityKey(realm.getKey());\n                 task.setOperation(entry.getValue());\n+                task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n-                Set<Attribute> preparedAttrs = new HashSet<>();\n-                preparedAttrs.add(AttributeBuilder.build(orgUnit.getExtAttrName(), realm.getName()));\n-\n-                JexlContext jexlContext = new MapContext();\n-                JexlUtils.addFieldsToContext(realm, jexlContext);\n-                String evalConnObjectLink = JexlUtils.evaluate(orgUnit.getConnObjectLink(), jexlContext);\n-                if (StringUtils.isBlank(evalConnObjectLink)) {\n-                    // add connObjectKey as __NAME__ attribute ...\n-                    LOG.debug(\"Add connObjectKey [{}] as __NAME__\", realm.getName());\n-                    preparedAttrs.add(new Name(realm.getName()));\n-                } else {\n-                    LOG.debug(\"Add connObjectLink [{}] as __NAME__\", evalConnObjectLink);\n-                    preparedAttrs.add(new Name(evalConnObjectLink));\n-\n-                    // connObjectKey not propagated: it will be used to set the value for __UID__ attribute\n-                    LOG.debug(\"connObjectKey will be used just as __UID__ attribute\");\n-                }\n-\n-                task.setConnObjectKey(realm.getName());\n-\n-                task.setAttributes(preparedAttrs);\n+                Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(realm, orgUnit);\n+                task.setConnObjectKey(preparedAttrs.getKey());\n+                task.setAttributes(preparedAttrs.getValue());\n \n                 tasks.add(task);\n "},{"sha":"1e93b92e1d6ab28d1475e1ec8f436ed1223d712d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -178,7 +178,6 @@ protected List<ProvisioningReport> assign(\n         }\n \n         AnyTO anyTO = connObjectUtils.getAnyTO(delta.getObject(), profile.getTask(), provision, anyUtils);\n-\n         anyTO.getResources().add(profile.getTask().getResource().getKey());\n \n         ProvisioningReport result = new ProvisioningReport();\n@@ -324,9 +323,10 @@ protected List<ProvisioningReport> update(\n                 result.setName(getName(before));\n             }\n \n-            Result resultStatus;\n-            Object output;\n             if (!profile.isDryRun()) {\n+                Result resultStatus;\n+                Object output;\n+\n                 if (before == null) {\n                     resultStatus = Result.FAILURE;\n                     output = null;\n@@ -395,16 +395,13 @@ protected List<ProvisioningReport> deprovision(\n             return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        LOG.debug(\"About to update {}\", anys);\n+        LOG.debug(\"About to deprovision {}\", anys);\n \n-        final List<ProvisioningReport> updResults = new ArrayList<>();\n+        final List<ProvisioningReport> results = new ArrayList<>();\n \n         for (String key : anys) {\n             LOG.debug(\"About to unassign resource {}\", key);\n \n-            Object output;\n-            Result resultStatus;\n-\n             ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.DELETE);\n             result.setAnyType(provision.getAnyType().getKey());\n@@ -419,6 +416,9 @@ protected List<ProvisioningReport> deprovision(\n             }\n \n             if (!profile.isDryRun()) {\n+                Object output;\n+                Result resultStatus;\n+\n                 if (before == null) {\n                     resultStatus = Result.FAILURE;\n                     output = null;\n@@ -487,10 +487,10 @@ protected List<ProvisioningReport> deprovision(\n                         ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n                         : MatchingRule.toEventName(MatchingRule.DEPROVISION), resultStatus, before, output, delta);\n             }\n-            updResults.add(result);\n+            results.add(result);\n         }\n \n-        return updResults;\n+        return results;\n     }\n \n     protected List<ProvisioningReport> link(\n@@ -510,14 +510,11 @@ protected List<ProvisioningReport> link(\n \n         LOG.debug(\"About to update {}\", anys);\n \n-        final List<ProvisioningReport> updResults = new ArrayList<>();\n+        final List<ProvisioningReport> results = new ArrayList<>();\n \n         for (String key : anys) {\n             LOG.debug(\"About to unassign resource {}\", key);\n \n-            Object output;\n-            Result resultStatus;\n-\n             ProvisioningReport result = new ProvisioningReport();\n             result.setOperation(ResourceOperation.NONE);\n             result.setAnyType(provision.getAnyType().getKey());\n@@ -532,6 +529,9 @@ protected List<ProvisioningReport> link(\n             }\n \n             if (!profile.isDryRun()) {\n+                Object output;\n+                Result resultStatus;\n+\n                 if (before == null) {\n                     resultStatus = Result.FAILURE;\n                     output = null;\n@@ -585,10 +585,10 @@ protected List<ProvisioningReport> link(\n                         ? MatchingRule.toEventName(MatchingRule.UNLINK)\n                         : MatchingRule.toEventName(MatchingRule.LINK), resultStatus, before, output, delta);\n             }\n-            updResults.add(result);\n+            results.add(result);\n         }\n \n-        return updResults;\n+        return results;\n     }\n \n     protected List<ProvisioningReport> delete(\n@@ -605,7 +605,7 @@ protected List<ProvisioningReport> delete(\n \n         LOG.debug(\"About to delete {}\", anys);\n \n-        List<ProvisioningReport> delResults = new ArrayList<>();\n+        List<ProvisioningReport> results = new ArrayList<>();\n \n         SyncDelta workingDelta = delta;\n         for (String key : anys) {\n@@ -648,7 +648,7 @@ protected List<ProvisioningReport> delete(\n                     finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, workingDelta);\n                 }\n \n-                delResults.add(result);\n+                results.add(result);\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", provision.getAnyType().getKey(), key, e);\n             } catch (DelegatedAdministrationException e) {\n@@ -658,7 +658,7 @@ protected List<ProvisioningReport> delete(\n             }\n         }\n \n-        return delResults;\n+        return results;\n     }\n \n     protected ProvisioningReport ignore("},{"sha":"d5b20934700ee479523178804457c9cedeeeadcf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -76,10 +75,10 @@ public SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n+    public <M extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any,\n+            final EntityTO entityTO,\n             final M anyPatch) throws JobExecutionException {\n \n         if (anyPatch instanceof UserPatch) {"},{"sha":"93448357bd744c23fdf1c7132a9c0f446c5dcebe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultPullActions.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultPullActions.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n@@ -38,10 +37,10 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <A extends AnyTO, P extends AnyPatch> SyncDelta beforeUpdate(\n+    public <P extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any,\n+            final EntityTO entityTO,\n             final P anyMod) throws JobExecutionException {\n \n         return delta;"},{"sha":"f11a20edb42df148a12b4b61c6e08d8c9ad104b1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -70,10 +69,10 @@ public SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n+    public <M extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any,\n+            final EntityTO entityTO,\n             final M anyPatch) throws JobExecutionException {\n \n         if (anyPatch instanceof UserPatch) {"},{"sha":"81bfd70aea569519f96f49a3707bb88d09f20056","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPlainAttrsPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPlainAttrsPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPlainAttrsPullCorrelationRule.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -27,11 +27,11 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class PlainAttrsPullCorrelationRule implements PullCorrelationRule {\n \n@@ -47,7 +47,7 @@ public PlainAttrsPullCorrelationRule(final String[] plainSchemaNames, final Prov\n     @Override\n     public SearchCond getSearchCond(final ConnectorObject connObj) {\n         Map<String, MappingItem> mappingItems = new HashMap<>();\n-        for (MappingItem item : MappingUtils.getPullMappingItems(provision)) {\n+        for (MappingItem item : MappingUtils.getPullItems(provision)) {\n             mappingItems.put(item.getIntAttrName(), item);\n         }\n \n@@ -65,7 +65,7 @@ public SearchCond getSearchCond(final ConnectorObject connObj) {\n             }\n \n             List<Object> values = attr.getValue();\n-            for (MappingItemTransformer transformer : MappingUtils.getMappingItemTransformers(mappingItem)) {\n+            for (ItemTransformer transformer : MappingUtils.getItemTransformers(mappingItem)) {\n                 values = transformer.beforePull(mappingItem, null, values);\n             }\n "},{"sha":"3520db036deb2f0a580372f7f62898628e9e7248","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -151,10 +151,10 @@ protected String doExecuteProvisioning(\n         // First OrgUnits...\n         if (pullTask.getResource().getOrgUnit() != null) {\n             OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n-            OperationOptions options = MappingUtils.buildOperationOptions(orgUnit);\n+            OperationOptions options = MappingUtils.buildOperationOptions(\n+                    MappingUtils.getPullItems(orgUnit).iterator());\n \n-            SyncopePullResultHandler rhandler =\n-                    (SyncopePullResultHandler) ApplicationContextProvider.getBeanFactory().\n+            SyncopePullResultHandler rhandler = (SyncopePullResultHandler) ApplicationContextProvider.getBeanFactory().\n                     createBean(RealmPullResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n             rhandler.setProfile(profile);\n             rhandler.setPullExecutor(this);\n@@ -181,8 +181,8 @@ protected String doExecuteProvisioning(\n                     case FILTERED_RECONCILIATION:\n                         ReconciliationFilterBuilder filterBuilder =\n                                 (ReconciliationFilterBuilder) ApplicationContextProvider.getBeanFactory().\n-                                createBean(Class.forName(pullTask.getReconciliationFilterBuilderClassName()),\n-                                        AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                                        createBean(Class.forName(pullTask.getReconciliationFilterBuilderClassName()),\n+                                                AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n                         connector.filteredReconciliation(orgUnit.getObjectClass(),\n                                 filterBuilder,\n                                 rhandler,\n@@ -265,8 +265,9 @@ protected String doExecuteProvisioning(\n                         case FILTERED_RECONCILIATION:\n                             ReconciliationFilterBuilder filterBuilder =\n                                     (ReconciliationFilterBuilder) ApplicationContextProvider.getBeanFactory().\n-                                    createBean(Class.forName(pullTask.getReconciliationFilterBuilderClassName()),\n-                                            AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                                            createBean(\n+                                                    Class.forName(pullTask.getReconciliationFilterBuilderClassName()),\n+                                                    AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n                             connector.filteredReconciliation(provision.getObjectClass(),\n                                     filterBuilder,\n                                     handler,"},{"sha":"819c5f3337ea7b08037b5884ce8c89f60d5dccc6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":60,"deletions":5,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.PullPolicySpec;\n@@ -31,24 +32,27 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -62,7 +66,9 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.pushpull.PullCorrelationRule;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n @Transactional(readOnly = true)\n @Component\n@@ -100,6 +106,9 @@ public class PullUtils {\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n@@ -130,7 +139,7 @@ public String findMatchingAnyKey(\n             public boolean handle(final ConnectorObject obj) {\n                 return found.add(obj);\n             }\n-        }, MappingUtils.buildOperationOptions(MappingUtils.getPullMappingItems(provision).iterator()));\n+        }, MappingUtils.buildOperationOptions(MappingUtils.getPullItems(provision).iterator()));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.getObjectClass(), resource, name);\n@@ -171,12 +180,10 @@ private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n     private List<String> findByConnObjectKeyItem(\n             final String uid, final Provision provision, final AnyUtils anyUtils) {\n \n-        List<String> result = new ArrayList<>();\n-\n         MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n \n         String transfUid = uid;\n-        for (MappingItemTransformer transformer : MappingUtils.getMappingItemTransformers(connObjectKeyItem)) {\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n             List<Object> output = transformer.beforePull(\n                     connObjectKeyItem,\n                     null,\n@@ -186,6 +193,8 @@ private List<String> findByConnObjectKeyItem(\n             }\n         }\n \n+        List<String> result = new ArrayList<>();\n+\n         IntAttrName intAttrName = intAttrNameParser.parse(\n                 connObjectKeyItem.getIntAttrName(),\n                 provision.getAnyType().getKind());\n@@ -323,6 +332,52 @@ public List<String> findExisting(\n         }\n     }\n \n+    public List<String> findExisting(\n+            final String uid,\n+            final ConnectorObject connObj,\n+            final OrgUnit orgUnit) {\n+\n+        OrgUnitItem connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n+\n+        String transfUid = uid;\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n+            List<Object> output = transformer.beforePull(\n+                    connObjectKeyItem,\n+                    null,\n+                    Collections.<Object>singletonList(transfUid));\n+            if (output != null && !output.isEmpty()) {\n+                transfUid = output.get(0).toString();\n+            }\n+        }\n+\n+        List<String> result = new ArrayList<>();\n+\n+        Realm realm;\n+        switch (connObjectKeyItem.getIntAttrName()) {\n+            case \"key\":\n+                realm = realmDAO.find(transfUid);\n+                if (realm != null) {\n+                    result.add(realm.getKey());\n+                }\n+                break;\n+\n+            case \"name\":\n+                CollectionUtils.collect(realmDAO.findByName(transfUid), EntityUtils.keyTransformer(), result);\n+                break;\n+\n+            case \"fullpath\":\n+                realm = realmDAO.findByFullPath(transfUid);\n+                if (realm != null) {\n+                    result.add(realm.getKey());\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n     public Boolean readEnabled(final ConnectorObject connectorObject, final ProvisioningTask task) {\n         Boolean enabled = null;\n         if (task.isSyncStatus()) {"},{"sha":"c4be4e23a467723ddd94dc141a804926f903ff59","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPullResultHandlerImpl.java","status":"modified","additions":370,"deletions":268,"changes":638,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPullResultHandlerImpl.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -18,14 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.jexl3.JexlContext;\n-import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -47,14 +43,13 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n-import org.identityconnectors.framework.common.objects.Attribute;\n+import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n@@ -66,6 +61,12 @@\n         extends AbstractRealmResultHandler<PullTask, PullActions>\n         implements SyncopePullResultHandler {\n \n+    @Autowired\n+    private PullUtils pullUtils;\n+\n+    @Autowired\n+    private ConnObjectUtils connObjectUtils;\n+\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n@@ -125,24 +126,32 @@ public boolean handle(final SyncDelta delta) {\n         }\n     }\n \n-    private ProvisioningReport assign(final SyncDelta delta, final String name) throws JobExecutionException {\n+    private List<ProvisioningReport> assign(final SyncDelta delta, final OrgUnit orgUnit) throws JobExecutionException {\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n-            return null;\n+            finalize(UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), Result.SUCCESS, null, null, delta);\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        RealmTO realmTO = new RealmTO();\n-        realmTO.setName(name);\n+        RealmTO realmTO = connObjectUtils.getRealmTO(delta.getObject(), profile.getTask(), orgUnit);\n+        if (realmTO.getFullPath() == null) {\n+            if (realmTO.getParent() == null) {\n+                realmTO.setParent(profile.getTask().getDestinatioRealm().getFullPath());\n+            }\n+\n+            realmTO.setFullPath(realmTO.getParent() + \"/\" + realmTO.getName());\n+        }\n         realmTO.getResources().add(profile.getTask().getResource().getKey());\n \n         ProvisioningReport result = new ProvisioningReport();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(REALM_TYPE);\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        result.setName(profile.getTask().getDestinatioRealm().getFullPath() + \"/\" + name);\n+        result.setName(realmTO.getFullPath());\n \n         if (profile.isDryRun()) {\n             result.setKey(null);\n+            finalize(UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), Result.SUCCESS, null, null, delta);\n         } else {\n             SyncDelta actionedDelta = delta;\n             for (PullActions action : profile.getActions()) {\n@@ -152,27 +161,36 @@ private ProvisioningReport assign(final SyncDelta delta, final String name) thro\n             create(realmTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n         }\n \n-        return result;\n+        return Collections.singletonList(result);\n     }\n \n-    private ProvisioningReport provision(final SyncDelta delta, final String name) throws JobExecutionException {\n+    private List<ProvisioningReport> provision(final SyncDelta delta, final OrgUnit orgUnit)\n+            throws JobExecutionException {\n+\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n-            return null;\n+            finalize(UnmatchingRule.toEventName(UnmatchingRule.PROVISION), Result.SUCCESS, null, null, delta);\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        RealmTO realmTO = new RealmTO();\n-        realmTO.setName(name);\n-        realmTO.getResources().add(profile.getTask().getResource().getKey());\n+        RealmTO realmTO = connObjectUtils.getRealmTO(delta.getObject(), profile.getTask(), orgUnit);\n+        if (realmTO.getFullPath() == null) {\n+            if (realmTO.getParent() == null) {\n+                realmTO.setParent(profile.getTask().getDestinatioRealm().getFullPath());\n+            }\n+\n+            realmTO.setFullPath(realmTO.getParent() + \"/\" + realmTO.getName());\n+        }\n \n         ProvisioningReport result = new ProvisioningReport();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(REALM_TYPE);\n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        result.setName(profile.getTask().getDestinatioRealm().getFullPath() + \"/\" + name);\n+        result.setName(realmTO.getFullPath());\n \n         if (profile.isDryRun()) {\n             result.setKey(null);\n+            finalize(UnmatchingRule.toEventName(UnmatchingRule.PROVISION), Result.SUCCESS, null, null, delta);\n         } else {\n             SyncDelta actionedDelta = delta;\n             for (PullActions action : profile.getActions()) {\n@@ -182,7 +200,7 @@ private ProvisioningReport provision(final SyncDelta delta, final String name) t\n             create(realmTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n         }\n \n-        return result;\n+        return Collections.singletonList(result);\n     }\n \n     private void throwIgnoreProvisionException(final SyncDelta delta, final Exception exception)\n@@ -255,293 +273,378 @@ private void create(\n         finalize(operation, resultStatus, null, output, delta);\n     }\n \n-    private ProvisioningReport update(final SyncDelta delta, final Realm realm, final String name)\n+    private List<ProvisioningReport> update(final SyncDelta delta, final List<String> keys)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            return null;\n+            finalize(MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        LOG.debug(\"About to update {}\", realm);\n-\n-        RealmTO before = binder.getRealmTO(realm, true);\n-\n-        ProvisioningReport result = new ProvisioningReport();\n-        result.setOperation(ResourceOperation.UPDATE);\n-        result.setAnyType(REALM_TYPE);\n-        result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        result.setKey(realm.getKey());\n+        LOG.debug(\"About to update {}\", keys);\n \n-        Result resultStatus;\n-        Object output;\n-        if (!profile.isDryRun()) {\n-            try {\n-                before.setName(name);\n+        List<ProvisioningReport> results = new ArrayList<>();\n \n-                PropagationByResource propByRes = binder.update(realm, before);\n-                Realm updated = realmDAO.save(realm);\n+        SyncDelta workingDelta = delta;\n+        for (String key : keys) {\n+            LOG.debug(\"About to update {}\", key);\n \n-                List<PropagationTask> tasks = propagationManager.createTasks(updated, propByRes, null);\n-                PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n+            ProvisioningReport result = new ProvisioningReport();\n+            result.setOperation(ResourceOperation.UPDATE);\n+            result.setAnyType(REALM_TYPE);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n+            result.setKey(key);\n \n-                output = updated;\n-                resultStatus = Result.SUCCESS;\n-                result.setName(updated.getFullPath());\n+            Realm realm = realmDAO.find(key);\n+            RealmTO before = binder.getRealmTO(realm, true);\n+            if (before == null) {\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n+                result.setMessage(String.format(\"Realm '%s' not found\", key));\n+            } else {\n+                result.setName(before.getFullPath());\n+            }\n \n-                LOG.debug(\"{} successfully updated\", updated);\n-            } catch (PropagationException e) {\n-                // A propagation failure doesn't imply a pull failure.\n-                // The propagation exception status will be reported into the propagation task execution.\n-                LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n-            } catch (Exception e) {\n-                throwIgnoreProvisionException(delta, e);\n+            if (!profile.isDryRun()) {\n+                Result resultStatus;\n+                Object output;\n \n-                result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n+                if (before == null) {\n+                    resultStatus = Result.FAILURE;\n+                    output = null;\n+                } else {\n+                    try {\n+                        for (PullActions action : profile.getActions()) {\n+                            workingDelta = action.beforeUpdate(profile, workingDelta, before, null);\n+                        }\n+\n+                        PropagationByResource propByRes = binder.update(realm, before);\n+                        realm = realmDAO.save(realm);\n+                        RealmTO updated = binder.getRealmTO(realm, true);\n+\n+                        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+                        taskExecutor.execute(tasks, false);\n+\n+                        for (PullActions action : profile.getActions()) {\n+                            action.after(profile, workingDelta, updated, result);\n+                        }\n+\n+                        output = updated;\n+                        resultStatus = Result.SUCCESS;\n+                        result.setName(updated.getFullPath());\n+\n+                        LOG.debug(\"{} successfully updated\", updated);\n+                    } catch (PropagationException e) {\n+                        // A propagation failure doesn't imply a pull failure.\n+                        // The propagation exception status will be reported into the propagation task execution.\n+                        LOG.error(\"Could not propagate Realm {}\", workingDelta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    } catch (Exception e) {\n+                        throwIgnoreProvisionException(workingDelta, e);\n+\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n+                        result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                        LOG.error(\"Could not update Realm {}\", workingDelta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    }\n+                }\n+                finalize(MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, workingDelta);\n             }\n-            finalize(MatchingRule.toEventName(MatchingRule.UPDATE), resultStatus, before, output, delta);\n+            results.add(result);\n         }\n \n-        return result;\n+        return results;\n     }\n \n-    private ProvisioningReport deprovision(final SyncDelta delta, final Realm realm, final boolean unlink)\n+    private List<ProvisioningReport> deprovision(final SyncDelta delta, final List<String> keys, final boolean unlink)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            return null;\n+            finalize(unlink\n+                    ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n+                    : MatchingRule.toEventName(MatchingRule.DEPROVISION), Result.SUCCESS, null, null, delta);\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        LOG.debug(\"About to deprovision {}\", realm);\n+        LOG.debug(\"About to deprovision {}\", keys);\n \n-        ProvisioningReport result = new ProvisioningReport();\n-        result.setOperation(ResourceOperation.DELETE);\n-        result.setAnyType(REALM_TYPE);\n-        result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        result.setKey(realm.getKey());\n+        final List<ProvisioningReport> results = new ArrayList<>();\n \n-        RealmTO before = binder.getRealmTO(realm, true);\n+        SyncDelta workingDelta = delta;\n+        for (String key : keys) {\n+            LOG.debug(\"About to unassign resource {}\", key);\n \n-        Object output;\n-        Result resultStatus;\n-        if (!profile.isDryRun()) {\n-            result.setName(realm.getFullPath());\n+            ProvisioningReport result = new ProvisioningReport();\n+            result.setOperation(ResourceOperation.DELETE);\n+            result.setAnyType(REALM_TYPE);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n+            result.setKey(key);\n \n-            try {\n-                if (unlink) {\n-                    for (PullActions action : profile.getActions()) {\n-                        action.beforeUnassign(profile, delta, before);\n-                    }\n-                } else {\n-                    for (PullActions action : profile.getActions()) {\n-                        action.beforeDeprovision(profile, delta, before);\n-                    }\n-                }\n+            Realm realm = realmDAO.find(key);\n+            RealmTO before = binder.getRealmTO(realm, true);\n+            if (before == null) {\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n+                result.setMessage(String.format(\"Realm '%s' not found\", key));\n+            } else {\n+                result.setName(before.getFullPath());\n+            }\n \n-                PropagationByResource propByRes = new PropagationByResource();\n-                propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n-                taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null), false);\n+            if (!profile.isDryRun()) {\n+                Object output;\n+                Result resultStatus;\n \n-                if (unlink) {\n-                    realm.getResources().remove(profile.getTask().getResource());\n-                    output = binder.getRealmTO(realmDAO.save(realm), true);\n+                if (before == null) {\n+                    resultStatus = Result.FAILURE;\n+                    output = null;\n                 } else {\n-                    output = binder.getRealmTO(realm, true);\n-                }\n-\n-                for (PullActions action : profile.getActions()) {\n-                    action.after(profile, delta, RealmTO.class.cast(output), result);\n+                    try {\n+                        if (unlink) {\n+                            for (PullActions action : profile.getActions()) {\n+                                workingDelta = action.beforeUnassign(profile, workingDelta, before);\n+                            }\n+                        } else {\n+                            for (PullActions action : profile.getActions()) {\n+                                workingDelta = action.beforeDeprovision(profile, workingDelta, before);\n+                            }\n+                        }\n+\n+                        PropagationByResource propByRes = new PropagationByResource();\n+                        propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n+                        taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null), false);\n+\n+                        if (unlink) {\n+                            realm.getResources().remove(profile.getTask().getResource());\n+                            output = binder.getRealmTO(realmDAO.save(realm), true);\n+                        } else {\n+                            output = binder.getRealmTO(realm, true);\n+                        }\n+\n+                        for (PullActions action : profile.getActions()) {\n+                            action.after(profile, workingDelta, RealmTO.class.cast(output), result);\n+                        }\n+\n+                        resultStatus = Result.SUCCESS;\n+\n+                        LOG.debug(\"{} successfully updated\", realm);\n+                    } catch (PropagationException e) {\n+                        // A propagation failure doesn't imply a pull failure.\n+                        // The propagation exception status will be reported into the propagation task execution.\n+                        LOG.error(\"Could not propagate Realm {}\", workingDelta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    } catch (Exception e) {\n+                        throwIgnoreProvisionException(workingDelta, e);\n+\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n+                        result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                        LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    }\n                 }\n-\n-                resultStatus = Result.SUCCESS;\n-\n-                LOG.debug(\"{} successfully updated\", realm);\n-            } catch (PropagationException e) {\n-                // A propagation failure doesn't imply a pull failure.\n-                // The propagation exception status will be reported into the propagation task execution.\n-                LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n-            } catch (Exception e) {\n-                throwIgnoreProvisionException(delta, e);\n-\n-                result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n+                finalize(unlink\n+                        ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n+                        : MatchingRule.toEventName(MatchingRule.DEPROVISION), resultStatus, before, output, delta);\n             }\n-\n-            finalize(unlink\n-                    ? MatchingRule.toEventName(MatchingRule.UNASSIGN)\n-                    : MatchingRule.toEventName(MatchingRule.DEPROVISION), resultStatus, before, output, delta);\n+            results.add(result);\n         }\n \n-        return result;\n+        return results;\n     }\n \n-    private ProvisioningReport link(final SyncDelta delta, final Realm realm, final boolean unlink)\n+    private List<ProvisioningReport> link(final SyncDelta delta, final List<String> keys, final boolean unlink)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformUpdate()) {\n             LOG.debug(\"PullTask not configured for update\");\n-            return null;\n+            finalize(unlink\n+                    ? MatchingRule.toEventName(MatchingRule.UNLINK)\n+                    : MatchingRule.toEventName(MatchingRule.LINK), Result.SUCCESS, null, null, delta);\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        LOG.debug(\"About to link {}\", realm);\n+        LOG.debug(\"About to link {}\", keys);\n \n-        ProvisioningReport result = new ProvisioningReport();\n-        result.setOperation(ResourceOperation.NONE);\n-        result.setAnyType(REALM_TYPE);\n-        result.setStatus(ProvisioningReport.Status.SUCCESS);\n-        result.setKey(realm.getKey());\n+        final List<ProvisioningReport> results = new ArrayList<>();\n \n-        RealmTO before = binder.getRealmTO(realm, true);\n+        SyncDelta workingDelta = delta;\n+        for (String key : keys) {\n+            LOG.debug(\"About to unassign resource {}\", key);\n \n-        Object output;\n-        Result resultStatus;\n-        if (!profile.isDryRun()) {\n-            result.setName(realm.getFullPath());\n+            ProvisioningReport result = new ProvisioningReport();\n+            result.setOperation(ResourceOperation.NONE);\n+            result.setAnyType(REALM_TYPE);\n+            result.setStatus(ProvisioningReport.Status.SUCCESS);\n+            result.setKey(key);\n \n-            try {\n-                if (unlink) {\n-                    for (PullActions action : profile.getActions()) {\n-                        action.beforeUnlink(profile, delta, before);\n-                    }\n-                } else {\n-                    for (PullActions action : profile.getActions()) {\n-                        action.beforeLink(profile, delta, before);\n-                    }\n-                }\n+            Realm realm = realmDAO.find(key);\n+            RealmTO before = binder.getRealmTO(realm, true);\n+            if (before == null) {\n+                result.setStatus(ProvisioningReport.Status.FAILURE);\n+                result.setMessage(String.format(\"Realm '%s' not found\", key));\n+            } else {\n+                result.setName(before.getFullPath());\n+            }\n \n-                if (unlink) {\n-                    realm.getResources().remove(profile.getTask().getResource());\n+            Object output;\n+            Result resultStatus;\n+            if (!profile.isDryRun()) {\n+                if (before == null) {\n+                    resultStatus = Result.FAILURE;\n+                    output = null;\n                 } else {\n-                    realm.add(profile.getTask().getResource());\n-                }\n-                output = update(delta, realm, realm.getName());\n-\n-                for (PullActions action : profile.getActions()) {\n-                    action.after(profile, delta, RealmTO.class.cast(output), result);\n+                    try {\n+                        if (unlink) {\n+                            for (PullActions action : profile.getActions()) {\n+                                workingDelta = action.beforeUnlink(profile, workingDelta, before);\n+                            }\n+                        } else {\n+                            for (PullActions action : profile.getActions()) {\n+                                workingDelta = action.beforeLink(profile, workingDelta, before);\n+                            }\n+                        }\n+\n+                        if (unlink) {\n+                            realm.getResources().remove(profile.getTask().getResource());\n+                        } else {\n+                            realm.add(profile.getTask().getResource());\n+                        }\n+                        output = update(workingDelta, Collections.singletonList(key));\n+\n+                        for (PullActions action : profile.getActions()) {\n+                            action.after(profile, workingDelta, RealmTO.class.cast(output), result);\n+                        }\n+\n+                        resultStatus = Result.SUCCESS;\n+\n+                        LOG.debug(\"{} successfully updated\", realm);\n+                    } catch (PropagationException e) {\n+                        // A propagation failure doesn't imply a pull failure.\n+                        // The propagation exception status will be reported into the propagation task execution.\n+                        LOG.error(\"Could not propagate Realm {}\", workingDelta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    } catch (Exception e) {\n+                        throwIgnoreProvisionException(workingDelta, e);\n+\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n+                        result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                        LOG.error(\"Could not update Realm {}\", workingDelta.getUid().getUidValue(), e);\n+                        output = e;\n+                        resultStatus = Result.FAILURE;\n+                    }\n                 }\n-\n-                resultStatus = Result.SUCCESS;\n-\n-                LOG.debug(\"{} successfully updated\", realm);\n-            } catch (PropagationException e) {\n-                // A propagation failure doesn't imply a pull failure.\n-                // The propagation exception status will be reported into the propagation task execution.\n-                LOG.error(\"Could not propagate Realm {}\", delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n-            } catch (Exception e) {\n-                throwIgnoreProvisionException(delta, e);\n-\n-                result.setStatus(ProvisioningReport.Status.FAILURE);\n-                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                LOG.error(\"Could not update Realm {}\", delta.getUid().getUidValue(), e);\n-                output = e;\n-                resultStatus = Result.FAILURE;\n+                finalize(unlink\n+                        ? MatchingRule.toEventName(MatchingRule.UNLINK)\n+                        : MatchingRule.toEventName(MatchingRule.LINK), resultStatus, before, output, workingDelta);\n             }\n-\n-            finalize(unlink\n-                    ? MatchingRule.toEventName(MatchingRule.UNLINK)\n-                    : MatchingRule.toEventName(MatchingRule.LINK), resultStatus, before, output, delta);\n+            results.add(result);\n         }\n \n-        return result;\n+        return results;\n     }\n \n-    private ProvisioningReport delete(final SyncDelta delta, final Realm realm)\n+    private List<ProvisioningReport> delete(final SyncDelta delta, final List<String> keys)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformDelete()) {\n             LOG.debug(\"PullTask not configured for delete\");\n-            return null;\n+            finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n+            return Collections.<ProvisioningReport>emptyList();\n         }\n \n-        LOG.debug(\"About to delete {}\", realm);\n+        LOG.debug(\"About to delete {}\", keys);\n \n-        SyncDelta workingDelta = delta;\n-        Object output;\n-        Result resultStatus = Result.FAILURE;\n+        List<ProvisioningReport> results = new ArrayList<>();\n \n-        ProvisioningReport result = new ProvisioningReport();\n-\n-        try {\n-            RealmTO before = binder.getRealmTO(realm, true);\n+        SyncDelta workingDelta = delta;\n+        for (String key : keys) {\n+            Object output;\n+            Result resultStatus = Result.FAILURE;\n \n-            result.setKey(realm.getKey());\n-            result.setName(realm.getFullPath());\n-            result.setOperation(ResourceOperation.DELETE);\n-            result.setAnyType(REALM_TYPE);\n-            result.setStatus(ProvisioningReport.Status.SUCCESS);\n+            ProvisioningReport result = new ProvisioningReport();\n \n-            if (!profile.isDryRun()) {\n-                for (PullActions action : profile.getActions()) {\n-                    workingDelta = action.beforeDelete(profile, workingDelta, before);\n+            try {\n+                result.setKey(key);\n+                result.setOperation(ResourceOperation.DELETE);\n+                result.setAnyType(REALM_TYPE);\n+                result.setStatus(ProvisioningReport.Status.SUCCESS);\n+\n+                Realm realm = realmDAO.find(key);\n+                RealmTO before = binder.getRealmTO(realm, true);\n+                if (before == null) {\n+                    result.setStatus(ProvisioningReport.Status.FAILURE);\n+                    result.setMessage(String.format(\"Realm '%s' not found\", key));\n+                } else {\n+                    result.setName(before.getFullPath());\n                 }\n \n-                try {\n-                    if (!realmDAO.findChildren(realm).isEmpty()) {\n-                        throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n-                    }\n-\n-                    Set<String> adminRealms = Collections.singleton(realm.getFullPath());\n-                    AnyCond keyCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n-                    keyCond.setSchema(\"key\");\n-                    SearchCond allMatchingCond = SearchCond.getLeafCond(keyCond);\n-                    int users = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.USER);\n-                    int groups = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n-                    int anyObjects = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n-\n-                    if (users + groups + anyObjects > 0) {\n-                        SyncopeClientException containedAnys = SyncopeClientException.build(\n-                                ClientExceptionType.AssociatedAnys);\n-                        containedAnys.getElements().add(users + \" user(s)\");\n-                        containedAnys.getElements().add(groups + \" group(s)\");\n-                        containedAnys.getElements().add(anyObjects + \" anyObject(s)\");\n-                        throw containedAnys;\n+                if (!profile.isDryRun()) {\n+                    for (PullActions action : profile.getActions()) {\n+                        workingDelta = action.beforeDelete(profile, workingDelta, before);\n                     }\n \n-                    PropagationByResource propByRes = new PropagationByResource();\n-                    for (String resource : realm.getResourceKeys()) {\n-                        propByRes.add(ResourceOperation.DELETE, resource);\n+                    try {\n+                        if (!realmDAO.findChildren(realm).isEmpty()) {\n+                            throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n+                        }\n+\n+                        Set<String> adminRealms = Collections.singleton(realm.getFullPath());\n+                        AnyCond keyCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n+                        keyCond.setSchema(\"key\");\n+                        SearchCond allMatchingCond = SearchCond.getLeafCond(keyCond);\n+                        int users = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.USER);\n+                        int groups = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n+                        int anyObjects = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n+\n+                        if (users + groups + anyObjects > 0) {\n+                            SyncopeClientException containedAnys = SyncopeClientException.build(\n+                                    ClientExceptionType.AssociatedAnys);\n+                            containedAnys.getElements().add(users + \" user(s)\");\n+                            containedAnys.getElements().add(groups + \" group(s)\");\n+                            containedAnys.getElements().add(anyObjects + \" anyObject(s)\");\n+                            throw containedAnys;\n+                        }\n+\n+                        PropagationByResource propByRes = new PropagationByResource();\n+                        for (String resource : realm.getResourceKeys()) {\n+                            propByRes.add(ResourceOperation.DELETE, resource);\n+                        }\n+                        List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n+                        taskExecutor.execute(tasks, false);\n+\n+                        realmDAO.delete(realm);\n+\n+                        output = null;\n+                        resultStatus = Result.SUCCESS;\n+\n+                        for (PullActions action : profile.getActions()) {\n+                            action.after(profile, workingDelta, before, result);\n+                        }\n+                    } catch (Exception e) {\n+                        throwIgnoreProvisionException(workingDelta, e);\n+\n+                        result.setStatus(ProvisioningReport.Status.FAILURE);\n+                        result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                        LOG.error(\"Could not delete {}\", realm, e);\n+                        output = e;\n                     }\n-                    List<PropagationTask> tasks = propagationManager.createTasks(realm, propByRes, null);\n-                    PropagationReporter propagationReporter = taskExecutor.execute(tasks, false);\n-\n-                    realmDAO.delete(realm);\n \n-                    output = null;\n-                    resultStatus = Result.SUCCESS;\n-\n-                    for (PullActions action : profile.getActions()) {\n-                        action.after(profile, workingDelta, before, result);\n-                    }\n-                } catch (Exception e) {\n-                    throwIgnoreProvisionException(delta, e);\n-\n-                    result.setStatus(ProvisioningReport.Status.FAILURE);\n-                    result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                    LOG.error(\"Could not delete {}\", realm, e);\n-                    output = e;\n+                    finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, workingDelta);\n                 }\n \n-                finalize(ResourceOperation.DELETE.name().toLowerCase(), resultStatus, before, output, workingDelta);\n+                results.add(result);\n+            } catch (DelegatedAdministrationException e) {\n+                LOG.error(\"Not allowed to read Realm {}\", key, e);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not delete Realm {}\", key, e);\n             }\n-        } catch (Exception e) {\n-            LOG.error(\"Could not delete {}\", realm, e);\n         }\n \n-        return result;\n+        return results;\n     }\n \n     private ProvisioningReport ignore(\n@@ -572,43 +675,46 @@ private void doHandle(final SyncDelta delta, final OrgUnit orgUnit) throws JobEx\n         LOG.debug(\"Process {} for {} as {}\",\n                 delta.getDeltaType(), delta.getUid().getUidValue(), delta.getObject().getObjectClass());\n \n-        Realm realm = IterableUtils.find(realmDAO.findAll(), new Predicate<Realm>() {\n+        String uid = delta.getPreviousUid() == null\n+                ? delta.getUid().getUidValue()\n+                : delta.getPreviousUid().getUidValue();\n \n-            @Override\n-            public boolean evaluate(final Realm realm) {\n-                JexlContext jexlContext = new MapContext();\n-                JexlUtils.addFieldsToContext(realm, jexlContext);\n-                String evalConnObjectLink = JexlUtils.evaluate(orgUnit.getConnObjectLink(), jexlContext);\n-\n-                return delta.getObject().getName().getNameValue().equals(evalConnObjectLink);\n-            }\n-        });\n+        List<String> keys = pullUtils.findExisting(uid, delta.getObject(), orgUnit);\n         LOG.debug(\"Match found for {} as {}: {}\",\n-                delta.getObject().getName().getNameValue(), delta.getObject().getObjectClass(), realm);\n+                delta.getUid().getUidValue(), delta.getObject().getObjectClass(), keys);\n \n-        String realmName = delta.getUid().getUidValue();\n-        Attribute nameAttr = delta.getObject().getAttributeByName(orgUnit.getExtAttrName());\n-        if (nameAttr != null && nameAttr.getValue() != null && !nameAttr.getValue().isEmpty()) {\n-            realmName = nameAttr.getValue().get(0).toString();\n+        if (keys.size() > 1) {\n+            switch (profile.getResAct()) {\n+                case IGNORE:\n+                    throw new IllegalStateException(\"More than one match \" + keys);\n+\n+                case FIRSTMATCH:\n+                    keys = keys.subList(0, 1);\n+                    break;\n+\n+                case LASTMATCH:\n+                    keys = keys.subList(keys.size() - 1, keys.size());\n+                    break;\n+\n+                default:\n+                // keep keys unmodified\n+                }\n         }\n \n         try {\n             if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n-                if (realm == null) {\n+                if (keys.isEmpty()) {\n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), assign(delta, realmName));\n+                            profile.getResults().addAll(assign(delta, orgUnit));\n                             break;\n \n                         case PROVISION:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), provision(delta, realmName));\n+                            profile.getResults().addAll(provision(delta, orgUnit));\n                             break;\n \n                         case IGNORE:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), ignore(delta, false));\n+                            profile.getResults().add(ignore(delta, false));\n                             break;\n \n                         default:\n@@ -617,43 +723,39 @@ public boolean evaluate(final Realm realm) {\n                 } else {\n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), update(delta, realm, realmName));\n+                            profile.getResults().addAll(update(delta, keys));\n                             break;\n \n                         case DEPROVISION:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), deprovision(delta, realm, false));\n+                            profile.getResults().addAll(deprovision(delta, keys, false));\n                             break;\n \n                         case UNASSIGN:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), deprovision(delta, realm, true));\n+                            profile.getResults().addAll(deprovision(delta, keys, true));\n                             break;\n \n                         case LINK:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), link(delta, realm, false));\n+                            profile.getResults().addAll(link(delta, keys, false));\n                             break;\n \n                         case UNLINK:\n-                            CollectionUtils.addIgnoreNull(\n-                                    profile.getResults(), link(delta, realm, true));\n+                            profile.getResults().addAll(link(delta, keys, true));\n                             break;\n \n                         case IGNORE:\n-                            CollectionUtils.addIgnoreNull(profile.getResults(), ignore(delta, true));\n+                            profile.getResults().add(ignore(delta, true));\n                             break;\n \n                         default:\n                         // do nothing\n                     }\n                 }\n             } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-                if (realm == null) {\n+                if (keys.isEmpty()) {\n+                    finalize(ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n                     LOG.debug(\"No match found for deletion\");\n                 } else {\n-                    CollectionUtils.addIgnoreNull(profile.getResults(), delete(delta, realm));\n+                    profile.getResults().addAll(delete(delta, keys));\n                 }\n             }\n         } catch (IllegalStateException | IllegalArgumentException e) {"},{"sha":"104276e220bf17aad91a27cb11ad20e0e43b1d5b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/RealmPushResultHandlerImpl.java","status":"modified","additions":23,"deletions":39,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FRealmPushResultHandlerImpl.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -22,6 +22,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -32,9 +33,10 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n-import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -44,10 +46,9 @@\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.ResultsHandler;\n-import org.identityconnectors.framework.common.objects.filter.EqualsFilter;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n@@ -59,7 +60,10 @@\n         implements SyncopePushResultHandler {\n \n     @Autowired\n-    protected SchedulerFactoryBean scheduler;\n+    private MappingManager mappingManager;\n+\n+    @Autowired\n+    private SchedulerFactoryBean scheduler;\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n@@ -153,39 +157,22 @@ private void assign(final Realm realm, final ProvisioningReport result) {\n         provision(update(realmTO, result), result);\n     }\n \n-    /**\n-     * Get remote object for given realm .\n-     *\n-     * @param connector connector facade proxy.\n-     * @param task current propagation task.\n-     * @param orgUnit orgUnit\n-     * @return remote connector object.\n-     */\n-    private ConnectorObject getRemoteObject(\n-            final String realmName,\n-            final Connector connector,\n-            final OrgUnit orgUnit) {\n-\n-        final ConnectorObject[] obj = new ConnectorObject[1];\n+    protected ConnectorObject getRemoteObject(final String connObjectKey, final ObjectClass objectClass) {\n+        ConnectorObject obj = null;\n         try {\n-            connector.search(orgUnit.getObjectClass(),\n-                    new EqualsFilter(AttributeBuilder.build(orgUnit.getExtAttrName(), realmName)),\n-                    new ResultsHandler() {\n-\n-                @Override\n-                public boolean handle(final ConnectorObject connectorObject) {\n-                    obj[0] = connectorObject;\n-                    return false;\n-                }\n-            }, MappingUtils.buildOperationOptions(orgUnit));\n+            Uid uid = new Uid(connObjectKey);\n+\n+            obj = profile.getConnector().getObject(objectClass,\n+                    uid,\n+                    MappingUtils.buildOperationOptions(IteratorUtils.<MappingItem>emptyIterator()));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;\n         } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", realmName, ignore);\n+            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n         }\n \n-        return obj[0];\n+        return obj;\n     }\n \n     private void doHandle(final Realm realm) throws JobExecutionException {\n@@ -202,10 +189,10 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n         Result resultStatus = null;\n \n         // Try to read remote object BEFORE any actual operation\n-        ConnectorObject beforeObj = getRemoteObject(\n-                realm.getName(),\n-                profile.getConnector(),\n-                profile.getTask().getResource().getOrgUnit());\n+        OrgUnit orgUnit = profile.getTask().getResource().getOrgUnit();\n+        String connObjecKey = mappingManager.getConnObjectKeyValue(realm, orgUnit);\n+\n+        ConnectorObject beforeObj = getRemoteObject(connObjecKey, orgUnit.getObjectClass());\n \n         if (profile.isDryRun()) {\n             if (beforeObj == null) {\n@@ -375,10 +362,7 @@ private void doHandle(final Realm realm) throws JobExecutionException {\n                     result.setStatus(ProvisioningReport.Status.SUCCESS);\n                 }\n                 resultStatus = AuditElements.Result.SUCCESS;\n-                output = getRemoteObject(\n-                        realm.getName(),\n-                        profile.getConnector(),\n-                        profile.getTask().getResource().getOrgUnit());\n+                output = getRemoteObject(connObjecKey, orgUnit.getObjectClass());\n             } catch (IgnoreProvisionException e) {\n                 throw e;\n             } catch (Exception e) {"},{"sha":"249e4882fbca914021cf04d59da7f4168c30d5ef","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -41,6 +42,8 @@\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n@@ -159,6 +162,16 @@ public <T extends AnyTO> T getAnyTO(\n         return anyTO;\n     }\n \n+    public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final OrgUnit orgUnit) {\n+        RealmTO realmTO = new RealmTO();\n+\n+        for (OrgUnitItem item : MappingUtils.getPullItems(orgUnit)) {\n+            mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO);\n+        }\n+\n+        return realmTO;\n+    }\n+\n     /**\n      * Build {@link AnyPatch} out of connector object attributes and schema mapping.\n      *\n@@ -255,7 +268,7 @@ private <T extends AnyTO> T getAnyTOFromConnObject(\n \n         // 1. fill with data from connector object\n         anyTO.setRealm(pullTask.getDestinatioRealm().getFullPath());\n-        for (MappingItem item : MappingUtils.getPullMappingItems(provision)) {\n+        for (MappingItem item : MappingUtils.getPullItems(provision)) {\n             mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), anyTO, anyUtils);\n         }\n "},{"sha":"2c71f3740eb1d6f18aa9b9bc12a5eb49f75861ee","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":110,"deletions":101,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -19,25 +19,27 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n+import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.data.JEXLMappingItemTransformer;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n-import org.apache.syncope.core.provisioning.java.data.JEXLMappingItemTransformerImpl;\n+import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.framework.common.objects.Name;\n@@ -48,6 +50,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.provisioning.api.data.JEXLItemTransformer;\n \n public final class MappingUtils {\n \n@@ -64,67 +68,68 @@ public static MappingItem getConnObjectKeyItem(final Provision provision) {\n                 : mapping.getConnObjectKeyItem();\n     }\n \n-    private static List<MappingItem> getMappingItems(final Provision provision, final MappingPurpose purpose) {\n-        List<? extends MappingItem> items = Collections.<MappingItem>emptyList();\n-        if (provision != null) {\n-            items = provision.getMapping().getItems();\n-        }\n+    public static List<? extends MappingItem> getPropagationItems(final Provision provision) {\n+        return ListUtils.select(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n \n-        List<MappingItem> result = new ArrayList<>();\n-\n-        switch (purpose) {\n-            case PULL:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.PROPAGATION != item.getPurpose()\n-                            && MappingPurpose.NONE != item.getPurpose()) {\n-\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case PROPAGATION:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.PULL != item.getPurpose()\n-                            && MappingPurpose.NONE != item.getPurpose()) {\n-\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case BOTH:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.NONE != item.getPurpose()) {\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            case NONE:\n-                for (MappingItem item : items) {\n-                    if (MappingPurpose.NONE == item.getPurpose()) {\n-                        result.add(item);\n-                    }\n-                }\n-                break;\n-\n-            default:\n-        }\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH;\n+            }\n+        });\n+    }\n \n-        return result;\n+    public static List<? extends MappingItem> getPullItems(final Provision provision) {\n+        return ListUtils.select(provision.getMapping().getItems(), new Predicate<MappingItem>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.getPurpose() == MappingPurpose.PULL || item.getPurpose() == MappingPurpose.BOTH;\n+            }\n+        });\n     }\n \n-    public static List<MappingItem> getPropagationMappingItems(final Provision provision) {\n-        return getMappingItems(provision, MappingPurpose.PROPAGATION);\n+    public static List<? extends OrgUnitItem> getPropagationItems(final OrgUnit orgUnit) {\n+        return ListUtils.select(orgUnit.getItems(), new Predicate<OrgUnitItem>() {\n+\n+            @Override\n+            public boolean evaluate(final OrgUnitItem item) {\n+                return item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH;\n+            }\n+        });\n     }\n \n-    public static List<MappingItem> getPullMappingItems(final Provision provision) {\n-        return getMappingItems(provision, MappingPurpose.PULL);\n+    public static List<? extends OrgUnitItem> getPullItems(final OrgUnit orgUnit) {\n+        return ListUtils.select(orgUnit.getItems(), new Predicate<OrgUnitItem>() {\n+\n+            @Override\n+            public boolean evaluate(final OrgUnitItem item) {\n+                return item.getPurpose() == MappingPurpose.PULL || item.getPurpose() == MappingPurpose.BOTH;\n+            }\n+        });\n+    }\n+\n+    private static Name evaluateNAME(final String evalConnObjectLink, final String connObjectKey) {\n+        // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n+        // otherwise evaluated connObjectLink expression is taken as Name().\n+        Name name;\n+        if (StringUtils.isBlank(evalConnObjectLink)) {\n+            // add connObjectKey as __NAME__ attribute ...\n+            LOG.debug(\"Add connObjectKey [{}] as __NAME__\", connObjectKey);\n+            name = new Name(connObjectKey);\n+        } else {\n+            LOG.debug(\"Add connObjectLink [{}] as __NAME__\", evalConnObjectLink);\n+            name = new Name(evalConnObjectLink);\n+\n+            // connObjectKey not propagated: it will be used to set the value for __UID__ attribute\n+            LOG.debug(\"connObjectKey will be used just as __UID__ attribute\");\n+        }\n+\n+        return name;\n     }\n \n     /**\n-     * Build __NAME__ for propagation. First look if there ia a defined connObjectLink for the given resource (and in\n+     * Build __NAME__ for propagation.\n+     * First look if there is a defined connObjectLink for the given resource (and in\n      * this case evaluate as JEXL); otherwise, take given connObjectKey.\n      *\n      * @param any given any object\n@@ -151,36 +156,51 @@ public static Name evaluateNAME(final Any<?> any, final Provision provision, fin\n             evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n         }\n \n-        // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n-        // otherwise evaluated connObjectLink expression is taken as Name().\n-        Name name;\n-        if (StringUtils.isBlank(evalConnObjectLink)) {\n-            // add connObjectKey as __NAME__ attribute ...\n-            LOG.debug(\"Add connObjectKey [{}] as __NAME__\", connObjectKey);\n-            name = new Name(connObjectKey);\n-        } else {\n-            LOG.debug(\"Add connObjectLink [{}] as __NAME__\", evalConnObjectLink);\n-            name = new Name(evalConnObjectLink);\n+        return evaluateNAME(evalConnObjectLink, connObjectKey);\n+    }\n \n-            // connObjectKey not propagated: it will be used to set the value for __UID__ attribute\n-            LOG.debug(\"connObjectKey will be used just as __UID__ attribute\");\n+    /**\n+     * Build __NAME__ for propagation.\n+     * First look if there is a defined connObjectLink for the given resource (and in\n+     * this case evaluate as JEXL); otherwise, take given connObjectKey.\n+     *\n+     * @param realm given any object\n+     * @param orgUnit external resource\n+     * @param connObjectKey connector object key\n+     * @return the value to be propagated as __NAME__\n+     */\n+    public static Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final String connObjectKey) {\n+        if (StringUtils.isBlank(connObjectKey)) {\n+            // LOG error but avoid to throw exception: leave it to the external resource\n+            LOG.error(\"Missing ConnObjectKey for '{}': \", orgUnit.getResource());\n         }\n \n-        return name;\n+        // Evaluate connObjectKey expression\n+        String connObjectLink = orgUnit == null\n+                ? null\n+                : orgUnit.getConnObjectLink();\n+        String evalConnObjectLink = null;\n+        if (StringUtils.isNotBlank(connObjectLink)) {\n+            JexlContext jexlContext = new MapContext();\n+            JexlUtils.addFieldsToContext(realm, jexlContext);\n+            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n+        }\n+\n+        return evaluateNAME(evalConnObjectLink, connObjectKey);\n     }\n \n-    private static List<MappingItemTransformer> getMappingItemTransformers(\n+    private static List<ItemTransformer> getMappingItemTransformers(\n             final String propagationJEXLTransformer,\n             final String pullJEXLTransformer,\n             final List<String> mappingItemTransformerClassNames) {\n \n-        List<MappingItemTransformer> result = new ArrayList<>();\n+        List<ItemTransformer> result = new ArrayList<>();\n \n         // First consider the JEXL transformation expressions\n         if (StringUtils.isNotBlank(propagationJEXLTransformer) || StringUtils.isNotBlank(pullJEXLTransformer)) {\n-            JEXLMappingItemTransformer jexlTransformer =\n-                    (JEXLMappingItemTransformer) ApplicationContextProvider.getBeanFactory().\n-                            createBean(JEXLMappingItemTransformerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME,\n+            JEXLItemTransformer jexlTransformer =\n+                    (JEXLItemTransformer) ApplicationContextProvider.getBeanFactory().\n+                            createBean(JEXLItemTransformerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME,\n                                     false);\n \n             jexlTransformer.setPropagationJEXL(propagationJEXLTransformer);\n@@ -193,7 +213,7 @@ private static List<MappingItemTransformer> getMappingItemTransformers(\n             try {\n                 Class<?> transformerClass = ClassUtils.getClass(className);\n \n-                result.add((MappingItemTransformer) ApplicationContextProvider.getBeanFactory().\n+                result.add((ItemTransformer) ApplicationContextProvider.getBeanFactory().\n                         createBean(transformerClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false));\n             } catch (Exception e) {\n                 LOG.error(\"Could not instantiate {}, ignoring...\", className, e);\n@@ -203,39 +223,39 @@ private static List<MappingItemTransformer> getMappingItemTransformers(\n         return result;\n     }\n \n-    public static List<MappingItemTransformer> getMappingItemTransformers(final MappingItemTO mappingItem) {\n+    public static List<ItemTransformer> getItemTransformers(final ItemTO item) {\n         return getMappingItemTransformers(\n-                mappingItem.getPropagationJEXLTransformer(),\n-                mappingItem.getPullJEXLTransformer(),\n-                mappingItem.getMappingItemTransformerClassNames());\n+                item.getPropagationJEXLTransformer(),\n+                item.getPullJEXLTransformer(),\n+                item.getTransformerClassNames());\n     }\n \n-    public static List<MappingItemTransformer> getMappingItemTransformers(final MappingItem mappingItem) {\n+    public static List<ItemTransformer> getItemTransformers(final Item item) {\n         return getMappingItemTransformers(\n-                mappingItem.getPropagationJEXLTransformer(),\n-                mappingItem.getPullJEXLTransformer(),\n-                mappingItem.getMappingItemTransformerClassNames());\n+                item.getPropagationJEXLTransformer(),\n+                item.getPullJEXLTransformer(),\n+                item.getTransformerClassNames());\n     }\n \n     /**\n      * Build options for requesting all mapped connector attributes.\n      *\n-     * @param mapItems mapping items\n+     * @param iterator items\n      * @return options for requesting all mapped connector attributes\n      * @see OperationOptions\n      */\n-    public static OperationOptions buildOperationOptions(final Iterator<? extends MappingItem> mapItems) {\n+    public static OperationOptions buildOperationOptions(final Iterator<? extends Item> iterator) {\n         OperationOptionsBuilder builder = new OperationOptionsBuilder();\n \n         Set<String> attrsToGet = new HashSet<>();\n         attrsToGet.add(Name.NAME);\n         attrsToGet.add(Uid.NAME);\n         attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n \n-        while (mapItems.hasNext()) {\n-            MappingItem mapItem = mapItems.next();\n-            if (mapItem.getPurpose() != MappingPurpose.NONE) {\n-                attrsToGet.add(mapItem.getExtAttrName());\n+        while (iterator.hasNext()) {\n+            Item item = iterator.next();\n+            if (item.getPurpose() != MappingPurpose.NONE) {\n+                attrsToGet.add(item.getExtAttrName());\n             }\n         }\n \n@@ -245,17 +265,6 @@ public static OperationOptions buildOperationOptions(final Iterator<? extends Ma\n         return builder.build();\n     }\n \n-    /**\n-     * Build options for requesting connector attributes for the given orgUnit.\n-     *\n-     * @param orgUnit orgUnit\n-     * @return options for requesting connector attributes for the given orgUnit\n-     * @see OperationOptions\n-     */\n-    public static OperationOptions buildOperationOptions(final OrgUnit orgUnit) {\n-        return new OperationOptionsBuilder().setAttributesToGet(Name.NAME, Uid.NAME, orgUnit.getExtAttrName()).build();\n-    }\n-\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"bc7329adc89030922594282f64ed8d1e6e91462a","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FResourceDataBinderTest.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -28,7 +28,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -122,7 +122,7 @@ public void issue42() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"userId\");\n         item.setExtAttrName(\"campo1\");\n         item.setConnObjectKey(true);"},{"sha":"8ea16714d08ead555f54faf241a45a497379a629","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPMappingPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPMappingPanel.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -23,9 +23,9 @@\n import java.util.List;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n-import org.apache.syncope.client.console.wizards.resources.MappingItemTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -40,13 +40,13 @@ public class SAML2IdPMappingPanel extends AbstractMappingPanel {\n     public SAML2IdPMappingPanel(\n             final String id,\n             final SAML2IdPTO idpTO,\n-            final MappingItemTransformersTogglePanel mapItemTransformers,\n+            final ItemTransformersTogglePanel mapItemTransformers,\n             final JEXLTransformersTogglePanel jexlTransformers) {\n \n         super(id,\n                 mapItemTransformers,\n                 jexlTransformers,\n-                new ListModel<MappingItemTO>(idpTO.getMappingItems()),\n+                new ListModel<ItemTO>(idpTO.getMappingItems()),\n                 true,\n                 true,\n                 MappingPurpose.NONE);"},{"sha":"aa9ea0f8200ecd47bae772fac62f5f7ccb7bcab7","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -32,8 +32,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n-import org.apache.syncope.client.console.wizards.resources.MappingItemTransformersTogglePanel;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.wicket.Component;\n@@ -68,8 +68,8 @@ protected WizardModel buildModelSteps(final SAML2IdPTO modelObject, final Wizard\n         Mapping mapping = new Mapping(modelObject);\n         mapping.setOutputMarkupId(true);\n \n-        MappingItemTransformersTogglePanel mapItemTransformers =\n-                new MappingItemTransformersTogglePanel(mapping, pageRef);\n+        ItemTransformersTogglePanel mapItemTransformers =\n+                new ItemTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(mapItemTransformers);\n         JEXLTransformersTogglePanel jexlTransformers = new JEXLTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(jexlTransformers);\n@@ -133,10 +133,10 @@ private static final class Mapping extends WizardStep {\n     @Override\n     protected Serializable onApplyInternal(final SAML2IdPTO modelObject) {\n         long connObjectKeyCount = IterableUtils.countMatches(\n-                modelObject.getMappingItems(), new Predicate<MappingItemTO>() {\n+                modelObject.getMappingItems(), new Predicate<ItemTO>() {\n \n             @Override\n-            public boolean evaluate(final MappingItemTO item) {\n+            public boolean evaluate(final ItemTO item) {\n                 return item.isConnObjectKey();\n             }\n         });"},{"sha":"089908e5b3e169b79427d8c9abff8efad433439b","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -51,7 +51,7 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO {\n \n     private boolean logoutSupported;\n \n-    private final List<MappingItemTO> mappingItems = new ArrayList<>();\n+    private final List<ItemTO> mappingItems = new ArrayList<>();\n \n     @Override\n     public String getKey() {\n@@ -112,24 +112,24 @@ public void setLogoutSupported(final boolean logoutSupported) {\n         this.logoutSupported = logoutSupported;\n     }\n \n-    public MappingItemTO getConnObjectKeyItem() {\n-        return IterableUtils.find(getMappingItems(), new Predicate<MappingItemTO>() {\n+    public ItemTO getConnObjectKeyItem() {\n+        return IterableUtils.find(getMappingItems(), new Predicate<ItemTO>() {\n \n             @Override\n-            public boolean evaluate(final MappingItemTO item) {\n+            public boolean evaluate(final ItemTO item) {\n                 return item.isConnObjectKey();\n             }\n         });\n     }\n \n-    protected boolean addConnObjectKeyItem(final MappingItemTO connObjectItem) {\n+    protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {\n         connObjectItem.setMandatoryCondition(\"true\");\n         connObjectItem.setConnObjectKey(true);\n \n         return this.add(connObjectItem);\n     }\n \n-    public boolean setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n+    public boolean setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n         return connObjectKeyItem == null\n                 ? remove(getConnObjectKeyItem())\n                 : addConnObjectKeyItem(connObjectKeyItem);\n@@ -138,15 +138,15 @@ public boolean setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n     @XmlElementWrapper(name = \"mappingItems\")\n     @XmlElement(name = \"mappingItem\")\n     @JsonProperty(\"mappingItems\")\n-    public List<MappingItemTO> getMappingItems() {\n+    public List<ItemTO> getMappingItems() {\n         return mappingItems;\n     }\n \n-    public boolean add(final MappingItemTO item) {\n+    public boolean add(final ItemTO item) {\n         return item == null ? false : this.mappingItems.contains(item) || this.mappingItems.add(item);\n     }\n \n-    public boolean remove(final MappingItemTO item) {\n+    public boolean remove(final ItemTO item) {\n         return this.mappingItems.remove(item);\n     }\n "},{"sha":"f86b63373697f1794e476be855c7489aad0a9bc8","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -30,7 +30,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n@@ -154,7 +154,7 @@ private List<SAML2IdPTO> importIdPs(final InputStream input) throws Exception {\n                 idpTO.setMetadata(Base64.getEncoder().encodeToString(baos.toByteArray()));\n             }\n \n-            MappingItemTO connObjectKeyItem = new MappingItemTO();\n+            ItemTO connObjectKeyItem = new ItemTO();\n             connObjectKeyItem.setIntAttrName(\"username\");\n             connObjectKeyItem.setExtAttrName(\"NameID\");\n             idpTO.setConnObjectKeyItem(connObjectKeyItem);"},{"sha":"59d6c2ca7cb3fa31aeab7b741d765cb68969769e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -66,7 +66,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n@@ -119,6 +118,7 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n @Component\n public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n@@ -340,11 +340,11 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n         return requestTO;\n     }\n \n-    private List<String> findMatchingUser(final String keyValue, final MappingItemTO connObjectKeyItem) {\n+    private List<String> findMatchingUser(final String keyValue, final ItemTO connObjectKeyItem) {\n         List<String> result = new ArrayList<>();\n \n         String transformed = keyValue;\n-        for (MappingItemTransformer transformer : MappingUtils.getMappingItemTransformers(connObjectKeyItem)) {\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n             List<Object> output = transformer.beforePull(\n                     null,\n                     null,"},{"sha":"ed244d0f579f98898c003b6ff66483c49e8e685e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCache.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -28,7 +28,7 @@\n import java.util.HashMap;\n import java.util.Map;\n import net.shibboleth.utilities.java.support.xml.XMLParserException;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.logic.init.SAML2SPLoader;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n@@ -66,7 +66,7 @@ public SAML2IdPEntity getFirst() {\n \n     public SAML2IdPEntity put(\n             final EntityDescriptor entityDescriptor,\n-            final MappingItemTO connObjectKeyItem,\n+            final ItemTO connObjectKeyItem,\n             final boolean useDeflateEncoding,\n             final SAML2BindingType bindingType)\n             throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {"},{"sha":"c060e58582a048cada3c7a6a048d43f625d09ab0","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -31,7 +31,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.opensaml.saml.common.xml.SAMLConstants;\n import org.opensaml.saml.saml2.metadata.Endpoint;\n@@ -55,7 +55,7 @@ public class SAML2IdPEntity {\n \n     private SAML2BindingType bindingType;\n \n-    private MappingItemTO connObjectKeyItem;\n+    private ItemTO connObjectKeyItem;\n \n     private final Map<String, Endpoint> ssoBindings = new HashMap<>();\n \n@@ -67,7 +67,7 @@ public class SAML2IdPEntity {\n \n     public SAML2IdPEntity(\n             final EntityDescriptor entityDescriptor,\n-            final MappingItemTO connObjectKeyItem,\n+            final ItemTO connObjectKeyItem,\n             final boolean useDeflateEncoding,\n             final SAML2BindingType bindingType,\n             final String keyPass)\n@@ -142,11 +142,11 @@ public void setBindingType(final SAML2BindingType bindingType) {\n         this.bindingType = bindingType;\n     }\n \n-    public MappingItemTO getConnObjectKeyItem() {\n+    public ItemTO getConnObjectKeyItem() {\n         return connObjectKeyItem;\n     }\n \n-    public void setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n+    public void setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n         this.connObjectKeyItem = connObjectKeyItem;\n     }\n "},{"sha":"3e80bed62d686580dd87dc3c72f5961e8eb4fda3","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP> {\n \n@@ -61,12 +61,12 @@ public boolean evaluate(final MappingItem item) {\n         }\n \n         for (MappingItem item : value.getMappingItems()) {\n-            for (String className : item.getMappingItemTransformerClassNames()) {\n+            for (String className : item.getTransformerClassNames()) {\n                 Class<?> actionsClass = null;\n                 boolean isAssignable = false;\n                 try {\n                     actionsClass = Class.forName(className);\n-                    isAssignable = MappingItemTransformer.class.isAssignableFrom(actionsClass);\n+                    isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n                 } catch (Exception e) {\n                     LOG.error(\"Invalid MappingItemTransformer specified: {}\", className, e);\n                 }"},{"sha":"f9f16abbabe69a13daa8f8e09197702729caa9e4","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -87,10 +87,10 @@ private void populateMapping(\n         SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n                 ClientExceptionType.RequiredValuesMissing);\n \n-        for (MappingItemTO itemTO : idpTO.getMappingItems()) {\n+        for (ItemTO itemTO : idpTO.getMappingItems()) {\n             if (itemTO == null) {\n-                LOG.error(\"Null {}\", MappingItemTO.class.getSimpleName());\n-                invalidMapping.getElements().add(\"Null \" + MappingItemTO.class.getSimpleName());\n+                LOG.error(\"Null {}\", ItemTO.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + ItemTO.class.getSimpleName());\n             } else if (itemTO.getIntAttrName() == null) {\n                 requiredValuesMissing.getElements().add(\"intAttrName\");\n                 scce.addException(requiredValuesMissing);\n@@ -194,7 +194,7 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n \n     private void populateMappingTO(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         for (MappingItem item : idp.getMappingItems()) {\n-            MappingItemTO itemTO = new MappingItemTO();\n+            ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n             BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n             itemTO.setPurpose(MappingPurpose.NONE);"},{"sha":"4209734dea89b0f81b9285d495ecc9f76da7e4a6","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -53,7 +53,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n import org.apache.syncope.core.provisioning.java.DefaultLogicActions;\n-import org.apache.syncope.core.provisioning.java.data.DefaultMappingItemTransformer;\n+import org.apache.syncope.core.provisioning.java.data.DefaultItemTransformer;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n@@ -99,9 +99,9 @@ public class ITImplementationLookup implements ImplementationLookup {\n             put(Type.PASSWORD_RULE_CONF, classNames);\n \n             classNames = new HashSet<>();\n-            classNames.add(PrefixMappingItemTransformer.class.getName());\n-            classNames.add(DefaultMappingItemTransformer.class.getName());\n-            put(Type.MAPPING_ITEM_TRANSFORMER, classNames);\n+            classNames.add(PrefixItemTransformer.class.getName());\n+            classNames.add(DefaultItemTransformer.class.getName());\n+            put(Type.ITEM_TRANSFORMER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestSampleJobDelegate.class.getName());"},{"sha":"80a386e4c2ef0637f4cf204f5d417a9be2c27f1c","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/PrefixItemTransformer.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPrefixItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPrefixItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPrefixItemTransformer.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -21,24 +21,24 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.provisioning.java.data.DefaultMappingItemTransformer;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.provisioning.java.data.DefaultItemTransformer;\n \n-public class PrefixMappingItemTransformer extends DefaultMappingItemTransformer {\n+public class PrefixItemTransformer extends DefaultItemTransformer {\n \n     public static final String PREFIX = \"PREFIX_\";\n \n     @Override\n     public List<PlainAttrValue> beforePropagation(\n-            final MappingItem mappingItem,\n-            final Any<?> any,\n+            final Item item,\n+            final Entity entity,\n             final List<PlainAttrValue> values) {\n \n         if (values == null || values.isEmpty() || values.get(0).getStringValue() == null) {\n-            return super.beforePropagation(mappingItem, any, values);\n+            return super.beforePropagation(item, entity, values);\n         } else {\n             String value = values.get(0).getStringValue();\n             values.get(0).setStringValue(PREFIX + value);\n@@ -49,12 +49,12 @@ public List<PlainAttrValue> beforePropagation(\n \n     @Override\n     public List<Object> beforePull(\n-            final MappingItem mappingItem,\n-            final AnyTO anyTO,\n+            final Item item,\n+            final EntityTO entityTO,\n             final List<Object> values) {\n \n         if (values == null || values.isEmpty() || values.get(0) == null) {\n-            return super.beforePull(mappingItem, anyTO, values);\n+            return super.beforePull(item, entityTO, values);\n         } else {\n             List<Object> newValues = new ArrayList<>(values);\n             newValues.set(0, StringUtils.substringAfter(values.get(0).toString(), PREFIX));","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/PrefixMappingItemTransformer.java"},{"sha":"72fa7987faa7210be1413b14af48a803d01a771b","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -79,10 +79,10 @@ public SyncDelta beforeAssign(\n     }\n \n     @Override\n-    public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n+    public <M extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final A any,\n+            final EntityTO entityTO,\n             final M anyPatch) throws JobExecutionException {\n \n         AttrPatch fullnamePatch = null;"},{"sha":"a57980a0022c9a808c971878444e8760b4ec27fd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/BulkActionITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBulkActionITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -144,7 +144,7 @@ private void userStatusBulkAction(final int index, final String resourceName) {\n \n         component = TESTER.getComponentFromLastRenderedPage(component.getPageRelativePath() + \":cells:1:cell:check\");\n         assertEquals(Status.ACTIVE, StatusBean.class.cast(component.getDefaultModelObject()).getStatus());\n-        assertEquals(resourceName, StatusBean.class.cast(component.getDefaultModelObject()).getResourceName());\n+        assertEquals(resourceName, StatusBean.class.cast(component.getDefaultModelObject()).getResource());\n \n         FormTester formTester = TESTER.newFormTester(\n                 TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:firstLevelContainer:\"\n@@ -181,7 +181,7 @@ private void userStatusBulkAction(final int index, final String resourceName) {\n \n         component = TESTER.getComponentFromLastRenderedPage(component.getPageRelativePath() + \":cells:1:cell:check\");\n         assertEquals(Status.SUSPENDED, StatusBean.class.cast(component.getDefaultModelObject()).getStatus());\n-        assertEquals(resourceName, StatusBean.class.cast(component.getDefaultModelObject()).getResourceName());\n+        assertEquals(resourceName, StatusBean.class.cast(component.getDefaultModelObject()).getResource());\n \n         // re-activate\n         TESTER.clickLink(\"body:realmsLI:realms\");\n@@ -236,7 +236,7 @@ private void userStatusBulkAction(final int index, final String resourceName) {\n \n         component = TESTER.getComponentFromLastRenderedPage(component.getPageRelativePath() + \":cells:1:cell:check\");\n         assertEquals(Status.ACTIVE, StatusBean.class.cast(component.getDefaultModelObject()).getStatus());\n-        assertEquals(resourceName, StatusBean.class.cast(component.getDefaultModelObject()).getResourceName());\n+        assertEquals(resourceName, StatusBean.class.cast(component.getDefaultModelObject()).getResource());\n \n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:2:outer:dialog:footer:buttons:0:button\",\n                 Constants.ON_CLICK);"},{"sha":"2ccfd7e0297eaa4ce54192a9f9ab10640919a7ba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/RealmsITCase.java","status":"modified","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FRealmsITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -181,22 +181,16 @@ public void verifyPropagation() {\n         TESTER.clickLink(component.getPageRelativePath() + \":actions:actionRepeater:0:action:action\");\n \n         TESTER.assertLabel(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:oldAttribute:field-label\", \"ou\");\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:oldAttribute:field-label\", \"ou\");\n \n         TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:0:value:oldAttribute:textField\", null);\n-\n-        TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:1:value:oldAttribute:textField\", null);\n-\n-        TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:oldAttribute:textField\", null);\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:oldAttribute:textField\", null);\n \n         TESTER.assertLabel(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:newAttribute:field-label\", \"ou\");\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:newAttribute:field-label\", \"ou\");\n \n         TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:newAttribute:textField\", \"even\");\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:newAttribute:textField\", \"even\");\n \n         TESTER.clickLink(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n                 + \"secondLevelContainer:back\");\n@@ -232,22 +226,16 @@ public void verifyPropagation() {\n         TESTER.clickLink(component.getPageRelativePath() + \":actions:actionRepeater:0:action:action\");\n \n         TESTER.assertLabel(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:oldAttribute:field-label\", \"ou\");\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:oldAttribute:field-label\", \"ou\");\n \n         TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:oldAttribute:textField\", \"even\");\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:oldAttribute:textField\", \"even\");\n \n         TESTER.assertLabel(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:newAttribute:field-label\", \"ou\");\n-\n-        TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:0:value:newAttribute:textField\", null);\n-\n-        TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:1:value:newAttribute:textField\", null);\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:newAttribute:field-label\", \"ou\");\n \n         TESTER.assertModelValue(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n-                + \"secondLevelContainer:second:remoteObject:propView:2:value:newAttribute:textField\", null);\n+                + \"secondLevelContainer:second:remoteObject:propView:4:value:newAttribute:textField\", null);\n \n         TESTER.clickLink(\"body:content:body:outerObjectsRepeater:0:outer:form:content:customResultBody:\"\n                 + \"secondLevelContainer:back\");"},{"sha":"312b632f45319ac3d40c97c1de4a8be246c10e58","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":4,"deletions":36,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -20,7 +20,6 @@\n \n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n@@ -113,53 +112,22 @@ public void editProvisioning() {\n         TESTER.executeAjaxEvent(component.getPageRelativePath() + \":res\", Constants.ON_CLICK);\n         TESTER.clickLink(\"body:toggle:container:content:togglePanelContainer:container:actions:provision\");\n \n-        // ------------------------------------------\n-        // Check for realm provisioning feature availability (SYNCOPE-874)\n-        // ------------------------------------------\n-        FormTester formTester = TESTER.newFormTester(\"body:toggle:outerObjectsRepeater:3:outer:form\");\n-        formTester.setValue(\"content:aboutRealmProvison:enableRealmsProvision:checkboxField\", true);\n-\n-        TESTER.executeAjaxEvent(\"body:toggle:outerObjectsRepeater:3:outer:form:content:aboutRealmProvison:\"\n-                + \"enableRealmsProvision:checkboxField\", Constants.ON_CHANGE);\n-\n-        assertNotNull(findComponentById(\n-                \"body:toggle:outerObjectsRepeater:3:outer:form:content:aboutRealmProvison:realmsProvisionContainer\",\n-                \"connObjectLink\"));\n-\n-        TESTER.assertLabel(\"body:toggle:outerObjectsRepeater:3:outer:form:content:aboutRealmProvison:\"\n-                + \"realmsProvisionContainer:connObjectLink:field-label\", \"Object Link\");\n-\n-        formTester.setValue(\"content:aboutRealmProvison:enableRealmsProvision:checkboxField\", false);\n-\n-        TESTER.executeAjaxEvent(\"body:toggle:outerObjectsRepeater:3:outer:form:content:aboutRealmProvison:\"\n-                + \"enableRealmsProvision:checkboxField\", Constants.ON_CHANGE);\n-\n-        try {\n-            findComponentById(\n-                    \"body:toggle:outerObjectsRepeater:3:outer:form:content:aboutRealmProvison:realmsProvisionContainer\",\n-                    \"connObjectLink\");\n-            fail();\n-        } catch (NullPointerException e) {\n-            // correct\n-        }\n-        // ------------------------------------------\n-\n         TESTER.clickLink(\"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:\"\n                 + \"content:group:beans:0:actions:actionRepeater:0:action:action\");\n \n-        formTester = TESTER.newFormTester(\n+        FormTester formTester = TESTER.newFormTester(\n                 \"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:content:wizard:form\");\n         formTester.submit(\"buttons:next\");\n \n         TESTER.assertComponent(\"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:\"\n                 + \"container:content:wizard:form:view:mapping:mappingContainer:mappings:1\", WebMarkupContainer.class);\n \n         TESTER.executeAjaxEvent(\"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:\"\n-                + \"content:wizard:form:view:mapping:mappingContainer:mappings:1:mappingItemTransformers:icon\",\n+                + \"content:wizard:form:view:mapping:mappingContainer:mappings:1:itemTransformers:icon\",\n                 Constants.ON_CLICK);\n \n         TESTER.clickLink(\"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:content:\"\n-                + \"wizard:form:view:mapping:mappingContainer:mappings:0:mappingItemTransformers:alertsLink\");\n+                + \"wizard:form:view:mapping:mappingContainer:mappings:0:itemTransformers:alertsLink\");\n \n         TESTER.assertComponent(\"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:\"\n                 + \"content:wizard:outerObjectsRepeater:0:outer:container:content:togglePanelContainer:\"\n@@ -203,7 +171,7 @@ public void createNewResurceAndProvisionRules() {\n         formTester = TESTER.newFormTester(\n                 \"body:toggle:outerObjectsRepeater:3:outer:form:content:provision:container:content:wizard:form\");\n \n-        formTester.setValue(\"view:container:type:dropDownChoiceField\", \"0\");\n+        formTester.setValue(\"view:container:type:dropDownChoiceField\", \"1\");\n         formTester.setValue(\"view:container:clazz:textField\", \"__ACCOUNT__\");\n         formTester.submit(\"buttons:next\");\n         TESTER.assertNoErrorMessage();"},{"sha":"02e744fa7ec0a3586a44884c9a382dd1a45f8e0d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -52,7 +52,7 @@\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -754,7 +754,7 @@ public void issueSYNCOPE112() {\n             MappingTO mapping = new MappingTO();\n             provisionTO.setMapping(mapping);\n \n-            MappingItemTO mapItem = new MappingItemTO();\n+            ItemTO mapItem = new ItemTO();\n             mapItem.setExtAttrName(\"uid\");\n             mapItem.setIntAttrName(\"userId\");\n             mapItem.setConnObjectKey(true);"},{"sha":"f325534f75047012b119cc1e48c7f3865f7a7410","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -67,7 +67,7 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -948,13 +948,13 @@ public void issueSYNCOPE632() {\n \n             MappingTO mapping = newLDAP.getProvision(AnyTypeKind.GROUP.name()).getMapping();\n \n-            MappingItemTO connObjectKey = mapping.getConnObjectKeyItem();\n+            ItemTO connObjectKey = mapping.getConnObjectKeyItem();\n             connObjectKey.setIntAttrName(\"displayProperty\");\n             connObjectKey.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.setConnObjectKeyItem(connObjectKey);\n             mapping.setConnObjectLink(\"'cn=' + displayProperty + ',ou=groups,o=isp'\");\n \n-            MappingItemTO description = new MappingItemTO();\n+            ItemTO description = new ItemTO();\n             description.setIntAttrName(\"key\");\n             description.setExtAttrName(\"description\");\n             description.setPurpose(MappingPurpose.PROPAGATION);"},{"sha":"6a4abd1abc256276d2e0919931de5e966c8a6a35","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n@@ -234,11 +234,11 @@ public void pull() {\n         ResourceTO newResource = resourceService.read(RESOURCE_NAME_DBPULL);\n         newResource.setKey(getUUIDString());\n \n-        MappingItemTO item = IterableUtils.find(newResource.getProvision(\"USER\").getMapping().getItems(),\n-                new Predicate<MappingItemTO>() {\n+        ItemTO item = IterableUtils.find(newResource.getProvision(\"USER\").getMapping().getItems(),\n+                new Predicate<ItemTO>() {\n \n             @Override\n-            public boolean evaluate(final MappingItemTO object) {\n+            public boolean evaluate(final ItemTO object) {\n                 return \"firstname\".equals(object.getIntAttrName());\n             }\n         });\n@@ -248,10 +248,10 @@ public boolean evaluate(final MappingItemTO object) {\n         item.setPurpose(MappingPurpose.BOTH);\n \n         item = IterableUtils.find(newResource.getProvision(\"USER\").getMapping().getItems(),\n-                new Predicate<MappingItemTO>() {\n+                new Predicate<ItemTO>() {\n \n             @Override\n-            public boolean evaluate(final MappingItemTO object) {\n+            public boolean evaluate(final ItemTO object) {\n                 return \"fullname\".equals(object.getIntAttrName());\n             }\n         });"},{"sha":"76003406a3670a603caf84a3b88a6e99df790052","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MigrationITCase.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -263,71 +263,71 @@ private void setupResource(final String connectorKey, final String anyTypeClass)\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"username\");\n         item.setExtAttrName(\"username\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setPassword(true);\n         item.setIntAttrName(\"password\");\n         item.setExtAttrName(\"__PASSWORD__\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(MIGRATION_CIPHER_ALGORITHM);\n         item.setExtAttrName(\"cipherAlgorithm\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"surname\");\n         item.setExtAttrName(\"surname\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"email\");\n         item.setExtAttrName(\"email\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"firstname\");\n         item.setExtAttrName(\"firstname\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"ctype\");\n         item.setExtAttrName(\"type\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"gender\");\n         item.setExtAttrName(\"gender\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"loginDate\");\n         item.setExtAttrName(\"loginDate\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(MIGRATION_RESOURCES_SCHEMA);\n         item.setExtAttrName(\"__RESOURCES__\");\n         item.setMandatoryCondition(\"false\");\n@@ -344,42 +344,42 @@ private void setupResource(final String connectorKey, final String anyTypeClass)\n         mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"name\");\n         item.setExtAttrName(\"name\");\n         item.setMandatoryCondition(\"true\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"show\");\n         item.setExtAttrName(\"show\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"title\");\n         item.setExtAttrName(\"title\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(MIGRATION_RESOURCES_SCHEMA);\n         item.setExtAttrName(\"__RESOURCES__\");\n         item.setMandatoryCondition(\"false\");\n         item.setPurpose(MappingPurpose.PULL);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(MIGRATION_MEMBERSHIPS_SCHEMA);\n         item.setExtAttrName(\"__MEMBERSHIPS__\");\n         item.setMandatoryCondition(\"false\");"},{"sha":"b28e25753329b4f7381459eb798c24769497104d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n@@ -151,28 +151,28 @@ public void createResourceAndPull() {\n             mapping.setConnObjectLink(\"'uid=' + username + ',ou=people,o=isp'\");\n             provisionTO.setMapping(mapping);\n \n-            MappingItemTO item = new MappingItemTO();\n+            ItemTO item = new ItemTO();\n             item.setIntAttrName(\"username\");\n             item.setExtAttrName(\"cn\");\n             item.setPurpose(MappingPurpose.BOTH);\n             mapping.setConnObjectKeyItem(item);\n \n-            item = new MappingItemTO();\n+            item = new ItemTO();\n             item.setPassword(true);\n             item.setIntAttrName(\"password\");\n             item.setExtAttrName(\"userPassword\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setMandatoryCondition(\"true\");\n             mapping.add(item);\n \n-            item = new MappingItemTO();\n+            item = new ItemTO();\n             item.setIntAttrName(\"key\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setExtAttrName(\"sn\");\n             item.setMandatoryCondition(\"true\");\n             mapping.add(item);\n \n-            item = new MappingItemTO();\n+            item = new ItemTO();\n             item.setIntAttrName(\"email\");\n             item.setPurpose(MappingPurpose.BOTH);\n             item.setExtAttrName(\"mail\");"},{"sha":"f4aa9bfac45ae461ce9dc32ee63c5c5eee23ba7f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -116,16 +116,16 @@ public void propagationJEXLTransformer() {\n         ProvisionTO provision = resource.getProvision(\"PRINTER\");\n         assertNotNull(provision);\n \n-        MappingItemTO mappingItem = IterableUtils.find(\n-                provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n+        ItemTO mappingItem = IterableUtils.find(\n+                provision.getMapping().getItems(), new Predicate<ItemTO>() {\n \n             @Override\n-            public boolean evaluate(final MappingItemTO object) {\n+            public boolean evaluate(final ItemTO object) {\n                 return \"location\".equals(object.getIntAttrName());\n             }\n         });\n         assertNotNull(mappingItem);\n-        assertTrue(mappingItem.getMappingItemTransformerClassNames().isEmpty());\n+        assertTrue(mappingItem.getTransformerClassNames().isEmpty());\n \n         String suffix = getUUIDString();\n         mappingItem.setPropagationJEXLTransformer(\"value + '\" + suffix + \"'\");"},{"sha":"c0ac469f8cf3ce63c4645248c588ed1752a2b42f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -61,7 +61,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -83,7 +83,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.ActivitiDetector;\n-import org.apache.syncope.fit.core.reference.PrefixMappingItemTransformer;\n+import org.apache.syncope.fit.core.reference.PrefixItemTransformer;\n import org.apache.syncope.fit.core.reference.TestReconciliationFilterBuilder;\n import org.apache.syncope.fit.core.reference.TestPullActions;\n import org.apache.syncope.fit.core.reference.TestPullRule;\n@@ -417,17 +417,16 @@ public void reconcileFromScriptedSQL() {\n         ProvisionTO provision = resource.getProvision(\"PRINTER\");\n         assertNotNull(provision);\n \n-        MappingItemTO mappingItem = IterableUtils.find(\n-                provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n+        ItemTO mappingItem = IterableUtils.find(provision.getMapping().getItems(), new Predicate<ItemTO>() {\n \n             @Override\n-            public boolean evaluate(final MappingItemTO object) {\n+            public boolean evaluate(final ItemTO object) {\n                 return \"location\".equals(object.getIntAttrName());\n             }\n         });\n         assertNotNull(mappingItem);\n-        mappingItem.getMappingItemTransformerClassNames().clear();\n-        mappingItem.getMappingItemTransformerClassNames().add(PrefixMappingItemTransformer.class.getName());\n+        mappingItem.getTransformerClassNames().clear();\n+        mappingItem.getTransformerClassNames().add(PrefixItemTransformer.class.getName());\n \n         try {\n             resourceService.update(resource);\n@@ -443,7 +442,7 @@ public boolean evaluate(final MappingItemTO object) {\n             // 1. create printer on external resource\n             AnyObjectTO anyObjectTO = AnyObjectITCase.getSampleTO(\"pull\");\n             String originalLocation = anyObjectTO.getPlainAttr(\"location\").getValues().get(0);\n-            assertFalse(originalLocation.startsWith(PrefixMappingItemTransformer.PREFIX));\n+            assertFalse(originalLocation.startsWith(PrefixItemTransformer.PREFIX));\n \n             anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n             assertNotNull(anyObjectTO);\n@@ -453,9 +452,9 @@ public boolean evaluate(final MappingItemTO object) {\n             ConnObjectTO connObjectTO = resourceService.\n                     readConnObject(RESOURCE_NAME_DBSCRIPTED, anyObjectTO.getType(), anyObjectTO.getKey());\n             assertFalse(anyObjectTO.getPlainAttr(\"location\").getValues().get(0).\n-                    startsWith(PrefixMappingItemTransformer.PREFIX));\n+                    startsWith(PrefixItemTransformer.PREFIX));\n             assertTrue(connObjectTO.getAttr(\"LOCATION\").getValues().get(0).\n-                    startsWith(PrefixMappingItemTransformer.PREFIX));\n+                    startsWith(PrefixItemTransformer.PREFIX));\n \n             // 3. unlink any existing printer and delete from Syncope (printer is now only on external resource)\n             PagedResult<AnyObjectTO> matchingPrinters = anyObjectService.search("},{"sha":"fe62261745819315f8665316f751b0d73ee733c7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -346,7 +346,7 @@ public void issueSYNCOPE598() {\n             MappingTO mapping = new MappingTO();\n             provisionTO.setMapping(mapping);\n \n-            MappingItemTO item = new MappingItemTO();\n+            ItemTO item = new ItemTO();\n             item.setExtAttrName(\"cn\");\n             item.setIntAttrName(schemaTO.getKey());\n             item.setConnObjectKey(true);"},{"sha":"bbe9ac52e36e3d65a720f99821f8759ec4b23025","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":34,"deletions":18,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -206,38 +206,54 @@ public void propagate() {\n         RealmTO childRealm = new RealmTO();\n         childRealm.setName(\"child\");\n         childRealm.getResources().add(RESOURCE_NAME_LDAP_ORGUNIT);\n+        RealmTO descendantRealm = new RealmTO();\n+        descendantRealm.setName(\"test\");\n+        descendantRealm.getResources().add(RESOURCE_NAME_LDAP_ORGUNIT);\n \n         // 2. check propagation\n-        ProvisioningResult<RealmTO> result =\n-                realmService.create(\"/\", realm).readEntity(new GenericType<ProvisioningResult<RealmTO>>() {\n-                });\n-        ProvisioningResult<RealmTO> resultChild =\n-                realmService.create(\"/test\", childRealm).readEntity(new GenericType<ProvisioningResult<RealmTO>>() {\n-                });\n+        ProvisioningResult<RealmTO> result = realmService.create(\"/\", realm).readEntity(\n+                new GenericType<ProvisioningResult<RealmTO>>() {\n+        });\n         assertNotNull(result);\n-        assertNotNull(resultChild);\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(1, resultChild.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, resultChild.getPropagationStatuses().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+\n+        ProvisioningResult<RealmTO> resultChild = realmService.create(\"/test\", childRealm).readEntity(\n+                new GenericType<ProvisioningResult<RealmTO>>() {\n+        });\n+        assertNotNull(resultChild);\n+        assertEquals(1, resultChild.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, resultChild.getPropagationStatuses().get(0).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, resultChild.getPropagationStatuses().get(0).getStatus());\n \n-        realm = result.getEntity();\n+        ProvisioningResult<RealmTO> resultDescendant = realmService.create(\"/test/child\", descendantRealm).readEntity(\n+                new GenericType<ProvisioningResult<RealmTO>>() {\n+        });\n+        assertNotNull(resultDescendant);\n+        assertEquals(1, resultDescendant.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, resultDescendant.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, resultDescendant.getPropagationStatuses().get(0).getStatus());\n \n         // 3. check on LDAP\n-        assertNotNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=test,o=isp\"));\n-\n-        // 3.1. check on LDAP also child realm, it should be under test organizational unit\n-        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=child,o=isp\"));\n-        assertNotNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=child,ou=test,o=isp\"));\n+        assertNotNull(\n+                getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=test,o=isp\"));\n+        assertNotNull(\n+                getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=child,ou=test,o=isp\"));\n+        assertNotNull(\n+                getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=test,ou=child,ou=test,o=isp\"));\n \n         // 4. remove realms\n+        realmService.delete(\"/test/child/test\");\n         realmService.delete(\"/test/child\");\n-        realmService.delete(realm.getFullPath());\n+        realmService.delete(\"/test\");\n \n         // 5. check on LDAP: both realms should be deleted\n-        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=test,o=isp\"));\n-        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=child,ou=test,o=isp\"));\n+        assertNull(\n+                getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=test,ou=child,ou=test,o=isp\"));\n+        assertNull(\n+                getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=child,ou=test,o=isp\"));\n+        assertNull(\n+                getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=test,o=isp\"));\n     }\n }"},{"sha":"bfa5d800d9bc22aa3bfcaa90fea9efce6660d20b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":33,"deletions":27,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.OrgUnitTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n@@ -78,19 +78,19 @@ private ResourceTO buildResourceTO(final String resourceKey) {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setExtAttrName(\"userId\");\n         item.setIntAttrName(\"userId\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setExtAttrName(\"username\");\n         item.setIntAttrName(\"key\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n         item.setConnObjectKey(false);\n@@ -134,20 +134,20 @@ public void createOverridingProps() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setExtAttrName(\"uid\");\n         item.setIntAttrName(\"userId\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.add(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setExtAttrName(\"username\");\n         item.setIntAttrName(\"key\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setExtAttrName(\"fullname\");\n         item.setIntAttrName(\"cn\");\n         item.setConnObjectKey(false);\n@@ -193,7 +193,7 @@ public void createWithSingleMappingItem() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n@@ -207,7 +207,7 @@ public void createWithSingleMappingItem() {\n \n         mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"groupId\");\n         item.setConnObjectKey(true);\n@@ -243,13 +243,13 @@ public void createWithInvalidMapping() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setExtAttrName(\"email\");\n         // missing intAttrName ...\n         mapping.add(item);\n@@ -278,13 +278,13 @@ public void createWithoutExtAttr() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"usernane\");\n         // missing extAttrName ...\n         mapping.add(item);\n@@ -308,7 +308,7 @@ public void createWithPasswordPolicy() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setExtAttrName(\"userId\");\n         item.setIntAttrName(\"userId\");\n         item.setConnObjectKey(true);\n@@ -355,7 +355,7 @@ public void update() {\n         provisionTO.setMapping(mapping);\n \n         // Update with an existing and already assigned mapping\n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setKey(\"cc973ed6-d031-4790-adab-fc059ac0c818\");\n         item.setExtAttrName(\"test3\");\n         item.setIntAttrName(\"fullname\");\n@@ -364,13 +364,13 @@ public void update() {\n \n         // Update defining new mappings\n         for (int i = 4; i < 6; i++) {\n-            item = new MappingItemTO();\n+            item = new ItemTO();\n             item.setExtAttrName(\"test\" + i);\n             item.setIntAttrName(\"fullname\");\n             item.setPurpose(MappingPurpose.BOTH);\n             mapping.add(item);\n         }\n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setExtAttrName(\"username\");\n         item.setIntAttrName(\"key\");\n         item.setConnObjectKey(true);\n@@ -382,7 +382,7 @@ public void update() {\n         assertNotNull(actual);\n \n         // check for existence\n-        Collection<MappingItemTO> mapItems = actual.getProvision(AnyTypeKind.USER.name()).getMapping().getItems();\n+        Collection<ItemTO> mapItems = actual.getProvision(AnyTypeKind.USER.name()).getMapping().getItems();\n         assertNotNull(mapItems);\n         assertEquals(4, mapItems.size());\n     }\n@@ -465,9 +465,15 @@ public void orgUnit() {\n \n         OrgUnitTO orgUnit = new OrgUnitTO();\n         orgUnit.setConnObjectLink(\"'ou=' + name + ',o=isp'\");\n-        orgUnit.setExtAttrName(\"ou\");\n         orgUnit.setObjectClass(\"organizationalUnit\");\n \n+        ItemTO item = new ItemTO();\n+        item.setIntAttrName(\"name\");\n+        item.setExtAttrName(\"ou\");\n+        item.setMandatoryCondition(\"true\");\n+        item.setPurpose(MappingPurpose.BOTH);\n+        orgUnit.setConnObjectKeyItem(item);\n+\n         resourceTO.setOrgUnit(orgUnit);\n         resourceService.update(resourceTO);\n         assertNull(resourceTO.getPropagationPriority());\n@@ -684,13 +690,13 @@ public void issueSYNCOPE368() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"name\");\n         item.setExtAttrName(\"cn\");\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"userOwner\");\n         item.setExtAttrName(\"owner\");\n         item.setPurpose(MappingPurpose.BOTH);\n@@ -729,14 +735,14 @@ public void issueSYNCOPE493() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.setConnObjectKeyItem(item);\n \n-        MappingItemTO item2 = new MappingItemTO();\n+        ItemTO item2 = new ItemTO();\n         item2.setConnObjectKey(false);\n         item2.setIntAttrName(\"gender\");\n         item2.setExtAttrName(\"gender\");\n@@ -751,7 +757,7 @@ public void issueSYNCOPE493() {\n         assertNotNull(actual.getProvision(AnyTypeKind.USER.name()).getMapping().getItems());\n         assertEquals(MappingPurpose.PROPAGATION,\n                 actual.getProvision(AnyTypeKind.USER.name()).getMapping().getConnObjectKeyItem().getPurpose());\n-        for (MappingItemTO itemTO : actual.getProvision(AnyTypeKind.USER.name()).getMapping().getItems()) {\n+        for (ItemTO itemTO : actual.getProvision(AnyTypeKind.USER.name()).getMapping().getItems()) {\n             if (\"gender\".equals(itemTO.getIntAttrName())) {\n                 assertEquals(MappingPurpose.NONE, itemTO.getPurpose());\n             }\n@@ -773,7 +779,7 @@ public void issueSYNCOPE645() {\n         MappingTO mapping = new MappingTO();\n         provision.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"icon\");\n         item.setExtAttrName(\"icon\");\n         item.setPurpose(MappingPurpose.BOTH);\n@@ -803,15 +809,15 @@ public void issueSYNCOPE888() {\n         MappingTO mapping = new MappingTO();\n         provisionTO.setMapping(mapping);\n \n-        MappingItemTO item = new MappingItemTO();\n+        ItemTO item = new ItemTO();\n         item.setIntAttrName(\"key\");\n         item.setExtAttrName(\"userId\");\n         item.setConnObjectKey(true);\n         item.setPurpose(MappingPurpose.BOTH);\n         mapping.setConnObjectKeyItem(item);\n \n         // Add mapping for a not existing internal attribute\n-        item = new MappingItemTO();\n+        item = new ItemTO();\n         item.setIntAttrName(\"locatio\");\n         item.setExtAttrName(\"location\");\n         item.setPurpose(MappingPurpose.BOTH);"},{"sha":"948c426f58637f636a74c5fa3b6ce4baa793f5db","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n@@ -150,7 +150,7 @@ public boolean evaluate(final SAML2IdPTO object) {\n \n         ssoCircle.getMappingItems().clear();\n \n-        MappingItemTO keyMapping = new MappingItemTO();\n+        ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"email\");\n         keyMapping.setExtAttrName(\"EmailAddress\");\n         ssoCircle.setConnObjectKeyItem(keyMapping);"},{"sha":"ff0d094b356a678391c1238158295767a6645373","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -611,7 +611,7 @@ public void issueSYNCOPE265() {\n     public void issueSYNCOPE354() {\n         // change resource-ldap group mapping for including uniqueMember (need for assertions below)\n         ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n-        for (MappingItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n+        for (ItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n             if (\"description\".equals(item.getExtAttrName())) {\n                 item.setExtAttrName(\"uniqueMember\");\n             }\n@@ -658,7 +658,7 @@ public void issueSYNCOPE354() {\n                 contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n \n         // 6. restore original resource-ldap group mapping\n-        for (MappingItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n+        for (ItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n             if (\"uniqueMember\".equals(item.getExtAttrName())) {\n                 item.setExtAttrName(\"description\");\n             }\n@@ -905,7 +905,7 @@ public void issueSYNCOPE493() {\n \n         MappingTO ws1NewUMapping = ws1.getProvision(AnyTypeKind.USER.name()).getMapping();\n         // change purpose from NONE to BOTH\n-        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n+        for (ItemTO itemTO : ws1NewUMapping.getItems()) {\n             if (\"firstname\".equals(itemTO.getIntAttrName())) {\n                 itemTO.setPurpose(MappingPurpose.BOTH);\n             }\n@@ -918,7 +918,7 @@ public void issueSYNCOPE493() {\n         assertNotNull(newWs1);\n \n         // check for existence\n-        Collection<MappingItemTO> mapItems = newWs1.getProvision(AnyTypeKind.USER.name()).getMapping().getItems();\n+        Collection<ItemTO> mapItems = newWs1.getProvision(AnyTypeKind.USER.name()).getMapping().getItems();\n         assertNotNull(mapItems);\n         assertEquals(7, mapItems.size());\n \n@@ -943,7 +943,7 @@ public void issueSYNCOPE493() {\n         // 4.  restore resource ws-target-resource-1 mapping\n         ws1NewUMapping = newWs1.getProvision(AnyTypeKind.USER.name()).getMapping();\n         // restore purpose from BOTH to NONE\n-        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n+        for (ItemTO itemTO : ws1NewUMapping.getItems()) {\n             if (\"firstname\".equals(itemTO.getIntAttrName())) {\n                 itemTO.setPurpose(MappingPurpose.NONE);\n             }"},{"sha":"5297257df7139a263f33f5f4aa78ee17f8ac61a6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eebca673ec43f26c711c5e16495427800180570a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=eebca673ec43f26c711c5e16495427800180570a","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -273,10 +273,10 @@ public void issueSYNCOPE397() {\n         try {\n             // remove this mapping\n             CollectionUtils.filterInverse(csv.getProvisions().get(0).getMapping().getItems(),\n-                    new Predicate<MappingItemTO>() {\n+                    new Predicate<ItemTO>() {\n \n                 @Override\n-                public boolean evaluate(final MappingItemTO item) {\n+                public boolean evaluate(final ItemTO item) {\n                     return \"email\".equals(item.getIntAttrName());\n                 }\n             });\n@@ -504,20 +504,20 @@ public void issueSYNCOPE453() {\n             MappingTO mapping = new MappingTO();\n             provisionTO.setMapping(mapping);\n \n-            MappingItemTO item = new MappingItemTO();\n+            ItemTO item = new ItemTO();\n             item.setIntAttrName(\"fullname\");\n             item.setExtAttrName(\"ID\");\n             item.setPurpose(MappingPurpose.PROPAGATION);\n             item.setConnObjectKey(true);\n             mapping.setConnObjectKeyItem(item);\n \n-            item = new MappingItemTO();\n+            item = new ItemTO();\n             item.setIntAttrName(\"username\");\n             item.setExtAttrName(\"USERNAME\");\n             item.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.getItems().add(item);\n \n-            item = new MappingItemTO();\n+            item = new ItemTO();\n             item.setIntAttrName(\"groups[\" + groupName + \"].rvirtualdata\");\n             item.setExtAttrName(\"EMAIL\");\n             item.setPurpose(MappingPurpose.PROPAGATION);\n@@ -630,10 +630,10 @@ public void issueSYNCOPE691() {\n         try {\n             ProvisionTO provision = ldap.getProvision(AnyTypeKind.USER.name());\n             assertNotNull(provision);\n-            CollectionUtils.filterInverse(provision.getMapping().getItems(), new Predicate<MappingItemTO>() {\n+            CollectionUtils.filterInverse(provision.getMapping().getItems(), new Predicate<ItemTO>() {\n \n                 @Override\n-                public boolean evaluate(final MappingItemTO item) {\n+                public boolean evaluate(final ItemTO item) {\n                     return \"mail\".equals(item.getExtAttrName());\n                 }\n             });"}]}