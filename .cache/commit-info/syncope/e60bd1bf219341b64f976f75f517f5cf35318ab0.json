{"sha":"e60bd1bf219341b64f976f75f517f5cf35318ab0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU2MGJkMWJmMjE5MzQxYjY0Zjk3NmY3NWY1MTdmNWNmMzUzMThhYjA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-24T13:07:57Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-10-24T13:07:57Z"},"message":"White noise: formatting and cleaning up\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1401665 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e9f235b2ab289ad32b45601070d160b057767cfb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e9f235b2ab289ad32b45601070d160b057767cfb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e60bd1bf219341b64f976f75f517f5cf35318ab0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e60bd1bf219341b64f976f75f517f5cf35318ab0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e60bd1bf219341b64f976f75f517f5cf35318ab0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e60bd1bf219341b64f976f75f517f5cf35318ab0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1c89f94bf6281acc2aac073fbfa30ea6828a5422","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1c89f94bf6281acc2aac073fbfa30ea6828a5422","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1c89f94bf6281acc2aac073fbfa30ea6828a5422"}],"stats":{"total":241,"additions":137,"deletions":104},"files":[{"sha":"bb4eb50f11c65e246338e998ad1a048032daea67","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=e60bd1bf219341b64f976f75f517f5cf35318ab0","patch":"@@ -128,18 +128,18 @@ protected Map<AbstractVirSchema, AbstractVirAttr> getVirAttrMap() {\n \n     public abstract void setVirtualAttributes(List<? extends AbstractVirAttr> virtualAttributes);\n \n-    protected abstract Set<ExternalResource> resources();\n+    protected abstract Set<ExternalResource> internalGetResources();\n \n     public boolean addResource(final ExternalResource resource) {\n-        return resources().add(resource);\n+        return internalGetResources().add(resource);\n     }\n \n     public boolean removeResource(final ExternalResource resource) {\n-        return resources().remove(resource);\n+        return internalGetResources().remove(resource);\n     }\n \n     public Set<ExternalResource> getResources() {\n-        return resources();\n+        return internalGetResources();\n     }\n \n     public Set<String> getResourceNames() {\n@@ -154,9 +154,9 @@ public Set<String> getResourceNames() {\n     }\n \n     public void setResources(final Set<ExternalResource> resources) {\n-        resources().clear();\n+        internalGetResources().clear();\n         if (resources != null) {\n-            resources().addAll(resources);\n+            internalGetResources().addAll(resources);\n         }\n     }\n }"},{"sha":"f8b5223ed0948d2da803b58e46a3e3c79229dd27","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":42,"deletions":29,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=e60bd1bf219341b64f976f75f517f5cf35318ab0","patch":"@@ -44,18 +44,24 @@\n public class Membership extends AbstractAttributable {\n \n     private static final long serialVersionUID = 5030106264797289469L;\n+\n     @Id\n     private Long id;\n+\n     @ManyToOne\n     private SyncopeUser syncopeUser;\n+\n     @ManyToOne\n     private SyncopeRole syncopeRole;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<MAttr> attributes;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<MDerAttr> derivedAttributes;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<MVirAttr> virtualAttributes;\n@@ -74,36 +80,36 @@ public Long getId() {\n     }\n \n     @Override\n-    protected Set<ExternalResource> resources() {\n+    protected Set<ExternalResource> internalGetResources() {\n         return Collections.emptySet();\n     }\n \n     public SyncopeRole getSyncopeRole() {\n         return syncopeRole;\n     }\n \n-    public void setSyncopeRole(SyncopeRole syncopeRole) {\n+    public void setSyncopeRole(final SyncopeRole syncopeRole) {\n         this.syncopeRole = syncopeRole;\n     }\n \n     public SyncopeUser getSyncopeUser() {\n         return syncopeUser;\n     }\n \n-    public void setSyncopeUser(SyncopeUser syncopeUser) {\n+    public void setSyncopeUser(final SyncopeUser syncopeUser) {\n         this.syncopeUser = syncopeUser;\n     }\n \n     @Override\n-    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+    public <T extends AbstractAttr> boolean addAttribute(final T attribute) {\n         if (!(attribute instanceof MAttr)) {\n             throw new ClassCastException(\"attribute is expected to be typed MAttr: \" + attribute.getClass().getName());\n         }\n         return attributes.add((MAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+    public <T extends AbstractAttr> boolean removeAttribute(final T attribute) {\n         if (!(attribute instanceof MAttr)) {\n             throw new ClassCastException(\"attribute is expected to be typed MAttr: \" + attribute.getClass().getName());\n         }\n@@ -116,25 +122,28 @@ public List<? extends AbstractAttr> getAttributes() {\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttr> attributes) {\n-        this.attributes = (List<MAttr>) attributes;\n+    public void setAttributes(final List<? extends AbstractAttr> attributes) {\n+        this.attributes.clear();\n+        if (attributes != null && !attributes.isEmpty()) {\n+            this.attributes.addAll((List<MAttr>) attributes);\n+        }\n     }\n \n     @Override\n-    public <T extends AbstractDerAttr> boolean addDerivedAttribute(T derivedAttribute) {\n-        if (!(derivedAttribute instanceof MDerAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed MDerAttr: \" + derivedAttribute.getClass().getName());\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(final T derAttr) {\n+        if (!(derAttr instanceof MDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MDerAttr: \" + derAttr.getClass().getName());\n         }\n-        return derivedAttributes.add((MDerAttr) derivedAttribute);\n+        return derivedAttributes.add((MDerAttr) derAttr);\n     }\n \n     @Override\n-    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute) {\n-        if (!(derivedAttribute instanceof MDerAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed MDerAttr: \" + derivedAttribute.getClass().getName());\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(final T derAttr) {\n+        if (!(derAttr instanceof MDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MDerAttr: \" + derAttr.getClass().getName());\n         }\n \n-        return derivedAttributes.remove((MDerAttr) derivedAttribute);\n+        return derivedAttributes.remove((MDerAttr) derAttr);\n     }\n \n     @Override\n@@ -143,27 +152,29 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n     }\n \n     @Override\n-    public void setDerivedAttributes(List<? extends AbstractDerAttr> derivedAttributes) {\n-\n-        this.derivedAttributes = (List<MDerAttr>) derivedAttributes;\n+    public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAttributes) {\n+        this.derivedAttributes.clear();\n+        if (derivedAttributes != null && !derivedAttributes.isEmpty()) {\n+            this.derivedAttributes.addAll((List<MDerAttr>) derivedAttributes);\n+        }\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean addVirtualAttribute(T virtualAttribute) {\n-        if (!(virtualAttribute instanceof MVirAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed MVirAttr: \" + virtualAttribute.getClass().getName());\n+    public <T extends AbstractVirAttr> boolean addVirtualAttribute(final T virAttr) {\n+        if (!(virAttr instanceof MVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MVirAttr: \" + virAttr.getClass().getName());\n         }\n \n-        return virtualAttributes.add((MVirAttr) virtualAttribute);\n+        return virtualAttributes.add((MVirAttr) virAttr);\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(T virtualAttribute) {\n-        if (!(virtualAttribute instanceof MVirAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed MVirAttr: \" + virtualAttribute.getClass().getName());\n+    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(final T virAttr) {\n+        if (!(virAttr instanceof MVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed MVirAttr: \" + virAttr.getClass().getName());\n         }\n \n-        return virtualAttributes.remove((MVirAttr) virtualAttribute);\n+        return virtualAttributes.remove((MVirAttr) virAttr);\n     }\n \n     @Override\n@@ -172,9 +183,11 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n     }\n \n     @Override\n-    public void setVirtualAttributes(List<? extends AbstractVirAttr> virtualAttributes) {\n-\n-        this.virtualAttributes = (List<MVirAttr>) virtualAttributes;\n+    public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n+        this.virtualAttributes.clear();\n+        if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\n+            this.virtualAttributes.addAll((List<MVirAttr>) virtualAttributes);\n+        }\n     }\n \n     @Override"},{"sha":"ecc94c23bab6e5b2e22227aed66cd487efa30a08","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":65,"deletions":41,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=e60bd1bf219341b64f976f75f517f5cf35318ab0","patch":"@@ -61,56 +61,73 @@\n public class SyncopeRole extends AbstractAttributable {\n \n     private static final long serialVersionUID = -5281258853142421875L;\n+\n     @Id\n     private Long id;\n+\n     @NotNull\n     private String name;\n+\n     @ManyToOne(optional = true)\n     private SyncopeRole parent;\n+\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n-    @JoinColumn(name = \"role_id\"), inverseJoinColumns =\n+    @JoinColumn(name = \"role_id\"),\n+    inverseJoinColumns =\n     @JoinColumn(name = \"entitlement_name\"))\n     private Set<Entitlement> entitlements;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<RAttr> attributes;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<RDerAttr> derivedAttributes;\n+\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<RVirAttr> virtualAttributes;\n+\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritAttributes;\n+\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritDerivedAttributes;\n+\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritVirtualAttributes;\n+\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritPasswordPolicy;\n+\n     @Basic(optional = true)\n     @Min(0)\n     @Max(1)\n     private Integer inheritAccountPolicy;\n+\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private PasswordPolicy passwordPolicy;\n+\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private AccountPolicy accountPolicy;\n+\n     /**\n      * Provisioning external resources.\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n-    @JoinColumn(name = \"role_id\"), inverseJoinColumns =\n+    @JoinColumn(name = \"role_id\"),\n+    inverseJoinColumns =\n     @JoinColumn(name = \"resource_name\"))\n     @Valid\n     private Set<ExternalResource> resources;\n@@ -136,23 +153,23 @@ public Long getId() {\n     }\n \n     @Override\n-    protected Set<ExternalResource> resources() {\n+    protected Set<ExternalResource> internalGetResources() {\n         return resources;\n     }\n \n     public String getName() {\n         return name;\n     }\n \n-    public void setName(String name) {\n+    public void setName(final String name) {\n         this.name = name;\n     }\n \n     public SyncopeRole getParent() {\n         return parent;\n     }\n \n-    public void setParent(SyncopeRole parent) {\n+    public void setParent(final SyncopeRole parent) {\n         this.parent = parent;\n     }\n \n@@ -176,15 +193,15 @@ public void setEntitlements(final List<Entitlement> entitlements) {\n     }\n \n     @Override\n-    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n+    public <T extends AbstractAttr> boolean addAttribute(final T attribute) {\n         if (!(attribute instanceof RAttr)) {\n             throw new ClassCastException(\"attribute is expected to be typed RAttr: \" + attribute.getClass().getName());\n         }\n         return attributes.add((RAttr) attribute);\n     }\n \n     @Override\n-    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n+    public <T extends AbstractAttr> boolean removeAttribute(final T attribute) {\n         if (!(attribute instanceof RAttr)) {\n             throw new ClassCastException(\"attribute is expected to be typed RAttr: \" + attribute.getClass().getName());\n         }\n@@ -197,24 +214,27 @@ public List<? extends AbstractAttr> getAttributes() {\n     }\n \n     @Override\n-    public void setAttributes(List<? extends AbstractAttr> attributes) {\n-        this.attributes = (List<RAttr>) attributes;\n+    public void setAttributes(final List<? extends AbstractAttr> attributes) {\n+        this.attributes.clear();\n+        if (attributes != null && !attributes.isEmpty()) {\n+            this.attributes.addAll((List<RAttr>) attributes);\n+        }\n     }\n \n     @Override\n-    public <T extends AbstractDerAttr> boolean addDerivedAttribute(T derivedAttribute) {\n-        if (!(derivedAttribute instanceof RDerAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed RDerAttr: \" + derivedAttribute.getClass().getName());\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(final T derAttr) {\n+        if (!(derAttr instanceof RDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RDerAttr: \" + derAttr.getClass().getName());\n         }\n-        return derivedAttributes.add((RDerAttr) derivedAttribute);\n+        return derivedAttributes.add((RDerAttr) derAttr);\n     }\n \n     @Override\n-    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute) {\n-        if (!(derivedAttribute instanceof RDerAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed RDerAttr: \" + derivedAttribute.getClass().getName());\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(final T derAttr) {\n+        if (!(derAttr instanceof RDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RDerAttr: \" + derAttr.getClass().getName());\n         }\n-        return derivedAttributes.remove((RDerAttr) derivedAttribute);\n+        return derivedAttributes.remove((RDerAttr) derAttr);\n     }\n \n     @Override\n@@ -223,25 +243,27 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n     }\n \n     @Override\n-    public void setDerivedAttributes(List<? extends AbstractDerAttr> derivedAttributes) {\n-\n-        this.derivedAttributes = (List<RDerAttr>) derivedAttributes;\n+    public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAttributes) {\n+        this.attributes.clear();\n+        if (attributes != null && !attributes.isEmpty()) {\n+            this.attributes.addAll((List<RAttr>) attributes);\n+        }\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean addVirtualAttribute(T virtualAttribute) {\n-        if (!(virtualAttribute instanceof RVirAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed RVirAttr: \" + virtualAttribute.getClass().getName());\n+    public <T extends AbstractVirAttr> boolean addVirtualAttribute(final T virAttr) {\n+        if (!(virAttr instanceof RVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RVirAttr: \" + virAttr.getClass().getName());\n         }\n-        return virtualAttributes.add((RVirAttr) virtualAttribute);\n+        return virtualAttributes.add((RVirAttr) virAttr);\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(T virtualAttribute) {\n-        if (!(virtualAttribute instanceof RVirAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed RVirAttr: \" + virtualAttribute.getClass().getName());\n+    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(final T virAttr) {\n+        if (!(virAttr instanceof RVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed RVirAttr: \" + virAttr.getClass().getName());\n         }\n-        return virtualAttributes.remove((RVirAttr) virtualAttribute);\n+        return virtualAttributes.remove((RVirAttr) virAttr);\n     }\n \n     @Override\n@@ -250,16 +272,18 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n     }\n \n     @Override\n-    public void setVirtualAttributes(List<? extends AbstractVirAttr> virtualAttributes) {\n-\n-        this.virtualAttributes = (List<RVirAttr>) virtualAttributes;\n+    public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n+        this.virtualAttributes.clear();\n+        if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\n+            this.virtualAttributes.addAll((List<RVirAttr>) virtualAttributes);\n+        }\n     }\n \n     public boolean isInheritAttributes() {\n         return isBooleanAsInteger(inheritAttributes);\n     }\n \n-    public void setInheritAttributes(boolean inheritAttributes) {\n+    public void setInheritAttributes(final boolean inheritAttributes) {\n         this.inheritAttributes = getBooleanAsInteger(inheritAttributes);\n     }\n \n@@ -296,7 +320,7 @@ public boolean isInheritDerivedAttributes() {\n         return isBooleanAsInteger(inheritDerivedAttributes);\n     }\n \n-    public void setInheritDerivedAttributes(boolean inheritDerivedAttributes) {\n+    public void setInheritDerivedAttributes(final boolean inheritDerivedAttributes) {\n         this.inheritDerivedAttributes = getBooleanAsInteger(inheritDerivedAttributes);\n \n     }\n@@ -335,7 +359,7 @@ public boolean isInheritVirtualAttributes() {\n         return isBooleanAsInteger(inheritVirtualAttributes);\n     }\n \n-    public void setInheritVirtualAttributes(boolean inheritVirtualAttributes) {\n+    public void setInheritVirtualAttributes(final boolean inheritVirtualAttributes) {\n         this.inheritVirtualAttributes = getBooleanAsInteger(inheritVirtualAttributes);\n \n     }\n@@ -373,40 +397,40 @@ public List<RVirAttr> findInheritedVirtualAttributes() {\n     /**\n      * Get first valid password policy.\n      *\n-     * @return parent password policy if isInheritPasswordPolicy is 'true' and\n-     * parent is not null. Return local passowrd policy otherwise.\n+     * @return parent password policy if isInheritPasswordPolicy is 'true' and parent is not null, local password policy\n+     * otherwise\n      */\n     public PasswordPolicy getPasswordPolicy() {\n         return isInheritPasswordPolicy() && getParent() != null\n                 ? getParent().getPasswordPolicy()\n                 : passwordPolicy;\n     }\n \n-    public void setPasswordPolicy(PasswordPolicy passwordPolicy) {\n+    public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n     public boolean isInheritPasswordPolicy() {\n         return isBooleanAsInteger(inheritPasswordPolicy);\n     }\n \n-    public void setInheritPasswordPolicy(boolean inheritPasswordPolicy) {\n+    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\n         this.inheritPasswordPolicy = getBooleanAsInteger(inheritPasswordPolicy);\n     }\n \n     /**\n      * Get first valid account policy.\n      *\n-     * @return parent account policy if isInheritAccountPolicy is 'true' and\n-     * parent is not null. Return local account policy otherwise.\n+     * @return parent account policy if isInheritAccountPolicy is 'true' and parent is not null, local account policy\n+     * otherwise.\n      */\n     public AccountPolicy getAccountPolicy() {\n         return isInheritAccountPolicy() && getParent() != null\n                 ? getParent().getAccountPolicy()\n                 : accountPolicy;\n     }\n \n-    public void setAccountPolicy(AccountPolicy accountPolicy) {\n+    public void setAccountPolicy(final AccountPolicy accountPolicy) {\n         this.accountPolicy = accountPolicy;\n     }\n "},{"sha":"45187d0b2cdeb69eafe90f1cb0a99ea11f5ff725","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":24,"deletions":28,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e60bd1bf219341b64f976f75f517f5cf35318ab0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=e60bd1bf219341b64f976f75f517f5cf35318ab0","patch":"@@ -159,8 +159,10 @@ public class SyncopeUser extends AbstractAttributable {\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n-    @JoinColumn(name = \"user_id\"), inverseJoinColumns =\n+    @JoinColumn(name = \"user_id\"),\n+    inverseJoinColumns =\n     @JoinColumn(name = \"resource_name\"))\n+    @Valid\n     private Set<ExternalResource> resources;\n \n     public SyncopeUser() {\n@@ -182,7 +184,7 @@ public Long getId() {\n     }\n \n     @Override\n-    protected Set<ExternalResource> resources() {\n+    protected Set<ExternalResource> internalGetResources() {\n         return resources;\n     }\n \n@@ -267,9 +269,8 @@ public void removeClearPassword() {\n     }\n \n     public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm, final int historySize) {\n-\n         // clear password\n-        clearPassword = password;\n+        this.clearPassword = password;\n \n         try {\n             this.password = encodePassword(password, cipherAlgoritm);\n@@ -312,22 +313,20 @@ public void setAttributes(final List<? extends AbstractAttr> attributes) {\n     }\n \n     @Override\n-    public <T extends AbstractDerAttr> boolean addDerivedAttribute(final T derivedAttribute) {\n-        if (!(derivedAttribute instanceof UDerAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed UDerAttr: \" + derivedAttribute.getClass().\n-                    getName());\n+    public <T extends AbstractDerAttr> boolean addDerivedAttribute(final T derAttr) {\n+        if (!(derAttr instanceof UDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UDerAttr: \" + derAttr.getClass().getName());\n         }\n \n-        return derivedAttributes.add((UDerAttr) derivedAttribute);\n+        return derivedAttributes.add((UDerAttr) derAttr);\n     }\n \n     @Override\n-    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(T derivedAttribute) {\n-        if (!(derivedAttribute instanceof UDerAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed UDerAttr: \" + derivedAttribute.getClass().\n-                    getName());\n+    public <T extends AbstractDerAttr> boolean removeDerivedAttribute(final T derAttr) {\n+        if (!(derAttr instanceof UDerAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UDerAttr: \" + derAttr.getClass().getName());\n         }\n-        return derivedAttributes.remove((UDerAttr) derivedAttribute);\n+        return derivedAttributes.remove((UDerAttr) derAttr);\n     }\n \n     @Override\n@@ -344,21 +343,19 @@ public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAt\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean addVirtualAttribute(final T virtualAttribute) {\n-        if (!(virtualAttribute instanceof UVirAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed UVirAttr: \" + virtualAttribute.getClass().\n-                    getName());\n+    public <T extends AbstractVirAttr> boolean addVirtualAttribute(final T virAttr) {\n+        if (!(virAttr instanceof UVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UVirAttr: \" + virAttr.getClass().getName());\n         }\n-        return virtualAttributes.add((UVirAttr) virtualAttribute);\n+        return virtualAttributes.add((UVirAttr) virAttr);\n     }\n \n     @Override\n-    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(final T virtualAttribute) {\n-        if (!(virtualAttribute instanceof UVirAttr)) {\n-            throw new ClassCastException(\"attribute is expected to be typed UVirAttr: \" + virtualAttribute.getClass().\n-                    getName());\n+    public <T extends AbstractVirAttr> boolean removeVirtualAttribute(final T virAttr) {\n+        if (!(virAttr instanceof UVirAttr)) {\n+            throw new ClassCastException(\"attribute is expected to be typed UVirAttr: \" + virAttr.getClass().getName());\n         }\n-        return virtualAttributes.remove((UVirAttr) virtualAttribute);\n+        return virtualAttributes.remove((UVirAttr) virAttr);\n     }\n \n     @Override\n@@ -369,7 +366,6 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n     @Override\n     public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n         this.virtualAttributes.clear();\n-\n         if (virtualAttributes != null && !virtualAttributes.isEmpty()) {\n             this.virtualAttributes.addAll((List<UVirAttr>) virtualAttributes);\n         }\n@@ -379,19 +375,19 @@ public String getWorkflowId() {\n         return workflowId;\n     }\n \n-    public void setWorkflowId(String workflowId) {\n+    public void setWorkflowId(final String workflowId) {\n         this.workflowId = workflowId;\n     }\n \n     public String getStatus() {\n         return status;\n     }\n \n-    public void setStatus(String status) {\n+    public void setStatus(final String status) {\n         this.status = status;\n     }\n \n-    public void generateToken(int tokenLength, int tokenExpireTime) {\n+    public void generateToken(final int tokenLength, final int tokenExpireTime) {\n         this.token = RandomStringUtils.randomAlphanumeric(tokenLength);\n \n         Calendar calendar = Calendar.getInstance();"}]}