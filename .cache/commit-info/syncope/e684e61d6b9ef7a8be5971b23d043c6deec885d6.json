{"sha":"e684e61d6b9ef7a8be5971b23d043c6deec885d6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU2ODRlNjFkNmI5ZWY3YThiZTU5NzFiMjNkMDQzYzZkZWVjODg1ZDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-22T15:43:59Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-22T15:44:04Z"},"message":"Reverting changes for SYNCOPE-755 as SYNCOPE-754 has proven to be invalid","tree":{"sha":"e1eb9f5505f817cf7450dcb4f296f23ac09d1ba8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e1eb9f5505f817cf7450dcb4f296f23ac09d1ba8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e684e61d6b9ef7a8be5971b23d043c6deec885d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e684e61d6b9ef7a8be5971b23d043c6deec885d6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e684e61d6b9ef7a8be5971b23d043c6deec885d6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e684e61d6b9ef7a8be5971b23d043c6deec885d6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"537da29eb8b71536f063f8c72c2e49d92a0a7b5c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/537da29eb8b71536f063f8c72c2e49d92a0a7b5c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/537da29eb8b71536f063f8c72c2e49d92a0a7b5c"}],"stats":{"total":154,"additions":120,"deletions":34},"files":[{"sha":"c83da381ff588adab0d3b1a1e5910d15769e2da6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -23,15 +23,13 @@\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n-import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -43,11 +41,8 @@ public class AnyTypeDetailsPanel extends Panel {\n \n     private static final long serialVersionUID = 8131650329622035501L;\n \n-    private final AnyTypeTO anyTypeTO;\n-\n     public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n         super(id);\n-        this.anyTypeTO = anyTypeTO;\n \n         final WebMarkupContainer container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n@@ -79,21 +74,12 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n     }\n \n     private List<String> getAvailableAnyTypeClasses() {\n-        final List<String> availableAnyTypeClasses = CollectionUtils.collect(\n-                SyncopeConsoleSession.get().getService(AnyTypeClassService.class).list(),\n-                new Transformer<AnyTypeClassTO, String>() {\n+        return CollectionUtils.collect(new AnyTypeClassRestClient().list(), new Transformer<AnyTypeClassTO, String>() {\n \n             @Override\n             public String transform(final AnyTypeClassTO input) {\n                 return input.getKey();\n             }\n         }, new ArrayList<String>());\n-\n-        for (AnyTypeTO itemTO : SyncopeConsoleSession.get().getService(AnyTypeService.class).list()) {\n-            if (anyTypeTO.getKey() == null || !anyTypeTO.getKey().equals(itemTO.getKey())) {\n-                availableAnyTypeClasses.removeAll(itemTO.getClasses());\n-            }\n-        }\n-        return availableAnyTypeClasses;\n     }\n }"},{"sha":"8e515a8a0a77ac2247fb22620f847d813ff1df15","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTypeClassTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -36,6 +36,8 @@ public class AnyTypeClassTO extends AbstractBaseBean {\n \n     private String key;\n \n+    private final List<String> types = new ArrayList<>();\n+\n     private final List<String> plainSchemas = new ArrayList<>();\n \n     private final List<String> derSchemas = new ArrayList<>();\n@@ -51,6 +53,13 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    @XmlElementWrapper(name = \"types\")\n+    @XmlElement(name = \"type\")\n+    @JsonProperty(\"types\")\n+    public List<String> getTypes() {\n+        return types;\n+    }\n+\n     @XmlElementWrapper(name = \"plainSchemas\")\n     @XmlElement(name = \"schema\")\n     @JsonProperty(\"plainSchemas\")"},{"sha":"d72d3d2507085a3f288de9bcaa022ca081069363","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -43,6 +43,7 @@ public enum ClientExceptionType {\n     InvalidRelationship(Response.Status.BAD_REQUEST),\n     InvalidRelationshipType(Response.Status.BAD_REQUEST),\n     InvalidAnyType(Response.Status.BAD_REQUEST),\n+    InvalidAnyTypeClass(Response.Status.BAD_REQUEST),\n     InvalidAnyObject(Response.Status.BAD_REQUEST),\n     InvalidGroup(Response.Status.BAD_REQUEST),\n     InvalidSchemaDefinition(Response.Status.BAD_REQUEST),"},{"sha":"e1e5411718f1c799f4ba6faba665352cb2740135","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyTypeClass.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -24,6 +24,8 @@ public interface AnyTypeClass extends Entity<String> {\n \n     void setKey(String key);\n \n+    List<? extends AnyType> getTypes();\n+\n     boolean add(PlainSchema schema);\n \n     boolean remove(PlainSchema schema);"},{"sha":"a980209df5302f632f70b143d401cd951456763f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -49,12 +49,11 @@ public AnyType findGroup() {\n         return find(AnyTypeKind.GROUP.name());\n     }\n \n+    @Override\n     public List<AnyType> findByTypeClass(final AnyTypeClass anyTypeClass) {\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(JPAAnyType.class.getSimpleName()).\n-                append(\" e WHERE :anyTypeClass MEMBER OF e.classes\");\n-\n-        TypedQuery<AnyType> query = entityManager().createQuery(queryString.toString(), AnyType.class);\n+        TypedQuery<AnyType> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAnyType.class.getSimpleName() + \" e WHERE :anyTypeClass MEMBER OF e.classes\",\n+                AnyType.class);\n         query.setParameter(\"anyTypeClass\", anyTypeClass);\n \n         return query.getResultList();"},{"sha":"8f99efc796c9da835d15beacf9c997ad3e319ad6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -55,9 +55,9 @@ public class JPAAnyType extends AbstractEntity<String> implements AnyType {\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n-            @JoinColumn(name = \"anyType_name\"),\n+            @JoinColumn(name = \"anyType_name\", referencedColumnName = \"name\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_name\"))\n+            @JoinColumn(name = \"anyTypeClass_name\", referencedColumnName = \"name\"))\n     private List<JPAAnyTypeClass> classes = new ArrayList<>();\n \n     @Override"},{"sha":"6a5e03e2f6860ab94dfcf08ae97d5bf8d8f3e018","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -24,8 +24,10 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -43,6 +45,9 @@ public class JPAAnyTypeClass extends AbstractEntity<String> implements AnyTypeCl\n     @Id\n     private String name;\n \n+    @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"classes\")\n+    private List<JPAAnyType> types = new ArrayList<>();\n+\n     @OneToMany(fetch = FetchType.EAGER, mappedBy = \"anyTypeClass\")\n     private List<JPAPlainSchema> plainSchemas = new ArrayList<>();\n \n@@ -62,6 +67,11 @@ public void setKey(final String name) {\n         this.name = name;\n     }\n \n+    @Override\n+    public List<? extends AnyType> getTypes() {\n+        return types;\n+    }\n+\n     @Override\n     public boolean add(final PlainSchema schema) {\n         checkType(schema, JPAPlainSchema.class);"},{"sha":"c1207579e61047b3c6a582460130ef6d05530b55","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeClassTest.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -20,7 +20,6 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-\n import static org.junit.Assert.assertTrue;\n \n import org.apache.syncope.common.lib.types.AttrSchemaType;"},{"sha":"d86b4b9265df1c39acea731e5e0297bd4515e658","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java","status":"modified","additions":27,"deletions":9,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnyTypeTest.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.outer;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n@@ -41,21 +42,38 @@ public class AnyTypeTest extends AbstractTest {\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n     @Test\n-    public void delete() {\n-        AnyType userType = anyTypeDAO.findUser();\n-        assertNotNull(userType);\n-\n+    public void manyToMany() {\n         AnyTypeClass other = anyTypeClassDAO.find(\"other\");\n         assertNotNull(other);\n-        assertTrue(userType.getClasses().contains(other));\n-        int before = userType.getClasses().size();\n+\n+        AnyType user = anyTypeDAO.findUser();\n+        assertTrue(user.getClasses().contains(other));\n+\n+        AnyType group = anyTypeDAO.findGroup();\n+        assertFalse(group.getClasses().contains(other));\n+\n+        group.add(other);\n+        anyTypeDAO.save(group);\n+\n+        anyTypeDAO.flush();\n+\n+        user = anyTypeDAO.findUser();\n+        assertTrue(user.getClasses().contains(other));\n+        int userClassesBefore = user.getClasses().size();\n+\n+        group = anyTypeDAO.findGroup();\n+        assertTrue(group.getClasses().contains(other));\n+        int groupClassesBefore = group.getClasses().size();\n \n         anyTypeClassDAO.delete(\"other\");\n \n         anyTypeDAO.flush();\n \n-        userType = anyTypeDAO.findUser();\n-        assertNotNull(userType);\n-        assertEquals(before, userType.getClasses().size() + 1);\n+        user = anyTypeDAO.findUser();\n+        assertEquals(userClassesBefore, user.getClasses().size() + 1);\n+\n+        group = anyTypeDAO.findGroup();\n+        assertEquals(groupClassesBefore, group.getClasses().size() + 1);\n     }\n+\n }"},{"sha":"b5bc11afdc8662be1ed62fd9304a7cac15f88717","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -19,10 +19,16 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collections;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -48,6 +54,9 @@ public class AnyTypeClassDataBinderImpl implements AnyTypeClassDataBinder {\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -64,6 +73,20 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             anyTypeClass.setKey(anyTypeClassTO.getKey());\n         }\n \n+        if (!CollectionUtils.disjunction(\n+                CollectionUtils.collect(anyTypeClass.getTypes(), new Transformer<AnyType, String>() {\n+\n+                    @Override\n+                    public String transform(final AnyType anyType) {\n+                        return anyType.getKey();\n+                    }\n+                }), anyTypeClassTO.getTypes()).isEmpty()) {\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyTypeClass);\n+            sce.getElements().add(\"Cannot update types from classes, do the other way round\");\n+            throw sce;\n+        }\n+\n         for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass))) {\n             schema.setAnyTypeClass(null);\n         }\n@@ -115,6 +138,11 @@ public AnyTypeClassTO getAnyTypeClassTO(final AnyTypeClass anyTypeClass) {\n         AnyTypeClassTO anyTypeClassTO = new AnyTypeClassTO();\n \n         anyTypeClassTO.setKey(anyTypeClass.getKey());\n+\n+        for (AnyType anyType : anyTypeDAO.findByTypeClass(anyTypeClass)) {\n+            anyTypeClassTO.getTypes().add(anyType.getKey());\n+        }\n+\n         for (PlainSchema schema : anyTypeClass.getPlainSchemas()) {\n             anyTypeClassTO.getPlainSchemas().add(schema.getKey());\n         }"},{"sha":"f74efbc640866800eb44b710c5717a9108943657","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -59,7 +60,7 @@ public void update(final AnyType anyType, final AnyTypeTO anyTypeTO) {\n         }\n         if (anyType.getKind() != anyTypeTO.getKind()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n-            sce.getElements().add(\"AnyTypeKind cannot be changed\");\n+            sce.getElements().add(AnyTypeKind.class.getSimpleName() + \" cannot be changed\");\n             throw sce;\n         }\n "},{"sha":"b82aabd72fa6a67fa9460ea0481c8b07fe68ef15","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyTypeITCase.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e684e61d6b9ef7a8be5971b23d043c6deec885d6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e684e61d6b9ef7a8be5971b23d043c6deec885d6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyTypeITCase.java?ref=e684e61d6b9ef7a8be5971b23d043c6deec885d6","patch":"@@ -165,4 +165,37 @@ public void deleteTypeClass() {\n         assertNotNull(other);\n         assertFalse(other.getClasses().contains(newClass.getKey()));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE754() {\n+        AnyTypeClassTO other = anyTypeClassService.read(\"other\");\n+        assertNotNull(other);\n+\n+        AnyTypeTO group = anyTypeService.read(AnyTypeKind.GROUP.name());\n+        try {\n+            assertFalse(group.getClasses().contains(\"other\"));\n+            group.getClasses().add(\"other\");\n+\n+            anyTypeService.update(group);\n+\n+            group = anyTypeService.read(AnyTypeKind.GROUP.name());\n+            assertTrue(group.getClasses().contains(\"other\"));\n+\n+            other = anyTypeClassService.read(\"other\");\n+            assertEquals(2, other.getTypes().size());\n+            assertTrue(other.getTypes().contains(AnyTypeKind.USER.name()));\n+            assertTrue(other.getTypes().contains(AnyTypeKind.GROUP.name()));\n+\n+            other.getTypes().remove(AnyTypeKind.GROUP.name());\n+            try {\n+                anyTypeClassService.update(other);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidAnyTypeClass, e.getType());\n+            }\n+        } finally {\n+            group.getClasses().remove(\"other\");\n+            anyTypeService.update(group);\n+        }\n+    }\n }"}]}