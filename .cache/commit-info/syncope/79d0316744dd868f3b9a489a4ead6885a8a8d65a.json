{"sha":"79d0316744dd868f3b9a489a4ead6885a8a8d65a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc5ZDAzMTY3NDRkZDg2OGYzYjlhNDg5YTRlYWQ2ODg1YThhOGQ2NWE=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-22T13:44:59Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-22T13:45:08Z"},"message":"refactoring of the policy stack , SYNCOPE-158","tree":{"sha":"224c2d793c7d2b49983f254f5fbe1d1ff04c7565","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/224c2d793c7d2b49983f254f5fbe1d1ff04c7565"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/79d0316744dd868f3b9a489a4ead6885a8a8d65a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/79d0316744dd868f3b9a489a4ead6885a8a8d65a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/79d0316744dd868f3b9a489a4ead6885a8a8d65a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/79d0316744dd868f3b9a489a4ead6885a8a8d65a/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"15f6d19dc49006be90bdce1b3859510a4a471066","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15f6d19dc49006be90bdce1b3859510a4a471066","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/15f6d19dc49006be90bdce1b3859510a4a471066"}],"stats":{"total":298,"additions":111,"deletions":187},"files":[{"sha":"fc3a8c0d791b199967b722098431a4f0965cf15e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15f6d19dc49006be90bdce1b3859510a4a471066/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15f6d19dc49006be90bdce1b3859510a4a471066/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=15f6d19dc49006be90bdce1b3859510a4a471066","patch":"@@ -1,187 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.Command;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.messages.Messages;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.rest.api.service.PolicyService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Command(name = \"policy\")\n-public class PolicyCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(PolicyCommand.class);\n-\n-    private static final String HELP_MESSAGE = \"Usage: policy [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    --help \\n\"\n-            + \"    --list-policy \\n\"\n-            + \"       Syntax: --list-policy {POLICY-TYPE} \\n\"\n-            + \"          Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\\n\"\n-            + \"    --read \\n\"\n-            + \"       Syntax: --read {POLICY-ID} {POLICY-ID} [...]\\n\"\n-            + \"    --delete \\n\"\n-            + \"       Syntax: --delete {POLICY-ID} {POLICY-ID} [...]\";\n-    \n-    @Override\n-    public void execute(final Input input) {\n-        LOG.debug(\"Option: {}\", input.getOption());\n-        LOG.debug(\"Parameters:\");\n-        for (final String parameter : input.getParameters()) {\n-            LOG.debug(\"   > \" + parameter);\n-        }\n-\n-        final String[] parameters = input.getParameters();\n-\n-        if (StringUtils.isBlank(input.getOption())) {\n-            input.setOption(Options.HELP.getOptionName());\n-        }\n-\n-        final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n-        switch (Options.fromName(input.getOption())) {\n-            case LIST_POLICY:\n-                final String listPolicyErrorMessage = \"policy --list-policy {POLICY-TYPE}\\n\"\n-                        + \"   Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\";\n-\n-                if (parameters.length == 1) {\n-                    try {\n-                        for (final AbstractPolicyTO policyTO : policyService.list(PolicyType.valueOf(parameters[0]))) {\n-                            System.out.println(policyTO);\n-                        }\n-                    } catch (final SyncopeClientException ex) {\n-                        Messages.printMessage(ex.getMessage());\n-                    } catch (final IllegalArgumentException ex) {\n-                        Messages.printTypeNotValidMessage(\n-                                \"policy\", input.firstParameter(), CommandUtils.fromEnumToArray(PolicyType.class));\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(listPolicyErrorMessage);\n-                }\n-                break;\n-            case READ:\n-                final String readErrorMessage = \"policy --read {POLICY-ID} {POLICY-ID} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            System.out.println(policyService.read(Long.valueOf(parameter)));\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"policy\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Policy\", parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(readErrorMessage);\n-                }\n-                break;\n-            case DELETE:\n-                final String deleteErrorMessage = \"policy --delete {POLICY-ID} {POLICY-ID} [...]\";\n-\n-                if (parameters.length >= 1) {\n-                    for (final String parameter : parameters) {\n-                        try {\n-                            policyService.delete(Long.valueOf(parameter));\n-                            Messages.printDeletedMessage(\"Policy\", parameter);\n-                        } catch (final WebServiceException | SyncopeClientException ex) {\n-                            System.out.println(\"Error:\");\n-                            if (ex.getMessage().startsWith(\"NotFound\")) {\n-                                Messages.printNofFoundMessage(\"Policy\", parameter);\n-                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n-                                Messages.printMessage(\"You cannot delete policy \" + parameter);\n-                            } else {\n-                                Messages.printMessage(ex.getMessage());\n-                            }\n-                        } catch (final NumberFormatException ex) {\n-                            Messages.printIdNotNumberDeletedMessage(\"policy\", parameter);\n-                        }\n-                    }\n-                } else {\n-                    Messages.printCommandOptionMessage(deleteErrorMessage);\n-                }\n-                break;\n-            case HELP:\n-                System.out.println(HELP_MESSAGE);\n-                break;\n-            default:\n-                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n-        }\n-    }\n-\n-    @Override\n-    public String getHelpMessage() {\n-        return HELP_MESSAGE;\n-    }\n-\n-    private enum Options {\n-\n-        HELP(\"--help\"),\n-        LIST_POLICY(\"--list-policy\"),\n-        READ(\"--read\"),\n-        DELETE(\"--delete\");\n-\n-        private final String optionName;\n-\n-        Options(final String optionName) {\n-            this.optionName = optionName;\n-        }\n-\n-        public String getOptionName() {\n-            return optionName;\n-        }\n-\n-        public boolean equalsOptionName(final String otherName) {\n-            return (otherName == null) ? false : optionName.equals(otherName);\n-        }\n-\n-        public static Options fromName(final String name) {\n-            Options optionToReturn = HELP;\n-            for (final Options option : Options.values()) {\n-                if (option.equalsOptionName(name)) {\n-                    optionToReturn = option;\n-                }\n-            }\n-            return optionToReturn;\n-        }\n-\n-        public static List<String> toList() {\n-            final List<String> options = new ArrayList<>();\n-            for (final Options value : values()) {\n-                options.add(value.getOptionName());\n-            }\n-            return options;\n-        }\n-    }\n-\n-}"},{"sha":"7c92d9d8fcf25bd6550f123c53499b7380119f03","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyCommand.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/79d0316744dd868f3b9a489a4ead6885a8a8d65a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/79d0316744dd868f3b9a489a4ead6885a8a8d65a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyCommand.java?ref=79d0316744dd868f3b9a489a4ead6885a8a8d65a","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.policy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"policy\")\n+public class PolicyCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: policy [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list-policy \\n\"\n+            + \"       Syntax: --list-policy {POLICY-TYPE} \\n\"\n+            + \"          Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {POLICY-ID} {POLICY-ID} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {POLICY-ID} {POLICY-ID} [...]\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST_POLICY:\n+                new PolicyList(input).list();\n+                break;\n+            case READ:\n+                new PolicyRead(input).read();\n+                break;\n+            case DELETE:\n+                new PolicyDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new PolicyResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST_POLICY(\"--list-policy\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"}]}