{"sha":"918059d951bd36aaa960802598848a7dc7edb4dd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkxODA1OWQ5NTFiZDM2YWFhOTYwODAyNTk4ODQ4YTdkYzdlZGI0ZGQ=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-03T15:09:09Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-03T15:09:09Z"},"message":"[SYNCOPE-259]\nIntroduces ConnectionService\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1428391 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa6cf36181bec9f570a80952904542ffb3b70e50","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fa6cf36181bec9f570a80952904542ffb3b70e50"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/918059d951bd36aaa960802598848a7dc7edb4dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/918059d951bd36aaa960802598848a7dc7edb4dd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/918059d951bd36aaa960802598848a7dc7edb4dd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/918059d951bd36aaa960802598848a7dc7edb4dd/comments","author":null,"committer":null,"parents":[{"sha":"cef9e1af42d246a1decfbb9d5f61501a5c375357","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cef9e1af42d246a1decfbb9d5f61501a5c375357","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cef9e1af42d246a1decfbb9d5f61501a5c375357"}],"stats":{"total":606,"additions":396,"deletions":210},"files":[{"sha":"36475bd1c67000db59dfc7c792c1bb8121e9e092","filename":"client/src/main/java/org/apache/syncope/services/ConnectorService.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.DefaultValue;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.MatrixParam;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.QueryParam;\r\n+\r\n+import org.apache.syncope.client.to.ConnBundleTO;\r\n+import org.apache.syncope.client.to.ConnInstanceTO;\r\n+import org.apache.syncope.types.ConnConfProperty;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RequestMethod;\r\n+\r\n+@Path(\"connectors\")\r\n+public interface ConnectorService {\r\n+\r\n+\t@POST\r\n+\tConnInstanceTO create(final ConnInstanceTO connectorTO);\r\n+\r\n+\t@PUT\r\n+\t@Path(\"{connectorId}\")\r\n+\tConnInstanceTO update(@PathParam(\"connectorId\") final Long connectorId,\r\n+\t\t\tfinal ConnInstanceTO connectorTO);\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"{connectorId}\")\r\n+\tConnInstanceTO delete(@PathParam(\"connectorId\") final Long connectorId);\r\n+\r\n+\t@GET\r\n+\tList<ConnInstanceTO> list(@QueryParam(\"lang\") final String lang);\r\n+\r\n+\t@GET\r\n+\t@Path(\"{connectorId}\")\r\n+\tConnInstanceTO read(@PathParam(\"connectorId\") final Long connectorId);\r\n+\r\n+\t@GET\r\n+\t@Path(\"bundles\")\r\n+\tList<ConnBundleTO> getBundles(@QueryParam(\"lang\") final String lang);\r\n+\r\n+\t@GET\r\n+\t@POST\r\n+\t@Path(\"{connectorId}/schemas\")\r\n+\tList<String> getSchemaNames(\r\n+\t\t\t@PathParam(\"connectorId\") final Long connectorId,\r\n+\t\t\tConnInstanceTO connectorTO,\r\n+\t\t\t@QueryParam(\"showall\") @DefaultValue(\"false\") final boolean showall);\r\n+\r\n+\t@GET\r\n+\t@Path(\"{connectorId}/configuration\")\r\n+\tList<ConnConfProperty> getConfigurationProperties(\r\n+\t\t\t@PathParam(\"connectorId\") final Long connectorId);\r\n+\r\n+\t@POST\r\n+\t@Path(\"validate\")\r\n+\t@RequestMapping(method = RequestMethod.POST, value = \"/check\")\r\n+\tboolean validate(final ConnInstanceTO connectorTO);\r\n+\r\n+\t@GET\r\n+\t@RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/connectorBean\")\r\n+\tConnInstanceTO readConnectorBean(\r\n+\t\t\t@MatrixParam(\"resourceName\") String resourceName);\r\n+}\n\\ No newline at end of file"},{"sha":"924827e4edc5b52978ccc993c44cf7c41eac92fe","filename":"client/src/main/java/org/apache/syncope/services/ConnectorServiceProxy.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorServiceProxy.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -0,0 +1,107 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.to.ConnBundleTO;\r\n+import org.apache.syncope.client.to.ConnInstanceTO;\r\n+import org.apache.syncope.types.ConnConfProperty;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class ConnectorServiceProxy extends SpringServiceProxy implements ConnectorService {\r\n+\r\n+    public ConnectorServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO create(ConnInstanceTO connectorTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"connector/create.json\", connectorTO,\r\n+                ConnInstanceTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO update(Long connectorId, ConnInstanceTO connectorTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"connector/update.json\", connectorTO,\r\n+                ConnInstanceTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO delete(Long connectorId) {\r\n+        return restTemplate.getForObject(BASE_URL + \"connector/delete/{connectorId}.json\",\r\n+                ConnInstanceTO.class, connectorId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnInstanceTO> list(String lang) {\r\n+        String param = (lang != null)\r\n+                ? \"?lang=\" + lang\r\n+                : \"\";\r\n+\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"connector/list.json\" + param,\r\n+                ConnInstanceTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO read(Long connectorId) {\r\n+        return restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}\", ConnInstanceTO.class,\r\n+                connectorId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnBundleTO> getBundles(String lang) {\r\n+        String param = (lang != null)\r\n+                ? \"?lang=\" + lang\r\n+                : \"\";\r\n+\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"connector/bundle/list.json\" + param,\r\n+                ConnBundleTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<String> getSchemaNames(Long connectorId, ConnInstanceTO connectorTO, boolean showall) {\r\n+        String param = (showall)\r\n+                ? \"?showall=true\"\r\n+                : \"?showall=false\";\r\n+\r\n+        return Arrays.asList(restTemplate.postForObject(BASE_URL + \"connector/schema/list\" + param, connectorTO,\r\n+                String[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnConfProperty> getConfigurationProperties(Long connectorId) {\r\n+        return Arrays.asList(restTemplate\r\n+                .getForObject(BASE_URL + \"connector/{connectorId}/configurationProperty/list\",\r\n+                        ConnConfProperty[].class, connectorId));\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean validate(ConnInstanceTO connectorTO) {\r\n+        return restTemplate.postForObject(BASE_URL + \"connector/check.json\", connectorTO, Boolean.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO readConnectorBean(String resourceName) {\r\n+        return restTemplate.getForObject(BASE_URL + \"connector/{resourceName}/connectorBean\",\r\n+                ConnInstanceTO.class, resourceName);\r\n+    }\r\n+\r\n+}\r"},{"sha":"ae9d49bb0a49c6d30775c714bca336f6b31e97c4","filename":"client/src/main/java/org/apache/syncope/services/EntitlementService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -27,10 +27,10 @@\n public interface EntitlementService {\r\n \r\n     @GET\r\n-    public abstract Set<String> getAllEntitlements();\r\n+    Set<String> getAllEntitlements();\r\n \r\n     @GET\r\n     @Path(\"own\")\r\n-    public abstract Set<String> getMyEntitlements();\r\n+    Set<String> getMyEntitlements();\r\n \r\n }\n\\ No newline at end of file"},{"sha":"7f94283effb6498256b61c2bae80b9c4b62d38fa","filename":"client/src/main/java/org/apache/syncope/services/SpringServiceProxy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -24,7 +24,7 @@ public abstract class SpringServiceProxy {\n \r\n \tprotected RestTemplate restTemplate;\r\n \r\n-\tprotected String BASE_URL;\r\n+\tprotected String BASE_URL; //TODO rename property to baseUrl to match naming conventions\r\n \r\n \tpublic SpringServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n \t\tthis.restTemplate = restTemplate;\r"},{"sha":"567573e67185124ccc14db69154989dfad99ed2e","filename":"client/src/main/java/org/apache/syncope/services/UserService.java","status":"modified","additions":151,"deletions":147,"changes":298,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -38,151 +38,155 @@\n @Path(\"user\")\n public interface UserService {\n \n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-\t */\n-\t@Deprecated\n-\tUserTO activate(long userId, String token);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus()}\n-\t */\n-\t@Deprecated\n-\tUserTO activateByUsername(String username, String token);\n-\n-\t/**\n-\t * @deprecated This method needs to be moved to a new workflow service.\n-\t */\n-\t@Deprecated\n-\t@POST\n-\t@Path(\"workflow/task/{taskId}/claim\")\n-\tWorkflowFormTO claimForm(@PathParam(\"taskId\") final String taskId);\n-\n-\t@GET\n-\t@Path(\"count\")\n-\tint count();\n-\n-\t@POST\n-\t@Path(\"\")\n-\tUserTO create(final UserTO userTO);\n-\n-\t@DELETE\n-\t@Path(\"{userId}\")\n-\tUserTO delete(@PathParam(\"userId\") final Long userId);\n-\n-\t/**\n-\t * @deprecated This method needs to be moved to a new workflow service.\n-\t */\n-\t@Deprecated\n-\t@POST\n-\tUserTO executeWorkflow(@PathParam(\"taskId\") final String taskId,\n-\t\t\tfinal UserTO userTO);\n-\n-\t/**\n-\t * @deprecated This method needs to be moved to a new workflow service.\n-\t */\n-\t@Deprecated\n-\t@GET\n-\t@Path(\"{userId}/workflow/form\")\n-\tWorkflowFormTO getFormForUser(@PathParam(\"userId\") final Long userId);\n-\n-\t/**\n-\t * @deprecated This method needs to be moved to a new workflow service.\n-\t */\n-\t@Deprecated\n-\t@GET\n-\t@Path(\"workflow/form\")\n-\tList<WorkflowFormTO> getForms();\n-\n-\t@GET\n-\tList<UserTO> list();\n-\n-\t@GET\n-\tList<UserTO> list(@QueryParam(\"page\") final int page,\n-\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-\t */\n-\t@Deprecated\n-\tUserTO reactivate(long userId);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-\t */\n-\t@Deprecated\n-\tUserTO reactivate(long userId, String query);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-\t */\n-\t@Deprecated\n-\tUserTO reactivateByUsername(String username);\n-\n-\t@GET\n-\t@Path(\"{userId}\")\n-\tUserTO read(@PathParam(\"userId\") final Long userId);\n-\n-\t@GET\n-\tUserTO read(@MatrixParam(\"uname\") final String username);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, use {@link #read(Long)} or\n-\t *             {@link #read(String)} instead.\n-\t */\n-\t@Deprecated\n-\tUserTO readSelf();\n-\n-\t@POST\n-\t@Path(\"search\")\n-\tList<UserTO> search(final NodeCond searchCondition);\n-\n-\t@POST\n-\t@Path(\"search\")\n-\tList<UserTO> search(final NodeCond searchCondition,\n-\t\t\t@QueryParam(\"page\") final int page,\n-\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n-\n-\t@POST\n-\t@Path(\"search/count\")\n-\tint searchCount(final NodeCond searchCondition);\n-\n-//\t@POST\n-//\t@Path(\"user/{userId}/status\")\n-//\tpublic abstract UserTO setStatus(@PathParam(\"userId\") final Long userId,\n-//\t\t\tfinal StatusMod statusUpdate);\n-\n-\t/**\n-\t * @deprecated This method needs to be moved to a new workflow service.\n-\t */\n-\t@Deprecated\n-\t@POST\n-\t@Path(\"workflow/form\")\n-\tUserTO submitForm(final WorkflowFormTO form);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-\t */\n-\t@Deprecated\n-\tUserTO suspend(long userId);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-\t */\n-\t@Deprecated\n-\tUserTO suspend(long userId, String query);\n-\n-\t/**\n-\t * @deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n-\t */\n-\t@Deprecated\n-\tUserTO suspendByUsername(String username);\n-\n-\t@POST\n-\t@Path(\"{userId}\")\n-\tUserTO update(@PathParam(\"userId\") final Long userId, final UserMod userMod);\n-\n-\t@GET\n-\tBoolean verifyPassword(@MatrixParam(\"uname\") String username,\n-\t\t\t@MatrixParam(\"pwd\") final String password);\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO activate(long userId, String token);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO activateByUsername(String username, String token);\n+\n+    /**\n+     * @deprecated This method needs to be moved to a new workflow service.\n+     */\n+    @Deprecated\n+    @POST\n+    @Path(\"workflow/task/{taskId}/claim\")\n+    WorkflowFormTO claimForm(@PathParam(\"taskId\") final String taskId);\n+\n+    @GET\n+    @Path(\"count\")\n+    int count();\n+\n+    @POST\n+    @Path(\"\")\n+    UserTO create(final UserTO userTO);\n+\n+    @DELETE\n+    @Path(\"{userId}\")\n+    UserTO delete(@PathParam(\"userId\") final Long userId);\n+\n+    /**\n+     * @deprecated This method needs to be moved to a new workflow service.\n+     */\n+    @Deprecated\n+    @POST\n+    UserTO executeWorkflow(@PathParam(\"taskId\") final String taskId, final UserTO userTO);\n+\n+    /**\n+     * @deprecated This method needs to be moved to a new workflow service.\n+     */\n+    @Deprecated\n+    @GET\n+    @Path(\"{userId}/workflow/form\")\n+    WorkflowFormTO getFormForUser(@PathParam(\"userId\") final Long userId);\n+\n+    /**\n+     * @deprecated This method needs to be moved to a new workflow service.\n+     */\n+    @Deprecated\n+    @GET\n+    @Path(\"workflow/form\")\n+    List<WorkflowFormTO> getForms();\n+\n+    @GET\n+    List<UserTO> list();\n+\n+    @GET\n+    List<UserTO> list(@QueryParam(\"page\") final int page,\n+            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO reactivate(long userId);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO reactivate(long userId, String query);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO reactivateByUsername(String username);\n+\n+    @GET\n+    @Path(\"{userId}\")\n+    UserTO read(@PathParam(\"userId\") final Long userId);\n+\n+    @GET\n+    UserTO read(@MatrixParam(\"uname\") final String username);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, use {@link #read(Long)} or\n+     *             {@link #read(String)} instead.\n+     */\n+    @Deprecated\n+    UserTO readSelf();\n+\n+    @POST\n+    @Path(\"search\")\n+    List<UserTO> search(final NodeCond searchCondition);\n+\n+    @POST\n+    @Path(\"search\")\n+    List<UserTO> search(final NodeCond searchCondition, @QueryParam(\"page\") final int page,\n+            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n+\n+    @POST\n+    @Path(\"search/count\")\n+    int searchCount(final NodeCond searchCondition);\n+\n+    @POST\n+    @Path(\"user/{userId}/status\")\n+    public abstract UserTO setStatus(@PathParam(\"userId\") final Long userId, final StatusMod statusUpdate);\n+\n+    /**\n+     * @deprecated This method needs to be moved to a new workflow service.\n+     */\n+    @Deprecated\n+    @POST\n+    @Path(\"workflow/form\")\n+    UserTO submitForm(final WorkflowFormTO form);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO suspend(long userId);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO suspend(long userId, String query);\n+\n+    /**\n+     * @deprecated As of release 1.2.0, replaced by\n+     *             {@link #setStatus(Long, StatusMod)}\n+     */\n+    @Deprecated\n+    UserTO suspendByUsername(String username);\n+\n+    @POST\n+    @Path(\"{userId}\")\n+    UserTO update(@PathParam(\"userId\") final Long userId, final UserMod userMod);\n+\n+    @GET\n+    Boolean verifyPassword(@MatrixParam(\"uname\") String username, @MatrixParam(\"pwd\") final String password);\n }\n\\ No newline at end of file"},{"sha":"bf5d34b5943b2706800e4ce41887ba3b17d2bfbc","filename":"client/src/main/java/org/apache/syncope/services/UserServiceProxy.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -29,6 +29,7 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n \n+import org.apache.syncope.client.mod.StatusMod;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.UserTO;\n@@ -140,7 +141,7 @@ public UserTO suspend(long userId) {\n \tpublic UserTO reactivate(long userId) {\n \t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivate/{userId}\", UserTO.class, userId);\n \t}\n-\t\n+\n \t@Override\n \tpublic UserTO reactivate(long userId, String query) {\n \t\treturn restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userId + query, UserTO.class);\n@@ -183,4 +184,9 @@ public int searchCount(NodeCond searchCondition) {\n \t\treturn restTemplate.postForObject(BASE_URL + \"user/search/count.json\", searchCondition, Integer.class);\n \t}\n \n+    @Override\n+    public UserTO setStatus(Long userId, StatusMod statusUpdate) {\n+        return null;\n+    }\n+\n }"},{"sha":"a97476649511c51ad94255ab2d47deee3e479b8c","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.services.ConfigurationServiceProxy;\n+import org.apache.syncope.services.ConnectorServiceProxy;\n import org.apache.syncope.services.EntitlementServiceProxy;\n import org.apache.syncope.services.RoleServiceProxy;\n import org.apache.syncope.services.UserServiceProxy;\n@@ -81,6 +82,8 @@ protected static AttributeMod attributeMod(final String schema,\n \tprotected EntitlementServiceProxy entitlementService;\n \t\n \tprotected ConfigurationServiceProxy configurationService;\n+\t\n+\tprotected ConnectorServiceProxy connectorService;\n \n \t@Autowired\n \tprotected DataSource testDataSource;\n@@ -106,5 +109,6 @@ public void resetRestTemplate() {\n \t\troleService = new RoleServiceProxy(BASE_URL, restTemplate);\n \t\tentitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n \t\tconfigurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n+\t\tconnectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n \t}\n }"},{"sha":"63d00117f9da41ade45c21fe17ca3cef2d692c28","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":37,"deletions":59,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/918059d951bd36aaa960802598848a7dc7edb4dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/918059d951bd36aaa960802598848a7dc7edb4dd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=918059d951bd36aaa960802598848a7dc7edb4dd","patch":"@@ -81,7 +81,7 @@ public static void init() throws IOException {\n     public void createWithException() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n-        restTemplate.postForObject(BASE_URL + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n+        connectorService.create(connectorTO);\n     }\n \n     @Test\n@@ -129,8 +129,7 @@ public void create() {\n         connectorTO.addCapability(ConnectorCapability.ONE_PHASE_CREATE);\n         connectorTO.addCapability(ConnectorCapability.TWO_PHASES_UPDATE);\n \n-        ConnInstanceTO actual = restTemplate.postForObject(BASE_URL + \"connector/create.json\", connectorTO,\n-                ConnInstanceTO.class);\n+        ConnInstanceTO actual = connectorService.create(connectorTO);\n \n         assertNotNull(actual);\n \n@@ -148,7 +147,7 @@ public void create() {\n         connectorTO.removeCapability(ConnectorCapability.TWO_PHASES_UPDATE);\n         actual = null;\n         try {\n-            actual = restTemplate.postForObject(BASE_URL + \"connector/update.json\", connectorTO, ConnInstanceTO.class);\n+            actual = connectorService.update(connectorTO.getId(), connectorTO);\n         } catch (HttpStatusCodeException e) {\n             LOG.error(\"update failed\", e);\n             t = e;\n@@ -160,10 +159,7 @@ public void create() {\n \n         // check also for the deletion of the created object\n         try {\n-            ConnInstanceTO deletedConn = restTemplate.getForObject(\n-                    BASE_URL + \"connector/delete/{connectorId}.json\",\n-                    ConnInstanceTO.class,\n-                    String.valueOf(actual.getId()));\n+            ConnInstanceTO deletedConn = connectorService.delete(actual.getId());\n             assertNotNull(deletedConn);\n         } catch (HttpStatusCodeException e) {\n             LOG.error(\"delete failed\", e);\n@@ -174,8 +170,7 @@ public void create() {\n \n         // check the non existence\n         try {\n-            restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}\", ConnInstanceTO.class,\n-                    String.valueOf(actual.getId()));\n+            connectorService.read(actual.getId());\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n@@ -222,13 +217,11 @@ public void update() {\n         // set connector configuration\n         connectorTO.setConfiguration(conf);\n \n-        ConnInstanceTO actual = (ConnInstanceTO) restTemplate.postForObject(BASE_URL + \"connector/update.json\",\n-                connectorTO, ConnInstanceTO.class);\n+        ConnInstanceTO actual = connectorService.update(connectorTO.getId(), connectorTO);\n \n         assertNotNull(actual);\n \n-        actual = restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}\", ConnInstanceTO.class, String.\n-                valueOf(actual.getId()));\n+        actual = connectorService.read(actual.getId());\n \n         assertNotNull(actual);\n         assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n@@ -242,8 +235,7 @@ public void issueSYNCOPE10() {\n         // Copy resource and connector in order to create new objects.\n         // ----------------------------------\n         // Retrieve a connector instance template.\n-        ConnInstanceTO connInstanceTO =\n-                restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}\", ConnInstanceTO.class, 103L);\n+        ConnInstanceTO connInstanceTO = connectorService.read(103L);\n \n         assertNotNull(connInstanceTO);\n \n@@ -267,8 +259,7 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         // Create a new connector instance.\n         // ----------------------------------\n-        connInstanceTO =\n-                restTemplate.postForObject(BASE_URL + \"connector/create.json\", connInstanceTO, ConnInstanceTO.class);\n+        connInstanceTO = connectorService.create(connInstanceTO);\n \n         assertNotNull(connInstanceTO);\n         assertTrue(connInstanceTO.getCapabilities().isEmpty());\n@@ -282,21 +273,21 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         // Check for connector instance update after resource creation.\n         // ----------------------------------\n-        resourceTO = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\n+        resourceTO = restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO,\n+                ResourceTO.class);\n \n         assertNotNull(resourceTO);\n \n-        resources = Arrays.asList(restTemplate.getForObject(BASE_URL + \"resource/list.json?connInstanceId=\" + connId,\n-                ResourceTO[].class));\n+        resources = Arrays.asList(restTemplate.getForObject(BASE_URL + \"resource/list.json?connInstanceId=\"\n+                + connId, ResourceTO[].class));\n \n         assertEquals(1, resources.size());\n         // ----------------------------------\n \n         // ----------------------------------\n         // Check for spring bean.\n         // ----------------------------------\n-        ConnInstanceTO connInstanceBean = restTemplate.getForObject(\n-                BASE_URL + \"connector/{resourceName}/connectorBean\", ConnInstanceTO.class, resourceTO.getName());\n+        ConnInstanceTO connInstanceBean = connectorService.readConnectorBean(resourceTO.getName());\n \n         assertNotNull(connInstanceBean);\n         assertTrue(connInstanceBean.getCapabilities().isEmpty());\n@@ -307,15 +298,13 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         connInstanceTO.addCapability(ConnectorCapability.SEARCH);\n \n-        ConnInstanceTO actual = (ConnInstanceTO) restTemplate.postForObject(BASE_URL + \"connector/update.json\",\n-                connInstanceTO, ConnInstanceTO.class);\n+        ConnInstanceTO actual = connectorService.update(connInstanceTO.getId(), connInstanceTO);\n \n         assertNotNull(actual);\n         assertFalse(connInstanceTO.getCapabilities().isEmpty());\n \n         // check for spring bean update\n-        connInstanceBean = restTemplate.getForObject(BASE_URL + \"connector/{resourceName}/connectorBean\",\n-                ConnInstanceTO.class, resourceTO.getName());\n+        connInstanceBean = connectorService.readConnectorBean(resourceTO.getName());\n \n         assertFalse(connInstanceBean.getCapabilities().isEmpty());\n         // ----------------------------------\n@@ -324,17 +313,15 @@ public void issueSYNCOPE10() {\n     @Test\n     public void deleteWithException() {\n         try {\n-            restTemplate.getForObject(\n-                    BASE_URL + \"connector/delete/{connectorId}.json\", ConnInstanceTO.class, \"0\");\n+            connectorService.delete(0L);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n     @Test\n     public void list() {\n-        List<ConnInstanceTO> connectorInstanceTOs = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"connector/list.json\", ConnInstanceTO[].class));\n+        List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(null);\n         assertNotNull(connectorInstanceTOs);\n         assertFalse(connectorInstanceTOs.isEmpty());\n         for (ConnInstanceTO instance : connectorInstanceTOs) {\n@@ -344,16 +331,14 @@ public void list() {\n \n     @Test\n     public void read() {\n-        ConnInstanceTO connectorInstanceTO = restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}.json\",\n-                ConnInstanceTO.class, \"100\");\n+        ConnInstanceTO connectorInstanceTO = connectorService.read(100L);\n \n         assertNotNull(connectorInstanceTO);\n     }\n \n     @Test\n     public void getBundles() {\n-        List<ConnBundleTO> bundles = Arrays.asList(restTemplate.getForObject(BASE_URL + \"connector/bundle/list\",\n-                ConnBundleTO[].class));\n+        List<ConnBundleTO> bundles = connectorService.getBundles(null);\n         assertNotNull(bundles);\n         assertFalse(bundles.isEmpty());\n         for (ConnBundleTO bundle : bundles) {\n@@ -363,16 +348,14 @@ public void getBundles() {\n \n     @Test\n     public void getConnectorConfiguration() {\n-        List<ConnConfProperty> props = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"connector/{connectorId}/configurationProperty/list\", ConnConfProperty[].class, 104));\n+        List<ConnConfProperty> props = connectorService.getConfigurationProperties(104L);\n         assertNotNull(props);\n         assertFalse(props.isEmpty());\n     }\n \n     @Test\n     public void checkHiddenProperty() {\n-        ConnInstanceTO connInstanceTO = restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}.json\",\n-                ConnInstanceTO.class, \"100\");\n+        ConnInstanceTO connInstanceTO = connectorService.read(100L);\n \n         boolean check = false;\n \n@@ -387,8 +370,7 @@ public void checkHiddenProperty() {\n     @Test\n     public void checkSelectedLanguage() {\n         // 1. Check Italian\n-        List<ConnInstanceTO> connectorInstanceTOs = Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"connector/list.json?lang=it\", ConnInstanceTO[].class));\n+        List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(\"it\");\n \n         Map<String, ConnConfProperty> instanceConfMap;\n         for (ConnInstanceTO instance : connectorInstanceTOs) {\n@@ -400,8 +382,7 @@ public void checkSelectedLanguage() {\n         }\n \n         // 2. Check English (default)\n-        connectorInstanceTOs = Arrays.asList(restTemplate.getForObject(BASE_URL + \"connector/list.json\",\n-                ConnInstanceTO[].class));\n+        connectorInstanceTOs = connectorService.list(null);\n \n         for (ConnInstanceTO instance : connectorInstanceTOs) {\n             if (\"org.connid.bundles.db.table\".equals(instance.getBundleName())) {\n@@ -413,7 +394,7 @@ public void checkSelectedLanguage() {\n     }\n \n     @Test\n-    public void check() {\n+    public void validate() {\n \n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n@@ -498,41 +479,38 @@ public void check() {\n         // set connector configuration\n         connectorTO.setConfiguration(conf);\n \n-        Boolean verify = restTemplate.postForObject(BASE_URL + \"connector/check.json\", connectorTO, Boolean.class);\n+        Boolean verify = connectorService.validate(connectorTO);\n \n         assertTrue(verify);\n \n         conf.remove(password);\n         password.setValues(Collections.singletonList(\"password\"));\n         conf.add(password);\n \n-        verify = restTemplate.postForObject(BASE_URL + \"connector/check.json\", connectorTO, Boolean.class);\n+        verify = connectorService.validate(connectorTO);\n \n         assertFalse(verify);\n     }\n \n     @Test\n     public void getSchemaNames() {\n-        ConnInstanceTO conn = restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}.json\",\n-                ConnInstanceTO.class, \"101\");\n+        ConnInstanceTO conn = connectorService.read(101L);\n \n-        List<String> schemaNames = Arrays.asList(restTemplate.postForObject(BASE_URL\n-                + \"connector/schema/list?showall=true\", conn, String[].class));\n+        List<String> schemaNames = connectorService.getSchemaNames(conn.getId(), conn, true);\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n \n-        schemaNames = Arrays.\n-                asList(restTemplate.postForObject(BASE_URL + \"connector/schema/list\", conn, String[].class));\n+        schemaNames = connectorService.getSchemaNames(conn.getId(), conn, false);\n+\n         assertNotNull(schemaNames);\n         assertEquals(0, schemaNames.size());\n \n-        conn = restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}.json\", ConnInstanceTO.class, \"104\");\n+        conn = connectorService.read(104L);\n \n         // to be used with overridden properties\n         conn.getConfiguration().clear();\n \n-        schemaNames = Arrays.asList(restTemplate.postForObject(BASE_URL + \"connector//schema/list?showall=true\", conn,\n-                String[].class, conn));\n+        schemaNames = connectorService.getSchemaNames(conn.getId(), conn, true);\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n     }\n@@ -575,8 +553,8 @@ public void issueSYNCOPE112() {\n         keyColumnSchema.setRequired(true);\n         ConnConfProperty servicename = new ConnConfProperty();\n         servicename.setSchema(keyColumnSchema);\n-        servicename.setValues(\n-                Collections.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n+        servicename.setValues(Collections\n+                .singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n         servicename.setOverridable(false);\n \n         conf.add(endpoint);\n@@ -585,9 +563,9 @@ public void issueSYNCOPE112() {\n         // set connector configuration\n         connectorTO.setConfiguration(conf);\n \n-        assertFalse(restTemplate.postForObject(BASE_URL + \"connector/check.json\", connectorTO, Boolean.class));\n+        assertFalse(connectorService.validate(connectorTO));\n \n-        connectorTO = restTemplate.postForObject(BASE_URL + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n+        connectorTO = connectorService.create(connectorTO);\n         assertNotNull(connectorTO);\n         // ----------------------------------------\n "}]}